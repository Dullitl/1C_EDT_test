////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Перем мТекущийПользователь;

&НаСервере
Перем мРолиПользователя;
&НаСервере
Перем мВалютаРегУчета;
&НаСервере
Перем мОбновлятьВладельца;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь"); 
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	мВалютаРегУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мОбновлятьВладельца = Истина;	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	Иначе
		ЗаполнениеТаблиц(ТекущаяДата());
		Объект.ГодОплат = НачалоГода(ТекущаяДата());
		Объект.ГодПоставок = НачалоГода(ТекущаяДата());
		
		Объект.ЗЗСогласован 	= Ложь;
		Объект.УбыткиПрошлыхЛет = Ложь;
		Объект.СуммаВключаетНДС = Истина;
		Объект.Ответственный = мТекущийПользователь;
		Объект.ВалютаДокумента = мВалютаРегУчета;
		
		// АБС ВСТАВКА 202
		Объект.Куратор = Объект.Ответственный;
		// АБС ВСТАВКА 202 КОНЕЦ
		
		// АБС ВСТАВКА 170
		Объект.ПричинаИзмененияСтатуса = "";
		// АБС ВСТАВКА 170 КОНЕЦ
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = мВалютаРегУчета;
	
	// АБС ВСТАВКА СогласованиеЗЗ
	// Установим отображение записей по текущему заказу
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка;
		
		Элементы.Статус.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораСтатусов();
	
	УстановитьОтборИзмененияСтатусов();
	
	// АБС ВСТАВКА СогласованиеЗЗ КОНЕЦ
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	
	УстановитьРежимПросмотраДокумента();
	
	//УстановитьДоступностьТЧДоговоры();
	
	мСтатус = Объект.Статус;
	//Бреев
	мКомментарийОФК = Объект.КомментарийОФК;
	//Бреев
	
	// АБС ВСТАВКА 100
	мПроектСтатьи = Объект.ПроектСтатьи;
	// АБС ВСТАВКА 100 КОНЕЦ
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.СтраницаФайлы.Доступность = Истина;
		ОтборСтатус = ХранилищеДополнительнойИнформации.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборСтатус.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ОтборСтатус.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект");
		ОтборСтатус.ПравоеЗначение 	= Объект.Ссылка;
		ОтборСтатус.Использование	= Истина;
	Иначе
		Элементы.СтраницаФайлы.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьОтборСчетов();
    УстановитьОтборПоставок();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если мСтарыйКонтрагент <> Объект.Контрагент Тогда
		
		Объект.Договоры.Очистить();
		
		
		
	КонецЕсли;
	ЗаполнитьТипКонтрагента();
	ЗаполнитьКодКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипКонтрагента()
	
	Объект.ТипКонтрагента = Объект.Контрагент.абс_ТипыКонтрагентов;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодКонтрагента()
	
	КодКонтрагента = Объект.Контрагент.Код;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мСтарыйКонтрагент = Объект.Контрагент;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ТАБЛЧНЫХ ЧАСТЕЙ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ИтогоКолонкаОплат = ?(Объект.СледГодОплат,25,13);
	ПодсчетИтогов("ГрафикОплат","Товары",ИтогоКолонкаОплат);
	ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,25,13);
	ПодсчетИтогов("ГрафикПоставок","Товары",ИтогоКолонкаПоставок);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатПриИзменении(Элемент)
	
	ИтогоКолонкаОплат = ?(Объект.СледГодОплат,24,12);
	ПодсчетИтогов("ГрафикОплат","ГрафикОплат",ИтогоКолонкаОплат);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПоставокПриИзменении(Элемент)
	
	ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,24,12);
	ПодсчетИтогов("ГрафикПоставок","ГрафикПоставок",ИтогоКолонкаПоставок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ИтогоКолонкаОплат = ?(Объект.СледГодОплат,25,13);
	ПодсчетИтогов("ГрафикОплат","Товары",ИтогоКолонкаОплат);
	ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,25,13);
	ПодсчетИтогов("ГрафикПоставок","Товары",ИтогоКолонкаПоставок);
	
КонецПроцедуры

&НаКлиенте
Процедура ГодОплатПриИзменении(Элемент)
	УстановитьНачалоГода("ГодОплат")
КонецПроцедуры

&НаКлиенте
Процедура ГодПоставокПриИзменении(Элемент)
	УстановитьНачалоГода("ГодПоставок");
КонецПроцедуры

&НаКлиенте
Процедура Таблица1НоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ОПЛАТ И ПОСТАВОК

&НаСервере
Процедура ЗаполнениеОтдельнойТаблицы(ДатаЗаполнения,ИмяТаблицы,ДваГода)
	
	ПустаяДата = Дата(1,1,1);
	
	Если ПустаяДата = ДатаЗаполнения Тогда
		Возврат
	КонецЕсли;
	
	Если ИмяТаблицы = "ГрафикОплат" Тогда
		Таблица = Объект.ГрафикОплат;	
	Иначе
		Таблица = Объект.ГрафикПоставок;		
	КонецЕсли;
	
	врДатаЗаполнения = НачалоГода(ДатаЗаполнения);
	
	Если ДваГода Тогда
		КолМесяцев = 24;
		Если Объект.НефиксированнаяСумма Тогда 
			Объект.НефиксированнаяСумма = Ложь;
		КонецЕсли;	
	Иначе	
		КолМесяцев = 12;
	КонецЕсли;	
	НефиксированнаяСуммаПроверитьДоступность();
	
	Если Таблица.Количество() = 0 Тогда
		
		Для Инд = 1 По КолМесяцев Цикл
			СтрокаТЧ = Таблица.Добавить();
			СтрокаТЧ.Период  = врДатаЗаполнения;
			врДатаЗаполнения = НачалоМесяца(ДобавитьМесяц(врДатаЗаполнения,1));
		КонецЦикла;
		//добавим строки для итого
		СтрокаТЧ = Таблица.Добавить();
		СтрокаТЧ.Период = ПустаяДата;
		СтрокаТЧ = Таблица.Добавить();
		СтрокаТЧ.Период = ПустаяДата;
		
	Иначе
		
		Если ДваГода и Таблица.Количество() = 14 Тогда
			Таблица.Удалить(Таблица[Таблица.Количество()-1]);
			Таблица.Удалить(Таблица[Таблица.Количество()-1]);
			врДатаЗаполнения  = ДобавитьМесяц(врДатаЗаполнения,12);
			Для Инд = 13 По КолМесяцев Цикл
				СтрокаТЧ = Таблица.Добавить();
				СтрокаТЧ.Период  = врДатаЗаполнения;
				врДатаЗаполнения = НачалоМесяца(ДобавитьМесяц(врДатаЗаполнения,1));  				
			КонецЦикла;	
			//добавим строки для итого
			СтрокаТЧ = Таблица.Добавить();
			СтрокаТЧ.Период = ПустаяДата;
			СтрокаТЧ = Таблица.Добавить();
			СтрокаТЧ.Период = ПустаяДата;  
			врДатаЗаполнения = НачалоГода(ДатаЗаполнения);
		ИначеЕсли НЕ ДваГода и Таблица.Количество() > 14 Тогда
			Для Инд = -24 По -13 Цикл
				Таблица.Удалить(Таблица[-Инд]);	
			КонецЦикла;
		КонецЕсли;		
		
		Для Каждого Инд из Таблица Цикл
			Если Инд.Период <> ПустаяДата Тогда
				Инд.Период  = врДатаЗаполнения;
				врДатаЗаполнения = НачалоМесяца(ДобавитьМесяц(врДатаЗаполнения,1));	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИтогоКолонка = ?(ДваГода,25,13);
  	РеквизитФормыВЗначение("Объект").ВалютнаяСуммаБезНДСПриИзменении(Таблица,ИтогоКолонка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТаблиц(ДатаЗаполнения)
	
	ЗаполнениеОтдельнойТаблицы(ДатаЗаполнения,"ГрафикОплат",Объект.СледГодОплат);	
	ЗаполнениеОтдельнойТаблицы(ДатаЗаполнения,"ГрафикПоставок",Объект.СледГодПоставок);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеГрафикаОплат(Команда)
	
	ЗаполнениеОтдельнойТаблицы(Объект.ГодОплат,"ГрафикОплат",Объект.СледГодОплат);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеГрафикаПоставок(Команда)
	
	ЗаполнениеОтдельнойТаблицы(Объект.ГодПоставок,"ГрафикПоставок",Объект.СледГодПоставок);
	
КонецПроцедуры

&НаСервере
Процедура ПодсчетИтогов(НазваниеТабличнаяЧасть,НазваниеТабличнаяЧастьИсточник,Число)
	
	// 1. Возьмем итоговую сумму без НДС из табличной части спецификации, 
	// 2. Возьмем ставку НДС из шапки документа
	// 3. Пересчитаем итог по графику относительно п.1 по ставки п.2
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НазваниеТабличнаяЧасть = "ГрафикОплат" Тогда
		ТабличнаяЧасть = Объект.ГрафикОплат;
	ИначеЕсли НазваниеТабличнаяЧасть = "ГрафикПоставок" Тогда
		ТабличнаяЧасть = Объект.ГрафикПоставок;
	КонецЕсли;
	
	Если НазваниеТабличнаяЧастьИсточник = "Товары" Тогда
		ТабличнаяЧастьИсточник = Объект.Товары;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() >= Число + 1 Тогда
		
		СтрокаТЧ = ТабличнаяЧасть[Число];        		
		СтрокаТЧ.ВалютнаяСуммаБезНДС 	= ТабличнаяЧастьИсточник.Итог("ВалютнаясуммаБезНДС");
		//СтрокаТЧ.ВалютнаяСуммаНДС 	= ТабличнаяЧастьИсточник.Итог("ВалютнаяСуммаНДС");
		СтрокаТЧ.ВалютнаяСуммаСНДС 		= ТабличнаяЧастьИсточник.Итог("ВалютнаяСуммаСНДС");
		СтрокаТЧ.ВалютнаяСуммаНДС		= СтрокаТЧ.ВалютнаяСуммаСНДС - СтрокаТЧ.ВалютнаяСуммаБезНДС;  					
		СтрокаТЧ.СуммаБезНДС 			= ТабличнаяЧастьИсточник.Итог("СуммаБезНДС");	
		//СтрокаТЧ.СуммаНДС 			= ТабличнаяЧастьИсточник.Итог("СуммаНДС");
		СтрокаТЧ.СуммаСНДС				= ТабличнаяЧастьИсточник.Итог("СуммаСНДС");
		СтрокаТЧ.СуммаНДС				= СтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаБезНДС;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачалоГода(Название)
	
	// АБС ИЗМЕНЕНО Фролов 20111118 Не очищать суммы при изменении года графика поставок и оплат Иинициатор: Павлов
	Если Название = "ГодОплат" Тогда
		Объект.ГодОплат = НачалоГода(Объект.ГодОплат);
		ЗаполнениеОтдельнойТаблицы(Объект.ГодОплат, "ГрафикОплат", Объект.СледГодОплат);
	Иначе
		Объект.ГодПоставок = НачалоГода(Объект.ГодПоставок);
		ЗаполнениеОтдельнойТаблицы(Объект.ГодПоставок, "ГрафикПоставок", Объект.СледГодПоставок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти)
	
	ДанныеОбменаССервером = Новый Структура("Номенклатура, СтавкаНДС , Содержание");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	// Получим все необходимые данные на сервере
	ИзменениеНоменклатурыСервер(ДанныеОбменаССервером);
	
	// Проверим использование номенклатуры
	Если ДанныеОбменаССервером.абс_НеИспользовать Тогда
				
		ТекстСообщения = "" + Символы.ПС + "Выбранная номенклатура """ + СокрЛП(ДанныеОбменаССервером.Номенклатура) + """ не используется." + 
			?(ЗначениеЗаполнено(ДанныеОбменаССервером.абс_ОсновнаяНоменклатура), " Вместо выбранной номенклатуры необходимо использовать номенклатуру с кодом: " + ДанныеОбменаССервером.абс_ОсновнаяНоменклатураКод, "");
			
		#Если ВебКлиент Тогда
			Предупреждение(ТекстСообщения);
		#Иначе
		    ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		#КонецЕсли

		СтрокаТабличнойЧасти.Номенклатура 	= Неопределено;
		СтрокаТабличнойЧасти.СтавкаНДС 		= Неопределено;
		СтрокаТабличнойЧасти.Содержание 	= Неопределено;
		Возврат;
		
	ИначеЕсли НЕ ДанныеОбменаССервером.абс_СтатусНоменклатуры = ПредопределенноеЗначение("Перечисление.абс_СтатусыНоменклатуры.Использование") Тогда
			
		ТекстСообщения = "Выбранная номенклатура не находится в статусе ""Использование"".";
		
		#Если ВебКлиент Тогда
			Предупреждение(ТекстСообщения);
		#Иначе
		    ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		#КонецЕсли
		
		СтрокаТабличнойЧасти.Номенклатура 	= Неопределено;
		СтрокаТабличнойЧасти.СтавкаНДС 		= Неопределено;
		СтрокаТабличнойЧасти.Содержание 	= Неопределено;
		Возврат;
			
	КонецЕсли;	
		
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеОбменаССервером);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыСервер(ДанныеДляЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.Номенклатура) Тогда
		
		ДанныеДляЗаполнения.СтавкаНДС = ДанныеДляЗаполнения.Номенклатура.СтавкаНДС;
		ДанныеДляЗаполнения.Содержание = СокрЛП(ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное);  		
		ДанныеДляЗаполнения.Вставить("абс_НеИспользовать", ДанныеДляЗаполнения.Номенклатура.абс_НеИспользовать);
		ДанныеДляЗаполнения.Вставить("абс_ОсновнаяНоменклатура", ДанныеДляЗаполнения.Номенклатура.абс_ОсновнаяНоменклатура);
		ДанныеДляЗаполнения.Вставить("абс_ОсновнаяНоменклатураКод", ДанныеДляЗаполнения.Номенклатура.абс_ОсновнаяНоменклатура.Код);
		ДанныеДляЗаполнения.Вставить("абс_СтатусНоменклатуры", ДанныеДляЗаполнения.Номенклатура.абс_СтатусНоменклатуры);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КомандаПоказатьОплаты(Команда)
	
	ПоказатьОплатыНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПоказатьОплатыНаСервере()
	
	ДанныеФормыДерева = ТабличноеПолеОплат.Выгрузить();
	ДанныеФормыДерева.Очистить();
	//ТабличноеПолеОплатССервера = Документы.абс_ЗакупочныйЗаказ.ПолучитьТаблицуОплатТТК(Объект.Ссылка);
	ТабличноеПолеОплатССервера = Документы.абс_ЗакупочныйЗаказ.ПолучитьТаблицуОплат(Объект.Ссылка);
	Для Каждого Инд из ТабличноеПолеОплатССервера Цикл
		СтрокаПервогоУровня = ДанныеФормыДерева.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаПервогоУровня,Инд);
		//Для Каждого ВторойИнд из Инд.Строки Цикл
		//	СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
		//	ЗаполнитьЗначенияСвойств(СтрокаВторогоУровня,ВторойИнд);
		//КонецЦикла;		
	КонецЦикла;
	ТабличноеПолеОплат.Загрузить(ДанныеФормыДерева);
	 
КонецФункции

&НаКлиенте
Процедура КомандаПоказатьПоставки(Команда)
	ПоказатьПоставкиНаСервере();
КонецПроцедуры

&НаСервере
Функция ПоказатьПоставкиНаСервере()
	//
	//ТабличноеПолеПоставокССервера = Документы.абс_ЗакупочныйЗаказ.ПолучитьТаблицуПоставок(Объект.Ссылка);
	//ТабличноеПолеПоставок.Загрузить(ТабличноеПолеПоставокССервера);
	//
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НЕОБХОДИЫЕ ДЛЯ РАБОТЫ БИЗНЕС-ПРОЦЕССОВ
&НаКлиенте
Функция КонтрольСуммГрафика(СуммаОсновная, СуммаКонтролируемая, ПроцентКонтроля) Экспорт
	
	// Контроль по проценту
	//РазностьСумм = СуммаОсновная - СуммаКонтролируемая;
	//
	//Если РазностьСумм < 0 Тогда
	//	РазностьСумм = - РазностьСумм;
	//КонецЕсли;
	//
	//Возврат НЕ СуммаОсновная / 100 * ПроцентКонтроля < РазностьСумм;
	
	// Контроль до целового с округлением вверх
	//Возврат НЕ Окр(СуммаКонтролируемая) > Окр(СуммаОсновная + 0.5);
	// Контроль по проценту
	РазностьСумм = Окр(СуммаОсновная) - Окр(СуммаКонтролируемая);
	
	Если РазностьСумм < 0 Тогда
		РазностьСумм = - РазностьСумм;
	КонецЕсли;
	
	Возврат РазностьСумм<=1;
	
КонецФункции

&НаКлиенте
Процедура КонтрольГрафика(Отказ)
	
	// Не производим контроль в случае нефиксированной суммы
	Если Объект.НефиксированнаяСумма ИЛИ Объект.УбыткиПрошлыхЛет Тогда
		Возврат;
	КонецЕсли;
	
	// Не производим контроль в случае перехода на нижестоящий статус
	Если 	Объект.Статус = ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.Уточнение")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.Подготовка")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК") Тогда
		
		Возврат;
	КонецЕсли;
	           	
	//ГРАФИК ПОСТАВОК
	ГрафикПоставок = Объект.ГрафикПоставок;
	Если НЕ ГрафикПоставок.Количество() = 14 и НЕ ГрафикПоставок.Количество() = 26 Тогда
		Сообщить("Не заполнен график поставок.");
		Отказ = Истина;
	Иначе
		
		ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,25,13);
		
		СтрокаИтого 		= ГрафикПоставок[ИтогоКолонкаПоставок-1];
		СтрокаИтогоСпец 	= ГрафикПоставок[ИтогоКолонкаПоставок];
		
		ТекстСообщенияОбОшибке = "Контроль графика поставок:";
		
		Если НЕ КонтрольСуммГрафика(СтрокаИтогоСпец.ВалютнаяСуммаБезНДС, СтрокаИтого.ВалютнаяСуммаБезНДС, 0) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "
			|	Итоговая валютная сумма без НДС по графику поставок не равна итоговой по спецификации.";
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ КонтрольСуммГрафика(СтрокаИтогоСпец.ВалютнаяСуммаНДС, СтрокаИтого.ВалютнаяСуммаНДС, 0) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "
			|	Итоговая валютная сумма НДС по графику поставок не равна итоговой по спецификации.";
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ КонтрольСуммГрафика(СтрокаИтогоСпец.ВалютнаяСуммаСНДС, СтрокаИтого.ВалютнаяСуммаСНДС, 0) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "
			|	Итоговая валютная сумма с НДС по графику поставок не равна итоговой по спецификации.";
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ КонтрольСуммГрафика(СтрокаИтогоСпец.СуммаБезНДС, СтрокаИтого.СуммаБезНДС, 0) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "
			|	Итоговая сумма без НДС по графику поставок не равна итоговой по спецификации.";
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ КонтрольСуммГрафика(СтрокаИтогоСпец.СуммаНДС, СтрокаИтого.СуммаНДС, 0) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "
			|	Итоговая сумма НДС по графику поставок не равна итоговой по спецификации.";
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ КонтрольСуммГрафика(СтрокаИтогоСпец.СуммаСНДС, СтрокаИтого.СуммаСНДС, 0) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "
			|	Итоговая сумма с НДС по графику поставок не равна итоговой по спецификации.";
			Отказ = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ (ТекстСообщенияОбОшибке = "Контроль графика поставок:") Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкиНаСервере(Отказ, ТекстСообщения)
	
	Если НЕ Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции Тогда   		
		Возврат; 		
	КонецЕсли;
	
	Если НЕ ПроверитьЦФО(Объект.ЦФО) Тогда  		
		ТекстСообщения = ТекстСообщения + "Выбрана группа ЦФО.";
		Отказ = Истина;
	КонецЕсли;
		
	Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.Исполнение") Тогда
		Если Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.ТМЦУслуги") Тогда
			// или Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.РБП") Тогда			
		
			Если Объект.Договоры.Количество() = 0 Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "В заказе с типом ТМЦ/Услуги должны быть заполнены договоры.";
				Отказ = Истина;
			//Иначе	
			//	ВрТекст = "";
			//	ВрТекст = РеквизитФормыВЗначение("Объект").КонтрольДоговоров(ВрТекст);	
			//	Если НЕ ВрТекст = "" Тогда 
			//		ТекстСообщения = ТекстСообщения + Символы.ПС + "В заказе с типом ТМЦ/Услуги должны быть заполнены договоры.";
			//		ТекстСообщения = ТекстСообщения + Символы.ПС + ВрТекст;
			//		Отказ = Истина;					
			//		//Сообщить(ВрТекст);
			//		//ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ);
			//	КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.Оборудование") И НЕ Объект.ЗЗСогласован Тогда	
			
			Если Объект.Договоры.Количество() > 0 Тогда 
				ТекстСообщения = ТекстСообщения + Символы.ПС + "В заказе с типом оборудование договоров быть не должно.";
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим табличную часть с договорами
	// Для ТМЦ/Услуги должна быть хоть одна строчка
	// Для оборудования строк быть не должно
	Если Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.ТМЦУслуги") Тогда
		Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДоговора.ТипДоговора) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Не выбран тип договора в строке " + СтрокаДоговора.НомерСтроки;
				Отказ = Истина;
			ИначеЕсли СтрокаДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.абс_ТипыДоговоров.Договор") Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДоговора.ДоговорКонтрагента) Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Не выбран договор в строке " + СтрокаДоговора.НомерСтроки;
					Отказ = Истина;
				ИначеЕсли СтрокаДоговора.ДоговорКонтрагента.абс_БезЗакупочногоЗаказа Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Выбран договор не требующий закупочного заказа в строке " + СтрокаДоговора.НомерСтроки;
					Отказ = Истина;
				ИначеЕсли СтрокаДоговора.ДоговорКонтрагента.абс_ТипДоговора = ПредопределенноеЗначение("Перечисление.абсТипыДоговоров.СоглашениеОКонфиденциальности") Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Выбран договоро-соглашение о конфищенциальности в строке " + СтрокаДоговора.НомерСтроки;
					Отказ = Истина;
				ИначеЕсли СтрокаДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.абс_ТипыДоговоров.АвансовыйОтчет") Тогда
					Если Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.Оборудование") Тогда  
						ТекстСообщения = ТекстСообщения + Символы.ПС + "Оборудование не может быть оприходовано по авансовому отчету.";
						Отказ = Истина;
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
		
		// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов
		Если Объект.Контрагент.абс_СтатусКонтрагента <> Перечисления.абсСтатусыКонтрагентов.Активный И Объект.Контрагент.абс_СтатусКонтрагента <> Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
			ТекстСообщения = ТекстСообщения+Символы.ПС+"Выбран не активный контрагент.";
			Отказ = Истина;
			
		КонецЕсли;
		
		Если НЕ Объект.Контрагент.Поставщик Тогда
			ТекстСообщения = ТекстСообщения+Символы.ПС+"Выбран не поставщик.";
			Отказ = Истина;		
		КонецЕсли;		
	КонецЕсли;
	
	Для Каждого СтрокаДоговоры Из Объект.Договоры Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДоговоры.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаДоговоры.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Договор " + СтрокаДоговоры.ДоговорКонтрагента + " не является договором с поставщиком.";
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ СтрокаДоговоры.ДоговорКонтрагента.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
			// АБС Добавлено Фролов 20120603 Добавлено для возможности ввода ЗЗ в рублях по договорам в УЕ
			Если НЕ (СтрокаДоговоры.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И Объект.ВалютаДокумента = мВалютаРегУчета) Тогда
			
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Валюта взаиморасчетов по договору " + СтрокаДоговоры.ДоговорКонтрагента + " (" + 
					СтрокаДоговоры.ДоговорКонтрагента.ВалютаВзаиморасчетов +  "), отличается от валюты документа (" + Объект.ВалютаДокумента + ").";
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Сч = 1;
	для каждого СтрокаДоговоры из Объект.Договоры Цикл
		Если СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрыт или
			СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ или
			СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отмена
			// Добавляем проверку в договор на то чтобы его нельзя было вывести из подготовки без ЗЗ на ОФК.
			//или СтрокаДоговоры.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка
			Тогда
			
			Отказ = Истина;
			ТекстСообщения = ТекстСообщения+Символы.ПС+"В строке "+Сч+" таблицы ""Договоры"" выбран договор с неверным статусом";
		КонецЕсли;
		
		Сч = Сч+1;
	КонецЦикла;
	
	Если Объект.БюджетнаяСтатья.абс_ДоходнаяСтатья Тогда 
		ТекстСообщения = ТекстСообщения+Символы.ПС+"Выбрана доходная статья.";
		Отказ = Истина;
	КонецЕсли;

	
	// Проверим табличную часть спецификации
	ТекстПроверкиСпецификации = "Проверка спецификации:";
	СпецНеЗаполнена = Ложь;
	
	Если Объект.Товары.Количество() = 0 Тогда 
		ТекстПроверкиСпецификации = ТекстПроверкиСпецификации + Символы.ПС + "Не заполнена спецификация.";
		СпецНеЗаполнена = Истина;
	Иначе
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТекстПроверкиСпецификации = ТекстПроверкиСпецификации 
					+ Символы.ПС + "В строке " + СтрокаТовары.НомерСтроки + " не выбрана номенклатура.";
					
				СпецНеЗаполнена = Истина;
			ИначеЕсли НЕ СтрокаТовары.Номенклатура.абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
				ТекстПроверкиСпецификации = ТекстПроверкиСпецификации + Символы.ПС 
					+ "В строке " + СтрокаТовары.НомерСтроки + " выбранная номенклатура находится не в статусе 'Использование'";
					
				СпецНеЗаполнена = Истина;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СпецНеЗаполнена Тогда
		
		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстПроверкиСпецификации;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЦФО(ЦФОСсылка)
	
	// Если пользователь ДЗО, то по нему не происходит проверки на группу ЦФО
	Если ПараметрыСеанса.абс_ПользовательДЗО Тогда
		Возврат ЗначениеЗаполнено(ЦФОСсылка.Родитель);
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Подразделения.Ссылка
		                      |ИЗ
		                      |	Справочник.Подразделения КАК Подразделения
		                      |ГДЕ
		                      |	Подразделения.Родитель = &ЦФОСсылка");
							  
		Запрос.УстановитьПараметр("ЦФОСсылка", ЦФОСсылка);
		
		Возврат Запрос.Выполнить().Пустой();
		
	КонецЕсли;

	
КонецФункции
       
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.Подготовка") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.Подготовка") и
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.Отказ") и
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.Уточнение") и
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации") Тогда		
		// Проверим заполненность документа	
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена валюта документа.", Отказ);
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена организация.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипЗакупочногоЗаказа) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен тип закупочного заказа.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ЦФО) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен ЦФО.", Отказ);
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.ЦФУ) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен ЦФУ.", Отказ);
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.БюджетнаяСтатья) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена бюджетная статья.", Отказ);
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипКонтрагента) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен тип контрагента.", Отказ);
		КонецЕсли;		
		
		Если Найти(""+Объект.ЦФУ,"Связь")>0  Тогда
			Если Найти(""+Объект.БюджетнаяСтатья,"Единая статья КВ")>0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Объект.ТЭО) Тогда 
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено ТЭО.", Отказ);
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(Объект.ТипСети) Тогда 
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен тип сети.", Отказ);
				КонецЕсли;	
				
				//Если НЕ ЗначениеЗаполнено(Объект.ТипРасхода) Тогда 
				//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен тип расхода.", Отказ);
				//КонецЕсли;	
				
			КонецЕсли; 		
		КонецЕсли;
		
		Если Найти(""+Объект.ЦФУ,"Администрация")>0  или Найти(""+Объект.ЦФУ,"Эксплуатация")>0 Тогда
			Если Найти(""+Объект.БюджетнаяСтатья,"Единая статья КВ")>0 Тогда
				Если НЕ ЗначениеЗаполнено(Объект.КВ) Тогда 
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле КВ.", Отказ);
				КонецЕсли;	
				
			КонецЕсли; 		
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.ГодОплат) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен год оплат.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ГодПоставок) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена год поставок.", Отказ);
		КонецЕсли;
		
		Если Объект.Товары.Количество() = 0 и не объект.НефиксированнаяСумма Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена спецификация.", Отказ);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
			
	ТекстСообщения = "";
	ВыполнитьПроверкиНаСервере(Отказ,ТекстСообщения);
	
	Если Отказ И ЗначениеЗаполнено(ТекстСообщения) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
	
	КонтрольГрафика(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(Объект.Ссылка));
		
	Объект.ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		
		ВвестиСтроку(Объект.ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина);
		
		// АБС ВСТАВКА Вводим номера телефонов 
		абс_БизнесПроцессыКлиент.ВвестиВнутреннийНомерТелефона(ПолучитьДанныеПользователя());
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПользователя() 
	
	СтруктураПользователя = Новый Структура("Пользователь, ВнутреннийНомер");   	
	СтруктураПользователя.Пользователь 		= глЗначениеПеременной("глТекущийПользователь");
	СтруктураПользователя.ВнутреннийНомер 	= СтруктураПользователя.Пользователь.абс_ВнутреннийНомер;
	
	Возврат СтруктураПользователя;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Обновим статус ЗЗ в регистре статусов	
	// Запустим необходимые бизнес процессы	
	// Попробуем выполнить задачи по закупочному заказу	
	// Обновим список досупных состояний
	
	ПослеЗаписиЗЗНаСервере(ПараметрыЗаписи);    		
	Элементы.Статус.ТолькоПросмотр = Не ЗначениеЗаполнено(Объект.Ссылка); 	
	УстановитьДоступностьЗакладок();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиЗЗНаСервере(ПараметрыЗаписи)
		
	// Обновим список досупных состояний
	ЗаполнитьСписокВыбораСтатусов();  	
	// Установим отбор списка изменения статусов
	УстановитьОтборИзмененияСтатусов(); 	
	// Установим режим просмотра документа
	УстановитьРежимПросмотраДокумента();
	
КонецПроцедуры
   
// Процедуры и функции для заполнения доступных статусов
&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусов() Экспорт	
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Список = Элементы.Статус.СписокВыбора;
	
	Список.Очистить();
	
	Список.Добавить(Объект.Статус);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ВозможноУточнениеИнициатором 	= Ложь;
	РазрешеноСогласование 			= Ложь;
	
    // Если есть задачи текущему пользователю, то ему разрешено изменить статус
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	                      |			&ТекПользователь,
	                      |			ОбъектЗадачи = &ЗЗСсылка
	                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
						  
	Запрос.УстановитьПараметр("ТекПользователь"	, мТекущийПользователь);
	Запрос.УстановитьПараметр("ЗЗСсылка"		, Объект.Ссылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		
		РазрешеноСогласование = Истина;
		
	КонецЕсли;		
	
	ТекСтатус = Объект.Ссылка.Статус;
	
	Если Объект.Ответственный = мТекущийПользователь Тогда
		СтатусыУточненияИнициатором = абс_БизнесПроцессы.ПолучитьСтатусыУточненияИнициатором();
		
		Если НЕ СтатусыУточненияИнициатором.Найти(Объект.Ссылка.Статус) = Неопределено Тогда
			
			ВозможноУточнениеИнициатором = Истина;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК);
						
		КонецЕсли;
	КонецЕсли;
	
	// Какое может быть согласование если нету задачи пользователю.
	Если НЕ РазрешеноСогласование И 
		 НЕ Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка И
		 НЕ Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован И 
		 НЕ Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение И
		 НЕ Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен И
		 НЕ Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор И
		 НЕ Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда
		Возврат;
		
	КонецЕсли;

	
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда	
		
		Если Константы.абс_ОтклАлгоритмСогласованияЗЗ2013.Получить() = Истина ИЛИ Объект.Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797
			
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
		КонецЕсли;
	
		//АБС-Пр2 3861+	
		ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.Дирекция, ТекущаяДата(), Объект.Организация);
		Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
			Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
			И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
			Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
		КонецЕсли;			
		//-
        //АБС Кололмиец 19904+
		Иначе 
			
			ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Объект.Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Объект.Организация, Справочники.РолиИсполнителей.ДиректорДирекции);
			
			Если ОтветственныеДирекции = Неопределено ИЛИ ОтветственныеДирекции.Количество() = 0 Тогда
				//Проверка по Департаменту
				ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Объект.Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Объект.Организация, Справочники.РолиИсполнителей.РуководительДепартамента);
				
				Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
					//в ЦФО
					Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда

						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
						
					КонецЕсли;
					
				Иначе   //в Департамент
					Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
						
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
						
						ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.Департамент);
					КонецЕсли;
					
				КонецЕсли;
			Иначе //в Дирекцию
				//Проверка по Департаменту
				ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Объект.Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Объект.Организация, Справочники.РолиИсполнителей.РуководительДепартамента);
				
				Если НЕ (ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0) Тогда
					
					ОтветственныеДирекции = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.Дирекция, абс_СерверныеФункции.ПолучитьДатуСервера(), Объект.Организация);
					Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено
						Или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) 
						И   (НЕ ОтветственныеДирекции.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено 
						Или мТекущийПользователь.абс_Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда)Тогда			
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
					ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
					КонецЕсли;						
				ИначеЕсли НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции);
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		//АБС Коломиец 19904-
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции Тогда
		
		Если Константы.абс_ОтклАлгоритмСогласованияЗЗ2013.Получить() = Истина ИЛИ Объект.Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда   //АБС Коломиец 19797
			
			Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
				
				ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.Департамент);
				
				// Если это ответственный департамента, имеет роль руководителя департамента
				// если если это суперпользователь
				Если 	((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено) И
					(НЕ ОтветственныеДепартамента.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))  
					ИЛИ
					(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
					
					ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.ЦФО);
					
					Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
						(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
						ИЛИ
						(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
						
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
					КонецЕсли;
					
				КонецЕсли;
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
			КонецЕсли;
			
		//АБС Коломиец 19904+
		Иначе
			
			//Проверка по Департаменту
			ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделенияСРолью(Объект.Департамент, абс_СерверныеФункции.ПолучитьДатуСервера(), Объект.Организация, Справочники.РолиИсполнителей.РуководительДепартамента);
			
			Если ОтветственныеДепартамента = Неопределено ИЛИ ОтветственныеДепартамента.Количество() = 0 Тогда
				//в ЦФО
				Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
					//КонецЕсли;
					Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено Тогда
						
						ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.ЦФО);
						
						Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
							(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
							ИЛИ 
							(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
							
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						
					КонецЕсли;
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);					
				КонецЕсли;
			Иначе   //в Департамент
				Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДиректорДирекции) = Неопределено Тогда
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента);
					
					ОтветственныеДепартамента = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.Департамент);
					
					Если 	((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено) И
						(НЕ ОтветственныеДепартамента.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))  
						ИЛИ
						(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
						
						Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
						
						ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.ЦФО);
						
						Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
							(НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
							ИЛИ
							(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
							
							Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
						КонецЕсли;
						
					КонецЕсли;
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
		//АБС Коломиец 19904-
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО);
			
			ОтветственныеЦФО = абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.ЦФО);
			
			Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) И
				 (НЕ ОтветственныеЦФО.Найти(мТекущийПользователь.абс_Сотрудник) = Неопределено))
				 ИЛИ 
				 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			КонецЕсли;

			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительДФМ) = Неопределено Тогда
			
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
							
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
				Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
				Справочники.РолиИсполнителей.РуководительЦФУ);

			Если Объект.ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
				
			ИначеЕсли Объект.ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				
			Иначе
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ);
				
			КонецЕсли;
			
			// 20110822 Активирована, добавленная ранее возможность отправки на уточнение на ОФК.
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК);
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);

		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФУ) = Неопределено Тогда
						
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				//абс Родин Лимитный контроль
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль
				
			КонецЦикла;
							
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
				Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
				Справочники.РолиИсполнителей.ПервыйВицеПрезидент);

			Если Объект.ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
				
			ИначеЕсли Объект.ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				
			Иначе
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам);
				
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПервыйВицеПрезидент) = Неопределено Тогда
						
			ДоговорыВИсполнении = Истина;
			
			Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
				
				Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
					Продолжить;
				КонецЕсли;
				//абс Родин Лимитный контроль			
				ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
				//абс Родин Лимитный контроль		
			КонецЦикла;
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
				Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
				Справочники.РолиИсполнителей.Президент);
				
			Если Объект.ИтогСуммаСНДС < ПределСуммыУтверждения И ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
				
			ИначеЕсли Объект.ИтогСуммаСНДС < ПределСуммыУтверждения И НЕ ДоговорыВИсполнении Тогда
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
				
			Иначе
				
				Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом);
				
			КонецЕсли;
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);

		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		
		ДоговорыВИсполнении = Истина;
			
		Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
			
			Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
				Продолжить;
			КонецЕсли;
			//абс Родин Лимитный контроль			
			ДоговорыВИсполнении = ДоговорыВИсполнении 
			И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
			//абс Родин Лимитный контроль			
		КонецЦикла;
		
		Если ДоговорыВИсполнении Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		Иначе
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Если Объект.Ответственный = мТекущийПользователь
			 ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Отменен);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение Тогда
		
		Если Объект.Ответственный = мТекущийПользователь ИЛИ 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			
			БПСогласование = НайтиБПСогласование();
			
			Если НЕ БПСогласование = Неопределено Тогда
				
				Если БПСогласование.СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда
					
					Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			
		КонецЕсли;
		
		Если МожноПеревестиВИсполнение() Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации Тогда
		
		Если Объект.Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка);
			
			БПСогласование = НайтиБПСогласование();
			
			Если НЕ БПСогласование = Неопределено Тогда
				Список.Добавить(БПСогласование.СтатусИзмененияСпецификации);
			КонецЕсли;
		
		КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		
		Если Объект.Ответственный = мТекущийПользователь ИЛИ РазрешеноСогласование Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт);
			
		КонецЕсли;	
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			
		КонецЕсли;
		
		//АБС ВСТАВКА №6830 НАЧАЛО
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Завершен);
			
		КонецЕсли;	
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ЗЗвСтатусЗавершен) = Неопределено) 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
			
		КонецЕсли;
		//\\АБС ВСТАВКА №6830 КОНЕЦ      		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор Тогда
		
		ДоговорыВИсполнении = Истина;
			
		Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
			
			Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
				Продолжить;
			КонецЕсли;
			
			//абс Родин Лимитный контроль			
			ДоговорыВИсполнении = ДоговорыВИсполнении И 
			(СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
			//абс Родин Лимитный контроль		
			
		КонецЦикла;
			
		Если ДоговорыВИсполнении Тогда
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		КонецЕсли;
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
			
		КонецЕсли;			
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Закрыт Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Отменен Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросИзменений Тогда
		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
			БПСогласование = НайтиБПСогласование();
			
			Если НЕ БПСогласование = Неопределено Тогда
				
				Список.Добавить(БПСогласование.СтатусУточненияЗЗ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ);
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВозможноУточнениеИнициатором Тогда
		Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			ЭлементУточнить = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
			
			Если НЕ ЭлементУточнить = Неопределено Тогда
				Список.Удалить(ЭлементУточнить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораСтатусов1()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Список = Элементы.Статус.СписокВыбора;
	
	ТекСтатус = Объект.Ссылка.Статус;

	Если Список = Неопределено Тогда
		Список = Новый СписокЗначений;
	Иначе
		Список.Очистить();
	КонецЕсли;
	
	Список.Добавить(ТекСтатус);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ВозможноУточнениеИнициатором 	= Ложь;
	РазрешеноСогласование 			= Ложь;
	
	Если Объект.Ответственный = мТекущийПользователь Тогда
		
		СтатусыУточненияИнициатором = абс_БизнесПроцессы.ПолучитьСтатусыУточненияИнициатором();
		
		Если НЕ СтатусыУточненияИнициатором.Найти(ТекСтатус) = Неопределено Тогда
			
			Список.Добавить(Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК);
			ВозможноУточнениеИнициатором = Истина;
			
			// Если есть задачи текущему пользователю, то ему разрешено изменить статус
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
			                      |ИЗ
			                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
			                      |			&ТекПользователь,
			                      |			ОбъектЗадачи = &ЗЗСсылка
			                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
								  
			Запрос.УстановитьПараметр("ТекПользователь"	, мТекущийПользователь);
			Запрос.УстановитьПараметр("ЗЗСсылка", Объект.Ссылка);
			
			ВыборкаЗадач = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗадач.Следующий() Тогда
				
				РазрешеноСогласование = Истина;
				
			КонецЕсли;					
					
			Если НЕ РазрешеноСогласование Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;		
	
	ЗапросДоступныхСтатусов = Новый Запрос("ВЫБРАТЬ
	                                       |	абс_ТаблицаСтатусовБПТТК.СтатусНовый КАК СтатусНовый,
	                                       |	абс_ТаблицаСтатусовБПТТК.УсловиеПерехода,
	                                       |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса,
	                                       |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаНовыйСтатус
	                                       |ИЗ
	                                       |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                                       |ГДЕ
	                                       |	абс_ТаблицаСтатусовБПТТК.Статус = &Статус
	                                       |	И абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса В(&СписокРолей)
	                                       |	И абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов)
	                                       |
	                                       |УПОРЯДОЧИТЬ ПО
	                                       |	СтатусНовый");
										   
	ЗапросДоступныхСтатусов.УстановитьПараметр("Статус"		, ТекСтатус);
	ЗапросДоступныхСтатусов.УстановитьПараметр("СписокРолей", мРолиПользователя);
	
	ТаблицаДоступныхСтатусов = ЗапросДоступныхСтатусов.Выполнить().Выгрузить();
		
	Для Каждого СтрокаДоступногоСтатуса Из ТаблицаДоступныхСтатусов Цикл
		Если Список.НайтиПоЗначению(СтрокаДоступногоСтатуса.СтатусНовый) = Неопределено Тогда
			Список.Добавить(СтрокаДоступногоСтатуса.СтатусНовый);
		КонецЕсли;
	КонецЦикла;
	
	// Откорректируем список доступных состояний по пределам утверждения сумм
	// Проверим для первого Вице-президента
	Если  НЕ Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам) = Неопределено 
		И НЕ ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		
		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
		
		ЭлементНедоступноеСостояние = Неопределено;
		
		Если Объект.ИтогСуммаСНДС > ПределСуммыУтверждения Тогда			
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		Иначе
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам); 
		КонецЕсли;
		
		Если Не ЭлементНедоступноеСостояние = Неопределено Тогда
			Список.Удалить(ЭлементНедоступноеСостояние);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим для президента
	Если  НЕ Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом) = Неопределено
		И НЕ ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		
		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
		    Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов,
			Справочники.РолиИсполнителей.Президент);
		
		ЭлементНедоступноеСостояние = Неопределено;
		
		Если Объект.ИтогСуммаСНДС > ПределСуммыУтверждения Тогда			
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		Иначе
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом); 
		КонецЕсли;
		
		Если Не ЭлементНедоступноеСостояние = Неопределено Тогда
			Список.Удалить(ЭлементНедоступноеСостояние);
		КонецЕсли;
		
	КонецЕсли;
		
	// Проверим для ЦФУ, если договоры согласованы, то можно сразу согласовать
	//  либо отправить на согласование ПВП и Президент
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		ЭлементСогласован 		= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		ЭлементУтверждениеПВП	= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам);
		ЭлементОжиданиеДоговора = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);
		
		ДоговорыВИсполнении = Истина;
		
		Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
					
			Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
				Продолжить;
			КонецЕсли;			
			//абс Родин Лимитный контроль
			ДоговорыВИсполнении = ДоговорыВИсполнении 
			И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
			//абс Родин Лимитный контроль
		КонецЦикла;
						
		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.ПервыйВицеПрезидент);

		Если Объект.ИтогСуммаСНДС < ПределСуммыУтверждения Тогда
			Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеПВП);
			КонецЕсли;
			
			Если ДоговорыВИсполнении Тогда
				Если НЕ ЭлементОжиданиеДоговора = Неопределено Тогда
					Список.Удалить(ЭлементОжиданиеДоговора);
				КонецЕсли;
			Иначе
				Если НЕ ЭлементСогласован = Неопределено Тогда
					Список.Удалить(ЭлементСогласован);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;
			
			Если НЕ ЭлементОжиданиеДоговора = Неопределено Тогда
				Список.Удалить(ЭлементОжиданиеДоговора);
			КонецЕсли;			
			
		КонецЕсли;
							
	КонецЕсли;
	
	// Првоверим для ПВП
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		ЭлементСогласован 				= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		ЭлементУтверждениеПрезидентом	= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом);
		ЭлементОжиданиеДоговора 		= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);		
		
		ДоговорыВИсполнении = Истина;
		
		//абс Родин Лимитный контроль
		Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
			ДоговорыВИсполнении = ДоговорыВИсполнении 
				И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
				СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
		КонецЦикла;
		//абс Родин Лимитный контроль
		
		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов, 
			Справочники.РолиИсполнителей.Президент);

		Если Объект.ИтогСуммаСНДС < ПределСуммыУтверждения Тогда
				
			Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеПрезидентом);
			КонецЕсли;	 
			
			Если ДоговорыВИсполнении Тогда
				Если НЕ ЭлементОжиданиеДоговора = Неопределено Тогда
					Список.Удалить(ЭлементОжиданиеДоговора);
				КонецЕсли;
			Иначе
				Если НЕ ЭлементСогласован = Неопределено Тогда
					Список.Удалить(ЭлементСогласован);
				КонецЕсли;			
			КонецЕсли;
		Иначе
			
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;
			
			Если НЕ ЭлементОжиданиеДоговора = Неопределено Тогда
				Список.Удалить(ЭлементОжиданиеДоговора);
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	// Првоверим для президента
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		ЭлементСогласован 				= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
		ЭлементОжиданиеДоговора 		= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор);		
		
		ДоговорыВИсполнении = Истина;
		
		//абс Родин Лимитный контроль
		Для Каждого СтрокаДоговора Из Объект.Договоры Цикл
			ДоговорыВИсполнении = ДоговорыВИсполнении 
			И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка  ИЛИ 
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
			СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
		КонецЦикла;
		//абс Родин Лимитный контроль

Если ДоговорыВИсполнении Тогда
			Если НЕ ЭлементОжиданиеДоговора = Неопределено Тогда
				Список.Удалить(ЭлементОжиданиеДоговора);
			КонецЕсли;
			
		Иначе
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	// Проверим на статусе Согласован 
	// Заказ с типом Оборудование ДирККР 	может перевести в Исполнение
	// Заказ с типом ТМЦ/Услуги Инициатор	может перевести в Исполлнение
	
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		
		ЭлементИсполнение 	= Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение);
		ЭлементИзмениеСпец  = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации);
	
		Если НЕ МожноПеревестиВИсполнение() Тогда
			Если НЕ ЭлементИсполнение = Неопределено Тогда
				Список.Удалить(ЭлементИсполнение);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		БПСогласование = НайтиБПСогласование();
		
		Если НЕ БПСогласование = Неопределено Тогда
			Список.Добавить(БПСогласование.СтатусУточненияЗЗ);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВозможноУточнениеИнициатором Тогда
		ЭлементУточнить = Список.НайтиПоЗначению(Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение);
		
		Если НЕ ЭлементУточнить = Неопределено Тогда
			Список.Удалить(ЭлементУточнить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МожноПеревестиВИсполнение()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Если Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
		РолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
		
		Если НЕ РолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги Тогда
		// или Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.РБП Тогда
		Если Объект.Ответственный = мТекущийПользователь ИЛИ 
			НЕ (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция НайтиБПСогласование()
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоЗЗ(Объект.Ссылка, "абсСогласованиеЗакупочногоЗаказа");	
	
КонецФункции

&НаСервере
Функция ПолучитьПределСуммыЗаказаУтвержденияПоРоли(РольИсполнителя)
	
	СтруктураПредела = РегистрыСведений.абс_ПределыСуммУтвержденияЗакупочногоЗаказа.ПолучитьПоследнее(ТекущаяДата(), 
		Новый Структура("Роль", РольИсполнителя));
		
	Возврат СтруктураПредела.ПределСумма;	
	
КонецФункции

// Процедуры для работы регистром изменения статусов
&НаСервере
Функция ПолучитьСотрудникаПоФизЛицу(ФизЛицо, ТекущаяДата = Неопределено)
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДата();
	КонецЕсли;
	
	ЗапросСотрудник = Новый Запрос("ВЫБРАТЬ
	                               |	СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник
	                               |ИЗ
	                               |	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(
	                               |			&Период,
	                               |			Сотрудник.Физлицо = &ФизЛицо
	                               |				И (НЕ Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает))
	                               |				И (НЕ Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПустаяСсылка))) КАК СостояниеРаботниковОрганизацийСрезПоследних");
	ЗапросСотрудник.УстановитьПараметр("Период"		, ТекущаяДата);
	ЗапросСотрудник.УстановитьПараметр("ФизЛицо"	, ФизЛицо);
	
	ВыборкаСотрудник = ЗапросСотрудник.Выполнить().Выбрать();
	
	Сотрудник = Неопределено;
	
	Если ВыборкаСотрудник.Следующий() Тогда
		Сотрудник = ВыборкаСотрудник.Сотрудник;
	КонецЕсли;
	
	Возврат Сотрудник;
КонецФункции

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СпрашиватьПричину = НЕ Объект.Статус = Объект.Ссылка.Статус;
	
	Если НЕ СпрашиватьПричину Тогда
		Если ((Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение И Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение) И
		 	(НЕ Объект.Ссылка.ОтветственныйСотрудникДирККР = Объект.ОтветственныйСотрудникДирККР) И ЗначениеЗаполнено(Объект.Ссылка.ОтветственныйСотрудникДирККР)) Тогда
			
			СпрашиватьПричину = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпрашиватьПричину;
	
КонецФункции

&НаСервере
Процедура УстановитьРежимПросмотраДокумента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	ТекСтатус = Объект.Ссылка.Статус;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_ТаблицаСтатусовБПТТК.РедактированиеДокумента,
	                      |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса
	                      |ИЗ
	                      |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                      |ГДЕ
	                      |	абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов)
	                      |	И абс_ТаблицаСтатусовБПТТК.Статус = &ТекСтатус");
						  
	Запрос.УстановитьПараметр("ТекСтатус", ТекСтатус);
	
	РазрешеноРедактирование 		= Ложь;
	РазрешеноМенятьСтатус 			= Ложь;
	РазрешеноРедактироватьДоговоры 	= Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ мРолиПользователя.Найти(Выборка.ОтветственныйЗаИзменениеСтатуса) = Неопределено Тогда
			РазрешеноМенятьСтатус = Истина
		КонецЕсли;
		
		РазрешеноРедактирование = РазрешеноРедактирование ИЛИ Выборка.РедактированиеДокумента;
	КонецЦикла;
	
	Если Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги И Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		РазрешеноРедактирование = Ложь;
	КонецЕсли;
	
	// Добавили определение ответственных лиц по ответственным в подразделениях
	// поэтому не проверяем их по ролям пользователей.
	
	Если ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка И
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) Тогда
		
		РазрешеноМенятьСтатус = Истина;
	Иначе
		РазрешеноМенятьСтатус = Ложь;
	КонецЕсли;
	
	// Если есть задачи текущему пользователю, то ему разрешено изменить статус
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	                      |			&ТекПользователь,
	                      |			ОбъектЗадачи = &ЗЗСсылка
	                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
						  
	Запрос.УстановитьПараметр("ТекПользователь"	, мТекущийПользователь);
	Запрос.УстановитьПараметр("ЗЗСсылка"		, Объект.Ссылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;	
	
	Если (ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор ИЛИ
		  ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован ИЛИ 
		  ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение) И
		  (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
		РазрешеноМенятьСтатус = Истина;  
	КонецЕсли;
	
	// АБС ВСТАВКА АБС-Ф 4669
	// Инициатор закупочного заказа может отправить его в Изменение спецификации
	Если (ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован) И 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = неопределено И
			 Объект.Ответственный = мТекущийПользователь) Тогда
			 
		РазрешеноМенятьСтатус = Истина;
			 
	КонецЕсли;	
	
	Если ОБъект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование И Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение
		И НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено Тогда
		
		РазрешеноРедактирование = Истина;
				
	КонецЕсли;	
		
	// Установим необходимый вид просмотра документа
	Если НЕ РазрешеноРедактирование Тогда
		
		ТолькоПросмотр = Истина;
		
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаписатьСтатус.Доступность = РазрешеноМенятьСтатус;
		
	Иначе
		
		ТолькоПросмотр = Ложь;
		
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаписатьСтатус.Доступность = Истина;

	КонецЕсли;
	
	// Проверим можно ли редактировать табличную часть с договорами.
	Если Объект.Ссылка.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги Тогда
		// или Объект.Ссылка.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.РБП Тогда
		
		РазрешеноРедактироватьДоговоры = 
			ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка ИЛИ
			ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;
			
	ИначеЕсли Объект.Ссылка.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
			
		РазрешеноРедактироватьДоговоры = 	
			ТекСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;
			
	КонецЕсли;
	
	Если Объект.Ответственный = мТекущийПользователь Тогда
		
		СтатусыУточненияИнициатором = абс_БизнесПроцессы.ПолучитьСтатусыУточненияИнициатором();
		
		Если НЕ СтатусыУточненияИнициатором.Найти(Объект.Ссылка.Статус) = Неопределено Тогда
			РазрешеноМенятьСтатус = Истина;
		КонецЕсли;			
	КонецЕсли;
	
	Если Объект.ЗЗСогласован 
		И (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено) Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;
	
	//Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СозданиеСчетовНаУбыткиПрошлыхЛет) = Неопределено Тогда
		Элементы.УбыткиПрошлыхЛет.Видимость = Истина;
	//Иначе
	//	Элементы.УбыткиПрошлыхЛет.Видимость = Ложь;
	//КонецЕсли;
		
	РазрешеноЗаписатьДокумент = (РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус);		
	
	Элементы.Статус.ТолькоПросмотр = НЕ РазрешеноМенятьСтатус;	
	
	// АБС ВСТАВКА 100
	Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.УстановкаПроектаСтатьи) = Неопределено Тогда
		
		РазрешеноЗаписатьДокумент = Истина;
		
	КонецЕсли;
	// АБС ВСТАВКА 100 КОНЕЦ
	
	Элементы.ФормаКнопкаПровестиИЗакрыть.Доступность 	= РазрешеноЗаписатьДокумент;	
	Элементы.ФормаКнопкаЗаписать.Доступность 			= РазрешеноЗаписатьДокумент;
	Элементы.ФормаКнопкаПровести.Доступность 			= РазрешеноЗаписатьДокумент;
	Элементы.ФормаКнопкаОтменитьПроведение.Доступность 	= РазрешеноЗаписатьДокумент;
	
	//ЭлементыФормы.Договоры.ТолькоПросмотр = НЕ (РазрешеноМенятьСтатус И РазрешеноРедактироватьДоговоры);
	//											
	//УстановитьТЧДоговоры();	
	
	ДоступностьАналитик = Объект.Ссылка.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка
		                   	//АБС ВСТАВКА №15838 НАЧАЛО
							И РеквизитФормыВЗначение("Объект").КонтрольАналитикПройден();
							//\\АБС ВСТАВКА №15838 КОНЕЦ
	
	Элементы.Организация.ТолькоПросмотр 			= НЕ ДоступностьАналитик;
	Элементы.ЦФУ.ТолькоПросмотр 					= НЕ ДоступностьАналитик;
	Элементы.ЦФО.ТолькоПросмотр 					= НЕ ДоступностьАналитик;
	Элементы.БюджетнаяСтатья.ТолькоПросмотр 		= НЕ ДоступностьАналитик;
	
	Элементы.КВ.ТолькоПросмотр 						= НЕ ДоступностьАналитик;
	Элементы.ТЭО.ТолькоПросмотр 					= НЕ ДоступностьАналитик;
	Элементы.ТипКонтрагента.ТолькоПросмотр 			= НЕ ДоступностьАналитик;
	Элементы.ТипРасхода.ТолькоПросмотр 				= НЕ ДоступностьАналитик;
	Элементы.ТипСети.ТолькоПросмотр 				= НЕ ДоступностьАналитик;
	
	НефиксированнаяСуммаПроверитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура НефиксированнаяСуммаПроверитьДоступность()
	
	//АБС ВСТАВКА №4870, №22675 НАЧАЛО
	Если абс_БизнесПроцессыПривелегированный.ВозможноИзменитьНефиксированнаяСумма(Объект.Ссылка) 
		и не абс_БизнесПроцессыПривелегированный.Заявка7640(Объект.Ссылка)
		и не Объект.СледГодОплат
		и не Объект.СледГодПоставок Тогда //если есть счет выше согласование ОФК 
		Элементы.НефиксированнаяСумма.Доступность = Истина;
	Иначе 
		Элементы.НефиксированнаяСумма.Доступность = Ложь;	
	КонецЕсли;
	//\\АБС ВСТАВКА №4870, №22675 КОНЕЦ
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьТЧДоговоры()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	РазрешеноРедактироватьДоговоры = Ложь;
	
	// Проверим можно ли редактировать табличную часть с договорами.
	Если Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги Тогда
		//или Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.РБП Тогда
		
		РазрешеноРедактироватьДоговоры = 
			Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка ИЛИ
			Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;
			
	ИначеЕсли Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
		
		// Для заказа с типом Оборудование договоры может добавлять договоры 
		//  только в статусе Исполнение.
		
		РазрешеноРедактироватьДоговоры = НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено И
			Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;
			
	КонецЕсли;
	
	Элементы.Договоры.ТолькоПросмотр = НЕ РазрешеноРедактироватьДоговоры;
		
КонецПроцедуры

// Устанавливает отбор регистра изменений статусов
&НаСервере
Процедура УстановитьОтборИзмененияСтатусов()
	
	ОтборЗаказ = ТабличноеПолеБПИзменениеСтатуса.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	ОтборЗаказ.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ЗакупочныйЗаказ");
	ОтборЗаказ.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЗаказ.ПравоеЗначение 	= Объект.Ссылка; 
	ОтборЗаказ.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ОтборЗаказ.Использование 	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Договоры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ДанныеОбменаССервером = Новый Структура("ДоговорКонтрагента, ДатаДоговора, ВалютаДоговора,Сумма");
		
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
		// Получим все необходимые данные на сервере
		ЗначенияДляЗаполнения = ИзменениеДоговорКонтрагентаСервер(ДанныеОбменаССервером);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеОбменаССервером);	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеДоговорКонтрагентаСервер(ДанныеДляЗаполнения)	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ДоговорКонтрагента) Тогда
		ДанныеДляЗаполнения.ДатаДоговора = ДанныеДляЗаполнения.ДоговорКонтрагента.Дата;
		ДанныеДляЗаполнения.Сумма = ДанныеДляЗаполнения.ДоговорКонтрагента.абс_СуммаСНДС;
		ДанныеДляЗаполнения.ВалютаДоговора = ДанныеДляЗаполнения.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти)
	ДанныеОбмена_ДляРасчета = Новый Структура("Количество, СтавкаНДС, НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС");
	ДанныеОбмена_ДляРасчета_ВАЛ = Новый Структура("Количество, СтавкаНДС, НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС");
	
	ЗаполнитьСтруктурыДляРасчета(ДанныеОбмена_ДляРасчета,ДанныеОбмена_ДляРасчета_ВАЛ,СтрокаТабличнойЧасти,Ложь);
	РассчитатьСуммуНДС(ДанныеОбмена_ДляРасчета,ПроцентыСтавокНДС);
	РассчитатьСуммуТабЧасти(ДанныеОбмена_ДляРасчета);
		
	ПересчетСуммыПоКурсу(ДанныеОбмена_ДляРасчета.ЦенаБезНДС,ДанныеОбмена_ДляРасчета_ВАЛ.ЦенаБезНДС, Объект.ВалютаДокумента, Объект.Дата);
	РассчитатьСуммуНДС(ДанныеОбмена_ДляРасчета_ВАЛ,ПроцентыСтавокНДС);
	РассчитатьСуммуТабЧасти(ДанныеОбмена_ДляРасчета_ВАЛ);
	ЗаполнитьСтруктурыДляРасчета(ДанныеОбмена_ДляРасчета,ДанныеОбмена_ДляРасчета_ВАЛ,СтрокаТабличнойЧасти,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПриИзмененииКоличества(СтрокаТабличнойЧасти)
	ДанныеОбмена_ДляРасчета = Новый Структура("Количество, СтавкаНДС, НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС");
	ДанныеОбмена_ДляРасчета_ВАЛ = Новый Структура("Количество, СтавкаНДС, НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС");
	
	ЗаполнитьСтруктурыДляРасчета(ДанныеОбмена_ДляРасчета,ДанныеОбмена_ДляРасчета_ВАЛ,СтрокаТабличнойЧасти,Ложь);
	
	РассчитатьСуммуТабЧасти(ДанныеОбмена_ДляРасчета);
	РассчитатьСуммуТабЧасти(ДанныеОбмена_ДляРасчета_ВАЛ);
	
	ЗаполнитьСтруктурыДляРасчета(ДанныеОбмена_ДляРасчета,ДанныеОбмена_ДляРасчета_ВАЛ,СтрокаТабличнойЧасти,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктурыДляРасчета(ДляРасчета,ДляРасчета_ВАЛ,СтрокаТабличнойЧасти,ВернутьДанные)
	Если Не ВернутьДанные Тогда
		Если Не ДляРасчета = Неопределено Тогда
			ДляРасчета.Количество 		= СтрокаТабличнойЧасти.Количество;
			ДляРасчета.СтавкаНДС      	= СтрокаТабличнойЧасти.СтавкаНДС;
			ДляРасчета.НДСЦена          = СтрокаТабличнойЧасти.НДСЦена;
			ДляРасчета.ЦенаБезНДС     	= СтрокаТабличнойЧасти.ЦенаБезНДС;
			ДляРасчета.ЦенаСНДС     	= СтрокаТабличнойЧасти.ЦенаСНДС;
			ДляРасчета.СуммаБезНДС     	= СтрокаТабличнойЧасти.СуммаБезНДС;
			ДляРасчета.СуммаСНДС     	= СтрокаТабличнойЧасти.СуммаСНДС;
			
		КонецЕсли;
		
		Если Не ДляРасчета_ВАЛ = Неопределено Тогда
			ДляРасчета_ВАЛ.Количество 		= СтрокаТабличнойЧасти.Количество;
			ДляРасчета_ВАЛ.СтавкаНДС      	= СтрокаТабличнойЧасти.СтавкаНДС;
			ДляРасчета_ВАЛ.НДСЦена            	= СтрокаТабличнойЧасти.НДСВалютнаяЦена;
			ДляРасчета_ВАЛ.ЦенаБезНДС     	= СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС;
			ДляРасчета_ВАЛ.ЦенаСНДС     	= СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС;
			ДляРасчета_ВАЛ.СуммаБезНДС     	= СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС;
			ДляРасчета_ВАЛ.СуммаСНДС     	= СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС;
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДляРасчета);
		Если Не ДляРасчета_ВАЛ = Неопределено Тогда
			СтрокаТабличнойЧасти.НДСВалютнаяЦена = ДляРасчета_ВАЛ.НДСЦена;
			СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС = ДляРасчета_ВАЛ.ЦенаБезНДС;
			СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС = ДляРасчета_ВАЛ.ЦенаСНДС;
			СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = ДляРасчета_ВАЛ.СуммаБезНДС;
			СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = ДляРасчета_ВАЛ.СуммаСНДС;
		КонецЕсли;
	КонецЕсли;
	     	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуТабЧасти(ДанныеДляЗаполнения) 
	
	ДанныеДляЗаполнения.ЦенаСНДС = ДанныеДляЗаполнения.ЦенаБезНДС + ДанныеДляЗаполнения.НДСЦена;
	ДанныеДляЗаполнения.СуммаБезНДС = ДанныеДляЗаполнения.Количество * ДанныеДляЗаполнения.ЦенаБезНДС; 
	ДанныеДляЗаполнения.СуммаСНДС = ДанныеДляЗаполнения.Количество * ДанныеДляЗаполнения.ЦенаСНДС; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДС(ДанныеДляЗаполнения,ПроцентыСтавокНДС) 
	
	ПроцентНДС = ПроцентыСтавокНДС.Получить(ДанныеДляЗаполнения.СтавкаНДС);
	Если ПроцентНДС = Неопределено Тогда
		ПроцентНДС = 0;
	КонецЕсли;
	
	ДанныеДляЗаполнения.НДСЦена = Окр(ДанныеДляЗаполнения.ЦенаБезНДС / 100 * ПроцентНДС,2);
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ЦенаБезНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчетСуммыПоКурсу(СуммаРуб,ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Если Запись.Курс <>0 Тогда
		ВалютнаяСумма = Окр(СуммаРуб / Запись.Курс,2);
	Иначе
		ВалютнаяСумма = 0;
	КонецЕсли;

	Если Запись.Кратность <> 0 Тогда
		ВалютнаяСумма = ВалютнаяСумма * ?(Запись.Кратность = 0, 1, Запись.Кратность);
	КонецЕсли;

	
КонецПроцедуры 

&НаКлиенте
Процедура Таблица1КоличествоПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииКоличества(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ДанныеОбменаССервером = Новый Структура("Номенклатура, СчетУчета, СтавкаНДС, Организация, Дата, Содержание");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
		// Получим все необходимые данные на сервере
		ЗначенияДляЗаполнения = ИзменениеСпецификацияНоменклатураСервер(ДанныеОбменаССервером);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеОбменаССервером);	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеСпецификацияНоменклатураСервер(ДанныеДляЗаполнения)	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.Номенклатура) Тогда
		ДанныеДляЗаполнения.СтавкаНДС = ДанныеДляЗаполнения.Номенклатура.СтавкаНДС;
		ДанныеДляЗаполнения.СчетУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(ДанныеДляЗаполнения.Организация, ДанныеДляЗаполнения.Номенклатура, Неопределено, ДанныеДляЗаполнения.Дата).СчетУчетаБУ;
		ДанныеДляЗаполнения.Содержание = СокрЛП(ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СпецификацияКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииКоличества(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияЦенаБезНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаБезНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииСуммаБезНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры
	
&НаКлиенте
Процедура РассчитатьПриИзмененииСуммаБезНДС(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Количество=0 Тогда
		СтрокаТабличнойЧасти.ЦенаБезНДС = 0;
		РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	Иначе	
		СтрокаТабличнойЧасти.ЦенаБезНДС = СтрокаТабличнойЧасти.СуммаБезНДС / СтрокаТабличнойЧасти.Количество;
		РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияСуммаБезНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииСуммаБезНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяЦенаБезНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииВалютнойЦеныБезНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПересчетВалютныхСумм(Сумма,ВалютаНач,ВалютаКон,Дата)	
	Возврат МодульВалютногоУчета.ПересчитатьВСуммуРегл(Сумма, ВалютаКон, ВалютаНач, Дата);	
КонецФункции

&НаКлиенте
Процедура РассчитатьПриИзмененииВалютнойЦеныБезНДС(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС = 0 Тогда
		СтрокаТабличнойЧасти.ЦенаБезНДС = 0;
		РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	Иначе	
		СтрокаТабличнойЧасти.ЦенаБезНДС = ПересчетВалютныхСумм(СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета, Объект.Дата);
		РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияВалютнаяЦенаБезНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииВалютнойЦеныБезНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ЦенаСНДСПриИзменении(Элемент)  
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииЦеныСНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПриИзмененииЦеныСНДС(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ЦенаСНДС = 0 Тогда
		СтрокаТабличнойЧасти.ЦенаБезНДС = 0;
		РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	Иначе
		ПроцентНДС = ПроцентыСтавокНДС.Получить(СтрокаТабличнойЧасти.СтавкаНДС);
		Если ПроцентНДС = Неопределено Тогда
			ПроцентНДС = 0;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЦенаБезНДС = СтрокаТабличнойЧасти.ЦенаСНДС / (100 + ПроцентНДС) * 100;
		
		РассчитатьПриИзмененииЦены(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияЦенаСНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииЦеныСНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаСНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииСуммаСНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	Если Объект.СуммаВключаетНДС Тогда
		
		ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПриИзмененииСуммаСНДС(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.ЦенаСНДС = 0;
		РассчитатьПриИзмененииЦеныСНДС(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти.ЦенаСНДС = СтрокаТабличнойЧасти.СуммаСНДС / СтрокаТабличнойЧасти.Количество;
		РассчитатьПриИзмененииЦеныСНДС(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияСуммаСНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииСуммаСНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяЦенаСНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииВалютнаяЦенаСНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

 &НаКлиенте
Процедура РассчитатьПриИзмененииВалютнаяЦенаСНДС(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС = 0 Тогда
		СтрокаТабличнойЧасти.ЦенаСНДС = 0;
		РассчитатьПриИзмененииЦеныСНДС(СтрокаТабличнойЧасти);
	Иначе	
		СтрокаТабличнойЧасти.ЦенаСНДС = ПересчетВалютныхСумм(СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета, Объект.Дата);
		РассчитатьПриИзмененииЦеныСНДС(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияВалютнаяЦенаСНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииВалютнаяЦенаСНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяСуммаБезНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииВалютнаяСуммаБезНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПриИзмененииВалютнаяСуммаБезНДС(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС = 0;
		РассчитатьПриИзмененииВалютнойЦеныБезНДС(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС = СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС / СтрокаТабличнойЧасти.Количество;
		РассчитатьПриИзмененииВалютнойЦеныБезНДС(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияВалютнаяСуммаБезНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииВалютнаяСуммаБезНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяСуммаСНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииВалютнаяСуммаСНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	Если Объект.СуммаВключаетНДС Тогда
	
		ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПриИзмененииВалютнаяСуммаСНДС(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС = 0;
		РассчитатьПриИзмененииВалютнаяЦенаСНДС(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС = СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС / СтрокаТабличнойЧасти.Количество;
		РассчитатьПриИзмененииВалютнаяЦенаСНДС(СтрокаТабличнойЧасти);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияВалютнаяСуммаСНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииВалютнаяСуммаСНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

// Рассчитать реквизиты табличной части.
//&НаСервере
&НаКлиенте
Процедура ПересчитатьСуммуТабличнойЧасти(СтрокаТабличнойЧасти,ТекущаяКолонка = "Таблица1ЦенаБезНДС")
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Количество = СтрокаТабличнойЧасти.Количество;
	СтавкаНДС  = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если Количество = 0 Тогда
		
		СтрокаТабличнойЧасти.ЦенаСНДС           = 0;	
		СтрокаТабличнойЧасти.ЦенаБезНДС         = 0;
		СтрокаТабличнойЧасти.НДСЦена            = 0; 	
		СтрокаТабличнойЧасти.СуммаСНДС          = 0;
		СтрокаТабличнойЧасти.СуммаБезНДС        = 0;
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС = 0;
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС   = 0;
		СтрокаТабличнойЧасти.НДСВалютнаяЦена    = 0;		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС= 0;
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС  = 0;		
		
		Возврат;
		
	КонецЕсли;	
	
	Структура = Новый Структура("ТоварыКоличество, ТоварыСтавкаНДС");
	ПересчетВВалюту = ложь;
	
	Если ТекущаяКолонка = "Таблица1ЦенаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 	
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.СуммаБезНДС         = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество);  				
		СтрокаТабличнойЧасти.ЦенаСНДС   		 = (СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСЦена             = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС); 		
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС));
		                 
	ИначеЕсли ТекущаяКолонка = "Таблица1ЦенаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.НДСЦена             = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС);
		СтрокаТабличнойЧасти.ЦенаБезНДС   		 = СтрокаТабличнойЧасти.ЦенаСНДС - СтрокаТабличнойЧасти.НДСЦена;														 		 		
		СтрокаТабличнойЧасти.СуммаБезНДС         = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество);  
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС));	
																
	КонецЕсли;																
	Если ТекущаяКолонка = "Таблица1ВалютнаяЦенаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество);  				
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС    = (СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС); 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)); 		
		
	ИначеЕсли ТекущаяКолонка = "Таблица1ВалютнаяЦенаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС);
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС  = СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС - СтрокаТабличнойЧасти.НДСВалютнаяЦена;														 		 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество);   
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)); 
		
	ИначеЕсли ТекущаяКолонка = "Таблица1НДСЦена" Тогда 		
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.СуммаБезНДС         = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество);  
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС));
		
	ИначеЕсли ТекущаяКолонка = "Таблица1НДСВалютнаяЦена" Тогда 		
																																												 		 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество);   
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)); 	
																
	ИначеЕсли ТекущаяКолонка = "Таблица1СуммаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.ЦенаСНДС    		 = (СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСЦена     		 = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС); 		
		СтрокаТабличнойЧасти.СуммаСНДС           = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС));	
		СтрокаТабличнойЧасти.ЦенаБезНДС  		 = (Объект.СтрокаТабличнойЧасти.СуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
														
	ИначеЕсли ТекущаяКолонка = "Таблица1СуммаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		ПересчетВВалюту = Истина;
		
		СтрокаТабличнойЧасти.ЦенаБезНДС  		 = (СтрокаТабличнойЧасти.СуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСЦена     		 = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ЦенаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС); 		
		СтрокаТабличнойЧасти.СуммаБезНДС 		 = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ЦенаБезНДС * Количество); 	
		СтрокаТабличнойЧасти.ЦенаСНДС   		 = (СтрокаТабличнойЧасти.СуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 																	
																
	ИначеЕсли ТекущаяКолонка = "Таблица1ВалютнаяСуммаБезНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
                                                   		
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС    = (СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС); 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС   = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)); 	
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС  = (СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
																
	ИначеЕсли ТекущаяКолонка = "Таблица1ВалютнаяСуммаСНДС" или Структура.Свойство(ТекущаяКолонка) Тогда 		
		
		СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС  = (СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС - УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС
														, Истина //УчитыватьНДС
							                            , Истина //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 
		СтрокаТабличнойЧасти.НДСВалютнаяЦена     = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС); 		
		СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС = ?(Объект.СуммаВключаетНДС
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество
														,СтрокаТабличнойЧасти.ВалютнаяЦенаБезНДС * Количество); 	
		СтрокаТабличнойЧасти.ВалютнаяЦенаСНДС    = (СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС + УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ВалютнаяСуммаБезНДС
														, Истина //УчитыватьНДС
							                            , Ложь   //СуммаВключаетНДС
													    , СтавкаНДС)) / Количество; 		
															
	КонецЕсли;														

	врПересчитать = Новый Структура("НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС",
											"НДСВалютнаяЦена", "ВалютнаяЦенаБезНДС", "ВалютнаяЦенаСНДС", "ВалютнаяСуммаБезНДС", "ВалютнаяСуммаСНДС");
	
	Если не ПересчетВВалюту Тогда
		
		Для каждого врСтрока Из врПересчитать Цикл
			СтрокаТабличнойЧасти[врСтрока.Ключ] = ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти[врСтрока.Значение],0 ,Объект.ВалютаДокумента , Объект.Дата);	
		КонецЦикла;	
		
	Иначе 
		
		Для каждого врСтрока Из врПересчитать Цикл
			СтрокаТабличнойЧасти[врСтрока.Значение] = ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти[врСтрока.Ключ],1 ,Объект.ВалютаДокумента , Объект.Дата);	
		КонецЦикла;	

	КонецЕсли;
	          	
КонецПроцедуры	

&НаСервере
Функция ПересчитатьВСуммуРегл(СуммаУпр, врЧисло, ВалютаУправленческогоУчета, Дата) Экспорт

	Если врЧисло   = 0 Тогда
		ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		ВалютаУпр  = ВалютаУправленческогоУчета;
	Иначе
		ВалютаРегл = ВалютаУправленческогоУчета;
		ВалютаУпр  = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	КурсВал   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегл, Дата);
	КурсРегл  = КурсВал.Курс;
	КратРегл  = КурсВал.Кратность;

	КурсВал   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпр, Дата);
	КурсУпр   = КурсВал.Курс;
	КратУпр   = КурсВал.Кратность;
	
	Если КурсРегл = 0 Тогда
		ОбщегоНазначения.Сообщение("Не задан курс валюты """ + ВалютаУправленческогоУчета + """ регламентированного учета!", СтатусСообщения.Внимание);
		Возврат 0;
	КонецЕсли;
	
	Если КурсУпр = 0 Тогда
		ОбщегоНазначения.Сообщение("Не задан курс валюты """ + ВалютаУправленческогоУчета + """ управленческого учета!", СтатусСообщения.Внимание);
		Возврат 0;
	КонецЕсли;

	СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаУпр, ВалютаУпр, ВалютаРегл, КурсУпр, КурсРегл, КратУпр, КратРегл);

	Возврат СуммаРегл;

КонецФункции // ПересчитатьВСуммуРегл()

&НаКлиенте
Процедура РассчитатьПриИзмененииСтавкиНДС(СтрокаТабличнойЧасти)
	ДанныеОбмена_ДляРасчета = Новый Структура("Количество, СтавкаНДС, НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС");
	ДанныеОбмена_ДляРасчета_ВАЛ = Новый Структура("Количество, СтавкаНДС, НДСЦена, ЦенаБезНДС, ЦенаСНДС, СуммаБезНДС, СуммаСНДС");
	
	ЗаполнитьСтруктурыДляРасчета(ДанныеОбмена_ДляРасчета,ДанныеОбмена_ДляРасчета_ВАЛ,СтрокаТабличнойЧасти,Ложь);
	
	РассчитатьСуммуНДС(ДанныеОбмена_ДляРасчета,ПроцентыСтавокНДС);
	РассчитатьСуммуТабЧасти(ДанныеОбмена_ДляРасчета);
	РассчитатьСуммуНДС(ДанныеОбмена_ДляРасчета_ВАЛ,ПроцентыСтавокНДС);
	РассчитатьСуммуТабЧасти(ДанныеОбмена_ДляРасчета_ВАЛ);
	
	ЗаполнитьСтруктурыДляРасчета(ДанныеОбмена_ДляРасчета,ДанныеОбмена_ДляРасчета_ВАЛ,СтрокаТабличнойЧасти,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда
	//	РассчитатьПриИзмененииСтавкиНДС(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Спецификация.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		РассчитатьПриИзмененииСтавкиНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Элементы.Статус.СписокВыбора.НайтиПоЗначению(мСтатус) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран неверный статус документа");
		
		мСтатус = Объект.Статус;
		
		Возврат;
	КонецЕсли;
		
	СотрудникиДирККР = ПолучитьСписокСотрудниковДирККР();
	
	Если НЕ СотрудникиДирККР = Неопределено Тогда
		
		СотрудникДирККР = СотрудникиДирККР.ВыбратьЭлемент("Выберите сотрудника ДирККР для работы с закупочным заказом.");
		
		Если НЕ СотрудникДирККР = Неопределено Тогда
			Объект.ОтветственныйСотрудникДирККР = СотрудникДирККР.Значение;
		Иначе
			мСтатус = Объект.Статус;
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Объект.Статус = мСтатус;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	//АБС Попов Замена 
	//для Замера Производительности
	
	//
	//Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	//
	//Закрыть();
	//
		
  #Если ТолстыйКлиентОбычноеПриложение Тогда
      КлючеваяОперация = Перечисления.КлючевыеОперации.ПроведениеДокументаЗакупочныйЗаказ;
  #Иначе
      КлючеваяОперация = ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаЗакупочныйЗаказ");
  #КонецЕсли
  ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
 
  Попытка
      #Если ТолстыйКлиентОбычноеПриложение Тогда
		  //ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
      #Иначе
          ПараметрыЗаписи = Новый Структура("РежимЗаписи");
          ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
          ЭтаФорма.Записать(ПараметрыЗаписи);
	  #КонецЕсли
	  ЭтаФорма.Закрыть();
  Исключение
      Сообщить(ИнформацияОбОшибке().Описание);
	  ВызватьИсключение;
  КонецПопытки;

	
	//\\АБС Попов Конец Замены
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПровести(Команда)
	//АБС Попов Замена 
	//для Замера Производительности
	
	//Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
		
  #Если ТолстыйКлиентОбычноеПриложение Тогда
      КлючеваяОперация = Перечисления.КлючевыеОперации.ПроведениеДокументаЗакупочныйЗаказ;
  #Иначе
      КлючеваяОперация = ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаЗакупочныйЗаказ");
  #КонецЕсли
  ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
 
  Попытка
      #Если ТолстыйКлиентОбычноеПриложение Тогда
		  //ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
      #Иначе
          ПараметрыЗаписи = Новый Структура("РежимЗаписи");
          ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
          ЭтаФорма.Записать(ПараметрыЗаписи);
	  #КонецЕсли
  Исключение
      Сообщить(ИнформацияОбОшибке().Описание);
	  ВызватьИсключение;
  КонецПопытки;

	
	//\\АБС Попов Конец Замены
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаписать(Команда)
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтменитьПроведение(Команда)
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Договоры.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТипДоговора) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗакупочногоЗаказаПриИзменении(Элемент)
			
	Если Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.ТМЦУслуги") Тогда
		//Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.РБП") Тогда
		// Разрешены договоры в табличной части.		
		
	ИначеЕсли Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.Оборудование") Тогда
		// Договоры в табличной части запрещены.
	    Объект.Договоры.Очистить();
	КонецЕсли;

	УстановитьВидимостьМонтажОборудования();
	//	УстановитьДоступностьТЧДоговоры();

КонецПроцедуры

&НаСервере
Функция ПолучитьВидДеятельностиПоЦФУ(ЦФУ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ЦФУ.Ссылка КАК ЦФУ,
	|	абс_ВидыДеятельностиКТТК.Ссылка КАК ВидДеятельности
	|ИЗ
	|	Справочник.абс_ЦФУ КАК абс_ЦФУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.абс_ВидыДеятельностиКТТК КАК абс_ВидыДеятельностиКТТК
	|		ПО абс_ЦФУ.Наименование = абс_ВидыДеятельностиКТТК.Наименование
	|ГДЕ
	|	абс_ЦФУ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЦФУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ВидДеятельности) Тогда
		Возврат Выборка.ВидДеятельности;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


//АБС ВСТАВКА 09,01,11
//Функция создает договор в случае отсутствия
//
&НаСервере
Функция СформироватьДоговор(СтруктураВыбора) Экспорт
	
	ДоговорКонтрагента = СтруктураВыбора.ДоговорКонтрагента;
	ТипДоговора        = СтруктураВыбора.ТипДоговора;
	ВходящийНомер      = СтруктураВыбора.ВходящийНомер;
	ВалютаДоговора     = СтруктураВыбора.ВалютаДоговора;
	ДатаДоговора       = СтруктураВыбора.ДатаДоговора;

	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ТипДоговора<>Перечисления.абс_ТипыДоговоров.Договор Тогда
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.Владелец = объект.Контрагент;
			НовыйДоговор.абс_ВидДоговора=Справочники.абс_ПредметДоговораГК.БезДоговора;
			НовыйДоговор.абс_ТипДоговора = Перечисления.абсТипыДоговоров.Договор;
			НовыйДоговор.Номер = ""+ТипДоговора+" "+?(ЗначениеЗаполнено(ВходящийНомер),ВходящийНомер,"");
			НовыйДоговор.Дата = ?(ЗначениеЗаполнено(ДатаДоговора),ДатаДоговора,'00010101');
			Если ЗначениеЗаполнено(ТипДоговора) Тогда
				НовыйДоговор.абс_ТипДоговора = ТипДоговора;
			КонецЕсли;	
			НовыйДоговор.Организация = объект.Организация;
			НовыйДоговор.Наименование = ""+ТипДоговора+" № "+ВходящийНомер;
			НовыйДоговор.абс_СтатусДоговора=Перечисления.абсСтатусыДоговоров.Исполнение;
			НовыйДоговор.абс_Ответственный = мТекущийПользователь;
			
			//АБС ВСТАВКА №7047 НАЧАЛО
			перемВедениеВзаиморасчетов = ВедениеВзаиморасчетовПоУмолчанию(объект.Организация);
			Если перемВедениеВзаиморасчетов = Неопределено 
				или перемВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка() Тогда
				перемВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;	
			КонецЕсли;	
			//АБС ВСТАВКА №7047 КОНЕЦ			
			
			НовыйДоговор.ВедениеВзаиморасчетов=перемВедениеВзаиморасчетов;
			НовыйДоговор.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(ВалютаДоговора),ВалютаДоговора,Объект.ВалютаДокумента);
			НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			//НовыйДоговор.ОбменДанными.Загрузка = Истина;
			
			НовыйДоговор.абс_ВидДеятельности = ПолучитьВидДеятельностиПоЦФУ(Объект.ЦФУ);
			
			Попытка
				НеобходимоПерезаписатьЗЗ = Ложь;
				
				НовыйДоговор.абс_ПричинаИзмененияСтатуса = "Автоматическое создание по документу " + Объект.Ссылка;
				
				НовыйДоговор.Записать();
				//
				СтруктураОтбора = Новый Структура("ТипДоговора,ВходящийНомер,ВалютаДоговора,ДатаДоговора");
				СтруктураОтбора.Вставить("ТипДоговора",ТипДоговора);
				СтруктураОтбора.Вставить("ВходящийНомер",ВходящийНомер);
				СтруктураОтбора.Вставить("ВалютаДоговора",ВалютаДоговора);
				СтруктураОтбора.Вставить("ДатаДоговора",ДатаДоговора);
				
				мДоговорыТЗ	= Объект.Договоры.Выгрузить();
				МассивСтрок = мДоговорыТЗ.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество()>0 Тогда
					МассивСтрок[0].ДоговорКонтрагента = НовыйДоговор.Ссылка;
					НеобходимоПерезаписатьЗЗ = Истина;
				КонецЕсли;
				Объект.Договоры.Загрузить(мДоговорыТЗ);
				мДоговоры.Загрузить(мДоговорыТЗ);
				
				ДоговорКонтрагента = НовыйДоговор.Ссылка;
				
				Если НеобходимоПерезаписатьЗЗ Тогда
					Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
				КонецЕсли;

				
				//ДоговорКонтрагента = НовыйДоговор.Ссылка;
				//НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей();
				//
				//НаборЗаписей.Отбор.Договор.Установить(НовыйДоговор.Ссылка);
				//НаборЗаписей.Прочитать();
				//
				//Запись = НаборЗаписей.Добавить();
				//Запись.Период = ТекущаяДата();
				//
				//Запись.Договор				= НовыйДоговор.Ссылка;
				//Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
				//Запись.СтатусДоговора		= Перечисления.абсСтатусыДоговоров.Исполнение;
				//
				//Запись.Комментарий 			= "Автоматическое создание по документу "+Объект.Ссылка;
				//
				//НаборЗаписей.Записать();
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат ДоговорКонтрагента;
КонецФункции

//АБС ВСТАВКА №7047 НАЧАЛО
&НаСервере
Функция ВедениеВзаиморасчетовПоУмолчанию(Знач перемОрганизация)

	ЗначПерем = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Регистр.ВедениеВзаиморасчетовПоДоговорам
	               |ИЗ
	               |	РегистрСведений.абс_ОсновныеЗначенияПоУмолчаниюВРазрезеОрганизация КАК Регистр
	               |ГДЕ
	               |	Регистр.Организация = &Организация";

	Запрос.УстановитьПараметр("Организация", перемОрганизация);

	Результат = Запрос.Выполнить().Выбрать();

	Если Результат.Следующий() Тогда
		ЗначПерем = Результат.ВедениеВзаиморасчетовПоДоговорам;
	КонецЕсли;	
	
	Возврат ЗначПерем;
	
КонецФункции	
//\\АБС ВСТАВКА №7047 КОНЕЦ

&НаСервере
Процедура СоздатьСчет(РезультатВыбора)
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//// Проверить сумму оплаты по графику оплат
	//Если НЕ Объект.КонтрольГрафикаОплат(РезультатВыбора.ДатаОплаты, РезультатВыбора.СуммаОплаты) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Ввести счет на оплату
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		сообщить("Не задан контрагент!!!");
		Возврат;
	КонецЕсли;
	
	ДокументСчетНаОплату = Документы.абс_СчетНаОплату.СоздатьДокумент();
	
	ДокументСчетНаОплату.Дата				= ТекущаяДата();
	ДокументСчетНаОплату.ДатаПлатежа		= РезультатВыбора.ДатаОплаты;
	
	ДокументСчетНаОплату.Валюта				= РезультатВыбора.ВалютаПлатежа;
	ДокументСчетНаОплату.ВалютнаяСумма		= РезультатВыбора.СуммаОплаты;
	
	
	ДокументСчетНаОплату.Контрагент         = Объект.Контрагент;  
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументСчетНаОплату.Валюта, ДокументСчетНаОплату.Дата);
	ДокументСчетНаОплату.Курс				= СтруктураКурса.Курс;
	ДокументСчетНаОплату.Кратность			= СтруктураКурса.Кратность;
	
	Если НЕ ЗначениеЗаполнено(мВалютаРегУчета) Тогда
		мВалютаРегУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;	
	ДокументСчетНаОплату.СуммаПлатежа		= МодульВалютногоУчета.ПересчитатьВСуммуРегл(ДокументСчетНаОплату.ВалютнаяСумма, 
		мВалютаРегУчета, ДокументСчетНаОплату.Валюта, ДокументСчетНаОплату.Дата);	
	Если ДокументСчетНаОплату.СуммаПлатежа=0 Тогда
		ДокументСчетНаОплату.СуммаПлатежа = ДокументСчетНаОплату.ВалютнаяСумма;
	КонецЕсли;
	
	ДокументСчетНаОплату.Заполнить(Объект.Ссылка);
	
	ДокументСчетНаОплату.ДоговорКонтрагента	= СформироватьДоговор(РезультатВыбора);
	
	ДокументСчетНаОплату.Записать();
	
	//НоваяСтрока = ТабличноеПолеОплат.Добавить();
	//НоваяСтрока.СчетНаОплату = ДокументСчетНаОплату.Ссылка;
	//НоваяСтрока.Статус = ДокументСчетНаОплату.Ссылка.СтатусСчета;
	//НоваяСтрока.СуммаПлатежа = ДокументСчетНаОплату.ВалютнаяСумма;
	//
	//ФормаСчета = ДокументСчетНаОплату.ПолучитьФорму("ФормаДокумента");
	//
	//ФормаСчета.Открыть();
	
	ПоказатьОплатыНаСервере();
	
КонецПРоцедуры

&НаСервере
Процедура СоздатьПоставку(РезультатВыбора)
	// Ввести счет на оплату
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		сообщить("Не задан контрагент!!!");
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора.ТипДоговора = ПредопределенноеЗначение("Перечисление.абс_ТипыДоговоров.АвансовыйОтчет") Тогда
		
		//ЕстьТовары = Ложь;
		//
		//Для Каждого СтрокаТовары Из Объект.Товары Цикл
		//	
		//	Если СтрокаТовары.Номенклатура.Услуга Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	ЕстьТовары = Истина;
		//	
		//КонецЦикла;		
		//
		//Если НЕ ЕстьТовары Тогда
		//	
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("В закупочном заказе нету товаров. Оформление авансового отчета невозможно.");
		//	Возврат;
		//КонецЕсли;
		
		Документ = Документы.АвансовыйОтчет.СоздатьДокумент();
		
		Документ.абс_ДатаПоставки				= РезультатВыбора.ДатаПоставки;
		Документ.Дата 							= РезультатВыбора.ДатаПоставки;
		
		Документ.Заполнить(Объект.Ссылка);
		
		Документ.Записать();		
	
	Иначе
		
		ДокументПоступления = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		
		ДокументПоступления.Заполнить(Объект.Ссылка);
		ДокументПоступления.ДоговорКонтрагента	= СформироватьДоговор(РезультатВыбора);
		ДокументПоступления.Дата = РезультатВыбора.ДатаПоставки;
		ДокументПоступления.абс_ДатаПоставки = РезультатВыбора.ДатаПоставки;
		//ДокументПоступления.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		ДокументПоступления.Записать();
		
	КонецЕсли;
	
	УстановитьОтборПоставок();
	
КонецПРоцедуры

&НаСервере
Функция ПолучитьСписокСотрудниковДирККР()
	
	Если мСтатус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение И Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование Тогда
		
		СотрудникиДирККР = абс_БизнесПроцессы.ПолучитьСотрудниковРоли(
			Справочники.РолиИсполнителей.ДирККР);
			
			
		МассивНезаполненныхЭлементов = Новый Массив();
		
		Для Каждого ЭлементСпискаСотрудников Из СотрудникиДирККР Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементСпискаСотрудников.Значение) Тогда
				МассивНезаполненныхЭлементов.Добавить(ЭлементСпискаСотрудников);
			КонецЕсли;			
		КонецЦикла;
		
		Для Каждого НезаполненныйЭлемент Из МассивНезаполненныхЭлементов Цикл
			СотрудникиДирККР.Удалить(НезаполненныйЭлемент);
		КонецЦикла;	
			
		Возврат СотрудникиДирККР;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции



&НаКлиенте
Процедура КомандаСформироватьСчет(Команда)
	
	// Вставить содержимое обработчика.
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные изменены. Записать документ?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		Иначе
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОплаты = Новый Структура;
	ПараметрыОплаты.Вставить("Ссылка",Объект.Ссылка);
	ПараметрыОплаты.Вставить("ТаблицаГрафикОплаты",Объект.ГрафикОплат);
	ПараметрыОплаты.Вставить("ТаблицаДоговоры",Объект.Договоры);
	РезультатВыбора = ОткрытьФормуМодально("Документ.абс_ЗакупочныйЗаказ.Форма.ФормаВводаСчетаНаОплатуУправляемая",ПараметрыОплаты,ЭтаФорма);
    СоздатьСчет(РезультатВыбора);
	
	Элементы.СписокСчетовНаОплату.Обновить();
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруПолейДляПересчета()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Валюта",Объект.ВалютаДокумента);
	
	Если Объект.Товары.Количество()=0 Тогда
		СтавкаНДС = Неопределено;
	Иначе
		СтавкаНДС = Объект.Товары.Получить(0).СтавкаНДС;
	КонецЕсли;
	
	СтруктураПолей.Вставить("Дата",Объект.Дата);
	СтруктураПолей.Вставить("СтавкаНДС",СтавкаНДС);
	СтруктураПолей.Вставить("СуммаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС");
	СтруктураПолей.Вставить("СуммаСНДС");
	СтруктураПолей.Вставить("ВалютнаяСуммаНДС");
	СтруктураПолей.Вставить("ВалютнаяСуммаБезНДС");
	СтруктураПолей.Вставить("ВалютнаяСуммаСНДС");
	возврат СтруктураПолей;
КонецФункции

&НаСервере
Процедура РассчитатьСуммыПоГрафику(СтруктураПолей,ИзмененноеПоле)
	СтавкаНДС = Неопределено;
	
	//Если Товары.Количество() > 0 Тогда
	//	СтавкаНДС = Товары[0].СтавкаНДС;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС=Перечисления.СтавкиНДС.НДС18;
	КонецЕсли;
	
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтруктураПолей.СтавкаНДС);
	
	Если Найти(ИзмененноеПоле,"Валютная")>0 Тогда
		Префикс = "Валютная";
		АнтиПрефикс = "";
	Иначе
		Префикс = "";
		АнтиПрефикс = "Валютная";
	КонецЕсли;
	
	ИзмененноеПолеБезВалют = СтрЗаменить(ИзмененноеПоле,"Валютная","");
	
	Если ИзмененноеПолеБезВалют = "СуммаНДС" Тогда
		//пересчитываем только сумму с НДС
		СтруктураПолей[Префикс+"СуммаСНДС"]=СтруктураПолей[Префикс+"СуммаБезНДС"]+СтруктураПолей[Префикс+"СуммаНДС"];
	ИначеЕсли  ИзмененноеПолеБезВалют = "СуммаБезНДС" Тогда
		//пересчет НДС и с НДС
		СтруктураПолей[Префикс+"СуммаНДС"] 	= Окр(СтруктураПолей[Префикс+"СуммаБезНДС"] / 100 * ПроцентНДС, 2);
        СтруктураПолей[Префикс+"СуммаСНДС"]	= СтруктураПолей[Префикс+"СуммаБезНДС"] + СтруктураПолей[Префикс+"СуммаНДС"];
	КонецЕсли;
	
	//Пересчет валют
	
	ВалютаНач = ?(Префикс = "",мВалютаРегУчета,СтруктураПолей.Валюта);
	ВалютаКон = ?(Префикс = "",СтруктураПолей.Валюта,мВалютаРегУчета);
	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПолей.Валюта,СтруктураПолей.Дата);
	
	ПоКурсуНач = ?(Префикс = "",1,СтруктураКурса.Курс);
	ПоКратностиНач = ?(Префикс = "",1,СтруктураКурса.Кратность);
	ПоКурсуКон = ?(Префикс = "",СтруктураКурса.Курс,1);
	ПоКратностиКон = ?(Префикс = "",СтруктураКурса.Кратность,1);


	
	СтруктураПолей[АнтиПрефикс+"СуммаНДС"] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураПолей[Префикс+"СуммаНДС"], ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, ПоКратностиНач,ПоКратностиКон);	
	СтруктураПолей[АнтиПрефикс+"СуммаБезНДС"] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураПолей[Префикс+"СуммаБезНДС"], ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, ПоКратностиНач,ПоКратностиКон);	
	СтруктураПолей[АнтиПрефикс+"СуммаСНДС"] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураПолей[Префикс+"СуммаСНДС"], ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, ПоКратностиНач,ПоКратностиКон);	


КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяСуммаБезНДС1ПриИзменении(Элемент)
	
	ПересчетСуммГрафикаОплат();
	
	//СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	//ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	//РассчитатьСуммыПоГрафику(СтруктураПолей,"ВалютнаяСуммаБезНДС");
	//ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяСуммаНДСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"ВалютнаяСуммаНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);

КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяСуммаСНДС1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"ВалютнаяСуммаСНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);

КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаБезНДС1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"СуммаБезНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);

КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаНДСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"СуммаНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаСНДС1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"СуммаСНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяСуммаБезНДС2ПриИзменении(Элемент)

	ПересчетСуммГрафикаПоставок();
	
	//СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	//ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	//РассчитатьСуммыПоГрафику(СтруктураПолей,"ВалютнаяСуммаБезНДС");
	//ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВалютнаяСуммаНДС1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"ВалютнаяСуммаНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);

КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаБезНДС2ПриИзменении(Элемент)
	
	// Вставить содержимое обработчика.
	СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"СуммаБезНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);

КонецПроцедуры

&НаКлиенте
Процедура Таблица1СуммаНДС1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтруктураПолей = СформироватьСтруктуруПолейДляПересчета();
	ЗаполнитьЗначенияСвойств(СтруктураПолей,Элемент.Родитель.ТекущиеДанные);
	РассчитатьСуммыПоГрафику(СтруктураПолей,"СуммаНДС");
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, СтруктураПолей);
КонецПроцедуры
//\\АБС ВСТАВКА

&НаКлиенте
Процедура УстановитьДоступностьЗакладок()
	
	ОплатыПоставкиДоступны = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.СтраницаОплат.Доступность 					= ОплатыПоставкиДоступны;	
	Элементы.КнопкаСформироватьСчет.Доступность 		= ОплатыПоставкиДоступны;
	
	Элементы.СтраницаПоставок.Доступность 				= ОплатыПоставкиДоступны;
	Элементы.КомандаСформироватьПоставку.Доступность 	= ОплатыПоставкиДоступны;
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьОтборСчетов()
	
	ОтборОбъект = СписокСчетовНаОплату.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОбъект.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборОбъект.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ЗакупочныйЗаказ");
	ОтборОбъект.ПравоеЗначение 	= Объект.Ссылка;
	ОтборОбъект.Использование	= Истина;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоставок()
	
	ОтборОбъект = ТабличнаяЧастьПоставок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОбъект.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборОбъект.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ЗакупочныйЗаказ");
	ОтборОбъект.ПравоеЗначение 	= Объект.Ссылка;
	ОтборОбъект.Использование	= Истина;
	
	ОтборОбъект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборСчетов();
	УстановитьОтборПоставок();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОбновитьСчета(Команда)
	
	Элементы.СписокСчетовНаОплату.Обновить(); 	
	ПосчитатьИтогиПоСчетам();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьСчет(Команда)
	
	УдалитьСчетНаОплату(Элементы.СписокСчетовНаОплату.ТекущиеДанные.Ссылка);
	
	Элементы.СписокСчетовНаОплату.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСчетНаОплату(СчетСсылка)
	
	Если ЗначениеЗаполнено(СчетСсылка) Тогда
		
		Попытка
			ОбъектСчета = СчетСсылка.ПолучитьОбъект();
			
			ОбъектСчета.УстановитьПометкуУдаления(Истина);
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при удалении счета " + ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьИтогиПоСчетам()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		мВсегоОплатНаСумму = 0;
		
	КонецЕсли;

	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СУММА(абс_СчетНаОплату.СуммаПлатежа) КАК СуммаПлатежа
	                      |ИЗ
	                      |	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	                      |ГДЕ
	                      |	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	                      |	И абс_СчетНаОплату.ПометкаУдаления = ЛОЖЬ");
						  
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИтогСчетов = 0;
	
	Если Выборка.Следующий() Тогда
		
		ИтогСчетов = Выборка.СуммаПлатежа;
		
	КонецЕсли;
	
	мВсегоОплатНаСумму = ИтогСчетов;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаОплат" Тогда
		
		ПосчитатьИтогиПоСчетам();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьПоставку(Команда)
	// Вставить содержимое обработчика.
	
	// Вставить содержимое обработчика.
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные изменены. Записать документ?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		Иначе
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Объект.Договоры.Количество() = 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран контрагент или не выбраны договоры.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОплаты = Новый Структура;
	ПараметрыОплаты.Вставить("Ссылка",Объект.Ссылка);
	ПараметрыОплаты.Вставить("ТаблицаДоговоры",Объект.Договоры);
	РезультатВыбора = ОткрытьФормуМодально("Документ.абс_ЗакупочныйЗаказ.Форма.ФормаВводаЗакупкиУправляемая",ПараметрыОплаты,ЭтаФорма);

	Если НЕ ЗначениеЗаполнено(РезультатВыбора) Тогда
		Возврат;
	КонецЕсли;
	
    СоздатьПоставку(РезультатВыбора);
	
	Элементы.ТабличнаяЧастьПоставок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ПересчетСпецификации();	
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСпецификации()
		
	Если Объект.Товары[0].СтавкаНДС <> Объект.СтавкаНДСДокумента Тогда
		ПересчетСуммГрафикаОплат();
	КонецЕсли;
	
	Если Объект.Товары.Количество() >= 1 Тогда
		Объект.СтавкаНДСДокумента = Объект.Товары[0].СтавкаНДС;
	Иначе
		Объект.СтавкаНДСДокумента = Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
	ИтогоКолонкаОплат = ?(Объект.СледГодОплат,25,13);
	ПодсчетИтогов("ГрафикОплат","Товары",ИтогоКолонкаОплат);
	ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,25,13);
	ПодсчетИтогов("ГрафикПоставок","Товары",ИтогоКолонкаПоставок);
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммГрафикаОплат()
		
	ИтогоКолонкаОплат = ?(Объект.СледГодОплат,25,13);
	РеквизитФормыВЗначение("Объект").ВалютнаяСуммаБезНДСПриИзменении(Объект.ГрафикОплат,ИтогоКолонкаОплат,Истина);

КонецПроцедуры

&НаСервере
Процедура ПересчетСуммГрафикаПоставок()
		
	ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,25,13);
  	РеквизитФормыВЗначение("Объект").ВалютнаяСуммаБезНДСПриИзменении(Объект.ГрафикПоставок,ИтогоКолонкаПоставок);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьЗадачуИсполненияЗЗ()
	
	// Если счет согласован, и открыт инициатором, то закроем задачу Согласован
	Если Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован И
		 Объект.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ТМЦУслуги И
		 Объект.Ответственный = мТекущийПользователь Тогда
		
		БПСогласование = НайтиБПСогласование();
		
		Если БПСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если БПСогласование.Завершен Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ БПСогласование.ПользовательИнициаторБП = мТекущийПользователь Тогда
			Возврат;			
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка КАК ЗадачаСсылка
		                      |ИЗ
		                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(&Исполнитель, Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю
		                      |ГДЕ
		                      |	абсЗадачаДоговораЗадачиПоИсполнителю.БизнесПроцесс = &БПСогласование");
							  
		Запрос.УстановитьПараметр("Исполнитель"		, мТекущийПользователь);
		Запрос.УстановитьПараметр("БПСогласование"	, БПсогласование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.ЗадачаСсылка.ПолучитьОбъект();
			
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСтатьиПриИзменении(Элемент)
	
	Объект.ПроектСтатьи = Объект.ПроектСтатьи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыВходящийНомерОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если НЕ Вопрос("Пересчитать рублевые суммы при изменении валюты докумена?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		//РассчитатьПриИзмененииВалютнойЦеныБезНДС(СтрокаТабличнойЧасти);	
		ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные);
		
	КонецЦикла;	
	
	Если Объект.Товары.Количество() >= 1 Тогда
		Объект.СтавкаНДСДокумента = Объект.Товары[0].СтавкаНДС;
	Иначе
		Объект.СтавкаНДСДокумента = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;
	
	ИтогоКолонкаОплат = ?(Объект.СледГодОплат,25,13);
	ПодсчетИтогов("ГрафикОплат","Товары",ИтогоКолонкаОплат);
	ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,25,13);
	ПодсчетИтогов("ГрафикПоставок","Товары",ИтогоКолонкаПоставок);
	
	ПересчетСуммГрафикаОплат();
    ПересчетСуммГрафикаПоставок();	
	
КонецПроцедуры
      
&НаКлиенте
Процедура УстановитьВидимостьМонтажОборудования()
	
	Элементы.МонтажОборудования.Видимость = Объект.ТипЗакупочногоЗаказа = ПредопределенноеЗначение("Перечисление.абсТипЗакупочногоЗаказа.Оборудование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьМонтажОборудования();	
	УстановитьВидимостьДоступностьГрафикПоставок(); //АБС ВСТАВКА Коломиец 4233
	ЗаполнитьКодКонтрагента();
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Открыть договор
	Если ТолькоПросмотр Тогда
		
		СтруктураПараметров = Новый Структура("Ключ", Объект.Договоры[ВыбраннаяСтрока].ДОговорКонтрагента);
	
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлементаУправляемая", СтруктураПараметров, ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура мКомментарийОФКПриИзменении(Элемент)
	Объект.КомментарийОФК = мКомментарийОФК;
КонецПроцедуры

// АБС ВСТАВКА Коломиец 4233 НАЧАЛО
&НаСервере
Функция  ПроверкаПравоПросмотраРеквизитов()
				
	Возврат абс_СлужебныеФункции.ПроверкаПравоПросмотраРеквизитов(Объект.Дата);
   
КонецФункции

&НаСервере
Функция абс_ВклДобавлениеГодаКГрафикуОплатИПоставокВЗЗ()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь"); 
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);	
	врДоступность = Константы.абс_ВклДобавлениеГодаКГрафикуОплатИПоставокВЗЗ.Получить() 
					и (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = неопределено
						или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = неопределено);	
	
	Возврат врДоступность;
                       
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьГрафикПоставок()
				
	Отказ = ПроверкаПравоПросмотраРеквизитов();

	Если НЕ Отказ Тогда 
		
		Элементы.Таблица1ВалютнаяСуммаСНДС2.Видимость 	= Ложь;
		Элементы.Таблица1ВалютнаяСуммаНДС1.Видимость 	= Ложь;	
		Элементы.Таблица1СуммаСНДС2.Видимость        	= Ложь;	
		Элементы.Таблица1СуммаНДС1.Видимость 			= Ложь;
		
	КонецЕсли;	         		
		 		
	врДоступность = абс_ВклДобавлениеГодаКГрафикуОплатИПоставокВЗЗ();	
	Элементы.СледГодОплат.Доступность    = врДоступность;
	Элементы.СледГодПоставок.Доступность = врДоступность;
		                   
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
			
	ЗакрытьЗадачуИсполненияЗЗ();
	
	Модифицированность = Ложь;
	
КонецПроцедуры
//\\АБС ВСТАВКА Коломиец 4233 КОНЕЦ

&НаСервере
Функция ВозможноИзменитьНефиксированнаяСумма() Экспорт  //АБС Коломиец 4870
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_СчетНаОплату.Ссылка КАК ПодчиненныйДокумент
	|ИЗ
	|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|ГДЕ
	|	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
	|	И абс_СчетНаОплату.СтатусСчета В(&СтатусыСчета)");
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", Объект.Ссылка);
	
	МассивСтатусовСчетов = Новый Массив();
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Утвержден);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ГотовКОплате);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
	
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.ВОплату);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ);
	МассивСтатусовСчетов.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
														
	Запрос.УстановитьПараметр("СтатусыСчета", МассивСтатусовСчетов);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

//АБС ВСТАВКА №7316 НАЧАЛО
&НаКлиенте
Процедура Изменить(Команда)
	
	Отказ = Ложь;
	СтарПользователь = Объект.Ответственный;
	ПоискРуководителя(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ОтветственныйСотрудник = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаВыбора",,ЭтаФорма);
	Если ЗначениеЗаполнено(ОтветственныйСотрудник) Тогда
		
		#Если Клиент Тогда
			Ответ = Вопрос("Изменить инициатора """+Объект.Ответственный+""" на """+ОтветственныйСотрудник+""" и записать в документе?", РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;	
		#КонецЕсли   		
		
		УдалосьЗаписать = Истина;
		ОбработкаПолученогоРезультата(ОтветственныйСотрудник, УдалосьЗаписать);
		
		Если УдалосьЗаписать Тогда
			ПоменятьИнициаторВСчетеНаОплату(Объект.Ссылка, ОтветственныйСотрудник, СтарПользователь);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПоменятьИнициаторВСчетеНаОплату(ДокументСсылка,врОтветственный,СтарПользователь)
	
	РеквизитФормыВЗначение("Объект").ИзменитьЗадачуПользователя(СтарПользователь, врОтветственный);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	абс_СчетНаОплату.Ссылка,
	               |	абс_СчетНаОплату.Ответственный
	               |ИЗ
	               |	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	               |ГДЕ
	               |	абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ";
				   
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ",ДокументСсылка);
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если Результат.Ответственный <> врОтветственный Тогда
			
			врСчет = Результат.Ссылка.ПолучитьОбъект();
			
			Если врСчет <> Неопределено Тогда
				врСчет.Ответственный = врОтветственный;
				Попытка
					врСчет.ОбменДанными.Загрузка = Истина;
					врСчет.Записать();
				Исключение
					Сообщить("Не удалось изменить ""ответственного"" в счете на оплату - " + врСчет,СтатусСообщения.Важное);	
				КонецПопытки;					
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПоискРуководителя(Отказ = Ложь)
	
	РуководительМассив = ПолучитьПользователяДиректораДирекции(Объект.Ответственный);
	
	//КОНТРОЛЬ
	Если РуководительМассив = Неопределено Тогда
		Сообщить("Не найден директор дирекции инициатора!",СтатусСообщения.Информация);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	Если РуководительМассив.Найти(ПараметрыСеанса.ТекущийПользователь) = Неопределено Тогда
		Сообщить("Изменить инициатора может только директор дирекции инициатора!",СтатусСообщения.Информация);
		Отказ = Истина;
		Возврат;
	КонецЕсли;                      		
		
КонецПроцедуры	

&НаСервере
Процедура ОбработкаПолученогоРезультата(ОтветственныйСотрудник, УдалосьЗаписать)                    		
		
	Если не ЗначениеЗаполнено(ОтветственныйСотрудник) Тогда      
		Сообщить("Изменить инициатора на выбранного сотрудника нельзя!",СтатусСообщения.Информация);	
		Возврат;
	КонецЕсли;	
		            	
	Объект.Ответственный = ОтветственныйСотрудник;
	
	Попытка
		ЭтаФорма.Записать(Новый Структура("РежимЗаписиДокумента",РежимЗаписиДокумента.Проведение));
	Исключение
		УдалосьЗаписать = Ложь;
		Сообщить("Не удалось записать документ!",СтатусСообщения.Важное);	
	КонецПопытки;	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьПользователяДиректораДирекции(Пользователь)
	// Ищем дирекцию подразделения пользователя
	// В дирекции ищем руководителя
	
	ПодразделениеПользователя = Пользователь.абс_Сотрудник.ПодразделениеОрганизации;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) и не ЗначениеЗаполнено(Объект.ЦФО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	перемПодразделениеДирекции = ПолучитьПодразделениеДирекции(ПодразделениеПользователя);
	
	Если перемПодразделениеДирекции = Неопределено и не ЗначениеЗаполнено(Объект.ЦФО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СотрудникРуководителя = ПолучитьОтветственныхПодразделения(перемПодразделениеДирекции, абс_СерверныеФункции.ПолучитьДатуСервера(),Пользователь.абс_Сотрудник.Организация);
	
	Если НЕ ЗначениеЗаполнено(СотрудникРуководителя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросПользователь = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                  |	Пользователи.Ссылка КАК Пользователь
	                                  |ИЗ
	                                  |	Справочник.Пользователи КАК Пользователи
	                                  |ГДЕ
	                                  |	Пользователи.ПометкаУдаления = ЛОЖЬ
	                                  |	И Пользователи.ФизЛицо В (&ФизЛицо)");
									  
	ЗапросПользователь.УстановитьПараметр("ФизЛицо", СотрудникРуководителя);	
	СотрудникРуководителя = ЗапросПользователь.Выполнить().Выгрузить();
	
	Возврат СотрудникРуководителя;
	
	
КонецФункции

&НаСервере
Функция ПолучитьПодразделениеДирекции(перемПодразделение) Экспорт
	
	перемПодразделениеДирекции = перемПодразделение;
	
	//АБС Коломиец 19797+
	УчетнаяПолитика = "";               
	Если ЗначениеЗаполнено(перемПодразделениеДирекции) Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(абс_СерверныеФункции.ПолучитьДатуСервера(), перемПодразделениеДирекции.Владелец);
	КонецЕсли;
	ОшибкаВПолучении      = НЕ ЗначениеЗаполнено(УчетнаяПолитика);
	НеИспользоватьКатегории = ?(ОшибкаВПолучении, Истина, УчетнаяПолитика.абс_НеИспользоватьКатегорииПодразделений); 
	
	Если НЕ НеИспользоватьКатегории Тогда 
		
		Пока (НЕ перемПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Дирекция
			   и НЕ перемПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Департамент)
			И ЗначениеЗаполнено(перемПодразделениеДирекции.Родитель) Цикл
			перемПодразделениеДирекции = перемПодразделениеДирекции.Родитель;
		КонецЦикла;
		
		Если НЕ перемПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Дирекция
			и НЕ перемПодразделениеДирекции.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Департамент Тогда
			Возврат Неопределено;
		КонецЕсли;		
		
	Иначе                                
	//АБС Коломиец 19797-	
		Пока (НЕ перемПодразделениеДирекции.абс_ЯвляетсяДирекцией
				и НЕ перемПодразделениеДирекции.абс_ЯвляетсяДепартаментом)
			И ЗначениеЗаполнено(перемПодразделениеДирекции.Родитель) Цикл
			перемПодразделениеДирекции = перемПодразделениеДирекции.Родитель;
		КонецЦикла;
		
		Если НЕ перемПодразделениеДирекции.абс_ЯвляетсяДирекцией 
			и НЕ перемПодразделениеДирекции.абс_ЯвляетсяДепартаментом Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат перемПодразделениеДирекции;
	
КонецФункции

&НаСервере
Функция ПолучитьОтветственныхПодразделения(перемПодразделение, ТекущаяДата = Неопределено, перемОрганизация = Неопределено) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	//АБС ВСТАВКА №37933 НАЧАЛО «27 января 2014 г.», Пополитов
	врСписокПодразделений = Новый Массив;
	Если не перемПодразделение = Неопределено Тогда
		врСписокПодразделений.Добавить(перемПодразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
		врСписокПодразделений.Добавить(Объект.ЦФО);
	КонецЕсли;		
	Если врСписокПодразделений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;  	
	//\\АБС ВСТАВКА №37933 КОНЕЦ   	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Сотрудник.Физлицо КАК Сотрудник
	                      |ИЗ
	                      |	РегистрСведений.абс_ОтветственныеЛицаПодразделений.СрезПоследних(
	                      |			&ТекущаяДата,
	                      |			СтруктурнаяЕдиница = &Подразделение
	                      |				И (Организация = &Организация
	                      |					ИЛИ (НЕ &ИспользоватьОтборПоОрганизации))) КАК абс_ОтветственныеЛицаПодразделенийСрезПоследних
	                      |ГДЕ
	                      |	абс_ОтветственныеЛицаПодразделенийСрезПоследних.Активен = ИСТИНА");
						  
	Запрос.УстановитьПараметр("Подразделение"	, врСписокПодразделений);
	Запрос.УстановитьПараметр("ТекущаяДата"		, ТекущаяДата);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОрганизации", НЕ перемОрганизация = Неопределено);
	Запрос.УстановитьПараметр("Организация", перемОрганизация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

&НаКлиенте
Процедура Таблица1НДСВалютнаяЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1НДСЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные,Элементы.товары.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			
		ПересчитатьСуммуТабличнойЧасти(Элементы.Товары.ТекущиеДанные);
		
	КонецЦикла;	
	
	Если Объект.Товары.Количество() >= 1 Тогда
		Объект.СтавкаНДСДокумента = Объект.Товары[0].СтавкаНДС;
	Иначе
		Объект.СтавкаНДСДокумента = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;
	
	ИтогоКолонкаОплат = ?(Объект.СледГодОплат,25,13);
	ПодсчетИтогов("ГрафикОплат","Товары",ИтогоКолонкаОплат);
	ИтогоКолонкаПоставок = ?(Объект.СледГодПоставок,25,13);
	ПодсчетИтогов("ГрафикПоставок","Товары",ИтогоКолонкаПоставок);
	
	ПересчетСуммГрафикаОплат();
    ПересчетСуммГрафикаПоставок();		
	
КонецПроцедуры
//\\АБС ВСТАВКА №7316 КОНЕЦ

	
