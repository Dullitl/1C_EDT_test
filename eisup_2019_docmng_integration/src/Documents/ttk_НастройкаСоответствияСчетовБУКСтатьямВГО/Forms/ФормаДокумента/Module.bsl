
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КэшированныеДанные = Новый Структура;
	КэшированныеДанные.Вставить("СчетДт", Неопределено);
	КэшированныеДанные.Вставить("СчетКт", Неопределено);
	
	Для Каждого СтрокаТабЧасти Из Объект.Обороты Цикл 		
		ДанныеСтроки = Новый Структура("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоДт1Доступность, СубконтоДт2Доступность, СубконтоДт3Доступность,
			|СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, СубконтоКт1Доступность, СубконтоКт2Доступность, СубконтоКт3Доступность");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабЧасти);
		УстановитьОграниченияТиповСубконто(ЭтаФорма, ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, ДанныеСтроки); 		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграниченияТиповСубконто(Форма, ДанныеСтроки, ПривестиЗначение = Ложь)

	ПоляФормы = Новый Структура("СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоКт1, СубконтоКт2, СубконтоКт3",
		"ОборотыСубконтоДт1", "ОборотыСубконтоДт2",	"ОборотыСубконтоДт3", "ОборотыСубконтоКт1", "ОборотыСубконтоКт2", "ОборотыСубконтоКт3");
	
	ПриВыбореСчета(ДанныеСтроки, Форма, ПоляФормы, ПривестиЗначение);

КонецПроцедуры // УстановитьОграниченияТиповСубконто()

&НаСервереБезКонтекста
// Определение структуры свойств счета.
//
// Параметры:
//  Счет - ПланСчетовСсылка.Хозрасчетный
//
// Возвращаемое значение:
//  Структура                
//
Функция ПолучитьСвойстваСчета(Счет) Экспорт

	ДанныеСчета = Новый Структура;

	Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда		
		ДанныеСчета.Вставить("Ссылка", Счет.Ссылка);
		ДанныеСчета.Вставить("КоличествоСубконто", Счет.ВидыСубконто.Количество());
		МаксКоличествоСубконто = 3;
		Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл			
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения);
		КонецЦикла;		
	Иначе		
		ДанныеСчета.Вставить("Ссылка", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		ДанныеСчета.Вставить("КоличествоСубконто", 0);		
	КонецЕсли;

	Возврат ДанныеСчета;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура установки типа и доступности субконто в зависимости от выбранного счета.
//
Процедура ПриВыбореСчета(ДанныеСтроки, Форма, ПоляФормы, ПривестиЗначение) Экспорт
	
	ДанныеСчетаДт = ПолучитьСвойстваСчета(ДанныеСтроки.СчетДт);
	
	Для Индекс = 1 По 3 Цикл		
		Если Индекс <= ДанныеСчетаДт.КоличествоСубконто Тогда			
			Если ПоляФормы.Свойство("СубконтоДт" + Индекс) Тогда
				Форма.Элементы[ПоляФормы["СубконтоДт" + Индекс]].ОграничениеТипа = ДанныеСчетаДт["ВидСубконто" + Индекс + "ТипЗначения"];
			КонецЕсли;			
			ДанныеСтроки["СубконтоДт" + Индекс + "Доступность"] = Истина;
			Если ПривестиЗначение Тогда
				ДанныеСтроки["СубконтоДт" + Индекс] = 
					ДанныеСчетаДт["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(ДанныеСтроки["СубконтоДт" + Индекс]);
			КонецЕсли;			
		Иначе			
			ДанныеСтроки["СубконтоДт" + Индекс + "Доступность"] = Ложь;			
			Если ПривестиЗначение Тогда
				ДанныеСтроки["СубконтоДт" + Индекс] = Неопределено;
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;
	
	ДанныеСчетаКт = ПолучитьСвойстваСчета(ДанныеСтроки.СчетКт);
	
	Для Индекс = 1 По 3 Цикл		
		Если Индекс <= ДанныеСчетаКт.КоличествоСубконто Тогда			
			Если ПоляФормы.Свойство("СубконтоКт" + Индекс) Тогда
				Форма.Элементы[ПоляФормы["СубконтоКт" + Индекс]].ОграничениеТипа = ДанныеСчетаКт["ВидСубконто" + Индекс + "ТипЗначения"];
			КонецЕсли;			
			ДанныеСтроки["СубконтоКт" + Индекс + "Доступность"] = Истина;
			Если ПривестиЗначение Тогда
				ДанныеСтроки["СубконтоКт" + Индекс] = 
					ДанныеСчетаКт["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(ДанныеСтроки["СубконтоКт" + Индекс]);
			КонецЕсли;			
		Иначе			
			ДанныеСтроки["СубконтоКт" + Индекс + "Доступность"] = Ложь;			
			Если ПривестиЗначение Тогда
				ДанныеСтроки["СубконтоКт" + Индекс] = Неопределено;
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовПоРолямПользователя()
	
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"));	
	
	Если мСтатус = ПредопределенноеЗначение("Перечисление.абсСтатусыКонтрагентов.Подготовка") Тогда
		УстановитьТолькоПросмотрВсемЭлементам(Ложь);
	Иначе
		Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) <> Неопределено Или мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено Тогда
			УстановитьТолькоПросмотрВсемЭлементам(Ложь);
		Иначе 
			УстановитьТолькоПросмотрВсемЭлементам(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьТолькоПросмотрВсемЭлементам(мТолькоПросмотр = Истина)

	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ДекорацияФормы") Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Элемент.ТолькоПросмотр = мТолькоПросмотр;
		Исключение
			Элемент.Доступность = Не мТолькоПросмотр;						
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыДокументаНаСервере()

	Документы.ttk_НастройкаСоответствияСчетовБУКСтатьямВГО.ЗаполнитьСписокДоступныхСтатусов(Элементы.мСтатус.СписокВыбора, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыНаСервере()
	
	ИсторияСогласования.Параметры.УстановитьЗначениеПараметра("Дт", ТекущаяДата());
	ИсторияСогласования.Параметры.УстановитьЗначениеПараметра("СсылкаНаДокумент", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = (Параметры.Ключ.Пустая() И Параметры.ЗначениеКопирования.Пустая());
	ТолькоПросмотрЭлемента = Ложь;
	УстановитьПараметрыНаСервере();	
	Объект.Ответственный = ?(Не ЗначениеЗаполнено(Объект.Ответственный), глЗначениеПеременной("глТекущийПользователь"), Объект.Ответственный);
	Объект.Статус = ?(Не ЗначениеЗаполнено(Объект.Статус), Перечисления.абс_СтатусыПервичныхДокументов.Подготовка, Объект.Статус);
	
	Если Не (РольДоступна("АБС_Бухгалтер") Или РольДоступна("ПолныеПрава")) Тогда
		ТолькоПросмотрЭлемента = Истина;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСтатусыДокументаНаСервере();
	мСтатус = Объект.Статус;
	УстановитьТолькоПросмотрВсемЭлементам(ТолькоПросмотрЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	мСтатус = Объект.Статус;
	ОбновитьВидимостьЭлементовПоРолямПользователя();
	УстановитьПараметрыНаСервере();
	Элементы.ИсторияСогласования.Обновить();
	ЗаполнитьСтатусыДокументаНаСервере();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если мСтатус <> Объект.Статус Тогда
		ПричинаИзмененияСтатуса = "";
		Если ВвестиСтроку(ПричинаИзмененияСтатуса, "Причина изменения статуса.", , Истина) Тогда
			Объект.ПричинаИзмененияСтатуса = ПричинаИзмененияСтатуса;
			Объект.Статус = мСтатус;
		Иначе 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусыПервичныхДокументов.Согласован") Тогда
		Отказ = Документы.ttk_НастройкаСоответствияСчетовБУКСтатьямВГО.ПроверитьДействующиеДокументы(Объект.Ссылка);
		Если Отказ И ЗначениеЗаполнено(Объект.Основание) Тогда
			Ответ = Вопрос("Для согласования данного документа необходимо перевести в отмену документ '" + Строка(Объект.Основание) + "'. Выполнить это сейчас?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Ложь;
				ОбъектОснование = Объект.Основание.ПолучитьОбъект();
				ОбъектОснование.Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отмена;
				ОбъектОснование.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыРеквизитПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	СчетДт = ТекущиеДанные.СчетДт;
	СЗ = Новый СписокЗначений();
	Для Ном = 1 по 3 Цикл
		Если (Ном <= СчетДт.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетДт)) Тогда
			МетаТип = Метаданные.НайтиПоТипу(СчетДт.ВидыСубконто[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
			Попытка
				Если МетаТип.Реквизиты.Количество() > 0 Тогда
					СЗ.Добавить(Ном-1, СчетДт.ВидыСубконто[Ном-1].ВидСубконто.Наименование,,);
				КонецЕсли;
			Исключение
			КонецПопытки; 
		КонецЕсли;
	КонецЦикла;
	
	НомерСубконто = Неопределено;
	Если СЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		НомерСубконто = ВыбратьИзСписка(СЗ, Элемент,);
	КонецЕсли;
	
	// Выбор реквизита субконто
	СЗ = Новый СписокЗначений();
	Если НомерСубконто <> Неопределено Тогда
		МетаТип = Метаданные.НайтиПоТипу(СчетДт.ВидыСубконто[НомерСубконто.Значение].ВидСубконто.ТипЗначения.Типы()[0]);
		Для каждого Рекв Из МетаТип.Реквизиты Цикл
			СЗ.Добавить(Рекв.Имя, Рекв.Синоним);
		КонецЦикла;
	КонецЕсли;

	Рекв = СЗ.ВыбратьЭлемент("Выбор реквизита",);
	
	Если Рекв <> Неопределено Тогда
		ТекущиеДанные.Реквизит = "Субконто" + (НомерСубконто.Значение+1) + "." + Рекв.Значение;
		ТекущиеДанные.РеквизитПредставление = НомерСубконто.Представление + "/" + Рекв.Представление;
		ТекущиеДанные.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(МетаТип.Реквизиты[Рекв.Значение].Тип.Типы()[0]);
		Элементы.Обороты.ТекущиеДанные.Значение = ТекущиеДанные.РеквизитПредставление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыСчетДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или КэшированныеДанные.СчетДт = ТекущиеДанные.СчетДт Тогда		
		Возврат;                           		
	КонецЕсли;
		
	ДанныеСтроки = Новый Структура("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоДт1Доступность, СубконтоДт2Доступность, СубконтоДт3Доступность,
		|СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, СубконтоКт1Доступность, СубконтоКт2Доступность, СубконтоКт3Доступность");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные); 
	УстановитьОграниченияТиповСубконто(ЭтаФорма, ДанныеСтроки, Истина);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
		
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;                           		
	КонецЕсли;
	
	КэшированныеДанные.СчетДт = ТекущиеДанные.СчетДт;
	КэшированныеДанные.СчетКт = ТекущиеДанные.СчетКт;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;                           		
	КонецЕсли;
	
	//Если НоваяСтрока Тогда
	//	ТекущиеДанные.Учитывается = Истина;	
	//КонецЕсли;
	
	ДанныеСтроки = Новый Структура("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоДт1Доступность, СубконтоДт2Доступность, СубконтоДт3Доступность,
		|СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, СубконтоКт1Доступность, СубконтоКт2Доступность, СубконтоКт3Доступность");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные); 
	УстановитьОграниченияТиповСубконто(ЭтаФорма, ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыСчетКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или КэшированныеДанные.СчетКт = ТекущиеДанные.СчетКт Тогда
		Возврат;                           		
	КонецЕсли;
		
	ДанныеСтроки = Новый Структура("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоДт1Доступность, СубконтоДт2Доступность, СубконтоДт3Доступность,
		|СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, СубконтоКт1Доступность, СубконтоКт2Доступность, СубконтоКт3Доступность");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные); 
	УстановитьОграниченияТиповСубконто(ЭтаФорма, ДанныеСтроки, Истина);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Протестировать(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо записать документ.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ttk_НастройкаСоответствияСчетовБУКСтатьямВГО.Форма.ФормаНастроекОтбора",,ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Ошибки = 0;
	Для Каждого Стр Из ТекущийОбъект.Обороты Цикл
		Для н = 1 По 3 Цикл		
			Если ТипЗнч(Стр["СубконтоДт" + н]) = Тип("СправочникСсылка.Контрагенты") Или ТипЗнч(Стр["СубконтоКт" + н]) = Тип("СправочникСсылка.Контрагенты") Тогда
				Ошибки = 0;
				Прервать;				
			Иначе
				Ошибки = Ошибки + 1;
			КонецЕсли;
		КонецЦикла;	
		Если Ошибки > 0 Тогда			
			Сообщить("В строке " + (Стр.НомерСтроки) + " указаны счета у которых нет субконто 'Контрагенты'.");
			Отказ = Истина;
			Прервать;
			Возврат;
		КонецЕсли;
	КонецЦикла;
 
 	ТекущийОбъект.ДополнительныеСвойства.Вставить("Объект", ТекущийОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура СальдоСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	Ошибки = 0;
	Для Каждого Субконто Из ВыбранноеЗначение.ВидыСубконто Цикл
		Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
			Ошибки = 0;
			Прервать;
		Иначе
			Ошибки = Ошибки + 1;
		КонецЕсли;
	КонецЦикла;
	Если Ошибки > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("У счета '" + Строка(ВыбранноеЗначение) + "' отсутствует вид субконто 'Контрагенты'.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	СчетХозрасчетный = ТекущиеДанные.СчетДт;
	СЗ = Новый СписокЗначений();
	Для Ном = 1 по 3 Цикл
		Если (Ном <= СчетХозрасчетный.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетХозрасчетный)) Тогда
			МетаТип = Метаданные.НайтиПоТипу(СчетХозрасчетный.ВидыСубконто[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
			Попытка
				Если МетаТип.Реквизиты.Количество() > 0 Тогда
					СЗ.Добавить(Ном-1, СчетХозрасчетный.ВидыСубконто[Ном-1].ВидСубконто.Наименование,,);
				КонецЕсли;
			Исключение
			КонецПопытки; 
		КонецЕсли;
	КонецЦикла;
	
	НомерСубконто = Неопределено;
	Если СЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		НомерСубконто = ВыбратьИзСписка(СЗ, Элемент,);
	КонецЕсли;
	
	СЗ = Новый СписокЗначений();
	Если НомерСубконто <> Неопределено Тогда
		МетаТип = Метаданные.НайтиПоТипу(СчетХозрасчетный.ВидыСубконто[НомерСубконто.Значение].ВидСубконто.ТипЗначения.Типы()[0]);
		Для каждого Рекв Из МетаТип.Реквизиты Цикл
			СЗ.Добавить(Рекв.Имя, Рекв.Синоним);
		КонецЦикла;
	КонецЕсли;

	Рекв = СЗ.ВыбратьЭлемент("Выбор реквизита",);
	
	Если Рекв <> Неопределено Тогда
		ТекущиеДанные.Реквизит = "СубконтоДт" + (НомерСубконто.Значение+1) + "." + Рекв.Значение;
		ТекущиеДанные.РеквизитПредставление = НомерСубконто.Представление + "/" + Рекв.Представление;
		ТекущиеДанные.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(МетаТип.Реквизиты[Рекв.Значение].Тип.Типы()[0]);
	КонецЕсли;
	
	Элементы.ОборотыЗначение.ВыбиратьТип = Не ЗначениеЗаполнено(ТекущиеДанные.Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыРеквизитНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	СчетХозрасчетный = ТекущиеДанные.СчетДт;
	СЗ = Новый СписокЗначений();
	Для Ном = 1 по 3 Цикл
		Если (Ном <= СчетХозрасчетный.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетХозрасчетный)) Тогда
			МетаТип = Метаданные.НайтиПоТипу(СчетХозрасчетный.ВидыСубконто[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
			Попытка
				Если МетаТип.Реквизиты.Количество() > 0 Тогда
					СЗ.Добавить(Ном-1, СчетХозрасчетный.ВидыСубконто[Ном-1].ВидСубконто.Наименование,,);
				КонецЕсли;
			Исключение
			КонецПопытки; 
		КонецЕсли;
	КонецЦикла;
	
	НомерСубконто = Неопределено;
	Если СЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		НомерСубконто = ВыбратьИзСписка(СЗ, Элемент,);
	КонецЕсли;
	
	СЗ = Новый СписокЗначений();
	Если НомерСубконто <> Неопределено Тогда
		МетаТип = Метаданные.НайтиПоТипу(СчетХозрасчетный.ВидыСубконто[НомерСубконто.Значение].ВидСубконто.ТипЗначения.Типы()[0]);
		Для каждого Рекв Из МетаТип.Реквизиты Цикл
			СЗ.Добавить(Рекв.Имя, Рекв.Синоним);
		КонецЦикла;
	КонецЕсли;

	Рекв = СЗ.ВыбратьЭлемент("Выбор реквизита",);
	
	Если Рекв <> Неопределено Тогда
		ТекущиеДанные.Реквизит = "СубконтоДт" + (НомерСубконто.Значение+1) + "." + Рекв.Значение;
		ТекущиеДанные.РеквизитПредставление = НомерСубконто.Представление + "/" + Рекв.Представление;
		ТекущиеДанные.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(МетаТип.Реквизиты[Рекв.Значение].Тип.Типы()[0]);		
	КонецЕсли;
	
	Элементы.ОборотыЗначение.ВыбиратьТип = Не ЗначениеЗаполнено(ТекущиеДанные.Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыРеквизитОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Обороты.ТекущиеДанные;
	ТекущиеДанные.Значение = "";
	ТекущиеДанные.Реквизит = "";
	ТекущиеДанные.РеквизитПредставление = "";
	Элементы.ОборотыЗначение.ВыбиратьТип = Не ЗначениеЗаполнено(ТекущиеДанные.Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Получение данных
	ТЗ = Документы.ttk_СверкаВГО.ПолучитьОстаткиИОборотыПоСчетам(Параметр, , Объект.Ссылка, Истина);
	//Вывод данных
	СхемаКомпоновкиДанных = Документы.ttk_СверкаВГО.ПолучитьМакет("ПроверкаВыводаДанных");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ВнешнийНаборДанных = Новый Структура("СальдоИОбороты", ТЗ);
	
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки);
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.Вывод = ИспользованиеВывода.Запретить;
	ИмяФайла = "Сальдо и обороты по организации: " + Параметр.Организация + " за период: " + Формат(Параметр.ДатаНач,"ДЛФ=DD") + " - " + Формат(Параметр.ДатаКон,"ДЛФ=DD");
	ДокументРезультат.Показать(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПолучитьТабДок();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПолучитьТабДок()
	Док = РеквизитФормыВЗначение("Объект");
	Макет = Док.ПолучитьМакет("Макет");
	ТабДок = Новый ТабличныйДокумент;
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблДанные = Макет.ПолучитьОбласть("Данные");
	ТабДок.Вывести(ОблШапка);

	Для каждого Элемент ИЗ Объект.Обороты Цикл
		ОблДанные.Параметры.КодДТ1 = "";
		ОблДанные.Параметры.КодДТ2 = "";
		ОблДанные.Параметры.КодДТ3 = "";
		ОблДанные.Параметры.КодВГО = "";
		ОблДанные.Параметры.Заполнить(Элемент);
		Если ЗначениеЗаполнено(Элемент.СубконтоДт1) Тогда
			Попытка
				ОблДанные.Параметры.КодДТ1 = Элемент.СубконтоДт1.Код;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.СубконтоДт2) Тогда
			Попытка
				ОблДанные.Параметры.КодДТ2 = Элемент.СубконтоДт2.Код;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.СубконтоДт3) Тогда
			Попытка
				ОблДанные.Параметры.КодДТ3 = Элемент.СубконтоДт3.Код;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.СтатьяВГО) Тогда
			Попытка
				ОблДанные.Параметры.КодВГО = Элемент.СтатьяВГО.Код;
			Исключение
			КонецПопытки;
		КонецЕсли;
		ТабДок.Вывести(ОблДанные);
	КонецЦикла;
	Возврат ТабДок;	
КонецФункции

