 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
//АБС ИЗМЕНЕНИЕ 000032160  23.03.2015 17:41:07  Шамов1
//Функция абс_ПолучитьМассивОрганизаций(ТекГруппыДоступа = Неопределено, ТекГруппыДоступаИсключение = Неопределено) Экспорт
Функция абс_ПолучитьМассивОрганизаций(ТекГруппыДоступа = Неопределено, ТекГруппыДоступаИсключение = Неопределено, ТолькоРедактирование = ЛОЖЬ) Экспорт
//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Организация);
	
	ДоступныеГруппыДоступа = Новый Массив; 	
	Если не ТекГруппыДоступа = Неопределено Тогда
		ДоступныеГруппыДоступа.Добавить(ТекГруппыДоступа);	
	КонецЕсли;	
	Для каждого Стр Из ГруппыДоступаПользователя Цикл 		
		Используется = Ложь;
		Если (Стр.ТекущаяГруппа и  Не Стр.Использование и ПраваОтменены) или (Стр.Использование и Не ПраваОтменены и Стр.Редактирование) Тогда
			Используется = Истина;	
		КонецЕсли;		
		//АБС ИЗМЕНЕНИЕ 000032160  23.03.2015 17:41:07  Шамов1
		//Если Используется Тогда
		Если Используется И (НЕ ТолькоРедактирование ИЛИ Стр.Редактирование) Тогда
		//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ
			ДоступныеГруппыДоступа.Добавить(Стр.ГруппаПользователя);
		КонецЕсли;		
	КонецЦикла;	
	Если не ТекГруппыДоступаИсключение = Неопределено Тогда
		ИндексМассива = ДоступныеГруппыДоступа.Найти(ТекГруппыДоступаИсключение);
		Если не ИндексМассива = Неопределено Тогда
			ДоступныеГруппыДоступа.Удалить(ИндексМассива);	
		КонецЕсли;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(НастройкиПравДоступаПользователей.ОбъектДоступа КАК Справочник.Организации) КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.Пользователь В(&ДоступныеГруппыДоступа)
	|	И НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	//|	И НастройкиПравДоступаПользователей.Чтение
	|	И НастройкиПравДоступаПользователей.Запись
	|	И НЕ ВЫРАЗИТЬ(НастройкиПравДоступаПользователей.ОбъектДоступа КАК Справочник.Организации) В (&МассивОрганизаций)
	|	И (ВЫРАЗИТЬ(НастройкиПравДоступаПользователей.ОбъектДоступа КАК Справочник.Организации)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//АБС ВСТАВКА   27.02.2015 9:27:30  Шамов
	|	И ВЫРАЗИТЬ(НастройкиПравДоступаПользователей.ОбъектДоступа КАК Справочник.Организации).абс_СтатусОрганизации <> Значение(Перечисление.абс_СтатусОрганизации.ОбособленноеПодразделение)
	//АБС ВСТАВКА  КОНЕЦ 
	|	И НастройкиПравДоступаПользователей.ОбъектДоступа <> НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);       
	Запрос.УстановитьПараметр("ДоступныеГруппыДоступа", ДоступныеГруппыДоступа);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивОрганизаций.Добавить(Результат.Организация);	
	КонецЦикла;	
	
	Возврат МассивОрганизаций;
	
КонецФункции	

Процедура ОбработкаСправочникаГруппыПользователей()
	
	ДоступныеГруппыДоступа = Новый Массив;
	ДоступныеГруппыДоступаРедактирование = Новый Массив;
	
	Для каждого Стр Из ГруппыДоступаПользователя Цикл
		
		Используется = Ложь;
		
		Если (Стр.ТекущаяГруппа и  Не Стр.Использование и ПраваОтменены) или (Стр.Использование и Не ПраваОтменены) Тогда
			Используется = Истина;	
		КонецЕсли;	
		
		//Если (НЕ Стр.ТекущаяГруппа и Стр.Использование и ПраваОтменены) или (НЕ Стр.Использование и Не ПраваОтменены) Тогда	
		//	Продолжить;	
		//КонецЕсли;	
		Если Используется Тогда
			ДоступныеГруппыДоступа.Добавить(Стр.ГруппаПользователя);
			Если Стр.Редактирование Тогда
				ДоступныеГруппыДоступаРедактирование.Добавить(Стр.ГруппаПользователя);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;

	//Удаление пользователя из группы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователейПользователиГруппы.Ссылка  КАК ГруппаДоступа
	|ИЗ
	|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	|ГДЕ
	|	НЕ ГруппыПользователейПользователиГруппы.Ссылка В (&ДоступныеГруппыДоступа)
	|	И ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь";
	
	
	Запрос.УстановитьПараметр("Пользователь",Пользователь); 
	Запрос.УстановитьПараметр("ДоступныеГруппыДоступа", ДоступныеГруппыДоступа);
	Результат = Запрос.Выполнить();
	
	Отбор = Новый Структура("Пользователь");
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектГруппаДоступа	= ВыборкаДетальныеЗаписи.ГруппаДоступа.ПолучитьОбъект();
		Отбор.Пользователь = Пользователь;
		Строки = ОбъектГруппаДоступа.ПользователиГруппы.НайтиСтроки(Отбор);
		Для каждого Стр Из Строки Цикл
			ОбъектГруппаДоступа.ПользователиГруппы.Удалить(Стр);
		КонецЦикла;
		ОбъектГруппаДоступа.Записать();	
	КонецЦикла;
	
	
	//Добавление пользователя в группу
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка КАК ГруппаДоступа
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка В(&ДоступныеГруппыДоступа)";
	
	Запрос.УстановитьПараметр("ДоступныеГруппыДоступа", ДоступныеГруппыДоступа);
	Результат = Запрос.Выполнить();
	
	Отбор = Новый Структура("Пользователь");
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектГруппаДоступа	= ВыборкаДетальныеЗаписи.ГруппаДоступа.ПолучитьОбъект();
		Отбор.Пользователь = Пользователь;
		Строки = ОбъектГруппаДоступа.ПользователиГруппы.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			НоваяСтрока = ОбъектГруппаДоступа.ПользователиГруппы.Добавить();
			НоваяСтрока.Пользователь = Пользователь;
			Если ДоступныеГруппыДоступаРедактирование.Найти(ВыборкаДетальныеЗаписи.ГруппаДоступа) <> Неопределено Тогда
				НоваяСтрока.абс_Редактируют = Истина;	
			КонецЕсли;	
			ОбъектГруппаДоступа.Записать();
		Иначе	
			абс_Редактируют = Ложь;
			Если ДоступныеГруппыДоступаРедактирование.Найти(ВыборкаДетальныеЗаписи.ГруппаДоступа) <> Неопределено Тогда
				абс_Редактируют = Истина;	
			КонецЕсли;	
			Если абс_Редактируют Тогда
				Для Каждого СтрокаМассива Из Строки Цикл
					СтрокаМассива.абс_Редактируют = абс_Редактируют;	
				КонецЦикла;
				ОбъектГруппаДоступа.Записать();
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
    
КонецПроцедуры

Процедура СоздатьНовогоСотрудника()

	//Создание физ.лица
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		СтруктураВозврата = Новый Структура("ФизЛицо,Описание");
		СтруктураВозврата.Вставить("Описание","");
		Описание 			 = "";
		ФИО 				 = СокрЛП(Сотрудник.Наименование);	
		ФизЛицо 			 = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИО);
		
		Если ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			НовыйФЛ 			 = Справочники.ФизическиеЛица.СоздатьЭлемент();
			НовыйФЛ.Наименование = ФИО;
			НовыйФЛ.Записать();
			НайденноеФизЛицо 	 = НовыйФЛ.Ссылка;
			
			//НаборЗаписей 		 = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.ФизЛицо.Установить(НайденноеФизЛицо);
			//НаборЗаписей.Прочитать();
			//НоваяЗапись 		 = НаборЗаписей.Добавить();
			//НоваяЗапись.ФизЛицо  = НайденноеФизЛицо;
			//НоваяЗапись.Фамилия  = Фамилия;
			//НоваяЗапись.Период   = '198001010000';
			//НоваяЗапись.Имя 	 = Имя;
			//НоваяЗапись.Отчество = Отчество;
			//НаборЗаписей.Записать(Истина);
			
			ФизическоеЛицо = НайденноеФизЛицо.Ссылка;
		Иначе
			ФизическоеЛицо = ФизЛицо.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//Создание сотрудника
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		НовыйСотрудник 							 = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
		НовыйСотрудник 							 = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
		НовыйСотрудник.Актуальность				 = Истина;
		НовыйСотрудник.ОбменДанными.Загрузка	 = Истина;
		НовыйСотрудник.Физлицо      			 = ФизическоеЛицо;
		НовыйСотрудник.Наименование 			 = ФизическоеЛицо.Наименование;
		//НовыйСотрудник.ДатаПриемаНаРаботу = ;
		НовыйСотрудник.ПодразделениеОрганизации  = ПодразделениеОрганизации;
		//НовыйСотрудник.Должность =   СтрокаТабличнойЧасти.Должность;
		НовыйСотрудник.ОбособленноеПодразделение = Организация;
		НовыйСотрудник.ТекущееПодразделениеОрганизации =  ПодразделениеОрганизации;
		НовыйСотрудник.Организация				 = Организация;
		НовыйСотрудник.ВидДоговора 				 = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
		НовыйСотрудник.ВидЗанятости 			 = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
		НовыйСотрудник.Записать();
		//	СформироватьПриемНаРаботу(НовыйСотрудник.Ссылка,СтрокаТабличнойЧасти.Подразделение,СтрокаТабличнойЧасти.Должность,Неопределено);
		Сотрудник = НовыйСотрудник.Ссылка;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьНовогоПользователя()
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		ФИО = СокрЛП(Сотрудник.Наименование); 
		СоздатьНовогоСотрудника();
		
		//Добавление пользователя ИБ
		ПользовательИБ = абс_БизнесПроцессыУведомления.СоздатьПользователяИБ(ФИО,ДоменноеИмя,Организация.Наименование);
		
		//Создание нового пользователя
		НовыйПользователь = абс_БизнесПроцессыУведомления.СоздатьНовогоПользователя(ФИО,Сотрудник,ДоменноеИмя,ПользовательИБ,ГруппаПользователя,Организация);
		Пользователь = НовыйПользователь.Ссылка; 
		//ЗаполнитьНастройкиПользователя();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьВРегистрОтветственныеЛицаПодразделений(Подразделение,Сотрудник,Ответственный,МассивОрганизаций = Неопределено)
	
	Если МассивОрганизаций = Неопределено Тогда
		
		Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			мСтрОрганизация = Подразделение.Владелец;
			мСтрОрганизация = ?(ЗначениеЗаполнено(мСтрОрганизация),мСтрОрганизация,Организация);
		Иначе
			мСтрОрганизация = Организация;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений.абс_ОтветственныеЛицаПодразделений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Подразделение);
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		НаборЗаписей.Отбор.Организация.Установить(мСтрОрганизация);
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись =  НаборЗаписей.Добавить();
			НоваяЗапись.Период 				  = НачалоГода(Дата);
			НоваяЗапись.СтруктурнаяЕдиница    = Подразделение;
			НоваяЗапись.Сотрудник             = Сотрудник;
			НоваяЗапись.Организация           = мСтрОрганизация;  			
			НоваяЗапись.Активен               = Истина;
			НоваяЗапись.Ответственный         = Ответственный;
			НаборЗаписей.Записать();
		КонецЕсли;	
		
	Иначе
		
		Для Каждого мСтрОрганизация Из МассивОрганизаций Цикл
			
			НаборЗаписей = РегистрыСведений.абс_ОтветственныеЛицаПодразделений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Подразделение);
			НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
			НаборЗаписей.Отбор.Организация.Установить(мСтрОрганизация);
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗапись =  НаборЗаписей.Добавить();
				НоваяЗапись.Период 				  = НачалоГода(Дата);
				НоваяЗапись.СтруктурнаяЕдиница    = Подразделение;
				НоваяЗапись.Сотрудник             = Сотрудник;
				НоваяЗапись.Организация           = мСтрОрганизация;  			
				НоваяЗапись.Активен               = Истина;
				НоваяЗапись.Ответственный         = Ответственный;
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;     	
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоЗаявкеНаИзменениеПрав(Ссылка);
	
КонецФункции

Процедура ЗаписатьНовыйСтатус(НовыйСтатус,ПричинаИзмененияСтатуса)

	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗаявокНаДобавлениеИзменениеПрав.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.Заявка				= Ссылка;
	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусЗаявки  		= НовыйСтатус;
	
	Если Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполнено Тогда
		ПричинаИзмененияСтатуса			= "Изменен регламентным заданием";
	КонецЕсли;
	
	Запись.Комментарий 			= ПричинаИзмененияСтатуса;
	
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьВРегистрЦФОЦФУПользователей(Пользователь,ЦФОЦФУ,Подразделение,СтрОрганизация);
	
	мСтрОрганизация = ?(ЗначениеЗаполнено(СтрОрганизация),СтрОрганизация,Организация);
	
	НаборЗаписей = РегистрыСведений.абс_ЦФОПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	//АБС_Вставка 000024503 290114 Родин
	НаборЗаписей.Отбор.Организация.Установить(мСтрОрганизация);
	//АБС_Вставка 000024503 290114 Родин
	
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Если ТипЗнч(ЦФОЦФУ) = Тип("СправочникСсылка.Подразделения") Тогда
			НаборЗаписей.Отбор.ЦФО.Установить(ЦФОЦФУ);
		Иначе
			НаборЗаписей.Отбор.ЦФУ.Установить(ЦФОЦФУ);
		КонецЕсли;
	КонецЕсли;
	
	Если Подразделение <> Неопределено Тогда 
		НаборЗаписей.Отбор.Дирекция.Установить(Подразделение);
		НаборЗаписей.Отбор.Департамент.Установить(Подразделение);
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь    = Пользователь;
		
		//АБС_Вставка 000024503 290114 Родин
		НоваяЗапись.Организация     = мСтрОрганизация;
		//АБС_Вставка 000024503 290114 Родин
		
		Если Подразделение = Неопределено Тогда
			Если ТипЗнч(ЦФОЦФУ) = Тип("СправочникСсылка.Подразделения") Тогда
				НоваяЗапись.ЦФО             = ЦФОЦФУ;
			Иначе
				НоваяЗапись.ЦФУ             = ЦФОЦФУ;
			КонецЕсли;
		КонецЕсли;
		
		Если Подразделение <> Неопределено Тогда 
			НоваяЗапись.Дирекция    = Подразделение;
			НоваяЗапись.Департамент = Подразделение;
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВРегистрОтветственныеРНПД(ЦФО,ВидДокументаРНПД,СтрОрганизация)
	
	мСтрОрганизация = ?(ЗначениеЗаполнено(СтрОрганизация),СтрОрганизация,Организация);
	
 	НаборЗаписей = РегистрыСведений.абс_ОтветственныеРНПД.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Установить(мСтрОрганизация);
	НаборЗаписей.Отбор.Ответственный.Установить(Пользователь);
	
	Если ЦФО <> Неопределено Тогда
		НаборЗаписей.Отбор.ЦФО.Установить(ЦФО);
	КонецЕсли;
	
	Если ВидДокументаРНПД <> Неопределено Тогда
		НаборЗаписей.Отбор.ВидДокументаРНПД.Установить(ВидДокументаРНПД);
	КонецЕсли;

	
	НаборЗаписей.Отбор.Дирекция.Установить(ПодразделениеОрганизации);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись =  НаборЗаписей.Добавить();
		НоваяЗапись.Ответственный    = Пользователь;
		
		Если ВидДокументаРНПД <> Неопределено Тогда
			НоваяЗапись.ВидДокументаРНПД = ВидДокументаРНПД;
		КонецЕсли;
		
		Если ЦФО <> Неопределено Тогда
			НоваяЗапись.ЦФО              = ЦФО;
		КонецЕсли;
		
		НоваяЗапись.Дирекция         = ПодразделениеОрганизации;
		НоваяЗапись.Организация      = мСтрОрганизация;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЗадачуПоЗаявке(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина)
	
	//Если Исполнитель = Неопределено Тогда
	//	Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	//КонецЕсли;	
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	РолиИИсполнители.Исполнитель КАК  Исполнитель
	//|ИЗ
	//|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	//|ГДЕ
	//|	РолиИИсполнители.Роль = &Роль";
	//
	//Запрос.УстановитьПараметр("Роль", Роль);
	//Результат = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
	//КонецЦикла;
	ОтборПоИсполнителю = Ложь;
	МассивЗадач = Новый Массив;
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель"		, Исполнитель);
	ЗапросЗадач.УстановитьПараметр("ОтборПоИсполнителю"	, ОтборПоИсполнителю);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		МассивЗадач.Добавить(ВыборкаЗадач.Ссылка);
	КонецЕсли;
	
	Возврат МассивЗадач;
	
КонецФункции

Функция ПолучитьЗадачуПоЗаявке()
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СпТочек = Новый Массив;
	ТекСтатус = Ссылка.Статус;
	
	Если ТекСтатус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Подготовка Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеКТТК);	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеДЗО);	
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.СогласованиеНаУровнеДЗО Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.ПодготовкаЗаявки);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.СогласованиеНаУровнеКТТК Тогда
		
		Если Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ДЗО ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.Филиал Тогда
			СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованиеНаУровнеДЗО);
		Иначе
			СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.ПодготовкаЗаявки);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Отказ Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеКТТК);	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.ПодготовкаЗаявки);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Утверждена Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеКТТК);	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеДЗО);	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.ПодготовкаЗаявки);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.СогласованиеРуководителемКадровойСлужбы Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеКТТК);	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.ПодготовкаЗаявки);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.СогласованиеГлавнымБухгалтером Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованиеРуководителемКадровойСлужбы);	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеКТТК);	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.СогласованаНаУровнеДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО.ТочкиМаршрута.ПодготовкаЗаявки);
	КонецЕсли;	
	
	Возврат НайтиЗадачуПоЗаявке(БП, СпТочек,,Ложь);
КонецФункции

Функция ПолучитьОрганизациюБизнессПроцесса(ЗадачаДоговора)
	
	мОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Если ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеДоговоров")  ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ДоговорКонтрагента.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсЗакрытиеДоговоров")  ТОГДА 
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ДоговорКонтрагента.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеКонтрагентов")  ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.Контрагент.абс_ОрганизацияИнициаторКонтрагента;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсЗавершениеОтношенийСКонтрагентами") ТОГДА
		мОрганизация = ЗадачаДоговора.Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсПереутверждениеКонтрагентов")   ТОГДА
		мОрганизация = ЗадачаДоговора.Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеЗакупочногоЗаказа") ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ЗакупочныйЗаказ.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеСчетаНаОплату")  ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.СчетНаОплату.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсУточнениеСчетаНаОплату")  ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.СчетНаОплату.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеНоменклатуры")   ТОГДА
		мОрганизация = ЗадачаДоговора.Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеПервичныхДокументов") ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ПервичныйДокумент.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсРекласификацияБюджета") ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.РекласификацияБюджета.ИсточникОрганизация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсЗаявкаВПоддержку") ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ЗадачаВПоддержку.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеБюджета") ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсИзменениеРеквизитовКонтрагентов") ТОГДА
		мОрганизация = ЗадачаДоговора.Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеНоменклатурныхГрупп") ТОГДА
		мОрганизация = ЗадачаДоговора.Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеСтатейЗатрат") ТОГДА
		мОрганизация = ЗадачаДоговора.Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абсСогласованиеПрочихДоходовИРасходов")  ТОГДА
		мОрганизация = ЗадачаДоговора.Исполнитель.абс_Сотрудник.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абс_СогласованиеРПР")  ТОГДА 
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ДокументРПР.Организация;
	ИначеЕсли ТипЗнч(ЗадачаДоговора.БизнесПроцесс) = Тип("БизнесПроцессСсылка.абс_СогласованиеЗаявкиНаДобавлениеИзменениеПравДоступаНаУровнеДЗО") ТОГДА
		мОрганизация = ЗадачаДоговора.БизнесПроцесс.ЗаявкаНаДобавлениеПрав.Организация;
	Конецесли;

	Возврат мОрганизация;
КонецФункции 

Функция ОдинаковыеНаименованияПодразделений(мПодразделение, Подразделение) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("мПодразделение",мПодразделение);
	СтруктураПараметров.Вставить("Подразделение",Подразделение);
	СтруктураПараметров.Вставить("ОдинаковыеНаименования",Ложь);
	
	ТекстМодуля = "
	|УстановитьПривилегированныйРежим(Истина);
	|СтруктураПараметров.ОдинаковыеНаименования = СокрЛП(СтруктураПараметров.мПодразделение.Наименование) = СокрЛП(СтруктураПараметров.Подразделение);
	|УстановитьПривилегированныйРежим(Ложь);
	|";
	
	абс_СерверныеФункции.ВыполнитьКодНаСервере(ТекстМодуля, СтруктураПараметров);
	
    Возврат СтруктураПараметров.ОдинаковыеНаименования;
	
КонецФункции

Функция ВернутьТипПодразделения(мПодразделение, Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мПодразделение",мПодразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	&мПодразделение КАК Ссылка
	               |ПОМЕСТИТЬ ВТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕстьNull(ВТ.Ссылка.Наименование,Неопределено) Как Проверка
	               |ИЗ
	               |	ВТ КАК ВТ";
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	ЕстьДоступЧтения = Результат.Проверка <> Неопределено; 	
    Возврат ?(ЕстьДоступЧтения, мПодразделение, Подразделение);
	
КонецФункции

Функция ПолучитьПодразделениеИзКонстанты(Подразделение) Экспорт
	
	мПодразделение = Константы.абс_ПодразделениеДФМ.Получить();
	Если ОдинаковыеНаименованияПодразделений(мПодразделение, Подразделение) Тогда
		Возврат ВернутьТипПодразделения(мПодразделение, Подразделение);	
	КонецЕсли;
	
	мПодразделение = Константы.абс_ПодразделениеОФК.Получить();
	Если ОдинаковыеНаименованияПодразделений(мПодразделение, Подразделение) Тогда
		Возврат ВернутьТипПодразделения(мПодразделение, Подразделение);	
	КонецЕсли;
	
	мПодразделение = Константы.абс_ПодразделениеДРУ.Получить();
	Если ОдинаковыеНаименованияПодразделений(мПодразделение, Подразделение) Тогда
		Возврат ВернутьТипПодразделения(мПодразделение, Подразделение);	
	КонецЕсли;
	
	мПодразделение = Константы.абс_ПодразделениеПД.Получить();
	Если ОдинаковыеНаименованияПодразделений(мПодразделение, Подразделение) Тогда
		Возврат ВернутьТипПодразделения(мПодразделение, Подразделение);	
	КонецЕсли;
	
	мПодразделение = Константы.абс_ПодразделениеДирККР.Получить();
	Если ОдинаковыеНаименованияПодразделений(мПодразделение, Подразделение) Тогда
		Возврат ВернутьТипПодразделения(мПодразделение, Подразделение);	
	КонецЕсли;	
	
КонецФункции 

Процедура ЗаписатьРольИСУЗК(Роль,МассивОрганизаций)
	
	Для Каждого СтрокаМассива Из МассивОрганизаций Цикл
		
		НаборЗаписей = РегистрыСведений.абс_РолиПользователейВИСУЗК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Отбор.Роль.Установить(Роль);
		НаборЗаписей.Отбор.Организация.Установить(СтрокаМассива);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись =  НаборЗаписей.Добавить();
			НоваяЗапись.Пользователь   = Пользователь;
			НоваяЗапись.Роль           = Роль;
			НоваяЗапись.Организация    = СтрокаМассива;
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьРольБПИСУЗК(Роль,МассивОрганизаций)
	
	Для Каждого СтрокаМассива Из МассивОрганизаций Цикл
		
		НаборЗаписей = РегистрыСведений.абс_РолиИИсполнителиИСУЗК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Исполнитель.Установить(Пользователь);
		НаборЗаписей.Отбор.Роль.Установить(Роль);
		НаборЗаписей.Отбор.Организация.Установить(СтрокаМассива);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись =  НаборЗаписей.Добавить();
			НоваяЗапись.Исполнитель   = Пользователь;
			НоваяЗапись.Роль           = Роль;
			НоваяЗапись.Организация    = СтрокаМассива;
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьРольИсполнителя(Роль,МассивОрганизаций)
	
	Для Каждого СтрокаМассива Из МассивОрганизаций Цикл
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Исполнитель.Установить(Пользователь);
		НаборЗаписей.Отбор.Роль.Установить(Роль);
		НаборЗаписей.Отбор.Организация.Установить(СтрокаМассива);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись =  НаборЗаписей.Добавить();
			НоваяЗапись.Исполнитель    = Пользователь;
			НоваяЗапись.Роль           = Роль;
			НоваяЗапись.Организация    = СтрокаМассива;
			//АБС ВСТАВКА №40744 НАЧАЛО «24 апреля 2014 г.», Пополитов
			Если Роль = Справочники.РолиИсполнителей.СогласованиеПД 
				и не СтрокаМассива.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда
				НоваяЗапись.абс_ИндексИсполнителя = 1;	
			КонецЕсли;
			//\\АБС ВСТАВКА №40744 КОНЕЦ 
		КонецЕсли; 	
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ЕстьДиректорДирекции = Ложь;
	ПользовательИСУЗК = Ложь;
	Для каждого Стр Из ТиповыеРолиЕИСУП Цикл
		
			Если Не Стр.Роль.РольИСУЗК Тогда
				Продолжить
			КонецЕсли;
			
			Если ВидОперации = Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ИзменениеПравТекущегоПользователя Тогда
				
				Если (Стр.Использование и Не Стр.ТекущаяРоль) ИЛИ (Не Стр.Использование и Стр.ТекущаяРоль) Тогда
					ПользовательИСУЗК = Истина;
				КонецЕсли;
				
			Иначе	
				Если Стр.Использование Тогда
					ПользовательИСУЗК = Истина;
				КонецЕсли;
			КонецЕсли;
		
	КонецЦикла;
	
	
	Если ВидОперации = Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ИзменениеПравТекущегоПользователя Тогда
		Для каждого Стр Из РолиВЦепочкахСогласованияИСУЗК Цикл
			Если Стр.ТекущаяРоль Тогда
				ПользовательИСУЗК = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПраваОтменены Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		Если Не СогласованиеБезБП Тогда
			Если Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполняется ИЛИ Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.ИсполняетсяВводЗадач ИЛИ  Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Исполнено Тогда
				СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусПоЗаявкеНаИзмениеПрав(Ссылка);
				
				Если НЕ Статус = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда
					ЗаписатьНовыйСтатус(Статус, абс_ПричинаИзмененияСтатуса);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Утверждена Тогда
				СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусПоЗаявкеНаИзмениеПрав(Ссылка);
				
				Если НЕ Статус = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда
					ЗаписатьНовыйСтатус(Статус, абс_ПричинаИзмененияСтатуса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
		
		Если Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Утверждена Тогда
			Движения.абс_ИсполнениеЗаявокНаДобавлениеПрав.Записывать = Истина;
			НоваяЗапись = Движения.абс_ИсполнениеЗаявокНаДобавлениеПрав.Добавить();
			НоваяЗапись.Документ  = Ссылка;
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Выполнена = Ложь;
			
			//добавим изменение для обмена с ИСУЗК
			
			Если ПользовательИСУЗК и абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
				Узел = ПланыОбмена.абс_ОбменSQL.НайтиПоКоду("2");
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Пользователь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	МожноОбновлятьПрава = Ложь;
	Если Не СогласованиеБезБП Тогда
		Если Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.ИсполняетсяВводЗадач или ПраваОтменены Тогда
			МожноОбновлятьПрава = Истина;
		КонецЕсли;	
	Иначе
		Если Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Утверждена или ПраваОтменены Тогда
			МожноОбновлятьПрава = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если МожноОбновлятьПрава Тогда
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
		//добавим изменение для обмена с ИСУЗК 
		Если ПользовательИСУЗК и абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
			Узел = ПланыОбмена.абс_ОбменSQL.НайтиПоКоду("2");
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Пользователь);
		КонецЕсли;
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);  		
		ПользовательИБ.Роли.Очистить();
		
		//АБС ВСТАВКА №31046 НАЧАЛО «10 февраля 2015 г.», Пополитов
  	    МассивОрганизаций = абс_ПолучитьМассивОрганизаций();	
  		//\\АБС ВСТАВКА №31046 КОНЕЦ      	
		
		НаборЗаписей = РегистрыСведений.абс_РолиПользователейВИСУЗК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		//НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Записать();
		
		//Добавление ролей заданных в конфигураторе
		Для каждого Стр Из ТиповыеРолиЕИСУП Цикл
			
			Если (НЕ Стр.ТекущаяРоль и Стр.Использование и ПраваОтменены) или (НЕ Стр.Использование и Не ПраваОтменены) Тогда	
				Продолжить;	
			КонецЕсли;
			
			Если Стр.Роль.РольИСУЗК Тогда
				ЗаписатьРольИСУЗК(Стр.Роль,МассивОрганизаций);
			Иначе
				
				МетаданныеРоль = Метаданные.Роли.Найти(СокрЛП(Стр.Роль.НаименованиеЗаданноеВКонфигураторе));
				
				Если МетаданныеРоль <> Неопределено Тогда
					ПользовательИБ.Роли.Добавить(МетаданныеРоль);
					
					Если Стр.Роль.НаименованиеЗаданноеВКонфигураторе = "абс_ДиректорДирекции" ИЛИ Стр.Роль.НаименованиеЗаданноеВКонфигураторе = "абс_РуководительДепартамента" Тогда
						ЕстьДиректорДирекции  = Истина;						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
				
		//Изменение доменного имени
		ПользовательОбъект = Пользователь.ПолучитьОбъект();
		Если ВидОперации = Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ИзменениеПравТекущегоПользователя Тогда
			Если ПользовательОбъект.абс_ИмяВДомене <> СокрЛП(ДоменноеИмя) Тогда
				ПользовательОбъект = Пользователь.ПолучитьОбъект();
				ПользовательОбъект.абс_ИмяВДомене = ДоменноеИмя;
				ПользовательОбъект.Записать();    				
				ПользовательИБ.ПользовательОС = ДоменноеИмя;
			КонецЕсли;  			
		КонецЕсли; 		
		
		ПользовательИБ.Записать();

		//Добавление прав для БП
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Исполнитель.Установить(Пользователь);
	//	НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.абс_ОтветственныеРНПД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ответственный.Установить(Пользователь);
	//	НаборЗаписей.Отбор.Организация.Установить(Организация);
		
		НаборЗаписей.Записать();
		
		Для каждого Стр Из РолиВЦепочкахСогласования Цикл
			
			Если (НЕ Стр.ТекущаяРоль и Стр.Использование и ПраваОтменены) или (НЕ Стр.Использование и Не ПраваОтменены) Тогда	
				Продолжить;	
			КонецЕсли;
			
			Если Стр.Роль.абс_РольИСУЗК Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаписатьРольИсполнителя(Стр.Роль,МассивОрганизаций);	
			
		КонецЦикла;
		
		
		Для каждого Стр Из РолиВЦепочкахСогласованияИСУЗК Цикл
			
			Если (НЕ Стр.ТекущаяРоль и Стр.Использование и ПраваОтменены) или (НЕ Стр.Использование и Не ПраваОтменены) Тогда	
				Продолжить;	
			КонецЕсли;
			
			Если Стр.Роль.абс_РольИСУЗК Тогда
				ЗаписатьРольБПИСУЗК(Стр.Роль,МассивОрганизаций);
			Иначе
				Продолжить;
			КонецЕсли;	
			
			ЗаписатьРольИсполнителя(Стр.Роль,МассивОрганизаций);
			
		КонецЦикла;
                 		
		//Добавление прав на ЦФО,ЦФУ,Подразделения
		НаборЗаписей = РегистрыСведений.абс_ОтветственныеЛицаПодразделений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		//АБС ВСТАВКА №31046 НАЧАЛО «10 февраля 2015 г.», Пополитов   		
		//НаборЗаписей.Отбор.Организация.Установить(Организация);
		//\\АБС ВСТАВКА №31046 КОНЕЦ				
		НаборЗаписей.Записать();  
		
		НаборЗаписей = РегистрыСведений.абс_ЦФОПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);   		
		//АБС_Вставка 000024503,31046 290114 Родин
		//НаборЗаписей.Отбор.Организация.Установить(Организация);
		//АБС_Вставка 000024503,31046 290114 Родин  		
		НаборЗаписей.Записать();
		
		Если ЕстьДиректорДирекции Тогда
			ЗаписатьВРегистрОтветственныеЛицаПодразделений(ПодразделениеОрганизации,Сотрудник,Истина);
		КонецЕсли;

		//АБС ИЗМЕНЕНИЕ 000032160  23.03.2015 17:26:26  Шамов1
  	    МассивОрганизацийРедактирование = абс_ПолучитьМассивОрганизаций(,,ИСТИНА);	
		
		Для Каждого элОрганизация Из МассивОрганизацийРедактирование Цикл
		//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ
			Для каждого Стр Из ЦФО Цикл
				ЗаписатьОтветсвенных = Истина;
				ЗаписатьРНПД         = Истина;
				ЗаписатьПросмотр     = Истина;
				
				Если (Стр.Просмотр и НЕ Стр.ПросмотрТекущая и ПраваОтменены) или (НЕ Стр.Просмотр и НЕ ПраваОтменены) Тогда
					ЗаписатьПросмотр = Ложь;	
				КонецЕсли;
				
				Если (Стр.Ответственный и НЕ Стр.ОтветственныйТекущая и ПраваОтменены) или (НЕ Стр.Ответственный и НЕ ПраваОтменены) Тогда	
					ЗаписатьОтветсвенных = Ложь;	
				КонецЕсли;
				
				Если (Стр.ЦФОРНПД и НЕ Стр.ЦФОРНПДТекущая и ПраваОтменены) или (НЕ Стр.ЦФОРНПД и НЕ ПраваОтменены)  Тогда
					ЗаписатьРНПД = Ложь;	
				КонецЕсли;
				
				Если Сотрудник <> Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда
					Если ЗаписатьПросмотр Тогда
						ЗаписатьВРегистрЦФОЦФУПользователей(Пользователь,Стр.ЦФО,Неопределено,Стр.Организация);
					КонецЕсли;
				КонецЕсли;

				Если ЗаписатьОтветсвенных Тогда
					//АБС ИЗМЕНЕНИЕ 000032160  23.03.2015 17:26:26  Шамов1
					//ЗаписатьВРегистрОтветственныеРНПД(Стр.ЦФО,Перечисления.абс_ВидыДокументовРНПД.ПоЦФО,Стр.Организация);  
					ЗаписатьВРегистрОтветственныеРНПД(Стр.ЦФО,Перечисления.абс_ВидыДокументовРНПД.ПоЦФО,элОрганизация);  
					//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ
					//АБС ИЗМЕНЕНИЕ 000032160  10.04.2015 11:11:51  Шамов1
					//ЗаписатьВРегистрОтветственныеЛицаПодразделений(Стр.ЦФО,Сотрудник,Стр.Ответственный);
					мОргВрем = Новый Массив;
					мОргВрем.Добавить(элОрганизация);
					ЗаписатьВРегистрОтветственныеЛицаПодразделений(Стр.ЦФО,Сотрудник,Стр.Ответственный,мОргВрем);
					//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ 					
				КонецЕсли;
				
				Если ЗаписатьРНПД Тогда	
					//АБС ИЗМЕНЕНИЕ 000032160  23.03.2015 17:26:26  Шамов1
					//ЗаписатьВРегистрОтветственныеРНПД(Стр.ЦФО,Перечисления.абс_ВидыДокументовРНПД.ПоДирекции,Стр.Организация);
					ЗаписатьВРегистрОтветственныеРНПД(Стр.ЦФО,Перечисления.абс_ВидыДокументовРНПД.ПоДирекции,элОрганизация);
					//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ
				КонецЕсли;	
				
			КонецЦикла;
			      		
			Для каждого Стр Из ЦФУ Цикл
				
				ЗаписатьОтветсвенных = Истина;
				ЗаписатьПросмотр     = Истина;

				Если (Стр.Просмотр и Не Стр.ПросмотрТекущая и ПраваОтменены) или (Не Стр.Просмотр и НЕ ПраваОтменены)  Тогда
					ЗаписатьПросмотр = Ложь;	
				КонецЕсли;
				
				Если (Стр.Ответственный и Не Стр.ОтветственныйТекущая и ПраваОтменены) или (Не Стр.Ответственный и НЕ ПраваОтменены) Тогда	
					ЗаписатьОтветсвенных = Ложь;	
				КонецЕсли;
				
				Если Сотрудник <> Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда
					Если ЗаписатьПросмотр Тогда
						//АБС ИЗМЕНЕНИЕ 000032160  23.03.2015 17:26:26  Шамов1
						ЗаписатьВРегистрЦФОЦФУПользователей(Пользователь,Стр.ЦФУ,Неопределено,элОрганизация);	
						//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ
					КонецЕсли;	
				КонецЕсли;
				
				Если ЗаписатьОтветсвенных Тогда
					//АБС ИЗМЕНЕНИЕ 000032160  10.04.2015 11:12:41  Шамов1
					//ЗаписатьВРегистрОтветственныеЛицаПодразделений(Стр.ЦФУ,Сотрудник,Стр.Ответственный);
					мОргВрем = Новый Массив;
					мОргВрем.Добавить(элОрганизация);
					ЗаписатьВРегистрОтветственныеЛицаПодразделений(Стр.ЦФУ,Сотрудник,Стр.Ответственный,мОргВрем);
					//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ 					
				КонецЕсли;	
				
			КонецЦикла;
		//АБС ИЗМЕНЕНИЕ 000032160  23.03.2015 17:26:26  Шамов1
		КонецЦикла;
		//АБС ИЗМЕНЕНИЕ 000032160 КОНЕЦ
		
		Если Сотрудник <> Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда
			Для каждого Стр Из Подразделения Цикл
				
				Если (Стр.Просмотр и Не Стр.ПросмотрТекущий и ПраваОтменены) или (НЕ Стр.Просмотр и НЕ ПраваОтменены)  Тогда
					Продолжить;	
				КонецЕсли;
				
				ЗаписатьВРегистрЦФОЦФУПользователей(Пользователь,,Стр.Подразделение,Стр.Подразделение.Владелец);
				
			КонецЦикла;
			
			Для каждого Стр Из ПодразделенияПоУмолчанию Цикл 				
				Если (Стр.Ответственный и Не Стр.ОтветственныйТекущая и ПраваОтменены) или (Не Стр.Ответственный и НЕ ПраваОтменены) Тогда	
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(Стр.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					кПодразделение = Стр.Подразделение;	
				Иначе	
					кПодразделение = ПолучитьПодразделениеИзКонстанты(Стр.Подразделение);
				КонецЕсли; 				
				Если ЗначениеЗаполнено(кПодразделение) и не ТипЗнч(кПодразделение) = Тип("Строка") и ЗначениеЗаполнено(Сотрудник) Тогда
					ЗаписатьВРегистрОтветственныеЛицаПодразделений(кПодразделение,Сотрудник,Истина);
				КонецЕсли; 				
			КонецЦикла;
			
			//АБС ВСТАВКА №45096 НАЧАЛО «4 июля 2014 г.», Пополитов   	
			Для каждого Стр Из ПодразделенияПоУмолчаниюОсновное Цикл			
				Если (Стр.Ответственный и Не Стр.ОтветственныйТекущая и ПраваОтменены) или (Не Стр.Ответственный и НЕ ПраваОтменены) Тогда	
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(Стр.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					кПодразделение = Стр.Подразделение;	
				Иначе	
					кПодразделение = ПолучитьПодразделениеИзКонстанты(Стр.Подразделение);
				КонецЕсли; 				
				Если ЗначениеЗаполнено(кПодразделение) и не ТипЗнч(кПодразделение) = Тип("Строка") и ЗначениеЗаполнено(Сотрудник) Тогда
					ЗаписатьВРегистрОтветственныеЛицаПодразделений(кПодразделение,Сотрудник,Истина,МассивОрганизаций);
				КонецЕсли; 				
			КонецЦикла;  
			//\\АБС ВСТАВКА №45096 КОНЕЦ  			
			
		КонецЕсли;
		
		ОбработкаСправочникаГруппыПользователей();
		
		//КонецЕсли;	
	ИначеЕсли Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Подготовка Тогда
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		Если Не СогласованиеБезБП Тогда
			
			БизнесПроцессЗапущен = Ложь;
			// Запустим БП если он еще не запущен
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияЗаявкиНаИзменениеПрав(Ссылка);
			Иначе
				БизнесПроцессЗапущен = Истина;
			КонецЕсли;	
			
			Если Статус <> Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Подготовка Тогда
				БизнесПроцессЗапущен = Истина;
			КонецЕсли;	
			
			//Закрытие задач
			Если НЕ Статус = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда
				Если БизнесПроцессЗапущен Тогда
					// Попробуем закрыть задачу согласования
					ЗадачаСогласование = ПолучитьЗадачуПоЗаявке();
					
					Если НЕ ЗадачаСогласование = Неопределено Тогда
						Для Каждого Стр Из ЗадачаСогласование Цикл
							ВыполнитьЗадачуСогласование(Стр);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли;

		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнена организация!";
		Сообщение.Сообщить();
		Отказ = Истина
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ИзменениеПравТекущегоПользователя Тогда
		//Если СокрЛП(Фамилия) = "" и СокрЛП(Имя) = "" и  СокрЛП(Отчество) = "" Тогда 
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Необходимо заполнить ФИО!";
		//	Сообщение.Сообщить();
		//	Отказ = Истина
		//КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо выбрать сотрудника!";
			Сообщение.Сообщить();
			Отказ = Истина
		КонецЕсли;

		
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить подразделение организации!";
			Сообщение.Сообщить();
			Отказ = Истина
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ГруппаПользователя) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить группу пользователя!";
			Сообщение.Сообщить();
			Отказ = Истина
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДоменноеИмя) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить доменное имя!";
			Сообщение.Сообщить();
			Отказ = Истина
		КонецЕсли;

	Иначе
		Если НЕ ЗначениеЗаполнено(Пользователь)  Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить пользователя!";
			Сообщение.Сообщить();
			Отказ = Истина
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить сотрудника!";
			Сообщение.Сообщить();
			Отказ = Истина
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить физлицо!";
			Сообщение.Сообщить();
			Отказ = Истина
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Статус = Перечисления.абс_СтатусыЗаявокНаДобавлениеИзменениеПрав.Утверждена Тогда  			
			Если ВидОперации = Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ВводНовогоПользователяСКопированиемПравСуществующего или ВидОперации = Перечисления.абс_ВидыОперацийЗаявокНаДобавлениеИзменениеПрав.ВводНовогоПользователяСРучнойУстановкойПрав Тогда
				СоздатьНовогоПользователя();	
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	//АБС ВСТАВКА №42734 НАЧАЛО «19 мая 2014 г.», Пополитов
	РольПользователь = Справочники.абс_ТиповыеРоли.НайтиПоРеквизиту("НаименованиеЗаданноеВКонфигураторе","Пользователь");
	Если ТиповыеРолиЕИСУП.Найти(РольПользователь,"Роль") = Неопределено Тогда
		НоваяСтрока = ТиповыеРолиЕИСУП.Добавить();
		НоваяСтрока.Роль 		  = РольПользователь;
		НоваяСтрока.ТекущаяРоль   = Истина;
		НоваяСтрока.Использование = Истина;
	КонецЕсли;
	
	РольСотрудникКомпании = Справочники.абс_ТиповыеРоли.НайтиПоРеквизиту("НаименованиеЗаданноеВКонфигураторе","абс_СотрудникКомпании");
	Если ТиповыеРолиЕИСУП.Найти(РольСотрудникКомпании,"Роль") = Неопределено Тогда 
		НоваяСтрока = ТиповыеРолиЕИСУП.Добавить();
		НоваяСтрока.Роль 		  = РольСотрудникКомпании;
		НоваяСтрока.ТекущаяРоль   = Истина;
		НоваяСтрока.Использование = Истина;
    КонецЕсли;
	//\\АБС ВСТАВКА №42734 КОНЕЦ     	
	
КонецПроцедуры
