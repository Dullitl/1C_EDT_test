&НаСервере
Перем мТекущийПользователь;

&НаСервере
Перем мРолиПользователя;

&НаКлиенте
Перем СоответствиеВидовАналитик;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура УстановитьДоступностьПоСтатусу()
	Если Объект.Статус <> Перечисления.абс_СтатусыЗагрузкиКПЭ.Подготовка Тогда
		ТолькоПросмотр = Истина;
		
	Иначе	
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.Статус.ТолькоПросмотр = Ложь;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхСтатусов() Экспорт	
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Список = Элементы.Статус.СписокВыбора;
	Список.Очистить();
	
	Список.Добавить(Объект.Статус);
	ТекСтатус = Объект.Ссылка.Статус;
	
	Если ТекСтатус = Перечисления.абс_СтатусыЗагрузкиКПЭ.Подготовка Тогда	
		Список.Добавить(Перечисления.абс_СтатусыЗагрузкиКПЭ.Согласован);
		Список.Добавить(Перечисления.абс_СтатусыЗагрузкиКПЭ.Отказ);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыЗагрузкиКПЭ.Отказ Тогда	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СпрашиватьПричину = НЕ Объект.Статус = Объект.Ссылка.Статус;
	
	Возврат СпрашиватьПричину;
	
КонецФункции

Процедура УстановитьЗаголовокФормы()
	
	ЭтаФорма.Заголовок = Строка(Объект.ВидОперации); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Сначало надо записать документ.");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ОткрытьФорму("Справочник.ХранилищеДополнительнойИнформации.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	Если Объект.ВидОперации = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.КорректировкаПлановыхЗначений ИЛИ
		 Объект.ВидОперации = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.КорректировкаФактическихЗначений Тогда
		Элементы.НомерКорректировки.Видимость = Истина;	
	Иначе
		Элементы.НомерКорректировки.Видимость = Ложь;	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Элементы.Статус.СписокВыбора.НайтиПоЗначению(мСтатус) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран неверный статус документа");
		
		мСтатус = Объект.Статус;
		
		Возврат;
	КонецЕсли;
	
	Объект.Статус = мСтатус;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь"); 
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
			Объект.ВидОперации   = Параметры.ЗначенияЗаполнения.ВидОперации;	
			Объект.Ответственный = мТекущийПользователь;
		КонецЕсли;	
		
		Элементы.Статус.ТолькоПросмотр = Истина;
		Объект.ПричинаИзмененияСтатуса = "";
		Объект.Статус = Перечисления.абс_СтатусыЗагрузкиКПЭ.Подготовка;

		Объект.ПериодРегистрации 	= НачалоГода(ТекущаяДата());
		Объект.ВидПремии 			= Перечисления.абс_ВидыПремий.Месячная;
		Объект.Организация			= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнаяОрганизация");
		
		УстановитьНомерКорректировкиЗначений();
		
	КонецЕсли;	
	
	ЗаполнитьСписокДоступныхСтатусов();
	//УстановитьОтборИзмененияСтатусов();
	мСтатус = Объект.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьЗаголовокФормы();
	УстановитьДоступностьПоСтатусу();
	
	УстановитьСписокВыборкаПериодаПоказателя();
	
	СоответствиеВидовАналитик = ПолучитьСоответствиеВидовАналитик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		ВвестиСтроку(Объект.ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьДоступностьПоСтатусу();
	ЗаполнитьСписокДоступныхСтатусов();
	
КонецПроцедуры


&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	Объект.ПериодРегистрации = НачалоГода(Объект.ПериодРегистрации);	
	
	ПроверитьТабличнуюЧастьЗначенияПоказателейПриИзмененииВидаПремии();
	
	УстановитьСписокВыборкаПериодаПоказателя();
	
	УстановитьНомерКорректировкиЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТабличнуюЧастьЗначенияПоказателейПриИзмененииВидаПремии()
	
	Объект.ЗначенияПоказателей.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокВыборкаПериодаПоказателя()
	
	//Элементы.ЗначенияПоказателейПериод
	
	ЭлементПериод = Элементы.ЗначенияПоказателейПериод;
	
	ЭлементПериод.РежимВыбораИзСписка 	= Истина;
	ЭлементПериод.КнопкаВыбора 			= Ложь;
	ЭлементПериод.КнопкаСпискаВыбора 	= Истина;
	
	ЭлементПериод.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидПремии) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидПремии = Перечисления.абс_ВидыПремий.Месячная Тогда
		
		ФорматВыбора = "ДФ='MMMM yyyy'";
		
		Для НомерМесяца = 1 по 12 Цикл
		
			ТекПериодВыбора = НачалоМесяца(Дата(Год(Объект.ПериодРегистрации), НомерМесяца, 1));
			
			ЭлементПериод.СписокВыбора.Добавить(ТекПериодВыбора, Формат(ТекПериодВыбора, ФорматВыбора));
			
		КонецЦикла;
		
		ЭлементПериод.Формат 				= ФорматВыбора;
		ЭлементПериод.ФорматРедактирования 	= ФорматВыбора;
		
	ИначеЕсли Объект.ВидПремии = Перечисления.абс_ВидыПремий.Квартальная Тогда
		
		ФорматВыбора = "ДФ='q"" квартал ""yyyy'";
		
		Для НомерКвартала = 1 по 4 Цикл
		
			ТекПериодВыбора = НачалоКвартала(Дата(Год(Объект.ПериодРегистрации), НомерКвартала * 3, 1));
			
			ЭлементПериод.СписокВыбора.Добавить(ТекПериодВыбора, Формат(ТекПериодВыбора, ФорматВыбора));
			
		КонецЦикла;
		
		ЭлементПериод.Формат 				= ФорматВыбора;
		ЭлементПериод.ФорматРедактирования 	= ФорматВыбора;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПремииПриИзменении(Элемент)
	
	ПроверитьТабличнуюЧастьЗначенияПоказателейПриИзмененииВидаПремии();
	
	УстановитьСписокВыборкаПериодаПоказателя();	
	
	УстановитьНомерКорректировкиЗначений();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНомерКорректировкиЗначений()
	
	Если НЕ (Объект.ВидОперации = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.КорректировкаПлановыхЗначений ИЛИ
			 Объект.ВидОперации = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.КорректировкаФактическихЗначений) Тогда
			 
		Объект.НомерКорректировки = 0;			 
			 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(абс_ВводЗначенийПоказателейДляРасчетаКПЭ.НомерКорректировки, 0)) КАК НомерКорректировки
	|ИЗ
	|	Документ.абс_ВводЗначенийПоказателейДляРасчетаКПЭ КАК абс_ВводЗначенийПоказателейДляРасчетаКПЭ
	|ГДЕ
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭ.Организация = &Организация
	|	И абс_ВводЗначенийПоказателейДляРасчетаКПЭ.ВидОперации = &ВидОперации
	|	И абс_ВводЗначенийПоказателейДляРасчетаКПЭ.Показатель = &Показатель
	|	И абс_ВводЗначенийПоказателейДляРасчетаКПЭ.ПериодРегистрации = &ПериодРегистрации");
	
	Запрос.УстановитьПараметр("Организация"			, Объект.Организация);
	Запрос.УстановитьПараметр("ВидОперации"			, Объект.ВидОперации);
	Запрос.УстановитьПараметр("Показатель"			, Объект.Показатель);
	Запрос.УстановитьПараметр("ПериодРегистрации"	, Объект.ПериодРегистрации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.НомерКорректировки = NULL Тогда 
			
			Объект.НомерКорректировки = 1;
			
		Иначе
			
			Объект.НомерКорректировки = Выборка.НомерКорректировки + 1;
			
		КонецЕсли;
		
	Иначе
		
		Объект.НомерКорректировки = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.ЗначенияПоказателей.Количество() > 0 Тогда
		
		Если НЕ Вопрос("Табличная часть будет очищена, продолжить заполнение?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		Если НЕ Вопрос("Документ будет записан, продолжить заполнение?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияПоказателейНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоказателейНаСервере() 	
	
	Объект.ЗначенияПоказателей.Очистить();
	
	Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный));
	
	Если Объект.ВидОперации = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.ФактическиеЗначения Тогда
		
		Объект.ЗначенияПоказателей.Загрузить(Документы.абс_ВводЗначенийПоказателейДляРасчетаКПЭ.ПолучитьТаблицуПоказателейПоПлану(Объект.Ссылка));
		
	ИначеЕсли Объект.ВидОперации = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.КорректировкаФактическихЗначений Тогда
		
		Объект.ЗначенияПоказателей.Загрузить(Документы.абс_ВводЗначенийПоказателейДляРасчетаКПЭ.ПолучитьТаблицуПоказателейПоПлану(Объект.Ссылка));
		
	ИначеЕсли Объект.ВидОперации = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.КорректировкаПлановыхЗначений Тогда
		
		Объект.ЗначенияПоказателей.Загрузить(Документы.абс_ВводЗначенийПоказателейДляРасчетаКПЭ.ПолучитьТаблицуПоказателейПоПлану(Объект.Ссылка));
		
	Иначе
		
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСоответствиеВидовАналитик() Экспорт
	          
	СоответствиеВидовАналитик = Новый Соответствие;
	
	СтруктураАналитикПустаяАналитика = Новый Структура();
	СтруктураАналитикПустаяАналитика.Вставить("Подразделение"	, Ложь);
	СтруктураАналитикПустаяАналитика.Вставить("Должность"		, Ложь);
	СтруктураАналитикПустаяАналитика.Вставить("Сотрудник"		, Ложь);
		
	СоответствиеВидовАналитик.Вставить(Перечисления.абс_ВидыАналитикиЗначенийПоказателейКПЭ.ПустаяСсылка(), СтруктураАналитикПустаяАналитика);	
	
	СтруктураАналитикОбщий = Новый Структура();
	СтруктураАналитикОбщий.Вставить("Подразделение"				, Ложь);
	СтруктураАналитикОбщий.Вставить("Должность"					, Ложь);
	СтруктураАналитикОбщий.Вставить("Сотрудник"					, Ложь);
		
	СоответствиеВидовАналитик.Вставить(Перечисления.абс_ВидыАналитикиЗначенийПоказателейКПЭ.Общий, СтруктураАналитикОбщий);
	
	СтруктураАналитикПодразделение = Новый Структура();
	СтруктураАналитикПодразделение.Вставить("Подразделение"		, Истина);
	СтруктураАналитикПодразделение.Вставить("Должность"			, Ложь);
	СтруктураАналитикПодразделение.Вставить("Сотрудник"			, Ложь);
		
	СоответствиеВидовАналитик.Вставить(Перечисления.абс_ВидыАналитикиЗначенийПоказателейКПЭ.Подразделение, СтруктураАналитикПодразделение);
	
	СтруктураАналитикШтатнаяЕдиница = Новый Структура();
	СтруктураАналитикШтатнаяЕдиница.Вставить("Подразделение"	, Истина);
	СтруктураАналитикШтатнаяЕдиница.Вставить("Должность"		, Истина);
	СтруктураАналитикШтатнаяЕдиница.Вставить("Сотрудник"		, Ложь);
		
	СоответствиеВидовАналитик.Вставить(Перечисления.абс_ВидыАналитикиЗначенийПоказателейКПЭ.ШтатнаяЕдиница, СтруктураАналитикШтатнаяЕдиница);
	
	СтруктураАналитикСотрудник = Новый Структура();
	СтруктураАналитикСотрудник.Вставить("Подразделение"			, Ложь);
	СтруктураАналитикСотрудник.Вставить("Должность"				, Ложь);
	СтруктураАналитикСотрудник.Вставить("Сотрудник"				, Истина);
		
	СоответствиеВидовАналитик.Вставить(Перечисления.абс_ВидыАналитикиЗначенийПоказателейКПЭ.Сотрудник, СтруктураАналитикСотрудник);	
	
	Возврат СоответствиеВидовАналитик;
	
КонецФункции

&НаКлиенте
Процедура ЗначенияПоказателейПередНачаломИзменения(Элемент, Отказ)
	
	СтруктураНастроекАналитик = СоответствиеВидовАналитик.Получить(Элемент.ТекущиеДанные.ВидАналитикиКПЭ);
	
	ДоступностьЗаполненияАналитики = Ложь;
	
	Если НЕ СтруктураНастроекАналитик.Свойство(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ЗначенияПоказателей", ""), ДоступностьЗаполненияАналитики) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = НЕ ДоступностьЗаполненияАналитики;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПриИзменении(Элемент)
	
	УстановитьНомерКорректировкиЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьНомерКорректировкиЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписанныйПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА   11.12.2014 17:15:35  Хазеев
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьНомерКорректировкиЗначений();
	УстановитьВидимостьЭлементовФормы();	
КонецПроцедуры
//АБС ВСТАВКА  КОНЕЦ





