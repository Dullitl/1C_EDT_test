
Функция ПодготовитьТЧЗначенияПоказателей()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Ссылка.ВидОперации КАК ВидОперации,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Период,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Ссылка.НомерКорректировки,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Ссылка.Организация,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Ссылка.Показатель КАК Показатель,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.ЗначениеПоказателя,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.ВидАналитикиКПЭ,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Подразделение,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Должность,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Сотрудник,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Ссылка.ВидПремии,
	|	ИСТИНА КАК Активность,
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.абс_ВводЗначенийПоказателейДляРасчетаКПЭ.ЗначенияПоказателей КАК абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей
	|ГДЕ
	|	абс_ВводЗначенийПоказателейДляРасчетаКПЭЗначенияПоказателей.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДвиженияПоРегиструЗначенияПоказателей(ТаблицаДокумента)
	
	Движения.абс_ЗначенияПоказателейДляРасчетаКПЭ.Загрузить(ТаблицаДокумента);
	
	Движения.абс_ЗначенияПоказателейДляРасчетаКПЭ.Записать();
	
КонецПроцедуры

Функция НайтиЗадачуПоВводЗначенийПоказателейДляРасчетаКПЭ(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина)
	
	ОтборПоИсполнителю = Ложь;
	МассивЗадач = Новый Массив;
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель"		, Исполнитель);
	ЗапросЗадач.УстановитьПараметр("ОтборПоИсполнителю"	, ОтборПоИсполнителю);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		МассивЗадач.Добавить(ВыборкаЗадач.Ссылка);
	КонецЕсли;
	
	Возврат МассивЗадач;
	
КонецФункции

Функция ПолучитьЗадачуПоВводЗначенийПоказателейДляРасчетаКПЭ()
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СпТочек = Новый Массив;
	ТекСтатус = Ссылка.Статус;
	
	Если ТекСтатус = Перечисления.абс_СтатусыЗагрузкиКПЭ.Подготовка Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗначенийПоказателейДляРасчетаКПЭ.ТочкиМаршрута.Отказ);	
	ИначеЕсли  ТекСтатус = Перечисления.абс_СтатусыЗагрузкиКПЭ.Отказ Тогда	
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеЗначенийПоказателейДляРасчетаКПЭ.ТочкиМаршрута.Подготовка);
	КонецЕсли;	
	
	Возврат НайтиЗадачуПоВводЗначенийПоказателейДляРасчетаКПЭ(БП, СпТочек,,Ложь);
	
КонецФункции

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоВводЗначенийПоказателейДляРасчетаКПЭ(Ссылка);
	
КонецФункции

Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусВводЗначенийПоказателейДляРасчетаКПЭ(Ссылка);
	
	Если Статус = Перечисления.абс_СтатусыЗагрузкиКПЭ.Подготовка Тогда
		БизнесПроцессЗапущен = Ложь;
		// Запустим БП если он еще не запущен
		БПСогласование = НайтиБПСогласование();
		
		Если Не ЗначениеЗаполнено(БПСогласование) Тогда
			абс_БизнесПроцессы.ЗапуститьБПСогласованияВводЗначенийПоказателейДляРасчетаКПЭ(Ссылка);
		Иначе
			БизнесПроцессЗапущен = Истина;
		КонецЕсли;	
	Иначе
		БизнесПроцессЗапущен = Истина;
	КонецЕсли;	
	
	//Закрытие задач
//	Если НЕ Статус = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда
		Если БизнесПроцессЗапущен Тогда
			// Попробуем закрыть задачу согласования
			ЗадачаСогласование = ПолучитьЗадачуПоВводЗначенийПоказателейДляРасчетаКПЭ();
			
			Если НЕ ЗадачаСогласование = Неопределено Тогда
				Для Каждого Стр Из ЗадачаСогласование Цикл
					ВыполнитьЗадачуСогласование(Стр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
//	КонецЕсли;

	
	Если НЕ Статус = Перечисления.абс_СтатусыЗагрузкиКПЭ.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначенияПоказателей = ПодготовитьТЧЗначенияПоказателей();
	ДвиженияПоРегиструЗначенияПоказателей(ТаблицаЗначенияПоказателей);
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатус(НовыйСтатус,ПричинаИзмененияСтатуса)

	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовВводЗначенийПоказателейДляРасчетаКПЭ.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВводЗначений.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.ВводЗначений			= Ссылка;
	Запись.Пользователь	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусДокумента  	= НовыйСтатус;
	
	Запись.Комментарий 			= ПричинаИзмененияСтатуса;
	
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусВводЗначенийПоказателейДляРасчетаКПЭ(Ссылка);
	
	Если НЕ Статус = СтатусПоРегистру Тогда
		ЗаписатьНовыйСтатус(Статус, ПричинаИзмененияСтатуса);		
	КонецЕсли;
	
КонецПроцедуры
