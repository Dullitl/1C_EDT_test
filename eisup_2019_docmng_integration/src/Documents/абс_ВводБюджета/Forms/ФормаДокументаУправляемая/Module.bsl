
&НаСервере
Перем мТекущийПользователь;

&НаСервере
Перем мРолиПользователя;

// Предопределенные процедуры и функции
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь"); 
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);

	мСтатус = Объект.Статус;
	
	ЗаполнитьТЧЗамечания();
	
	ЗаполнитьТЧДоступныхАналитик();
	
	ЗаполнитьСписокДоступныхСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПрочитатьТЧБюджетСервер();
	
	УстановитьВидимостьДоступность();
	
	УстановитьТекстНадписиАналитик();
	
	УстановитьРежимПросмотраДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Объект.ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		
		Если НЕ ВвестиСтроку(Объект.ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина) Тогда
			Отказ = Истина;
			Возврат;
		Конецесли;		
	КонецЕсли;
		
	Если НЕ ТолькоПросмотр Тогда
		СохранитьТЧБюджетСервер();
	КонецЕсли;
	
КонецПроцедуры

// Процедуры управления отображением формы
&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ЭтоКВ = ЭтоБюджетПоКВ();
	
	Элементы.ТЧ_БюджетКВ.Видимость = ЭтоКВ;	
	Элементы.ТЧ_БюджетТипРасходаПроизводствоИРеализацию.Видимость = ЭтоКВ;	
	Элементы.ТЧ_БюджетТипСети.Видимость = ЭтоКВ;	
	Элементы.ТЧ_БюджетТЭО.Видимость = ЭтоКВ;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстНадписиАналитик()
	
	Возврат СокрЛП(Объект.Организация) 	+ " / " 
					+ СокрЛП(Объект.ЦФУ) + " (" + Объект.ЦФУ.Код + ")"	+ " / "
					+ СокрЛП(Объект.ЦФО) + " (" + Объект.ЦФО.Код + ")";
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекстНадписиАналитик() 
	
	ТекстНадписи = ПолучитьТекстНадписиАналитик();
					
	Если Объект.КапЗатраты Тогда
		
		ТекстНадписи = ТекстНадписи + " (кап. затраты)";
		
	КонецЕсли;						
					
	Элементы.ДекорацияНадписьАналитика.Заголовок = ТекстНадписи;
	
КонецПроцедуры

// Процедуры обработчики событий формы
&НаКлиенте
Процедура ТЧ_БюджетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_БюджетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Элементы.Статус.СписокВыбора.НайтиПоЗначению(мСтатус) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран неверный статус документа");
		
		мСтатус = Объект.Статус;
		
		Возврат;
	КонецЕсли;
	
	Объект.Статус = мСтатус;

КонецПроцедуры

// Процедуры обработчики команд формы
&НаКлиенте
Процедура КомандаРазбитьСтроку(Команда)

	ТекДанные = Элементы.ТЧ_Бюджет.ТекущиеДанные;
	
	КолонкиПоказателей = "";
	
	Для н = 1 по 12 Цикл
		КолонкиПоказателей = КолонкиПоказателей + "СуммаРуб" + Прав("0" + н, 2) + ",";
	КонецЦикла;
	
	КолонкиПоказателей 	= Лев(КолонкиПоказателей, СтрДлина(КолонкиПоказателей) 	- 1);
	
	НоваяСтрока = ТЧ_Бюджет.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные, , КолонкиПоказателей);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьДоступнымиАналитиками(Команда)
	
	Если НЕ Вопрос("Перед заполнением документ будет очищен. Заполнить документ?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
			
	ЗаполнитьДоступнымиАналитиками();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКомментарииПоАналитике(Команда)
	
	Если Модифицированность Тогда
		
		Если Вопрос("Перед вводом замечаний документ должен быть записан. Записать документ?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			
			Записать();
			
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДокВводБюджета"	, Объект.Ссылка);
	
	СтруктураПараметров.Вставить("Организация"	, Объект.Организация);
	СтруктураПараметров.Вставить("ЦФУ"			, Объект.ЦФУ);
	СтруктураПараметров.Вставить("ЦФО"			, Объект.ЦФО);
	
	СтруктураПараметров.Вставить("КлючСтроки"	, Элементы.ТЧ_Бюджет.ТекущиеДанные.КлючСтроки);
		
	ОткрытьФормуМодально("РегистрСведений.абс_ВводБюджетаЗамечания.Форма.ФормаЗамечанийУправляемая", СтруктураПараметров, ЭтаФорма);
	
	ЗаполнитьТЧЗамечания();
	
КонецПроцедуры

// Служебные процедуры и функции
&НаСервере
Процедура ЗаполнитьДоступнымиАналитиками()
	//Сторчевой А.Н. 05.12.2016 7759851 {
	ttk_ЕдиноеЦФУ = ПараметрыСеанса.ttk_ЕдиноеЦФУ;
	//Сторчевой А.Н. 77225295 30.11.2017 {ПерехНаЕдиноеЦФУ = (Объект.Год >= 2017 и ЗначениеЗаполнено(ttk_ЕдиноеЦФУ));
	ПерехНаЕдиноеЦФУ = (Объект.Год = 2017 и ЗначениеЗаполнено(ttk_ЕдиноеЦФУ));
	// } Сторчевой А.Н. 77225295 30.11.2017
	Если ПерехНаЕдиноеЦФУ 
		//Сторчевой А.Н. 77225295 30.11.2017 {
		Или Объект.Год >= 2018 
		// } Сторчевой А.Н. 77225295 30.11.2017
		Тогда
		//Отключем отбор по Исполнителям и Группам пользователей
		
	Иначе 
		// } Сторчевой А.Н. 05.12.2016 7759851
		
		ЗапросГруппы = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппыПользователейПользователиГруппы.Ссылка
		|ИЗ
		|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
		|ГДЕ
		|	ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь
		|	И (НЕ ГруппыПользователейПользователиГруппы.Ссылка.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыПользователейПользователиГруппы.Ссылка");
		
		ЗапросГруппы.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		СписокГрупп = ЗапросГруппы.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");		
		//Сторчевой А.Н. 05.12.2016 7759851 {
	КонецЕсли; 
	// } Сторчевой А.Н. 05.12.2016 7759851
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ДоступностьБюджетныхАналитик.Организация,
	|	абс_ДоступностьБюджетныхАналитик.ЦФУ,
	|	абс_ДоступностьБюджетныхАналитик.ЦФО,
	|	абс_ДоступностьБюджетныхАналитик.БюджетнаяСтатья
	|ИЗ
	|	РегистрСведений.абс_ДоступностьБюджетныхАналитик КАК абс_ДоступностьБюджетныхАналитик
	|ГДЕ
	|	ВЫБОР
	|			КОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель ССЫЛКА Справочник.Пользователи
	|				ТОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель = &Исполнитель
	|			КОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель ССЫЛКА Справочник.ГруппыПользователей
	|				ТОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель В (&ГруппыПользователя)
	|		КОНЕЦ
	|	И абс_ДоступностьБюджетныхАналитик.БюджетнаяСтатья.абс_ДоходнаяСтатья = &абс_ДоходнаяСтатья
	|	И абс_ДоступностьБюджетныхАналитик.ЦФО = &ЦФО
	|	И абс_ДоступностьБюджетныхАналитик.ЦФУ = &ЦФУ
	|	И абс_ДоступностьБюджетныхАналитик.Организация = &Организация
	|	И (НЕ абс_ДоступностьБюджетныхАналитик.БюджетнаяСтатья.ЭтоГруппа)";
	
	//Сторчевой А.Н. 05.12.2016 7759851 {
	Если ПерехНаЕдиноеЦФУ 
		//Сторчевой А.Н. 77225295 30.11.2017 {
		Или Объект.Год >= 2018 
		// } Сторчевой А.Н. 77225295 30.11.2017
		Тогда
		//Отключем отбор по Исполнителям и Группам пользователей
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
		|	ВЫБОР
		|			КОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель ССЫЛКА Справочник.Пользователи
		|				ТОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель = &Исполнитель
		|			КОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель ССЫЛКА Справочник.ГруппыПользователей
		|				ТОГДА абс_ДоступностьБюджетныхАналитик.Исполнитель В (&ГруппыПользователя)
		|		КОНЕЦ
		|	И ", "
		|	");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
		|	И абс_ДоступностьБюджетныхАналитик.Организация = &Организация", "
		|	И (абс_ДоступностьБюджетныхАналитик.Организация = &Организация
		|		ИЛИ абс_ДоступностьБюджетныхАналитик.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
		
		Запрос.УстановитьПараметр("абс_ДоходнаяСтатья"		, Объект.БюджетДоходов);
		Запрос.УстановитьПараметр("ЦФО"						, Объект.ЦФО);
		Запрос.УстановитьПараметр("ЦФУ"						, Объект.ЦФУ);
	Иначе
		// } Сторчевой А.Н. 05.12.2016 7759851
		Запрос.УстановитьПараметр("абс_ДоходнаяСтатья"		, Объект.БюджетДоходов);
		Запрос.УстановитьПараметр("ЦФО"						, Объект.ЦФО);
		Запрос.УстановитьПараметр("ЦФУ"						, Объект.ЦФУ);
		Запрос.УстановитьПараметр("Организация"				, Объект.Организация);
		Запрос.УстановитьПараметр("Исполнитель"				, глЗначениеПеременной("глТекущийПользователь"));
		Запрос.УстановитьПараметр("ГруппыПользователя"		, СписокГрупп);
		//Сторчевой А.Н. 05.12.2016 7759851 {
	КонецЕсли; 
	// } Сторчевой А.Н. 05.12.2016 7759851
	
	ТЧ_Бюджет.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СтруктураПараметров = Новый Структура();
	
	Записать(СтруктураПараметров);
	
	НаборЗамечания = РегистрыСведений.абс_ВводБюджетаЗамечания.СоздатьНаборЗаписей();
	
	НаборЗамечания.Отбор.ДокументВводБюджета.Установить(Объект.Ссылка);
	
	НаборЗамечания.Записать();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхСтатусов()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь, Объект.Ссылка.Организация);
	
	СписокСтатусов = Элементы.Статус.СписокВыбора;
	
	СписокСтатусов.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Статус) Тогда
		СписокСтатусов.Добавить(Объект.Статус);
	Иначе                                                                       
		Статус = Перечисления.абс_СтатусыБюджетов.Подготовка;
		мСтатус = Объект.Статус;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтатус = абс_БизнесПроцессы.ПолучитьСтатусВводаБюджетаПоРегистру(Объект.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(ТекСтатус) Тогда
		
		СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Подготовка);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.Подготовка Тогда
		
		Если ((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) И Объект.Ответственный = мТекущийПользователь) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			 //АБС 3062
			 //СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.СогласованиеЦФО);
			   СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.ПроверкаДирБА);
			 //АБС 3062
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.СогласованиеЦФО Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФО) = Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
				абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.ЦФО,, Объект.Ссылка.Организация));
				
			Если НЕ МассивИсполнителей.Найти(мТекущийПользователь) = Неопределено Тогда
				
				// АБС ЗАКОММЕНТИРОВАНО Фролов 20120126 Убираем статус Согласование ЦФУ. Инициатор Калымкин.
				
				// //АБС 3062
				////СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.ПроверкаДирБА);
				//СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.СогласованиеЦФУ);
				// //АБС 3062
				//СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отказ);
				//СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Уточнение);
				//СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отмена);
				
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.СогласованиеДирБА);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отказ);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Уточнение);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отмена);				
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.ПроверкаДирБА Тогда
		
		РазрешенаПроверка = Ложь;
		
		Если НЕ Объект.КапЗатраты И (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБюджетаДирБА) = Неопределено) Тогда
			РазрешенаПроверка = Истина;
		КонецЕсли;
		
		Если Объект.КапЗатраты И (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБюджетаДЭИ) = Неопределено) Тогда
			РазрешенаПроверка = Истина;
		КонецЕсли;
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			РазрешенаПроверка = Истина;
		КонецЕсли;
		
		Если РазрешенаПроверка Тогда
			//АБС 3062			
			//СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.СогласованиеЦФУ);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.СогласованиеЦФО);
			 //АБС 3062

			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отказ);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Уточнение);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отмена);
						
		КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.СогласованиеЦФУ Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительЦФУ) = Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
				абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.ЦФУ,, Объект.Ссылка.Организация));
				
			Если НЕ МассивИсполнителей.Найти(мТекущийПользователь) = Неопределено Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.СогласованиеДирБА);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отказ);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Уточнение);
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отмена);
			КонецЕсли;					
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.СогласованиеДирБА Тогда
		
		РолиКТТК = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь, Справочники.Организации.НайтиПоНаименованию("КТТК"));
		
		Если (НЕ РолиКТТК.Найти(Справочники.РолиИсполнителей.СогласованиеБюджетаДК) = Неопределено) ИЛИ
			(НЕ РолиКТТК.Найти(Справочники.РолиИсполнителей.СогласованиеБюджетаДЭИ) = Неопределено) ИЛИ
			(НЕ РолиКТТК.Найти(Справочники.РолиИсполнителей.СогласованиеБюджетаДирБА) = Неопределено) ИЛИ
			 (НЕ РолиКТТК.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Утвержден);
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отказ);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Уточнение);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Отмена);
						
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.Отказ Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Подготовка);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.Уточнение Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)   Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Подготовка);
			
			БПСогласование = НайтиБПСогласование();
			
			Если ЗначениеЗаполнено(БПСогласование) Тогда
				Если ЗначениеЗаполнено(БПСогласование.СтатусУточнения) Тогда
					СписокСтатусов.Добавить(БПСогласование.СтатусУточнения);
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.Отмена Тогда
		
		Если (Объект.ОтветственныйОтмены = мТекущийПользователь)
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)   Тогда
			
			//СписокСтатусов.Добавить(Перечисления.абс_СтатусыБюджетов.Подготовка);
			
			СписокСтатусов.Добавить(Объект.СтатусОтмены);
				
		КонецЕсли;
		
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыБюджетов.Утвержден Тогда
		
		//Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеРекласификацииБюджетаДФМ) = Неопределено) ИЛИ 
		//	 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеРекласификацииБюджетаДЭИ) = Неопределено) ИЛИ 
		//	 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
		//	 
		//	 СписокСтатусов.Добавить(Перечисления.абс_СтатусыРекласификацииБюджета.Уточнение);
		//	 
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоБюджетПоКВ()
	
	ГруппаКВ = Справочники.СценарииПланирования.НайтиПоНаименованию("CAPEX");
	
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Объект.Сценарий.ПринадлежитЭлементу(ГруппаКВ);
	
КонецФункции

// Процедуры и функции поддержки бизнес-процессов
&НаСервере
Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоВводуБюджета(Объект.Ссылка, "абсСогласованиеБюджета");	
	
КонецФункции

// Процедуры и функции отображения табличной части Бюджет
&НаСервере
Процедура ПрочитатьТЧБюджетСервер()
	
	ТЧ_Бюджет.Очистить();
	
	ТабБюджет = ДанныеФормыВЗначение(ТЧ_Бюджет, Тип("ТаблицаЗначений"));
	
	Для Каждого СтрокаБюджета Из Объект.БюджетКомментарии Цикл
		
		ИндексКолонки = Прав("0" + Месяц(СтрокаБюджета.Период), 2);
		
		СтруктураАналитик = ПолучитьСтруктуруАналитикКомментарии(СтрокаБюджета);
		
		СтрокиТЧБюджет = ТабБюджет.НайтиСтроки(СтруктураАналитик);
		
		Если СтрокиТЧБюджет.Количество() = 0 Тогда
			СтрокаТЧБюджет = ТабБюджет.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧБюджет, СтруктураАналитик);
		Иначе
			СтрокаТЧБюджет = СтрокиТЧБюджет[0];
		КонецЕсли;
		
		СтрокаТЧБюджет["СуммаРуб" + ИндексКолонки] = СтрокаБюджета.СуммаРуб;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТабБюджет,ТЧ_Бюджет);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТЧБюджетСервер()
	
	Объект.Бюджет.Очистить();
	Объект.БюджетКомментарии.Очистить();
	
	ТабБюджет = ДанныеФормыВЗначение(ТЧ_Бюджет, Тип("ТаблицаЗначений"));
		
	ТЧ_БюджетСвернуто = ТЧ_Бюджет.Выгрузить();
	
	СтрокаИзмерения 	= "";
	СтрокаПоказатели 	= "";
	
	КолонкиБезГруппировки = "Комментарий";
	
	Для Каждого ТекКолонка Из ТЧ_БюджетСвернуто.Колонки Цикл
		
		Если Найти(ТекКолонка.Имя, "СуммаРуб") > 0 Тогда
			
			СтрокаПоказатели = СтрокаПоказатели + ТекКолонка.Имя + ",";
			
		ИначеЕсли НЕ Найти(КолонкиБезГруппировки, ТекКолонка.Имя) > 0 Тогда
			
			СтрокаИзмерения = СтрокаИзмерения + ТекКолонка.Имя + ",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПоказатели 	= Лев(СтрокаПоказатели	, СтрДлина(СтрокаПоказатели) 	- 1);
	СтрокаИзмерения 	= Лев(СтрокаИзмерения	, СтрДлина(СтрокаИзмерения) 	- 1);
	
	ТЧ_БюджетСвернуто.Свернуть(СтрокаИзмерения, СтрокаПоказатели);
	
	МаксКлюч = 0;
	
	Для Каждого СтрокаТЧБЮджет Из ТЧ_БюджетСвернуто Цикл
		
		МаксКлюч = Макс(СтрокаТЧБюджет.КлючСтроки, МаксКлюч);
		
	КонецЦикла;
	
	ТекКлючСтроки = 0;
	
	Для Каждого СтрокаТЧБЮджет Из ТЧ_БюджетСвернуто Цикл
		
		// По ТЧ Бюджет
		СтруктураАналитик = ПолучитьСтруктуруАналитик(СтрокаТЧБЮджет);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧБЮджет.КлючСтроки) Тогда
			МаксКлюч 			= МаксКлюч + 1;
			ТекКлючСтроки 		= МаксКлюч;
			
			СтрокаТЧБюджет.КлючСтроки = ТекКлючСтроки;
		Иначе
			ТекКлючСтроки = СтрокаТЧБЮджет.КлючСтроки;
		КонецЕсли;
				
		Для Н = 1 по 12 Цикл
			
			ИндексКолонки = Прав("0" + Н, 2);
			
			СтрокаБюджет = Объект.Бюджет.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаБюджет, СтруктураАналитик);
			
			СтрокаБюджет.КлючСтроки = ТекКлючСтроки;
			
			СтрокаБюджет.СуммаРуб = СтрокаТЧБюджет["СуммаРуб" + ИндексКолонки];
			
			СтрокаБюджет.Период = Дата(Объект.Год, н, 1);
			
		КонецЦикла;
		
		// По ТЧ Бюджет комментарии
		
		ТЧ_БюджетПоАналитике = ТЧ_Бюджет.НайтиСтроки(СтруктураАналитик);	
		
		Для Каждого СтрокаТЧБЮджет Из ТЧ_БюджетПоАналитике Цикл
			
			СтруктураАналитик = ПолучитьСтруктуруАналитикКомментарии(СтрокаТЧБЮджет);
			
			Для Н = 1 по 12 Цикл
				
				ИндексКолонки = Прав("0" + Н, 2);
				
				СтрокаБюджет = Объект.БюджетКомментарии.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаБюджет, СтруктураАналитик);
				
				СтрокаБюджет.СуммаРуб = СтрокаТЧБюджет["СуммаРуб" + ИндексКолонки];
				
				СтрокаБюджет.Период = Дата(Объект.Год, н, 1);
				
				СтрокаБюджет.КлючСтроки = ТекКлючСтроки;
				
			КонецЦикла;

		КонецЦикла;	
		
	КонецЦикла;	
	
	ЗначениеВДанныеФормы(ТабБюджет,ТЧ_Бюджет);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАналитик(СтрокаБюджета)
	
	СтруктураАналитик = Новый Структура;
	
	СтруктураАналитик.Вставить("Организация"							, СтрокаБюджета.Организация);
	СтруктураАналитик.Вставить("ЦФУ"									, СтрокаБюджета.ЦФУ);
	СтруктураАналитик.Вставить("ЦФО"									, СтрокаБюджета.ЦФО);
	СтруктураАналитик.Вставить("ТипРасходаНаПроизводствоИРеализацию"	, СтрокаБюджета.ТипРасходаНаПроизводствоИРеализацию);
 	СтруктураАналитик.Вставить("ТипКонтрагента"							, СтрокаБюджета.ТипКонтрагента);
	СтруктураАналитик.Вставить("ТипСети"								, СтрокаБюджета.ТипСети);
	СтруктураАналитик.Вставить("КВ"										, СтрокаБюджета.КВ);
	СтруктураАналитик.Вставить("ТЭО"									, СтрокаБюджета.ТЭО);
	СтруктураАналитик.Вставить("БюджетнаяСтатья"						, СтрокаБюджета.БюджетнаяСтатья);
	
	СтруктураАналитик.Вставить("Валюта"									, СтрокаБюджета.Валюта);
	
	СтруктураАналитик.Вставить("СтавкаНДС"								, СтрокаБюджета.СтавкаНДС);
	
	СтруктураАналитик.Вставить("КлючСтроки"								, СтрокаБюджета.КлючСтроки);
	
	Возврат СтруктураАналитик;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруАналитикКомментарии(СтрокаБюджета)
	
	СтруктураАналитик = Новый Структура;
	
	СтруктураАналитик.Вставить("Организация"							, СтрокаБюджета.Организация);
	СтруктураАналитик.Вставить("ЦФУ"									, СтрокаБюджета.ЦФУ);
	СтруктураАналитик.Вставить("ЦФО"									, СтрокаБюджета.ЦФО);
	СтруктураАналитик.Вставить("ТипРасходаНаПроизводствоИРеализацию"	, СтрокаБюджета.ТипРасходаНаПроизводствоИРеализацию);
	СтруктураАналитик.Вставить("ТипКонтрагента"							, СтрокаБюджета.ТипКонтрагента);
	СтруктураАналитик.Вставить("ТипСети"								, СтрокаБюджета.ТипСети);
	СтруктураАналитик.Вставить("КВ"										, СтрокаБюджета.КВ);
	СтруктураАналитик.Вставить("ТЭО"									, СтрокаБюджета.ТЭО);
	СтруктураАналитик.Вставить("БюджетнаяСтатья"						, СтрокаБюджета.БюджетнаяСтатья);
	
	СтруктураАналитик.Вставить("Валюта"									, СтрокаБюджета.Валюта);
	
	СтруктураАналитик.Вставить("СтавкаНДС"								, СтрокаБюджета.СтавкаНДС);

	СтруктураАналитик.Вставить("Комментарий"							, СтрокаБюджета.Комментарий);
	
	СтруктураАналитик.Вставить("КлючСтроки"								, СтрокаБюджета.КлючСтроки);
	
	Возврат СтруктураАналитик;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧЗамечания()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ВводБюджетаЗамечания.Период КАК Период,
	|	абс_ВводБюджетаЗамечания.ДокументВводБюджета,
	|	абс_ВводБюджетаЗамечания.КлючСтроки,
	|	абс_ВводБюджетаЗамечания.АвторЗамечания,
	|	абс_ВводБюджетаЗамечания.Замечание
	|ИЗ
	|	РегистрСведений.абс_ВводБюджетаЗамечания КАК абс_ВводБюджетаЗамечания
	|ГДЕ
	|	абс_ВводБюджетаЗамечания.ДокументВводБюджета = &ДокументВводБюджета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументВводБюджета", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_БюджетБюджетнаяСтатьяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбораСписок = Новый СписокЗначений;
	
	//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
	
	Для Каждого СтрокаТЧДоступныхАналитик Из ТЧДоступныхАналитик Цикл
		
		Если НЕ Объект.Организация = СтрокаТЧДоступныхАналитик.Организация Тогда
			Продолжить;
		Конецесли;
		
		Если НЕ Объект.ЦФУ = СтрокаТЧДоступныхАналитик.ЦФУ Тогда
			Продолжить;
		Конецесли;	
		
		Если НЕ Объект.ЦФО = СтрокаТЧДоступныхАналитик.ЦФО Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеВыбораСписок.НайтиПоЗначению(СтрокаТЧДоступныхАналитик.БюджетнаяСтатья) = Неопределено Тогда
			ДанныеВыбораСписок.Добавить(СтрокаТЧДоступныхАналитик.БюджетнаяСтатья);
			
		КонецЕсли;
	КонецЦикла;
	
	
	ПараметрыВыбораСтатьи = Новый Структура();
	
	ПараметрыВыбораСтатьи.Вставить("СписокЭлементов", ДанныеВыбораСписок);
	
	ВыбранныйЭлемент = ОткрытьФормуМодально("Справочник.СтатьиОборотовПоБюджетам.Форма.ФормаВыбораУправляемая", ПараметрыВыбораСтатьи, ЭтаФорма);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТЧ_Бюджет.ТекущиеДанные.БюджетнаяСтатья = ВыбранныйЭлемент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧДоступныхАналитик()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_ДоступностьБюджетныхАналитик.Организация,
	|	абс_ДоступностьБюджетныхАналитик.ЦФУ,
	|	абс_ДоступностьБюджетныхАналитик.ЦФО,
	|	абс_ДоступностьБюджетныхАналитик.БюджетнаяСтатья
	|ИЗ
	|	РегистрСведений.абс_ДоступностьБюджетныхАналитик КАК абс_ДоступностьБюджетныхАналитик
	|ГДЕ
	|	абс_ДоступностьБюджетныхАналитик.Исполнитель = &Исполнитель";
	
	//Сторчевой А.Н. 05.12.2016 7759851 {
	ttk_ЕдиноеЦФУ = ПараметрыСеанса.ttk_ЕдиноеЦФУ;
	//Сторчевой А.Н. 77225295 30.11.2017 {ПерехНаЕдиноеЦФУ = (Объект.Год >= 2017 и ЗначениеЗаполнено(ttk_ЕдиноеЦФУ));
	ПерехНаЕдиноеЦФУ = (Объект.Год = 2017 и ЗначениеЗаполнено(ttk_ЕдиноеЦФУ));
	// } Сторчевой А.Н. 77225295 30.11.2017
	Если ПерехНаЕдиноеЦФУ Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Исполнитель = &Исполнитель"
		, "абс_ДоступностьБюджетныхАналитик.ЦФУ = &ЦФУ");
		Запрос.УстановитьПараметр("ЦФУ", ttk_ЕдиноеЦФУ);
	Иначе
		// } Сторчевой А.Н. 05.12.2016 7759851
		
		Запрос.УстановитьПараметр("Исполнитель", глЗначениеПеременной("глТекущийПользователь"));
		
		//Сторчевой А.Н. 05.12.2016 7759851 {
	КонецЕсли;
	// } Сторчевой А.Н. 05.12.2016 7759851
	
	ТЧДоступныхАналитик.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПросмотраДокумента()
	
	// Редактирование документа возможно только в статусе Подготовка
	ТолькоПросмотр = НЕ РазрешеноРедактированиеДокумента();
	
	// Согласование документа возможно только пользователям, для которых сформированы задачи	
	Элементы.Статус.ТолькоПросмотр = ТолькоПросмотр И НЕ РазрешеноСогласованиеДокумента();
	
	// Доступность кнопки Записать
	Элементы.ФормаКнопкаПровести.Доступность = НЕ Элементы.Статус.ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактированиеДокумента()
	
	Возврат Объект.Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыБюджетов.Подготовка") И Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
КонецФункции

&НаСервере
Функция РазрешеноСогласованиеДокумента()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	ЗапросЗадачи = Новый Запрос(
	"ВЫБРАТЬ
	|	абсЗадачаДоговора.Ссылка
	|ИЗ
	|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|ГДЕ
	|	абсЗадачаДоговора.БизнесПроцесс ССЫЛКА БизнесПроцесс.абсСогласованиеБюджета
	|	И абсЗадачаДоговора.БизнесПроцесс.ДокументВводаБюджета = &ДокументВводаБюджета
	|	И абсЗадачаДоговора.Исполнитель = &Исполнитель");
	
	ЗапросЗадачи.УстановитьПараметр("ДокументВводаБюджета", Объект.Ссылка);
	ЗапросЗадачи.УстановитьПараметр("Исполнитель", мТекущийПользователь);
	
	ВыборкаЗадачи = ЗапросЗадачи.Выполнить().Выбрать();
	
	Возврат ВыборкаЗадачи.Количество() > 0;
		
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьРежимПросмотраДокумента();
	
	ЗаполнитьСписокДоступныхСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
КонецПроцедуры

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат НЕ Объект.Статус = Объект.Ссылка.Статус;
КонецФункции

&НаСервере
Процедура ПродублироватьВалКолонки(мТабЗагрузки)
	Для каждого СтрокаТЧ из мТабЗагрузки цикл
		
		Для н = 1 по 12 Цикл
			СуффиксПериода = Прав("0" + н, 2);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ["СуммаВал" + СуффиксПериода]) тогда
				СтрокаТЧ["СуммаВал" + СуффиксПериода] = СтрокаТЧ["СуммаРуб" + СуффиксПериода]; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла
	
КонецПроцедуры

Процедура РассчитатьИтогПоСтроке(Строка)
	
	СуффиксИтог = "Итог";
	
	Строка["СуммаРуб"+СуффиксИтог] 			= 0;
	Строка["СуммаВал"+СуффиксИтог] 			= 0;
	Строка["СуммаЛимитаРуб"+СуффиксИтог] 	= 0;
	Строка["СуммаЛимитаВал"+СуффиксИтог] 	= 0;
	Строка["Количество"+СуффиксИтог] 		= 0;
	
	Для й = 1 по 12 Цикл
		
		Суффикс = Прав("0"+й,2);
		
		Строка["СуммаРуб"+СуффиксИтог] 			= Строка["СуммаРуб"+СуффиксИтог] 		+ Строка["СуммаРуб" + Суффикс];
		Строка["СуммаВал"+СуффиксИтог] 			= Строка["СуммаВал"+СуффиксИтог] 		+ Строка["СуммаВал" + Суффикс];
		Строка["СуммаЛимитаРуб"+СуффиксИтог] 	= Строка["СуммаЛимитаРуб"+СуффиксИтог] 	+ Строка["СуммаЛимитаРуб" + Суффикс];
		Строка["СуммаЛимитаВал"+СуффиксИтог] 	= Строка["СуммаЛимитаВал"+СуффиксИтог] 	+ Строка["СуммаЛимитаВал" + Суффикс];
		Строка["Количество"+СуффиксИтог] 		= Строка["Количество"+СуффиксИтог] 		+ Строка["Количество" + Суффикс];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧ_Бюджет(ТЧ_Бюджет_Новый, мТЧ_Бюджет)
	
	//ТЧ_Бюджет.Загрузить(ТЧ_Бюджет_Новый.Выгрузить());
		
	мТабЗагрузки = ТЧ_Бюджет_Новый.Выгрузить();
	ПродублироватьВалКолонки(мТабЗагрузки);
	
	мТЧ_Бюджет.Очистить();	
	
	Для каждого СтрокаЗагрузки Из мТабЗагрузки Цикл
		
		СтрДок = мТЧ_Бюджет.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрДок, СтрокаЗагрузки); 
		СтрДок.ЦФО = Объект.ЦФО;
		СтрДок.ЦФУ = Объект.ЦФУ;
		СтрДок.Организация = Объект.Организация;
		          
	КонецЦикла;
		
	Для каждого СтрокаТЧБюджет из мТЧ_Бюджет цикл
//		РассчитатьИтогПоСтроке(СтрокаТЧБюджет);	
	конеццикла;
	
	ТЧ_Бюджет.Загрузить(мТЧ_Бюджет.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьмТЧ_Бюджет()
	
	Если Объект.Ссылка <> Документы.абс_ВводБюджета.ПустаяСсылка() Тогда
		мТЧ_Бюджет = Объект.Ссылка.ПолучитьОбъект().мТЧ_Бюджет;
	КонецЕсли;
	мТЧ_Бюджет = ТЧ_Бюджет;
	
	Возврат мТЧ_Бюджет;
	
КонецФункции

&НаКлиенте
Процедура КомандаЗаполнитьТЧ(Команда)
	
	мТЧ_Бюджет = ТЧ_Бюджет; //ПолучитьмТЧ_Бюджет();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокВводБюджета", Объект.Ссылка);	
	СтруктураПараметров.Вставить("мТЧ_Бюджет", ТЧ_Бюджет);
	
	ТЧ_Бюджет_Новый = ОткрытьФормуМодально("Обработка.абс_ЗагрузкаВводаПланаБюджета.Форма.ФормаУправляемая", СтруктураПараметров, ЭтаФорма);
	
	Если ТЧ_Бюджет_Новый <> Неопределено Тогда
		
		ЗаполнитьТЧ_Бюджет(ТЧ_Бюджет_Новый, мТЧ_Бюджет);
		
	КонецЕсли;
	
КонецПроцедуры







