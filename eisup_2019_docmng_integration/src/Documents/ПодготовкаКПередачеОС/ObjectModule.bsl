Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "Событие,ОС.Стоимость, ОС.Амортизация, ОС.АмортизацияЗаМесяц, ОС.ОстСтоимость";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "СобытиеРегл, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ";
	мСтрокаРеквизитыНалУчета = "ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ, ОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Подразделение";
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Событие";

КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СобытиеРегл";
	
КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПодготовкаКПередаче,
								  ПредставлениеРеквизита,Отказ);

КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПодготовкаКПередаче,
								  ПредставлениеРеквизита,Отказ);

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "";
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Стоимость";

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность изменения состояния ОС
		Для каждого СтрокаОС из ОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,СобытиеРегл,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,Событие,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()


// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)
	
	ТаблицаСчетов = "";
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок, ТаблицаСчетов);
	Если Не абс_ЧастичнаяПродажа Тогда
		ДвиженияПоРазницам(СтруктураШапкиДокумента, ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), ТаблицаСчетов);
	Иначе
		абс_ДвиженияПоРазницамЧастичнаяПродажа(СтруктураШапкиДокумента, ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), ТаблицаСчетов);
	КонецЕсли; 
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	СобытиеОС          		= Движения.СобытияОС;
	АмортизацияОС       	= Движения.СтоимостьОС;
	НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОС;

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		Если НЕ абс_ЧастичнаяПродажа Тогда //АБС Коломиец 16760
			
		// Движения по регистру НачислениеАмортизацииОС
		Движение = НачислениеАмортизацииОС.Добавить();
		Движение.Период                  = ДатаДока;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.НачислятьАмортизацию    = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;

    	КонецЕсли;
	
		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период                  = ДатаДока;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Событие                 = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента 		 = Метаданные().Представление();
		Движение.НомерДокумента    		 = Номер;

		// Движения по регистру СтоимостьОС
		Если СтрокаТЧ.АмортизацияЗаМесяц <> 0 Тогда
		
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.ОсновноеСредство        = ТекОС;
			Движение.Амортизация             = СтрокаТЧ.АмортизацияЗаМесяц;
			Движение.Стоимость               = 0;
			
		КонецЕсли;

	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();

	// подготовим таблицу с данными по амортизации для списания амортизации по 
	// направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	Для каждого СтрокаОС из ТаблицаПоОС Цикл
		Если СтрокаОС.АмортизацияЗаМесяц>0 Тогда
			НоваяСтрока                        = ТабАмортизации.Добавить();
			НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяц;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_УУ);
		КонецЕсли;
	КонецЦикла;
	
	// вызов процедуры списания амортизации по направлениям
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, Отказ, Заголовок, ТаблицаСчетов)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",         ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                              КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                     КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство              КАК ОС_НУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации     КАК СчетНачисленияАмортизацииНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|";
	ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 

		СобытиеОС             = Движения.СобытияОСОрганизаций;
		АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
		НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		ПроводкиБУ            = Движения.Хозрасчетный;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

		Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			
			Если НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				
				ТекОС = СтрокаТЧ.ОсновноеСредство;
				Если НЕ абс_ЧастичнаяПродажа Тогда //АБС Коломиец 16760
				// Движения по регистру НачислениеАмортизации
				Движение = НачислениеАмортизации.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
                КонецЕсли;
				// Движения по регистру СобытияОСОрганизаций
				Движение = СобытиеОС.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
				Движение.НазваниеДокумента 	  = Метаданные().Представление();
				Движение.НомерДокумента    	  = Номер;

				// Движения по регистру СтоимостьОС
				Если СтрокаТЧ.АмортизацияЗаМесяцБУ <> 0 Тогда
				
					Движение = ТаблицаДвиженийАмортизация.Добавить();
					Движение.ОсновноеСредство = ТекОС;
					Движение.Организация      = ТекОрганизация;
					Движение.Амортизация      = СтрокаТЧ.АмортизацияЗаМесяцБУ;
					Движение.Стоимость        = 0;
					Движение.ВидОперации      = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче;
					
				КонецЕсли;
				
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
				Если СтрокаТЗ <> Неопределено Тогда
					СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаБУ;
					СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
				Иначе
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + ТекОс.Наименование +
										" не отражалось в бух. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
				КонецЕсли;
				
				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияБУ + ?(Не абс_ЧастичнаяПродажа, СтрокаТЧ.АмортизацияЗаМесяцБУ, СтрокаТЧ.АмортизацияЗаМесяцБУЧастичнаяПродажа);  //АБС Коломиец 16760
				//СтрокаТЧ.АмортизацияЗаМесяцБУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Активность  = Истина;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Подготовка к передаче";
					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					Проводка.Сумма       = СуммаПроводки;

				КонецЕсли;

				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Активность  = Истина;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Подготовка к передаче";
					Проводка.Сумма       = СтрокаТЧ.СтоимостьБУ;

					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			Если НЕ (СтрокаОС.АмортизацияЗаМесяцБУ = 0) Тогда
				
				НоваяСтрока = ТабАмортизации.Добавить();
				
				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_БУ);
				
				СчетАмортизации = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.СчетАмортизации = ?(СчетАмортизации = Неопределено, Неопределено, СчетАмортизации.СчетНачисленияАмортизацииБУ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// вызов процедуры списания амортизации по направлениям
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", "ОС");
        ТабАмортизацииБУ = ТабАмортизации;
		
		Если Не Отказ Тогда
			ПроводкиБУ.Записать(Ложь);
		КонецЕсли; 
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

		АмортизацияОСНУ         = Движения.СтоимостьОСНалоговыйУчет;
		НачислениеАмортизацииНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		ПроводкиНУ              = Движения.Налоговый;

		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийСтоимостьНУ   = ТаблицаДвиженийАмортизацияНУ.Скопировать();

		Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			
			ТекОС = СтрокаТЧ.ОсновноеСредство;
				
			СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС, "ОС_НУ");
			Если СтрокаТЗ <> Неопределено Тогда
				СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
				СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
			КонецЕсли;
			
			Если НЕ (СтрокаТЧ.АмортизацияЗаМесяцНУ = 0) Тогда
                Если НЕ абс_ЧастичнаяПродажа Тогда //АБС Коломиец 16760
				// Движения по регистру НачислениеАмортизации
				Движение = НачислениеАмортизацииНУ.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
                КонецЕсли;
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();
				Движение.ОсновноеСредство      = ТекОС;
				Движение.Организация           = ТекОрганизация;
				Движение.Амортизация           = СтрокаТЧ.АмортизацияЗаМесяцНУ;
				Движение.Стоимость             = 0;
				Движение.ВидОперации           = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче;
				
			КонецЕсли;

			// списание амортизации Д 02.01 К 01.09
			СуммаПроводки = СтрокаТЧ.АмортизацияНУ + + ?(Не абс_ЧастичнаяПродажа, СтрокаТЧ.АмортизацияЗаМесяцНУ, СтрокаТЧ.АмортизацияЗаМесяцНУЧастичнаяПродажа);  //АБС Коломиец 16760
			//СтрокаТЧ.АмортизацияЗаМесяцНУ;
				
			Если НЕ (СуммаПроводки = 0) Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Подготовка к передаче";
				Проводка.Сумма       = СуммаПроводки;

				Проводка.СчетДт      = СчетУчетаАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

			КонецЕсли;

			// списание балансовой стоимости Д 01.09 К 01.01
			СуммаПроводки = СтрокаТЧ.СтоимостьНУ;
				
			Если НЕ (СуммаПроводки = 0) Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Подготовка к передаче";
				Проводка.Сумма       = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

				Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				Проводка.СчетКт      = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

			КонецЕсли;
				
		КонецЦикла;

		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();
		
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
		ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			Если НЕ (СтрокаОС.АмортизацияЗаМесяцНУ = 0) Тогда
				
				НоваяСтрока = ТабАмортизации.Добавить();
				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_НУ);
				
				СчетаОС = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				НоваяСтрока.СчетАмортизацииНУ = ?(СчетаОС = Неопределено, Неопределено, СчетаОС.СчетНачисленияАмортизацииНУ);
				НоваяСтрока.СчетУчетаНУ       = ?(СчетаОС = Неопределено, Неопределено, СчетаОС.СчетУчетаНУ);
				
				НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Включение амортизационной премии в состав расходов.
		ТабКапитальныхВложений = ТабАмортизации.Скопировать();
		ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Добавить("СуммаПР",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Удалить("Сумма");
		
		СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"); 
			
		НалоговыйУчет.РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, ПроводкиНУ, ТаблицаДвиженийСтоимостьНУ, Отказ, Заголовок);			
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
		
		//вызов процедуры списания амортизации по направлениям
		
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "ОС", "", ТабАмортизации, ТабЗатрат, ТабАмортизацииБУ);
		КонецЕсли;
		
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Нал","ОС");
		
    КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ Отказ Тогда
		ПроводкиНУ.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры
	
Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаСчетов)

	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;	
	
	
	Если Не СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 Как Субконто1,
	|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	|	0 КАК Сумма02ВР,
	|	0 КАК Сумма01ПР,
	|	0 КАК Сумма01ВР,
	|	0 КАК Сумма01
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокКт,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации), ,Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
	|Субконто1 ";
	
	Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", ПланыСчетов.Налоговый.ОсновныеСредства);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Список = ОС.Выгрузить();

	ПроводкиНУ              = Движения.Налоговый;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
		Если СтрокаТаблицы = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОС = ТаблицаСчетов.Найти(Выборка.Субконто1,"ОС_НУ");
		Если ПараметрыОС = Неопределено Тогда
			ПараметрыОС = ТаблицаСчетов.Найти(Выборка.Субконто1,"ОС_БУ");
			Если ПараметрыОС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
		Иначе
			Если Не ЗначениеЗаполнено(ПараметрыОС.СчетУчетаНУ) Тогда
				СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			Иначе
				СчетУчетаНУ                 = ПараметрыОС.СчетУчетаНУ;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПараметрыОС.СчетНачисленияАмортизацииНУ) Тогда
				СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
			Иначе
				СчетНачисленияАмортизацииНУ = ПараметрыОС.СчетНачисленияАмортизацииНУ;
			КонецЕсли;
		КонецЕсли;	
		
		Если Выборка.Сумма01Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
			ПроводкаНУ.Содержание   = "Подготовка к передаче";
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		Если Выборка.Сумма02Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
			ПроводкаНУ.Содержание   = "Подготовка к передаче";
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
			
		КонецЕсли;
		
		Если Выборка.Сумма01Пр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
			ПроводкаНУ.Содержание   = "Подготовка к передаче";
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
			
		КонецЕсли;
		Если Выборка.Сумма02Пр <> 0 Тогда		
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
			ПроводкаНУ.Содержание   = "Постоянныые разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		
	КонецЦикла;
ПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "Обработка проведения" 
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(Дата));
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ПоддержкаПБУ18");
		ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли;
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок, СтруктураШапкиДокумента);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство",     "ОсновноеСредство");
	СтруктураПолей.Вставить("Стоимость",            "Стоимость");
	СтруктураПолей.Вставить("Амортизация",          "Амортизация");
	СтруктураПолей.Вставить("АмортизацияЗаМесяц",   ?(Не абс_ЧастичнаяПродажа, "АмортизацияЗаМесяц", "абс_АмортизацияЗаМесяцЧастичнаяПродажа"));//"АмортизацияЗаМесяц");    //АБС Коломиец 16760

	СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
	СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", ?(Не абс_ЧастичнаяПродажа, "АмортизацияЗаМесяцБУ", "абс_АмортизацияЗаМесяцБУЧастичнаяПродажа"));//"АмортизацияЗаМесяцБУ");  //АБС Коломиец 16760

	СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
	СтруктураПолей.Вставить("АмортизацияНУ",        "АмортизацияНУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", ?(Не абс_ЧастичнаяПродажа, "АмортизацияЗаМесяцНУ", "абс_АмортизацияЗаМесяцНУЧастичнаяПродажа"));//"АмортизацияЗаМесяцНУ");  //АБС Коломиец 16760

	СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
	//АБС Коломиец 16760+
	СтруктураПолей.Вставить("АмортизацияЗаМесяцЧастичнаяПродажа", "АмортизацияЗаМесяц");   
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУЧастичнаяПродажа", "АмортизацияЗаМесяцБУ"); 
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУЧастичнаяПродажа", "АмортизацияЗаМесяцНУ"); 
    //АБС Коломиец 16760-

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	// подготовка таблицы для списания
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",       Дата);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                                                         КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОС_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                          КАК ОС_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                                       КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации     КАК Направление_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура абс_ДвиженияПоРазницамЧастичнаяПродажа(СтруктураШапкиДокумента, СписокОС, ТаблицаПоОС) //АБС 16760
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;
	
	абс_мТаблицаПараметровАмортизацииНУ = Новый ТаблицаЗначений;
	абс_мТаблицаПараметровАмортизацииНУ.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	абс_мТаблицаПараметровАмортизацииНУ.Колонки.Добавить("СуммаПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));	
	
	ПроводкиНУ = Движения.Налоговый;

	// Списание разниц счета 01 и 02
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
	               |	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	               |	0 КАК Сумма02ВР,
	               |	0 КАК Сумма01ПР,
	               |	0 КАК Сумма01ВР,
	               |	0 КАК Сумма01
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаПР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокКт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаВР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаПР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаВР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |ИТОГИ
	               |	СУММА(Сумма02ПР),
	               |	СУММА(Сумма02ВР),
	               |	СУММА(Сумма01ПР),
	               |	СУММА(Сумма01ВР),
	               |	СУММА(Сумма01)
	               |ПО
	               |	Субконто1";
				   
	// АБС ВСТАВКА
	
	абс_мТаблицаПараметровАмортизацииНУ.Очистить();
	
	абс_ТекстЗапроса = "ВЫБРАТЬ
	                   |	ТабличнаяЧастьДокумента.ОсновноеСредство,
	                   |	ВЫБОР
	                   |		КОГДА ЕСТЬNULL(ТабличнаяЧастьДокумента.СтоимостьОС, 0) = 0
	                   |			ТОГДА 0
	                   |		ИНАЧЕ ЕСТЬNULL(ТабличнаяЧастьДокумента.СтоимостьСписания, 0) / ТабличнаяЧастьДокумента.СтоимостьОС
	                   |	КОНЕЦ КАК КоэффициентСписанияНУ
	                   |ПОМЕСТИТЬ КоэффициентыНУДокумента
	                   |ИЗ
	                   |	(ВЫБРАТЬ
	                   |		ПодготовкаКПередачеОСОС.ОсновноеСредство КАК ОсновноеСредство,
	                   |		СУММА(ПодготовкаКПередачеОСОС.абс_СтоимостьНУЧастичнаяПродажа) КАК СтоимостьОС,
	                   |		СУММА(ПодготовкаКПередачеОСОС.СтоимостьНУ) КАК СтоимостьСписания
	                   |	ИЗ
	                   |		Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
	                   |	ГДЕ
	                   |		ПодготовкаКПередачеОСОС.Ссылка = &Ссылка
	                   |	
	                   |	СГРУППИРОВАТЬ ПО
	                   |		ПодготовкаКПередачеОСОС.ОсновноеСредство) КАК ТабличнаяЧастьДокумента
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОстатки.Субконто1 КАК ОсновноеСредство,
	                   |	НалоговыйОстатки.СуммаОстатокКт * ЕСТЬNULL(КоэффициентыНУДокумента.КоэффициентСписанияНУ, 0) КАК Сумма02ПР,
	                   |	НалоговыйОстатки.СуммаОстатокКт КАК СуммаЦелая02ПР
	                   |ПОМЕСТИТЬ Суммы02ПР
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.Остатки(
	                   |			&КонДата,
	                   |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	                   |			&ВидСубконто,
	                   |			ВидУчета = &ВидУчетаПР
	                   |				И Организация = &Организация
	                   |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыНУДокумента КАК КоэффициентыНУДокумента
	                   |		ПО НалоговыйОстатки.Субконто1 = КоэффициентыНУДокумента.ОсновноеСредство
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОстатки.Субконто1 КАК ОсновноеСредство,
	                   |	НалоговыйОстатки.СуммаОстатокДт * ЕСТЬNULL(КоэффициентыНУДокумента.КоэффициентСписанияНУ, 0) КАК Сумма01ПР,
	                   |	НалоговыйОстатки.СуммаОстатокДт КАК СуммаЦелая01ПР
	                   |ПОМЕСТИТЬ Суммы01ПР
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.Остатки(
	                   |			&КонДата,
	                   |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	                   |			&ВидСубконто,
	                   |			ВидУчета = &ВидУчетаПР
	                   |				И Организация = &Организация
	                   |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыНУДокумента КАК КоэффициентыНУДокумента
	                   |		ПО НалоговыйОстатки.Субконто1 = КоэффициентыНУДокумента.ОсновноеСредство
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаДт02БУ,
	                   |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ОсновноеСредство
	                   |ПОМЕСТИТЬ СуммыДт02БУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			СчетДт В ИЕРАРХИИ (&ХозрасчетныйАмортизацияОС),
	                   |			&ВидСубконто,
	                   |			,
	                   |			,
	                   |			Организация = &Организация
	                   |				И СубконтоДт1 В (&СписокОС)) КАК ХозрасчетныйОборотыДтКт
	                   |ГДЕ
	                   |	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	ХозрасчетныйОборотыДтКт.СубконтоДт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОборотыДтКт.СубконтоДт1 КАК ОсновноеСредство,
	                   |	СУММА(НалоговыйОборотыДтКт.СуммаОборот) КАК СуммаДт02НУ
	                   |ПОМЕСТИТЬ СуммыДт02НУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			СчетДт В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	                   |			&ВидСубконто,
	                   |			,
	                   |			,
	                   |			Организация = &Организация
	                   |				И СубконтоДт1 В (&СписокОС)
	                   |				И ВидУчетаДт = &ВидУчетаНУ) КАК НалоговыйОборотыДтКт
	                   |ГДЕ
	                   |	НалоговыйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	НалоговыйОборотыДтКт.СубконтоДт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК ОсновноеСредство,
	                   |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаКт01БУ
	                   |ПОМЕСТИТЬ СуммыКт01БУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			,
	                   |			,
	                   |			СчетКт В ИЕРАРХИИ (&ХозрасчетныйОСВОрганизации)
	                   |				И (НЕ СчетКт В ИЕРАРХИИ (&ХозрасчетныйВыбытиеОС)),
	                   |			&ВидСубконто,
	                   |			Организация = &Организация
	                   |				И СубконтоКт1 В (&СписокОС)) КАК ХозрасчетныйОборотыДтКт
	                   |ГДЕ
	                   |	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	ХозрасчетныйОборотыДтКт.СубконтоКт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОборотыДтКт.СубконтоКт1 КАК ОсновноеСредство,
	                   |	СУММА(НалоговыйОборотыДтКт.СуммаОборот) КАК СуммаКт01НУ
	                   |ПОМЕСТИТЬ СуммыКт01НУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			,
	                   |			,
	                   |			СчетКт В ИЕРАРХИИ (&НалоговыйОСВОрганизации)
	                   |				И (НЕ СчетКт В ИЕРАРХИИ (&НалоговыйВыбытиеОС)),
	                   |			&ВидСубконто,
	                   |			Организация = &Организация
	                   |				И СубконтоКт1 В (&СписокОС)
	                   |				И ВидУчетаКт = &ВидУчетаНУ) КАК НалоговыйОборотыДтКт
	                   |ГДЕ
	                   |	НалоговыйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	НалоговыйОборотыДтКт.СубконтоКт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	Данные01БУиНУ.ОсновноеСредство КАК Субконто1,
	                   |	Данные01БУиНУ.СуммаКт01НУ КАК СуммаКт01НУ,
	                   |	Данные01БУиНУ.СуммаКт01БУ КАК СуммаКт01БУ,
	                   |	ЕСТЬNULL(Суммы01ПР.Сумма01ПР, 0) КАК Сумма01ПР,
	                   |	Данные01БУиНУ.СуммаКт01БУ - Данные01БУиНУ.СуммаКт01НУ - ЕСТЬNULL(Суммы01ПР.Сумма01ПР, 0) КАК Сумма01ВР,
	                   |	0 КАК СуммаДт02БУ,
	                   |	0 КАК СуммаДт02НУ,
	                   |	0 КАК Сумма02ПР,
	                   |	0 КАК Сумма02ВР,
	                   |	NULL КАК СуммаЦелая02ПР,
	                   |	ЕСТЬNULL(Суммы01ПР.СуммаЦелая01ПР, 0) КАК СуммаЦелая01ПР
	                   |ИЗ
	                   |	(ВЫБРАТЬ
	                   |		ЕСТЬNULL(СуммыКт01БУ.ОсновноеСредство, СуммыКт01НУ.ОсновноеСредство) КАК ОсновноеСредство,
	                   |		СУММА(ЕСТЬNULL(СуммыКт01НУ.СуммаКт01НУ, 0)) КАК СуммаКт01НУ,
	                   |		СУММА(ЕСТЬNULL(СуммыКт01БУ.СуммаКт01БУ, 0)) КАК СуммаКт01БУ
	                   |	ИЗ
	                   |		СуммыКт01БУ КАК СуммыКт01БУ
	                   |			ПОЛНОЕ СОЕДИНЕНИЕ СуммыКт01НУ КАК СуммыКт01НУ
	                   |			ПО СуммыКт01БУ.ОсновноеСредство = СуммыКт01НУ.ОсновноеСредство
	                   |	
	                   |	СГРУППИРОВАТЬ ПО
	                   |		ЕСТЬNULL(СуммыКт01БУ.ОсновноеСредство, СуммыКт01НУ.ОсновноеСредство)) КАК Данные01БУиНУ
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ Суммы01ПР КАК Суммы01ПР
	                   |		ПО Данные01БУиНУ.ОсновноеСредство = Суммы01ПР.ОсновноеСредство
	                   |
	                   |ОБЪЕДИНИТЬ ВСЕ
	                   |
	                   |ВЫБРАТЬ
	                   |	Данные02БУиНУ.ОсновноеСредство,
	                   |	0,
	                   |	0,
	                   |	0,
	                   |	0,
	                   |	Данные02БУиНУ.СуммаДт02БУ,
	                   |	Данные02БУиНУ.СуммаДт02НУ,
	                   |	ЕСТЬNULL(Суммы02ПР.Сумма02ПР, 0),
	                   |	Данные02БУиНУ.СуммаДт02БУ - Данные02БУиНУ.СуммаДт02НУ - ЕСТЬNULL(Суммы02ПР.Сумма02ПР, 0),
	                   |	ЕСТЬNULL(Суммы02ПР.СуммаЦелая02ПР, 0),
	                   |	NULL
	                   |ИЗ
	                   |	(ВЫБРАТЬ
	                   |		ЕСТЬNULL(СуммыДт02БУ.ОсновноеСредство, СуммыДт02НУ.ОсновноеСредство) КАК ОсновноеСредство,
	                   |		СУММА(ЕСТЬNULL(СуммыДт02БУ.СуммаДт02БУ, 0)) КАК СуммаДт02БУ,
	                   |		СУММА(ЕСТЬNULL(СуммыДт02НУ.СуммаДт02НУ, 0)) КАК СуммаДт02НУ
	                   |	ИЗ
	                   |		СуммыДт02БУ КАК СуммыДт02БУ
	                   |			ПОЛНОЕ СОЕДИНЕНИЕ СуммыДт02НУ КАК СуммыДт02НУ
	                   |			ПО СуммыДт02БУ.ОсновноеСредство = СуммыДт02НУ.ОсновноеСредство
	                   |	
	                   |	СГРУППИРОВАТЬ ПО
	                   |		ЕСТЬNULL(СуммыДт02БУ.ОсновноеСредство, СуммыДт02НУ.ОсновноеСредство)) КАК Данные02БУиНУ
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ Суммы02ПР КАК Суммы02ПР
	                   |		ПО Данные02БУиНУ.ОсновноеСредство = Суммы02ПР.ОсновноеСредство
	                   |ИТОГИ
	                   |	СУММА(СуммаКт01НУ),
	                   |	СУММА(СуммаКт01БУ),
	                   |	СУММА(Сумма01ПР),
	                   |	СУММА(Сумма01ВР),
	                   |	СУММА(СуммаДт02БУ),
	                   |	СУММА(СуммаДт02НУ),
	                   |	СУММА(Сумма02ПР),
	                   |	СУММА(Сумма02ВР),
	                   |	СУММА(СуммаЦелая02ПР),
	                   |	СУММА(СуммаЦелая01ПР)
	                   |ПО
	                   |	Субконто1";

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = абс_ТекстЗапроса;
	//\\ АБС ВСТАВКА
	
	Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	// АБС ВСТАВКА
	Запрос.УстановитьПараметр("ВидУчетаНУ", Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ХозрасчетныйАмортизацияОС", ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	абс_МассивВыбытие = Новый Массив;
	абс_МассивВыбытие.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	абс_МассивВыбытие.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМЦ);
	Запрос.УстановитьПараметр("ХозрасчетныйВыбытиеОС", абс_МассивВыбытие);
	абс_МассивВыбытие = Новый Массив;
	абс_МассивВыбытие.Добавить(ПланыСчетов.Налоговый.ВыбытиеМЦ);
	абс_МассивВыбытие.Добавить(ПланыСчетов.Налоговый.ВыбытиеОС);
	Запрос.УстановитьПараметр("НалоговыйВыбытиеОС", абс_МассивВыбытие);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//\\ АБС ВСТАВКА
	Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);

	
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", Массив);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", Массив);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Список = ОС.Выгрузить();
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
		Если СтрокаТаблицы = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1, "ОС_НУ");
		Если ПараметрыОС = Неопределено Тогда
			ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1,"ОС_БУ");
			Если ПараметрыОС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
		Иначе
			Если Не ЗначениеЗаполнено(ПараметрыОС.СчетУчетаНУ) Тогда
				СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			Иначе
				СчетУчетаНУ                 = ПараметрыОС.СчетУчетаНУ;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПараметрыОС.СчетНачисленияАмортизацииНУ) Тогда
				СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
			Иначе
				СчетНачисленияАмортизацииНУ = ПараметрыОС.СчетНачисленияАмортизацииНУ;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.Сумма01Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Подготовка к передаче";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		//Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
		//	ПроводкаНУ              = ПроводкиНУ.Добавить();
		//	ПроводкаНУ.Период       = Дата;
		//	ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
		//	
		//	ПроводкаНУ.СчетДт      = СчетСписанияНУ;
		//	БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
		//	БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		//	ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
		//	ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
		//	// АБС ИЗМЕНЕНИЕ
		//	//ПроводкаНУ.Содержание   = "Списание ОС";
		//	ПроводкаНУ.Содержание   = "Подготовка к передаче";
		//	//\\ АБС ИЗМЕНЕНИЕ
		//	ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
		//	БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
		//	ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
		//	ПроводкаНУ.НомерЖурнала = "ВР";
		//КонецЕсли;
		Если Выборка.Сумма02Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Подготовка к передаче";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
			
		КонецЕсли;
		
		Если Выборка.Сумма01Пр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Подготовка к передаче";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		//Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
		//	ПроводкаНУ              = ПроводкиНУ.Добавить();
		//	ПроводкаНУ.Период       = Дата;
		//	ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
		//	ПроводкаНУ.СчетДт      = СчетСписанияНУ;
		//	БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
		//	БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		//	ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
		//	ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
		//	// АБС ИЗМЕНЕНИЕ
		//	//ПроводкаНУ.Содержание   = "Списание ОС";
		//	ПроводкаНУ.Содержание   = "Подготовка к передаче";
		//	//\\ АБС ИЗМЕНЕНИЕ
		//	ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
		//	БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
		//	ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
		//	ПроводкаНУ.НомерЖурнала = "ПР";
		//КонецЕсли;
		Если Выборка.Сумма02Пр <> 0 Тогда		
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Подготовка к передаче";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		
		// АБС ВСТАВКА
		// соберем данные по ПР в таблицу параметров амортизации по НУ
		НоваяСтрокаТаблицыПараметровНУ = абс_мТаблицаПараметровАмортизацииНУ.Добавить();
		НоваяСтрокаТаблицыПараметровНУ.ОсновноеСредство = Выборка.Субконто1;
		НоваяСтрокаТаблицыПараметровНУ.СуммаПР = Выборка.СуммаЦелая01ПР - Выборка.Сумма01ПР - Выборка.СуммаЦелая02ПР + Выборка.Сумма02ПР;
		//\\ АБС ВСТАВКА
		
	КонецЦикла;
	
	ПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры



