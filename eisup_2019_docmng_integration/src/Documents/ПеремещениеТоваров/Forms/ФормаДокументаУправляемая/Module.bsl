////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Количество, Коэффициент, СведенияЕдиницаИзмеренияМест, Качество;
	Перем ХарактеристикаНоменклатуры, СерияНоменклатуры;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	ЗначениеВыбора.Свойство("СерияНоменклатуры",			СерияНоменклатуры);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",				ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("ЕдиницаИзмеренияМест",			ЕдиницаИзмеренияМест);
	ЗначениеВыбора.Свойство("Коэффициент",					Коэффициент);
	ЗначениеВыбора.Свойство("Количество",					Количество);
	ЗначениеВыбора.Свойство("Качество",						Качество);
	ЗначениеВыбора.Свойство("СведенияЕдиницаИзмеренияМест", СведенияЕдиницаИзмеренияМест);


	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("Качество", Качество);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест		= ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент      			= Коэффициент;
			СтрокаТабличнойЧасти.Качество      				= Качество;
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, СведенияЕдиницаИзмеренияМест);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
	КонецЕсли;
	
	ЕстьУслуги = Ложь;
	
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	Если ЕстьУслуги Тогда
		СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	КонецЕсли;
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);
		
	КонецЕсли;
	
	// АБС ВСТАВКА 633 Фролов 
	
	Ответственные = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(Объект.Ответственный.абс_Сотрудник.ПодразделениеОрганизации));
	
	Если Ответственные.Количество() > 0 Тогда
		Объект.абс_ОтпускРазрешил = Ответственные[0];
	КонецЕсли;
	
	Объект.ОтражатьВБухгалтерскомУчете 	= Ложь;
	Объект.ОтражатьВНалоговомУчете 		= Ложь;
	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Элементы.абс_Согласование.Доступность = Истина;
		
		ОтборОбъект = ТабличноеПолеИсторияСтатусов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОбъект.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ОтборОбъект.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПервичныйДокумент");
		ОтборОбъект.ПравоеЗначение 	= Объект.Ссылка;
		ОтборОбъект.Использование	= Истина;
		
	Иначе
		
		Элементы.абс_Согласование.Доступность = Ложь;
		
	КонецЕсли;

	// АБС ВСТАВКА 633 Фролов КОНЕЦ

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора("ВозвратнаяТара", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ДАННЫХ ИЗ НАСТРОЕК

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ДобавитьДополнительныеДанныеВНастройку(Объект, Настройки, Документы.ПеремещениеТоваров.СтруктураДополнительныхДанныхФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектДополнительнымиДанными(Объект, Настройки, Документы.ПеремещениеТоваров.СтруктураДополнительныхДанныхФормы());
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ТОВАРЫ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбменаССервером = Новый Структура();
	ДанныеОбменаССервером.Вставить("Номенклатура",  СтрокаТабличнойЧасти.Номенклатура);
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеНоменклатуры(ДанныеОбменаССервером);
	
	// АБС ВСТАВКА 633 Фролов	
	ЗначениеДляЗаполнения = ЗаполнитьСтавкуНДС(ДанныеОбменаССервером);
	// АБС ВСТАВКА 633 Фролов КОНЕЦ
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура();
	ДанныеОбменаССервером.Вставить("ЕдиницаИзмерения",     СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ДанныеОбменаССервером.Вставить("ЕдиницаИзмеренияМест", СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест);
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеЕдиницыИзмерения(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.ОчиститьКоличествоМестПриОчисткеЕдиницыМест(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовыйСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.НовыйСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.НовыйСчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПринятыеСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ПринятыеСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.ПринятыеСчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовыйПринятыеСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.НовыйПринятыеСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.НовыйПринятыеСчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ВОЗВРАТНАЯ ТАРА" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ВозвратнаяТараНовыйСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.НовыйСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.НовыйСчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПодбор(Команда)
	ДействиеПодбор("ВозвратнаяТара");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруСтроки(СтрокаТЧДанныеФормы)
	
	СтруктураСтроки = Новый Структура("Количество, абс_ЦенаБезНДС, абс_СтавкаНДС, абс_СуммаБезНДС, абс_СуммаНДС, абс_СуммаСНДС");
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧДанныеФормы);
	
		//СтруктураСтроки.абс_СтавкаНДС = ДанныеФормыВЗначение(СтрокаТЧДанныеФормы.абс_СтавкаНДС, Тип("ПеречислениеСсылка.СтавкиНДС"));
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуПоСтруктуре(СтрокаТЧДанныеФормы, СтрокаТЧ)
	
	ЗаполнитьЗначенияСвойств(СтрокаТЧДанныеФормы, СтрокаТЧ
		, "Количество, абс_ЦенаБезНДС, абс_СтавкаНДС, абс_СуммаБезНДС, абс_СуммаНДС, абс_СуммаСНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыабс_ЦенаБезНДСПриИзменении(Элемент)
	
	СтрокаТЧДанныеФормы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТЧ = ПолучитьСтруктуруСтроки(СтрокаТЧДанныеФормы);
	
	РассчитатьСуммуТабЧасти(СтрокаТЧ);
	РассчитатьНДСТабЧасти(СтрокаТЧ);
	
	ЗаполнитьСтрокуПоСтруктуре(СтрокаТЧДанныеФормы, СтрокаТЧ)
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыабс_СтавкаНДСПриИзменении(Элемент)
	
	СтрокаТЧДанныеФормы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТЧ = ПолучитьСтруктуруСтроки(СтрокаТЧДанныеФормы);
	
	РассчитатьНДСТабЧасти(СтрокаТЧ);
	
	ЗаполнитьСтрокуПоСтруктуре(СтрокаТЧДанныеФормы, СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыабс_СуммаБезНДСПриИзменении(Элемент)
	
	СтрокаТЧДанныеФормы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТЧ = ПолучитьСтруктуруСтроки(СтрокаТЧДанныеФормы);
	
	Если НЕ СтрокаТЧ.абс_СуммаБезНДС = 0 Тогда
		СтрокаТЧ.абс_ЦенаБезНДС = СтрокаТЧ.абс_СуммаБезНДС / СтрокаТЧ.Количество;
	Иначе
		СтрокаТЧ.абс_ЦенаБезНДС = 0;
	КонецЕсли;
	
	РассчитатьНДСТабЧасти(СтрокаТЧ);
	
	ЗаполнитьСтрокуПоСтруктуре(СтрокаТЧДанныеФормы, СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыабс_СуммаСНДСПриИзменении(Элемент)
	
	СтрокаТЧДанныеФормы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТЧ = ПолучитьСтруктуруСтроки(СтрокаТЧДанныеФормы);
	
	РассчитатьНДСТабЧастиОтСуммыСНДС(СтрокаТЧ);
	
	Если НЕ СтрокаТЧ.Количество = 0 Тогда
		СтрокаТЧ.абс_ЦенаБезНДС = СтрокаТЧ.абс_СуммаБезНДС / СтрокаТЧ.Количество;
	Иначе
		СтрокаТЧ.абс_ЦенаБезНДС = 0;
	КонецЕсли;
	
	ЗаполнитьСтрокуПоСтруктуре(СтрокаТЧДанныеФормы, СтрокаТЧ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьНДСТабЧасти(СтрокаТЧ)
	
	СтрокаТЧ.абс_СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.абс_СуммаБезНДС,
	                                               Истина, Ложь,
	                                               УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.абс_СтавкаНДС));
												   
	СтрокаТЧ.абс_СуммаСНДС = СтрокаТЧ.абс_СуммаБезНДС + СтрокаТЧ.абс_СуммаНДС;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьНДСТабЧастиОтСуммыСНДС(СтрокаТЧ)
	
	СтрокаТЧ.абс_СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.абс_СуммаСНДС,
	                                               Истина, Истина,
	                                               УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.абс_СтавкаНДС));
												   
	СтрокаТЧ.абс_СуммаБезНДС = СтрокаТЧ.абс_СуммаСНДС - СтрокаТЧ.абс_СуммаНДС;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммуТабЧасти(СтрокаТЧ)
	
	СтрокаТЧ.абс_СуммаБезНДС = СтрокаТЧ.абс_ЦенаБезНДС * СтрокаТЧ.Количество;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСтавкуНДС(ДанныеДляЗаполнения)
	
	ДанныеДляЗаполнения.Вставить("абс_СтавкаНДС", ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

// АБС ВСТАВКА Согласование первичных документов
&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусов()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	СписокСтатусов = Элементы.мСтатусДокумента.СписокВыбора;	
	СписокСтатусов.Очистить();
	
	Если СписокСтатусов = Неопределено Тогда
		СписокСтатусов = Новый СписокЗначений();
	Иначе
		СписокСтатусов.Очистить();
	КонецЕсли;
	
	СписокСтатусов.Добавить(Объект.абс_Статус);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтатус = абс_БизнесПроцессы.ПолучитьСтатусПервичногоДокументаПоРегистру(Объект.Ссылка);
	
	Если ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) Тогда
			 
			Если абс_БизнесПроцессы.НеобходимоСогласованиеОФКПервичногоДокумента(Объект.Ссылка) Тогда
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
			Иначе
				СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);
			
		КонецЕсли;
					
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			//СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено ИЛИ
			 НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено ИЛИ
			 НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
		КонецЕсли;		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотраДокумента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	мТекущийПользователь = глЗначениеПеременной("глЗначениеПеременной");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_ТаблицаСтатусовБПТТК.РедактированиеДокумента,
	                      |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса
	                      |ИЗ
	                      |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                      |ГДЕ
	                      |	абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеПервичныхДокументов)
	                      |	И абс_ТаблицаСтатусовБПТТК.Статус = &ТекСтатус");
						  
	Запрос.УстановитьПараметр("ТекСтатус", Объект.абс_Статус);
	
	РазрешеноРедактирование 		= Ложь;
	РазрешеноМенятьСтатус 			= Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ мРолиПользователя.Найти(Выборка.ОтветственныйЗаИзменениеСтатуса) = Неопределено Тогда
			РазрешеноМенятьСтатус = Истина
		КонецЕсли;
		
		РазрешеноРедактирование = РазрешеноРедактирование ИЛИ Выборка.РедактированиеДокумента;
	КонецЦикла;
	
	
	// Добавили определение ответственных лиц по ответственным в подразделениях
	// поэтому не проверяем их по ролям пользователей.
	
	Если Объект.Ссылка.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка И
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено)) Тогда
		
		РазрешеноМенятьСтатус = Истина;
	КонецЕсли;
	
	// Если есть задачи текущему пользователю, то ему разрешено изменить статус
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	                      |			&ТекПользователь,
	                      |			ОбъектЗадачи = &ПервичныйДокументСсылка
	                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
						  
	Запрос.УстановитьПараметр("ТекПользователь"			, мТекущийПользователь);
	Запрос.УстановитьПараметр("ПервичныйДокументСсылка"	, Объект.Ссылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;																				
	
	Элементы.мСтатусДокумента.Доступность = РазрешеноМенятьСтатус;	
	
	// Установим необходимый вид просмотра документа
	Если НЕ РазрешеноРедактирование Тогда
		
		ТолькоПросмотр = Истина;
		
//		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = РазрешеноМенятьСтатус;
		Элементы.ОсновныеДействияФормы.Кнопки.Провести.Доступность = РазрешеноМенятьСтатус;
		
	Иначе
		
		ЭтаФорма.ТолькоПросмотр = Ложь;
		
//		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = Истина;
		Элементы.ОсновныеДействияФормы.Кнопки.Провести.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборИсторииСтатусов()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Элементы.абс_Согласование.Доступность = Истина;
		
		ОтборОбъект = ТабличноеПолеИсторияСтатусов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОбъект.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ОтборОбъект.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПервичныйДокумент");
		ОтборОбъект.ПравоеЗначение 	= Объект.Ссылка;
		ОтборОбъект.Использование	= Истина;
		
	Иначе
		
		Элементы.абс_Согласование.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	мСтатусДокумента = Объект.абс_Статус;
	
	ЗаполнитьСписокВыбораСтатусов();
	
	УстановитьРежимПросмотраДокумента();
	
	УстановитьОтборИсторииСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Объект.абс_ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		ВвестиСтроку(Объект.абс_ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат НЕ Объект.абс_Статус = Объект.Ссылка.абс_Статус;
	
КонецФункции

// АБС ВСТАВКА Согласование первичных документов КОНЕЦ


