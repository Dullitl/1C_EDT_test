Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСчета003_01 Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;
Перем ИспользоватьРегистрСвободныеОстатки;
//+++ Колесников А.С. 05.11.2018 [CHG448 / 601]
Перем СозданоОтДокументаАВИЗО Экспорт;
//--- Колесников А.С. 05.11.2018 [CHG448 / 601]
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати          = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	ОбработкаПечати.Документ = ЭтотОбъект.Ссылка;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка, "Цена");
	Иначе
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);
	КонецЕсли;

КонецПроцедуры // ПечататьЭтикетки()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  ИмяМакета - Имя макета для печати.
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(ИмяМакета, НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, ИмяМакета, , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(Нстр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(Нстр("ru = 'Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	

	// Получить экземпляр документа на печать
	Если ИмяМакета = "1Т"
		  ИЛИ ИмяМакета = "_1Т" Тогда

		ТабДокумент = ПечатьТТН();

	ИначеЕсли ИмяМакета = "БланкОтправитель"
		  ИЛИ ИмяМакета = "БланкПолучатель" Тогда

		ТабДокумент = ПечатьБланк(ИмяМакета, НаПринтер);

	ИначеЕсли ИмяМакета = "Этикетки" Тогда

		ПечататьЭтикетки();
		Возврат;

	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда

		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	Иначе
		//Печать макетов ТОРГ13, М4, М11, Ведомость - из модуля менеджера объекта
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ПеремещениеТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПеремещениеТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Перемещение товаров");
	СтруктураМакетов.Вставить("ТОРГ13",             "ТОРГ-13 (Накладная на внутреннее перемещение)");
	СтруктураМакетов.Вставить("_1Т",                "1-Т (Товарно-транспортная накладная)");
	СтруктураМакетов.Вставить("М4",                 "М-4 (Приходный ордер)");
	СтруктураМакетов.Вставить("М11",                "M-11 (Требование-накладная)");
	// АБС ВСТАВКА 633 Фролов
	СтруктураМакетов.Вставить("М15_Перемещение",	"М-15 (Накладная на отпуск материалов на сторону)");
	// АБС ВСТАВКА 633 КОНЕЦ
	СтруктураМакетов.Вставить("БланкОтправитель",   "Бланк товарного наполнения, склад отправитель");
	СтруктураМакетов.Вставить("БланкПолучатель",    "Бланк товарного наполнения, склад получатель");
	СтруктураМакетов.Вставить("Этикетки",           "Этикетки");
	СтруктураМакетов.Вставить("ТранспУпаковки",    "Штрихкоды транспортных упаковок");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Функция проверяет, есть ли НТТ среди склада-отправителя или склад-получателя.
//
// Возвращаемое значение:
//  Булево. Истина, если отправитель или получатель - НТТ.
//
Функция ЕстьНТТ() Экспорт

	ВидНТТ = Перечисления.ВидыСкладов.НТТ;

	Возврат (СкладОтправитель.ВидСклада = ВидНТТ Или СкладПолучатель.ВидСклада = ВидНТТ);

КонецФункции // ЕстьНТТ()

// Возвращает розничную сумму документа в валюте регл. учета.
//
// Возвращаемое значение:
//  Число. Розничная сумма документа в валюте регл. учета.
//
Функция ПолучитьРозничнуюСуммуДокумента() Экспорт

	Результат = 0;

	Если ЕстьНТТ() Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			Результат = Результат + Окр(СтрокаТЧ.Цена * СтрокаТЧ.Количество, 2);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьРозничнуюСуммуДокумента()

// Дополняет новую строку реквизитами регламентированного учета из исходной строки
//
// Параметры:
// НоваяСтрока    - строка, которую необходимо дополнить
// ИсходнаяСтрока - строка, из которой берутся исходные данные
//
Процедура ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока)

	НоваяСтрока.СчетУчетаБУ              = ИсходнаяСтрока.СчетУчетаБУ;
	НоваяСтрока.СчетУчетаНУ              = ИсходнаяСтрока.СчетУчетаНУ;
	НоваяСтрока.ПринятыеСчетУчетаБУ      = ИсходнаяСтрока.ПринятыеСчетУчетаБУ;
	//+ Машута А. 22.10.2018 задача 908
	//НоваяСтрока.НовыйСчетУчетаБУ         = ИсходнаяСтрока.НовыйСчетУчетаБУ;
	НоваяСтрока.НовыйСчетУчетаБУ         = ИсходнаяСтрока.СчетУчетаБУ;
	//- Машута А. 22.10.2018 задача 908
	НоваяСтрока.НовыйСчетУчетаНУ         = ИсходнаяСтрока.НовыйСчетУчетаНУ;
	НоваяСтрока.НовыйПринятыеСчетУчетаБУ = ИсходнаяСтрока.НовыйПринятыеСчетУчетаБУ;

КонецПроцедуры // ДополнитьСтрокуРегл

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры

// Процедура заполняет счета учета в строке табличной части или всей табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ДанныеТабличнойЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ДанныеТабличнойЧасти, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры

// Процедура заполняет счета учета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСменуРегл(СтрокаТабличнойЧасти, Выборка)
	
	СтрокаТабличнойЧасти.СчетУчетаБУ      			= Выборка.Счет;
	СтрокаТабличнойЧасти.СчетУчетаНУ      			= Выборка.СчетНУ;
	СтрокаТабличнойЧасти.НовыйСчетУчетаБУ      		= Выборка.Счет;
	СтрокаТабличнойЧасти.НовыйСчетУчетаНУ      		= Выборка.СчетНУ;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСмену()

// Процедура заполняет поля запроса для целей регл. учета.
//
Процедура ЗаполнитьПоляЗапросаРегл(ПоляЗапросаРегл)
	
	ПоляЗапросаРегл = "
	|	ДокТовары.Счет,
	|	ДокТовары.СчетНУ,
	|";
	
КонецПроцедуры // ЗаполнитьПоляЗапросаРегл()

// Процедура выполняет заполнение табличной части по отчету производства за смену.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОтчетуПроизводстваЗаСменуУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
    масНаправленияВыпуска = новый Массив;
	масНаправленияВыпуска.Добавить(Перечисления.НаправленияВыпуска.НаЗатраты);
	масНаправленияВыпуска.Добавить(Перечисления.НаправленияВыпуска.НаЗатратыСписок);
	
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	Запрос.УстановитьПараметр("ВидВыпуска",   		Перечисления.ВидыВыпуска.Наработка);
	Запрос.УстановитьПараметр("НаправлениеВыпуска", масНаправленияВыпуска);
	
	ПоляЗапросаРегл = "";
	ЗаполнитьПоляЗапросаРегл(ПоляЗапросаРегл);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура					КАК Номенклатура,
	|	ДокТовары.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ДокТовары.СерияНоменклатуры				КАК СерияНоменклатуры,
	|	ДокТовары.ЕдиницаИзмерения 				КАК ЕдиницаИзмерения,
	|	ДокТовары.ЕдиницаИзмеренияМест 			КАК ЕдиницаИзмеренияМест,
	|	ДокТовары.Коэффициент 					КАК Коэффициент,
	|	ДокТовары.ЗаказРезерв 					КАК Заказ,
	|	ДокТовары.Качество 						КАК Качество,
	|	" + ПоляЗапросаРегл + "
	|	СУММА(ДокТовары.Количество)             КАК Количество,
	|	СУММА(ДокТовары.КоличествоМест)         КАК КоличествоМест
	|
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ДокТовары
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И ДокТовары.ВидВыпуска <> &ВидВыпуска
	|	И ДокТовары.НаправлениеВыпуска не в (&НаправлениеВыпуска)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры,
	|	ДокТовары.ЕдиницаИзмерения,
	|	ДокТовары.ЕдиницаИзмеренияМест,
	|	ДокТовары.Коэффициент,
	|	ДокТовары.ЗаказРезерв,
	|	" + ПоляЗапросаРегл + "
	|	ДокТовары.Качество
	|";


	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     			= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Количество       			= Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       		= Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 		= Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент      			= Выборка.Коэффициент;
		СтрокаТабличнойЧасти.ДокументРезерва      		= Выборка.Заказ;
		СтрокаТабличнойЧасти.Качество      				= Выборка.Качество;
		
		ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСменуРегл(СтрокаТабличнойЧасти, Выборка);
					
	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОтправитель, Организация, МассивНоменклатуры, , СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти= Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
    ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");
	
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска   = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтуктураПоиска.Вставить("Цена",                   ИсходнаяСтрока.Цена);
		КонецЕсли;
		
        флЗаполнятьИзРезервов = ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании
			И СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры            = Строка.СерияНоменклатуры;
			НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
			НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;  
			НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
			НоваяСтрока.Количество                   = СписанноеКоличество; 
			ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры            = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;  
				НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;                

				НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" табличной части "Товары".
//
Процедура ЗаполнитьРозничнуюЦену() Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Для Каждого Строка Из Товары Цикл

		Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
			Строка.Цена = 0;
		ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
			Строка.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры,
			              ПолучательТипЦен, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		ИначеЕсли ОтправительНТТ Тогда
			Строка.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, СкладОтправитель,
			              мВалютаРегламентированногоУчета, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания реквизита ВнутреннийЗаказ
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	Для каждого Строка из ТЧ цикл
		СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) +
			                               """ табличной части """ + ИмяТЧ + """: '");

		Если НЕ ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДокументРезерва) Тогда
			Если Строка.ДокументРезерва<>Строка.ВнутреннийЗаказ Тогда
				//неправильный документ резерва
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан документ резерва, отличающийся от значения реквизита ""Внутренний заказ""'") , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			//неправильный внутренний заказ
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""На склад"" '") , Отказ, Заголовок);

		КонецЕсли;
		
		Если Строка.СкладВнутреннегоЗаказа <> СкладПолучатель Тогда
			// неправильный склад
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ, в котором склад-заказчик отличается от склада-получателя, указанного в шапке документа'") , Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	//Крамаренко Д.М.
	//НФС 2018
	// Укажем, что надо проверить:
	//СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Качество");
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Качество, СтатьяОборотов");
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	//Крамаренко Д.М.
	//НФС 2018
	
	//Крамаренко Д.М.
	//НФС 2018	
	Для Каждого Строка из Товары Цикл
		
		СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) + """ табличной части "" Товары "": '");
		
		//проверка счетов группы 07 или 08
		Если ЗначениеЗаполнено(Строка.СчетУчетаБУ) Тогда
			СчетаПроверочнойГруппы07 = Строка.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке) ИЛИ Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
			СчетаПроверочнойГруппы08 = Строка.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы) ИЛИ Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы;
		КонецЕсли;
		//лишняя проверка, включил для совместимости кода
		Если НЕ ЗначениеЗаполнено(Строка.СтатьяОборотов) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+"не заполнена Бюджетная Статья",Отказ,Заголовок);
		КонецЕсли;
		
		//проверка статьи КВ и аналитик
		Если СокрЛП(Строка.СтатьяОборотов.Код) = "КВпоПост" Тогда
			Если НЕ ЗначениеЗаполнено(Строка.абс_ТЭО) ИЛИ НЕ ЗначениеЗаполнено(Строка.абс_КВ) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнены аналитики " +
				"ТЭО и КВ - они обязательны при указанной статье!", Отказ, Заголовок);				
			КонецЕсли;
		КонецЕсли;
		//проверка статьи КВ и счетов учета
		Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером или абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
			Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером или абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
				Если СокрЛП(Строка.СтатьяОборотов.Код) = "КВпоПост" Тогда
					Если НЕ (СчетаПроверочнойГруппы07 ИЛИ СчетаПроверочнойГруппы08) Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'Необходимо выбрать при установленной бюджетной статье только счета группы 07 или 08'") , Отказ, Заголовок);			
					КонецЕсли;
				КонецЕсли;
				Если СчетаПроверочнойГруппы07 ИЛИ СчетаПроверочнойГруппы08  Тогда
					Если СокрЛП(Строка.СтатьяОборотов.Код) <> "КВпоПост" Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'Необходимо выбрать при установленных счетах группы 07 или 08 только статью Единая КВ'") , Отказ, Заголовок);
					КонецЕсли;			
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("Возвратная тара", ТаблицаПоТаре, Отказ, Заголовок);


КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	  ИЛИ НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов 
	  ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	  
	  Возврат;
	КонецЕсли;
	
	// Проверка остатков при оперативном проведении.
	Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизаций.
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
	ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СкладОтправитель);
				
	ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	// А теперь приход на склад-получатель
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
				
	ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Функция удаляет из исходной таблицы строки не требующие резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеРезервПоЗаказ()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеСнятияСРезерва(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервирования(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) 
		   ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) И СтрокаТаблицы.СкладВнутреннегоЗаказа = СкладПолучатель)
		   Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()


// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция ПодготовитьТаблицуТоваровКПолучению(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	ТаблицаПоТоварамКПолучению.Колонки.Добавить("ДокументПолучения");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументПолучения = СтрокаТаблицы.ДокументРезерва;
			Если не СтрокаТаблицы.ДокументРезерва.БезПраваПРодажи Тогда
				СтрокаТаблицы.ДокументРезерва = неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамКПолучению;
	
КонецФункции // ПодготовитьТаблицуТоваровКПолучению()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	//АБС ВСТАВКА №35863, 37395 НАЧАЛО 	
	Если ttk_ОбщегоНазначения.абс_НеВыполнятьДвиженияВСтатусе(СтруктураШапкиДокумента) или Отказ Тогда
		Возврат;
	КонецЕсли;	
	//\\АБС ВСТАВКА №35863, 37395 КОНЕЦ	
	
	Если СтруктураШапкиДокумента.РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	Иначе
		ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
	Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 Тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам//);
			                                                                                            ,,,,,Константы.абс_КонтрольПартийТоваровВклБлокировкуПроведения.Получить());  //АБС Коломиец 14846, 15318
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование
		   И СтруктураШапкиДокумента.ВидСкладаПолучателя <> Перечисления.ВидыСкладов.Оптовый Тогда		   
			УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            СкладОтправитель);
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
						
				ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// Если мы перемещаем в НТТ, то надо сделать приход по специальному регистру
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ И НЕ Отказ Тогда
				
				// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПеремещениюВНТТ
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПеремещениюВНТТ, СтруктТаблицДокумента);
				
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",               СкладПолучатель);
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПеремещения", Ссылка);
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
						
				ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПеремещениюВНТТ, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если Не Отказ Тогда

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
		 			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
					
			КонецЕсли;
			
		Иначе // не по ордерам

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Расход.
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
				Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
					// Контроль остатков товара
					Если Товары.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если ВозвратнаяТара.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
				
				// Контроль остатков товара
				Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда 
					Если Товары.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если ВозвратнаяТара.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Отказ Тогда
				//Бобылев А.А. 21.05.2018 СППР00-00000088
				//+++ Колесников А.С. 15.10.2018 [CHG117 / 428]
				Если НаборДвижений = Движения.ТоварыНаСкладах Тогда //и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					ТаблицаПоТоварам.Колонки.Добавить("СчетУчета");
					ТаблицаПоТаре.Колонки.Добавить("СчетУчета");
					Для каждого Элемент Из ТаблицаПоТоварам Цикл
						Элемент.СчетУчета = Элемент.СчетУчетаБУ;
					КонецЦикла;
					Для каждого Элемент Из ТаблицаПоТаре Цикл
						Элемент.СчетУчета = Элемент.СчетУчетаБУ;
					КонецЦикла;
				КонецЕсли;
				//--- Колесников А.С. 15.10.2018 [CHG117 / 428]
				//Бобылев А.А.--------------------------
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
				ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
				
				Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				Иначе
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
					Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);
					КонецЕсли;
				КонецЕсли;
													
				ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Приход.
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;
			
			//Бобылев А.А. 21.05.2018 СППР00-00000088
			Попытка
				//+++ Колесников А.С. 15.10.2018 [CHG117 / 428]
				Если НаборДвижений = Движения.ТоварыНаСкладах Тогда//и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					//+++ Колесников А.С. 05.11.2018 [CHG448 / 601]
					//Закоментировал, так как код пытался создать еще одну колонку "СчетУчета", У него не получалось добавить колонку и попадал в исключение
					//
					//ТаблицаПоТоварам.Колонки.Добавить("СчетУчета");
					//ТаблицаПоТаре.Колонки.Добавить("СчетУчета");
					//
					//Так же изменил Элемент.СчетУчетаБУ = НовыйСчетУчетаБУ так как перемещение создавала движение на одни и те же счета учета. 
					//
					Для каждого Элемент Из ТаблицаПоТоварам Цикл
						Элемент.СчетУчета = Элемент.НовыйСчетУчетаБУ;
					КонецЦикла;
					Для каждого Элемент Из ТаблицаПоТаре Цикл
						Элемент.СчетУчета = Элемент.НовыйСчетУчетаБУ;
					КонецЦикла;
					
					//--- Колесников А.С. 05.11.2018 [CHG448 / 601]

				КонецЕсли;
				//--- Колесников А.С. 15.10.2018 [CHG117 / 428]
			Исключение
			КонецПопытки;
			//Бобылев А.А.--------------------------
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
			
			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
			
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
			Иначе
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
				Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
					// ТОВАР
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						
					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Отказ, Заголовок);
						
					// ТАРА
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);

					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицыДанныхДокумента["ТаблицаПоТаре"], Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
													
			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
			
				// Контроль остатков товара
				Если ТаблицаПоТоварамРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					//приход резерва на склад-получатель
					ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТоварам);
					ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТаре);
                    Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
						СтруктТаблицДокумента = Новый Структура;
						СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
						СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
						
						ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);

						ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
						ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				    КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо поменять склад в регистре "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					// То же в приход на новый склад.
					ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
					
					ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяТабЧасти",       "Товары");
		ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
		ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
		ДопПараметры.Вставить("ИмяРеквизитаЗаказ",  "ВнутреннийЗаказ");
		ДопПараметры.Вставить("ЗаказВШапке",        ложь);
		
		ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
		ДопПараметры.Вставить("ИмяТабЧасти", "ВозвратнаяТара");
		ДопПараметры.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ТабИсходная = ТаблицаПоТаре.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)  // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ВнутреннийЗаказ.Заказчик = СкладПолучатель Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ВнутреннийЗаказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры),
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, ТаблицаПоТареИсходная,Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ТаблицаПоТоварам = УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента,ТаблицаПоТоварамИсходная, Истина);
	ТаблицаПоТоварам.Колонки.Добавить("ЗаказСписания");
	ТаблицаПоТоварам.Колонки.Добавить("ЗаказПартии");
	ТаблицаПоТоварам.Колонки.Добавить("СписыватьТолькоПоЗаказу");

	//АБС ВСТАВКА №7903 НАЧАЛО
	ТаблицаДвижений.Колонки.Добавить("абс_ЭтоТовар");	
	//\\АБС ВСТАВКА №7903 КОНЕЦ	
	
	// Удалим строки с документами резерва по ордерам
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			// Если ведется обособленный учет или материалы переданы в переработку
			// то списывать нужно только партии по указанному заказу
			//АБС НАЧАЛО Задача №08759
			//Если ТаблицаПоТоварам[Инд].ОбособленныйУчетТоваровПоЗаказамПокупателей = Истина
			//   ИЛИ ТаблицаПоТоварам[Инд].ВидОперации =Перечисления.ВидыОперацийЗаказПокупателя.Переработка
			//   Тогда
			//\\АБС КОНЕЦ Задача №08759
			
			//АБС НАЧАЛО Задача №08759
			ТаблицаПоТоварам[Инд].ЗаказПартии             = ТаблицаПоТоварам[Инд].ДокументРезерва;
			ТаблицаПоТоварам[Инд].ЗаказСписания             = ТаблицаПоТоварам[Инд].НовыйДокументРезерва;
			//ТаблицаПоТоварам[Инд].ЗаказСписания             = ?(ЗначениеЗаполнено(ТаблицаПоТоварам[Инд].НовыйДокументРезерва),ТаблицаПоТоварам[Инд].НовыйДокументРезерва,ТаблицаПоТоварам[Инд].ДокументРезерва);
			
			//КонецЕсли;
			//\\АБС КОНЕЦ Задача №08759
			
			ТаблицаПоТоварам[Инд].СписыватьТолькоПоЗаказу = Истина;
			
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	// Переименуем колонки
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоТоварам.Колонки.НовыйСчетУчетаБУ.Имя = "КорСчетБУ";
		ТаблицаПоТоварам.Колонки.НовыйПринятыеСчетУчетаБУ.Имя = "ПринятыеКорСчетБУ";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТаблицаПоТоварам.Колонки.НовыйСчетУчетаНУ.Имя = "КорСчетНУ";
		ТаблицаПоТоварам.Колонки.НовыйПринятыеСчетУчетаНУ.Имя = "ПринятыеКорСчетНУ";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварам, ТаблицаДвижений);
	
	// Если Партионный учет по складам  в упр учете
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	
	// Недостающие поля.
	НомерСтрокиРегистра = 0;
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.СчетУчетаНУ = Строка.СчетУчетаБУ;
			Строка.КорСчетНУ   = Строка.КорСчетБУ;
			Если НЕ мСчета003_01.НайтиПоЗначению(Строка.СчетУчетаБУ) = Неопределено
			 ИЛИ НЕ мСчета003_01.НайтиПоЗначению(Строка.ПринятыеСчетУчетаБУ) = Неопределено Тогда
				Строка.ОтражатьВНалоговомУчете = Ложь;
			Иначе	
			    Строка.ОтражатьВНалоговомУчете = Истина;
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если НЕ мСчета003_01.НайтиПоЗначению(Строка.СчетУчетаБУ) = Неопределено
			 ИЛИ НЕ мСчета003_01.НайтиПоЗначению(Строка.ПринятыеСчетУчетаБУ) = Неопределено Тогда
				Строка.ОтражатьВНалоговомУчете = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	Если (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция)
	  ИЛИ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам) Тогда 
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку,"ДопустимыйСтатус4");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,"ДопустимыйСтатус1");
		//АБС ВСТАВКА №7903 НАЧАЛО
		Для каждого Строка Из ТаблицаДвижений Цикл
			Если Строка.абс_ЭтоТовар Тогда
				Строка.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.Купленный;
				Строка.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Продукция;
				Строка.ДопустимыйСтатус3 = Перечисления.СтатусыПартийТоваров.НаКомиссию;
				Строка.ДопустимыйСтатус4 = Перечисления.СтатусыПартийТоваров.ВПереработку;	
			КонецЕсли;
		КонецЦикла;	
		//\\АБС ВСТАВКА №7903 КОНЕЦ     
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");
	
	// Документы с видом передачи по ордеру сразу не проводятся в партионном учете
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТаблицаПоТаре = ТаблицаПоТареИсходная.Скопировать();
	Инд=0;
	Пока Инд<ТаблицаПоТаре.Количество() Цикл
		Если ТаблицаПоТаре[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТаре.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоТаре.Колонки.НовыйСчетУчетаБУ.Имя = "КорСчетБУ";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТаблицаПоТаре.Колонки.НовыйСчетУчетаНУ.Имя = "КорСчетНУ";
	КонецЕсли;

	
	// Заполним таблицу движений.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
		
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	// Документы с видом передачи по ордеру сразу не проводятся в партионном учете
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры// ДвиженияПоРегиструСписанныеТовары

Процедура ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ",              "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ",      "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ",              "СчетУчетаНУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ",         "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйПринятыеСчетУчетаБУ", "НовыйПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаНУ",         "НовыйСчетУчетаНУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ",      "ПринятыеСчетУчетаНУ");
	СтруктураПолей.Вставить("НовыйПринятыеСчетУчетаНУ", "НовыйПринятыеСчетУчетаНУ");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейПоТареРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"               , "СчетУчетаНУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"          , "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаНУ"          , "НовыйСчетУчетаНУ");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() 
			ИЛИ Основание.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;
		ОтражатьВНалоговомУчете      = Истина;
		СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;

		Склад = Неопределено;
		#Если Клиент Тогда
			Если НЕ ВвестиЗначение(Склад, "Выберите склад отправитель", Тип("СправочникСсылка.Склады")) Тогда
				Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
			КонецЕсли;
		#Иначе
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		#КонецЕсли
		СкладОтправитель = Склад;

		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата);
		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, ВозвратнаяТара, Склад, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ЗаполнитьРозничнуюЦену();

		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)

	//АБС ВСТАВКА 130807-1503 АБС-Ч: 		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.абс_ЗаявкаНаТМЦ") Тогда
		ОтражатьВУправленческомУчете = Истина;
		мОтражатьВРегламентированномУчете = Ложь;
		Если РольДоступна("абс_СотрудникСклада") Тогда
			мОтражатьВРегламентированномУчете = Истина;
			
			ОтражатьВБухгалтерскомУчете = Истина;
			ОтражатьВНалоговомУчете 	= Истина;
		КонецЕсли;
		Дата = ТекущаяДата();
		СкладПолучатель    = Основание.СкладПолучатель;
		СкладОтправитель   = Основание.СкладОтправитель;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.ЦФО;
		абс_ЗаявкаНаТМЦ = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;
		абс_Статус  = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		
		ЗаполнитьОстаткамиТоваровПоЗаказу(Основание, Товары, Дата);		
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	//\\АБС ВСТАВКА 130807-1504 АБС-Ч:  КОНЕЦ		
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Комментарий                  = Основание.Комментарий;
		СкладПолучатель              = Неопределено;

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СкладОтправитель = Основание.СкладОрдер.Склад;
		Иначе
			СкладОтправитель = Основание.СкладОрдер;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		КонецЕсли;

		// Заполнение таб.части
		//АБС ВСТАВКА №13395 НАЧАЛО
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование и ЗначениеЗаполнено(Основание.Товары) Тогда
			//АБС ИЗМЕНЕНИЕ 49290  13.11.2014 10:21:25  Шамов
			#ЕСЛИ Клиент ТОГДА
			Ответ = Вопрос("Заполнять из табличной части ""Товары""?",РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ТабЧасть = Основание.Товары;
			Иначе	
				ТабЧасть = Основание.Оборудование;
			КонецЕсли;	
			#ИНАЧЕ
				ТабЧасть = Основание.Товары;
			#КонецЕсли
			//АБС ИЗМЕНЕНИЕ 49290 КОНЕЦ
		Иначе	
			ТабЧасть = ?(Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование, Основание.Оборудование, Основание.Товары);
		КонецЕсли;
		//\\АБС ВСТАВКА №13395 КОНЕЦ
	
		Для Каждого ТекСтрокаТовары Из ТабЧасть Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
			
			//АБС ВСТАВКА №7903 НАЧАЛО
			//Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			//++ Задача № 10513 Логинчев А.С. 16.05.2012 18:16:45
			//В ТЧ документа основания нет колонки "абс_ЭтоТовар", принадлежность определяется видом ТЧ из которой идёт загрузка
			//Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование или ТекСтрокаТовары.абс_ЭтоТовар Тогда			
			Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование  Тогда			
				НоваяСтрока.абс_ЭтоТовар = Истина;
			//-- Задача № 10513 Логинчев А.С.
			
			//\\АБС ВСТАВКА №7903 КОНЕЦ	
				//НоваяСтрока.ДокументРезерва = ТекСтрокаТовары.Заказ; //АБС_Стрельцов+ изменено: 17.10.2012
			КонецЕсли;
			
			//АБС_Стрельцов+ добавлено: 17.10.2012
			//------------------------------------
			НоваяСтрока.абс_Проект	 	= ТекСтрокаТовары.абс_Проект;
			НоваяСтрока.ДокументРезерва = ТекСтрокаТовары.Заказ;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДокументРезерва) Тогда
				НоваяСтрока.ДокументРезерва = НоваяСтрока.абс_Проект.абс_ЗаказПокупателя;
			КонецЕсли;
			//-----------------------------------
			//АБС_Стрельцов-
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЦикла;

		Для Каждого ТекСтрокаТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Номенклатура    = ТекСтрокаТара.Номенклатура;
			НоваяСтрока.Количество      = ТекСтрокаТара.Количество;
			НоваяСтрока.ДокументРезерва = ТекСтрокаТара.Заказ;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
        СкладОтправитель = Основание.Склад;
		ЗаполнитьТоварыПоОтчетуПроизводстваЗаСменуУпр(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда   //АБС Коломиец 13396+
		
		// Заполнение шапки
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Комментарий                  = Основание.Комментарий;
		СкладПолучатель              = Неопределено;

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СкладОтправитель = Основание.СкладОрдер.Склад;
		Иначе
			СкладОтправитель = Основание.СкладОрдер;
		КонецЕсли;
		
		абс_ОтветственныйБухгалтер = Основание.абс_ОтветственныйБухгалтер;
		абс_Статус  = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаТовары.СчетУчетаБУ;
			НоваяСтрока.СчетУчетаНУ = ТекСтрокаТовары.СчетУчетаНУ;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			НоваяСтрока.Качество = Справочники.Качество.Новый;
			НоваяСтрока.абс_ЭтоТовар = Истина;
			НоваяСтрока.ДокументРезерва = ТекСтрокаТовары.Заказ;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);		
		КонецЦикла;		//АБС Коломиец 13396-
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ПеремещениеТоваров.СтруктураДополнительныхДанныхФормы());
		
	Иначе
		
	    ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

		Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
			СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
			СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//+++ Колесников А.С. 12.10.2018 [CHG448 / 499]
	ПроверкаПройдена = ttk_ИнтеграцияБП30Сервер.ПроверкаПометкиУдаления(Дата,ПометкаУдаления);
	Если ПроверкаПройдена Тогда
		Отказ = Истина;	
	КонецЕсли;	
	//--- Колесников А.С. 12.10.2018 [CHG448 / 499]
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №35863 НАЧАЛО
	ttk_ОбщегоНазначения.абс_УстановитьРежимЗаписиДокумента(абс_Статус, Проведен, РежимЗаписи);
	//АБС ВСТАВКА   19.02.2014 11:44:57  Гетц. Движения не делаются, если не менялось ничего, кроме статуса
	СтруктураПараметров = Новый Структура("Ссылка, ТекущийСтатус, НовыйСтатус, ДокументОбъект, Проведен", Ссылка, Ссылка.абс_Статус, абс_Статус, ЭтотОбъект, Проведен);
	РежимЗаписи = абс_СлужебныеФункции.ПолучитьРежимЗаписиПриСменеСтатуса(СтруктураПараметров, РежимЗаписи);
	//АБС ВСТАВКА  КОНЕЦ
	//\\АБС ВСТАВКА №35863 КОНЕЦ   	
	
	СуммаДокументаРозничная = ПолучитьРозничнуюСуммуДокумента();

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ 
	 Или ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда // В этом случае ДокументРезерва должен быть пуст.

		УстановитьКачество = (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование);
        ВидОперацииОборудование = ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			//АБС ВСТАВКА №7903 НАЧАЛО
			//Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
			Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) и не СтрокаТаблицы.абс_ЭтоТовар Тогда				               
				СтрокаТаблицы.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;

			//АБС_Стрельцов+ добавлено: 17.10.2012
			//----------------------------------------------------
			//Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва)
			//	//И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
			//	И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) и не СтрокаТаблицы.абс_ЭтоТовар Тогда
			//	СтрокаТаблицы.ДокументРезерва = Неопределено;
			//КонецЕсли;
			//----------------------------------------------------
			//АБС_Стрельцов-
            //\\АБС ВСТАВКА №7903 КОНЕЦ	
			
			Если УстановитьКачество 
			   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество) Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			
		КонецЦикла;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;
	
	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		Если ВозвратнаяТара.Количество() > 0 Тогда
			ВозвратнаяТара.Очистить();
		КонецЕсли;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// АБС ВСТАВКА Согласование первичных документов
	Если ЭтоНовый() Тогда
		//+++ Колесников А.С. 05.11.2018 [CHG448 / 601]
		Если НЕ абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
			абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		КонецЕсли;	
		//--- Колесников А.С. 05.11.2018 [CHG448 / 601]
	КонецЕсли;
	// АБС ВСТАВКА Согласование первичных документов КОНЕЦ
	
	// АБС ВСТАВКА 
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не указан ответственный", Отказ);
	КонецЕсли;	
	// АБС ВСТАВКА КОНЕЦ	
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// АБС ВСТАВКА Согласование первичных документов
	Попытка
	
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусПервичногоДокументаПоРегистру(Ссылка);
		
		Если НЕ абс_Статус = СтатусПоРегистру Тогда
			ЗаписатьНовыйСтатус(абс_Статус, абс_ПричинаИзмененияСтатуса);
			
			абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомлениеППД(Ссылка, абс_Статус);			
		КонецЕсли;
		
		// АБС ВСТАВКА 20120412 Попов
		// Временно отключаем формирование задач по ППД
		Возврат;
		// АБС ВСТАВКА 20120412 Попов 
				
		// Запустим БП если он еще не запущен
		Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК ИЛИ
			 абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияПервичногоДокумента(Ссылка);	
			КонецЕсли;
			
		КонецЕсли;
		
		Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
			
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияПервичногоДокументаУточнениеБухгалтером(Ссылка);
			КонецЕсли;
			
		КонецЕсли;		
			
		// Попробуем закрыть задачу согласования
		ЗадачаСогласование = ПолучитьЗадачуПоПервичномуДокументуСогласование();
		
		Если ЗадачаСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		Если НЕ ЗадачаСогласование.Выполнена Тогда

			ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();			
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЕсли;
	
	Исключение

		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи документа: " + ОписаниеОшибки() + ".", Отказ);
		
		Возврат;
	КонецПопытки;	
	
	// АБС ВСТАВКА Согласование первичных документов КОНЕЦ	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда //абсо - заявка 9747
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ttk_ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",       "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "КурсВалютыУправленческогоУчета",   "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",     "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель",     "ВидСклада",                        "ВидСкладаОтправителя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель",      "ВидСклада",                        "ВидСкладаПолучателя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ",      "ВидЗаказа",                        "ВидВнутреннегоЗаказа");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",     "ОтражатьВРегламентированномУчете",      "ОтражатьВРегламентированномУчете");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                    , "Качество");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	
	//АБС НАЧАЛО Задача №08759
    СтруктураПолей.Вставить("НовыйДокументРезерва"             , "НовыйДокументРезерва");
 	//\\АБС КОНЕЦ Задача №08759
	
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"       , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"       	  , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"       , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВидОперации"                 ,  "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	//АБС НАЧАЛО Задача №08759
    СтруктураПолей.Вставить("НовыйДокументРезерва"             , "НовыйДокументРезерва");
 	//\\АБС КОНЕЦ Задача №08759
	
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"	, "ПринадлежностьНоменклатуры");						
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДокументРезерва.ДоговорКонтрагента");
	СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "Ссылка.СкладОтправитель.ВидСклада");
	СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "Ссылка.СкладПолучатель.ВидСклада");
	
	//АБС ВСТАВКА №7903 НАЧАЛО
	СтруктураПолей.Вставить("абс_ЭтоТовар","абс_ЭтоТовар");
	//\\АБС ВСТАВКА №7903 КОНЕЦ


	ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Количество"                  , "Количество");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"         , "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"       , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"       	  , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"       , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "Ссылка.СкладОтправитель.ВидСклада");
	СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "Ссылка.СкладПолучатель.ВидСклада");

	ДополнитьСтруктуруПолейПоТареРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ИспользоватьРегистрСвободныеОстатки = глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки"); 

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
		
		Если ИспользоватьРегистрСвободныеОстатки И 
			(Товары.Количество() <> 0 ИЛИ ВозвратнаяТара.Количество() <> 0)
			И НЕ Отказ Тогда
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
				Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
			КонецЕсли;
			Движения.Записать();
			Если Товары.Количество() <> 0 Тогда 
				//+++ Колесников А.С. 10.10.2018 [CHG117 / 428]
				//ПроверкаОстатков в регистре накопления ТоварыНаСкладах
				РегистрыНакопления.ТоварыНаСкладах.КонтрольОстатков(
				"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда   
				РегистрыНакопления.ТоварыНаСкладах.КонтрольОстатков(
				"ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				//--- Колесников А.С. 10.10.2018 [CHG117 / 428]

			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
		
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам, ТаблицаПоТаре));
	
	//АБС ВСТАВКА №13098 НАЧАЛО
	Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка
		//АБС ВСТАВКА Навценя2
			ИЛИ абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеРП_Источник
			ИЛИ абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеРП_Приемник Тогда
		//АБС ВСТАВКА  КОНЕЦ     
		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;		
	//\\АБС ВСТАВКА №13098 КОНЕЦ
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		//Реквизит СкладОтправитель - необязательный
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("СкладОтправитель");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
		
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
        Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			Отказ = Истина;
		ИначеЕсли НЕ УчетнаяПолитика.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			СтрокаСообщения = Нстр("ru = 'Ведение учета по складам в разрезе организаций отключено в учетной политике.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) И НЕ Организация.ОтражатьВРегламентированномУчете Тогда
			СтрокаСообщения = Нстр("ru = 'Организация не отражается в регламентированном учете.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроверяемыеРеквизиты.Добавить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
    Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ 
	   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	   	СтрокаСообщения = Нстр("ru = 'Перемещение с НТТ по ордерам не осуществляется.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВнутреннийЗаказ)
	   И ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
	   	СтрокаСообщения = Нстр("ru = 'Перемещение можно осуществлять только по внутреннему заказу с видом заказа на склад.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 ИЛИ  СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ)
	   И НЕ мРазрешитьНулевыеЦеныВРознице Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Цена");
	КонецЕсли;

	Если ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Качество");
	КонецЕсли;

	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
//АБС ВСТАВКА 130807-1542 АБС-Ч: 		
	абс_ЗаявкаНаТМЦ = Неопределено;
//\\АБС ВСТАВКА 130807-1542 АБС-Ч:  КОНЕЦ		
КонецПроцедуры

//АБС ВСТАВКА 130807-1542 АБС-Ч: 		

// Процедура формирует таблицу содержащую остатки товаров (неотгруженные товары) по внутреннему заказу
//
Процедура ЗаполнитьОстаткамиТоваровПоЗаказу(Заказ, ТабЧасть, Знач КонДата) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КолОстаток,
	               |	ЗаказыОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияЗаказа,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияЗаказаКоэффициент,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	ЗаказыОстатки.Проект,
	               |	ЗаказыОстатки.СерияНоменклатуры,
	               |	ЗаказыОстатки.ХарактеристикаНоменклатуры
	               |ИЗ
	               |	РегистрНакопления.абс_ЗаявкиНаОбеспечение.Остатки(&КонДата, Заказ = &Заказ) КАК ЗаказыОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыОстатки.Номенклатура,
	               |	ЗаказыОстатки.Номенклатура.СтавкаНДС,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	               |	ЗаказыОстатки.Проект,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков,
	               |	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	               |	ЗаказыОстатки.СерияНоменклатуры,
	               |	ЗаказыОстатки.ХарактеристикаНоменклатуры
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
    ЕстьЕдиница  = Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("ЕдиницаИзмерения") = Неопределено;
 	ЕстьКачество = Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("Качество") = Неопределено;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Количество = Выборка.КолОстаток;
		НоваяСтрока = ТабЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Количество;
		//если в таб части есть реквизит ЕДиницаИзмерения - заполним единицу по данным заказа и пересчитаем количество
		Если ЕстьЕдиница Тогда
			НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмеренияЗаказа;
			НоваяСтрока.Количество = Количество * Выборка.Коэффициент / Выборка.ЕдиницаИзмеренияЗаказаКоэффициент;
			НоваяСтрока.Коэффициент = Выборка.ЕдиницаИзмеренияЗаказаКоэффициент;
		КонецЕсли;
		Если ЕстьКачество Тогда
			НоваяСтрока.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		НоваяСтрока.СерияНоменклатуры	 			= Выборка.СерияНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатуры	 	= Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.абс_Проект	 	= Выборка.Проект;
		НоваяСтрока.абс_ПроектНовый	 	= Выборка.Проект;
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу()

// АБС ВСТАВКА Согласование первичных документов
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовПервичныхДокументов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ПервичныйДокумент.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.ПервичныйДокумент		= Ссылка;
	Запись.Пользователь 			= ТекПользователь;	
	Запись.СтатусДокумента			= НовыйСтатус;
	
	Запись.Комментарий 				= Комментарий;
	
	ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	
	Если НЕ ОтветственныйСотрудник = Неопределено Тогда
		Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоПервичномуДокументу(Ссылка, "абсСогласованиеПервичныхДокументов");	
	
КонецФункции

Функция ПолучитьЗадачуПоПервичномуДокументуСогласование() Экспорт
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	
	Статус = абс_Статус;
	
	Если Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеБухгалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОтказ);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК Тогда

		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеСогласованиеОФК);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда

		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
				
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
				
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеСогласованиеОФК);	
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеБухгалтером);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеБухгалтером);		
		
	КонецЕсли;
			
	Возврат абс_БизнесПроцессы.НайтиЗадачуЗЗ(БП, СпТочек ,, Ложь);

КонецФункции


Функция ПолучитьРежимЗаписиДокумента() Экспорт
	
	РежимЗаписи = Неопределено;                       	
	Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ
			ИЛИ абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отмена Тогда			
		Если Проведен Тогда                                                          			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;                     
		Иначе			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;		
	Иначе         		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	КонецЕсли;
	
	Возврат РежимЗаписи;
	
КонецФункции
// АБС ВСТАВКА Согласование первичных документов КОНЕЦ

//АБС ВСТАВКА   13.12.2013  Навценя2
Функция ЭтоПеремещениеПоПРоектам() Экспорт
	
	ПеремещениеПоПРоектам = Ложь;
	
	Для Каждого строка из Товары Цикл 
		
		Если НЕ (ЗначениеЗаполнено(строка.абс_Проект) И ЗначениеЗаполнено(строка.абс_ПроектНовый)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если строка.абс_Проект = строка.абс_ПроектНовый Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(строка.абс_Проект.абс_РуководительПроекта) 
			И ЗначениеЗаполнено(строка.абс_ПроектНовый.абс_РуководительПроекта)) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если строка.абс_Проект.абс_РуководительПроекта <> строка.абс_ПроектНовый.абс_РуководительПроекта Тогда 
			ПеремещениеПоПРоектам = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПеремещениеПоПРоектам;
	
КонецФункции

Функция ПолучитьМассивРП(РеквизитПроекта = "абс_Проект") Экспорт
	
	МассивРП = Новый Массив;
	
	Для Каждого строка из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(строка[РеквизитПроекта]) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(строка[РеквизитПроекта].абс_РуководительПроекта) Тогда 
			Продолжить;
		КонецЕсли;

		Если МассивРП.Найти(строка[РеквизитПроекта].абс_РуководительПроекта) = Неопределено Тогда 
			МассивРП.Добавить(строка[РеквизитПроекта].абс_РуководительПроекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Пользователи.Ссылка КАК Пользователь
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	Пользователи.абс_Сотрудник В(&МассивСотрудников)");
						  
	Запрос.УстановитьПараметр("МассивСотрудников", МассивРП);
	МассивПользователей = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		МассивПользователей.Добавить(Выборка.Пользователь);			
	КонецЦикла;
	
	Возврат МассивПользователей;
	
КонецФункции

//АБС ВСТАВКА  КОНЕЦ

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мСчета003_01 = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", "003.01");

мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();


