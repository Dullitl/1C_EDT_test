
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПараметрыДинамическихСписков();
	УстановитьЗначенияЛокальныхПеременных();
	УстановитьВидимостьТаблицаОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ОчиститьТекущееРаспределение() Тогда
		УстановитьЗначенияЛокальныхПеременных();
		УстановитьПараметрыДинамическихСписков();
	Иначе
		Объект.Организация = мОрганизация;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МетодРаспределенияПриИзменении(Элемент)
	
	Если ОчиститьТекущееРаспределение() Тогда
		УстановитьЗначенияЛокальныхПеременных();
		УстановитьПараметрыДинамическихСписков();
	Иначе
		Объект.МетодРаспределения = мМетодРаспределения;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если ОчиститьТекущееРаспределение() Тогда
		Объект.Дата = КонецМесяца(Объект.Дата);
		УстановитьЗначенияЛокальныхПеременных();
		УстановитьПараметрыДинамическихСписков();
	Иначе
		Объект.Дата = мПериод;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляРаспределенияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	УстановитьПараметрыДинамическихСписков();
	УстановитьВидимостьТаблицаОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.ОшибкиРаспредления.Очистить();
	
	МассивОшибок = Новый Массив;
	Если Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоНатуральнымПоказателям Тогда 
		Объект.РаспределениеПоПроектам.Загрузить(
					Документы.абс_РаспределениеРесурсовНаПроект.РаспределитьПоНатуральнымПоказателям(Объект.Организация, Объект.Дата, МассивОшибок));
	ИначеЕсли Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоОбъемуВыручки Тогда 
		Объект.РаспределениеПоПроектам.Загрузить(
					Документы.абс_РаспределениеРесурсовНаПроект.РаспределитьПоОборотамБюджета(Объект.Организация, Объект.Дата,,МассивОшибок));
	ИначеЕсли Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоПрямымЗатратам Тогда 
		Объект.РаспределениеПоПроектам.Загрузить(
					Документы.абс_РаспределениеРесурсовНаПроект.РаспределитьПоОборотамБюджета(Объект.Организация, Объект.Дата, Ложь,МассивОшибок));
	КонецЕсли;
	
	Для Каждого текстОшибки из МассивОшибок Цикл 
		стркоаТаблицыОшибок = Объект.ОшибкиРаспредления.Добавить();
		стркоаТаблицыОшибок.ОписаниеОшибки = текстОшибки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыБюджета(Команда)
	
	СтруктураПараметров = Новый Структура("Отбор", Новый Структура("Регистратор", Объект.Ссылка));
	ОткрытьФорму("РегистрНакопления.ОборотыБюджетов.ФормаСписка", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиРаспределения(Команда)
	
	МассивОшибок = Новый Массив;
	Для Каждого строка из Объект.ОшибкиРаспредления Цикл 
		МассивОшибок.Добавить(строка.ОписаниеОшибки);		
	КонецЦикла;
	
	ОткрытьФорму("Документ.абс_РаспределениеРесурсовНаПроект.Форма.ФормаОшибок", Новый Структура("МассивОшибок", МассивОшибок), ЭтаФорма); 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ


&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков()
	
	ЗатратыПоПроекту.Параметры.УстановитьЗначениеПараметра("Организация", 			Объект.Организация);
	ЗатратыПоПроекту.Параметры.УстановитьЗначениеПараметра("МетодРаспределения", 	Объект.МетодРаспределения);
	ЗатратыПоПроекту.Параметры.УстановитьЗначениеПараметра("НачалоПериода", 		НачалоМесяца(Объект.Дата));
	ЗатратыПоПроекту.Параметры.УстановитьЗначениеПараметра("КонецПериода",  		Новый Граница(КонецМесяца(Объект.Дата)));
	ЗатратыПоПроекту.Параметры.УстановитьЗначениеПараметра("Использование", 		Истина);
	
	РесурсыПоПроектам.Параметры.УстановитьЗначениеПараметра("Организация", 	Объект.Организация);
	РесурсыПоПроектам.Параметры.УстановитьЗначениеПараметра("КонецПериода", Новый Граница(КонецМесяца(Объект.Дата)));
	
	ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Организация", 	Объект.Организация);
	ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("НачалоПериода", 	НачалоМесяца(Объект.Дата));
	ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("КонецПериода",  	Новый Граница(КонецМесяца(Объект.Дата)));
    ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("МассивСценариев", ПолучитьМассивСценариевФакт());
	
	Если Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоНатуральнымПоказателям Тогда 
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Использование", 	 Ложь);
		РесурсыПоПроектам.Параметры.УстановитьЗначениеПараметра("Использование", Истина);
		Элементы.ОборотыБюджета.Видимость 	 = Ложь;
		Элементы.РесурсыПоПроектам.Видимость = Истина;
	ИначеЕсли Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоОбъемуВыручки Тогда 
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Использование", 		Истина);
		РесурсыПоПроектам.Параметры.УстановитьЗначениеПараметра("Использование", 	Ложь);
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Доходная", 			Истина);
		Элементы.ОборотыБюджета.Видимость    =	Истина;
		Элементы.РесурсыПоПроектам.Видимость = 	Ложь;
	ИначеЕсли Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоПрямымЗатратам Тогда 
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Использование", 		Истина);
		РесурсыПоПроектам.Параметры.УстановитьЗначениеПараметра("Использование", 	Ложь);
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Доходная", 			Ложь);
		Элементы.ОборотыБюджета.Видимость 	 = Истина;
		Элементы.РесурсыПоПроектам.Видимость = Ложь;
	Иначе
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Использование", 		Ложь);
		РесурсыПоПроектам.Параметры.УстановитьЗначениеПараметра("Использование", 	Ложь);
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Доходная", 			Истина);
		Элементы.ОборотыБюджета.Видимость 	 = 	Истина;
		Элементы.РесурсыПоПроектам.Видимость = 	Ложь;		
	КонецЕсли;
	
	Если Объект.РаспределениеПоПроектам.Количество() = 0 Тогда 
		ЗатратыПоПроекту.Параметры.УстановитьЗначениеПараметра("Использование", 	Ложь);
		ОборотыБюджета.Параметры.УстановитьЗначениеПараметра("Использование", 		Ложь);
		РесурсыПоПроектам.Параметры.УстановитьЗначениеПараметра("Использование", 	Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ДанныеДляРаспределения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаспределениеПоПроектам = (ТекущиеДанные.ВидРаспределения = 2);
		
	Если Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоНатуральнымПоказателям Тогда 
		УстановитьЭлементОтбора(ЗатратыПоПроекту.Отбор, "РесурсПроекта", ТекущиеДанные.РесурсПроекта, ВидСравненияКомпоновкиДанных.Равно,, Истина);		
		УстановитьЭлементОтбора(РесурсыПоПроектам.Отбор, "Ресурс", ТекущиеДанные.РесурсПроекта, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		УстановитьЭлементОтбора(ЗатратыПоПроекту.Отбор, "ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, Ложь);		
	ИначеЕсли Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоОбъемуВыручки
		ИЛИ Объект.МетодРаспределения = Перечисления.абс_МетодыРаспределенияРесурсовПоПроектам.ПоПрямымЗатратам Тогда 
		УстановитьЭлементОтбора(ЗатратыПоПроекту.Отбор, "ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, Истина);		
		УстановитьЭлементОтбора(ЗатратыПоПроекту.Отбор, "РесурсПроекта", ТекущиеДанные.РесурсПроекта, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
		//УстановитьЭлементОтбора(ОборотыБюджета.Отбор, "ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, РаспределениеПоПроектам);
		//Элементы.ОборотыБюджетаДоговорКонтрагента.Видимость = РаспределениеПоПроектам;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Функция ОчиститьТекущееРаспределение()
	
	Если Объект.РаспределениеПоПроектам.Количество() = 0 Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ИзменилисьПараметры = Ложь;
	
	Если ЗначениеЗаполнено(мОрганизация) И (мОрганизация <> Объект.Организация) Тогда 
		ИзменилисьПараметры = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(мМетодРаспределения) И (мМетодРаспределения <> Объект.МетодРаспределения) Тогда 
		ИзменилисьПараметры = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мПериод) И (КонецМесяца(мПериод) <> КонецМесяца(Объект.Дата)) Тогда 
		ИзменилисьПараметры = Истина;
	КонецЕсли;
	
	Если ИзменилисьПараметры Тогда  		
		ТекстВопроса = НСтр("ru='Текущее распределение по проектам будет очищено. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);	
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;		
		Объект.РаспределениеПоПроектам.Очистить();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьТаблицаОшибок()
	
	Если Объект.ОшибкиРаспредления.Количество() > 0 Тогда 
		//Сообщить("Возникли ошибки при распределении затрт по проектам. Для ознакомления перейдите по ссылке: ошибки распределения");
		Элементы.ГруппаОшибкиРаспределения.Видимость = Истина;
	Иначе
		Элементы.ГруппаОшибкиРаспределения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура  УстановитьЗначенияЛокальныхПеременных()
	
	мОрганизация = Объект.Организация;
	мПериод = Объект.Дата;
	мМетодРаспределения = Объект.МетодРаспределения;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСценариевФакт() 
	
	Возврат Документы.абс_РаспределениеРесурсовНаПроект.ПолучитьМассивСценариевФакт();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УСТАНОВКИ ОТБОРОВ В ДИНАМИЧЕСКОМ СПИСКЕ


// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда)
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
&НаКлиенте
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Представление = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Изменение элементов отбора
// Параметры
//  ИмяПоля - строка - имя поля компоновки
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - строка - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
&НаКлиенте
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								знач ИмяПоля = Неопределено,
								знач Представление = Неопределено,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Добавление элемента компоновки в контейнер элементов компоновки
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
&НаКлиенте
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									знач ИмяПоля,
									знач ВидСравнения,
									знач ПравоеЗначение = Неопределено,
									знач Представление  = Неопределено,
									знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

&НаКлиенте
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры







