Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет ТЧ Товары и Услуги по расчетному документу
//
Процедура ЗаполнитьПоРасчетномуДокументу(РежимДобавления) Экспорт

	Перем ВидыЦенностейПоСчетамУчета;
	
	Если Не ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;

	Если ТоварыИУслуги.Количество() > 0 И Не РежимДобавления Тогда

		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли

		ТоварыИУслуги.Очистить();

	КонецЕсли;
	
	ТаблицаДокумента = УчетНДС.ПолучитьТаблицуДокументаНДС(РасчетныйДокумент, , Ложь);
	Если ТаблицаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокумента.Колонки.Найти("СуммаБезНДСВал") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДСВал.Имя = "Сумма";
		Если ТаблицаДокумента.Колонки.Найти("СуммаНДС") = Неопределено Тогда
			Если ТаблицаДокумента.Колонки.Найти("НДСВал") <> Неопределено Тогда
				ТаблицаДокумента.Колонки.НДСВал.Имя = "СуммаНДС";
			Иначе
				ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТаблицаДокумента.Колонки.Найти("СуммаБезНДС") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Сумма";
		Если ТаблицаДокумента.Колонки.Найти("СуммаНДС") = Неопределено Тогда
			ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
		КонецЕсли;
	Иначе
		Если ТаблицаДокумента.Колонки.Найти("СуммаНДС") = Неопределено Тогда
			ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
		КонецЕсли;
	КонецЕсли;	
	
	Если ТаблицаДокумента.Колонки.Найти("СчетЗатрат") = Неопределено 
		И ТаблицаДокумента.Колонки.Найти("СчетУчетаБУ") <> Неопределено Тогда
		ТаблицаДокумента.Колонки.СчетУчетаБУ.Имя = "СчетЗатрат";		
	КонецЕсли;
	
	//АБС+
	//Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
	//	ВрТаблицаДокумента = ТаблицаДокумента.Скопировать(); 
	//	ТаблицаДокумента.Очистить();
	//	
	//	Для каждого Строка Из ВрТаблицаДокумента Цикл
	//		Если Строка.СчетФактура = Ссылка Тогда
	//			СТР = ТаблицаДокумента.Добавить(); 
	//			ЗаполнитьЗначенияСвойств(СТР,Строка);
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЕсли;
	//\\АБС-
	
	ТоварыИУслуги.Загрузить(ТаблицаДокумента);
	ТоварыИУслуги.Свернуть("ВидЦенности, Номенклатура, СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетУчетаНДС, СтавкаНДС, 
							|Коэффициент, НомерГТД, СтранаПроисхождения, Событие", "Количество, Цена, Сумма, СуммаНДС");
							
	ПересчитыватьЗаполненнуюЦену = Не (РасчетныйДокумент.Метаданные().Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И РасчетныйДокумент.СуммаВключаетНДС = СуммаВключаетНДС);
			
	Для Каждого СтрокаДокумента Из ТоварыИУслуги Цикл
		
		Если СуммаВключаетНДС Тогда
			СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + СтрокаДокумента.СуммаНДС;
		КонецЕсли;
		
		Если (СтрокаДокумента.Цена = 0 Или ПересчитыватьЗаполненнуюЦену) 
			И СтрокаДокумента.Сумма <> 0 
			Тогда
			Если СтрокаДокумента.Количество = 0 Тогда
				СтрокаДокумента.Количество = 1;
			КонецЕсли;
			СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
		КонецЕсли;
		
		СтрокаДокумента.Событие = ?(ИспользоватьДокументРасчетовКакСчетФактуру, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидЦенности) Тогда
			СтрокаДокумента.ВидЦенности = УчетНДС.ОпределитьВидЦенности(СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетЗатрат, 
																		ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПоступлениеДопРасходов"), ДоговорКонтрагента.УчетАгентскогоНДС, ДоговорКонтрагента.ВидАгентскогоДоговора, ВидыЦенностейПоСчетамУчета);
		КонецЕсли;
																	
	КонецЦикла;
	
КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	//СчетЗатрат определяется как счет учета номенклатуры, заполнение выполняется вне зависимости от установленного режима "Определять счета при проведении"
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ,Ложь,,Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	Если Не (СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(СтруктураШапкиДокумента.РасчетныйДокумент)) Тогда 
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		//АБС 4319	
		Если ТипЗнч(РасчетныйДокумент) <> Тип("ДокументСсылка.СчетФактураПолученный")  Тогда
			СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		КонецЕсли;	
		//АБС 4319	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда 
		СтруктураОбязательныхПолей.Вставить("РасчетныйДокумент");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
		СтруктураОбязательныхПолей.Вставить("КорректируемыйПериод");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

// Дополняет структуру шапки документа значениями, требуемыми для проведения
//
Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ)
	
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
	ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	//Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру И ЗначениеЗаполнено(СтруктураШапкиДокумента.РасчетныйДокумент) Тогда
	//	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(СтруктураШапкиДокумента.РасчетныйДокумент, "СчетФактураПолученный", Новый Структура("Проведен", Истина));
	//	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
	//		СтруктураШапкиДокумента.ПредъявленСчетФактура = Ложь;
	//		СтруктураШапкиДокумента.НДСПредъявленКВычету = Ложь;
	//	Иначе
	//		СтруктураШапкиДокумента.ПредъявленСчетФактура = Истина;
	//		СтруктураШапкиДокумента.НДСПредъявленКВычету = Не СчетФактура.НДСПредъявленКВычету;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Период");
	ТаблицаТоваров.Колонки.Добавить("Активность");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Поставщик");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("СчетФактура");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ТаблицаТоваров.Колонки.Добавить("КорректируемыйПериод");
	ТаблицаТоваров.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));

	Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.КодВидаОперации, "КодВидаОперации");
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаТаблицы.Поставщик = СтруктураШапкиДокумента.Контрагент;
		СтрокаТаблицы.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") 
				И СтруктураШапкиДокумента.РасчетныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс
				И СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования.Количество() <> 0 Тогда
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования[0].ДокументОснование;
			ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
				И Не СтруктураШапкиДокумента.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент.Сделка;
			Иначе
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент;
			КонецЕсли;
		Иначе
			//АБС+
			Если СтруктураШапкиДокумента.абс_СписокИзСФ Тогда
				СтрокаТаблицы.СчетФактура = СтрокаТаблицы.асб_РасчетныйДокумент;
			Иначе	
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			//АБС-
		КонецЕсли;
		СтрокаТаблицы.ЗаписьДополнительногоЛиста = СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста;
		Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = СтруктураШапкиДокумента.КорректируемыйПериод;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				СтрокаТаблицы.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
																					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
																					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
				СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
																					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
																					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			КонецЕсли;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(СтруктураШапкиДокумента.СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Событие) Тогда
			СтрокаТаблицы.Событие = ?(СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,
										Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
		КонецЕсли;
	КонецЦикла;
	
	// АБС ВСТАВКА НДС по доп. листам
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу И НЕ СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
		ТаблицаТоваров.Свернуть("Период, Активность, Организация, ВидЦенности, Поставщик, ДоговорКонтрагента, Событие, СчетФактура, СтавкаНДС, СчетУчетаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод, КодВидаОперации", "СуммаБезНДС, НДС");
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента)

	ТаблицаДокументовОплаты = РезультатЗапросаПоДокументамОплаты.Выгрузить();
	ТаблицаДокументовОплаты.Колонки.Добавить("Период");
	ТаблицаДокументовОплаты.Колонки.Добавить("Активность");
	ТаблицаДокументовОплаты.Колонки.Добавить("Организация");
	ТаблицаДокументовОплаты.Колонки.Добавить("Поставщик");
	ТаблицаДокументовОплаты.Колонки.Добавить("Событие");
	ТаблицаДокументовОплаты.Колонки.Добавить("СчетФактура");
	ТаблицаДокументовОплаты.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.Колонки.Добавить("КорректируемыйПериод");
	
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,       "Организация");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,        "Поставщик");
	Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Если ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") 
			И СтруктураШапкиДокумента.РасчетныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
			И СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования.Количество() <> 0 Тогда
			ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования[0].ДокументОснование, "СчетФактура");
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
			И Не СтруктураШапкиДокумента.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.РасчетныйДокумент.Сделка, "СчетФактура");
		Иначе
			ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.РасчетныйДокумент, "СчетФактура");
		КонецЕсли;
	Иначе
		ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "СчетФактура");
	КонецЕсли;
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста, "ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.КорректируемыйПериод, "КорректируемыйПериод");
	
	ТаблицаДокументовОплаты.Свернуть("Период, Активность, Организация, Поставщик, Событие, СчетФактура, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод");

	Возврат ТаблицаДокументовОплаты;

КонецФункции  //ПодготовитьТаблицуДокументовОплаты()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("ВидЦенности", 	"ВидЦенности");
	СтруктураПолей.Вставить("Сумма", 		"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("СчетЗатрат"  , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("Субконто1"   , "Субконто1");
	СтруктураПолей.Вставить("Субконто2"   , "Субконто2");
	СтруктураПолей.Вставить("Субконто3"   , "Субконто3");
	СтруктураПолей.Вставить("Событие"   , 	"Событие");
	//АБС+
	СтруктураПолей.Вставить("асб_РасчетныйДокумент","асб_РасчетныйДокумент");	
	//АБС-

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТоварыИУслуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// АБС ВСТАВКА в случае доп. листа закрываем НДС предъявленый 
	Если Не СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу ИЛИ (СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу И СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста) Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
	КонецЕсли;
	
	//АБС 4319
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу И ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный")  Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
		
		Если абс_СписокИзСФ Тогда
			Для н=0 по ТоварыИУслуги.Количество() - 1 Цикл
				ТаблицаПоТоварам[н].ВидЦенности = ТоварыИУслуги[н].ВидЦенности;
				ТаблицаПоТоварам[н].СуммаБезНДС = ТоварыИУслуги[н].Сумма;
				ТаблицаПоТоварам[н].СуммаБезНДСвал = ТоварыИУслуги[н].Сумма;
				ТаблицаПоТоварам[н].СуммаБУ = ТоварыИУслуги[н].Сумма;
			КонецЦикла;	
		Иначе		
			Если ТоварыИУслуги.Количество()>0 Тогда
				ТаблицаПоТоварам.ЗаполнитьЗначения(ТоварыИУслуги[0].ВидЦенности,"ВидЦенности");
				ТаблицаПоТоварам.ЗаполнитьЗначения(ТоварыИУслуги[0].Сумма,"СуммаБезНДС");
				ТаблицаПоТоварам.ЗаполнитьЗначения(ТоварыИУслуги[0].Сумма,"СуммаБезНДСвал");
				ТаблицаПоТоварам.ЗаполнитьЗначения(ТоварыИУслуги[0].Сумма,"СуммаБУ");
			КонецЕсли;		
		КонецЕсли;     		
		
	КонецЕсли;	
	//АБС 4319
	ТаблицаПоДокументамОплаты = Неопределено;
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		СтруктураПолей.Очистить();
		СтруктураПолей.Вставить("ДокументОплаты", 	"ДокументОплаты");
		СтруктураПолей.Вставить("ДатаОплаты", 		"ДатаОплаты");
		РезультатЗапросаПоДокументамОплаты = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураПолей);
		ТаблицаПоДокументамОплаты = ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры	

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ТоварыИУслуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС" + ?(СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу, "", ", Номенклатура"));

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "ДокументыОплаты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоДокументамОплаты, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты");
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ПроводкиБУ = Движения.Хозрасчетный; 
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			// Проводки по вычету в случае упрощенного учета НДС
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = СтруктураШапкиДокумента.Дата;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "НДС";

			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

			Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
			Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные) <> Неопределено Тогда 
				
				
				
				//АБС+
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", ?(ЗначениеЗаполнено(РасчетныйДокумент),РасчетныйДокумент.Ссылка,Ссылка), Истина, Заголовок);
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтрокаТаблицы.СчетФактура, Истина, Заголовок);
				//АБС-
				
				
				
			КонецЕсли;	
			Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные) <> Неопределено Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФВыданные", СтрокаТаблицы.СчетФактура, Истина, Заголовок);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);
			Проводка.Сумма       = СтрокаТаблицы.НДС;

			//АБС ВСТАВКА №7308 НАЧАЛО
			Если СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента, Истина);	
			КонецЕсли;
			//\\АБС ВСТАВКА №7308 КОНЕЦ	
				
		КонецЦикла;
	КонецЕсли;
	
	//АБС+
	Если СтруктураШапкиДокумента.абс_СписокИзСФ Тогда
		
		ТаблицаПоТоварамКнигаПокупок = ТаблицаПоТоварам.Скопировать();
		Для каждого Строка Из ТаблицаПоТоварамКнигаПокупок Цикл
			Строка.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент;
		КонецЦикла;	
			
		ИзмеренияТаблицы = "Период, Активность, Организация, ВидЦенности, Поставщик, ДоговорКонтрагента, Событие, СчетФактура, СтавкаНДС, СчетУчетаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод, Ценность,СчетУчетаЦенности";
		РесурсыТаблицы = "НДСВал,Сумма,СуммаБУ,СуммаБУБезНДС,СуммаБезНДС,СуммаБезНДСВал,СуммаВал,НДС";
		ТаблицаПоТоварамКнигаПокупок.Свернуть(ИзмеренияТаблицы, РесурсыТаблицы);		
		
	КонецЕсли;	
	//АБС-
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		// Прямая запись в книгу покупок
		ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.Выгрузить();
		
		//АБС+
		Если СтруктураШапкиДокумента.абс_СписокИзСФ Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварамКнигаПокупок, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварам, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		КонецЕсли;
		//АБС-
			
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоДокументамОплаты, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		Для Каждого СтрокаДвижения Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			
			Если Не (СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент) Тогда
				СтрокаДвижения.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(абс_Продавец) Тогда
				СтрокаДвижения.Поставщик = абс_Продавец;				
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
		Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
		Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение();
		
		// АБС ВСТАВКА списание НДС с доп. листов
		Если (СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста и ЗначениеЗаполнено(РасчетныйДокумент)) ИЛИ ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный")
			или ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") 
				и НЕ СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста
				и СтруктураШапкиДокумента.абс_СписокИзСФ Тогда
				//Работает новый механизм СПИСОК
				//Запись не требуется
			Иначе
				
				////АБС+
				//Отказ = КонтрольОстаткаПоНДСПредъявленный();   				
				//Если Отказ Тогда		
				//	Возврат;
				//КонецЕсли;
				////АБС-      				
				
				ТаблицаПредъявленногоНДС = ТаблицаПоТоварам.Скопировать();
				СформироватьДвиженияПоРегиструНДСПредъявленныйРасход(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Отказ);
			КонецЕсли;	
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли; 

	ТаблицаПредъявленногоНДС = ТаблицаПоТоварам.Скопировать();
		
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Отказ);
			
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений,ИмяРегистра,СсылкаНаДокумент)
	Если не СтруктураДвижений.Свойство(ИмяРегистра) Тогда
		СтруктураДвижений.Вставить(ИмяРегистра,РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей());
		СтруктураДвижений[ИмяРегистра].Отбор.Регистратор.Установить(СсылкаНаДокумент);
	КонецЕсли;
КонецПроцедуры


Процедура СформироватьДвиженияПоРегиструНДСПредъявленныйРасход(СтруктураШапкиДокумента, ТаблицаПреъявленногоНДС, Отказ)
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента);
	
	СсылкаНаДокумент = СтруктураШапкиДокумента.Ссылка;
	СтруктураДвижений = Новый Структура();
	ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений, "НДСПредъявленный", СсылкаНаДокумент);
	
	ТаблицаДвижений_НДСПредъявленный = СтруктураДвижений.НДСПредъявленный.ВыгрузитьКолонки();	
	
	Для Каждого СтрокаДок Из ТаблицаПреъявленногоНДС Цикл	
	
		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

		Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
			// при проведении авансовых отчетов порядок заполнения данных измерений иной
			СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
			СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
		Иначе
			
			//АБС ВСТАВКА №8935 НАЧАЛО
			Если НЕ СтруктураШапкиДокумента.Свойство("абс_Продавец") = Неопределено Тогда	
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_Продавец) Тогда
					СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.абс_Продавец;
				Иначе
					СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;
			Иначе		
				СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
			КонецЕсли;	
			//АБС ВСТАВКА №8935 КОНЕЦ
				
			Если СтруктураШапкиДокумента.абс_СписокИзСФ Тогда
				СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;	
			Иначе
				//СтрокаДвижения.СчетФактура = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижения.СчетФактура = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.РасчетныйДокумент), СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;	
			
		КонецЕсли;

		Если УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаДок.ВидЦенности) <> Неопределено
			И СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
			СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		КонецЕсли;	
		
		Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
			СтрокаДвижения.СтавкаНДС   = СтруктураШапкиДокумента.СтавкаНДС;
		Иначе
			СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
		КонецЕсли;	
			
		СтрокаДвижения.СчетУчетаНДС = СтрокаДок.СчетУчетаНДС;
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС = СтрокаДок.НДС;
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

		СтруктураДвижений.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		СтруктураДвижений.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		СтруктураДвижений.НДСПредъявленный.ДобавитьДвижение();
		СтруктураДвижений.НДСПредъявленный.Записать(Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если Не (ЗначениеЗаполнено(Основание) И ЭтотОбъект.Метаданные().Реквизиты.РасчетныйДокумент.Тип.СодержитТип(ТипЗнч(Основание))) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	Если УпрощенныйУчетНДС И Не ПрямаяЗаписьВКнигу Тогда
		ПрямаяЗаписьВКнигу = Истина;
		Если Не ФормироватьПроводки Тогда
			ФормироватьПроводки = Истина;
		КонецЕсли;			
	КонецЕсли;
	
	РасчетныйДокумент = Основание;

	//ИспользоватьДокументРасчетовКакСчетФактуру = Истина;
	
	ЗаполнитьПоРасчетномуДокументу(Ложь);
	//АБС
	ПрямаяЗаписьВКнигу =  Истина;
	ФормироватьПроводки = Истина;
	
	//АБС 4319
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный")  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК Сумма,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК СуммаНДС,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком) КАК Событие
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(, СчетФактура = &Док) КАК НДСПредъявленныйОстатки";
		Запрос.УстановитьПараметр("Док",РасчетныйДокумент);
		ТоварыИУслуги.Загрузить(Запрос.Выполнить().Выгрузить());  
	КонецЕсли;
	//АБС 4319
		 
	//АБС ВСТАВКА №7308 НАЧАЛО
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Если (РасчетныйДокумент.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
			// АБС ВСТАВКА 20120315 Фролов
			ИЛИ
			РасчетныйДокумент.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
			//\\ АБС ВСТАВКА 20120315 Фролов КОНЕЦ
			)
			и РасчетныйДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
			//Заполнение реквизитов
			ИспользоватьДокументРасчетовКакСчетФактуру = ЛОЖЬ;
			Дата                = РасчетныйДокумент.Дата + 1;
			Контрагент          = РасчетныйДокумент.СубконтоДт1;
			ДоговорКонтрагента  = РасчетныйДокумент.СубконтоДт2;
			//Заполнение табличной части
			Строка = ТоварыИУслуги.Добавить();
			Строка.Сумма     = СуммаИзСубконто(РасчетныйДокумент.СубконтоДт3);
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			
			// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
			МетаданныеДокумента = ЭтотОбъект.Метаданные();
			УчитыватьНДС     = ОбщегоНазначения.ПолучитьРеквизитШапки("УчитыватьНДС", ЭтотОбъект, МетаданныеДокумента, Истина);
			Строка.СуммаНДС  = УчетНДС.РассчитатьСуммуНДС(Строка.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
						
			Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
			Строка.Событие      = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
					Строка.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
				ИначеЕсли ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества Тогда	
			        Строка.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества;
				ИначеЕсли ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда	
			        Строка.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;	
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;		
	//\\АБС ВСТАВКА №7308 КОНЕЦ   		 
		 
КонецПроцедуры

//АБС ВСТАВКА №7308 НАЧАЛО
Функция СуммаИзСубконто(Документ)
	
	Сумма = 0;
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Сумма;
	КонецЕсли;
	                                	
	Запрос = Новый Запрос;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЕСТЬNULL(Док.СуммаДокумента, 0) КАК СуммаДокумента,
		               |	Док.ВалютаДокумента КАК ВалютаДокумента,
		               |	ТЧ.КурсВзаиморасчетов КАК КурсДокумента,
		               |	ТЧ.КратностьВзаиморасчетов КАК КратностьДокумента,
		               |	Док.СчетКонтрагента
		               |ИЗ
		               |	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТЧ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК Док
		               |		ПО ТЧ.Ссылка = Док.Ссылка
		               |ГДЕ
		               |	ТЧ.Ссылка = &Ссылка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЕСТЬNULL(Док.СуммаДокумента, 0) КАК СуммаДокумента,
		               |	Док.ВалютаДокумента КАК ВалютаДокумента,
		               |	ТЧ.КурсВзаиморасчетов КАК КурсДокумента,
		               |	ТЧ.КратностьВзаиморасчетов КАК КратностьДокумента,
		               |	Док.СчетКонтрагента
		               |ИЗ
		               |	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ТЧ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК Док
		               |		ПО ТЧ.Ссылка = Док.Ссылка
		               |ГДЕ
		               |	ТЧ.Ссылка = &Ссылка";  
	Иначе
		Сообщить("В документе основания должен быть выбран в качестве субконто 3 или ""Платежное поручение исходящее"" или ""Платежный ордер на списание денежных средств""",СтатусСообщения.Внимание);
		Возврат Сумма;
	КонецЕсли;	   
	                	
	Запрос.УстановитьПараметр("Ссылка",Документ);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Результат.СуммаДокумента, 
				Результат.ВалютаДокумента, мВалютаРегламентированногоУчета,
				Результат.КурсДокумента, 1, 
				Результат.КратностьДокумента, 1);
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

//\\АБС ВСТАВКА №7308 КОНЕЦ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты; 
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	ДокументСоздан_НО_НДС = (ЗначениеЗаполнено(РасчетныйДокумент)) и (ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));

	Если ДокументСоздан_НО_НДС Тогда
		// Проверка и дополнительная обработка не требуются
		Возврат;
	КонецЕсли;
		
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//АБС+
	Если абс_СписокИзСФ Тогда
		Отказ = ПроверкаТабличнойЧасти();
		Если Отказ Тогда
			Сообщить("Не заполнена колонка ""Документ расчетов"" в табличной части ""Товары и услуги""!",СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	Если абс_СписокИзСФ и ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Сообщить("Недопустимое сочетание галочек ""Список док. из СФ"" и ""Использовать документ расчетов как счет-фактуру""!",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	//АБС-
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ТоварыИУслуги", ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок);
		УчетНДС.СинхронизацияПроведенияУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Отказ)
		
	КонецЕсли;
	
	// АБС Фролов для проведения по оборотам бюджетов
	Движения.Хозрасчетный.Записать();

КонецПроцедуры // ОбработкаПроведения()

//АБС+
Функция ПроверкаТабличнойЧасти()
	
	Отказ = Ложь;
	
	//Контроль по заполнению табличной части
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.асб_РасчетныйДокумент КАК Документ
		|ИЗ
		|	Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги
		|ГДЕ
		|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.асб_РасчетныйДокумент";

	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Документ) Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;
		
	Возврат Отказ;
	
КонецФункции

Функция КонтрольОстаткаПоНДСПредъявленный()
	
	Отказ = Ложь;   
	
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") 
		и НЕ абс_СписокИзСФ Тогда 	
		Возврат истина;
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ";
	Если НЕ абс_СписокИзСФ Тогда
		ТекстКонтроля = ?(ИспользоватьДокументРасчетовКакСчетФактуру, "	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка.РасчетныйДокумент как асб_РасчетныйДокумент,  ", "	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка как асб_РасчетныйДокумент,  ");
		Запрос.Текст = Запрос.Текст + ТекстКонтроля;
	Иначе		
		Запрос.Текст = Запрос.Текст + "	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.асб_РасчетныйДокумент КАК асб_РасчетныйДокумент, ";
	КонецЕсли;	   
	
	Запрос.Текст = Запрос.Текст + "
	|	СУММА(ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СуммаНДС) КАК СуммаНДС,
	|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СчетУчетаНДС,
	|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.ВидЦенности
	|ПОМЕСТИТЬ ВР
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги
	|ГДЕ
	|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО ";
	
	Если НЕ абс_СписокИзСФ Тогда
    	Запрос.Текст = Запрос.Текст + ?(ИспользоватьДокументРасчетовКакСчетФактуру, "	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка.РасчетныйДокумент,  ", "	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка,  ");
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.асб_РасчетныйДокумент, ";
	КонецЕсли;	  
	
	Запрос.Текст = Запрос.Текст + "
	|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СчетУчетаНДС,
	|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.ВидЦенности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	асб_РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВР.асб_РасчетныйДокумент КАК асб_РасчетныйДокумент,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(ВР.СуммаНДС, 0)) КАК Сумма
	|ПОМЕСТИТЬ ПР
	|ИЗ
	|	ВР КАК ВР
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки КАК НДСПредъявленныйОстатки
	|		ПО ВР.асб_РасчетныйДокумент = НДСПредъявленныйОстатки.СчетФактура
	|			И ВР.СчетУчетаНДС = НДСПредъявленныйОстатки.СчетУчетаНДС
	|			И ВР.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
	|
	|СГРУППИРОВАТЬ ПО
	|	ВР.асб_РасчетныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	асб_РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПР.асб_РасчетныйДокумент,
	|	ПР.Сумма
	|ИЗ
	|	ПР КАК ПР
	|ГДЕ
	|	ПР.Сумма < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПР";
				   
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата",МоментВремени());
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Если Результат.Сумма < 0 Тогда
			Отказ = Истина;
			Сообщить("Нехватает суммы для списания по регистру ""НДСПредъявленный"", док.:"+Результат.асб_РасчетныйДокумент,СтатусСообщения.Важное);
		КонецЕсли;		
	КонецЦикла;		
	
	Возврат Отказ;
	
КонецФункции	

//АБС- 

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ТоварыИУслуги.Итог("Сумма") + ?(Не СуммаВключаетНДС, ТоварыИУслуги.Итог("СуммаНДС"), 0);
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	Если Не ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
		
		УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
		
	КонецЕсли;
		
	Если Не ПрямаяЗаписьВКнигу И ФормироватьПроводки Тогда
		ФормироватьПроводки = Ложь;
	КонецЕсли;

	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью


Процедура ОбработкаУдаленияПроведения(Отказ)

	УчетНДС.СинхронизацияПроведенияУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Отказ);
КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

