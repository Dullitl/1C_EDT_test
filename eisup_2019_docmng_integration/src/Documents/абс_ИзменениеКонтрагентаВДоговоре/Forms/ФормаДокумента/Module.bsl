

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мСтатус = Объект.Статус;
	мСтарыйСтатус = Объект.Статус;
	ЭтоНовый = Параметры.Ключ.Пустая();
	ЗаполнитьСписокДоступныхСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если мСтарыйСтатус <> Объект.Статус ИЛИ ЭтоНовый Тогда
		СтрокаПричиныИзмененияСтатуса = "";
		
		Если НЕ ЭтоНовый Тогда
			СтрокаПричиныИзмененияСтатуса = "";
		Иначе	
			СтрокаПричиныИзмененияСтатуса = "Ввод нового документа";
		КонецЕсли;
		
		
		мСтарыйСтатус = Объект.Статус;	
		ЭтоНовый = Ложь;
		
		ЗаписатьСтатусВРегистр(Объект.Ссылка, Объект.Статус, СтрокаПричиныИзмененияСтатуса);
		
	КонецЕсли;
	
	ЗаполнитьСписокДоступныхСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Статус = Перечисления.абс_СтатусыИзмененияКонтрагентаВДоговоре.Завершен Тогда 	
		Для Каждого элемент Из Элементы Цикл 
			
			Если НЕ (элемент.Имя = "ГруппаШапка" ИЛИ элемент.Имя = "ГруппаШапкаПравая" ИЛИ  элемент.Имя = "Статус" 
				ИЛИ ТипЗнч(элемент) = тип("КнопкаКоманднойПанели") ИЛИ ТипЗнч(элемент) = тип("КнопкаФормы")) Тогда
				элемент.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			//Если ТипЗнч(элемент) = тип("КнопкаКоманднойПанели") Тогда
			//	Если элемент.Имя = "ЗаполнитьОстаткиПоВзаиморасчетам" Тогда
			//		элемент.Доступность = Ложь;
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ


&НаКлиенте
Процедура СписокДоговоровПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СписокДоговоров.ТекущиеДанные;
	ОчиститьСтрокиВзаиорасчетовПоДоговору(ТекущиеДанные.Договор);

КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровДоговорОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокДоговоров.ТекущиеДанные;
	ОчиститьСтрокиВзаиорасчетовПоДоговору(ТекущиеДанные.Договор);
	УстановитьОтборПоДоговору(ТекущиеДанные.Договор);

КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровДоговорОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда 
		ТекущиеДанные = Элементы.СписокДоговоров.ТекущиеДанные;
		ОчиститьСтрокиВзаиорасчетовПоДоговору(ТекущиеДанные.Договор);
		УстановитьОтборПоДоговору(ТекущиеДанные.Договор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (Объект.Контрагент <> ВыбранноеЗначение) И (ЗначениеЗаполнено(Объект.Контрагент)) И (Объект.СписокДоговоров.Количество() > 0) Тогда 	
		
		Ответ = Вопрос("Изменился ранее выбранный контрагент, таблица договоров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВыбранноеЗначение = Объект.Контрагент;
			Возврат;
		КонецЕсли; 
	
		Объект.СписокДоговоров.Очистить();
		Объект.ВзаиморасчетыУпр.Очистить();
		Объект.ВзаиморасчетыРегл.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.СписокДоговоров.ТекущиеДанные;
	
	Если (ТекущиеДанные.Договор <> ВыбранноеЗначение) И ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда 		
		ОчиститьСтрокиВзаиорасчетовПоДоговору(ТекущиеДанные.Договор)		
	КонецЕсли;
	
	УстановитьОтборПоДоговору(ТекущиеДанные.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
		
	Если (мСтатус = Перечисления.абс_СтатусыИзмененияКонтрагентаВДоговоре.Завершен) И (мСтарыйСтатус <> мСтатус) Тогда
		Если НЕ ПроверитьАктуальностьЗаполненияВзаиморасчетовНаСервере() Тогда
			мСтатус = Объект.Статус;
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не совпаают остатки по взаиморасчетам с данными документа. Перезаполните остатки по взаиморасчетам по кнопке ""Заполнить остатки по взаиморасчетам""");	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСтатус) Тогда 
		Объект.Статус = мСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокДоговоров.ТекущиеДанные;
	
	ОпределитьВестиПоДокументамРасчетов(ТекущиеДанные);
	ПолучитьОстаткиПоВзаиморасчетамУпр(ТекущиеДанные.Договор);
	ПолучитьОстаткиПоВзаиморасчетамРегл(ТекущиеДанные.Договор);
	
	УстановитьОтборПоДоговору(ТекущиеДанные.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровНовыйДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокДоговоров.ТекущиеДанные;
	
	ОпределитьВестиПоДокументамРасчетов(ТекущиеДанные);

	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокДоговоров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоДоговору(ТекущиеДанные.Договор);
		
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура Файлы(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		Ответ = Вопрос("Для выполнения данной операции необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Объект.Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Объект.Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Объект.Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусов(Команда)
	
	ОткрытьФорму("РегистрСведений.абс_ИсторияСтатусовИзменениеКонтрагентаВДоговоре.ФормаСписка", Новый Структура("Документ", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиБух(Команда)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Объект.КорректировкаДолга);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткиПоВзаиморасчетам(Команда)
	
	Для Каждого строка из Объект.СписокДоговоров Цикл 
		ПолучитьОстаткиПоВзаиморасчетамУпр(строка.Договор);
		ПолучитьОстаткиПоВзаиморасчетамРегл(строка.Договор);	
	КонецЦикла;
	
КонецПроцедуры


 ////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ КЛИЕНТСКИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОпределитьВестиПоДокументамРасчетов(ТекущиеДанные)
		
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НовыйДоговор) Тогда
		ТекущиеДанные.ВестиПоДокументамРасчетов = ТекущиеДанные.НовыйДоговор.ВестиПоДокументамРасчетовСКонтрагентом;	
	ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.Договор)) И (НЕ ЗначениеЗаполнено(ТекущиеДанные.НовыйДоговор)) Тогда 
		ТекущиеДанные.ВестиПоДокументамРасчетов = ТекущиеДанные.Договор.ВестиПоДокументамРасчетовСКонтрагентом;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиВзаиорасчетовПоДоговору(Договор)
	
	МассивСтрокПоДоговору = Объект.ВзаиморасчетыРегл.НайтиСтроки(Новый Структура("Договор", Договор));
	Для Каждого строка из МассивСтрокПоДоговору Цикл 
		Объект.ВзаиморасчетыРегл.Удалить(строка);
	КонецЦикла;
	
	МассивСтрокПоДоговору = Объект.ВзаиморасчетыУпр.НайтиСтроки(Новый Структура("Договор", Договор));	
	Для Каждого строка из МассивСтрокПоДоговору Цикл 
		Объект.ВзаиморасчетыУпр.Удалить(строка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоДоговору(Договор)
	
	ОтборСтрок = Новый ФиксированнаяСтруктура("Договор", Договор);
	Элементы.ВзаиморасчетыРегл.ОтборСтрок 	= ОтборСтрок; 
	Элементы.Взаиморасчеты.ОтборСтрок 		= ОтборСтрок;
	
КонецПроцедуры

&НаКлиенте
Функция ВвестиСтрокуНаКлиенте()
	
	СтрокаВвода = "";
	ВвестиСтроку(СтрокаВвода,"Введите причину изменения статуса",,Истина);
	Возврат СтрокаВвода;
	
КонецФункции

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ДоступнаРольИсполнителя(Роль, Организация)
  
  	РольДоступнаПользователю = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиИИсполнители.Роль
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Исполнитель = &Исполнитель
		|	И РолиИИсполнители.Роль = &Роль
		|	И ВЫБОР
		|			КОГДА &ДЗО
		|				ТОГДА РолиИИсполнители.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";

	Запрос.УстановитьПараметр("Исполнитель", глЗначениеПеременной("глТекущийПользователь"));
	
	Если Роль = Справочники.РолиИсполнителей.ОтветственныйОСДЗО и ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("ДЗО",Истина);
	Иначе
		Запрос.УстановитьПараметр("ДЗО",Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Роль",Роль);

	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();

	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	РольДоступнаПользователю = Истина;
	//КонецЦикла;
	//
	//Возврат РольДоступнаПользователю;
	 
КонецФункции 

&НаСервере
Процедура ЗаполнитьСписокДоступныхСтатусов()
	
	Статус = Объект.Статус;
	Статусы = Перечисления.абс_СтатусыИзмененияКонтрагентаВДоговоре;
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Статус);
	РольСогласованиеБухгалетром = ДоступнаРольИсполнителя(Справочники.РолиИсполнителей.СогласованиеБухгалтеромППД, Объект.Организация); 
	
	Если НЕ Параметры.Ключ.Пустая() Тогда	
		
		Если Статус = Статусы.Подготовка Тогда
			МассивСтатусов.Добавить(Статусы.ОбработкаБухгалтерои);
		КонецЕсли;
		
		Если (Статус = Статусы.ОбработкаБухгалтерои) И РольСогласованиеБухгалетром Тогда
			МассивСтатусов.Добавить(Статусы.Завершен);
			МассивСтатусов.Добавить(Статусы.Отказ);
		КонецЕсли;

	КонецЕсли;
	
	Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(МассивСтатусов);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОстаткиПоВзаиморасчетамУпр(Договор)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РегистрРассчетов.ДоговорКонтрагента КАК Договор,
	                      |	РегистрРассчетов.Документ,
	                      |	РегистрРассчетов.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	                      |	РегистрРассчетов.СуммаРегОстаток КАК СуммаРег,
	                      |	РегистрРассчетов.СчетОплаты,
	                      |	РегистрРассчетов.Сделка,
	                      |	РегистрРассчетов.ДатаОплаты
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
	                      |			&Период,
	                      |			ДоговорКонтрагента = &Договор
	                      |				И Контрагент = &Контрагент
	                      |				И Организация = &Организация) КАК РегистрРассчетов");
		
	Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации",  "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации"); 	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Договор", 		Договор);
	Запрос.УстановитьПараметр("Контрагент", 	Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Период", 		Новый Граница(Объект.Дата, ВидГраницы.Исключая));
						  
	МассивСтрокПоДоговору = Объект.ВзаиморасчетыУпр.НайтиСтроки(Новый Структура("Договор", Договор));
	
	Для Каждого строка из МассивСтрокПоДоговору Цикл 
		Объект.ВзаиморасчетыУпр.Удалить(строка);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(Объект.ВзаиморасчетыУпр.Добавить(), Выборка);	
	КонецЦикла;
		
КонецФункции

&НаСервере
Функция ПолучитьОстаткиПоВзаиморасчетамРегл(Договор)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ХозрасчетныйОстатки.Счет КАК СчетОплаты,
	                      |	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	                      |	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаВзаиморасчетов,
	                      |	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	                      |	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
	                      |ИЗ
	                      |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	                      |			&Период,
	                      |			,
	                      |			&МассивСубконто,
	                      |			Организация = &Организация
	                      |				И Субконто2 = &Договор) КАК ХозрасчетныйОстатки");
						  
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("Договор", 			Договор);
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("МассивСубконто", 	МассивСубконто);
	Запрос.УстановитьПараметр("Период", 			Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	
	МассивСтрокПоДоговору = Объект.ВзаиморасчетыРегл.НайтиСтроки(Новый Структура("Договор", Договор));
	
	Для Каждого строка из МассивСтрокПоДоговору Цикл 
		Объект.ВзаиморасчетыРегл.Удалить(строка);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(Объект.ВзаиморасчетыРегл.Добавить(), Выборка);	
	КонецЦикла;
		
КонецФункции

&НаСервере
Функция ПроверитьАктуальностьЗаполненияВзаиморасчетовНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПроверитьАктуальностьЗаполненияВзаиморасчетов();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьСтатусВРегистр(Ссылка, Статус, СтрокаПричиныИзмененияСтатуса)
		
	НаборЗаписей = РегистрыСведений.абс_ИсторияСтатусовИзменениеКонтрагентаВДоговоре.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период               = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запись.Документ				= Ссылка;
	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.Статус 		   		= Статус;
	Запись.ВнутреннийНомер      = Запись.Исполнитель.абс_ВнутреннийНомер;
	
	Запись.Комментарий 			= СтрокаПричиныИзмененияСтатуса;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

