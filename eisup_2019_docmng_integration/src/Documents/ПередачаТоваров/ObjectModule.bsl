Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт;		// (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт;		// (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт;		// (Регл)

Перем мУчетнаяПолитика;						// (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мЕстьЗаказ;

Перем мИспользоватьТару Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ15()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПередачаТоваров.Номер КАК Номер,
	|	ПередачаТоваров.Дата КАК ДатаСоставления,
	|	ПередачаТоваров.Дата КАК ДатаДокумента,
	|	ПередачаТоваров.Организация,
	|	ПередачаТоваров.Организация КАК ЮрФизЛицо,
	|	ПередачаТоваров.Организация КАК Руководители,
	|	ПередачаТоваров.Склад КАК Склад,
	|	ПередачаТоваров.Склад.Наименование КАК СкладНаименование,
	|	ПередачаТоваров.Контрагент.Код КАК КонтрагентКод,
	|	ПередачаТоваров.Контрагент КАК Контрагент,
	|	ПередачаТоваров.ВалютаДокумента,
	|	ПередачаТоваров.КурсВзаиморасчетов КАК Курс,
	|	ПередачаТоваров.КратностьВзаиморасчетов КАК Кратность,
	|	ПередачаТоваров.ДоговорКонтрагента КАК Основание
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс", ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерТабличнойЧасти,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "  КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия
	|ИЗ (
	|	ВЫБРАТЬ
	|		0 КАК НомерТабличнойЧасти,
	|		МАКСИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.ЕдиницаИзмерения,
	|		СУММА(ПередачаТоваров.Количество) КАК КоличествоПринято,
	|		ПередачаТоваров.Цена * &Курс / &Кратность КАК Цена,
	|		СУММА(ПередачаТоваров.Сумма * &Курс / &Кратность) КАК Стоимость,
	|		ПередачаТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПередачаТоваров.СерияНоменклатуры КАК Серия
	|	ИЗ
	|		Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|	ГДЕ
	|		ПередачаТоваров.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.ЕдиницаИзмерения,
	|		ПередачаТоваров.ХарактеристикаНоменклатуры,
	|		ПередачаТоваров.СерияНоменклатуры,
	|		ПередачаТоваров.Цена
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		1 КАК НомерТабличнойЧасти,
	|		МАКСИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		СУММА(ПередачаТоваров.Количество) КАК КоличествоПринято,
	|		ПередачаТоваров.Цена * &Курс / &Кратность КАК Цена,
	|		СУММА(ПередачаТоваров.Сумма * &Курс / &Кратность) КАК Стоимость,
	|		Неопределено КАК Характеристика,
	|		Неопределено КАК Серия
	|	ИЗ
	|		Документ.ПередачаТоваров.ВозвратнаяТара КАК ПередачаТоваров
	|	ГДЕ
	|		ПередачаТоваров.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Цена
	|) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти ВОЗР, 
	|	ВложенныйЗапрос.НомерСтроки ВОЗР
	|";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("М15");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_М15";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.КонтрагентНаименование = ПредставлениеКонтрагента;
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	НомерСтраницы   = 1;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС    = 0;
	ИтогоВсегоСНДС   = 0;
	Ном              = 0;

	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;		
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
			НомерСтраницы	= НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ВсегоСНДС = ВыборкаСтрокТовары.Стоимость;

		Количество 		= ВыборкаСтрокТовары.КоличествоПринято;
		Цена            = ?(Количество <> 0, ВсегоСНДС / Количество, 0);

		ОбластьМакета.Параметры.Количество 		  = Количество;
		ОбластьМакета.Параметры.СуммаСНДС         = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаБезНДС       = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаНДС          = 0;
		ОбластьМакета.Параметры.Цена              = Цена;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) 
			+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
			+ ?(ВыборкаСтрокТовары.НомерТабличнойЧасти = 1, " (возвратная тара)", "");

		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьПодвала.Параметры.Заполнить(Шапка);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьПодвала.Параметры.ФИОРуководителя   = Руководитель;
	ОбластьПодвала.Параметры.ФИОГлавБухгалтера = Бухгалтер;
	
	ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьПодвала.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоВсегоСНДС, мВалютаРегламентированногоУчета);

	ТабДокумент.Вывести(ОбластьПодвала);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьМ15()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12()

	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	Организация КАК ЮрФизЛицо,
	|	Организация КАК Поставщик,
	|	Организация КАК Контрагент,
	|	Организация КАК Руководители,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	АдресДоставки КАК АдресДоставки,
	|	Контрагент КАК Покупатель,
	|	Контрагент КАК Плательщик,
	|	ДоговорКонтрагента.Представление  КАК Основание,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|
	|ГДЕ
	|	ПередачаТоваров.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов И Не ВалютаДокумента.Пустая() Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", ЭтотОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерТабличнойЧасти,
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА 
	|		ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|	ИНАЧЕ 
	|		ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                КАК Сумма,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
	|ИЗ (
	|	ВЫБРАТЬ
	|		0 КАК НомерТабличнойЧасти,
	|		МИНИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Коэффициент,
	|		ПередачаТоваров.ЕдиницаИзмерения,
	|		ПередачаТоваров.ЕдиницаИзмеренияМест,
	|		ПередачаТоваров.ЕдиницаИзмеренияМест.Коэффициент КАК КоэффициентМест,
	|		ПередачаТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПередачаТоваров.СерияНоменклатуры КАК Серия,
	|		ПередачаТоваров.Цена * &Курс / &Кратность КАК Цена,
	|		СУММА(ПередачаТоваров.Количество) КАК Количество,
	|		СУММА(ПередачаТоваров.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПередачаТоваров.Сумма * &Курс / &Кратность) КАК Сумма
	|	ИЗ
	|		Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|	ГДЕ
	|		ПередачаТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Коэффициент,
	|		ПередачаТоваров.ЕдиницаИзмерения,
	|		ПередачаТоваров.ЕдиницаИзмеренияМест,
	|		ПередачаТоваров.ХарактеристикаНоменклатуры,
	|		ПередачаТоваров.СерияНоменклатуры,
	|		ПередачаТоваров.Цена
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		1 КАК НомерТабличнойЧасти,
	|		МИНИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|		ПередачаТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмеренияМест,
	|		0 КАК КоэффициентМест,
	|		Неопределено КАК Характеристика,
	|		Неопределено КАК Серия,
	|		ПередачаТоваров.Цена * &Курс / &Кратность КАК Цена,
	|		СУММА(ПередачаТоваров.Количество) КАК Количество,
	|		0 КАК КоличествоМест,
	|		СУММА(ПередачаТоваров.Сумма * &Курс / &Кратность) КАК Сумма
	|	ИЗ
	|		Документ.ПередачаТоваров.ВозвратнаяТара КАК ПередачаТоваров
	|	ГДЕ
	|		ПередачаТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Цена
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО 
	|	НомерТабличнойЧасти ВОЗР, НомерСтроки ВОЗР
	|
	|";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;

	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;

	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ОбластьМакета.Параметры.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Шапка.АдресДоставки);
	Иначе
		ОбластьМакета.Параметры.АдресДоставки = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
	КонецЕсли;

	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	
	ОбластьМакета.Параметры.Основание = Шапка.Основание;

	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО       = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер        = "";
	ОбластьМакета.Параметры.ОснованиеДата         = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок <= 2 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			ИтогоНДСНаСтранице         = 0;
			ИтогоСуммаСНДСНаСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование) 
			+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
			+ ?(ВыборкаСтрок.НомерТабличнойЧасти = 1, " (возвратная тара)", "");

		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;

		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = ВыборкаСтрок.Сумма;
		СуммаНДС    = 0;
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = 0;
		ОбластьМакета.Параметры.СтавкаНДС   = "";
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакета.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя   = Руководитель;
	ОбластьМакета.Параметры.ФИОГлавБухгалтера = Бухгалтер;

	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " +ЕдиницаИзмеренияВеса.Наименование + ".";
	КонецЕсли;

	Если ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");

	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	ОбработкаПечати.ПунктРазгрузки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки);

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "М15" Тогда
		
		// Унифицированная форма М-15 (накладная).
		ТабДокумент = ПечатьМ15();
		
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		ТабДокумент = ПечатьТОРГ12();
		
	ИначеЕсли ИмяМакета = "ТТН_1Т" Тогда
		ТабДокумент = ПечатьТТН();

	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда

		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("М15", "М-15 (Накладная)");
	СтруктураМакетов.Вставить("ТОРГ12", "ТОРГ-12 (Товарная накладная)");
	СтруктураМакетов.Вставить("ТТН_1Т", "1-Т (Товарно-транспортная накладная)");
	СтруктураМакетов.Вставить( "ТранспУпаковки",  "Штрихкоды транспортных упаковок");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// АБС Вставка 58946
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	Если ВидОперации <> Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
		абс_Оборудование.Очистить();
	Иначе
		Товары.Очистить();
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()
//\\ АБС Вставка 58946


// Процедура выполняет заполниение табличной части непереданными ТМЦ по заказу.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт

	Запрос = Новый Запрос;
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		Запрос.УстановитьПараметр("Сделка",             Заказ);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстатокПоЗаказу,
		|	0 КАК Цена,
		|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
		|ИЗ
		|	(ВЫБРАТЬ
		|		Док.Номенклатура КАК Номенклатура,
		|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Док.Количество КАК КоличествоОстаток
		|	ИЗ
		|		Документ.ЗаказПокупателя.Товары КАК Док
		|	ГДЕ
		|		Док.Ссылка = &Сделка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаЗаказаПокупателя.Номенклатура,
		|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения,
		|		КорректировкаЗаказаПокупателя.Количество
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателя
		|	ГДЕ
		|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &Сделка) КАК ВложенныйЗапрос
		|ГДЕ
		|	(НЕ ВложенныйЗапрос.Номенклатура.Услуга)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Коэффициент,
		|	ВложенныйЗапрос.Номенклатура.СтавкаНДС
		|ИТОГИ
		|	СУММА(КоличествоОстатокПоЗаказу)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";

	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
		Запрос.УстановитьПараметр("Договор",            ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Товар",              Перечисления.ТоварТара.Товар);
		Запрос.УстановитьПараметр("Сделка",             Заказ);
		Запрос.УстановитьПараметр("ВидОперПереработка", Перечисления.ВидыОперацийЗаказПокупателя.Переработка);
		Запрос.УстановитьПараметр("ПустСтавкаНДС",      Перечисления.СтавкиНДС.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТипЦен",             ТипЦен);
		Запрос.УстановитьПараметр("ПустойТипЦен",       Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОстатков", 		ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура                                     КАК Номенклатура,
		|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
		|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	Остатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
		|	Остатки.Цена,
		|	Остатки.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
		|	СУММА(Остатки.КоличествоОстаток)                         КАК КоличествоОстатокПоЗаказу,
		|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
		|       Остатки.Номенклатура.ЕдиницаХраненияОстатков
		|   ИНАЧЕ
		|       ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
		|           Остатки.Номенклатура.ЕдиницаХраненияОстатков
		|       ИНАЧЕ
		|           ЦеныНоменклатуры.ЕдиницаИзмерения 
		|       КОНЕЦ
		|   КОНЕЦ)                                                   КАК ЕдиницаИзмерения,
		|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
		|       Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|   ИНАЧЕ
		|       ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
		|           Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|       ИНАЧЕ
		|           ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент 
		|       КОНЕЦ
		|   КОНЕЦ)                                                   КАК Коэффициент
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор 
		|                                                И ЗаказПокупателя = &Сделка
		|                                                И СтатусПартии = &СтатусПартии) КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
		|	ПО 
		|		Остатки.Номенклатура 				 = ЦеныНоменклатуры.Номенклатура
		|   	И Остатки.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
		|
		|ГДЕ 
		|   НЕ Остатки.Номенклатура.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.Цена
		|
		|ИТОГИ СУММА(КоличествоОстатокПоЗаказу) ПО Номенклатура, ХарактеристикаНоменклатуры
		|";

	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
		
	Выборка = РезультатЗапроса.Выбрать();
		
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
		
	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			Продолжить;
		КонецЕсли;

		КолвоСпис = Выборка.КоличествоОстатокПоЗаказу;
			
		Если КолвоСпис <= 0 Тогда
			Продолжить;
		КонецЕсли;

		// АБС Вставка 58946
		Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
			СтрокаТабличнойЧасти = абс_Оборудование.Добавить();	
		Иначе
			СтрокаТабличнойЧасти = Товары.Добавить();
		КонецЕсли;	
		//\\ АБС Вставка 58946
		
		СтрокаТабличнойЧасти.Количество = КолвоСпис;
		СтрокаТабличнойЧасти.Номенклатура     		= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      		= Выборка.Коэффициент;
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
										Заказ.ВалютаДокумента, ВалютаДокумента,
										ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
										ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Заказ.СуммаВключаетНДС,
										Ложь,
										Ложь,
										УчетНДС.ПолучитьСтавкуНДС(0));
		СтрокаТабличнойЧасти.Сумма = Цена * СтрокаТабличнойЧасти.Количество;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки.
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре", 			СчетаУчета.СчетУчетаТарыПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаДоходовПоТареБУ",			СчетаУчета.СчетУчетаДоходовПоТареБУ);
		СтруктураСчетов.Вставить("СчетУчетаРасходовПоТареБУ",			СчетаУчета.СчетУчетаРасходовПоТареБУ);
		СтруктураСчетов.Вставить("СтатьяПрочихДоходовРасходовПоТаре",	СчетаУчета.СтатьяПрочихДоходовРасходовПоТаре);
		
		Если ОтражатьВНалоговомУчете Тогда
			СтруктураСчетов.Вставить("СчетУчетаДоходовПоТареНУ",		СчетаУчета.СчетУчетаДоходовПоТареНУ);
			СтруктураСчетов.Вставить("СчетУчетаРасходовПоТареНУ",		СчетаУчета.СчетУчетаРасходовПоТареНУ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
// Вызов данной процедуры происходит извне. Например из обработки "табличных частей товары".
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ основание
//
Процедура ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(ДокументОснование)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияМест,
	|	Товары.Коэффициент,
	|	Товары.Количество,
	|	Товары.КоличествоМест,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СерияНоменклатуры,
	|	Товары.Склад,
	|	Товары.СчетУчетаБУ,
	|	Товары.СчетУчетаНУ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование 
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) 
	|		ИЛИ Товары.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезЗапроса = Запрос.Выполнить();

	Выборка = РезЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Качество = Справочники.Качество.Новый;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг()

// Процедура выполняет заполнение табличной части "Возвратная тара" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ основание
//
Процедура ЗаполнитьТаруПоДокументуПоступлениеТоваровУслуг(ДокументОснование)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Тара.Номенклатура,
	|	Тара.Количество,
	|	Тара.Склад,
	|	Тара.СчетУчетаБУ,
	|	Тара.СчетУчетаНУ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Тара
	|
	|ГДЕ
	|	Тара.Ссылка = &ДокументОснование 
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) 
	|		ИЛИ Тара.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Тара.НомерСтроки
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезЗапроса = Запрос.Выполнить();

	Выборка = РезЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ВозвратнаяТара.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма;

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДС",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма;

		Сумма = СтрокаТаблицы.СуммаБезНДС;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС;


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		Сумма = СтрокаТаблицы.СуммаБезНДС;

		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = 0;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = 0;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                    СтруктураШапкиДокумента.КурсДокумента, 
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента)
	
	// Сумма для проводки на залоговую стоимость тары
	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Сумма = СтрокаТаблицы.Сумма;

		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "Товары.СчетУчетаБУ, Товары.СчетПередачиБУ, ВозвратнаяТара.СчетУчетаБУ";
	мСтрокаРеквизитыНалУчета = "Товары.СчетУчетаНУ, Товары.СчетПередачиНУ, ВозвратнаяТара.СчетУчетаНУ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты, СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		Реквизиты = Реквизиты + ", СчетУчетаРасчетовПоТаре"; 
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Цена", "Цена");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", 	  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ",    "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетПередачиБУ", "СчетПередачиБУ");
	СтруктураПолей.Вставить("СчетПередачиНУ", "СчетПередачиНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Цена", "Цена");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()

// Процедура выполняет проверку документа на корректность заполнения
//  Параметры:
//		Заголовок - заголовок докуумента при проведении
//		Отказ     - флаг отказа от проведения документа
//		СтруктураШапкиДокумента - структура с данными шапки документа
//
Процедура ПроверкаРеквизитов(Заголовок, Отказ, СтруктураШапкиДокумента)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Создать списки реквизитов для проверки
	//АБС Изменение 58946
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
		РеквизитыШапки   = "Организация, Контрагент, Склад, ВидПередачи";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОтКонтрагента Тогда   //АБС Коломиец 16099
		РеквизитыШапки   = "Организация, Контрагент, ДоговорКонтрагента, ВидПередачи, абс_КонтрагентОт, абс_ДоговорКонтрагентаОт";		
	Иначе
		РеквизитыШапки   = "Организация, Контрагент, ДоговорКонтрагента, Склад, ВидПередачи";
	КонецЕсли;
	
	//абсо //провели документы без указания, теперь не проводиться "Поступление из переработки"
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
		или ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
		РеквизитыШапки   = РеквизитыШапки + ", абс_ЦФО, абс_НазначениеПлатежа";
	КонецЕсли; 
	
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки, СтруктураШапкиДокумента);
	
	РеквизитыТабПрод = "Номенклатура, Количество, ЕдиницаИзмерения";
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда
		РеквизитыТабПрод = РеквизитыТабПрод + ", Качество";
	КонецЕсли;
	
	РеквизитыТабТара = "Номенклатура, Количество";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПрод, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Товары");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабТара, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ВозвратнаяТара");
	
	СтруктураОбязательныхПолей = Новый Структура(РеквизитыШапки);
	
	// Заказ должен быть заполнен, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		СтруктураОбязательныхПолей.Вставить("Заказ",
			"По выбранному договору установлен способ ведения взаиморасчетов ""По заказам""!
			|Заполните поле ""Заказ""!");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		СтруктураОбязательныхПолей.Вставить("Заказ");
	КонецЕсли;
			
	// Выполнить проверку 
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,                   СтруктураОбязательныхПолей,   	   Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",         Новый Структура(РеквизитыТабПрод), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", Новый Структура(РеквизитыТабТара), Отказ, Заголовок);
	
	// Прочие проверки
	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = РезультатЗапросаПоТаре.Выгрузить();

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", , Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Функция возвращает структуру с данными шапки документа, дополненными
// параметрами договора, валютами взаиморасчетов и курсами валют
//
Функция ПолучитьДанныеДокумента(Заголовок, Отказ)
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ttk_ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Получим данные документа
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                   , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Заказ"                 , "ВидОперации"                   , "ЗаказВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                     , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"  , "ВестиПартионныйУчетПоСкладам");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	Возврат УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецФункции // ПолучитьДанныеДокумента()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
           										  
	//АБС Коломиец 16099+
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОтКонтрагента Тогда
		абс_ДвиженияПоРегиструПереданныеТоварыОтКонтрагента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		ТабТМЦ = Новый ТаблицаЗначений;
		ТабТМЦ.Колонки.Добавить("Номенклатура");		
		абс_ДвиженияПоРегиструСписанныеТоварыОтКонтрагента(ТабТМЦ, Отказ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		Возврат;
	КонецЕсли;	
	//АБС Коломиец 16099-
	
	//АБС ВСТАВКА   12.12.2013  Навценя2
	РегистрыНакопления.абс_ЗаявкиНаОбеспечение.ВыполнитьСписаниеПоЗаявке(Движения, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	//АБС ВСТАВКА  КОНЕЦ
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
	   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак
	   // АБС Изменение 58946
	   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку
	   ИЛИ ТаблицаПоТаре.Количество()>0 Тогда
	   
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
			ЭтотОбъект, 
			Дата, 
			СтруктураШапкиДокумента.Организация,
			ОтражатьВУправленческомУчете,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
		
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	// АБС ИЗМЕНЕНО 20110211 Фролов
	// Делаем движения по БУ только в случае если документ на обработке бухгалтером и завершен.
	Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером ИЛИ
		 абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен ИЛИ
		 абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда
		 
		 ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок);
		 
		 // {{ТТК Сладков А. ИТ ДЕВ № D2017-0307-3226 08.06.2017 начало

		 ПроизвестиCнятиеРезервов(Отказ);
		 
		 // }}ТТК Сладков А. ИТ ДЕВ № D2017-0307-3226 08.06.2017 окончание
		 
	КонецЕсли;	 
    // АБС ИЗМЕНЕНО 20110211 Фролов КОНЕЦ
	
	//// АБС ВСТАВКА 58946

	//Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
	//	
	//	ВнестиИзмененияВРегистры();
	//	
	//КонецЕсли;
	// // АБС ВСТАВКА 58946
		
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ВнестиИзмененияВРегистры()
	
	ДвиженияПоРегПартииПередТоваровБух = РегистрыНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.СоздатьНаборЗаписей();
	ДвиженияПоРегПартииПередТоваровБух.Отбор.Регистратор.Значение = Ссылка;
	ДвиженияПоРегПартииПередТоваровБух.Отбор.Регистратор.Использование = Истина;
	ДвиженияПоРегПартииПередТоваровБух.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	ДвиженияПоРегПартииПередТоваровБух.Прочитать();
	
	Для каждого СтрокаДвижение Из ДвиженияПоРегПартииПередТоваровБух Цикл
		Если СтрокаДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		//	СтрокаДвижение.ДокументОприходования = Ссылка;
			СтрокаДвижение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж;
			СтрокаДвижение.абс_ЦФО = абс_ЦФО;
			СтрокаДвижение.абс_НазначениеПлатежа = абс_НазначениеПлатежа;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	ДвиженияПоРегПартииПередТоваровБух.Записать();
	
	ДвиженияПоРегПартииПередТоваровНал = РегистрыНакопления.ПартииТоваровПереданныеНалоговыйУчет.СоздатьНаборЗаписей();
	ДвиженияПоРегПартииПередТоваровНал.Отбор.Регистратор.Значение = Ссылка;
	ДвиженияПоРегПартииПередТоваровНал.Отбор.Регистратор.Использование = Истина;
	ДвиженияПоРегПартииПередТоваровНал.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	ДвиженияПоРегПартииПередТоваровНал.Прочитать();
	
	Для каждого СтрокаДвижение Из ДвиженияПоРегПартииПередТоваровНал Цикл
		Если СтрокаДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		//	СтрокаДвижение.ДокументОприходования = Ссылка;
			СтрокаДвижение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж;
			СтрокаДвижение.абс_ЦФО = абс_ЦФО;
			СтрокаДвижение.абс_НазначениеПлатежа = абс_НазначениеПлатежа;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	ДвиженияПоРегПартииПередТоваровНал.Записать();
	
	ДвиженияПоРегПартииПередТоваровУпр = РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей();
	ДвиженияПоРегПартииПередТоваровУпр.Отбор.Регистратор.Значение = Ссылка;
	ДвиженияПоРегПартииПередТоваровУпр.Отбор.Регистратор.Использование = Истина;
	ДвиженияПоРегПартииПередТоваровУпр.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	ДвиженияПоРегПартииПередТоваровУпр.Прочитать();
	
	Для каждого СтрокаДвижение Из ДвиженияПоРегПартииПередТоваровУпр Цикл
		Если СтрокаДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		//	СтрокаДвижение.ДокументОприходования = Ссылка;
			СтрокаДвижение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование;
			СтрокаДвижение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж;
			СтрокаДвижение.абс_ЦФО = абс_ЦФО;
			СтрокаДвижение.абс_НазначениеПлатежа = абс_НазначениеПлатежа;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	ДвиженияПоРегПартииПередТоваровУпр.Записать();
	
	ДвиженияПоРегПартииТоваровУпр = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
	ДвиженияПоРегПартииТоваровУпр.Отбор.Регистратор.Значение = Ссылка;
	ДвиженияПоРегПартииТоваровУпр.Отбор.Регистратор.Использование = Истина;
	ДвиженияПоРегПартииТоваровУпр.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	ДвиженияПоРегПартииТоваровУпр.Прочитать();
	
	Для каждого СтрокаДвижение Из ДвиженияПоРегПартииТоваровУпр Цикл
		Если СтрокаДвижение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		//	СтрокаДвижение.ДокументОприходования = Ссылка;
			СтрокаДвижение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование;
			СтрокаДвижение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	ДвиженияПоРегПартииТоваровУпр.Записать();
	
	ДвиженияПоРегПартииТоваровБух = РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.СоздатьНаборЗаписей();
	ДвиженияПоРегПартииТоваровБух.Отбор.Регистратор.Значение = Ссылка;
	ДвиженияПоРегПартииТоваровБух.Отбор.Регистратор.Использование = Истина;
	ДвиженияПоРегПартииТоваровБух.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	ДвиженияПоРегПартииТоваровБух.Прочитать();
	
	Для каждого СтрокаДвижение Из ДвиженияПоРегПартииТоваровБух Цикл
		Если СтрокаДвижение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		//	СтрокаДвижение.ДокументОприходования = Ссылка;
			СтрокаДвижение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	ДвиженияПоРегПартииТоваровБух.Записать();
	
	ДвиженияПоРегПартииТоваровНал = РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей();
	ДвиженияПоРегПартииТоваровНал.Отбор.Регистратор.Значение = Ссылка;
	ДвиженияПоРегПартииТоваровНал.Отбор.Регистратор.Использование = Истина;
	ДвиженияПоРегПартииТоваровНал.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	ДвиженияПоРегПартииТоваровНал.Прочитать();
	
	Для каждого СтрокаДвижение Из ДвиженияПоРегПартииТоваровНал Цикл
		Если СтрокаДвижение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		//	СтрокаДвижение.ДокументОприходования = Ссылка;
			СтрокаДвижение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	ДвиженияПоРегПартииТоваровНал.Записать();

	
			
КонецПроцедуры


Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	//Если ВидОперации <> Перечисления.ВидыОперацийПередачаТоваров.абс_ОтКонтрагента Тогда //АБС 16099
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		НаборДвижений = Движения.ТоварыНаСкладах;

		// Контроль остатков товара
		
		// АБС Изменение 58946
		Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
			Если абс_Оборудование.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("абс_Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		Иначе	
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
		//\\ АБС Изменение 58946
		
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если Не Отказ Тогда
			//Бобылев А.А. 21.05.2018 СППР00-00000088
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ТаблицаПоТоварам.Колонки.Добавить("СчетУчета");
				ТаблицаПоТаре.Колонки.Добавить("СчетУчета");
				Для Каждого Элемент из ТаблицаПоТоварам Цикл
					Элемент.СчетУчета = Элемент.СчетУчетаБУ;
				КонецЦикла;
				для Каждого Элемент Из ТаблицаПоТаре Цикл
					Элемент.СчетУчета = Элемент.СчетУчетаБУ;
				КонецЦикла;
			КонецЕсли;
			//Бобылев А.А.---------------------------
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый,"ТаблицаПоТаре");
			
			//Начало блока по заявке 000034429 (Григорьев Денис)
			//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
			//   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			//	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый,"ТаблицаПоТоварам");
			//КонецЕсли;
			//Конец блока по заявке 000034429 (Григорьев Денис)
			
			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

	Иначе // отпуск по ордеру

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            Склад);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,"ТаблицаПоТаре");
			
			//Начало блока по заявке 000034429 (Григорьев Денис)
			//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку 
			//   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			//	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",     Справочники.Качество.Новый,"ТаблицаПоТоварам");
			//КонецЕсли;
			//Конец блока по заявке 000034429 (Григорьев Денис)
						
			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	//КонецЕсли;
	// МАТЕРИАЛЫ ПО РЕГИСТРУ ТоварыПереданные.
	НаборДвижений = Движения.ТоварыПереданные;
	
	// Контроль остатков товара
	Если ТаблицаПоТаре.Количество()<>0 Тогда
		ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольЛимитовВозвратнойТары(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
		   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		КонецЕсли;
			
		ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		// АБС ИЗМЕНЕНО Учет переданных товаров по сериям
		//ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СерияНоменклатуры",  неопределено);
		// АБС ИЗМЕНЕНО КОНЕЦ
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             Заказ);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку 
		   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку,   "ТаблицаПоТоварам");
		КонецЕсли;
		
		// АБС ВСТАВКА Фролов
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
		   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда
		   
		   	ТаблицыДанныхДокумента.ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.абс_ЦФО, "абс_ЦФО");
			ТаблицыДанныхДокумента.ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.абс_НазначениеПлатежа, "абс_НазначениеПлатежа");
		   
		КонецЕсли;
		// АБС ВСТАВКА Фролов КОНЕЦ		
		
		ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
	
	// ПРОВЕДЕНИЕ ПО РЕГИСТРУ ЗаказыПокупателей.
	Если мЕстьЗаказ 
	   И (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
	   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак) Тогда
	
		НаборДвижений = Движения.ЗаказыПокупателей;
		
		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары", Отказ, Заголовок, РежимПроведения);
			
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Заказ);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВПереработку);
			
			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Списание из резерва.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
				
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Заказ);
			
			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Процедура формирует движения по регистру "ТоварыОрганизаций"
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
								  
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Проверка остатков
		
		// АБС Измнение 58946
		Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "абс_Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		Иначе
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;	
		//\\ АБС Измнение 58946
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
			   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
			КонецЕсли;
			
			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
			
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
			ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",     Организация);
			ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи",Ссылка );
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
			   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
				ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",        Справочники.Качество.Новый);
			КонецЕсли;
			
			ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;		

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Заполнение реквизитов управленческого учета регистра СписанныеТовары.
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, "ДопустимыйСтатус2");
	
	// АБС ВСТАВКА 50947
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус3");
	КонецЕсли;
		
	// Для проведения документа ПолучениеУслугПоПереработке
	//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку, "ДопустимыйСтатус4");
	//\\ АБС ВСТАВКА
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ОтветственноеХранение, "ДопустимыйСтатус4"); //АБС Коломиец 11415
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

// Заполнение реквизитов управленческого учета регистра СписанныеТовары.
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                 "Организация");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		
		Строка.КорСчетБУ      = СтрокаТЧ.СчетПередачиБУ;
		Строка.КорСчетНУ      = СтрокаТЧ.СчетПередачиНУ;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете = Истина;
			Строка.СчетУчетаНУ = СтрокаТЧ.СчетУчетаБУ;
			Строка.КорСчетНУ   = СтрокаТЧ.СчетПередачиБУ;
		КонецЕсли;
			 
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

// Заполнение реквизитов управленческого учета регистра СписанныеТовары.
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция     ,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр()

// Заполнение реквизитов регламентированного учета регистра СписанныеТовары.
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре, "КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.Другие, "КорСубконтоБУ3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ2");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовПоТареБУ,"СчетДоходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовПоТареНУ,"СчетДоходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовПоТареБУ,"СчетРасходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовПоТареНУ,"СчетРасходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходовПоТаре,"СтатьяДоходовИРасходов");
	
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТаре.Получить(ТаблицаДвижений.Индекс(Строка));
		
		Строка.СтоимостьПоступлениеБУ  = СтрокаТЧ.ПроводкаСумма;
		
	КонецЦикла;
	
КонецПроцедуры  // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл()

// Формирование движений по регистру СписанныеТовары.
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	Инд = 0;

	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак 
	   // АБС Изменение 58946
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
			Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
			
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
		//АБС НАЧАЛО Задача №08759
		//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		//	ТаблицаДвижений.ЗаполнитьЗначения(Заказ, "ЗаказПартии");
		//КонецЕсли;
		

		// Заказ, на который списывается
		//ТаблицаДвижений.ЗаполнитьЗначения(Заказ ,"ЗаказСписания");

		//\\АБС КОНЕЦ Задача №08759

		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

		//Начало блока по заявке 000034429 (Григорьев Денис)
		//Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку // АБС ВСТАВКА Передача оборудования
		Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		КонецЕсли;
		//Конец блока по заявке 000034429 (Григорьев Денис)	

		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаВПереработку, "КодОперацииПартииТоваров");

		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,             "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, "СтатусПередачи");
		
		// Документы с видом передачи по ордеру сразу не проводятся
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
		КонецЕсли;

		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

		// АБС ВСТАВКА Фролов (при списании партий переданных товаров происходит фильтр СтрокаДвижения.ЗаказПартии = Неопределено)
		Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДвижения.ЗаказПартии) Тогда
				СтрокаДвижения.ЗаказПартии = Неопределено;
			КонецЕсли;
			
			//АБС НАЧАЛО Задача №08759
			Если ЗначениеЗаполнено(СтрокаДвижения.ЗаказСписания) Тогда
				СтрокаДвижения.СписыватьТолькоПоЗаказу = Истина;
			КонецЕсли;
   			//\\АБС КОНЕЦ Задача №08759
			
		КонецЦикла;
		// АБС ВСТАВКА Фролов КОНЕЦ
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Заказ, "ЗаказПартии");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,             "ДокументПередачи");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "СтатусПередачи");
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Горелик Р.В. 10.10.2018 [CHG448/525] +++
	Если ttk_ИнтеграцияБП30Сервер.ПроверкаИспользованияКонстантыИнтеграцияБП30(Дата) Тогда
		Если ЭтотОбъект.ПометкаУдаления = Истина Тогда
			ЭтотОбъект.ПометкаУдаления = Ложь;
			Сообщить("Запрет на установку пометки на удаление!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Горелик Р.В. 10.10.2018 [CHG448/525] ---
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №35863 НАЧАЛО
	ttk_ОбщегоНазначения.абс_УстановитьРежимЗаписиДокумента(абс_Статус, Проведен, РежимЗаписи);
	//\\АБС ВСТАВКА №35863 КОНЕЦ 
	
	//АБС ВСТАВКА   28.03.2014 11:44:57  Гетц. Движения не делаются, если не менялось ничего, кроме статуса
	СтруктураПараметров = Новый Структура("Ссылка, ТекущийСтатус, НовыйСтатус, ДокументОбъект, Проведен", Ссылка, Ссылка.абс_Статус, абс_Статус, ЭтотОбъект, Проведен);
	РежимЗаписи = абс_СлужебныеФункции.ПолучитьРежимЗаписиПриСменеСтатуса(СтруктураПараметров, РежимЗаписи);
	//АБС ВСТАВКА  КОНЕЦ

	//АБС ВСТАВКА №35863, 37395, 39219 НАЧАЛО 
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка",Ссылка);
	СтруктураШапкиДокумента.Вставить("абс_Статус",абс_Статус);
	Если (ttk_ОбщегоНазначения.абс_НеВыполнятьДвиженияВСтатусе(СтруктураШапкиДокумента) или Отказ) Тогда //  и не РольДоступна("абс_СотрудникСклада")
		ОтражатьВУправленческомУчете 	= Истина;
		ОтражатьВБухгалтерскомУчете 	= Ложь;
		ОтражатьВНалоговомУчете 		= Ложь;
	КонецЕсли;	
	//\\АБС ВСТАВКА №35863, 37395, 39219 КОНЕЦ		
	
	Для каждого СтрокаТабличнойЧасти из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
			СтрокатабличнойЧасти.Качество = Справочники.Качество.Новый;
		КонецЕсли;
	КонецЦикла;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ВозвратнаяТара");
                                                                        	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// АБС ВСТАВКА Согласование первичных документов
	Если ЭтоНовый() Тогда
		
		абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		
	КонецЕсли;
	// АБС ВСТАВКА Согласование первичных документов КОНЕЦ
	
	// АБС ВСТАВКА 
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не указан ответственный", Отказ);
	КонецЕсли;	
	// АБС ВСТАВКА КОНЕЦ	
	
	//Филиализация
	Если ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьМеханизмФизиализации Тогда		
		ИзменитьДатуПоОприходованию();	
	КонецЕсли;
	//Филиализация
	
КонецПроцедуры // ПередЗаписью

//Филиализация
Процедура ИзменитьДатуПоОприходованию()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_АВИЗО.ДокументОснованиеПриемник.Дата КАК Дата
	|ИЗ
	|	Документ.абс_АВИЗО КАК абс_АВИЗО
	|ГДЕ
	|	абс_АВИЗО.ДокументОснованиеПриемникДоп = &ДокументОснованиеПриемникДоп";
	
	Запрос.УстановитьПараметр("ДокументОснованиеПриемникДоп", Ссылка);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.Дата <> Null Тогда
			Если ВыборкаДетальныеЗаписи.Дата > Дата Тогда
				Дата = ВыборкаДетальныеЗаписи.Дата  + 1;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

//Филиализация

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	// АБС ВСТАВКА Согласование первичных документов
	Попытка
	
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусПервичногоДокументаПоРегистру(Ссылка);
		
		Если НЕ абс_Статус = СтатусПоРегистру Тогда
			ЗаписатьНовыйСтатус(абс_Статус, абс_ПричинаИзмененияСтатуса);
			
			абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомлениеППД(Ссылка, абс_Статус);
		КонецЕсли;
		
		// АБС ВСТАВКА 20120412 Попов
		// Временно отключаем формирование задач по ППД
		Возврат;
		// АБС ВСТАВКА 20120412 Попов 
				
		// Запустим БП если он еще не запущен
		Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК ИЛИ 
			 абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияПервичногоДокумента(Ссылка);	
			КонецЕсли;
			
		КонецЕсли;
		
		Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
			
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияПервичногоДокументаУточнениеБухгалтером(Ссылка);
			КонецЕсли;
			
		КонецЕсли;		
			
		// Попробуем закрыть задачу согласования
		ЗадачаСогласование = ПолучитьЗадачуПоПервичномуДокументуСогласование();
		
		Если ЗадачаСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		Если НЕ ЗадачаСогласование.Выполнена Тогда

			ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();			
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЕсли;
	
	Исключение

		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи документа: " + ОписаниеОшибки() + ".", Отказ);
		
		Возврат;
	КонецПопытки;	
	
	// АБС ВСТАВКА Согласование первичных документов КОНЕЦ

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
    Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	Если абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда //абсо - заявка 9747
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПолучитьДанныеДокумента(Заголовок,Отказ);
	
	ПроверкаРеквизитов(Заголовок, Отказ, СтруктураШапкиДокумента);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", 			"Ссылка", 						"Сделка");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", 	"ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете" , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	мУчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);

	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Качество"         			, "Качество");
	
	//АБС НАЧАЛО Задача №08759
    СтруктураПолей.Вставить("ЗаказПартии"         			, "Заказ");
	СтруктураПолей.Вставить("ЗаказСписания"         		, "Заказ");
	СтруктураПолей.Вставить("абс_ЗаказПроект"         		, "Заказ");
 	//\\АБС КОНЕЦ Задача №08759
	
	// АБС ВСТАВКА ФРОЛОВ 
	СтруктураПолей.Вставить("абс_ЦФО"         			, "Ссылка.абс_ЦФО");
	СтруктураПолей.Вставить("абс_НазначениеПлатежа"		, "Ссылка.абс_НазначениеПлатежа");
	// АБС ВСТАВКА ФРОЛОВ КОНЕЦ
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОтКонтрагента Тогда //АБС Коломиец 16099
		СтруктураПолей.Свойство("ЗаказПартии"           , "Ссылка.Заказ");
		СтруктураПолей.Вставить("Коэффициент"     		, "Коэффициент");
		СтруктураПолей.Вставить("КоличествоДок"         , "Количество");
		СтруктураПолей.Вставить("Комплект"              , "Номенклатура.Комплект");	
		СтруктураПолей.Вставить("ДокументОприходованияНовый", "Ссылка");
	КонецЕсли;
	

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	// АБС Изменение 58946
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку Тогда
		//АБС ВСТАВКА   12.12.2013  Навценя2
		СтруктураПолей.Вставить("Проект", "Проект");
		//АБС ВСТАВКА  КОНЕЦ  
		РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "абс_Оборудование", СтруктураПолей);
	Иначе
		РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	КонецЕсли;	

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	// АБС ВСТАВКА ФРОЛОВ 
	СтруктураПолей.Вставить("абс_ЦФО"         			, "Ссылка.абс_ЦФО");
	СтруктураПолей.Вставить("абс_НазначениеПлатежа"		, "Ссылка.абс_НазначениеПлатежа");
	// АБС ВСТАВКА ФРОЛОВ КОНЕЦ

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей);
	
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	мЕстьЗаказ = ЗначениеЗаполнено(Заказ);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам, ТаблицаПоТаре));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если Не Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			Возврат;
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Заказ			   = Основание;
		ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если Основание.Проведен Тогда

			// Заполним табличные части не переданных материалов по заказу покупателя.
			ЗаполнитьТоварыПоОстаткамУпр();

			Для Каждого СтрокаТабЧасти Из Товары Цикл
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			КонецЦикла;

		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	//АБС ВСТАВКА 130807-1503 АБС-Ч: 		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.абс_ОборудованиеВПереработку;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		абс_ЗаявкаНаТМЦ = Основание.абс_ЗаявкаНаТМЦ;
	    Контрагент = Основание.абс_ЗаявкаНаТМЦ.Контрагент;
		Дата 		= ТекущаяДата();
		Склад    	= Основание.СкладПолучатель;
		Ответственный = Основание.Ответственный;
		абс_Статус  = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		
		абс_Отпустил = Ответственный;
		Если РольДоступна("абс_СотрудникСклада") Тогда
			мОтражатьВРегламентированномУчете = Истина;
			
			ОтражатьВБухгалтерскомУчете = Истина;
			ОтражатьВНалоговомУчете 	= Истина;
		КонецЕсли;
	
		Для каждого СтрТЧ Из Основание.Товары Цикл
			
			СтрокаТабличнойЧасти = абс_Оборудование.Добавить();	
			
			СтрокаТабличнойЧасти.Количество 			= СтрТЧ.Количество;
			СтрокаТабличнойЧасти.Номенклатура     		= СтрТЧ.Номенклатура;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрТЧ.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      		= СтрТЧ.Коэффициент;
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			
			СтрокаТабличнойЧасти.СерияНоменклатуры = СтрТЧ.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрТЧ.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
			СтрокаТабличнойЧасти.Проект = СтрТЧ.абс_Проект;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	
	//\\АБС ВСТАВКА 130807-1504 АБС-Ч:  КОНЕЦ		
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если Не Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			Возврат;
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Заказ			   = Основание;
		ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если Основание.Проведен Тогда

			// Заполним табличные части не переданных материалов по заказу покупателя.
			ЗаполнитьТоварыПоОстаткамУпр();

			Для Каждого СтрокаТабЧасти Из Товары Цикл
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			КонецЦикла;

		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
		Склад = Основание.СкладОрдер;
		
		#Если КЛИЕНТ Тогда
			
		// Выбор склада
		УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
		СкладВТабЧасти  = УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления
					  ИЛИ УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;
					  
		Если СкладВТабЧасти Тогда
		
			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары", "Склад");
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "СкладОрдер");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
			
		КонецЕсли;
		#КонецЕсли
		
		ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(Основание);
		ЗаполнитьТаруПоДокументуПоступлениеТоваровУслуг(Основание);
				
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// АБС ВСТАВКА Согласование первичных документов
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовПервичныхДокументов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ПервичныйДокумент.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.ПервичныйДокумент		= Ссылка;
	Запись.Пользователь 			= ТекПользователь;	
	Запись.СтатусДокумента			= НовыйСтатус;
	
	Запись.Комментарий 				= Комментарий;
	
	ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	
	Если НЕ ОтветственныйСотрудник = Неопределено Тогда
		Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоПервичномуДокументу(Ссылка, "абсСогласованиеПервичныхДокументов");	
	
КонецФункции

Функция ПолучитьЗадачуПоПервичномуДокументуСогласование() Экспорт
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	
	Статус = абс_Статус;
	
	Если Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеБухгалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОтказ);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК Тогда

		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеСогласованиеОФК);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда

		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
				
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаПринятыхДокументов);
				
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеСогласованиеОФК);	
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеОбработкаБухгалтерией);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеБухгалтером);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеПервичныхДокументов.ТочкиМаршрута.ДействиеУточнениеБухгалтером);		
		
	КонецЕсли;
			
	Возврат абс_БизнесПроцессы.НайтиЗадачуЗЗ(БП, СпТочек ,, Ложь);

КонецФункции

Функция ПолучитьРежимЗаписиДокумента() Экспорт
	
	РежимЗаписи = Неопределено;
	
	Если 	абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка ИЛИ 
			абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ
			ИЛИ абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Отмена Тогда
			
		Если Проведен Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
	Иначе
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	КонецЕсли;
	
	Возврат РежимЗаписи;
	
КонецФункции
// АБС ВСТАВКА Согласование первичных документов КОНЕЦ

// Процедура списания по партиям
//
Процедура абс_ДвиженияПоРегиструСписанныеТоварыОтКонтрагента(ТабТМЦ, Отказ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре)
	
	НаборДвижений   = Движения.СписанныеТовары;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТекСклад = Справочники.Склады.ПустаяСсылка();//?(ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру, СкладОрдер.Склад, СкладОрдер);
	СчетУчетаПоТареНУ = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация           = Организация;
		НоваяСтрока.Номенклатура          = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.ДоговорКонтрагента = абс_ДоговорКонтрагентаОт;
		НоваяСтрока.ЗаказПартии   = СтрокаТЧ.ЗаказПартии;
		НоваяСтрока.ЗаказСписания = СтрокаТЧ.ЗаказСписания;
		НоваяСтрока.СкладПолучатель   = ТекСклад;
		НоваяСтрока.КачествоНовое     = СтрокаТЧ.Качество;
		//НоваяСтрока.ДокументПередачи = СтрокаТЧ.ДокументПартии;
		
		НоваяСтрока.Количество    = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент / СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика;
		
		НоваяСтрока.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
		НоваяСтрока.ОтражатьВБухгалтерскомУчете  = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
		НоваяСтрока.ОтражатьВНалоговомУчете      = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
		НоваяСтрока.СчетУчетаБУ       = СтрокаТЧ.СчетПередачиБУ;
		НоваяСтрока.СчетУчетаНУ       = СтрокаТЧ.СчетПередачиНУ;
		
		НоваяСтрока.КорСчетБУ         = СтрокаТЧ.СчетУчетаБУ;
		НоваяСтрока.КорСчетНУ         = СтрокаТЧ.СчетУчетаНУ;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			
			НоваяСтрока.ОтражатьВНалоговомУчете = Истина;
			НоваяСтрока.СчетУчетаНУ = НоваяСтрока.СчетУчетаБУ;
			НоваяСтрока.КорСчетНУ 	= НоваяСтрока.КорСчетБУ;
			
		КонецЕсли;
		
		НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.Продукция;
		НоваяСтрока.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Купленный;
		НоваяСтрока.ДопустимыйСтатус3 = Перечисления.СтатусыПартийТоваров.ВПереработку;
		
		НоваяСтрока.СтатусПередачи    = Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку;
		
		НоваяСтрока.абс_ЦФО 		  		= СтрокаТЧ.абс_ЦФО;
		НоваяСтрока.абс_НазначениеПлатежа 	= СтрокаТЧ.абс_НазначениеПлатежа;
		
		НоваяСтрока.КорСубконтоБУ1 = СтрокаТЧ.Номенклатура;
		НоваяСтрока.КорСубконтоБУ2 = //абс_КонтрагентОт;//
		Контрагент;
		НоваяСтрока.КорСубконтоБУ3 = //абс_ДоговорКонтрагентаОт;//
		ДоговорКонтрагента;
		НоваяСтрока = ТабТМЦ.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;

	КонецЦикла;
	
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
		
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьДвижения();
	НаборДвижений.Записать(Истина);
	
КонецПроцедуры // СписаниеПоПартиям()

Процедура абс_ДвиженияПоРегиструПереданныеТоварыОтКонтрагента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.ТоварыПереданные;
		
	Если НЕ Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;		
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);

		ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             Заказ);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку,   "ТаблицаПоТоварам");
		ТаблицыДанныхДокумента.ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.абс_ЦФО, "абс_ЦФО");
		ТаблицыДанныхДокумента.ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.абс_НазначениеПлатежа, "абс_НазначениеПлатежа");	
		
		ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;

	
КонецПроцедуры

//АБС ВСТАВКА 130807-1542 АБС-Ч: 		
Процедура ПриКопировании(ОбъектКопирования)
	абс_ЗаявкаНаТМЦ = Неопределено;
КонецПроцедуры
//\\АБС ВСТАВКА 130807-1542 АБС-Ч:  КОНЕЦ		

Процедура   ПроизвестиCнятиеРезервов(Отказ)
	
 	
	  Движения.ТоварыВРезервеНаСкладах.Записывать=Истина;
	  Движения.ТоварыВРезервеНаСкладах.Очистить();

	
	   Запрос = новый Запрос;
			
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	ПередачаТоваров.ДокументРезерва,
	                  |	ПередачаТоваров.Номенклатура,
	                  |	ПередачаТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	                  |	ПередачаТоваров.СерияНоменклатуры,
	                  |	ПередачаТоваров.Ссылка.Склад КАК Склад,
	                  |	СУММА(ПередачаТоваров.Количество) КАК Количество
	                  |ПОМЕСТИТЬ ВТ
	                  |ИЗ
	                  |	Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	                  |ГДЕ
	                  |	ПередачаТоваров.Ссылка = &Ссылка
	                  |	И НЕ ПередачаТоваров.ДокументРезерва = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ПередачаТоваров.Номенклатура,
	                  |	ПередачаТоваров.Ссылка.Склад,
	                  |	ПередачаТоваров.ХарактеристикаНоменклатуры,
	                  |	ПередачаТоваров.СерияНоменклатуры,
	                  |	ПередачаТоваров.ДокументРезерва
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	ВТ.Номенклатура,
	                  |	ВТ.Склад,
	                  |	СУММА(ВТ.Количество) КАК Количество,
	                  |	СУММА(ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	                  |	ВТ.Характеристика,
	                  |	ВТ.СерияНоменклатуры,
	                  |	ВТ.ДокументРезерва
	                  |ИЗ
	                  |	ВТ КАК ВТ
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	                  |				&МоментВремени,
	                  |				Склад В
	                  |						(ВЫБРАТЬ
	                  |							ВТ.Склад
	                  |						ИЗ
	                  |							ВТ)
	                  |					И Номенклатура В
	                  |						(ВЫБРАТЬ
	                  |							ВТ.Номенклатура
	                  |						ИЗ
	                  |							ВТ)) КАК ТоварыВРезервеНаСкладах
	                  |		ПО ВТ.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура
	                  |			И ВТ.Склад = ТоварыВРезервеНаСкладах.Склад
	                  |			И ВТ.Характеристика = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
	                  |			И ВТ.СерияНоменклатуры = ТоварыВРезервеНаСкладах.СерияНоменклатуры
	                  |			И ВТ.ДокументРезерва = ТоварыВРезервеНаСкладах.ДокументРезерва
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ВТ.Номенклатура,
	                  |	ВТ.Склад,
	                  |	ВТ.Характеристика,
	                  |	ВТ.СерияНоменклатуры,
	                  |	ВТ.ДокументРезерва
	                  |
	                  |ДЛЯ ИЗМЕНЕНИЯ
	                  |	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки";

						   
						   
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("МоментВремени", 	Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Включая)); 

			
			Выборка = Запрос.Выполнить().Выбрать();	
			
			

			Пока Выборка.Следующий()  Цикл
				
				Если ВЫборка.КоличествоОстаток < Выборка.Количество   Тогда
					
					Сообщить(" Не достаточно резерва  " + Выборка.Номенклатура.НаименованиеПолное + " на складе " + Выборка.Склад.Наименование + " количество для снятие резерва = "+Выборка.Количество + ", количество в резерве = "+ Выборка.КоличествоОстаток);
					
					Отказ = Истина;
					
					Продолжить;
					
				Иначе
					
					ДвижениеТОварыВРезерве = Движения.ТоварыВРезервеНаСкладах.Добавить();
					
					ДвижениеТОварыВРезерве.ВидДвижения 					= ВидДвиженияНакопления.Расход;
					ДвижениеТОварыВРезерве.Период 	 					= Дата;
					ДвижениеТОварыВРезерве.Склад 						= Выборка.Склад;
					
					ДвижениеТОварыВРезерве.Номенклатура 				= Выборка.Номенклатура;
					
					ДвижениеТОварыВРезерве.ХарактеристикаНоменклатуры	= Выборка.Характеристика;

					ДвижениеТОварыВРезерве.СерияНоменклатуры			= Выборка.СерияНоменклатуры;

					ДвижениеТОварыВРезерве.Количество   				= Выборка.Количество;
							
					ДвижениеТОварыВРезерве.ДокументРезерва 				= Выборка.ДокументРезерва;		

					
				КонецЕсли;	

			КонецЦикла;


	
КонецПроцедуры;

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИспользоватьТару = Константы.ИспользоватьВозвратнуюТару.Получить();
