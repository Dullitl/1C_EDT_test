Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТабПроверкиОборотов; // Таблица для проверки контролируемых значений

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			// Напечатаем внешную печатную форму
			
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			Если ТабДокумент <> Неопределено Тогда
				УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
			КонецЕсли; 
			
		Иначе
			// Напечатаем встроенную печатную форму
			ПараметрКоманды = Новый Массив;
			ПараметрКоманды.Добавить(Ссылка);
			
			Если НаПринтер Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ЗаявкаНаРасходованиеСредств", ИмяМакета, 
				ПараметрКоманды, Неопределено);
			Иначе
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ЗаявкаНаРасходованиеСредств", ИмяМакета, 
				ПараметрКоманды, Неопределено, Неопределено);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьЗаявки","Заявка на расходование средств");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, ИмяРеквизита, ТекстСообщения, НомерСтроки, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("РасшифровкаПлатежа", НомерСтроки, ИмяРеквизита);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ТекстПоля,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ Платеж.ДоговорКонтрагента.Пустая()
				И (Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
				ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена сделка'");
				ПроверитьЗначение(Платеж.Сделка, "Сделка", ТекстСообщения, Платеж.НомерСтроки, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказу(ДокументОснование, СтрокаПлатеж)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказу()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаВзаиморасчетовПодотчетника);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Получатель
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом()

Функция ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки,ТабКонтролируемыхОборотов)
	
	// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
	
	Для Каждого СтрокаПлатеж Из ТабПроверкиОборотов Цикл
		
		Запрос=Новый Запрос;
		
		Запрос.Текст="ВЫБРАТЬ
		|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий КАК КонтролирующийСценарий,
		|	УстановкаОграниченийПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
		|	УстановкаОграниченийПоБюджетам.ЦФО КАК ЦФО,
		|	УстановкаОграниченийПоБюджетам.Проект КАК Проект,
		|	УстановкаОграниченийПоБюджетам.Контрагент КАК Контрагент,
		|	УстановкаОграниченийПоБюджетам.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.УстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
		|
		|ГДЕ
		|	УстановкаОграниченийПоБюджетам.Период = &Период И
		|	УстановкаОграниченийПоБюджетам.СтатьяОборотов = &СтатьяОборотов И
		|	УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий И
		|	(УстановкаОграниченийПоБюджетам.ЦФО = &ЦФО ИЛИ УстановкаОграниченийПоБюджетам.ЦФО = &ПустойЦФО) И
		|	(УстановкаОграниченийПоБюджетам.Проект = &Проект ИЛИ УстановкаОграниченийПоБюджетам.Проект = &ПустойПроект) И
		|	(УстановкаОграниченийПоБюджетам.Контрагент = &Контрагент ИЛИ УстановкаОграниченийПоБюджетам.Контрагент = &ПустойКонтрагент) И
		|	(УстановкаОграниченийПоБюджетам.Номенклатура = &Номенклатура ИЛИ УстановкаОграниченийПоБюджетам.Номенклатура = Неопределено) И
		|	УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения И
		|	УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения = &ВидКонтролируемогоЗначения";
		
		Запрос.УстановитьПараметр("Период",ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода,СтруктураДанныхШапки.СценарийПериодичность));
		Запрос.УстановитьПараметр("СтатьяОборотов",СтатьяОборотов);
		Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
		Запрос.УстановитьПараметр("ВидКонтролируемогоЗначения",Перечисления.ВидыКонтролируемогоЗначенияБюджета.Ограничивающее);
		Запрос.УстановитьПараметр("Сценарий",Сценарий);
		
		Запрос.УстановитьПараметр("ЦФО",ЦФО);
		Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
		
		Запрос.УстановитьПараметр("Проект",СтрокаПлатеж.Проект);
		Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
		
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
		
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		
		ТабРезультата=Запрос.Выполнить().Выгрузить();
		
		Если ТабРезультата.Количество()=0 Тогда
			
			Продолжить;
			
		Иначе
			
			ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнение");
			ТабРезультата.Колонки.Добавить("Период");
			
			Для каждого СтрокаПроверки Из ТабРезультата Цикл
				
				ТекущийСценарий=?(СтрокаПроверки.КонтролирующийСценарий.Пустая(),Сценарий,СтрокаПроверки.КонтролирующийСценарий);
				
				ДатаНачала = ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода, ТекущийСценарий.Периодичность);
				ДатаКонца  = ОбщегоНазначения.ДатаКонцаПериода (ДатаНачала,  ТекущийСценарий.Периодичность);
				
				СтруктруаКурсаСценария = Бюджетирование.КурсВалютыПоСценарию(Сценарий.Валюта, ДатаНачала,Сценарий);
				КурсСценария      = СтруктруаКурсаСценария.Курс;
				КратностьСценария = СтруктруаКурсаСценария.Кратность;
				
				Если СтрокаПлатеж.СуммаПлатежа>0 ИЛИ ТабПроверкиОборотов.Колонки.Найти("СуммаУпр")=Неопределено Тогда
					
					СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента, СтруктураДанныхШапки.СценарийВалюта, КурсДокумента, КурсСценария, 
					КратностьДокумента, КратностьСценария);
					
				Иначе
					
					СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаУпр, , СтруктураДанныхШапки.СценарийВалюта, СтрокаПлатеж.КурсУпрУчета, КурсСценария, 
					СтрокаПлатеж.КратностьУпрУчета, КратностьСценария);
					
				КонецЕсли;
				
				Запрос.Текст="ВЫБРАТЬ
				|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
				|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
				|ИЗ
				|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&ДатаНачала, &ДатаНачала, , 
				|					Контрагент = &Контрагент И 
				|					КонтролирующийСценарий=&КонтролирующийСценарий И
				|					Номенклатура=&Номенклатура И 
				|					Проект=&Проект И 
				|					СтатьяОборотов=&СтатьяОборотов И 
				|					Сценарий=&Сценарий И 
				|					ЦФО=&ЦФО И 
				|					ИспользованиеКонтролируемогоЗначения=&ИспользованиеКонтролируемогоЗначения
				|					) КАК КонтролируемыеЗначенияБюджетовОбороты";
				
				
				
				
				Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
				Запрос.УстановитьПараметр("Контрагент",СтрокаПроверки.Контрагент);
				Запрос.УстановитьПараметр("КонтролирующийСценарий",СтрокаПроверки.КонтролирующийСценарий);
				Запрос.УстановитьПараметр("Номенклатура",СтрокаПроверки.Номенклатура);
				Запрос.УстановитьПараметр("Проект",СтрокаПроверки.Проект);
				Запрос.УстановитьПараметр("СтатьяОборотов",СтрокаПроверки.СтатьяОборотов);
				Запрос.УстановитьПараметр("Сценарий",Сценарий);
				Запрос.УстановитьПараметр("ЦФО",СтрокаПроверки.ЦФО);
				Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
				
				СуммаКонтроль=0;
				СуммаИсполнение=0;
				
				Результат = Запрос.Выполнить();
				Выборка=Результат.Выбрать();
				Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
					СуммаКонтроль=Выборка["СуммаКонтроль"];
					СуммаИсполнение=Выборка["СуммаИсполнение"]+СуммаСценария;
				КонецЕсли;
				
				Если СуммаИсполнение>СуммаКонтроль Тогда
					
					ТекстСообщения="Оборот приведет к превышению контролируемого значения!
					|Контролирующий сценарий: "+ ТекущийСценарий+"
					|Период планирования: "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаКонца,"ДФ=dd.MM.yyyy")+"
					|Статья оборотов: "+СтрокаПроверки.СтатьяОборотов;
					
					Если Не СтрокаПроверки.ЦФО.Пустая() Тогда
						
						ТекстСообщения=ТекстСообщения+"
						|ЦФО: "+СтрокаПроверки.ЦФО;
						
					КонецЕсли;
					
					Если Не СтрокаПроверки.Проект.Пустая() Тогда
						
						ТекстСообщения=ТекстСообщения+"
						|Проект: "+СтрокаПроверки.Проект;
						
					КонецЕсли;
					
					Если Не СтрокаПроверки.Контрагент.Пустая() Тогда
						
						ТекстСообщения=ТекстСообщения+"
						|Контрагент: "+СтрокаПроверки.Контрагент;
						
					КонецЕсли;
					
					Если Не СтрокаПроверки.Номенклатура=Неопределено Тогда
						
						ТекстСообщения=ТекстСообщения+"
						|Номенклатура: "+СтрокаПроверки.Номенклатура;
						
					КонецЕсли;
					
					ТекстСообщения=ТекстСообщения+"
					|Контролируемое значение: "+СуммаКонтроль+" "+Сценарий.Валюта+"
					|Значение с учетом суммы по заявке: "+СуммаИсполнение+" "+Сценарий.Валюта;
					
					Сообщить(ТекстСообщения);
					
					Если НЕ УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
						Возврат Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаПроверки.СуммаСценарияИсполнение=СуммаСценария;
				СтрокаПроверки.Период=ДатаНачала;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТабРезультата,ТабКонтролируемыхОборотов);
		
	КонецЦикла;
	
	Возврат ТабКонтролируемыхОборотов;
	
КонецФункции // ПроверкаКонтролируемыхЗначений()


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют)
	
		//АБС
			// регистр  абс_РасчетыПоСчетам
			Движения.абс_РасчетыПоСчетам.Записывать = Истина;
			Движения.абс_РасчетыПоСчетам.Очистить();		
			Движения.абс_РасчетыПоСчетам.Записать();
			Если не Отказ Тогда
				ВыполнитьКонтрольРасхода(Отказ);
			КонецЕсли;
			Для Каждого СтрТабОплат Из ЭтотОбъект.Оплаты Цикл
				Если ЗначениеЗаполнено(СтрТабОплат.Оплата) Тогда
					Движение = Движения.абс_РасчетыПоСчетам.Добавить();
					Движение.Период 					= Дата;
					Движение.Организация				= Организация;
					Движение.Счет 						= СтрТабОплат.СчетНаОплату;
					Движение.Оплата 					= СтрТабОплат.Оплата;
					
					Движение.СуммаВал                   = СтрТабОплат.Оплата.ВалютнаяСумма;
					Движение.Сумма                      = СтрТабОплат.Оплата.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;

	//АБс

	
	РасчетыВозврат    = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно = ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, -1, 1);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	СтруктураПараметров.Вставить("ЕстьРасчетыПоКредитам", ЕстьРасчетыПоКредитам);
	СтруктураПараметров.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметров.Вставить("ДатаРасхода", ДатаРасхода);
	ТабПроверкиОборотов = Бюджетирование.СформироватьТаблицуДляКонтроля(Ссылка, СтруктураПараметров);
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		НаборДвижений = Движения.КонтролируемыеЗначенияБюджетов;
		ТабКонтролируемыхЗначений=НаборДвижений.ВыгрузитьКолонки();
		
		ТабКонтролируемыхЗначений=ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки,ТабКонтролируемыхЗначений);
		
		Если ТипЗнч(ТабКонтролируемыхЗначений)=Тип("Булево") И НЕ ТабКонтролируемыхЗначений Тогда
			Сообщить("Превышение контролируемого значения. Проведение отменено!");
			Отказ=Истина;
			Возврат;
		Иначе
			
			Если ТабКонтролируемыхЗначений.Количество()>0 Тогда
				
				// По регистру "КонтролируемыеЗначенияБюджетов"
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Сценарий,"Сценарий");
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,"ИспользованиеКонтролируемогоЗначения");
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Истина,"Активность");
				
				НаборДвижений = Движения.КонтролируемыеЗначенияБюджетов;
				НаборДвижений.мТаблицаДвижений = ТабКонтролируемыхЗначений;
				
				Движения.КонтролируемыеЗначенияБюджетов.ВыполнитьДвижения();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазмещениеЗаявки.Количество()>0 Тогда
		
		ТабРазмещениеЗаявки=РазмещениеЗаявки.Выгрузить();
		ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
		
		НаборРазмещение=Движения.РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаРазмещение=НаборРазмещение.ВыгрузитьКолонки();
		
		НаборРезерв=Движения.ДенежныеСредстваВРезерве;
		ТаблицаРезерв=НаборРезерв.ВыгрузитьКолонки();
		
		Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
			
			Если Строка.МестоРазмещения=Неопределено Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Строка.МестоРазмещения)= Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
				
				ОстатокКРазмещению=УправлениеДенежнымиСредствами.ПолучитьНеразмещенныйостаток(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				
				Если ОстатокКРазмещению<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Размещаемая сумма превышает неразмещенный остаток
					|по "+Строка.МестоРазмещения+".
					|Возможный к использованию остаток: "+Формат(ОстатокКРазмещению,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
				СтрокаРазмещение=ТаблицаРазмещение.Добавить();
				СтрокаРазмещение.ДокументПланирования=Строка.МестоРазмещения;
				СтрокаРазмещение.ДокументРезервирования=Ссылка;
				СтрокаРазмещение.Сумма=Строка.СуммаПлатежа;
				
			Иначе
				
				// Проверяем остаток доступных денежных средств
				СвободныйОстаток=УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				Если СвободныйОстаток<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Резервируемая сумма превышает возможный к использованию остаток денежных средств
					|по "+Строка.МестоРазмещения.Наименование+".
					|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаРезерв=ТаблицаРезерв.Добавить();
				СтрокаРезерв.БанковскийСчетКасса=Строка.МестоРазмещения;
				СтрокаРезерв.Организация=Организация;
				СтрокаРезерв.ДокументРезервирования=Ссылка;
				СтрокаРезерв.ВидДенежныхСредств=ФормаОплаты;
				СтрокаРезерв.Сумма=Строка.СуммаПлатежа;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборРазмещение.мПериод=КонецДня(ДатаРасхода);
		НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
		Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьПриход();
		
		НаборРезерв.мПериод=ДатаРасхода;
		НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
		Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
		
	КонецЕсли;
	
	// По регистру "ЗаявкиНаРасходованиеСредств"
	
	НаборДвиженийЗаявки = Движения.ЗаявкиНаРасходованиеСредств;
	ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.ВыгрузитьКолонки();
	
	// По регистру "РасчетыСКонтрагентами"
	НаборДвиженийКонтрагенты = Движения.РасчетыСКонтрагентами;
	ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.ВыгрузитьКолонки();
	
	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов = Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ВалютаВзаиморасчетов = ВалютаДокумента;
		КонецЕсли;
		
		СтруктураКурсВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(
		ВалютаВзаиморасчетов, ?(ДатаРасхода = '00010101', Дата, КонецДня(ДатаРасхода)));
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		Платеж.СуммаВзаиморасчетов,
		ВалютаВзаиморасчетов, ,
		СтруктураКурсВзаиморасчетов.Курс, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
		СтруктураКурсВзаиморасчетов.Кратность, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
		
		СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДвиженийЗаявки, Платеж);
		
		СтрокаДвиженийЗаявки.СуммаУпр				= СуммаУпр;
		СтрокаДвиженийЗаявки.Сумма					= Платеж.СуммаПлатежа;
		СтрокаДвиженийЗаявки.ЗаявкаНаРасходование	= Ссылка;
		СтрокаДвиженийЗаявки.Организация			= Организация;
		СтрокаДвиженийЗаявки.Контрагент				= Контрагент;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
			
			СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
			СтрокаДвиженийКонтрагенты.ДоговорКонтрагента	= Платеж.ДоговорКонтрагента;
			СтрокаДвиженийКонтрагенты.Контрагент  		    = Контрагент;
			СтрокаДвиженийКонтрагенты.Организация  	   		= Организация;
			
			СтрокаДвиженийКонтрагенты.РасчетыВозврат		= РасчетыВозврат;
			СтрокаДвиженийКонтрагенты.Сделка				= Платеж.Сделка;
			СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов	= Платеж.СуммаВзаиморасчетов*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.СуммаУпр				= СуммаУпр*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.Период				= ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
			СтрокаДвиженийКонтрагенты.ВидДвижения			= ?(КоэффициентСторно = 1,ВидДвиженияНакопления.Приход,ВидДвиженияНакопления.Расход);
			СтрокаДвиженийКонтрагенты.Активность			= Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвиженийЗаявки.мПериод				= ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
	НаборДвиженийЗаявки.мТаблицаДвижений	= ТаблицаДвиженийЗаявки;
	Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьПриход();
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
		
		НаборДвиженийКонтрагенты.мТаблицаДвижений	= ТаблицаДвиженийКонтрагенты;
		НаборДвиженийКонтрагенты.ВыполнитьДвижения();
		
	КонецЕсли;
	
	//Если используется механизм согласования заявок, и заявка еще не прошла по маршуту утверждения 
	//	- добавим запись в регистр СостоянияСогласования
	НаборЗаписейСостояниеСогласования = РегистрыСведений.СостоянияСогласованияЗаявок.СоздатьНаборЗаписей();
	НаборЗаписейСостояниеСогласования.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписейСостояниеСогласования.Прочитать();
	Если УправлениеДенежнымиСредствами.ИспользуетсяСогласованиеЗаявок(Организация, Дата) Тогда
		Если НаборЗаписейСостояниеСогласования.Количество() > 1 Тогда
			//Заявка уже пошла по маршруту согласования
			Возврат;
		КонецЕсли;
		МаршрутСогласования = УправлениеДенежнымиСредствами.ОпределитьМаршрутСогласования(ЦФО);
		Если НЕ ЗначениеЗаполнено(МаршрутСогласования) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось определить маршрут согласования заявки", Отказ, Заголовок);
			Возврат;
		КонецЕсли;
		//Уже есть запись с правильным маршрутом согласования
		Если НаборЗаписейСостояниеСогласования.Количество() = 1 И
			НаборЗаписейСостояниеСогласования[0].Этап = МаршрутСогласования Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейСостояниеСогласования.Очистить();
		НоваяЗапись = НаборЗаписейСостояниеСогласования.Добавить();
		
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.Заявка = Ссылка;
		НоваяЗапись.Пользователь = Ответственный;
		НоваяЗапись.Этап = МаршрутСогласования;
		НоваяЗапись.Уровень = МаршрутСогласования.Уровень() + 1;
		НоваяЗапись.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
		
		НаборЗаписейСостояниеСогласования.Записать();
	ИначеЕсли НаборЗаписейСостояниеСогласования.Количество() > 0 Тогда
		//Если есть записи по этой заявке, а согласование не используется - очистим
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам() 
//АБС
Процедура ВыполнитьКонтрольРасхода(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	абс_РасчетыПоСчетамОбороты.Регистратор КАК Ссылка,
	               |	абс_РасчетыПоСчетамОбороты.Оплата
	               |ИЗ
	               |	РегистрНакопления.абс_РасчетыПоСчетам.Обороты(, &ДатаКон, Регистратор, Оплата В (&массивОплат)) КАК абс_РасчетыПоСчетамОбороты";
				   
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("массивОплат",ЭтотОбъект.Оплаты.ВыгрузитьКолонку("Оплата"));
	Запрос.УстановитьПараметр("ДатаКон", МоментВремени());

	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("По документу "+выборка.Оплата+" уже проведена заявка "+выборка.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

//АБС

// Процедура выполняет заполнение реквизита Получатель значением по умолчанию.
//
Процедура ЗаполнитьПолучателя(глТекущийПользователь)
	СписокЗначений = Новый СписокЗначений;
	
	ВремПолучатель = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнойПоставщик", СписокЗначений).Значение;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнойПокупатель", СписокЗначений).Значение;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ И ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнаяКассаККМ", СписокЗначений).Значение;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ВремПолучатель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПолучателя()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ОснованиеЗакупочныйЗаказ 	= Ложь;
	ОснованиеПлатеж				= Ложь;
	
	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		//Абсолют-Софт
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.абс_ЗакупочныйЗаказ") Тогда
			
			абс_ЗакупочныйЗаказ 		= Основание.Ссылка;
			ОснованиеЗакупочныйЗаказ 	= Истина;
                                        			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.абс_Платеж") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.абс_Платеж") Тогда
			
			абс_Платеж 					= Основание.Ссылка;
			ОснованиеПлатеж 			= Истина;
			      			
		Иначе
			//типовой функционал
			ДокументОснование = Основание;
		КонецЕсли;
		//Абсолют-Софт
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;
	
	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	
	глТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	Если НЕ ОснованиеЗакупочныйЗаказ ИЛИ НЕ ОснованиеПлатеж Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ДатаРасхода=Основание.ДатаОплаты;
		
		ДокументОснование = Основание;
		СтрокаПлатеж.ДоговорКонтрагента            = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов               = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов            = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				СтрокаПлатеж.Сделка=Основание;
			ИначеЕсли ТипЗнч(Основание.ДокументОснование)=Тип("ДокументСсылка.ЗаказПоставщику") 
				И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом) Тогда
				СтрокаПлатеж.Сделка=Основание.ДокументОснование;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВидОперации	= Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница)=Тип("СправочникСсылка.Кассы") Тогда
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			Иначе
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные;
			КонецЕсли;
			
			БанковскийСчетКасса = Основание.СтруктурнаяЕдиница;
		Иначе
			ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,КонецДня(ДатаРасхода));
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		КонецЕсли;
		
		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		
		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		
		Получатель                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		СтрокаПлатеж.Проект = Основание.Проект; //АБС-Пр2 10362
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда
		
		ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		Контрагент = Основание.Контрагент;
		ВалютаДокумента=Основание.ВалютаДокумента;
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		СтрокаПлатеж=РасшифровкаПлатежа[0];
		
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов=ВалютаДокумента;
		Иначе
			ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		// Получаем курсы валют
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
		СтруктураГруппаВалют.Вставить("ВалютаОперации",Основание.ВалютаДокумента.Код);
		
		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);
		
		КурсДокумента=СтруктураКурсыВалют.ВалютаДокументаКурс;
		КратностьДокумента=СтруктураКурсыВалют.ВалютаДокументаКратность;
		
		СтрокаПлатеж.КурсВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
		СтрокаПлатеж.КратностьВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;
		СтрокаПлатеж.Проект=Основание.Проект;
		ЦФО=Основание.ЦФО;
		Номенклатура=Основание.Номенклатура;
		
		КурсОперации=СтруктураКурсыВалют.ВалютаОперацииКурс;
		КратностьОперации=СтруктураКурсыВалют.ВалютаОперацииКратность;
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
		Основание.ВалютаДокумента, 
		ВалютаДокумента,
		КурсОперации, КурсДокумента,
		КратностьОперации, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
			ФормаОплаты =Перечисления.ВидыДенежныхСредств.Наличные;
			Контрагент	= Основание.Контрагент;
			
			СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
			
			СпособЗаполнения = "По сумме документа";
			
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			КонецЕсли;
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,Дата);
			СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
			
			Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
			Иначе
				ВалютаДокумента=мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от поставщика".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от подотчетника".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прием розничной выручки".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прочий приход денежных средств".
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками;
		ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
		Получатель  = Основание.ФизЛицо;
		РасчетныйДокумент = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;
		
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;
		
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
	ИначеЕсли ОснованиеЗакупочныйЗаказ = Истина Тогда
		
		ВидОперации 				= Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
		Контрагент  				= Основание.Контрагент;
		СтатьяОборотов 				= абс_ЗакупочныйЗаказ.БюджетнаяСтатья;
		СпособЗаполнения 			= Неопределено;
		ФормаОплаты					= Перечисления.ВидыДенежныхСредств.Безналичные;
		
		СтруктураКурсаВзаиморасчетов= МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Дата);
		КурсДокумента      			= СтруктураКурсаВзаиморасчетов.Курс;
		КратностьДокумента 			= СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если абс_ЗакупочныйЗаказ.Договоры.Количество() > 0 Тогда
			Для Каждого Инд из абс_ЗакупочныйЗаказ.Договоры Цикл
				
				СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
				
				СтрокаПлатеж.ДоговорКонтрагента			= Инд.ДоговорКонтрагента;
				СтрокаПлатеж.КурсВзаиморасчетов			= СтруктураКурсаВзаиморасчетов.Курс;
				СтрокаПлатеж.КратностьВзаиморасчетов	= СтруктураКурсаВзаиморасчетов.Кратность;
				СтрокаПлатеж.СуммаВзаиморасчетов		= Инд.Сумма; 
				СтрокаПлатеж.СуммаПлатежа				= Инд.Сумма;
				//АБС-Пр2 10362 В качестве Проекта заполняется Проект статьи во всех организациях
				СтрокаПлатеж.Проект                     = абс_ЗакупочныйЗаказ.ПроектСтатьи; 
			КонецЦикла;
		КонецЕсли;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ОснованиеПлатеж = Истина Тогда
		
	КонецЕсли;
	
	Если СпособЗаполнения = "По заказу" Тогда
		ЗаполнитьПоЗаказу(Основание,СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		Если ОснованиеЗакупочныйЗаказ = Ложь Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента;
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
			КонецЕсли;
			
			СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
			КурсОснования=СтруктураКурсаОснования.Курс;
			КратностьОснования=СтруктураКурсаОснования.Кратность;
			
			СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
			СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный");
	
	// Заполнить реквизиты значениями по умолчанию.
	УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, РасшифровкаПлатежа);
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ВидОперации);
	Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
		ЦФО = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	ЗаполнитьПолучателя(глТекущийПользователь);
	
	Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	
	//АБС ВСТАВКА №7900 НАЧАЛО
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.абс_ЗакупочныйЗаказ")
		или ТипЗнч(Основание) = Тип("ДокументСсылка.абс_Платеж") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.абс_Платеж") Тогда
		
		СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДС(Основание.БюджетнаяСтатья);
		Для каждого Строка Из РасшифровкаПлатежа Цикл
			Строка.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;	
		КонецЦикла;	
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №7900 КОНЕЦ
	
	//АБС-Пр2 6553+
	
	//-
	
КонецПроцедуры // ОбработкаЗаполнения()

//АБС ВСТАВКА №7900 НАЧАЛО
Функция ПолучитьСтатьюДДС(врБюджетнаяСтатья);
	
	врСтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДДС.БюджетнаяСтатья,
	               |	ДДС.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	ДДС.СтатьяДДС
	               |ИЗ
	               |	РегистрСведений.абс_СоответствияСтатейДДСИУправленческихСтатейЗатрат КАК ДДС
	               |ГДЕ
	               |	ДДС.БюджетнаяСтатья = &БюджетнаяСтатья
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НазначениеПлатежа";
				   
	Запрос.УстановитьПараметр("БюджетнаяСтатья",врБюджетнаяСтатья);			   
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		врСтатьяДДС = Результат.СтатьяДДС;	
	КонецЕсли;
	
	Возврат врСтатьяДДС;
	
КонецФункции
//\\АБС ВСТАВКА №7900 КОНЕЦ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")>СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|сумма размещения превышает сумму документа.");
		
		Отказ=Истина;
		
	КонецЕсли;
	
	СтруктураДанныхШапки=Новый Структура;
	
	СтруктураДанныхШапки.Вставить("СценарийПериодичность",Сценарий.Периодичность);
	СтруктураДанныхШапки.Вставить("СценарийВалюта",Сценарий.Валюта);
	
	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",мВалютаУправленческогоУчета.Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
	
	СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));
	
	//АБС ВСТАВКА №6820 НАЧАЛО
	КонтрольПоСтатусам = Константы.абс_ПроверкаДокументовПоСтатусамОтключить.Получить();
	Если НЕ КонтрольПоСтатусам Тогда
		абс_ПроверкаДокументовПоСтатусам(Отказ);
	КонецЕсли;	
	//\\АБС ВСТАВКА №6820 КОНЕЦ
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют);
		
	КонецЕсли;
	//Исаенко С.П. 09.11.2018 задача 1046
	Если Не Отказ Тогда
		Отказ = ttk_ОбщегоНазначения.ttk_ИспользованиеЗапрещенныхСтатейДДС(ЭтотОбъект);
	КонецЕсли;	
КонецПроцедуры

//АБС ВСТАВКА №6820 НАЧАЛО
Процедура абс_ПроверкаДокументовПоСтатусам(Отказ)
	//АБС ПОПОВ ЗАМЕНА	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату КАК СчетНаОплату,
	//					  |	NULL КАК ЗакупочныйЗаказ,
	//					  |	NULL КАК Оплата
	//					  |ПОМЕСТИТЬ ВременнаяТаблица
	//					  |ИЗ
	//					  |	Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	//					  |ГДЕ
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.Ссылка = &Ссылка
	//					  |	И (НЕ ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату = ЗНАЧЕНИЕ(документ.абс_СчетНаОплату.ПустаяСсылка))
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату
	//					  |
	//					  |ОБЪЕДИНИТЬ ВСЕ
	//					  |
	//					  |ВЫБРАТЬ
	//					  |	NULL,
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЗакупочныйЗаказ,
	//					  |	NULL
	//					  |ИЗ
	//					  |	Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	//					  |ГДЕ
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.Ссылка = &Ссылка
	//					  |	И (НЕ ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.Технический)
	//					  |	И (НЕ ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЗакупочныйЗаказ = ЗНАЧЕНИЕ(Документ.абс_ЗакупочныйЗаказ.ПустаяСсылка))
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЗакупочныйЗаказ
	//					  |
	//					  |ОБЪЕДИНИТЬ ВСЕ
	//					  |
	//					  |ВЫБРАТЬ
	//					  |	NULL,
	//					  |	NULL,
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.Оплата
	//					  |ИЗ
	//					  |	Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	//					  |ГДЕ
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.Ссылка = &Ссылка
	//					  |	И (НЕ ЗаявкаНаРасходованиеСредствОплаты.Оплата = ЗНАЧЕНИЕ(документ.абс_Оплата.ПустаяСсылка))
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	ЗаявкаНаРасходованиеСредствОплаты.Оплата
	//					  |
	//					  |ИНДЕКСИРОВАТЬ ПО
	//					  |	ЗакупочныйЗаказ,
	//					  |	СчетНаОплату
	//					  |;
	//					  |
	//					  |////////////////////////////////////////////////////////////////////////////////
	//					  |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//					  |	ЕСТЬNULL(ЕСТЬNULL(ВременнаяТаблица.СчетНаОплату, ВременнаяТаблица.ЗакупочныйЗаказ), ВременнаяТаблица.Оплата) КАК Документ
	//					  |ИЗ
	//					  |	ВременнаяТаблица КАК ВременнаяТаблица
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	ЕСТЬNULL(ЕСТЬNULL(ВременнаяТаблица.СчетНаОплату, ВременнаяТаблица.ЗакупочныйЗаказ), ВременнаяТаблица.Оплата)
	//					  |;
	//					  |
	//					  |////////////////////////////////////////////////////////////////////////////////
	//					  |УНИЧТОЖИТЬ ВременнаяТаблица");
					  
						  
	Результат = абс_БизнесПроцессыПривелегированный.ЗаявкаНаРасходованиеСредств_ПроверкаДокументовПоСтатусамЗапросВыборка(Ссылка).Выбрать();
	//\\АБС Попов Конец Замены                                                   
	Пока Результат.Следующий() Цикл
		Если ПроверкаСтатусаНаОтказ(Результат.Документ) Тогда
			
			Если НЕ Отказ Тогда 
				//Сообщить("У документа ""Счет на оплату"" должен быть статус:",СтатусСообщения.Информация);
				//Сообщить("- Утвержден",СтатусСообщения.Информация);
				//Сообщить("- Готов к оплате",СтатусСообщения.Информация);
				//Сообщить("- Оплачен",СтатусСообщения.Информация);
				//Сообщить("- Перенесен в ГК",СтатусСообщения.Информация);
				//Сообщить("- Подтвержден БУ",СтатусСообщения.Информация);
				Сообщить("У документа ""Оплата"" должен быть статус:",СтатусСообщения.Информация);
				//Сообщить("- Исполнение",СтатусСообщения.Информация);
				Сообщить("- Утвержден",СтатусСообщения.Информация);
				Сообщить("- Готов к оплате",СтатусСообщения.Информация);
				Сообщить("- Оплачен",СтатусСообщения.Информация);
				Сообщить("- Перенесен в ГК",СтатусСообщения.Информация);
				Сообщить("- Подтвержден БУ",СтатусСообщения.Информация);				
				Сообщить("Для документа ""Закупочный заказ"" должен быть статус ""Согласован"" или ""Исполнение""",СтатусСообщения.Информация);					
			КонецЕсли;
			
			Отказ = Истина;
			Сообщить("Документ не прошел контроль статусов - "+Результат.Документ,СтатусСообщения.Важное);
			
		КонецЕсли;			
	КонецЦикла;	

КонецПроцедуры   

Функция ПроверкаСтатусаНаОтказ(ДокументДляКонтроля)
	
	Отказ = Ложь;
	
	//Если ТипЗнч(ДокументДляКонтроля) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда
	//	Если НЕ ДокументДляКонтроля.СтатусСчета = Перечисления.абсСтатусыСчетов.ГотовКОплате
	//		и НЕ ДокументДляКонтроля.СтатусСчета = Перечисления.абсСтатусыСчетов.ОтправленВБанк
	//		и НЕ ДокументДляКонтроля.СтатусСчета = Перечисления.абсСтатусыСчетов.Утвержден
	//		и НЕ ДокументДляКонтроля.СтатусСчета = Перечисления.абсСтатусыСчетов.ПеренесенВГК
	//		и НЕ ДокументДляКонтроля.СтатусСчета = Перечисления.абсСтатусыСчетов.Оплачен Тогда
	//		Отказ = Истина;	
	//	КонецЕсли;	
	//КонецЕсли;
	
	//АБС ИЗМЕНЕНИЕ №7080 НАЧАЛО
	Если ТипЗнч(ДокументДляКонтроля) = Тип("ДокументСсылка.абс_Оплата") Тогда
		Если НЕ ДокументДляКонтроля.СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате
			и НЕ ДокументДляКонтроля.СтатусОплаты = Перечисления.абсСтатусыСчетов.ОтправленВБанк
			и НЕ ДокументДляКонтроля.СтатусОплаты = Перечисления.абсСтатусыСчетов.Утвержден
			//АБС ИЗМЕНЕНИЕ №7080 НАЧАЛО
			//и НЕ ДокументДляКонтроля.СтатусОплаты = Перечисления.абсСтатусыСчетов.Исполнение
			//\\АБС ИЗМЕНЕНИЕ №7080 НАЧАЛО
			и НЕ ДокументДляКонтроля.СтатусОплаты = Перечисления.абсСтатусыСчетов.ПеренесенВГК
			и НЕ ДокументДляКонтроля.СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен Тогда
			Отказ = Истина;	
		КонецЕсли;	
	КонецЕсли;
	//\\АБС ИЗМЕНЕНИЕ №7080 НАЧАЛО
	
	Если ТипЗнч(ДокументДляКонтроля) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда
		Если НЕ ДокументДляКонтроля.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
		     и НЕ ДокументДляКонтроля.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
			 Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;	
		
	Возврат Отказ;
	
КонецФункции	
//\\АБС ВСТАВКА №6820 КОНЕЦ

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Удаление движений по регистру СостоянияСогласованияЗаявок, если заявка была подготовлена
	НаборЗаписейСостояниеСогласования = РегистрыСведений.СостоянияСогласованияЗаявок.СоздатьНаборЗаписей();
	НаборЗаписейСостояниеСогласования.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписейСостояниеСогласования.Прочитать();
	Если НаборЗаписейСостояниеСогласования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если УправлениеДенежнымиСредствами.ИспользуетсяСогласованиеЗаявок(Организация, Дата) Тогда
		Если НаборЗаписейСостояниеСогласования.Количество() > 1 Тогда
			//Заявка уже пошла по маршруту согласования, не следует ничего менять
			Возврат;
		КонецЕсли;
		//Если в наборе записей только одна запись - значит заявка только подготовлена.
		//Очистим набор записей
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	ИначеЕсли НаборЗаписейСостояниеСогласования.Количество() > 0 Тогда
		//Если есть записи по этой заявке, а согласование не используется - очистим
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСчетаЗаказы(Отказ);
	
	Если Отказ Тогда
		Сообщить("В заявке на расходование ДС не заполнена табличная часть Счета на оплату.");
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ УправлениеДенежнымиСредствами.РазрешеноИзменениеЗаявки(Ссылка, ТекстОшибки) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ,,, Ссылка);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПроверитьСчетаЗаказы(Отказ)
	
	ЕстьСчета = Ложь;
	
	Для Каждого СтрокаСчета Из Оплаты Цикл
		
		ЕстьСчета = ЗначениеЗаполнено(СтрокаСчета.СчетНаОплату) И ЗначениеЗаполнено(СтрокаСчета.Оплата);
		
	КонецЦикла;
	
	Отказ = НЕ ЕстьСчета;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
	// Заполнить реквизиты значениями по умолчанию.
	УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, РасшифровкаПлатежа,, ОбъектКопирования);
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ВидОперации);
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПроверяемыеРеквизиты.Добавить("Контрагент");
		
		// АБС Вставка
		ПроверятьДоговор = 1;
		Для каждого Строчка из Оплаты Цикл
			Если Строчка.СчетНаОплату<>Неопределено Тогда
				Если Строчка.СчетНаОплату.Технический = Истина Тогда
					ПроверятьДоговор = 0;
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		// АБС Вставка
		Если ПроверятьДоговор = 1 Тогда
			ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		КонецЕсли;	
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ПроверяемыеРеквизиты.Добавить("Получатель");
		ПроверяемыеРеквизиты.Добавить("ВалютаВзаиморасчетовПодотчетника");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
	Иначе
		
		ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");
		
	КонецЕсли;
	
	Если ВключатьВПлатежныйКалендарь Тогда
		
		ПроверяемыеРеквизиты.Добавить("ФормаОплаты");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		
		Если ПроверяемыеРеквизиты.Найти("ВалютаДокумента") = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");			
		КонецЕсли; 
	КонецЕсли;
	
	ПроверитьЗаполнениеТЧ(Отказ);
	
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета=глЗначениеПеременной("ВалютаУправленческогоУчета");

