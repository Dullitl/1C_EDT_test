  
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция УжеЕстьДокумент()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_РаспоряжениеНаЗакупку.Ссылка
	|ИЗ
	|	Документ.абс_РаспоряжениеНаЗакупку КАК абс_РаспоряжениеНаЗакупку
	|ГДЕ
	|	абс_РаспоряжениеНаЗакупку.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции 

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить( "РаспоряжениеНаЗакупку",    "Распоряжение на закупку");
	
	Возврат СтруктПечатныхФорм;
	
КонецФункции

Процедура ПечатьРаспоряженияНаЗакупку(ТабДок) Экспорт
	
	//ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("РаспоряжениеНаЗакупку");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Ссылка);
	ОбластьМакета.Параметры.Организация = СокрЛП(Организация.НаименованиеПолное);
	ОбластьМакета.Параметры.ОрганизацияСокр = СокрЛП(Организация.Наименование);
	ОбластьМакета.Параметры.ПериодИСрокПоставки  = абс_СлужебныеФункции.ВернутьНазваниеМесяца(ПериодИСрокПоставки) + " " + Формат(ПериодИСрокПоставки,"ДФ=yyyy") + " г.";
	ОбластьМакета.Параметры.СуммаСНДС            = Формат(СуммаСНДС,"ЧЦ=15; ЧДЦ=2");
	ОбластьМакета.Параметры.СтрокаШапки =  СтрокаШапки;
	//ОбластьМакета.Параметры.Год = Формат(ПериодИСрокПоставки,"ДФ=yyyy");
	ОбластьМакета.Параметры.ДеньМесяц  = Формат(ПериодИСрокПоставки,"ДЛФ=DD");
	
	мОтветственныйЗаКонтрольПоРаспоряжению = ОтветственныйЗаКонтрольПоРаспоряжению.Наименование;
	
	УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), мОтветственныйЗаКонтрольПоРаспоряжению, 2, ОтветственныйЗаКонтрольПоРаспоряжению.Физлицо.Пол, мОтветственныйЗаКонтрольПоРаспоряжению);
	
	ОбластьМакета.Параметры.ОтветственныйЗаКонтрольПоРаспоряжению = мОтветственныйЗаКонтрольПоРаспоряжению;
	ОбластьМакета.Параметры.ДеньМесяцРешения  = Формат(ДатаРаспоряжения,"ДЛФ=DD");
	ТабДок.Вывести(ОбластьМакета);
	//ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	//ОбластьМакета=Макет.ПолучитьОбласть("Шапка2");
	//ОбластьМакета.Параметры.Контрагент           = СокрЛП(Контрагент.Наименование);
	//ОбластьМакета.Параметры.НаименованиеТовара   = СокрЛП(НаименованиеТовара);
	//ТабДок.Вывести(ОбластьМакета);
	//
	//Для каждого Стр Из Согласующие Цикл
	//	ОбластьМакета=Макет.ПолучитьОбласть("Строка");
	//	ОбластьМакета.Параметры.ФИО       = Стр.Пользователь.Наименование;
	//	ОбластьМакета.Параметры.Должность = Стр.Пользователь.абс_Сотрудник.Должность.Наименование;
	//	ОбластьМакета.Параметры.Дата      = Формат(абс_СерверныеФункции.ПолучитьДатуСервера(),"ДФ=dd.MM.yyyy");
	//	ТабДок.Вывести(ОбластьМакета);
	//КонецЦикла;
	//
	//ОбластьМакета=Макет.ПолучитьОбласть("Подвал");
	//ТабДок.Вывести(ОбластьМакета);
	
	//Возврат ТабДок;	
	
КонецПроцедуры 

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	//Если ЭтоНовый() Тогда
	//	Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
	//	Возврат;
	//ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	//ТабДокумент = ПечатьРаспоряженияНаЗакупку();
	//
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать

//Функция ПолучитьСписокДоступныхСтатусов(мТекущийПользователь,мРОлиПользователяПоОрганизации,ЭтоНовыйДокумент) Экспорт 
//	МассивСтатусов = Новый Массив;
//	МассивСтатусов.Добавить(Статус);
//	
//	ДоступнаРольИнициатор         = мРОлиПользователяПоОрганизации.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании);
//	
//	Если Не ЭтоНовыйДокумент Тогда
//		Если Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.Подготовка и ДоступнаРольИнициатор <> Неопределено Тогда
//			МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеРуководителемДепартамента);
//		ИначеЕсли Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеРуководителемДепартамента и мРОлиПользователяПоОрганизации.Найти(Справочники.РолиИсполнителей.РуководительДепартамента) <> Неопределено Тогда	
//			МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеДЭБ);
//		ИначеЕсли Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеДЭБ и мРОлиПользователяПоОрганизации.Найти(Справочники.РолиИсполнителей.СогласованиеДЭБ) <> Неопределено Тогда
//			МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеПД);
//		ИначеЕсли Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеПД и мРОлиПользователяПоОрганизации.Найти(Справочники.РолиИсполнителей.СогласованиеПД) <> Неопределено Тогда
//			МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеОФК);
//		ИначеЕсли Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеОФК и мРОлиПользователяПоОрганизации.Найти(Справочники.РолиИсполнителей.РуководительОФК) <> Неопределено Тогда
//			МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеДирКСП);
//		ИначеЕсли Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеДирКСП и  мРОлиПользователяПоОрганизации.Найти(Справочники.РолиИсполнителей.СогласованиеДирКСП) <> Неопределено Тогда
//			МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.ДопСогласование);
//			МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.Согласован);
//		ИначеЕсли Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.ДопСогласование Тогда
//			
//			Если глЗначениеПеременной("глТекущийПользователь") = ПользовательДопСогласование Тогда
//				МассивСтатусов.Добавить(Перечисления.абс_СтатусыРаспоряженияНаЗакупку.Согласован);
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЕсли;

//	Возврат МассивСтатусов;
//КонецФункции	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("Организация", "Не заполнена организация!");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

//Процедура ЗаписатьСтатусВРегистр() Экспорт
//	
//	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовРаспоряженияНаЗакупку.СоздатьНаборЗаписей();
//	
//	НаборЗаписей.Отбор.РаспоряжениеНаЗакупку.Установить(Ссылка);
//	НаборЗаписей.Прочитать();
//	
//	Запись = НаборЗаписей.Добавить();
//	Запись.Период               		= абс_СерверныеФункции.ПолучитьДатуСервера();
//	
//	Запись.РаспоряжениеНаЗакупку		= Ссылка;
//	Запись.Пользователь	 				= глЗначениеПеременной("глТекущийПользователь");	
//	Запись.СтатусРаспоряженияНаЗакупку 	= Статус;
//	Запись.ВнутреннийНомер     			= Запись.Пользователь.абс_ВнутреннийНомер;
//	
//	Запись.Комментарий 					= СтрокаПричиныИзмененияСтатуса;
//	
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры

//Функция НайтиБПСогласование() Экспорт
//	
//	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоРаспоряжениюНаЗакупку(Ссылка);
//	
//КонецФункции

//Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)
//	
//	Если НЕ ЗадачаСогласование.Выполнена Тогда
//		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
//		ЗадачаОбъект.ВыполнитьЗадачу();
//	КонецЕсли;	
//	
//КонецПроцедуры

//Функция НайтиЗадачуПоРаспоряжению(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина)
//	
//	ОтборПоИсполнителю = Ложь;
//	МассивЗадач = Новый Массив;
//	
//	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
//							   |	абсЗадачаДоговора.Ссылка
//							   |ИЗ
//							   |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
//							   |ГДЕ
//							   |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
//							   |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
//							   |
//							   |УПОРЯДОЧИТЬ ПО
//							   |	абсЗадачаДоговора.Дата УБЫВ");
//							   
//							   
//	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
//	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
//	ЗапросЗадач.УстановитьПараметр("Исполнитель"		, Исполнитель);
//	ЗапросЗадач.УстановитьПараметр("ОтборПоИсполнителю"	, ОтборПоИсполнителю);
//	
//	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
//	
//	ЗадачаСсылка = Неопределено;
//	
//	Если ВыборкаЗадач.Следующий() Тогда
//		МассивЗадач.Добавить(ВыборкаЗадач.Ссылка);
//	КонецЕсли;
//	
//	Возврат МассивЗадач;
//	
//КонецФункции

//Функция ПолучитьЗадачуПоРаспоряжениюНаЗакупку()
//	
//	БП = НайтиБПСогласование();
//	
//	Если БП = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	СпТочек = Новый Массив;
//	ТекСтатус = Ссылка.Статус;
//	
//	Если ТекСтатус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.Подготовка Тогда
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.Отказ);	
//	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеРуководителемДепартамента Тогда
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.Подготовка);	
//	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеДЭБ Тогда
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.Подготовка);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеРуководителемДепартамента);	
//	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеПД Тогда
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.Подготовка);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеРуководителемДепартамента);	
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеДЭБ);
//	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеОФК Тогда
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.Подготовка);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеРуководителемДепартамента);	
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеДЭБ);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеПД);
//	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.СогласованиеДирКСП Тогда
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.Подготовка);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеРуководителемДепартамента);	
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеДЭБ);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеПД);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеОФК);
//	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.ДопСогласование Тогда
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.Подготовка);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеРуководителемДепартамента);	
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеДЭБ);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеПД);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеОФК);
//		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеРаспоряженияНаЗакупку.ТочкиМаршрута.СогласованиеДирКСП);
//	КонецЕсли;	
//	
//	Возврат НайтиЗадачуПоРаспоряжению(БП, СпТочек,,Ложь);
//КонецФункции

Процедура ПриЗаписи(Отказ)
	Перем Заголовок, СтруктураШапкиДокумента;	
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Если ДокументОснование.СпособЗакупки <> Перечисления.абс_СпособыЗакупки.ЕдиныйПоставщик Тогда
	//	ttk_ОбщегоНазначения.СообщитьОбОшибке(Строка(Ссылка) + ": " + "Документ вводится для способа закупки ""Единственный поставщик""!");
	//	Отказ = Истина;	
	//КонецЕсли;
	
	//Если Не Отказ Тогда
	//	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусРаспоряженияНаОтгрузкуПоРегистру(Ссылка);
	//	
	//	Если НЕ Статус = СтатусПоРегистру Тогда 
	//		ЗаписатьСтатусВРегистр();
	//		
	//		Если Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.Согласован Тогда
	//			абс_БизнесПроцессыПривелегированный.ПроверитьСтатусКонкурснойДокументации(ДокументОснование);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	
	//	Если Статус = Перечисления.абс_СтатусыРаспоряженияНаЗакупку.Подготовка Тогда
	//		
	//		БизнесПроцессЗапущен = Ложь;
	//		// Запустим БП если он еще не запущен
	//		БПСогласование = НайтиБПСогласование();
	//		
	//		Если Не ЗначениеЗаполнено(БПСогласование) Тогда
	//			абс_БизнесПроцессы.ЗапуститьБПСогласованияРаспоряженияНаЗакупку(Ссылка);
	//		Иначе
	//			БизнесПроцессЗапущен = Истина;
	//		КонецЕсли;	
	//	КонецЕсли;
	//	
	//	Если Статус <> Перечисления.абс_СтатусыРаспоряженияНаЗакупку.Подготовка  Тогда
	//		БизнесПроцессЗапущен = Истина;
	//	КонецЕсли;	
	//	
	//	
	//	//Закрытие задач
	//	Если НЕ Статус = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда
	//		Если БизнесПроцессЗапущен Тогда
	//			// Попробуем закрыть задачу согласования
	//			ЗадачаСогласование = ПолучитьЗадачуПоРаспоряжениюНаЗакупку();
	//			
	//			Если НЕ ЗадачаСогласование = Неопределено Тогда
	//				Для Каждого Стр Из ЗадачаСогласование Цикл
	//					ВыполнитьЗадачуСогласование(Стр);
	//				КонецЦикла;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	ВерсионированиеОбъектов.абс_ВерсионированиеОбъектов_ПриЗаписиОбъектаПриЗаписи(Ссылка, Отказ)

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//ДокументОснование  = ДанныеЗаполнения;
	//Контрагент         = ДанныеЗаполнения.Контрагент;
	//СуммаБезНДС        = ДанныеЗаполнения.Спецификация.Итог("СуммаБезНДС");
	//СуммаСНДС          = ДанныеЗаполнения.Спецификация.Итог("СуммаСНДС");
	//
	//Если ДанныеЗаполнения.Спецификация.Количество() = 1 Тогда
	//	НаименованиеТовара = ДанныеЗаполнения.Спецификация[0].ПотребностьСтрока;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если ЭтоНовый() Тогда
	//	Если УжеЕстьДокумент() Тогда
	//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Для конкурсной документации уже введено распоряжение на закупку!");
	//		Отказ = Истина;	
	//	КонецЕсли;	
	//	
	//	Если ЗначениеЗаполнено(ДокументОснование) Тогда
	//		Если ДокументОснование.СпособЗакупки <> Перечисления.абс_СпособыЗакупки.ЕдиныйПоставщик Тогда
	//			ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ вводится для способа закупки ""Единственный поставщик""!");
	//			Отказ = Истина;	
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
	//		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ должен вводится на основании конкурсной документации!");
	//		Отказ = Истина;	
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры




