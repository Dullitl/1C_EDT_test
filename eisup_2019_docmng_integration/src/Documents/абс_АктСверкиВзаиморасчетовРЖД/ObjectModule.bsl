Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда	
Перем НП Экспорт; // Настройка периода
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

#Если Клиент Тогда	
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	//Если ИмяМакета = "АктСверки" Тогда
	//	// Получить экземпляр документа на печать
	//	ТабДокумент = ПечатьАктаСверки();
	//	
	//ИначеЕсли ИмяМакета = "АктСверкиПечатьПодпись" Тогда
	//	
	//	ТабДокумент = ПечатьАктаСверкиПечатьПодпись();
	//	
	//ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат
	//	КонецЕсли; 
	//	
	//КонецЕсли;
	
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать
#КонецЕсли

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		Статус = Перечисления.абс_СтатусыАктСверкиВзаиморасчетовРЖД.Подготовка;
	КонецЕсли;
	 
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПоДаннымОрганизации.Очистить();		
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Для Каждого строка из ПоДаннымОрганизации Цикл 
		
		Если НЕ ЗначениеЗаполнено(строка.ВнутрихолдинговаяОперацияРЖД) Тогда 
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.абс_СоответствиеДоговоровВнутрихолдинговымОперациямРЖД.ЗаписатьОперацию(
									строка.ДоговорКонтрагента, строка.ВнутрихолдинговаяОперацияРЖД);
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОКУМЕНТА

Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов = неопределено) Экспорт
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	МассивСчетов = ПолучитьФильтрСписокСчетов();
	
	Если МассивСчетов = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    			?(НЕ ЗначениеЗаполнено(ДатаНачала),    Неопределено, ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", 			?(НЕ ЗначениеЗаполнено(ДатаОкончания), Неопределено, Новый Граница(КонецДня(ДатаОкончания),ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("Организация",   			Организация);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", 	МассивСчетов);
	Запрос.УстановитьПараметр("АналитикаРасчетов",   	АналитикаРасчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
	|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|	абс_КонтрагентыРЖДСрезПоследних.КодРЖД,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК Дебет,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Кредит,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1.ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Организация.абс_КодРЖД КАК КодКонтрагентаРЖД,
	|	абс_КонтрагентыРЖДСрезПоследних.КодРЖД КАК КодКонтрагентаПартнераРЖД,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).Дата КАК ДатаДоговора,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).Номер КАК НомерДоговора,
	|	ХозрасчетныйОбороты.Регистратор.Номер КАК НомерПервичногоДокумента,
	|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
	|	ПОДСТРОКА(ХозрасчетныйОбороты.Валюта.Наименование, 0, 3) КАК КодВалюты,
	|	ЕСТЬNULL(абс_СоответствиеДоговоровВнутрихолдинговымОперациямРЖД.ВнутрихолдинговаяОперацияРЖД, ЗНАЧЕНИЕ(Справочник.абс_ВнутрихолдинговыеОперацииРЖД.ПустаяСсылка)) КАК ВнутрихолдинговаяОперацияРЖД,
	|	ЕСТЬNULL(абс_СоответствиеДоговоровВнутрихолдинговымОперациямРЖД.ВнутрихолдинговаяОперацияРЖД.Код, """") КАК КодВнутрихолдинговойОперации,
	|	абс_КонтрагентыРЖДСрезПоследних.КонтрагентЕИСУП
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Счет В ИЕРАРХИИ (&ФильтрСписокСчетов), &АналитикаРасчетов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.абс_КонтрагентыРЖД.СрезПоследних(, Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Пустаяссылка)) КАК абс_КонтрагентыРЖДСрезПоследних
	|		ПО ХозрасчетныйОбороты.Субконто1 = абс_КонтрагентыРЖДСрезПоследних.КонтрагентЕИСУП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_СоответствиеДоговоровВнутрихолдинговымОперациямРЖД КАК абс_СоответствиеДоговоровВнутрихолдинговымОперациямРЖД
	|		ПО ХозрасчетныйОбороты.Субконто2 = абс_СоответствиеДоговоровВнутрихолдинговымОперациямРЖД.ДоговорКонтрагента
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (&ФильтрСписокСчетов)
	|				ТОГДА (НЕ(ХозрасчетныйОбороты.КорСубконто1 = ХозрасчетныйОбороты.Субконто1
	|							И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);				
		НоваяСтрока.Представление = ПолучитьПредставлениеОперации(Выборка, МассивПрефиксов);
		
	КонецЦикла;
							  
	ПоДаннымОрганизации.Загрузить(НаборДвижений);

КонецПроцедуры

Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)

	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат = 
		ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	 
	Возврат Результат;

КонецФункции 

Функция ПолучитьПредставлениеОперации(Выборка, МассивПрефиксов)
	
	Представление = "";
	
	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
			
		ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			Представление = "Курсовые разницы";
		ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
			Представление = "Санкции";
		ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
			Представление = "Суммовые разницы";
		Иначе
			Представление = Строка(Выборка.КорСубконто1);
		КонецЕсли;
		
	КонецЕсли;
	
	Если не ПустаяСтрока(Представление) Тогда
		// Строка уже отработана
		
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
		или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
		Если (Выборка.Дебет >0) Тогда
			Представление = "Возврат займа";
		ИначеЕсли (Выборка.Кредит >0)Тогда
			Представление = "Займ";
		Иначе
			Представление = "Операции по займам";
		КонецЕсли;
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
		или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
		или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
		или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
		или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
		или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ
		тогда
		Представление = "Претензия";
		
	ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
		или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
		или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) 
		тогда
		
		Если (Выборка.Кредит >0) Тогда
			
			Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
				Представление = "Возврат средств";
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Представление = "Оплата";
				
			Иначе
				Представление = "Перевод средств";
			КонецЕсли;
			
		ИначеЕсли (Выборка.Дебет >0) Тогда
			Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
				Тогда
				
				Представление = "Оплата";
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Представление = "Возврат средств";
				
			Иначе
				Представление = "Перевод средств";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
		или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
		тогда
		Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
			Если Выборка.Дебет <> 0 Тогда
				Представление = "Оплата";
			Иначе
				Представление = "Приход";
			КонецЕсли;
		ИначеЕсли (Выборка.Кредит <>0) Тогда
			Представление = "Приход";
		КонецЕсли;
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
		Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
			Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
				Представление = "Суммовая разница";
			ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
				Представление = "Продажа";
			Иначе
				Если Выборка.Дебет > 0 Тогда
					Представление = "Продажа";
				ИначеЕсли Выборка.Дебет < 0 Тогда
					Представление = "Возврат";
				Иначе
					Представление = "Оплата";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Представление)Тогда
		Если Выборка.Дебет > 0 тогда
			Представление = "Принято";
		ИначеЕсли Выборка.Дебет < 0 тогда
			Представление = "Сторно: принято";
		ИначеЕсли Выборка.Кредит > 0 тогда
			Представление = "Передано";
		Иначе
			Представление = "Сторно: передано";
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.НомерВходящегоДокумента = Неопределено тогда
		Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.ОперацияБух") Тогда
			Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
		Иначе
			Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
		КонецЕсли;
	Иначе
		Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
		?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
	КонецЕсли;	
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьФильтрСписокСчетов()
	
	КоличествоСчетов = СписокСчетов.Количество();
	ФильтрСписокСчетов = Новый массив();
	Для каждого СтрокаСчета Из СписокСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
			Продолжить;
		Иначе
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ФильтрСписокСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА В ФАЙЛ

Функция ВыгузитьФайл() Экспорт
	
	ДокументФайл = Новый ТекстовыйДокумент;
	
	СоотвествиеПолей = Новый Массив;
	СоотвествиеПолей.Добавить("КодКонтрагентаРЖД");      		//CONTRID
	СоотвествиеПолей.Добавить("КодКонтрагентаПартнераРЖД");     //PCONTRID
	СоотвествиеПолей.Добавить("КодВнутрихолдинговойОперации");  //VAI
	СоотвествиеПолей.Добавить("НомерДоговора");                 //CONTRNUM
	СоотвествиеПолей.Добавить("ДатаДоговора");                	//CONTRDATE
	СоотвествиеПолей.Добавить("НомерПервичногоДокумента");     	//DOCNUM
	СоотвествиеПолей.Добавить("Дата");                         	//DOCDATE
	СоотвествиеПолей.Добавить("Сумма");                        	//V_TRA_SRC
	СоотвествиеПолей.Добавить("Примечания");                   	//NOTES
	СоотвествиеПолей.Добавить("КодВалюты");                   	//TCUR
	
	Разделитель = "|";
	
	Для Каждого строка из ПоДаннымОрганизации Цикл 
		ДокументФайл.ДобавитьСтроку(СформироватьСтрокуОборотов(СоотвествиеПолей, строка, Разделитель));		
	КонецЦикла;
	
	Возврат ДокументФайл; 
	
КонецФункции

Функция СформироватьСтрокуОборотов(СоотвествиеПолей, строкаТаблицы, Разделитель)
	
	строкаФайла = "";
	
	Для Каждого Поле из СоотвествиеПолей Цикл
		строкаФайла = строкаФайла + ПолучитьПредставлениеПоля(строкаТаблицы[Поле]) + Разделитель; 	
	КонецЦикла;
	
	Возврат строкаФайла;
	
КонецФункции

Функция ПолучитьПредставлениеПоля(Поле)
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда 
		Возврат Формат(Поле, "ДФ=ггггММдд; ДП=00000000");
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда 
		ПредставлениеПоля = Формат(Поле, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН='                 '; ЧГ=0; ЧО=3");
		Возврат ПолучитьСтрокуПробелов(17 - СтрДлина(ПредставлениеПоля)) + ПредставлениеПоля;
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

Функция ПолучитьСтрокуПробелов(Длина)
	
	СтрокаВозврата = "";
	
	Для й = 1 по Длина Цикл 
		СтрокаВозврата = СтрокаВозврата + " ";
	КонецЦикла;
	
	Возврат СтрокаВозврата;
	
КонецФункции

Процедура СохранитьФайлВДокумент(Файл, ПутьКФайлу) Экспорт
		
	строка = ВыгруженныеФайлы.Добавить();
	строка.ДатаВыгрузки = ТекущаяДата();
	строка.ПутьКФайлуВыгрузки = ПутьКФайлу;
	строка.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	ХранилищеФайла = Новый ХранилищеЗначения(Файл.ПолучитьТекст());	
	строка.Файл = ХранилищеФайла; 
	
	Если Статус = Перечисления.абс_СтатусыАктСверкиВзаиморасчетовРЖД.Подготовка Тогда 
		Статус = Перечисления.абс_СтатусыАктСверкиВзаиморасчетовРЖД.ОтправленРЖД;
	КонецЕсли;
	
	Записать();
			
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
