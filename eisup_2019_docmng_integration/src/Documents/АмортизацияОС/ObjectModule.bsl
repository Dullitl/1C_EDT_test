
Перем ПровестиОтложенно  Экспорт;
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Проверяет правильность заполнения шапки документа по рег учету.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ПериодРегистрации");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет движения по регистрам упр
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок, СписокОС = Неопределено)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДок = КонецМесяца(ПериодРегистрации);

	ТабАмортизации = Новый ТаблицаЗначений;
	
    //абс начало
	Если НЕ ЗначениеЗаполнено(абс_ОС) И НЕ ЗначениеЗаполнено(СписокОС) Тогда
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииУпр(ДатаДок);
	ИначеЕсли ЗначениеЗаполнено(абс_ОС) Тогда
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииУпр(ДатаДок, абс_ОС);
	ИначеЕсли ЗначениеЗаполнено(СписокОС) Тогда
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииУпр(ДатаДок, СписокОС);
	КонецЕсли;
    //абс конец
		
	ТабАмортизации.Колонки.Упр.Имя = "Сумма";
	ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	Если НЕ Отказ Тогда

		НаборДвижений   = Движения.СтоимостьОС;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		Для Каждого СтрокаТЧ из ТабАмортизации Цикл

			Если СтрокаТЧ.Сумма > 0 Тогда

				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
				СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

			КонецЕсли;

		КонецЦикла;

		НаборДвижений.мПериод          = ДатаДок;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		Движения.СтоимостьОС.ВыполнитьПриход();

	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам регл
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок, СписокОС = Неопределено)

	Если Не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕслИ;

	ДатаДок = КонецМесяца(ПериодРегистрации);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
        //абс начало
		Если НЕ ЗначениеЗаполнено(абс_ОС) И НЕ ЗначениеЗаполнено(СписокОС) Тогда
			ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(ДатаДок,СтруктураШапкиДокумента.Организация);
		ИначеЕсли ЗначениеЗаполнено(абс_ОС) Тогда
			ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(ДатаДок,СтруктураШапкиДокумента.Организация, абс_ОС);
		ИначеЕсли ЗначениеЗаполнено(СписокОС) Тогда
			ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(ДатаДок,СтруктураШапкиДокумента.Организация, СписокОС);
		КонецЕсли;
        //абс конец
		
		ТабАмортизацииБУ = ТабАмортизации;
		ТабАмортизацииБУ.Колонки.Добавить("СчетУчета");
		ТабАмортизацииБУ.Колонки.Добавить("СчетАмортизацииНУ");
		мКэшСчетов = Новый Соответствие; 
		Для Каждого Строка Из ТабАмортизацииБУ Цикл
			СчетНУСоответствующийСчетуБУ = мКэшСчетов[Строка.СчетУчетаБУ];
			Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Строка.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов.Вставить(Строка.СчетУчетаБУ, СчетНУСоответствующийСчетуБУ);
			КонецЕсли;
			Строка.СчетУчета = СчетНУСоответствующийСчетуБУ;
			СчетНУСоответствующийСчетуБУ = мКэшСчетов[Строка.СчетАмортизацииБУ];
			Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Строка.СчетАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов.Вставить(Строка.СчетАмортизацииБУ, СчетНУСоответствующийСчетуБУ);
			КонецЕсли;
			Строка.СчетАмортизацииНУ = СчетНУСоответствующийСчетуБУ;
			
		КонецЦикла;
		
		ТабАмортизации.Колонки.Бух.Имя = "Сумма";
		ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
		ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
		
		мПроводкиБУ = Движения.Хозрасчетный;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
		//АБС_Попов  закоментировано для анализа движения при проведении по бюджетным оборотам  

		//мПроводкиБУ.Записать(Ложь);
		//\\АБС_Попов


		Если НЕ Отказ Тогда

			НаборДвижений   = Движения.СтоимостьОСБухгалтерскийУчет;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			Для Каждого СтрокаТЧ из ТабАмортизации Цикл

				Если СтрокаТЧ.Сумма > 0 Тогда

					СтрокаДвижений = ТаблицаДвижений.Добавить();

					СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
					СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
					СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

				КонецЕсли;

			КонецЦикла;

			НаборДвижений.мПериод          = ДатаДок;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			НаборДвижений.ВыполнитьПриход();

		КонецЕсли;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		мПроводкиНУ = Движения.Налоговый;
		
        //абс начало
		Если НЕ ЗначениеЗаполнено(абс_ОС) И НЕ ЗначениеЗаполнено(СписокОС) Тогда
			ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект,ДатаДок,СтруктураШапкиДокумента.Организация);
		ИначеЕсли ЗначениеЗаполнено(абс_ОС) Тогда
			ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект,ДатаДок,СтруктураШапкиДокумента.Организация, абс_ОС);
		ИначеЕсли ЗначениеЗаполнено(СписокОС) Тогда
			ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект,ДатаДок,СтруктураШапкиДокумента.Организация, СписокОС);
		КонецЕсли;
        //абс конец
				
		ТабАмортизации.Колонки.ОС.Имя = "ОбъектУчета";
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		
		// Включение амортизационной премии в состав расходов.
		Если ТабАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы") > 0 Тогда
			
			ТабКапитальныхВложений = ТабАмортизации.Скопировать();
			ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабКапитальныхВложений.Колонки.Добавить("СуммаПР",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			
			НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			СписокОС = Новый Массив();
			Для Каждого СтрокаТабАмортизации Из ТабАмортизации Цикл
				Если СтрокаТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы > 0 Тогда
					СписокОС.Добавить(СтрокаТабАмортизации.ОбъектУчета);
				КонецЕсли;
			КонецЦикла;
			
			НалоговыйУчет.РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, мПроводкиНУ, ТаблицаДвижений, Отказ, Заголовок);			
			
			// Уменьшение стоимости ОС по налоговому учету в регистре накопления.
			Если НЕ Отказ Тогда
				Для Каждого СтрокаТЧ из ТабКапитальныхВложений Цикл
					Если СтрокаТЧ.Сумма > 0 Тогда
						СтрокаДвижений = ТаблицаДвижений.Добавить();
						СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
							СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
							СтрокаДвижений.Стоимость        = СтрокаТЧ.Сумма;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				
			НаборДвижений.мПериод          = ДатаДок;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			НаборДвижений.ВыполнитьРасход();
				
		КонецЕсли;

		// Начисление амортизации.
		ТабАмортизации.Колонки.Налог.Имя = "Сумма";
			
		СтруктураШапкиДокумента.Дата = СтруктураШапкиДокумента.ПериодРегистрации;
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "ОС", "", ТабАмортизации, ТабЗатрат, ТабАмортизацииБУ);
		КонецЕсли;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Нал","ОС");
		

		Если НЕ Отказ И Не ТабАмортизации = Неопределено Тогда

			НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			Для Каждого СтрокаТЧ из ТабАмортизации Цикл

				Если СтрокаТЧ.Сумма > 0 Тогда

					СтрокаДвижений = ТаблицаДвижений.Добавить();

					СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
					СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
					СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

				КонецЕсли;

			КонецЦикла;

			НаборДвижений.мПериод          = ДатаДок;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			НаборДвижений.ВыполнитьПриход();

		КонецЕсли;
		
		
		// АБС ВСТАВКА Фролов 9721
		// Добавим проводки по капитализируемым затратам
		ДвиженияПоКапитализации = Движения.абс_КапитализацияПроцентовПоОС;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	абс_КапитализацияПроцентовПоОСОстатки.ОсновноеСредство,
		                      |	абс_КапитализацияПроцентовПоОСОстатки.СтатьяДоходовРасходов,
		                      |	абс_КапитализацияПроцентовПоОСОстатки.СуммаОстаток
		                      |ИЗ
		                      |	РегистрНакопления.абс_КапитализацияПроцентовПоОС.Остатки(
		                      |			&МоментВремени,
		                      |			Организация = &Организация
		                      |				И ВЫБОР
		                      |					КОГДА &ОтборПоОС
		                      |						ТОГДА ОсновноеСредство В (&СписокОС)
		                      |					ИНАЧЕ ИСТИНА
		                      |				КОНЕЦ) КАК абс_КапитализацияПроцентовПоОСОстатки");
							  
								  
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		
		Если НЕ ЗначениеЗаполнено(абс_ОС) И НЕ ЗначениеЗаполнено(СписокОС) Тогда
			Запрос.УстановитьПараметр("ОтборПоОС"	, Ложь);
			Запрос.УстановитьПараметр("СписокОС"	, Неопределено);
		ИначеЕсли ЗначениеЗаполнено(абс_ОС) Тогда
			Запрос.УстановитьПараметр("ОтборПоОС"	, Истина);
			Запрос.УстановитьПараметр("СписокОС"	, абс_ОС);			
		ИначеЕсли ЗначениеЗаполнено(СписокОС) Тогда
			Запрос.УстановитьПараметр("ОтборПоОС"	, Истина);
			Запрос.УстановитьПараметр("СписокОС"	, СписокОС);			
		КонецЕсли;
		
		Счет9102С = ПланыСчетов.Налоговый.НайтиПоКоду("91.02.С");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокиАмортизации = ТабАмортизации.НайтиСтроки(Новый Структура("ОбъектУчета", Выборка.ОсновноеСредство));
			
			Если СтрокиАмортизации.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаАмортизации = ТабАмортизации[0];
			
			СуммаСписанияКапЗатрат = Окр(Выборка.СуммаОстаток * (СтрокаАмортизации.Сумма / СтрокаАмортизации.СтоимостьДляВычисления), 2);
			
			ДвижениеПоКапитализации = ДвиженияПоКапитализации.Добавить();
			
			ДвижениеПоКапитализации.ВидДвижения = ВидДвиженияНакопления.Расход;
			ДвижениеПоКапитализации.Период		= Дата;
			
			ДвижениеПоКапитализации.Организация 			= Организация;
			ДвижениеПоКапитализации.ОсновноеСредство 		= Выборка.ОсновноеСредство;
			ДвижениеПоКапитализации.СтатьяДоходовРасходов 	= Выборка.СтатьяДоходовРасходов;
			
			ДвижениеПоКапитализации.Сумма					= СуммаСписанияКапЗатрат;
			
			// Дт 91.02.С - Сумма капитализированных процентов 
			Проводка = мПроводкиНУ.Добавить();
			
			Проводка.Период 		= Дата;
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       	= СуммаСписанияКапЗатрат;
			Проводка.Содержание  	= "Принят к учету объект ОС";
				
			Проводка.СчетДт      	= Счет9102С;
			Проводка.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.ВР;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", Выборка.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Выборка.СтатьяДоходовРасходов);
			
			Проводка.СчетКт			= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.ВидУчетаКт		= Перечисления.ВидыУчетаПоПБУ18.ВР;
			
		КонецЦикла;		
		// АБС ВСТАВКА Фролов 9721 КОНЕЦ

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()


// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	// АБС ВСТАВКА 
	абс_ПостроительОтчета = Новый ПостроительОтчета(
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|{ГДЕ
	|	ОсновныеСредства.Ссылка.* КАК ОсновноеСредство}");
	
	абс_ПостроительОтчета.ЗаполнитьНастройки();	
	НастройкиПостроителя = абс_Построитель.Получить();
	
	Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
		абс_ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	ЕстьОтбор = Ложь;
	
	Для Каждого ОтборПостроителя Из абс_ПостроительОтчета.Отбор Цикл
		
		ЕстьОтбор = ЕстьОтбор ИЛИ ОтборПостроителя.Использование;
		
	КонецЦикла;
	
	СписокОС = Неопределено;
	
	Если ЕстьОтбор Тогда
		абс_ПостроительОтчета.Выполнить();
		СписокОС = абс_ПостроительОтчета.Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;
	
    // АБС ВСТАВКА КОНЕЦ
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок, СписокОС);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок, СписокОС);
	
КонецПроцедуры







////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	// {{ТТК Сладков А. Заявка №7750381  30.09.2016 начало
	ИспользуетсяОтложенноеПроведение= ОтложенноеПроведениеДокументов.ttk_ИспользуетсяОтложенноеПроведение( ,Ссылка);
	
	
	Если  ПровестиОтложенно = Истина и ИспользуетсяОтложенноеПроведение и  ДополнительныеСвойства.Свойство("ДоПроведение") = Ложь Тогда
		
		ПолныеПрава.ttk_РегистрацияОтложенногоПроведения(Ссылка, Организация);
		
		ПровестиОтложенно = Ложь;
		
	Иначе	
		
		ПолныеПрава.ttk_УдалениеОтложенногоПроведения(Ссылка, Организация);
	
	// }}ТТК Сладков А. Заявка №7750381  30.09.2016 окончание 
	
	

		 //АБС ВСТАВКА 38320  31.01.2014 19:16:46  Пугачев
		#Если Клиент Тогда
			абс_БСПОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.абс_БСПКлючевыеОперации.АмортизацияОС_Проведение);
		#Иначе
			ВремяНачала = абс_БСПОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
		#КонецЕсли
		//АБС ВСТАВКА 38320 КОНЕЦ 
		
		//АБС ВСТАВКА   20.05.2014 12:35:39  Пугачев
		Если Константы.абс_ОтключитьТиповойРасчетАмортизации.Получить() Тогда
			абс_ВнеоборотныеАктивыВызовСервера.ВыполнитьНачислениеАмортизацииОС(Ссылка, Отказ);
			#Если Клиент Тогда
				
			#Иначе
				абс_БСПОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.абс_БСПКлючевыеОперации.АмортизацияОС_Проведение, ВремяНачала);
			#КонецЕсли
			Возврат;
		КонецЕсли;
		//АБС ВСТАВКА  КОНЕЦ 
		
		Если мУдалятьДвижения Тогда
			ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		КонецЕсли;
		
		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(ПериодРегистрации));
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ПоддержкаПБУ18");
			ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиНУ);
		КонецЕсли;
		
		Заголовок = "";
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

		Если НЕ Отказ Тогда
			ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		//абс_{
		ПланыВидовХарактеристик.абс_СвойстваОС.ПроверитьАмортизацияОС(ЭтотОбъект, Отказ);
		//абс_}

		//АБС ВСТАВКА 38320  31.01.2014 19:16:46  Пугачев
		#Если Клиент Тогда
			
		#Иначе
			абс_БСПОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.абс_БСПКлючевыеОперации.АмортизацияОС_Проведение, ВремяНачала);
		#КонецЕсли
		//АБС ВСТАВКА 38320 КОНЕЦ 

	
	
	
	// {{ТТК Сладков А. Заявка №7750381  30.09.2016 начало
	КонецЕсли;
	// }}ТТК Сладков А. Заявка №7750381  30.09.2016 окончание

	
	 
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
     
	//АБС ВСТАВКА №10721 НАЧАЛО
	//Если Организация.абс_СтатусОрганизации <> Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация Тогда
		ОтражатьВУправленческомУчете = Ложь;	
	//КонецЕсли;
	//\\АБС ВСТАВКА №10721 КОНЕЦ   
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью



