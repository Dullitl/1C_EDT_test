
Процедура ЗаполнитьДокумент() Экспорт
	
	ЗаполнитьДокумент_Взаиморасчеты();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРегистра() Экспорт
	
	ЗаполнитьДанныеРегистра_Взаиморасчеты();
	
КонецПроцедуры


Процедура ЗаполнитьДокумент_Взаиморасчеты()
	
	Источник = ЭтотОбъект;
	Источник.ДанныеОСВ.Очистить();
	Источник.ДанныеРегистра.Очистить();
		
	ДеревоРассхождений = Документы.абс_ПриведениеРегистровКОСВ.ПолучитьДеревоРассхождений_Взаиморасчеты(
																Источник.Организация,
																Источник.Дата,
																Документы.абс_ПриведениеРегистровКОСВ.ПолучитьМассивСчетов(Источник.Операция),
																Документы.абс_ПриведениеРегистровКОСВ.ПолучитьЗнакОстатка(Источник.Операция));
																
	Для Каждого строкаСчет из ДеревоРассхождений.Строки Цикл 
		Для Каждого строкаКонтрагент из строкаСчет.Строки Цикл 																	
			Для Каждого строкаДоговор из строкаКонтрагент.Строки Цикл
				
				Если строкаДоговор.ВестиПоДокументам = Null Тогда 
					ВестиПоДокументам = Ложь;
				Иначе 
					ВестиПоДокументам = строкаДоговор.ВестиПоДокументам;
				КонецЕсли;
					
				Если (Источник.ВидЗаполнения = 1) И (ВестиПоДокументам) Тогда 
					Продолжить;
				КонецЕсли;
				
				Если (Источник.ВидЗаполнения = 2) И (НЕ ВестиПоДокументам) Тогда 
					Продолжить;
				КонецЕсли;
				
				//Если (строкаДоговор.СуммаОСВ  - строкаДоговор.СуммаРегистр = 0) И
				//	(строкаДоговор.ВалютнаяСуммаОСВ  - строкаДоговор.ВалютнаяСуммаРегистр = 0) Тогда 
				//	Продолжить;
				//КонецЕсли;

				строкаДанныеОСВ = Источник.ДанныеОСВ.Добавить();
				ЗаполнитьЗначенияСвойств(строкаДанныеОСВ, строкаДоговор);
				строкаДанныеОСВ.Субконто1 = строкаДоговор.Контрагент;
				строкаДанныеОСВ.Субконто2 = строкаДоговор.ДоговорКонтрагента;
				строкаДанныеОСВ.Ключ = Новый УникальныйИдентификатор();
				Если строкаДанныеОСВ.СуммаОСВ = 0 И  строкаДанныеОСВ.ВалютнаяСуммаОСВ = 0 Тогда 
					строкаДанныеОСВ.Сторнировать = Истина;
					Продолжить;
				КонецЕсли;
				
				строкаДанныеОСВ.СуммаРасхождение = строкаДанныеОСВ.СуммаОСВ  - строкаДанныеОСВ.СуммаРегистр;
				строкаДанныеОСВ.ВалютнаяСуммаРасхождение = строкаДанныеОСВ.ВалютнаяСуммаОСВ  - строкаДанныеОСВ.ВалютнаяСуммаРегистр;

				Для Каждого строкаДокумент из строкаДоговор.Строки Цикл 
					строкаДанныеРегистра = Источник.ДанныеРегистра.Добавить();
					ЗаполнитьЗначенияСвойств(строкаДанныеРегистра, строкаДокумент);
					строкаДанныеРегистра.Ключ = строкаДанныеОСВ.Ключ; 
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРегистра_Взаиморасчеты(Ключ = Неопределено) Экспорт
	
	Источник = ЭтотОбъект;

	Если Ключ = Неопределено Тогда 
		ТаблицаОбхода = Источник.ДанныеОСВ;
	Иначе
		ТаблицаОбхода = Источник.ДанныеОСВ.НайтиСтроки(Новый Структура("Ключ", Ключ));
	КонецЕсли;
	
	Для Каждого строка из ТаблицаОбхода Цикл 
		
		Если (строка.ВестиПоДокументам) И (Ключ = Неопределено) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(строка.Субконто1) Тогда 
			Продолжить;
		КонецЕсли;
		
		//Если (строка.СуммаРасхождение = 0) И (строка.ВалютнаяСуммаРасхождение = 0) И (Ключ = Неопределено) Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		Если строка.Сторнировать Тогда  
			МассивСтрок = Источник.ДанныеРегистра.НайтиСтроки(Новый Структура("Ключ", строка.Ключ));
			Для Каждого строкаРегистра из МассивСтрок Цикл 
				Источник.ДанныеРегистра.Удалить(строкаРегистра);	
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		ТаблицаРаспределния = Документы.абс_ПриведениеРегистровКОСВ.ПолучитьТаблицуКорректировочногоРаспределения_Взаиморасчеты(
													Источник.Организация, 
													Источник.Дата, 
													строка.Счет, 
													строка.Субконто1, 
													строка.Субконто2, 
													строка.СуммаОСВ, 
													строка.ВалютнаяСуммаОСВ, 
													Документы.абс_ПриведениеРегистровКОСВ.ПолучитьЗнакОстатка(Источник.Операция),
													?(ЗначениеЗаполнено(Источник.Ссылка), Источник.Ссылка, Неопределено));
		
		МассивСтрок = Источник.ДанныеРегистра.НайтиСтроки(Новый Структура("Ключ", строка.Ключ));
		Для Каждого строкаРегистра из МассивСтрок Цикл 
			Источник.ДанныеРегистра.Удалить(строкаРегистра);	
		КонецЦикла;
		
		СуммаРегистр = 0;
		ВалютнаяСуммаРегистр = 0;
		
		Для Каждого строкаРаспределения из ТаблицаРаспределния Цикл 
			строкаРегистра = Источник.ДанныеРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(строкаРегистра,  строкаРаспределения);
			строкаРегистра.Ключ = строка.Ключ;
			СуммаРегистр = СуммаРегистр + строкаРегистра.СуммаРегистр;
			ВалютнаяСуммаРегистр = ВалютнаяСуммаРегистр + строкаРегистра.ВалютнаяСуммаРегистр;
		КонецЦикла;
		
		строка.СуммаРегистр = СуммаРегистр;
		строка.ВалютнаяСуммаРегистр = ВалютнаяСуммаРегистр;
		
		строка.СуммаРасхождение = строка.СуммаОСВ - СуммаРегистр; 
		строка.ВалютнаяСуммаРасхождение = строка.ВалютнаяСуммаОСВ - ВалютнаяСуммаРегистр; 
		
	КонецЦикла;
	
КонецПроцедуры



Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Статус = Перечисления.абс_СтатусыПриведениеРегистровКОСВ.Подготовка;
	Ответственный = глЗначениеПеременной("глТекущийПользователь");
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
КонецПроцедуры


Процедура ПриЗаписи(Отказ)
	
	Если Статус = Перечисления.абс_СтатусыПриведениеРегистровКОСВ.Отказ Тогда 
		абс_ПроведениеДокументов.УдалитьДвиженияРегистратора(ДокументДвижений);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументДвижений = Документы.КорректировкаЗаписейРегистров.ПустаяСсылка();
	Статус = Перечисления.абс_СтатусыПриведениеРегистровКОСВ.Подготовка;
	Ответственный = глЗначениеПеременной("глТекущийПользователь");
	ДанныеОСВ.Очистить();
	ДанныеРегистра.Очистить();
		
КонецПроцедуры

