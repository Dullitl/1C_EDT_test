Перем мУдалятьДвижения;

Перем мНачДата;
Перем мКонДата;
Перем мНачГраница;
Перем мКонГраница;
Перем мПроводкиБУ;
Перем мПроводкиНУ;
Перем мПоддержкаПБУ18;
Перем Коэффициент;

//Процедура заполнения выполняемых действий при создании нового документа
Процедура ЗаполнитьВыполняемыеДействия() Экспорт
	ОпределениеФинансовогоРезультатаОтПродаж = Истина;
	ОпределениеСальдоПрочихДоходовИРасходов  = Истина;
	СписаниеУбытковПрошлыхЛет = ОтражатьВНалоговомУчете;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//Функция выполняет проверку: выполняет ли документ операции, которые теперь выполняются другими документами:
//- РеформацияБалансаБУ
//Проверка производится с помощью анализа движений документа
//Возвращаемое значение - булево (Истина - документ выполняет удаленные операции)
Функция Проверить_ДокументВыполняетУдаленныеОперации() Экспорт
	Если НЕ Ссылка.Проведен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОбороты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), , , КорСчет В ИЕРАРХИИ (&СписокСчетов), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор = &ТекСсылка И
	|	((ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Сч_99) И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (&Сч_99)) ИЛИ
	|	(ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Сч_90) И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (&Сч_90)) ИЛИ
	|	(ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Сч_91) И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (&Сч_91)) ИЛИ
	|	(ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Сч_84) ИЛИ ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (&Сч_84)))
	|";
	Запрос.УстановитьПараметр("ТекСсылка", Ссылка);
	СписокСчетовБУ = Новый Массив();
	СписокСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);			//99
	СписокСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.Продажи);					//90
	СписокСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);		//91
	СписокСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);	//84

	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовБУ);
	Запрос.УстановитьПараметр("Сч_99", ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
	Запрос.УстановитьПараметр("Сч_90", ПланыСчетов.Хозрасчетный.Продажи);
	Запрос.УстановитьПараметр("Сч_91", ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Сч_84", ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();

КонецФункции


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если не (ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ должен принадлежать хотя бы одному из видов учета: ""Бухгалтерский"", ""Налоговый"".", Отказ, Заголовок);
	КонецЕсли;
	
	//Проверка отмечено ли хотя бы одно действие
	Если не (ОпределениеФинансовогоРезультатаОтПродаж или ОпределениеСальдоПрочихДоходовИРасходов
		ИЛИ СписаниеУбытковПрошлыхЛет) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбраны выполняемые действия",Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

//проведение по БУ
Процедура ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОпределениеФинансовогоРезультатаОтПродаж Тогда
		Возврат;
	КонецЕсли;

	Сч_90_01 = ПланыСчетов.Хозрасчетный.Выручка;
	Сч_90_02 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	Сч_90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	Сч_90_04 = ПланыСчетов.Хозрасчетный.Продажи_Акцизы;
	Сч_90_05 = ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины;
	Сч_90_07 = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу;
	Сч_90_08 = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы;
	Сч_90_09 = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
	Сч_99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
	Сч_99_01_2 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОблагаемыеЕНВД;

	// По деятельности, не облагаемой ЕНВД
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(Сч_90_01);
	СписокСчетов.Добавить(Сч_90_02);
	СписокСчетов.Добавить(Сч_90_03);
	СписокСчетов.Добавить(Сч_90_04);
	СписокСчетов.Добавить(Сч_90_05);
	СписокСчетов.Добавить(Сч_90_07);
	СписокСчетов.Добавить(Сч_90_08);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО ХозрасчетныйОбороты.Счет = СчетаУчетаПоДеятельностиЕНВД.Счет
	|
	|ГДЕ
	|	((СчетаУчетаПоДеятельностиЕНВД.Счет.Ссылка) ЕСТЬ NULL )";
	Выборка = Запрос.Выполнить().Выбрать();

	ФинансовыйРезультат = 0;

	Пока Выборка.Следующий() Цикл
		ФинансовыйРезультат = ФинансовыйРезультат + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если ФинансовыйРезультат > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_90_09;
		Проводка.СчетКт                    = Сч_99_01_1;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.Сумма                     = ФинансовыйРезультат;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если ФинансовыйРезультат < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_1;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                    = Сч_90_09;
		Проводка.Сумма                     = - ФинансовыйРезультат;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли; 
	
	// По деятельности, облагаемой ЕНВД

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО ХозрасчетныйОбороты.Счет = СчетаУчетаПоДеятельностиЕНВД.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ФинансовыйРезультат = 0;

	Пока Выборка.Следующий() Цикл
		ФинансовыйРезультат = ФинансовыйРезультат + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если ФинансовыйРезультат > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_90_09;
		Проводка.СчетКт                    = Сч_99_01_2;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.Сумма                     = ФинансовыйРезультат;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если ФинансовыйРезультат < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_2;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                    = Сч_90_09;
		Проводка.Сумма                     = - ФинансовыйРезультат;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры

Процедура ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОпределениеСальдоПрочихДоходовИРасходов Тогда
		Возврат;
	КонецЕсли;
	
	Сч_91_09 = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
	Сч_91_01 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Сч_91_02 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Сч_91_03 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.03");
	Сч_99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
	Сч_99_01_2 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОблагаемыеЕНВД;
		
	// Распределение расходов на счете 91.02
	// По деятельности, не облагаемой ЕНВД
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(Сч_91_02);
	СписокСчетов.Добавить(Сч_91_03); //абсо

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО ХозрасчетныйОбороты.Счет = СчетаУчетаПоДеятельностиЕНВД.Счет
	|
	|ГДЕ
	|	(СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению)";
	Выборка = Запрос.Выполнить().Выбрать();

	СальдоПрочихДоходовИРасходов = 0;
	СальдоПрочихДоходовИРасходовЕНВД = 0;
	СальдоПрочихДоходовИРасходовНеЕНВД = 0;

	Пока Выборка.Следующий() Цикл
		СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходов + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
		СальдоПрочихДоходовИРасходовЕНВД = СальдоПрочихДоходовИРасходовЕНВД + Окр(Коэффициент*(Выборка.СуммаОборотКт - Выборка.СуммаОборотДт), 2, 1);
	КонецЦикла;
	СальдоПрочихДоходовИРасходовНеЕНВД = СальдоПрочихДоходовИРасходов - СальдоПрочихДоходовИРасходовЕНВД;
	
	// По деятельности, не облагаемой ЕНВД
	СписокСчетов.Добавить(Сч_91_01);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО ХозрасчетныйОбороты.Счет = СчетаУчетаПоДеятельностиЕНВД.Счет
	|
	|ГДЕ
	|	((СчетаУчетаПоДеятельностиЕНВД.Счет.Ссылка) ЕСТЬ NULL )";
	Выборка = Запрос.Выполнить().Выбрать();

	СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходовНеЕНВД;

	Пока Выборка.Следующий() Цикл
		СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходов + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если СальдоПрочихДоходовИРасходов > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_91_09;
		Проводка.СчетКт                    = Сч_99_01_1;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.Сумма                     = СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если СальдоПрочихДоходовИРасходов < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_1;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.СчетКт                    = Сч_91_09;
		Проводка.Сумма                     = - СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	// По деятельности, облагаемой ЕНВД
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО ХозрасчетныйОбороты.Счет = СчетаУчетаПоДеятельностиЕНВД.Счет
	|
	|ГДЕ
	|	(НЕ СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходовЕНВД;

	Пока Выборка.Следующий() Цикл
		СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходов + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если СальдоПрочихДоходовИРасходов > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_91_09;
		Проводка.СчетКт                    = Сч_99_01_2;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.Сумма                     = СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если СальдоПрочихДоходовИРасходов < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = КонецМесяца(ПериодРегистрации);
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_2;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.СчетКт                    = Сч_91_09;
		Проводка.Сумма                     = - СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Определение финансовых результатов";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры

//проведение по НУ
Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.СписаниеУбытковПрошлыхЛет Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет99",      ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет9711",    ПланыСчетов.Налоговый.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаДт,
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаКт,
	               |	НалоговыйОбороты.ВидУчета
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&ДатаНач,
	               |		&ДатаКон,
	               |		,
	               |		Счет В ИЕРАРХИИ (&Счет99),
	               |		,
	               |		Организация = &Организация
	               |			И ВидУчета = &ВидУчета,
	               |		КорСчет <> &Счет9711,
	               |		) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.ВидУчета";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ПрибыльНУ = Результат.Итог("СуммаКт") - Результат.Итог("СуммаДт");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Налоговый.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаНУ,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто1.ДатаНачалаСписания Как ГОД,
	               |	НалоговыйОбороты.СуммаКонечныйОстаток КАК Остаток
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |		&ДатаНач,
	               |		&ДатаКон,
	               |		,
	               |		,
	               |		Счет = &Счет97,
	               |		,
	               |		Организация = &Организация
	               |			И ВидУчета = &ВидУчета) КАК НалоговыйОбороты
	               |ГДЕ
	               |	НалоговыйОбороты.Субконто1.ДатаНачалаСписания <= &ДатаНач
	               |	И НалоговыйОбороты.Субконто1.ДатаОкончанияСписания >= &ДатаКон
	               |	И НалоговыйОбороты.Субконто1.Сумма > 0
	               |	И НалоговыйОбороты.СуммаНачальныйОстаток > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.СуммаКонечныйОстаток
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НалоговыйОбороты.Субконто1.ДатаНачалаСписания";
	
	ТаблицаУбытков = Запрос.Выполнить().Выгрузить();
	
	Если ПрибыльНУ <= 0 И ТаблицаУбытков.Итог("СуммаНУ") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
		Норма = 0.3;
	ИначеЕсли СтруктураШапкиДокумента.Дата < '20070101' Тогда
		Норма = 0.5;
	Иначе
		Норма = 1;	
	КонецЕсли;
	
	Если ПрибыльНУ <= 0  Тогда
		СуммаСписания =  - ТаблицаУбытков.Итог("СуммаНУ");
	Иначе
		СуммаСписания = ПрибыльНУ * Норма - ТаблицаУбытков.Итог("СуммаНУ");
	КонецЕсли;	
	
	Если СуммаСписания < 0 Тогда
		ТаблицаУбытков.Сортировать("Год Убыв");
	КонецЕсли;
	
	Для Каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Если СуммаСписания = 0 Тогда
			Прервать;
		КонецЕсли;
	
		 СуммаУбыткаВсего          = УбытокПрошлогоПериода.Субконто1.Сумма;
		 
		 Если СуммаСписания > 0 Тогда 
			 СуммаУбыткаМожноСписать = ?(СуммаСписания < УбытокПрошлогоПериода.Остаток, СуммаСписания, УбытокПрошлогоПериода.Остаток);
		 Иначе
			 СуммаУбыткаМожноСписать = ?( -СуммаСписания < УбытокПрошлогоПериода.СуммаНУ, СуммаСписания, -УбытокПрошлогоПериода.СуммаНУ);
		 КонецЕсли;
		 
		 Если СуммаСписания <> 0 Тогда 
		     СуммаСписания  = СуммаСписания - СуммаУбыткаМожноСписать;
	 
			 Если СуммаУбыткаМожноСписать <> 0 Тогда
				 Проводка = мПроводкиНУ.Добавить();
				 Проводка.Период                            = Дата;
				 Проводка.Организация                       = СтруктураШапкиДокумента.Организация;
				 Проводка.СчетДт                            = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
				 Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				 Проводка.СчетКт                            = ПланыСчетов.Налоговый.УбыткиПрошлыхЛет;
				 Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.Субконто1;
				 Проводка.Сумма                             = СуммаУбыткаМожноСписать;
				 Проводка.Содержание                        = "Перенос убытков на будущее";
				 Проводка.НомерЖурнала                      = "ФР";
				 
				 Если мПоддержкаПБУ18 Тогда
					 Проводка = мПроводкиНУ.Добавить();
					 Проводка.Период                            = Дата;
					 Проводка.Организация                       = СтруктураШапкиДокумента.Организация;
					 Проводка.СчетДт                            = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					 Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;		 
					 Проводка.СчетКт                            = ПланыСчетов.Налоговый.УбыткиПрошлыхЛет;     
					 Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.Субконто1;
					 Проводка.Сумма                             = - СуммаУбыткаМожноСписать;
					 Проводка.Содержание                        = "Перенос убытков на будущее";
					 Проводка.НомерЖурнала                      = "ФР";
					 Проводка.ВидУчетаДт                        =  Перечисления.ВидыУчетаПоПБУ18.ВР;
					 Проводка.ВидУчетаКт                        =  Перечисления.ВидыУчетаПоПБУ18.ВР;
				 КонецЕсли;
			 КонецЕсли;
		 КонецЕсли;
		 
	 
	 КонецЦикла;
	
	мПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗакрытиеСчетовФР(СтруктураШапкиДокумента)
	Если СтруктураШапкиДокумента.ОпределениеФинансовогоРезультатаОтПродаж Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач",     мНачДата);
		Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет90",      ПланыСчетов.Налоговый.Продажи);
		Запрос.УстановитьПараметр("Счет909",     ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаДт,
		|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаКт,
		|	НалоговыйОбороты.ВидУчета
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет90) И Счет <> &Счет909, , Организация = &Организация, , ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		| НалоговыйОбороты.ВидУчета";
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		
		ФинансовыйРезультат = 0;
		
		Пока Выборка.Следующий() Цикл
			ФинансовыйРезультат = ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
			
			Если ФинансовыйРезультат > 0 Тогда
				
				СтрокаДвижений 			               	 = мПроводкиНУ.Добавить();
				
				СтрокаДвижений.Период                    = Дата;
				СтрокаДвижений.Организация               = Организация;
				СтрокаДвижений.СчетДт                    = ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж;
				СтрокаДвижений.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
				СтрокаДвижений.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				СтрокаДвижений.Сумма                     = ФинансовыйРезультат;
				СтрокаДвижений.Содержание                = "Определение финансовых результатов";
				СтрокаДвижений.НомерЖурнала              = "ФР";
				СтрокаДвижений.ВидУчетаДт                =  Выборка.ВидУчета;
				СтрокаДвижений.ВидУчетаКт                =  Выборка.ВидУчета;
				
			КонецЕсли;
			
			Если ФинансовыйРезультат < 0 Тогда
				СтрокаДвижений 			      	= мПроводкиНУ.Добавить();
				СтрокаДвижений.Период                    = Дата;
				СтрокаДвижений.Организация               = Организация;
				
				Если Выборка.ВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
					СтрокаДвижений.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					СтрокаДвижений.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
					СтрокаДвижений.СчетКт                    = ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж;
					СтрокаДвижений.Сумма                     = - ФинансовыйРезультат;
				Иначе
					СтрокаДвижений.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					СтрокаДвижений.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
					СтрокаДвижений.СчетДт                    = ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж;
					СтрокаДвижений.Сумма                     =  ФинансовыйРезультат;
				КонецЕсли;
				СтрокаДвижений.Содержание                = "Определение финансовых результатов";
				СтрокаДвижений.НомерЖурнала              = "ФР";
				СтрокаДвижений.ВидУчетаДт                =  Выборка.ВидУчета;
				СтрокаДвижений.ВидУчетаКт                =  Выборка.ВидУчета;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОпределениеСальдоПрочихДоходовИРасходов Тогда
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", ПланыСчетов.Налоговый.ПрочиеРасходы);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет91",       ПланыСчетов.Налоговый.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет91_02",    ПланыСчетов.Налоговый.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Коэффициент",  Коэффициент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(РасходыЕНВД.СуммаЕНВД) КАК СуммаЕНВД,
	|	НалоговыйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Счет91), , Организация = &Организация, , ) КАК НалоговыйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НалоговыйОбороты.ВидУчета КАК ВидУчета,
	|			СУММА(НалоговыйОбороты.СуммаОборотДт * &Коэффициент) КАК СуммаЕНВД,
	|			НалоговыйОбороты.Счет КАК Счет
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Счет91_02), , Организация = &Организация, , ) КАК НалоговыйОбороты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|				ПО НалоговыйОбороты.Счет = СчетаУчетаПоДеятельностиЕНВД.Счет
	|		ГДЕ
	|			СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НалоговыйОбороты.ВидУчета,
	|			НалоговыйОбороты.Счет) КАК РасходыЕНВД
	|		ПО НалоговыйОбороты.ВидУчета = РасходыЕНВД.ВидУчета
	|			И НалоговыйОбороты.Счет = РасходыЕНВД.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета,
	|	НалоговыйОбороты.Счет
	|ИТОГИ
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаЕНВД)
	|ПО
	|	ВидУчета,
	|	Счет";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидУчета");
	
		
		ФинансовыйРезультат = 0;
		Пока Выборка.Следующий() Цикл
			
			РасходыЕНВД   =  ?(Выборка.СуммаЕНВД = Null, 0, Выборка.СуммаЕНВД);
			ФинансовыйРезультатНеЕНВД =  ?(Выборка.СуммаОборотКт = Null, 0, Выборка.СуммаОборотКт) - ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт) + РасходыЕНВД;
			
			Если ФинансовыйРезультатНеЕНВД > 0 Тогда
				
				СтрокаДвижений 				             = мПроводкиНУ.Добавить();
				СтрокаДвижений.Период                    = Дата;
				СтрокаДвижений.Организация               = Организация;
				СтрокаДвижений.СчетДт                    = ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов;
				СтрокаДвижений.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
				СтрокаДвижений.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				СтрокаДвижений.Сумма                     = ФинансовыйРезультатНеЕНВД;
				СтрокаДвижений.Содержание                = "Определение финансовых результатов";
				СтрокаДвижений.НомерЖурнала              = "ФР";
				СтрокаДвижений.ВидУчетаДт                =  Выборка.ВидУчета;
				СтрокаДвижений.ВидУчетаКт                =  Выборка.ВидУчета;
			КонецЕсли;
			
			Если ФинансовыйРезультатНеЕНВД < 0 Тогда
				
				СтрокаДвижений 				             = мПроводкиНУ.Добавить();
				СтрокаДвижений.Период                    = Дата;
				СтрокаДвижений.Организация               = Организация;
				
				Если Выборка.ВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
					СтрокаДвижений.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					СтрокаДвижений.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
					СтрокаДвижений.СчетКт                    = ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов;
					СтрокаДвижений.Сумма                     = - ФинансовыйРезультатНеЕНВД;
				Иначе
					СтрокаДвижений.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					СтрокаДвижений.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
					СтрокаДвижений.СчетДт                    = ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов;
					СтрокаДвижений.Сумма                     =  ФинансовыйРезультатНеЕНВД;
				КонецЕсли;
				
				СтрокаДвижений.Содержание                = "Определение финансовых результатов";
				СтрокаДвижений.НомерЖурнала              = "ФР";
				СтрокаДвижений.ВидУчетаДт                =  Выборка.ВидУчета;
				СтрокаДвижений.ВидУчетаКт                =  Выборка.ВидУчета;
			КонецЕсли;
			
			// исключение расходов по ЕНВД из налогового учета
			
			ВыборкаСчет = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
			Пока ВыборкаСчет.Следующий() Цикл
				РасходыЕНВД = ?(ВыборкаСчет.СуммаЕНВД = Null, 0, ВыборкаСчет.СуммаЕНВД);
				
				
				Если РасходыЕНВД <> 0 Тогда
					
					СтрокаДвижений 				             = мПроводкиНУ.Добавить();
					СтрокаДвижений.Период                    = Дата;
					СтрокаДвижений.Организация               = Организация;
					СтрокаДвижений.СчетКт                    = ВыборкаСчет.Счет;
					СтрокаДвижений.СчетДт                    = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
					СтрокаДвижений.Сумма                     = РасходыЕНВД;
					СтрокаДвижений.Содержание                = "Определение финансовых результатов";
					СтрокаДвижений.НомерЖурнала              = "ФР";
					СтрокаДвижений.ВидУчетаДт                =  Выборка.ВидУчета;
					СтрокаДвижений.ВидУчетаКт                =  Выборка.ВидУчета;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	мПроводкиНУ.Записать(Ложь);
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Коэффициент = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мПроводкиБУ = Движения.Хозрасчетный;

		Если СтруктураШапкиДокумента.ОпределениеФинансовогоРезультатаОтПродаж ИЛИ
				СтруктураШапкиДокумента.ОпределениеСальдоПрочихДоходовИРасходов Тогда
			ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок);
			ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		мПроводкиНУ = Движения.Налоговый;
		
		ПараметрыУчетнойПолитикиРегл = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			мПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
		Иначе
			мПоддержкаПБУ18 = Ложь;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ОпределениеФинансовогоРезультатаОтПродаж ИЛИ
			СтруктураШапкиДокумента.ОпределениеСальдоПрочихДоходовИРасходов Тогда
			ЗакрытиеСчетовФР(СтруктураШапкиДокумента);
        КонецЕсли;
		СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	Заголовок = "";

	//Проверку надо выполнять до удаления движений, т.к. она базируется на движениях документа
	Если Проверить_ДокументВыполняетУдаленныеОперации() Тогда
		ТекстСообщения = "Документ содержит проводки, которые теперь формируются регламентным документом ""Закрытие года"""+Символы.ПС+Символы.Таб+
		"Воспользуйтесь обработкой ""Обновление документов выполнения регламентных операций"", входящей в состав обработок обновления ИБ для версии 1.2.15";
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	//АБС ВСТАВКА 38320  31.01.2014 19:16:46  Пугачев
	#Если Клиент Тогда
		абс_БСПОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.абс_БСПКлючевыеОперации.ОпределениеФинансовыхРезультатов_Проведение);
	#Иначе
		ВремяНачала = абс_БСПОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	#КонецЕсли
	//АБС ВСТАВКА 38320 КОНЕЦ 
	
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	мНачДата    = НачалоМесяца(ПериодРегистрации);
	мКонДата    = КонецМесяца (ПериодРегистрации);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
			
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	//АБС ВСТАВКА 38320  31.01.2014 19:16:46  Пугачев
	#Если Клиент Тогда
		
	#Иначе
		абс_БСПОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.абс_БСПКлючевыеОперации.ОпределениеФинансовыхРезультатов_Проведение, ВремяНачала);
	#КонецЕсли
	//АБС ВСТАВКА 38320 КОНЕЦ 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПЕЧАТИ ДОКУМЕНТА


#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.ПечатьСправкиРасчета(Отчеты.СправкаРасчетНалогаНаПрибыль, Новый Структура("Организация, Дата", Организация, Дата));
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
 Возврат Новый Структура("РасчетНалогаНаПрибыль", "Справка-расчет");
 
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли


