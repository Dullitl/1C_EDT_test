////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мУдалятьДвижения Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;

//ххх Брель Виктор Андреевич 27.04.2018 15:25:47, заявка <<<
Перем СтатусПоРегистру Экспорт;
// Брель Виктор Андреевич 27.04.2018 15:25:47 >>>

// Хранит список статусов в порядке их следования
Перем мСписокСтатусов Экспорт;
Перем мТекущийПользователь;
Перем мРолиПользователя;

Перем  мРолиПользователяФилиал;
Перем  мРолиПользователяКТТК;

// Если счет перезаписывается из ЗЗ 
// то заполняется переменная мТекущийЗЗ
// Признак согласования текущего ЗЗ попадает в переменную м мЗЗСогласован.
Перем мТекущийЗЗ Экспорт;
Перем мЗЗСогласован Экспорт;

// АБС ВСТАВКА Начало
Перем мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа Экспорт;

//абс_Стрельцов+ добавлено: 17.09.2012
//при переносе ПУ
Перем мПроведениеПоМеханизмуПроектногоУчета;
//
//абс_Стрельцов-
Перем АвтоЗначенияРеквизитов Экспорт;// КТТК Ермолов Е.Л.  17.06.2014 12:08:18 000026784

Функция ПолучитьВидДеятельностиПоЦФУ(ЦФУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ЦФУ.Ссылка КАК ЦФУ,
	|	абс_ВидыДеятельностиКТТК.Ссылка КАК ВидДеятельности
	|ИЗ
	|	Справочник.абс_ЦФУ КАК абс_ЦФУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.абс_ВидыДеятельностиКТТК КАК абс_ВидыДеятельностиКТТК
	|		ПО абс_ЦФУ.Наименование = абс_ВидыДеятельностиКТТК.Наименование
	|ГДЕ
	|	абс_ЦФУ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЦФУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ВидДеятельности) Тогда
		Возврат Выборка.ВидДеятельности;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// АБС ВСТАВКА Конец
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Функция ПроверитьАналитики(ТекстСообщения) Экспорт
	
	ОК = Истина;	
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""Организация""." + Символы.ПС;
		ОК = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""Статья движения денежных средств (ДДС)""." + Символы.ПС;
		ОК = Ложь;
	КонецЕсли;
	
	Если ЗакупочныйЗаказ.КонсолидированныйЗЗПоОЗК И Не ВзаимозачетПоОЗК Тогда
		Возврат ОК;
    КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(ЦФУ) Тогда
	//	ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""ЦФУ""." + Символы.ПС;
	//	ОК = Ложь;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""ЦФО""." + Символы.ПС;
		ОК = Ложь;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
	//	ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""Бюджетная статья""." + Символы.ПС;
	//	ОК = Ложь;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипКонтрагента) Тогда
		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""Тип контрагента""." + Символы.ПС;
		ОК = Ложь;
	КонецЕсли;	
	
	Отказ = Ложь;
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект,
		"Оплаты", Новый Структура("ЦФУ, БюджетнаяСтатья, ttk_ОбъектБюджетирования"), Отказ, "Документ не записан.");
	Если Отказ Тогда
		ОК = Ложь;
	КонецЕсли;

	Проверять = Ложь;
	Для Каждого Стр Из Оплаты Цикл
		Если СокрЛП(Стр.БюджетнаяСтатья.Наименование) = "Единая статья КВ" Тогда
			Проверять = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	  //ххх Брель Виктор Андреевич 02.07.2018 18:21:31, заявка 77369096  <<<
	  // Убрал тип сети
	Если Проверять Тогда 
		Отказ = Ложь;
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект,
			"Оплаты", Новый Структура("КВ, ТЭО"), Отказ, "Документ не записан.");
		Если Отказ Тогда
			ОК = Ложь;
		КонецЕсли;
	КонецЕсли;
		  
	  // Брель Виктор Андреевич 02.07.2018 18:21:31 >>>
	  
		
	//Если СокрЛП(БюджетнаяСтатья.Наименование) = "Единая статья КВ" Тогда
	//	ЭтоСвязь = (Найти(ЦФУ.Наименование,"Связь")>0);
	//	ЭтоАдминистрацияЭксплуатация = (Найти(ЦФУ.Наименование,"Администрация")>0  или Найти(ЦФУ.Наименование,"Эксплуатация")>0);
	//	Если НЕ ЗначениеЗаполнено(ТипСети) и ЭтоСвязь Тогда
	//		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""Тип сети""." + Символы.ПС;
	//		ОК = Ложь;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(КВ) и ЭтоАдминистрацияЭксплуатация Тогда
	//		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""КВ""." + Символы.ПС;
	//		ОК = Ложь;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(ТЭО) и ЭтоСвязь Тогда
	//		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""ТЭО""." + Символы.ПС;
	//		ОК = Ложь;
	//	КонецЕсли;	
	//	
	//	Если НЕ ЗначениеЗаполнено(ТипРасхода) и ЭтоСвязь Тогда
	//		ТекстСообщения = ТекстСообщения + "Не выбрана аналитика ""Тип расхода""." + Символы.ПС;
	//		ОК = Ложь;
	//	КонецЕсли;		
	//КонецЕсли;
	
	Возврат ОК;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//АБС Кряковкин 2014.11.05 нач
	Если ДополнительныеСвойства.Свойство("ОтключитьПроверкуЗаполненияРеквизитов") Тогда 
		Возврат;
	КонецЕсли;	
	//Кряковкин кон
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если Не ОбменДанными.Загрузка Тогда		
        // Start КТТК Ермолов Е.Л.  11.07.2014 
        Если Налог <> ПеречислениеВБюджет Тогда 
        	ПеречислениеВБюджет = Налог;                         
        КонецЕсли; 
        // Stop КТТК Ермолов Е.Л.  11.07.2014
		
		СписокСтатусовДляКонтроля = Новый СписокЗначений;
		СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
		СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
		СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
		СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отменен); 
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда					
			Если не СписокСтатусовДляКонтроля.НайтиПоЗначению(СтатусСчета) = Неопределено Тогда					
				Если Проведен Тогда			
					РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
				Иначе                			
					РежимЗаписи = РежимЗаписиДокумента.Запись;
				КонецЕсли;				
			Иначе         		
				РежимЗаписи = РежимЗаписиДокумента.Проведение; 		
			КонецЕсли;
		//АБС ВСТАВКА №38887 НАЧАЛО «28 марта 2014 г.», Пополитов
		ИначеЕсли СписокСтатусовДляКонтроля.НайтиПоЗначению(СтатусСчета) = Неопределено Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;	
	 	//\\АБС ВСТАВКА №38887 КОНЕЦ			
		КонецЕсли; 		
	КонецЕсли;	
	
	Если не ОбменДанными.Загрузка
		//и Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация
		и Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка
		и не (СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка 
				или СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить
				или СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ 
				или СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен) Тогда
		
		абс_ДатаЗакрытияДляСчетовНаОплату = глЗначениеПеременной("абс_ДатаЗакрытияДляСчетовНаОплату");
		Если абс_ДатаЗакрытияДляСчетовНаОплату > ПериодПлатежа Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("«Период выполнения» не может быть меньше даты: "+Формат(абс_ДатаЗакрытияДляСчетовНаОплату,"ДЛФ=DD"),Отказ);	
		КонецЕсли;
		
		//АБС ВСТАВКА №40557 НАЧАЛО «17 апреля 2014 г.», Пополитов
		Если не ДоговорКонтрагента.Пустая() 
			и ДоговорКонтрагента.абс_КонтрольПередачиСПДВБанк
			и не абс_Аванс 
			и не ЗначениеЗаполнено(абс_ДокументРасчетов) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить одно из полей «Аванс» или «Документ расчётов».",Отказ);	
		КонецЕсли;																		
		//АБС ВСТАВКА №40557
		
		// << Казаков Е.Л. 30.05.2017
		Если Константы.ttk_ОбязательноеСозданиеСчетаНаВыплатуНДФЛ.Получить() Тогда
			Если НЕ Налог И ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.ДоговорАренды И Контрагент.абс_ТипыКонтрагентов = Справочники.абс_ТипыКонтрагентов.ФизическиеЛица Тогда
				// Поиск счета на выплату НДФЛ
				Запрос = Новый Запрос;
				Запрос.Текст =	
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	абс_СчетНаОплату.Ссылка
				|ИЗ
				|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
				|ГДЕ
				|	абс_СчетНаОплату.Налог = ИСТИНА
				|	И абс_СчетНаОплату.ДокументОснование = &ТекСчет";
				
				Запрос.УстановитьПараметр("ТекСчет", Ссылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если НЕ Выборка.Количество() = 0 Тогда
					Если СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда
						Пока Выборка.Следующий() Цикл
							Если Выборка.Ссылка.СтатусСчета <> СтатусСчета Тогда
								Сообщить("Это счет на оплату аренды физ. лицу. Сначала согласуйте счет на выплату НДФЛ.");	
								//ОбъектСчетНаОплату = Выборка.Ссылка.ПолучитьОбъект();
								//ФормаСчета = ОбъектСчетНаОплату.ПолучитьФорму(, , Строка(ОбъектСчетНаОплату));
								//ФормаСчета.Открыть();	
								Отказ = Истина;
								Возврат;
							КонецЕсли;	
						КонецЦикла;	
					КонецЕсли;	
				Иначе	
					Сообщить("Это счет на оплату аренды физ. лицу. Необходимо создать счет на выплату НДФЛ.");	
					ОбъектСчетНаОплатуНаОсновании = Документы.абс_СчетНаОплату.СоздатьДокумент();
					ОбъектСчетНаОплатуНаОсновании.Заполнить(Ссылка);
					
					ФормаСчета = ОбъектСчетНаОплатуНаОсновании.ПолучитьФорму(, , Строка(ЭтотОбъект));
					ФормаСчета.Открыть();	
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		// Казаков Е.Л. 30.05.2017 >>
		
	КонецЕсли;	
	
	//АБС ВСТАВКА №8630 НАЧАЛО
	//Кряковкин 20141024 Добавлено условие ОбменДаннымиЗагрузка
	Если Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка 
		и НЕ Ответственный = глЗначениеПеременной("глТекущийПользователь")
		и НЕ (не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено
		или не мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено) И Не ОбменДанными.Загрузка  Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Из статуса ""подготовка"" может перевести только ""ответственный"" счета!",Отказ);
	КонецЕсли;	
	//\\АБС ВСТАВКА №8630 КОНЕЦ
	
	//НФС 2018
	//Крамаренко Д.М.
	Если Не ЗначениеЗаполнено(ЦФО) И Оплаты.Количество() <> 0 Тогда
		ЦФО = Оплаты[0].ЦФО;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЦФУ) И Оплаты.Количество() <> 0 Тогда
		ЦФУ = Оплаты[0].ЦФУ;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(БюджетнаяСтатья) И Оплаты.Количество() <> 0 Тогда
		БюджетнаяСтатья = Оплаты[0].БюджетнаяСтатья;
	КонецЕсли;
	
	
	//АБС ВСТАВКА №15631 НАЧАЛО
	
	//Доп. контроль для отслеживания ошибочного кода создания счетов
	//Кряковкин 20141024 Добавлено условие ОбменДаннымиЗагрузка
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка() И Не ОбменДанными.Загрузка   Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран вид операции!",Отказ);	
	КонецЕсли;	
	//\\АБС ВСТАВКА №15631 КОНЕЦ
	
	//АБС ВСТАВКА №13890 НАЧАЛО
	//Кряковкин 20141024 Добавлено условие ОбменДаннымиЗагрузка
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль и БюджетнаяСтатья.абс_НалоговыйКонтроль  И Не ОбменДанными.Загрузка Тогда		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Нельзя использовать ""Бюджетную статью"" с галочкой ""Налоговый контроль"" в данном статусе!",Отказ); 		
	КонецЕсли;	
	//\\АБС ВСТАВКА №13890 КОНЕЦ		
	//АБС ВСТАВКА 48833  24.10.2014 19:16:10  Шамов
	мСтатусы = Документы.абс_СчетНаОплату.ПолучитьСтатусыСтаршеУтвержденияРуководителемЦФК();
	Если Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ 
		И мСтатусы.Найти(СтатусСчета) <> Неопределено тогда
		СообщениеОбОшибке = "";
		СтруктураПараметров = Новый Структура("ПериодПлатежа,Контрагент,СуммаПлатежа");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
		ПревышенЛимит = ПолныеПрава.ПревышенЛимитКонтрагента(СтруктураПараметров, СообщениеОбОшибке);
		Если ПревышенЛимит 
			И ПараметрыСеанса.абс_НастройкиСистемы.КонтрольЛимитовПоКонтрагентам 
			И НЕ ОбменДанными.Загрузка Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	//АБС ВСТАВКА 48833 КОНЕЦ
	
	СотрудникОтветствененого = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(Ответственный);
	
	Если СотрудникОтветствененого = Неопределено ИЛИ  Лев(Строка(СотрудникОтветствененого),7) = "<Объект" Тогда
		Дирекция 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Департамент = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	// Start КТТК Ермолов Е.Л.  30.07.2015 000033901	
	Иначе 
		Дирекция 	= абс_БизнесПроцессы.ПолучитьПодразделениеДирекции(СотрудникОтветствененого.ПодразделениеОрганизации);
		Департамент = абс_БизнесПроцессы.ПолучитьПодразделениеДепартамента(СотрудникОтветствененого.ПодразделениеОрганизации);
	// Stop КТТК Ермолов Е.Л.  30.07.2015	
	КонецЕсли;
	
	
	//АБС ВСТАВКА №4292 НАЧАЛО
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить
		и Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда
		
		СтатусСчетаСтарый = Ссылка.СтатусСчета;
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №4292 КОНЕЦ
	//АБС ВСТАВКА №21134 НАЧАЛО
	Если не Отказ и СтатусСчета = Перечисления.абсСтатусыСчетов.ГотовКОплате
		и Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.ОтправленВБанк Тогда
		Для каждого СтрокаТабличнойЧасти из Оплаты Цикл  
			Если СтрокаТабличнойЧасти.СтатусОплаты = Ссылка.СтатусСчета Тогда
				СтрокаТабличнойЧасти.СтатусОплаты = СтатусСчета;					
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	//\\АБС ВСТАВКА №21134 КОНЕЦ	
	
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеЗЗ Тогда
		
		Если ЗакупочныйЗаказ.ЗЗСогласован 
			ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
			ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение
			ИЛИ Технический Тогда
			
			СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда
		
		СчетСогласован = Истина;
		
	КонецЕсли;
	
	// До статуса Согласован статус счета определяется по статусу в шапке
	// После статуса Согласован статус счета определяется 
	//   как минимальный статус строк оплат
	
	ИндексСтатусаСогласован = мСписокСтатусов.Найти(Перечисления.абсСтатусыСчетов.Согласован);
	
	ИндексТекСтатуса 		= мСписокСтатусов.Найти(СтатусСчета);
	
	//Если статус оплаты - В оплату то определение статуса счета по
	// минимальному статусу
	ОпределениеПоМинСтатусу = Ложь;
	
	Для Каждого СтрокаОплата Из Оплаты Цикл
		ТекИндекс = мСписокСтатусов.Найти(СтрокаОплата.СтатусОплаты);
		Если ТекИндекс>ИндексСтатусаСогласован Тогда
			ОпределениеПоМинСтатусу = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	// Сравнение индекса на больше необходимо для возможности перехода
	// БП из статуса Согласование ЗЗ в Согласован при согласовании ЗЗ
	// При сравнении на больше-равно счет остается в статусе согласования ЗЗ
	Если (ИндексТекСтатуса <= ИндексСтатусаСогласован 
		ИЛИ (СтатусСчета = Перечисления.абсСтатусыСчетов.ВОплату 
		И Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован)) И Не ОпределениеПоМинСтатусу  Тогда
		
		// Установим такой же статус оплат
		Для Каждого СтрокаОплата Из Оплаты Цикл
			СтрокаОплата.СтатусОплаты = СтатусСчета;
		КонецЦикла;			
		     
	ИначеЕсли Технический и Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Утвержден 
		И СтатусСчета = Перечисления.абсСтатусыСчетов.Оплачен Тогда 
	Иначе 		
		СтатусСчета = НайтиМинимальныйСтатус(); 		
	КонецЕсли;	
	
	ПроверитьТабличнуюЧасть();
	
	УдалитьОбновитьСоздатьОплаты();
	
	// АБС ВСТАВКА Фролов 498
	//Если СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда
	//Кряковкин 20141024 Добавлено условие ОбменДаннымиЗагрузка
	Если НЕ (		//абсо
		
		СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ
		)  И Не ОбменДанными.Загрузка  Тогда
		
		// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов
		Если НЕ Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный И НЕ Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Контрагент не находится в статусе ""Активный"", счет на оплату невозможно перевести в статус ""Согласован"".", Отказ);			
		КонецЕсли;
		//АБС заявка 2877
		//родин лимиты по договорам
		Если Не ЭтотОбъект.ВидОперации =Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
			Если (НЕ ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение И НЕ 
				ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка И НЕ
				ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки И НЕ
				ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Договор контрагента не находится в статусе ""Использование"", счет на оплату невозможно перевести в статус ""Согласован"".", Отказ);			
			КонецЕсли;
		КонецЕсли;
		//родин лимиты по договорам

		//АБС заявка 2877	
	КонецЕсли;
	
	// АБС ВСТАВКА Фролов 498 КОНЕЦ
	
	//АБС Коломиец 4207+
	//Кряковкин 20141024 Добавлено условие ОбменДаннымиЗагрузка
	Если ЭтоНовый() И Не ОбменДанными.Загрузка Тогда
		
		Если НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			и ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
			ТекстСообщенияОбОшибке = "Договор " + ДоговорКонтрагента + " не является договором с поставщиком.";
			Отказ = Истина;
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//АБС Коломиец 4207-
	
	ТекстСообщенияОбОшибке = Строка(Ссылка) + " : ";//"";   //АБС-Пр2 9634
	
	Если НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка И НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда
		Если НЕ ПроверитьАналитики(ТекстСообщенияОбОшибке) Тогда
			СтатусыУточненияПодготовки = Новый Массив();
			
			СтатусыУточненияПодготовки.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
			СтатусыУточненияПодготовки.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
			СтатусыУточненияПодготовки.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
			
			// Для Иванова, если счет в плане платежей, то сотруднику казначейства
			//  можно вытащить из плана платежей
			Если Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Исполнение И
				СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован И
				(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникДК) = Неопределено) Тогда
				
				СтатусыУточненияПодготовки.Добавить(Перечисления.абсСтатусыСчетов.Исполнение);
			КонецЕсли;
			
			// Если счет не технический, то разрешаем записать только в статусы уточнения или подготовки
			Если Технический ИЛИ (СтатусыУточненияПодготовки.Найти(СтатусСчета) = Неопределено) Тогда				
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);				
			КонецЕсли;			
		КонецЕсли;
				
		// АБС ВСТАВКА Фролов 20121026
		Если глЗначениеПеременной("абс_КонтрольГодаВБюджетныхАналитиках") 
			И НЕ (ЗначениеЗаполнено(ЗакупочныйЗаказ) И ЗакупочныйЗаказ.КонсолидированныйЗЗПоОЗК) Тогда
										
			ТекПериод = ПериодПлатежа;//заявка №15490, изменено по просьбе "Калымкина С." на ПериодПлатежа
			абс_Бюджетирование.ПроверитьЦФОПоГодуИспользования(ЦФО, ТекПериод, Ссылка, Отказ);
			Для Каждого Стр Из Оплаты Цикл
				абс_Бюджетирование.ПроверитьСтатьюОборотовПоГодуИспользования(Стр.БюджетнаяСтатья, ТекПериод, Ссылка, Отказ);  			
			КонецЦикла;
		КонецЕсли;			
		// АБС ВСТАВКА Фролов 20121026 КОНЕЦ
		
	КонецЕсли;
	
	//АБС ВСТАВКА №13771 НАЧАЛО
	Если НЕ Отказ 
		И НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка			
		И (НЕ Ссылка.ДКПетля = ДКПетля
		ИЛИ НЕ Ссылка.ДКДебиторы    = ДКДебиторы
		ИЛИ НЕ Ссылка.ДкВзаимозачет = ДкВзаимозачет
		ИЛИ НЕ Ссылка.ДкПройден     = ДкПройден) Тогда
		
		НаборЗаписей = РегистрыСведений.абс_ДебиторскийКонтроль.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СчетНаОплату.Установить(Ссылка);
		НаборЗаписей.Прочитать();  
		Если НаборЗаписей.Количество() > 0 Тогда
			НоваяЗапись = НаборЗаписей[0];
		Иначе	
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.СчетНаОплату = Ссылка;
		КонецЕсли;
		ДатаСервера = абс_СерверныеФункции.ПолучитьДатуСервера();
		Если НЕ Ссылка.ДКПетля = ДКПетля Тогда
			НоваяЗапись.ДКПетля = Истина; 
			НоваяЗапись.ДКПетляОтветственный = глЗначениеПеременной("глТекущийПользователь");
			Если ДКПетля Тогда
				НоваяЗапись.ДКПетляДатаВхода  = ДатаСервера;
			Иначе
				НоваяЗапись.ДКПетляДатаВыхода = ДатаСервера;
			КонецЕсли;
		КонецЕсли;	
		Если НЕ Ссылка.ДКДебиторы = ДКДебиторы Тогда
			НоваяЗапись.ДКДебиторы = Истина; 
			НоваяЗапись.ДКДебиторыОтветственный = глЗначениеПеременной("глТекущийПользователь");
			Если ДКДебиторы Тогда
				НоваяЗапись.ДКДебиторыДатаВхода  = ДатаСервера;
			Иначе
				НоваяЗапись.ДКДебиторыДатаВыхода = ДатаСервера;
			КонецЕсли;  	
		КонецЕсли;
		Если НЕ Ссылка.ДкВзаимозачет = ДкВзаимозачет Тогда
			НоваяЗапись.ДкВзаимозачет = Истина; 
			НоваяЗапись.ДкВзаимозачетОтветственный = глЗначениеПеременной("глТекущийПользователь");
			Если ДкВзаимозачет Тогда
				НоваяЗапись.ДкВзаимозачетДатаВхода  = ДатаСервера;
			Иначе
				НоваяЗапись.ДкВзаимозачетДатаВыхода = ДатаСервера;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Ссылка.ДкПройден = ДкПройден Тогда
			НоваяЗапись.ДкПройден = Истина; 
			НоваяЗапись.ДкПройденОтветственный = глЗначениеПеременной("глТекущийПользователь");
			НоваяЗапись.ДкПройденДатаВхода  = Мин(НоваяЗапись.ДкВзаимозачетДатаВхода,Мин(НоваяЗапись.ДКДебиторыДатаВхода,НоваяЗапись.ДКПетляДатаВхода));
			НоваяЗапись.ДкПройденДатаВыхода = ДатаСервера;
		КонецЕсли;			
		НаборЗаписей.Записать();
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №13771 КОНЕЦ	
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;	
	
	// АБС ВСТАВКА 2943
	Если Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка И
		//++ Задача № 8630 Логинчев А.С. 24.05.2012 15:51:39
		//(СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК) Тогда
		(СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ 
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль) Тогда
		//-- Задача № 8630 Логинчев А.С.
		                            		
		// Проверим по номеру входящего счета 
		Запрос = Новый Запрос;
		Запрос.Текст =	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_СчетНаОплату.Ссылка
		|ИЗ
		|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
		|ГДЕ
		|	абс_СчетНаОплату.Контрагент = &Контрагент
		|	И абс_СчетНаОплату.НомерВходящегоСчета = &НомерВходящегоСчета
		|	И абс_СчетНаОплату.СуммаПлатежа = &СуммаПлатежа
		|	И абс_СчетНаОплату.СтатусСчета <> ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.Подготовка)
		|	И абс_СчетНаОплату.Ссылка <> &ТекСчет
		|	И абс_СчетНаОплату.ЗакупочныйЗаказ = &ЗакупочныйЗаказ
		|	И НАЧАЛОПЕРИОДА(абс_СчетНаОплату.ДатаПлатежа, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаПлатежа, ДЕНЬ)";
		
		Запрос.УстановитьПараметр("ТекСчет", Ссылка);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("НомерВходящегоСчета", НомерВходящегоСчета);
		Запрос.УстановитьПараметр("СуммаПлатежа", СуммаПлатежа);
		Запрос.УстановитьПараметр("ЗакупочныйЗаказ", ЗакупочныйЗаказ);
		Запрос.УстановитьПараметр("ДатаПлатежа", ДатаПлатежа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Количество() = 0 Тогда
			
			ТекстСообщения = "Данный счет был сформирован ранее:";
			
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + "" + Выборка.Ссылка;
			КонецЦикла;
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецЕсли;
		
		// АБС ВСТАВКА Соответствие статьи КВ и назначения платежа
		Если БюджетнаяСтатья.Наименование = "Единая статья КВ" Тогда  			
			Если НЕ СтатьяДвиженияДенежныхСредств = глЗначениеПеременной("абс_СтатьяДДС_КВ") Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Статья ДДС не соответствует статье ДДС по КВ.", Отказ);  
			КонецЕсли;       			
		КонецЕсли;		
		// АБС ВСТАВКА Соответствие статьи КВ и назначения платежа КОНЕЦ	
		
		//Контроль используемых ЦФО, ЦФУ, СтатьиОборотовПоБюджетам
		Если Не (ЗакупочныйЗаказ.КонсолидированныйЗЗПоОЗК И Не ВзаимозачетПоОЗК) Тогда
			Отказ = ttk_ОбщегоНазначения.КонтрольИспользуемых_ЦФО_ЦФУ_БюджетнаяСтатья(ЭтотОбъект, Отказ);	
		КонецЕсли;
	КонецЕсли;	
	// АБС ВСТАВКА 2943 КОНЕЦ
	
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован
		и  Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка
		и Технический Тогда
		
		//Контроль используемых ЦФО, ЦФУ, СтатьиОборотовПоБюджетам
		Отказ = ttk_ОбщегоНазначения.КонтрольИспользуемых_ЦФО_ЦФУ_БюджетнаяСтатья(ЭтотОбъект, Отказ);
		
	КонецЕсли;	
	
	// АБС ВСТАВКА 3747
	//АБС ВСТАВКА 45183  10.07.2014 12:49:34  Шамов
	//Если НЕ абс_СлужебныеФункции.ЭтоПользовательДЗО(глЗначениеПеременной("глТекущийПользователь"))
	Если (НЕ абс_СлужебныеФункции.ЭтоПользовательДЗО(глЗначениеПеременной("глТекущийПользователь"))	
			ИЛИ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация)
	//АБС ВСТАВКА 45183 КОНЕЦ
		И Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка
		И (СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК
		// АБС ВСТАВКА Фролов 20130802 
		// Добавлена проверка в статусе Налоговый контроль
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль
		// Start КТТК Ермолов Е.Л.  04.06.2015 000032875
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован) 
		// Stop КТТК Ермолов Е.Л.  04.06.2015
		Тогда
		
		// Проверим наличие скана
		//АБС ВСТАВКА №42864 НАЧАЛО «21 мая 2014 г.», Пополитов
		//Если НЕ ЗначениеЗаполнено(СканСчетаНаОплату) Тогда
		// КТТК Ермолов Е.Л.  09.06.2015 000033237
		Если Справочники.абс_НазначенияПлатежа.НайтиПоКоду("000001588") = Справочники.абс_НазначенияПлатежа.ПустаяСсылка() Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Исчез или изменился элемент справочника назначение платежа 000001588 ""Пополнение счета""", Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СканСчетаНаОплату) и не Налог и (ЗначениеЗаполнено(НазначениеПлатежа) И  НазначениеПлатежа <> Справочники.абс_НазначенияПлатежа.НайтиПоКоду("000001588")) Тогда			
		//\\АБС ВСТАВКА №42864 КОНЕЦ   																   	 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран скан счета на оплату.", Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// АБС ВСТАВКА 3747 КОНЕЦ
	
	//АБС ВСТАВКА 45374  25.07.2014 12:28:01  Шамов
	дТекущаяДатаСервера = абс_СерверныеФункции.ПолучитьДатуСервера();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИИсполнители.Исполнитель
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Исполнитель = &Исполнитель
		|	И (РолиИИсполнители.Организация = &Организация
		|			ИЛИ РолиИИсполнители.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	И (РолиИИсполнители.Роль = ЗНАЧЕНИЕ(справочник.ролиисполнителей.БанковскаяГруппа)
		|			ИЛИ РолиИИсполнители.Роль = ЗНАЧЕНИЕ(справочник.ролиисполнителей.СотрудникДК))";

	Запрос.УстановитьПараметр("Исполнитель", мТекущийПользователь);
	Запрос.УстановитьПараметр("Организация", Организация);

	ОсуществлятьКонтрольДатыОплаты = Запрос.Выполнить().Пустой();
	
	Если (НЕ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ДЗО)
			И ОсуществлятьКонтрольДатыОплаты
			И (НЕ Технический)
			И (Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка)
			И (СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ
				ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК
				ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль)
			И Константы.абс_КонтрольСчетовНаОплатуПоДатеОплатыВключен.Получить()
		Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДниСогласования.ДатаКалендаря) КАК ДатаКалендаря
		|ИЗ
		|	(ВЫБРАТЬ
		|		Ближайшие8РабДней.ДатаКалендаря КАК ДатаКалендаря
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 8
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|			И НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|		
		|		УПОРЯДОЧИТЬ ПО
		|			ДатаКалендаря) КАК Ближайшие8РабДней) КАК ДниСогласования";
		
		Запрос.УстановитьПараметр("ТекДата", дТекущаяДатаСервера);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() ТОгда
			Выборка = Результат.Выбрать();
		    Выборка.Следующий();
			Если (НачалоДня(Выборка.ДатаКалендаря) >= НачалоДня(ДатаПлатежа) 
				ИЛИ НачалоДня(ДатаПлатежа) <= НачалоДня(дТекущаяДатаСервера))
					Тогда			
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Счет не может быть оплачен до " + Формат(Выборка.ДатаКалендаря+86400,"ДФ=dd.MM.yyyy"), Отказ);
			КонецЕсли;	
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	//АБС ВСТАВКА 45374 КОНЕЦ
	
	// АБС ВСТАВКА Фролов 20110925
	//Если СтатусСчета = Перечисления.абсСтатусыСчетов.Утвержден И Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда
	//	
	//	Если абс_БизнесПроцессы.КонтрольУтвержденияСчетов() Тогда
	//		
	//		
	//		
	//	КонецЕсли;
	//КонецЕсли;
	// АБС ВСТАВКА Фролов 20110925 КОНЕЦ
	
	// АБС ВСТАВКА Фролов 20120725
	// В связи с внедрением статуса Налоговый контроль будем проверять куратора так же на статусе налогового контроля
	
	//Если (СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль) И
	//	(ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи И ЗакупочныйЗаказ.НефиксированнаяСумма) И НЕ ЗначениеЗаполнено(Куратор) Тогда
	Если (СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль) И (ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи) И НЕ ЗначениеЗаполнено(Куратор) Тогда		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран куратор.", Отказ);
	КонецЕсли;
	
	// АБС ВСТАВКА Проверка договоров по ЗЗ
	// АБС ВСТАВКА Фролов 20120725
	// В связи с внедрением статуса Налоговый контроль будем выполнять проверки так же на статусе налогового контроля	
	Если ЗначениеЗаполнено(ЗакупочныйЗаказ) И Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка И 
		(СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран договор контрагента", Отказ);
		КонецЕсли;
		
		// Попробуем найти договор контрагента в табличной части "Договоры" Закупочного заказа
		Если ЗакупочныйЗаказ.Договоры.Найти(ДоговорКонтрагента, "ДоговорКонтрагента") = Неопределено и не ТретьеЛицо Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбранный договор не соответствует ЗЗ.", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	// АБС ВСТАВКА Проверка договоров по ЗЗ 
	
	//АБС Коломиец +	
	Если Не Технический И (Ссылка.СтатусСчета <> Перечисления.абсСтатусыСчетов.Подготовка
		И Ссылка.СтатусСчета <> Перечисления.абсСтатусыСчетов.Уточнить
		И Ссылка.СтатусСчета <> Перечисления.абсСтатусыСчетов.Отказ) Тогда
		//+++ НФС 2018 Григорьев Д.В. - отключено и перенесено в модуль формы в процедуру ПриЗаписи {
		//НФС 2018
		//Крамаренко Д.М.
		//МодульСумма 	= Макс(Оплаты.Итог("СуммаПлатежа") - СуммаПлатежа, СуммаПлатежа - Оплаты.Итог("СуммаПлатежа"));
		//МодульСуммаВал	= Макс(Оплаты.Итог("ВалютнаяСумма") - ВалютнаяСумма, ВалютнаяСумма - Оплаты.Итог("ВалютнаяСумма"));
		//НФС 2018
		//Крамаренко Д.М.
		//Если (МодульСумма > 0.02 ИЛИ МодульСуммаВал > 0.02) Тогда
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Сумма оплат больше общей суммы счета", Отказ);
		//ИначеЕсли (МодульСуммаВал > 0.01 ИЛИ МодульСумма > 0.01) И (МодульСумма > 0.02 ИЛИ МодульСуммаВал > 0.02) Тогда
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Сумма оплат больше общей суммы счета", Отказ);
		//Иначе				
		//	Если СуммаПлатежа > Оплаты.Итог("СуммаПлатежа") Тогда
		//		Оплаты[Оплаты.Количество() - 1].СуммаПлатежа = Оплаты[Оплаты.Количество() - 1].СуммаПлатежа + МодульСумма;
		//	Иначе
		//		Оплаты[Оплаты.Количество() - 1].СуммаПлатежа = Оплаты[Оплаты.Количество() - 1].СуммаПлатежа - МодульСумма;
		//	КонецЕсли;
		//	Если ВалютнаяСумма > Оплаты.Итог("ВалютнаяСумма") Тогда
		//		Оплаты[Оплаты.Количество() - 1].ВалютнаяСумма = Оплаты[Оплаты.Количество() - 1].ВалютнаяСумма + МодульСуммаВал;
		//	Иначе
		//		Оплаты[Оплаты.Количество() - 1].ВалютнаяСумма = Оплаты[Оплаты.Количество() - 1].ВалютнаяСумма - МодульСуммаВал;
		//	КонецЕсли;					
		//КонецЕсли;
		//--- } НФС 2018 Григорьев Д.В.
	Иначе
		Если Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка И НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка
			//Сторчевой А.Н. НФС 2018 {
			И Технический
			//} Сторчевой А.Н. НФС 2018
			Тогда
			Для Каждого локСтрока из Оплаты Цикл
				Если ЗначениеЗаполнено(локСтрока.БюджетнаяСтатья) Тогда
					Если НЕ БюджетнаяСтатья.абс_ФинансовоеОбязательство Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Бюджетная статья не является финансовым обязательством", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	//АБС Коломиец -
	
	//АБС Фролов 8630
	Если глЗначениеПеременной("абс_СтатусНалоговыйКонтрольВключен") Тогда  		
		Если Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль И
			НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль И
			НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда 			
			КомментарийНалоговыйКонтроль = ПричинаИзмененияСтатуса; 			
		КонецЕсли;		
	КонецЕсли;
	//АБС Фролов 8630 КОНЕЦ
	
	////АБС+ Тупиков 26.02.2013
	//Если Технический Тогда
	//	
	//КонецЕсли;
	////АБС- Тупиков
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим выбранный статус
	СписокСтатусов = Новый СписокЗначений;
	ЗаполнитьСписокДоступныхСтатусов(СписокСтатусов);
	
	// При записи ЗЗ счет может перейти только в статус Отказ или Согласован.
	//Если НЕ (ЗначениеЗаполнено(мТекущийЗЗ) И Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеЗЗ И (
	//	СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ)) Тогда
	//	
	
	//Бобылев А.А. 09.08.2018 
	Если Ссылка.Комментарий = "сформирован обработкой" Тогда
		СписокСтатусов.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
	КонецЕсли;
	//Бобылев А.А. 09.08.2018---------------------
	Если СписокСтатусов.НайтиПоЗначению(СтатусСчета) = Неопределено Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("" + Ссылка + ": Выбран неверный статус документа.", Отказ);
		
		СтатусСчета = Ссылка.СтатусСчета;
		
		Возврат;
	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если НЕ ОбменДанными.Загрузка Тогда
		Если СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ
			//++ Задача № 8630 Логинчев А.С. 24.05.2012 15:55:32
			//ИЛИ  СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК Тогда
			ИЛИ  СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК 
			ИЛИ  СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль 
			//-- Задача № 8630 Логинчев А.С.
            // Start КТТК Ермолов Е.Л.  16.04.2015 000032497
			ИЛИ  (Не Технический) И (СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован)  Тогда
            // Stop КТТК Ермолов Е.Л.  16.04.2015
			
			Если НЕ ЗначениеЗаполнено(НазначениеПлатежа) Тогда
				Сообщить("Не указано ""Назначение платежа"" ", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПериодПлатежа) Тогда
				Сообщить("Не указан ""Период платежа"" ", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	// АБС ВСТАВКА
	// Проверка суммы всех счетов на основании акта на превышение суммы акта
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Абс_АктПриёмкиВыполненныхРабот") И ЗначениеЗаполнено(ДокументОснование) И Технический Тогда
		
		Если СтатусСчета <> Перечисления.абсСтатусыСчетов.Подготовка И СтатусСчета <> Перечисления.абсСтатусыСчетов.Отменен 
			И СтатусСчета <> Перечисления.абсСтатусыСчетов.Уточнить Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(абс_СчетНаОплату.СуммаПлатежа) КАК СуммаПлатежа,
			|	абс_СчетНаОплату.ДокументОснование
			|ПОМЕСТИТЬ Счета
			|ИЗ
			|	Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &СсылкаСуществует
			|				ТОГДА абс_СчетНаОплату.Ссылка <> &Ссылка
			|		КОНЕЦ
			|	И абс_СчетНаОплату.ДокументОснование = &СсылкаАкт
			|	И НЕ абс_СчетНаОплату.СтатусСчета В (&МассивСтатусов)
			|
			|СГРУППИРОВАТЬ ПО
			|	абс_СчетНаОплату.ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(АктПриемки.СуммаЗаРаботу) КАК СуммаАкта,
			|	АктПриемки.Ссылка
			|ПОМЕСТИТЬ Акт
			|ИЗ
			|	Документ.Абс_АктПриёмкиВыполненныхРабот.Сотрудники КАК АктПриемки
			|ГДЕ
			|	АктПриемки.Ссылка = &СсылкаАкт
			|
			|СГРУППИРОВАТЬ ПО
			|	АктПриемки.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(Счета.ДокументОснование, Акт.Ссылка) КАК Поле1,
			|	СУММА(ЕСТЬNULL(Счета.СуммаПлатежа, 0)) КАК СуммаПлатежа,
			|	СУММА(ЕСТЬNULL(Акт.СуммаАкта, 0)) КАК СуммаАкта
			|ИЗ
			|	Счета КАК Счета
			|		ПОЛНОЕ СОЕДИНЕНИЕ Акт КАК Акт
			|		ПО Счета.ДокументОснование = Акт.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(Счета.ДокументОснование, Акт.Ссылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Счета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Акт";
			
			МассивСтатусов = Новый Массив;
			МассивСтатусов.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
			МассивСтатусов.Добавить(Перечисления.абсСтатусыСчетов.Отменен);
			МассивСтатусов.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("МассивСтатусов", МассивСтатусов);
			СтруктураПараметров.Вставить("СсылкаСуществует", ЗначениеЗаполнено(Ссылка));
			СтруктураПараметров.Вставить("Ссылка", Ссылка);
			СтруктураПараметров.Вставить("СсылкаАкт", ДокументОснование);
									
			РезультатЗапроса = абс_Привилегированный.ВыполнитьЗапрос(ТекстЗапроса, СтруктураПараметров);
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Если (Выборка.СуммаПлатежа + СуммаПлатежа) > Выборка.СуммаАкта Тогда
					Сообщить("Сумма по всем счетам на основании " + ДокументОснование + " превышает сумму акта");
					Отказ = Истина;
				КонецЕсли;				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА КОНЕЦ
	
	Если Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка И          //АБС Коломиец 20532
		(СтатусСчета <> Ссылка.СтатусСчета И СтатусСчета <> Перечисления.абсСтатусыСчетов) Тогда 
		
		//АБС ВСТАВКА №39428, 40163, 40979, 42864 НАЧАЛО «12 марта 2014 г.», Пополитов, Шамов
		//Отключил по заявке №40163 
		//Если НЕ абс_БизнесПроцессы.ПроверитьНаличиеФайловБюджетныйКомитет(Ссылка,Справочники.абс_ТипыДокументов.ОдобрениеБюджетногоКомитета) Тогда  	   
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не приложен файл подтверждения от Бюджетного комитета", Отказ);
		//КонецЕсли;	
		Попытка
			сОрганизацииОтбора = глЗначениеПеременной("абс_ОрганизацииДляКонтроляПоФайлуСчетНаОплату");
			мОрганизации = ЗначениеИзСтрокиВнутр(сОрганизацииОтбора);
			Если ТипЗнч(мОрганизации) = Тип("Массив") и мОрганизации.Найти(Организация) <> Неопределено и не Технический и не Налог Тогда 
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Объект",Ссылка);
				Запрос.УстановитьПараметр("абс_ТипДокумента",Справочники.абс_ТипыДокументов.СчетНаОплату);
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	ХранилищеДополнительнойИнформации.Ссылка
				               |ИЗ
				               |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
				               |ГДЕ
				               |	ХранилищеДополнительнойИнформации.Объект = &Объект
				               |	И ХранилищеДополнительнойИнформации.абс_ТипДокумента = &абс_ТипДокумента
				               |	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";	   
				Если Запрос.Выполнить().Пустой() Тогда	
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не приложен файл с типом ""Счёт на оплату"".", Отказ);	
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;		
		//\\АБС ВСТАВКА №39428, 40163, 40979, 42864 КОНЕЦ 
	КонецЕсли;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	Если (СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ) и СтатусСчета <> Перечисления.абсСтатусыСчетов.Отказ  и Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ Тогда
		СогласованиеДРУ = Истина;	
	КонецЕсли;
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	
	//Если ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	
	Попытка
		
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусСчетаНаОплатуПоРегистру(Ссылка);
		
		Если НЕ СтатусСчета = СтатусПоРегистру Тогда
			ЗаписатьНовыйСтатус(СтатусСчета, ПричинаИзмененияСтатуса);		
		КонецЕсли;
		
		//Филиализация
		мРолиПользователяФилиал = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь,Ссылка.Организация);
		//Филиализация
		
		// Запустим БП если он еще не запущен
		Если    СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК
			//++ Задача № 8630 Логинчев А.С. 21.05.2012 12:09:25
			ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль 
			//-- Задача № 8630 Логинчев А.С.
			ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ 
			
			//ВСТАВКА 181213 Проектный учет Родин
			ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеРП 
			//ВСТАВКА 181213 Проектный учет Родин
			
			//Проектный учет
			ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ 
			ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом 
			ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда
			//Проектный учет
			
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
			Если Не СогласованиеБезБП Тогда
				БПСогласование = НайтиБПСогласование();
				
				Если Не ЗначениеЗаполнено(БПСогласование) Тогда
					абс_БизнесПроцессы.ЗапуститьБПСогласованияСчетаНаОплату(Ссылка);	
				КонецЕсли;
			КонецЕсли;
			// АБС Изменение Родин Отключение бизнес-процессов 110314
			
			
		ИначеЕсли СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить Тогда
			
			СтатусИзменен = Ложь;
			
			// В зависимости от предыдущего статуса установим новый статус уточнения
			Если СтатусПоРегистру = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ Тогда
				// С ДФМ счет может вернуться либо на ОФК, либо на ДРУ
				Если ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи ИЛИ БылСогласованДРУ() Тогда
					СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ;
				Иначе
					СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК;
				КонецЕсли;
				
				СтатусИзменен = Истина;
				
			ИначеЕсли СтатусПоРегистру = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом Тогда
				
				СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ;		
				СтатусИзменен = Истина;
				
			ИначеЕсли СтатусПоРегистру = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда
				
				СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом;
				СтатусИзменен = Истина;
				
			КонецЕсли;
			
			Если СтатусИзменен Тогда
				
				ЗаписатьНовыйСтатус(СтатусСчета, ПричинаИзмененияСтатуса);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//АБС КМБ Движение по регистру Бюджетирования 	
		Если Не Отказ Тогда
			//НФС 2018
			//Крамаренко Д.М.
			//привел к единообразию, т.к. мУдалятьДвижения = Это НЕ Новый(), т.е. всегда там, где есть хоть какие то движения
			СписокСтатусовДляКонтроля = Новый СписокЗначений;
			СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
			СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
			СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
			СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отменен); 		
			Если не СписокСтатусовДляКонтроля.НайтиПоЗначению(СтатусСчета) = Неопределено Тогда 	
				//оставил пока но бред надо удалить - ниже чистим все движения
				//может они не удаляются так как установлено в объекте "Записывать выбранные"
				Движения.ОборотыБюджетов.Записывать = Истина;
				Движения.ОборотыБюджетов.Очистить();
				Движения.ОборотыБюджетов.Записать();
				Если мУдалятьДвижения Тогда
					ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
				КонецЕсли;
			//
			//СписокСтатусовДляКонтроля = Новый СписокЗначений;
			//СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
			//СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
			//СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
			//СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отменен); 		
			//Если не СписокСтатусовДляКонтроля.НайтиПоЗначению(СтатусСчета) = Неопределено Тогда 	
			//	Движения.ОборотыБюджетов.Записывать = Истина;
			//	Движения.ОборотыБюджетов.Очистить();
			//	Движения.ОборотыБюджетов.Записать();
			//	
			//	//АБС ВСТАВКА №31641 НАЧАЛО «5 марта 2015 г.», Пополитов
			//	Если мУдалятьДвижения Тогда
			//		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
			//	КонецЕсли;
			//	//\\АБС ВСТАВКА №31641 КОНЕЦ   					
			//	
			////АБС ИЗМЕНЕНИЕ 42873  22.05.2014 10:37:35  Шамов
			////	Возврат;
			////КонецЕсли;
			////Если УсловиеКонтроляДДС() Тогда
			ИначеЕсли УсловиеКонтроляДДС() Тогда
			//АБС ИЗМЕНЕНИЕ 42873 КОНЕЦ
		        ВыполнитьДвижениеПоРегиструБюджетирования_ОперФакт(Движения.ОборотыБюджетов,Ссылка);
				ВыполнитьДвижениеПоРегиструБюджетирования_Факт(Движения.ОборотыБюджетов,Ссылка);
			КонецЕсли;
		КонецЕсли;  
		//АБС
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		Если Не СогласованиеБезБП Тогда
			
			// Попробуем закрыть задачу согласования
			ЗадачаСогласование = ПолучитьЗадачуПоСчетуСогласование();
			
			Если НЕ ЗадачаСогласование = Неопределено Тогда
				
				Если НЕ ЗадачаСогласование.Выполнена Тогда
					
					ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();			
					ЗадачаОбъект.ВыполнитьЗадачу();
				КонецЕсли;
				
				// Попробуем найти задачу уточнения, в случае если счет уже согласован
				Если Ссылка.СчетСогласован Тогда
					ЗадачаУточнение = ПолучитьЗадачуПоСчетуУточнение();
					
					Если ЗадачаУточнение = Неопределено Тогда
						Возврат;
					КонецЕсли;
					
					Если НЕ ЗадачаУточнение.Выполнена Тогда
						
						ЗадачаОбъект = ЗадачаУточнение.ПолучитьОбъект();			
						ЗадачаОбъект.ВыполнитьЗадачу();
					КонецЕсли;
					
				КонецЕсли			
			КонецЕсли;		
		КонецЕсли;	
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи документа: " + ОписаниеОшибки() + ".", Отказ);
		
		Возврат;
	КонецПопытки;
	
	// АБС ВСТАВКА
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Абс_АктПриёмкиВыполненныхРабот") Тогда 
		абс_БизнесПроцессыПривелегированный.СменитьСтатусАкта(ДокументОснование, СтатусСчета, Ссылка, Отказ);
	КонецЕсли;
	// АБС ВСТАВКА КОНЕЦ
	
	//АБС+++ Гончаров 19.04.2013
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") 
		//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
		И абс_СерверныеФункции.абс_ДаннаяБазаНеКопия()
		//\\АБС ВСТАВКА №40078 КОНЕЦ
														Тогда
		Если Константы.абс_СинхронизацияВыплатыЗарплаты.Получить() И ДокументОснование.Дата >= глЗначениеПеременной("абс_ДатаНачалаСинхронизацииВыплатыЗП") Тогда
			абс_WebServiceСервер.абс_СинхронизацияВыплатЗППриЗаписи(Ссылка, Отказ);
		КонецЕСлИ;
	КонецЕСли;	
	//\\АБС--- Гончаров 19.04.2013
	
	//АБС ВСТАВКА №21134 НАЧАЛО
	Если не Отказ и СтатусСчета = Перечисления.абсСтатусыСчетов.ГотовКОплате Тогда
		Для каждого СтрокаТабличнойЧасти из Оплаты Цикл  
			Если СтрокаТабличнойЧасти.СтатусОплаты = Перечисления.абсСтатусыСчетов.ГотовКОплате Тогда	
				Если не СтрокаТабличнойЧасти.ПланПлатежей.Пустая() и СтрокаТабличнойЧасти.ПланПлатежей.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Отправлен Тогда
					Док = СтрокаТабличнойЧасти.ПланПлатежей.ПолучитьОбъект();
					Док.СтатусПлана = Перечисления.абс_СтатусыПланаПлатежей.Утвержден;
					Док.Записать();
					Сообщить("В документе «"+Док+"» изменен статус на «"+Док.СтатусПлана+"»");
				КонецЕсли;	
				Если не СтрокаТабличнойЧасти.ЗРС.Пустая() и СтрокаТабличнойЧасти.ЗРС.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
					Док = СтрокаТабличнойЧасти.ЗРС.ПолучитьОбъект();
					Док.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате;
					Док.Записать();
					Сообщить("В документе «"+Док+"» изменен статус на «"+Док.Статус+"»");
				КонецЕсли;	
				Если не СтрокаТабличнойЧасти.ПлатежноеПоручение.Пустая() и СтрокаТабличнойЧасти.ПлатежноеПоручение.Статус = Перечисления.абсСтатусыПлатежей.Отправлено Тогда
					Док = СтрокаТабличнойЧасти.ПлатежноеПоручение.ПолучитьОбъект();
					Док.Статус = Перечисления.абсСтатусыПлатежей.ГотовКОплате;
					Док.Записать();
					Сообщить("В документе «"+Док+"» изменен статус на «"+Док.Статус+"»");
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	//\\АБС ВСТАВКА №21134 КОНЕЦ	
	 	//ххх Брель Виктор Андреевич 17.05.2018 12:03:04, заявка <<<
	// Когда пускаем в маршрут из подготовки.
	// Проверяем аналитику по ЗЗ
	// Проверяем аналитику по ЗЗ в гарфике поступления
	Если НЕ ОбменДанными.Загрузка Тогда
	Если СтатусПоРегистру = Перечисления.абсСтатусыСчетов.Подготовка И СтатусСчета <> Перечисления.абсСтатусыСчетов.Подготовка Тогда
		ПроверитьАналитикуПоЗЗ(Отказ);
	КонецЕсли;
	КонецЕсли;
	// Брель Виктор Андреевич 17.05.2018 12:03:04 >>>

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда
		
		// Заполним шапку документа
		ЗакупочныйЗаказ = ДанныеЗаполнения;
		//НФС 2018
		//Крамаренко Д.М.
		// Аналитика
		ЦФО = ДанныеЗаполнения.ЦФО;
		ЦФУ = ДанныеЗаполнения.ЦФУ;
		Если Не ЗначениеЗаполнено(ЦФУ) И ДанныеЗаполнения.Товары.Количество()>0 Тогда
			ЦФУ = ДанныеЗаполнения.Товары[0].абс_ЦФУ;
		КонецЕсли;
		ТипСети = ДанныеЗаполнения.ТипСети;
		Если Не ЗначениеЗаполнено(ТипСети) И ДанныеЗаполнения.Товары.Количество()>0 Тогда
			ТипСети = ДанныеЗаполнения.Товары[0].абс_ТипСети;
		КонецЕсли;
		КВ = ДанныеЗаполнения.КВ;
		Если Не ЗначениеЗаполнено(КВ) И ДанныеЗаполнения.Товары.Количество()>0 Тогда
			КВ = ДанныеЗаполнения.Товары[0].абс_КВ;
		КонецЕсли;
		ТЭО = ДанныеЗаполнения.ТЭО;
		Если Не ЗначениеЗаполнено(ТЭО) И ДанныеЗаполнения.Товары.Количество()>0 Тогда
			ТЭО	= ДанныеЗаполнения.Товары[0].абс_ТЭО;
		КонецЕсли;
		ТипКонтрагента = ДанныеЗаполнения.ТипКонтрагента;
		ТипРасхода = ДанныеЗаполнения.ТипРасхода;		
		БюджетнаяСтатья	= ДанныеЗаполнения.БюджетнаяСтатья;
   		РаспределениеПоПроектам.Загрузить(ДанныеЗаполнения.РаспределениеПоПроектам.Выгрузить());
		Валюта = ДанныеЗаполнения.ВалютаДокумента;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Если ДанныеЗаполнения.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство Тогда //абсо
			Организация	= Справочники.Организации.НайтиПоКоду("000000001");
			ЗаказчикПлатежа	= ДанныеЗаполнения.Организация;
			ДоговорКонтрагента = абс_БизнесПроцессыПривелегированный.СформироватьДоговорТрехсторонний(ДанныеЗаполнения, Организация);
			абс_ДЗО	= ДоговорКонтрагента.абс_ДЗО;
		Иначе
			Организация	= ДанныеЗаполнения.Организация;
			ЗаказчикПлатежа	= ДанныеЗаполнения.Организация;
			Если не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ДоговорКонтрагента = ДанныеЗаполнения.Договоры[0].ДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		СуммаОплаты = ДанныеЗаполнения.ИтогСуммаСНДС;
		Если ДанныеЗаполнения.Товары.Количество()>0 Тогда
			СтавкаНДС = ДанныеЗаполнения.Товары[0].СтавкаНДС;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
			ДатаПлатежа = ДанныеЗаполнения.Дата;
		КонецЕсли;
		
		СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Дата);
		КурсДокумента = СтруктураКурсаВалютаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаВалютаДокумента.Кратность;
		
		СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка;		
		
		// Заполним оплату по документу
		//НФС 2018
		СтруктураАналитик = Новый Структура;
		СтруктураАналитик.Вставить("абс_ТипРасхода", ТипРасхода);
		СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
		СтруктураАналитик.Вставить("СтатьяОборотов", Справочники.СтатьиОборотовПоБюджетам.ПустаяСсылка());
		СтруктураАналитик.Вставить("абс_ТипСети", Справочники.абс_ТипыСетей.ПустаяСсылка());
		СтруктураАналитик.Вставить("абс_КВ", Справочники.абс_КапитальныеВложения.ПустаяСсылка());
		СтруктураАналитик.Вставить("абс_ТЭО", Справочники.абс_ТЭО.ПустаяСсылка());
		СтруктураАналитик.Вставить("абс_ЦФУ", Справочники.абс_ЦФУ.ПустаяСсылка());
		СтруктураАналитик.Вставить("ttk_ОбъектБюджетирования", Справочники.ttk_ОбъектыБюджетирования.ПустаяСсылка());
		КолонкиАналитик = "СтатьяОборотов, абс_ТипСети, абс_КВ, абс_ТЭО, абс_ЦФУ, ttk_ОбъектБюджетирования, ttk_Город";
		КолонкиИтогов = "СуммаСНДС,ВалютнаяСуммаСНДС";
		ОплатыТЗ = ДанныеЗаполнения.Товары.Выгрузить(,КолонкиАналитик + ", " + КолонкиИтогов);
		ОплатыТЗ.Свернуть(КолонкиАналитик, КолонкиИтогов);
		//НФС 2018
		//Крамаренко Д.М.
		ЗаполнитьОплату(ОплатыТЗ);
		//Если Не ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
		//	СуммаПлатежа = Оплаты.Итог("СуммаПлатежа");
		//	ВалютнаяСумма = Оплаты.Итог("ВалютнаяСумма");
		//КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Абс_АктПриёмкиВыполненныхРабот") Тогда	
		СтрокаТЧ = ДанныеЗаполнения.Сотрудники[0];
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		Технический = Истина;
		Контрагент = СтрокаТЧ.ДоговорПодряда.абс_Контрагент;	
	    Организация = ДанныеЗаполнения.Организация;
		ПериодПлатежа = ДанныеЗаполнения.МесяцНачисления;
		ТипКонтрагента = СтрокаТЧ.ДоговорПодряда.абс_Контрагент.абс_ТипыКонтрагентов;
		НазначениеПлатежа = Справочники.абс_НазначенияПлатежа.НайтиПоКоду("000000449");
		БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ВБ15");
		ОснованиеПлатежа = "Оплата по документу: " + ДанныеЗаполнения; 
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД104");
		ДатаВходящегоСчета = ДанныеЗаполнения.Дата;
		НомерВходящегоСчета = ДанныеЗаполнения.Номер;		
		Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка;
		
		ЗапросДатаПлатежа = Новый Запрос;
		ЗапросДатаПлатежа.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДОБАВИТЬКДАТЕ(абс_ИзменениеСтатусовАктовПриёмкиСрезПоследних.Период, ДЕНЬ, 10) КАК ДатаОплаты
		|ИЗ
		|	Документ.Абс_АктПриёмкиВыполненныхРабот КАК Абс_АктПриёмкиВыполненныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.абс_ИзменениеСтатусовАктовПриёмки.СрезПоследних(, СтатусАкта = &СтатусНачислено) КАК абс_ИзменениеСтатусовАктовПриёмкиСрезПоследних
		|		ПО (абс_ИзменениеСтатусовАктовПриёмкиСрезПоследних.АктПриёмкиВыполненныхРабот = Абс_АктПриёмкиВыполненныхРабот.Ссылка)
		|ГДЕ
		|	Абс_АктПриёмкиВыполненныхРабот.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОплаты УБЫВ";
		
		ЗапросДатаПлатежа.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		ЗапросДатаПлатежа.УстановитьПараметр("СтатусНачислено", Перечисления.абс_СтатусыАктовПриемки.Начислено);
		
		Выборка = ЗапросДатаПлатежа.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаПлатежа = Выборка.ДатаОплаты;
		КонецЕсли;
		
		СуммаПлатежа = СтрокаТЧ.СуммаЗаРаботу;
		ЦФО = СтрокаТЧ.ДоговорПодряда.абс_ЦФО;
		ЦФУ = СтрокаТЧ.ДоговорПодряда.абс_ЦФУ;
		Курс = 1;
		КурсДокумента = 1;
		Комментарий = "Оплата по документу: " + ДанныеЗаполнения;
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		
		ДокументОснование = ДанныеЗаполнения;
	// АБС ВСТАВКА КОНЕЦ
	
	//АБС+++ Гончаров 19.04.2013
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		ДокументОснование = ДанныеЗаполнения;
		Технический = Истина;
		Контрагент = ДанныеЗаполнения.Банк;
		ДоговорКонтрагента = ДанныеЗаполнения.Банк.ОсновнойДоговорКонтрагента;
		ПериодПлатежа = ДанныеЗаполнения.Дата;
		ДатаПлатежа = ДанныеЗаполнения.Дата;
		ДатаВходящегоСчета = ДанныеЗаполнения.Дата;
		НомерВходящегоСчета = ДанныеЗаполнения.Номер;		
		ОснованиеПлатежа = ?(ЗначениеЗаполнено(НомерВходящегоСчета), СокрЛП(НомерВходящегоСчета), "") +
			?(ЗначениеЗаполнено(ДатаВходящегоСчета), " от " + Формат(ДатаВходящегоСчета, "ДФ=dd.MM.yy"), "");	
		мВалютнаяСумма = ДанныеЗаполнения.СуммаДокумента;
		мСуммаПлатежа = ДанныеЗаполнения.СуммаДокумента;
		ВалютнаяСумма = ДанныеЗаполнения.СуммаДокумента;
		СуммаПлатежа = ДанныеЗаполнения.СуммаДокумента;
		Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.ЮридическоеЛицоРезидентНеоператор;
		ЦФО = глЗначениеПеременной("абс_ЦФО_ЗП");
		ЦФУ = глЗначениеПеременной("абс_ЦФУ_ЗП");
		БюджетнаяСтатья = глЗначениеПеременной("абс_БюджетнаяСтатьяВыплатаЗП");
		СтатьяДвиженияДенежныхСредств = глЗначениеПеременной("абс_СтатьяДДСВыплатаЗП");
		Курс = 1;
        // Start КТТК Ермолов Е.Л.  19.11.2014 000028930 
        ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП; 
        // Stop КТТК Ермолов Е.Л.  19.11.2014 
	//АБС ВСТАВКА 39137  18.03.2014 17:17:23  Стрельцов
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда	
		ДокументОснование = ДанныеЗаполнения;		
		Налог = Истина;		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование, "Организация, Валюта, Курс, Кратность");		
		// << Казаков Е.Л. 27.03.2017
		Если ДокументОснование.ДоговорКонтрагента.абс_ВидДоговора = Справочники.абс_ПредметДоговораГК.ДоговорАренды И ДокументОснование.Контрагент.абс_ТипыКонтрагентов = Справочники.абс_ТипыКонтрагентов.ФизическиеЛица Тогда
			// НДФЛ с аренды
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ЗакупочныйЗаказ = ДокументОснование.ЗакупочныйЗаказ;  
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога;
			СуммаПлатежа = Окр(ДокументОснование.СуммаПлатежа/0.87*0.13, 0);
			ВалютнаяСумма = СуммаПлатежа; 
			ДатаВходящегоСчета = ДокументОснование.ДатаВходящегоСчета;
			НомерВходящегоСчета = ДокументОснование.НомерВходящегоСчета;
			
//			БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ВБ06");
			ЦФО 					= ДокументОснование.ЦФО;
			ЦФУ						= ДокументОснование.ЦФУ;
			ТипСети					= ДокументОснование.ТипСети;
			КВ						= ДокументОснование.КВ;
			ТЭО						= ДокументОснование.ТЭО;
			ТипКонтрагента			= ДокументОснование.ТипКонтрагента;
			ТипРасхода				= ДокументОснование.ТипРасхода;		
			БюджетнаяСтатья			= ДокументОснование.БюджетнаяСтатья;
	   		РаспределениеПоПроектам.Загрузить(ДокументОснование.РаспределениеПоПроектам.Выгрузить());
			СтатьяДвиженияДенежныхСредств = ДокументОснование.СтатьяДвиженияДенежныхСредств;
			ТретьеЛицо = Истина;
		// Казаков Е.Л. 27.03.2017 >>
		Иначе			
			Технический = Истина;
			Если СокрЛП(Организация.Код) = "000000001" Тогда   //КТТК
				Контрагент = Справочники.Контрагенты.НайтиПоКоду("K007133");
				Если ЗначениеЗаполнено(Контрагент) Тогда
					ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("к0092459",,,Контрагент);
				КонецЕсли;			
			КонецЕсли;			
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД240");
			//ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду("ЦП06");
			//ТипКонтрагента = Справочники.абс_ТипыКонтрагентов.ЮридическоеЛицоНерезидентНеоператор;
			НазначениеПлатежа = Справочники.абс_НазначенияПлатежа.НайтиПоКоду("000000239");
			//БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ВБ06");
			//НФС 2018
			//Крамаренко Д.М.
			ЦФО 					= ?(ЗначениеЗаполнено(ДокументОснование.ЦФО), ДокументОснование.ЦФО, Справочники.Подразделения.НайтиПоКоду("ЦФО1367"));
			ЦФУ						= ?(ЗначениеЗаполнено(ДокументОснование.ЦФУ), ДокументОснование.ЦФУ, Справочники.абс_ЦФУ.НайтиПоКоду("ЦП06"));
			ТипСети					= ДокументОснование.ТипСети;
			КВ						= ДокументОснование.КВ;
			ТЭО						= ДокументОснование.ТЭО;
			ТипКонтрагента			= ?(ЗначениеЗаполнено(ДокументОснование.ТипКонтрагента), ДокументОснование.ТипКонтрагента, Справочники.абс_ТипыКонтрагентов.ЮридическоеЛицоНерезидентНеоператор);
			ТипРасхода				= ДокументОснование.ТипРасхода;		
			БюджетнаяСтатья			= ?(ЗначениеЗаполнено(ДокументОснование.БюджетнаяСтатья), ДокументОснование.БюджетнаяСтатья, Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ВБ06")); 
	   		РаспределениеПоПроектам.Загрузить(ДокументОснование.РаспределениеПоПроектам.Выгрузить());
			СтатьяДвиженияДенежныхСредств = ДокументОснование.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;	
	//\\АБС ВСТАВКА 39137 КОНЕЦ
	КонецЕсли;
	
	глТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");  	
	Ответственный = глТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда 
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;	
	КонецЕсли; 	
	
КонецПроцедуры

//АБС ВСТАВКА №7900 НАЧАЛО
Функция ПолучитьСтатьюДДС(врБюджетнаяСтатья,врНазначениеПлатежа) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДДС.БюджетнаяСтатья,
	               |	ДДС.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	ДДС.СтатьяДДС
	               |ИЗ
	               |	РегистрСведений.абс_СоответствияСтатейДДСИУправленческихСтатейЗатрат КАК ДДС
	               |ГДЕ
	               |	ДДС.БюджетнаяСтатья В(&БюджетнаяСтатья)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НазначениеПлатежа";
	
	Запрос.УстановитьПараметр("БюджетнаяСтатья",врБюджетнаяСтатья);	
	
	врТЗ = Запрос.Выполнить().Выгрузить();
	Если врТЗ.Количество() > 1 Тогда 		
		МассивДДС = врТЗ.НайтиСтроки(Новый Структура("НазначениеПлатежа",врНазначениеПлатежа));
		Если МассивДДС.Количество() > 0 Тогда
			Возврат МассивДДС[0].СтатьяДДС;	
		КонецЕсли;	
	ИначеЕсли врТЗ.Количество() > 0 Тогда			
		МассивДДС = врТЗ.ВыгрузитьКолонку("СтатьяДДС");
		Возврат МассивДДС[0];
	Иначе  
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции
//\\АБС ВСТАВКА №7900 КОНЕЦ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ ДОКУМЕНТА

//АБС НАЧАЛО Задача №08759
Функция ПостроениеТаблицыВариантовАналитик(Дата, Знач СтруктураАналитик)
	
	СтруктураЗаполненныхАналитик = Новый Структура;
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		// 20111114 Фролов Бага
		// Проблема в том что механизм построения аналитик отключен, но т.к. аналитика не заполнена по ней не происходит отборов
		// следовательно механизм не до конца отключен.
		//Если ЗначениеЗаполнено(ЭлементСтруктуры.значение) Тогда
			СтруктураЗаполненныхАналитик.Вставить(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
		//КонецЕсли;		
	КонецЦикла;
	
	// АБС ВСТАВКА Фролов 20120125 Не используем регистр установленных аналитик
	// т.к. аналитики все заполняются полостью.
	Возврат СтруктураЗаполненныхАналитик;
	
	//по СтруктураЗаполненныхАналитик создадим таблицу со всевозможными сочетаниями аналитик
	ТаблицаВариантовАналитик = Новый ТаблицаЗначений;
	ТаблицаВариантовАналитик.Колонки.Добавить("Структура");
	ТаблицаВариантовАналитик.Колонки.Добавить("Уровень");
	ТаблицаВариантовАналитик.Колонки.Добавить("Код");
	
	
	НоваяСтрока = ТаблицаВариантовАналитик.Добавить();
	НоваяСтрока.Структура = СтруктураЗаполненныхАналитик;
	НоваяСтрока.Уровень = СтруктураЗаполненныхАналитик.Количество();
	НоваяСтрока.Код = СформироватьКодСтруктуры(НоваяСтрока.Структура);
	
	МассивОбязательныхАналитик = Новый Массив;
	МассивОбязательныхАналитик.Добавить("СтатьяОборотов");
	МассивОбязательныхАналитик.Добавить("Организация");
	МассивОбязательныхАналитик.Добавить("абс_ЦФУ");
	МассивОбязательныхАналитик.Добавить("ЦФО");
	МассивОбязательныхАналитик.Добавить("абс_ТЭО");
	МассивОбязательныхАналитик.Добавить("абс_ТипСети");
	МассивОбязательныхАналитик.Добавить("абс_КВ");
	МассивОбязательныхАналитик.Добавить("абс_ТипКонтрагента");
	МассивОбязательныхАналитик.Добавить("абс_ТипРасхода");
	МассивОбязательныхАналитик.Добавить("ttk_ОбъектБюджетирования");
	
	//
	//Если Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Связь")>0  Тогда
	//	Если Найти(СтруктураАналитик.СтатьяОборотов.Наименование,"КВ по поставке")>0 Тогда
	//		МассивОбязательныхАналитик.Добавить("абс_ТЭО");
	//		МассивОбязательныхАналитик.Добавить("абс_ТипСети");
	//	КонецЕсли; 		
	//КонецЕсли;
	//Если Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Администрация")>0  или Найти(СтруктураАналитик.абс_ЦФУ.Наименование,"Эксплуатация")>0 Тогда
	//	Если Найти(СтруктураАналитик.СтатьяОборотов.Наименование,"КВ по поставке")>0 Тогда
	//		МассивОбязательныхАналитик.Добавить("абс_КВ");			
	//	КонецЕсли; 		
	//КонецЕсли;	
	
	
	ЗаполнитьТаблицуВариантовАналитик(СтруктураЗаполненныхАналитик,ТаблицаВариантовАналитик, МассивОбязательныхАналитик);
	ТаблицаВариантовАналитик.Сортировать("Уровень Убыв");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// АБС ИЗМЕНЕНО Фролов 20110125 Необходимо проверять лимит на текущую дату.
	//Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Дата",КонецГода(Дата));
	Запрос.Текст=
	"ВЫБРАТЬ
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.СтатьяОборотов КАК СтатьяОборотов,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.ЦФО,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипКонтрагента КАК абс_ТипКонтрагента,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипСети КАК абс_ТипСети,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_КВ КАК абс_КВ,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТЭО КАК абс_ТЭО,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ЦФУ КАК абс_ЦФУ,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.абс_ТипРасхода КАК абс_ТипРасхода,
	|	абс_УстановкаЛимитовПоСтатьямСрезПоследних.Организация
	|ПОМЕСТИТЬ ВТ_ЛимитыПоСтатьям
	|ИЗ
	|	РегистрСведений.абс_УстановкаЛимитовПоСтатьям.СрезПоследних(&Дата, ) КАК абс_УстановкаЛимитовПоСтатьямСрезПоследних";
	
	Запрос.Выполнить();
	
	Для каждого ВариантНабораАналитик из ТаблицаВариантовАналитик Цикл
		
		УсловиеОтбора = "";
		Для каждого ЭлементСтруктуры из ВариантНабораАналитик.Структура Цикл
			УсловиеОтбора = УсловиеОтбора+" И ВТЛимитыПоСтатьям."+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
		КонецЦикла;
		УсловиеОтбора = СокрЛП(Сред(УсловиеОтбора,3));
		
		Запрос.Текст=
		"ВЫБРАТЬ *
		|ИЗ
		|	ВТ_ЛимитыПоСтатьям КАК ВТЛимитыПоСтатьям
		|ГДЕ
		|"+УсловиеОтбора;
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			возврат ВариантНабораАналитик.Структура;			
		КонецЕсли;
	КонецЦикла;
	возврат Неопределено;
КонецФункции

Функция ОстатокЛимитаПоБюджету(Дата1, Дата2,СтруктураАналитик, НефиксированнаяСумма = Ложь, ЗакупочныйЗаказ = Неопределено)
	
	ВариантСтруктуры = ПостроениеТаблицыВариантовАналитик(Дата2,СтруктураАналитик);
	Если ВариантСтруктуры = Неопределено Тогда
		возврат -2;
	КонецЕсли;
	
	//нашли набор аналитик, по которым лимиты есть
	Запрос = НОВЫЙ Запрос;
	Запрос.УстановитьПараметр("Дата1",Дата1);
	Запрос.УстановитьПараметр("Дата2",Дата2);
	
	УсловиеОтбора = "";
	Для каждого ЭлементСтруктуры из ВариантСтруктуры Цикл
		
		// АБС ВСТАВКА 20120205 Отключаем контроль по аналитике "Тип контрагента", "Тип сети"
		// Инициатор: Калымкин
		
		Если ЭлементСтруктуры.Ключ = "абс_ТипКонтрагента" ИЛИ ЭлементСтруктуры.Ключ = "абс_ТипСети" Тогда
			Продолжить;
		КонецЕсли;
		
		// АБС ВСТАВКА 20120205 Отключаем контроль по аналитике "Тип контрагента", "Тип сети" КОНЕЦ
		
		//АБС НАЧАЛО Задача №08759
		//УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
		Если ЭлементСтруктуры.Ключ = "Проект" Тогда
			УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+" В ИЕРАРХИИ(&"+ЭлементСтруктуры.Ключ+")";	
		Иначе
			УсловиеОтбора = УсловиеОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;	
		КонецЕсли;
  		//\\АБС КОНЕЦ Задача №08759
		
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	КонецЦикла;
	УсловиеОтбора = СокрЛП(Сред(УсловиеОтбора,3));
	
	//Если Не НефиксированнаяСумма Тогда //АБС Коломиец 4870
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0) < 0
	|					ИЛИ КонтролируемыеЗначенияБюджетовОбороты.Проект В (&Проект)
	|				ТОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0) < 0
	|			ТОГДА ВЫБОР
	|					КОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект.ЭтоГруппа
	|						ТОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект
	|					ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект.Родитель
	|				КОНЕЦ
	|		ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект
	|	КОНЕЦ КАК Проект
	|ИЗ
	|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&Дата1, &Дата2, , "+УсловиеОтбора+") КАК КонтролируемыеЗначенияБюджетовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот, 0) - ЕСТЬNULL(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот, 0) < 0
	|			ТОГДА ВЫБОР
	|					КОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект.ЭтоГруппа
	|						ТОГДА КонтролируемыеЗначенияБюджетовОбороты.Проект
	|					ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект.Родитель
	|				КОНЕЦ
	|		ИНАЧЕ КонтролируемыеЗначенияБюджетовОбороты.Проект
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остаток";

	//Выборка = Запрос.Выполнить().Выбрать();      
	//Если Выборка.Следующий() Тогда
	//	Попытка
	//		возврат Выборка.План-Выборка.Факт;                         
	//	Исключение
	//		возврат -1;
	//	КонецПопытки;
	//Иначе
	//	возврат -1;
	//КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

	
КонецФункции

Процедура ЗаполнитьТаблицуВариантовАналитик(ЗНАЧ СтруктураЗаполненныхАналитик,ТаблицаВариантовАналитик, МассивОбязательныхАналитик)
	Для каждого УдаляемыйЭлементСтруктуры из СтруктураЗаполненныхАналитик Цикл
		Если МассивОбязательныхАналитик.Найти(УдаляемыйЭлементСтруктуры.Ключ)<>неопределено Тогда			
			продолжить;
		КонецЕсли;
		
		//создаем копию структуры без этого элемента
		КопияСтруктуры = Новый Структура;
		
		Для каждого ЭлементСтруктуры из СтруктураЗаполненныхАналитик Цикл
			Если УдаляемыйЭлементСтруктуры.Ключ = ЭлементСтруктуры.Ключ Тогда
				продолжить;
			КонецЕсли;
			
			КопияСтруктуры.Вставить(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
		КодКопииСтруктуры = СформироватьКодСтруктуры(КопияСтруктуры);
		Если КопияСтруктуры.Количество()>0 и ТаблицаВариантовАналитик.Найти(КодКопииСтруктуры,"Код")=неопределено Тогда
			НоваяСтрока = ТаблицаВариантовАналитик.Добавить();
			НоваяСтрока.Структура = КопияСтруктуры;
			НоваяСтрока.Уровень = КопияСтруктуры.Количество();
			НоваяСтрока.КОД = КодКопииСтруктуры;
			Если КопияСтруктуры.Количество()>1 Тогда
				ЗаполнитьТаблицуВариантовАналитик(КопияСтруктуры,ТаблицаВариантовАналитик, МассивОбязательныхАналитик);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьКодСтруктуры(Структура)
	Код = "";
	Если Структура.Свойство("Организация") Тогда
		Код = Код+"0";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ЦФУ") Тогда
		Код = Код+"1";
	КонецЕсли;
	
	Если Структура.Свойство("ЦФО") Тогда
		Код = Код+"2";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипРасхода") Тогда
		Код = Код+"3";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипКонтрагента") Тогда
		Код = Код+"4";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТипСети") Тогда
		Код = Код+"5";
	КонецЕсли;
	
	Если Структура.Свойство("абс_КВ") Тогда
		Код = Код+"6";
	КонецЕсли;
	
	Если Структура.Свойство("абс_ТЭО") Тогда
		Код = Код+"7";
	КонецЕсли;
	
	Если Структура.Свойство("СтатьяОборотов") Тогда
		Код = Код+"8";
	КонецЕсли;
	
	возврат Код;
	
КонецФункции

Процедура ПолучитьВсехРодителейПроекта(ТекущийПроект, СписокГрупп)
	
	РодительПроекта = ТекущийПроект.Родитель;
	Если РодительПроекта.Пустая() Тогда
		Возврат;
	Иначе
		Если РодительПроекта.абс_Case Тогда 
			СписокГрупп.Добавить(РодительПроекта);
		КонецЕсли;
		
		ПолучитьВсехРодителейПроекта(РодительПроекта, СписокГрупп)
	КонецЕсли;	                      
	
КонецПроцедуры

Процедура ВыполнитьДвижениеПоРегиструБюджетирования_Факт(ДвижениеДокумента, СсылкаНаДокумент) Экспорт		
	
	//Движение делают только те документы которые Отправлены в банк или в статусе "оплачен" и у которых заполнен реквизит бюджетная статья
	ЗначениеКонстантыСценарийДДС = глЗначениеПеременной("абс_СценарийДДС");
	
	ФильтрСтатусовОплат = Новый Массив;
	ФильтрСтатусовОплат.Добавить(Перечисления.абсСтатусыСчетов.Оплачен); 
	//ФильтрСтатусовОплат.Добавить(Перечисления.абсСтатусыСчетов.ОтправленВБанк); 
	ФильтрСтатусовОплат.Добавить(Перечисления.абсСтатусыСчетов.ПеренесенВГК); 
	                         	
	Если Оплаты.Найти(Перечисления.абсСтатусыСчетов.ОтправленВБанк,"СтатусОплаты")<>Неопределено ИЛИ 
		Оплаты.Найти(Перечисления.абсСтатусыСчетов.ПеренесенВГК,"СтатусОплаты")<>Неопределено ИЛИ 
		Оплаты.Найти(Перечисления.абсСтатусыСчетов.Оплачен,"СтатусОплаты")<>Неопределено  Тогда
		                		
		Если ЗначениеКонстантыСценарийДДС <> Справочники.СценарииПланирования.ПустаяСсылка() 
			И ЗначениеЗаполнено(СсылкаНаДокумент.БюджетнаяСтатья) Тогда
			
			ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	абс_СчетНаОплатуОплаты.КВ КАК абс_КВ,
			|	абс_СчетНаОплатуОплаты.ТипКонтрагента КАК абс_ТипКонтрагента,
			|	абс_СчетНаОплатуОплаты.ТипСети КАК абс_ТипСети,
			|	абс_СчетНаОплатуОплаты.ТипРасхода КАК абс_ТипРасхода,
			|	абс_СчетНаОплатуОплаты.ТЭО КАК абс_ТЭО,
			|	абс_СчетНаОплатуОплаты.Проект КАК Проект,
			|	абс_СчетНаОплатуОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	абс_СчетНаОплатуОплаты.ЦФУ КАК абс_ЦФУ,
			|	абс_СчетНаОплатуОплаты.Валюта КАК Валюта,
			|	абс_СчетНаОплатуОплаты.ВалютнаяСумма,
			|	абс_СчетНаОплатуОплаты.Контрагент,
			|	абс_СчетНаОплатуОплаты.Ссылка.БюджетнаяСтатья КАК СтатьяОборотов,
			|	абс_СчетНаОплатуОплаты.ЦФО,
			|	&Сценарий,
			|	абс_СчетНаОплатуОплаты.СуммаПлатежа КАК СуммаСценария,
			|	абс_СчетНаОплатуОплаты.СуммаПлатежа КАК СуммаУпр,
			|	абс_СчетНаОплатуОплаты.Ссылка.ПериодПлатежа КАК Период,
			|	абс_СчетНаОплатуОплаты.Ссылка.Организация,
			|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение.Дата КАК ПлатежноеПоручениеДата,
			|	абс_СчетНаОплатуОплаты.ЗРС.Дата КАК ЗРСДата,
			//НФС 2018
			//Крамаренко Д.М.
			//добавлен объект бюджетирования и город
			|	абс_СчетНаОплатуОплаты.ttk_ОбъектБюджетирования КАК ttk_ОбъектБюджетирования,
			|	абс_СчетНаОплатуОплаты.ttk_Город КАК ttk_Город 
			|ИЗ
			|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
			|ГДЕ
			|	абс_СчетНаОплатуОплаты.Ссылка = &Ссылка
			|	И абс_СчетНаОплатуОплаты.СтатусОплаты В(&МассивСтатусов)";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("Сценарий",ЗначениеКонстантыСценарийДДС);
			Запрос.УстановитьПараметр("МассивСтатусов",ФильтрСтатусовОплат);
			Запрос.УстановитьПараметр("СуммаСценария",0);
			Запрос.УстановитьПараметр("СуммаУпр",0);
			
			Результат = Запрос.Выполнить().Выгрузить();
				
			//АБС НАЧАЛО Задача №08759
			ТЗДолиПоПроектам = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(РаспределениеПоПроектам.Выгрузить(), "НеПустые");				
			ИтогКоэфПоПроектам = ТЗДолиПоПроектам.Итог("ДоляРаспределения");  				
			РезультатФ = Результат.Скопировать();
			РезультатФ.Очистить();
			//\\АБС КОНЕЦ Задача №08759
			
			Для Каждого ТекОплата Из Результат Цикл
				
				Если Не ТекОплата.ПлатежноеПоручениеДата = Null Тогда
					ДатаКурса = ТекОплата.ПлатежноеПоручениеДата;				  
				ИначеЕсли Не ТекОплата.ЗРСДата = Null Тогда
					ДатаКурса = ТекОплата.ЗРСДата;			  		  
				Иначе
					ДатаКурса = СсылкаНаДокумент.Дата;
				КонецЕсли;		  		 
				
				ТекОплата.СуммаСценария  = МодульВалютногоУчета.ПересчитатьВСуммуРегл(ТекОплата.ВалютнаяСумма,мВалютаРегламентированногоУчета
				,ТекОплата.Валюта,ДатаКурса); 				
				ТекОплата.СуммаУпр  = МодульВалютногоУчета.ПересчитатьВСуммуРегл(ТекОплата.ВалютнаяСумма,ВалютаУправленческогоУчета
				,ТекОплата.Валюта,ДатаКурса);		 
			КонецЦикла;		 
			
			ДвижениеДокумента.Записывать = Истина;
			Если Не ТЗДолиПоПроектам.Количество() = 0 Тогда 				
				//АБС НАЧАЛО Задача №08759
				Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл 
					Для Каждого ТекОплата Из Результат Цикл  						
						н = РезультатФ.Добавить();
						ЗаполнитьЗначенияСвойств(н, ТекОплата);  						
						н.Проект = СтрокаПроекта.Проект;
						н.СуммаСценария = Окр(ТекОплата.СуммаСценария*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
						н.ВалютнаяСумма = Окр(ТекОплата.ВалютнаяСумма*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);;
						н.СуммаУпр = Окр(ТекОплата.СуммаУпр*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);						
                    КонецЦикла; 				
				КонецЦикла; 	
				Для Каждого Строка Из РезультатФ Цикл
					ДвижениеСтрока = Движения.ОборотыБюджетов.Добавить();
					ЗаполнитьЗначенияСвойств(ДвижениеСтрока,Строка);	
				КонецЦикла;
	   			//\\АБС КОНЕЦ Задача №08759
			Иначе
				Для Каждого Строка Из Результат Цикл
					ДвижениеСтрока = Движения.ОборотыБюджетов.Добавить();
					ЗаполнитьЗначенияСвойств(ДвижениеСтрока,Строка);	
				КонецЦикла;				
			КонецЕсли;
		
		КонецЕсли;
	//Иначе
	//	Движения.ОборотыБюджетов.Очистить();
	//	Движения.ОборотыБюджетов.Записать(Истина);
	КонецЕсли;	
	
КонецПроцедуры //АБС

Процедура ВыполнитьДвижениеПоРегиструБюджетирования_ОперФакт(ДвижениеДокумента, СсылкаНаДокумент) Экспорт		
	
	//Движение делают только те документы которые Отправлены в банк или в статусе "оплачен" и у которых заполнен реквизит бюджетная статья
	ЗначениеКонстантыСценарийДДС = глЗначениеПеременной("абс_СценарийДДС_ОперФакт");
		
	Если ЗначениеКонстантыСценарийДДС <> Справочники.СценарииПланирования.ПустаяСсылка() 
		И ЗначениеЗаполнено(СсылкаНаДокумент.БюджетнаяСтатья) Тогда
		
		ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		//НФС 2018
		//Крамаренко Д.М.
		//добавлен объект бюджетирования и город
		"ВЫБРАТЬ
		|	&Сценарий,
		|	абс_СчетНаОплатуОплаты.Проект КАК Проект,
		|	абс_СчетНаОплатуОплаты.ЦФО,
		|	абс_СчетНаОплатуОплаты.Ссылка.БюджетнаяСтатья КАК СтатьяОборотов,
		|	абс_СчетНаОплатуОплаты.Контрагент,
		|	абс_СчетНаОплатуОплаты.Валюта КАК Валюта,
		|	абс_СчетНаОплатуОплаты.ТипКонтрагента КАК абс_ТипКонтрагента,
		|	абс_СчетНаОплатуОплаты.ТипСети КАК абс_ТипСети,
		|	абс_СчетНаОплатуОплаты.КВ КАК абс_КВ,
		|	абс_СчетНаОплатуОплаты.ТЭО КАК абс_ТЭО,
		|	абс_СчетНаОплатуОплаты.ЦФУ КАК абс_ЦФУ,
		|	абс_СчетНаОплатуОплаты.ТипРасхода КАК абс_ТипРасхода,
		|	абс_СчетНаОплатуОплаты.Ссылка.Организация,
		|	абс_СчетНаОплатуОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	абс_СчетНаОплатуОплаты.ttk_ОбъектБюджетирования КАК ttk_ОбъектБюджетирования,
		|	абс_СчетНаОплатуОплаты.ttk_Город КАК ttk_Город,
		|	абс_СчетНаОплатуОплаты.ВалютнаяСумма,
		|	абс_СчетНаОплатуОплаты.СуммаПлатежа КАК СуммаСценария,
		|	абс_СчетНаОплатуОплаты.СуммаПлатежа КАК СуммаУпр,
		|	абс_СчетНаОплатуОплаты.Ссылка.ПериодПлатежа КАК Период,
		|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение.Дата КАК ПлатежноеПоручениеДата,
		|	абс_СчетНаОплатуОплаты.ЗРС.Дата КАК ЗРСДата
		|ИЗ
		|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
		|ГДЕ
		|	абс_СчетНаОплатуОплаты.Ссылка = &Ссылка";

		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Сценарий",ЗначениеКонстантыСценарийДДС);
		Запрос.УстановитьПараметр("СуммаСценария",0);
		Запрос.УстановитьПараметр("СуммаУпр",0);
		
		Результат = Запрос.Выполнить().Выгрузить();
		ТЗДолиПоПроектам = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(РаспределениеПоПроектам.Выгрузить(), "НеПустые");
		ИтогКоэфПоПроектам = ТЗДолиПоПроектам.Итог("ДоляРаспределения");
		РезультатФ = Результат.Скопировать();
		РезультатФ.Очистить();
		Для Каждого ТекОплата Из Результат Цикл
			
			Если Не ТекОплата.ПлатежноеПоручениеДата = Null Тогда
				ДатаКурса = ТекОплата.ПлатежноеПоручениеДата;				  
			ИначеЕсли Не ТекОплата.ЗРСДата = Null Тогда
				ДатаКурса = ТекОплата.ЗРСДата;			  		  
			Иначе
				ДатаКурса = СсылкаНаДокумент.Дата;
			КонецЕсли;		  		 
			
			ТекОплата.СуммаСценария  = МодульВалютногоУчета.ПересчитатьВСуммуРегл(ТекОплата.ВалютнаяСумма,мВалютаРегламентированногоУчета
			,ТекОплата.Валюта,ДатаКурса);
			
			ТекОплата.СуммаУпр  = МодульВалютногоУчета.ПересчитатьВСуммуРегл(ТекОплата.ВалютнаяСумма,ВалютаУправленческогоУчета
			,ТекОплата.Валюта,ДатаКурса);		 
		КонецЦикла;		 
		
		ДвижениеДокумента.Записывать = Истина;
		Если Не ТЗДолиПоПроектам.Количество() = 0 Тогда
			Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл 
				Для Каждого ТекОплата Из Результат Цикл 						
					н = РезультатФ.Добавить(); 
					ЗаполнитьЗначенияСвойств(н, ТекОплата);						
					н.Проект = СтрокаПроекта.Проект;
					н.СуммаСценария = Окр(ТекОплата.СуммаСценария*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
					н.ВалютнаяСумма = Окр(ТекОплата.ВалютнаяСумма*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);;
					н.СуммаУпр = Окр(ТекОплата.СуммаУпр*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);						
				КонецЦикла; 				
			КонецЦикла;				
			ДвижениеДокумента.Загрузить(РезультатФ);
		Иначе
			ДвижениеДокумента.Загрузить(Результат);
		КонецЕсли;
		ДвижениеДокумента.Записать();
	КонецЕсли;	
	
КонецПроцедуры //АБС

// Процедура проверяет табличную часть оплат и 
//  корректирует/создает документы оплат согласно табличной части оплат
Процедура УдалитьОбновитьСоздатьОплаты()
	
	//+++ НФС 2018 Григорьев Д.В.
	//ОплатыДляУдаления = Новый Массив();	
	//// Найти ссылки на оплаты, которые есть в ссылке счета на оплату, но нету в объекте
	//Для Каждого СтрокаОплатыСсылка Из Ссылка.Оплаты Цикл  		
	//	ОплатаСсылка = СтрокаОплатыСсылка.Оплата;  		
	//	СтрокиОбъектаОплаты = Оплаты.НайтиСтроки(Новый Структура("Оплата", ОплатаСсылка)); 
	//	Если СтрокиОбъектаОплаты.Количество() = 0 Тогда   			
	//		ОплатыДляУдаления.Добавить(ОплатаСсылка);			
	//	КонецЕсли;
	//КонецЦикла;	
	//// Удалим полученный список оплат
	//Для Каждого ОплатаДляУдаления Из ОплатыДляУдаления Цикл
	//	ОплатаОбъект = ОплатаДляУдаления.ПолучитьОбъект(); 		
	//	ОплатаОбъект.УстановитьПометкуУдаления(Истина); 		
	//КонецЦикла;
	//--- НФС 2018 Григорьев Д.В.
	
	//+++ НФС 2018 Григорьев Д.В.
	Если ДополнительныеСвойства.Свойство("СписокУдаляемыхОплат") Тогда
		Для Каждого Стр Из ДополнительныеСвойства.СписокУдаляемыхОплат Цикл
			ОплатаОбъект = Стр.Значение.ПолучитьОбъект();
			ОплатаОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЕсли;
	//--- НФС 2018 Григорьев Д.В.
	
	// Создадим / обновим оплаты согласоно табличной части документа.
	//+++ СППР 00-00000036 (Григорьев Д.В.)
	ИменаКолонокГруппировки = "";
	ИменаКолонокСуммирования = "";
	Колонки = Оплаты.ВыгрузитьКолонки();
	Для Каждого Колонка Из Колонки.Колонки Цикл
		Если Колонка.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Имя = "ВалютнаяСумма" Или Колонка.Имя = "СуммаПлатежа" Или Колонка.Имя = "СуммаРезерва" Или Колонка.Имя = "СуммаРезерваВалютная" Тогда 
			ИменаКолонокСуммирования = ИменаКолонокСуммирования + Колонка.Имя + ", ";
			Продолжить;
		КонецЕсли;
		ИменаКолонокГруппировки = ИменаКолонокГруппировки + Колонка.Имя + ", ";
	КонецЦикла;
	ИменаКолонокГруппировки = Сред(ИменаКолонокГруппировки, 1, СтрДлина(ИменаКолонокГруппировки) - 2);
	ИменаКолонокСуммирования = Сред(ИменаКолонокСуммирования, 1, СтрДлина(ИменаКолонокСуммирования) - 2);	
	Оплаты.Свернуть(ИменаКолонокГруппировки, ИменаКолонокСуммирования);
	//--- СППР 00-00000036 (Григорьев Д.В.)
	Для Каждого СтрокаОплаты Из Оплаты Цикл		
		ОплатаОбъект = Неопределено;		
		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.Оплата) ИЛИ (СтрокаОплаты.Оплата.ПолучитьОбъект() = Неопределено) Тогда // КТТК Ермолов Е.Л.  18.12.2014 000027836 
			ОплатаОбъект = Документы.абс_Оплата.СоздатьДокумент();                         
			ОплатаОбъект.Дата = Дата; 
		Иначе 
			ОплатаОбъект = СтрокаОплаты.Оплата.ПолучитьОбъект();
		КонецЕсли;		
		ЗаполнитьЗначенияСвойств(ОплатаОбъект, СтрокаОплаты);
		//НФС 2018 Григорьев Д.В.
		ОплатаОбъект.ЗакупочныйЗаказ 	= ЗакупочныйЗаказ;
		ОплатаОбъект.Организация 		= Организация;
		ОплатаОбъект.Контрагент = Контрагент;
		ОплатаОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		ОплатаОбъект.ТипКонтрагента = ТипКонтрагента;
		ОплатаОбъект.БюджетнаяСтатья = СтрокаОплаты.БюджетнаяСтатья;
		ОплатаОбъект.БюджетнаяКатегория = СтрокаОплаты.БюджетнаяКатегория;
		ОплатаОбъект.СчетКонтрагента = СчетКонтрагента;
		ОплатаОбъект.ЦФО = ЦФО;
		ОплатаОбъект.ЦФУ = СтрокаОплаты.ЦФУ;
		ОплатаОбъект.ttk_ОбъектБюджетирования = СтрокаОплаты.ttk_ОбъектБюджетирования;
		ОплатаОбъект.ttk_Город = СтрокаОплаты.ttk_Город;
		//НФС 2018 Григорьев Д.В.
		
		//+++ Крамаренко Д.М.
		//Если Не ЗначениеЗаполнено(ОплатаОбъект.ЦФО) Тогда
		//	Если ЗначениеЗаполнено(ЦФО) Тогда
		//		 ОплатаОбъект.ЦФО = ЦФО;
		//	 ИначеЕсли Оплаты.Количество() <> 0 Тогда
		//		 ОплатаОбъект.ЦФО = Оплаты[0].ЦФО;
		//	 КонецЕсли;
		// КонецЕсли;
		// Если Не ЗначениеЗаполнено(ОплатаОбъект.ЦФУ) Тогда
		//	 Если ЗначениеЗаполнено(СтрокаОплаты.ЦФУ) Тогда
		//		 ОплатаОбъект.ЦФУ = ЦФУ;
		//	 ИначеЕсли Оплаты.Количество() <> 0 Тогда
		//		 ОплатаОбъект.ЦФУ = Оплаты[0].ЦФУ;
		//	 КонецЕсли;
		// КонецЕсли;
		// Если Не ЗначениеЗаполнено(ОплатаОбъект.ttk_ОбъектБюджетирования) Тогда
		//	 Если Оплаты.Количество() <> 0 Тогда
		//		 Если ЗначениеЗаполнено(Оплаты[0].ttk_ОбъектБюджетирования) Тогда
		//			 ОплатаОбъект.ttk_ОбъектБюджетирования = Оплаты[0].ttk_ОбъектБюджетирования;
		//		 КонецЕсли;
		//	 КонецЕсли;
		// КонецЕсли;
		// Если Не ЗначениеЗаполнено(ОплатаОбъект.БюджетнаяСтатья) Тогда
		//	 Если ЗначениеЗаполнено(БюджетнаяСтатья) Тогда
		//		 ОплатаОбъект.БюджетнаяСтатья = БюджетнаяСтатья;
		//	 ИначеЕсли Оплаты.Количество() <> 0 Тогда
		//		 ОплатаОбъект.БюджетнаяСтатья = Оплаты[0].БюджетнаяСтатья;
		//	КонецЕсли;
		//КонецЕсли;
		//--- Крамаренко Д.М.
		
		//Взаимозачет
		//Если СтрокаОплаты.Взаиморасчет Тогда
		//	Если Не ОбменДанными.Загрузка = Истина Тогда
		//		Если СтрокаОплаты.СтатусОплаты =  Перечисления.абсСтатусыСчетов.Согласован Тогда
		//			СтрокаОплаты.СтатусОплаты = Перечисления.абсСтатусыСчетов.Оплачен;
		//			ОплатаОбъект.СтатусОплаты = СтрокаОплаты.СтатусОплаты;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;	
		//Взаимозачет
		
		ОплатаОбъект.Записать();
		
		СтрокаОплаты.Оплата = ОплатаОбъект.Ссылка;
		// Сформировать текст по номерам платежек
		МассивНомеров = Новый Массив;
		МассивПлатежей = Оплаты.ВыгрузитьКолонку("ПлатежноеПоручение");
		Для Каждого Документ Из МассивПлатежей Цикл
			Если ЗначениеЗаполнено(Документ) Тогда
				//Заполнение даты оплаты
				ДатаОплаты = Документ.Дата;
				//Заполнение даты оплаты
				МассивНомеров.Добавить(ОбщегоНазначения.ПолучитьНомерНаПечать(Документ));
			КонецЕсли; 
		КонецЦикла;
		мНомерПП = "";
		Если МассивНомеров.Количество()>0 Тогда
			Счетчик = 0;
			КоличествоНомеров = МассивНомеров.Количество();
			Для Каждого Ном Из МассивНомеров Цикл
				Если Счетчик = 0 Тогда
					мНомерПП = Ном;
				Иначе
					мНомерПП = мНомерПП+"/"+Ном;
				КонецЕсли;
				Счетчик = Счетчик+1;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(мНомерПП) Тогда
			Если мНомерПП<>НомерПП Тогда
				НомерПП = мНомерПП; 
			КонецЕсли;			
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет из заполняет строку оплаты ТЗ Оплаты
Процедура ЗаполнитьОплату(ДанныеЗаполнения = Неопределено) Экспорт
	
	//НФС 2018
	//Крамаренко Д.М.
	Если ДанныеЗаполнения <> Неопределено Тогда		
		Оплаты.Очистить();		
		Для Каждого Стр Из ДанныеЗаполнения Цикл
			СтрокаОплаты = Оплаты.Добавить();		
			ЗаполнитьЗначенияСвойств(СтрокаОплаты, ЭтотОбъект);//, Стр); //ЭтотОбъект);
			СтрокаОплаты.СтатусОплаты = СтатусСчета;
			СтрокаОплаты.ttk_Город = Стр.ttk_Город;
			//СтрокаОплаты.ТипРасхода = Стр.абс_ТипРасхода;
			СтрокаОплаты.ЦФУ = Стр.абс_ЦФУ;		
			СтрокаОплаты.ТЭО = Стр.абс_ТЭО;
			СтрокаОплаты.КВ = Стр.абс_КВ;
			СтрокаОплаты.ТипСети = Стр.абс_ТипСети;
			СтрокаОплаты.БюджетнаяСтатья = Стр.СтатьяОборотов;		
			СтрокаОплаты.СуммаПлатежа = Стр.СуммаСНДС;
			СтрокаОплаты.Контрагент = ЭтотОбъект.Контрагент;
			СтрокаОплаты.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
			СтрокаОплаты.Валюта = ЭтотОбъект.Валюта;
			СтрокаОплаты.ВалютнаяСумма = Стр.ВалютнаяСуммаСНДС;
			СтрокаОплаты.Курс = ЭтотОбъект.Курс;
			СтрокаОплаты.Кратность = ЭтотОбъект.Кратность;
			СтрокаОплаты.СуммаРезерва = ЭтотОбъект.СуммаРезерва;
			СтрокаОплаты.СуммаРезерваВалютная = ЭтотОбъект.СуммаРезерваВалютная;
			СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДС(Стр.СтатьяОборотов, НазначениеПлатежа);
			//НФС 2018
			//Крамаренко Д.М.
			Если ЗначениеЗаполнено(Стр.ttk_ОбъектБюджетирования) Тогда
				СтрокаОплаты.ttk_ОбъектБюджетирования = Стр.ttk_ОбъектБюджетирования;
			Иначе
				СтрокаОплаты.ttk_ОбъектБюджетирования = ttk_ОбщегоНазначения.ОпределитьОбъектБюджетирования(Организация, Стр.абс_ЦФУ);
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Расчитаем валютную сумму по сумме оплаты
//  сумма оплаты - в Рублях
Процедура РасчитатьСуммыОплаты(СтрокаОплаты, СуммаОплаты)
	
	СтруктураКурсаВалютыДоговора 	= МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаОплаты.Валюта		, Дата);
	
	СтрокаОплаты.Курс 				= СтруктураКурсаВалютыДоговора.Курс;
	СтрокаОплаты.Кратность 			= СтруктураКурсаВалютыДоговора.Кратность;
	
	СтрокаОплаты.ВалютнаяСумма 		= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаОплаты, 
	глЗначениеПеременной("ВалютаРегламентированногоУчета"), СтрокаОплаты.Валюта, 
	1, СтруктураКурсаВалютыДоговора.Курс,
	1, СтруктураКурсаВалютыДоговора.Кратность);
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовСчетаНаОплату.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.СчетНаОплату.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запись.СчетНаОплату				= Ссылка;
	Запись.Пользователь 			= ТекПользователь;	
	Запись.СтатусСчетаНаОплату		= НовыйСтатус;
	
	Запись.Комментарий 				= Комментарий;
	
	ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	
	Если НЕ ОтветственныйСотрудник = Неопределено Тогда
		Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоСчетуНаОплату(Ссылка, "абсСогласованиеСчетаНаОплату");
	
КонецФункции

Функция НайтиБПУточнение() Экспорт
	
	//Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоСчетуНаОплату(Ссылка, "абсУточнениеСчетаНаОплату");
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоСчетуНаОплату(Ссылка, "абсСогласованиеСчетаНаОплату");
	
КонецФункции	

Функция ПолучитьЗадачуПоСчетуСогласование() Экспорт
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекСтатусСчета = Ссылка.СтатусСчета;
	
	СпТочек = Новый Массив;
	
	Если ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУточнение);
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ Тогда
		
		//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеПодготовкаСчетаНаОплату);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		//++ Задача № 8630 Логинчев А.С. 21.05.2012 12:48:06
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль);
		//-- Задача № 8630 Логинчев А.С.
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК Тогда		
		
		//		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеПодготовкаСчетаНаОплату);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		//++ Задача № 8630 Логинчев А.С. 21.05.2012 12:48:06
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль);
		//-- Задача № 8630 Логинчев А.С.

		//Вставка 110114  Родин
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.Действие1);
		//Вставка 110114  Родин
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеДРУ);
		
		//Филиализация	
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.СогласованиеДЭФ);
		//Филиализация	
		
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПрезидентом);
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПВП);
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеЗЗ Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласован);
		
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеЗЗ);
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.УсловиеУточнение);
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НаСогласование);
		
		Если Технический Тогда
			//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеПодготовкаСчетаНаОплату);
		КонецЕсли;	
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеДРУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласован);
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НаСогласование);
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Отказ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеДРУ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеЗЗ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеПрезидентом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеЗЗ);
		//++ Задача № 8630 Логинчев А.С. 21.05.2012 12:53:07
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.НалоговыйКонтроль);
		//-- Задача № 8630 Логинчев А.С.
		Если Технический Тогда
			//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеПодготовкаСчетаНаОплату);
		КонецЕсли;	
		
		//Филиализация
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.СогласованиеДЭФ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеКТТК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеОФК);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеПрезидентом);
		//Филиализация
		
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.ВОплату 
		ИЛИ ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить 
		ИЛИ ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Оплачен Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласован);
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Отменен Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУточнение);
		//++ Задача № 8630 Логинчев А.С. 21.05.2012 12:26:22
		//ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль Тогда
		//	СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеДРУ);
		//	СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеОФК);
		//-- Задача № 8630 Логинчев А.С.	
		
		//Филиализация	
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.ДопСогласованиеКТТК Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);	
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.ДопСогласованиеОФК Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеКТТК);
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.ДопУтверждениеВицеПрезидентом Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеРуководителемДФМ);	
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.ДопУтверждениеПрезидентом Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопДействиеУтверждениеПВП);	
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.ДопУтверждениеРуководителемДФМ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДопСогласованиеОФК);	
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДЭФ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеСогласованиеОФК);	
	КонецЕсли;
	//Филиализация	
	
	Возврат абс_БизнесПроцессы.НайтиЗадачуСчетаНаОплату(БП, СпТочек);
	
КонецФункции

Функция ПолучитьЗадачуПоСчетуУточнение() Экспорт
	
	БП = НайтиБПУточнение();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекСтатусСчета = Ссылка.СтатусСчета;
	
	СпТочек = Новый Массив;
	
	Если ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Уточнено Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсУточнениеСчетаНаОплату.ТочкиМаршрута.ДействиеУточнение);
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсУточнениеСчетаНаОплату.ТочкиМаршрута.ДействиеУточнено);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеСчетаНаОплату.ТочкиМаршрута.ДействиеУточнение);
		
	ИначеЕсли ТекСтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсУточнениеСчетаНаОплату.ТочкиМаршрута.ДействиеУточнение);
		
	КонецЕсли;
	
	Возврат абс_БизнесПроцессы.НайтиЗадачуСчетаНаОплату(БП, СпТочек);
	
КонецФункции

Процедура ЗаполнитьСписокДоступныхСтатусов(Список = Неопределено) Экспорт
	
	Если Список = Неопределено Тогда
		Список = Новый СписокЗначений;
	Иначе
		Список.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Список.Добавить(СтатусСчета);
		Возврат;
	КонецЕсли;
	
	ТекСтатус = Ссылка.СтатусСчета;
	
	Список.Добавить(ТекСтатус);
	
	//Изменено 261213 Проектный учет Родин
	ИспользоватьПроектныйУчет =  глЗначениеПеременной("абс_СогласованиеРП");

	СписокРуководителей = Новый Массив;
	Для каждого Стр Из РаспределениеПоПроектам Цикл
		Если ЗначениеЗаполнено(Стр.Проект.абс_РуководительПроекта) Тогда
			ПользовательРуководитель = Справочники.Пользователи.НайтиПоРеквизиту("абс_Сотрудник",Стр.Проект.абс_РуководительПроекта);
			Если ПользовательРуководитель <> Справочники.Пользователи.ПустаяСсылка() и СписокРуководителей.Найти(ПользовательРуководитель) = Неопределено Тогда
				СписокРуководителей.Добавить(ПользовательРуководитель);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Изменено 261213 Проектный учет Родин
	
	// Технический счет согласуется ДирККР
	Если Технический И (Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка или  Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеРП) Тогда
		//Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено Тогда
		//Если Ссылка.СтатусСчета <> Перечисления.абсСтатусыСчетов.СогласованиеРП и ИспользоватьПроектныйУчет и ЗакупочныйЗаказ.НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено Тогда
		Если Ссылка.СтатусСчета <> Перечисления.абсСтатусыСчетов.СогласованиеРП и ИспользоватьПроектныйУчет и СписокРуководителей.Найти(мТекущийПользователь) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеРП);
		//ИначеЕсли (ИспользоватьПроектныйУчет и Не ЗакупочныйЗаказ.НефиксированнаяСумма) ИЛИ  (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ НЕ ИспользоватьПроектныйУчет Тогда  
		ИначеЕсли (ИспользоватьПроектныйУчет) ИЛИ  (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ НЕ ИспользоватьПроектныйУчет Тогда  
			Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
		КонецЕсли;	
		//КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗапросДоступныхСтатусов = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	абс_ТаблицаСтатусовБПТТК.СтатусНовый КАК СтатусНовый,
		|	абс_ТаблицаСтатусовБПТТК.УсловиеПерехода,
		|	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса,
		|	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаНовыйСтатус
		|ИЗ
		|	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
		|ГДЕ
		|	абс_ТаблицаСтатусовБПТТК.Статус = &Статус
		|	И абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса В(&СписокРолей)
		|	И абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусНовый");
		
	ЗапросДоступныхСтатусов.УстановитьПараметр("Статус"		, ТекСтатус);
	ЗапросДоступныхСтатусов.УстановитьПараметр("СписокРолей", мРолиПользователя);
		
	ТаблицаДоступныхСтатусов = ЗапросДоступныхСтатусов.Выполнить().Выгрузить();
		
	Для Каждого СтрокаДоступногоСтатуса Из ТаблицаДоступныхСтатусов Цикл
		Если Список.НайтиПоЗначению(СтрокаДоступногоСтатуса.СтатусНовый) = Неопределено Тогда
			Список.Добавить(СтрокаДоступногоСтатуса.СтатусНовый);
		КонецЕсли;
	КонецЦикла;
	//Изменено 261213 Проектный учет Родин

	//Проектный учет
	ТзСогласования = РегистрыСведений.абс_ПределыСуммУтверждения.ПолучитьСтруктуруСогласованияФилиализация(СуммаПлатежа);
	ПревышенПорогСогласованияПоФилиалу     = РегистрыСведений.абс_ЛимитыПоФилиалам.ПревышенПорогСогласованияПоФилиалу(СуммаПлатежа,Организация);	
	ПревышенПорогСогласованияПоКонтрагенту = РегистрыСведений.абс_ЛимитыПоКонтрагентам.ПревышенПорогСогласованияПоКонтрагенту(СуммаПлатежа,Контрагент);	
	//Проектный учет
	
	// Откорректируем список доступных состояний в зависимости от услуги связи
	Если ТекСтатус = Перечисления.абсСтатусыСчетов.Подготовка или ТекСтатус = Перечисления.абсСтатусыСчетов.СогласованиеРП  Тогда
		//Бобылев А.А. 25.10.2018 Первичка
		УслугаСвязи = Ложь;
		Для каждого Элемент ИЗ Оплаты Цикл
			Если Элемент.БюджетнаяСтатья.абс_УслугаСвязи Тогда
				УслугаСвязи =  Истина;
			КонецЕсли;
		КонецЦикла;			
		//Бобылев А.А. СППР 00-00000009 06.04.2018
		//Если ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи И ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
			//Если ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи Тогда			
		Если УслугаСвязи и ЗакупочныйЗаказ.НефиксированнаяСумма	И ЦФО <> Справочники.Подразделения.НайтиПоКоду("ЦФО1353") Тогда
		//Бобылев А.А. ------------------
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
		Иначе
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
		КонецЕсли;
		
		Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
			Список.Удалить(ЭлементНедоступноеСостояние);
		КонецЕсли;
		
		//Бобылев А.А.-------------------
		
		//Изменено 261213 Проектный учет Родин
		//Если ТекСтатус <> Перечисления.абсСтатусыСчетов.СогласованиеРП и ИспользоватьПроектныйУчет и ЗакупочныйЗаказ.НефиксированнаяСумма и  СписокРуководителей.Найти(мТекущийПользователь) = Неопределено Тогда
		Если ТекСтатус <> Перечисления.абсСтатусыСчетов.СогласованиеРП и ИспользоватьПроектныйУчет и СписокРуководителей.Найти(мТекущийПользователь) = Неопределено Тогда
			Список.Очистить();
			Список.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
			Список.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеРП);
			//ИначеЕсли (ИспользоватьПроектныйУчет и Не ЗакупочныйЗаказ.НефиксированнаяСумма) ИЛИ  (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ НЕ ИспользоватьПроектныйУчет Тогда  
		ИначеЕсли (ИспользоватьПроектныйУчет) ИЛИ  (СписокРуководителей.Найти(мТекущийПользователь) <> Неопределено и ИспользоватьПроектныйУчет) ИЛИ НЕ ИспользоватьПроектныйУчет Тогда  
			ЭлементНедоступноеСостояние = Неопределено;
			
			Если абс_БизнесПроцессы.МожноСогласовыватьСчетНаОплату(Ссылка) Тогда
				//++ Задача №  8630 Логинчев А.С. 21.05.2012 9:48:41
				Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
					ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
					Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
						Список.Удалить(ЭлементНедоступноеСостояние);
					КонецЕсли;
					ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
					Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
						Список.Удалить(ЭлементНедоступноеСостояние);
					КонецЕсли;					
					//-- Задача № 8630 Логинчев А.С.
					// Если необходимо согласование
				ИначеЕсли мРолиПользователя.Найти(Справочники.РолиИсполнителей.ВыборСогласованияДРУОФК) = Неопределено Тогда
					Если ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи И ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
					//Если ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи Тогда
						ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
					Иначе
						ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
					КонецЕсли;
					Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
						Список.Удалить(ЭлементНедоступноеСостояние);
					КонецЕсли;
				КонецЕсли;
				
				//Бобылеа А.А. 20.09.2018 CHG146
				Массив = новый массив;
				массив.Добавить(Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСП18"));
				массив.Добавить(Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСП020202"));
				массив.Добавить(Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСП0307"));
				массив.Добавить(Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСП0308"));
				массив.Добавить(Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСП020101"));
				массив.Добавить(Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("ПРСП0304"));
				//Бобылев А.А.------------------
				Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено И Контрагент.НеЯвляетсяРезидентом
					// Фролов 20120603 Налоговый контроль включаем по константе
					И глЗначениеПеременной("абс_СтатусНалоговыйКонтрольВключен") = Истина 
					//Бобылеа А.А. 20.09.2018 CHG146
					//И НЕ БюджетнаяСтатья.абс_НалоговыйКонтроль Тогда
					И Массив.Найти(БюджетнаяСтатья) = Неопределено Тогда
					//Бобылев А.А. 20.09.2018-------------------
					
					ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);					
					Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
						Список.Удалить(ЭлементНедоступноеСостояние);
					КонецЕсли;
					ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
					Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
						Список.Удалить(ЭлементНедоступноеСостояние);
					КонецЕсли;					
					//АБС ВСТАВКА №13890 НАЧАЛО
					Если БюджетнаяСтатья.абс_НалоговыйКонтроль Тогда						
						ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.НалоговыйКонтроль);					
						Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
							Список.Удалить(ЭлементНедоступноеСостояние);
						КонецЕсли;      									
					КонецЕсли;	
					//\\АБС ВСТАВКА №13890 КОНЕЦ  									
				Иначе					
					//++ Задача №  8630 Логинчев А.С. 21.05.2012 9:51:19
					ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.НалоговыйКонтроль);					
					Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
						Список.Удалить(ЭлементНедоступноеСостояние);
					КонецЕсли;
					//-- Задача № 8630 Логинчев А.С.									
				КонецЕсли;				
			Иначе				
				ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);				
				Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
					Список.Удалить(ЭлементНедоступноеСостояние);
				КонецЕсли;
				ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);				
				Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
					Список.Удалить(ЭлементНедоступноеСостояние);
				КонецЕсли;
				//++ Задача №  8630 Логинчев А.С. 21.05.2012 9:51:19
				ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.НалоговыйКонтроль);				
				Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
					Список.Удалить(ЭлементНедоступноеСостояние);
				КонецЕсли;
				//-- Задача № 8630 Логинчев А.С.
			КонецЕсли;
		КонецЕсли;   	//Изменено 261213 Проектный учет Родин
		
		//Филиализация
		// << Казаков Е.Л.  25.05.2017
		Если ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеЛимитаОФК И Организация.абс_СтатусОрганизации  = Перечисления.абс_СтатусОрганизации.Филиал Тогда
//		Если ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеЛимитаОФК Тогда
		// Казаков Е.Л.  25.05.2017  >>
			Список.Очистить();	
			Список.Добавить(ТекСтатус);
			Если Не ПревышенПорогСогласованияПоКонтрагенту И Не ПревышенПорогСогласованияПоФилиалу И ТзСогласования.Количество() = 0 Тогда	
				//Бобылев А.А. 28.08.2018
				Если НЕ ПроверкаПИП() Тогда
					Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
				Иначе
					Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
				КонецЕсли;
				//Бобылев А.А.----------------------
				Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ)
			Иначе
				Список.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеОФК);	
				Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ)
			КонецЕсли;			
		КонецЕсли;		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.СогласованиеОФК Тогда			
		Если ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеЛимитаОФК И Организация.абс_СтатусОрганизации  = Перечисления.абс_СтатусОрганизации.Филиал  Тогда
			Список.Очистить();
			Список.Добавить(ТекСтатус);
			Если Не мРолиПользователяФилиал.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусыСчетов.СогласованиеДЭФ);
				Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.СогласованиеДЭФ Тогда	
		Список.Очистить();
		Список.Добавить(ТекСтатус);
		Если Не мРолиПользователяФилиал.Найти(Справочники.РолиИсполнителей.СогласованиеБюджетаДЭИ) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ);	
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);	
			//Бобылев А.А. 28.08.2018
			Если НЕ ПроверкаПИП() Тогда
				Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
			Иначе
				Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
			КонецЕсли;
			//Бобылев А.А.----------------------
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.ДопСогласованиеОФК Тогда	
		Список.Очистить();
		Список.Добавить(ТекСтатус);
		Если Не мРолиПользователяКТТК.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено Тогда
			Если ТзСогласования.Найти(Справочники.РолиИсполнителей.РуководительДФМ) <> Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусыСчетов.ДопУтверждениеРуководителемДФМ);	
			Иначе
				//Бобылев А.А. 28.08.2018
				Если НЕ ПроверкаПИП() Тогда
					Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
				Иначе
					Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
				КонецЕсли;
				//Бобылев А.А.----------------------

			КонецЕсли;
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);	
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.ДопСогласованиеКТТК Тогда	
		Список.Очистить();
		Список.Добавить(ТекСтатус);
		Если Не мРолиПользователяКТТК.Найти(Справочники.РолиИсполнителей.СогласованиеКТТК) = Неопределено Тогда
			Если ТзСогласования.Найти(Справочники.РолиИсполнителей.РуководительОФК) <> Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусыСчетов.ДопСогласованиеОФК);	
			Иначе
				//Бобылев А.А. 28.08.2018
				Если НЕ ПроверкаПИП() Тогда
					Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
				Иначе
					Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
				КонецЕсли;
				//Бобылев А.А.----------------------
			КонецЕсли;
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.ДопУтверждениеВицеПрезидентом Тогда	
		Список.Очистить();
		Список.Добавить(ТекСтатус);
		Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПервыйВицеПрезидент) = Неопределено Тогда
			Если ТзСогласования.Найти(Справочники.РолиИсполнителей.Президент) <> Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусыСчетов.ДопУтверждениеПрезидентом);	
			Иначе
				//Бобылев А.А. 28.08.2018
				Если НЕ ПроверкаПИП() Тогда
					Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
				Иначе
					Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
				КонецЕсли;
				//Бобылев А.А.----------------------
				
			КонецЕсли;
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);	
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.ДопУтверждениеРуководителемДФМ Тогда	
		Список.Очистить();
		Список.Добавить(ТекСтатус);
		Если Не мРолиПользователяКТТК.Найти(Справочники.РолиИсполнителей.РуководительДФМ) = Неопределено Тогда
			Если ТзСогласования.Найти(Справочники.РолиИсполнителей.ПервыйВицеПрезидент) <> Неопределено Тогда
				Список.Добавить(Перечисления.абсСтатусыСчетов.ДопУтверждениеВицеПрезидентом);	
			Иначе
				//Бобылев А.А. 28.08.2018
				Если НЕ ПроверкаПИП() Тогда
					Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
				Иначе
					Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
				КонецЕсли;
				//Бобылев А.А.----------------------

			КонецЕсли;
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.ДопУтверждениеПрезидентом Тогда	
		Список.Очистить();
		Список.Добавить(ТекСтатус);
		Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.Президент) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);	
				//Бобылев А.А. 28.08.2018
				Если НЕ ПроверкаПИП() Тогда
					Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
				Иначе
					Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
				КонецЕсли;
				//Бобылев А.А.----------------------
		КонецЕсли;
		//Филиализация
	
		//++ Задача № 8630 Логинчев А.С. 21.05.2012 11:52:29
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль Тогда
		Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.ВыборСогласованияДРУОФК) = Неопределено Тогда
			Если ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи И ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
			//Если ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи Тогда			
				ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
			Иначе
				ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
			КонецЕсли;
			
			Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
				Список.Удалить(ЭлементНедоступноеСостояние);
			КонецЕсли;
		КонецЕсли; 
		//-- Задача № 8630 Логинчев А.С.
		//Бобылев А.А. 23.07.2018 СППР 00-00000110
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.ОформлениеАВЗ Тогда
		Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОформлениеАВЗ) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);		
			Список.Добавить(Перечисления.абсСтатусыСчетов.СчетСогласованАВЗ);
		КонецЕсли;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыСчетов.СчетСогласованАВЗ И Технический Тогда		
			Список.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);		
			Список.Добавить(Перечисления.абсСтатусыСчетов.ВОплату);
		//Бобылев А.А. ---------------------------
	КонецЕсли;
	
	// Откорректируем на статусе Утверждение ДФМ.
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");

	Если ТекСтатус = Перечисления.абсСтатусыСчетов.СогласованиеДРУ Тогда
		ПодразделениеДРУ = Константы.абс_ПодразделениеДРУ.Получить();
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДРУ,,Организация));
		Если СогласованиеБезБП и ПользовательИсполнитель.Найти(мТекущийПользователь) = Неопределено Тогда
			Список.Очистить();	
			Список.Добавить(ТекСтатус);
		КонецЕсли;
	КонецЕсли;	
	
	Если ТекСтатус = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ Тогда
		
		ПодразделениеДФМ = Константы.абс_ПодразделениеДФМ.Получить();
		МожноВыбиратьСтатус  = Истина;
		
		ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДФМ,,Организация));
		
		Если СогласованиеБезБП и ПользовательИсполнитель.Найти(мТекущийПользователь) = Неопределено Тогда
			МожноВыбиратьСтатус  = Ложь;
		КонецЕсли;
		
		Если МожноВыбиратьСтатус Тогда
		// АБС Изменение Родин Отключение бизнес-процессов 110314
	
			ЭлементСогласован 		= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
			ЭлементУтверждениеПВП	= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
			ЭлементСогласованиеЗЗ	= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
			
			ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату,
			Справочники.РолиИсполнителей.ПервыйВицеПрезидент);		
			
			ЗЗСогласован = Технический ИЛИ ЗакупочныйЗаказ.ЗЗСогласован 
			ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
			ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение
			ИЛИ (ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК И ЗакупочныйЗаказ.КонсолидированныйЗЗПоОЗК);
			
			Если СуммаПлатежа <= ПределСуммыУтверждения Тогда
				Если ЗЗСогласован Тогда
					Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
						Список.Удалить(ЭлементСогласованиеЗЗ);
					КонецЕсли;					
					Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
						Список.Удалить(ЭлементУтверждениеПВП);
					КонецЕсли;					
				Иначе
					Если НЕ ЭлементСогласован = Неопределено Тогда
						Список.Удалить(ЭлементСогласован);
					КонецЕсли;					
					Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
						Список.Удалить(ЭлементУтверждениеПВП);
					КонецЕсли;					
				КонецЕсли;
			Иначе				
				Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
					Список.Удалить(ЭлементСогласованиеЗЗ);
				КонецЕсли;						
				Если НЕ ЭлементСогласован = Неопределено Тогда
					Список.Удалить(ЭлементСогласован);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;	
		
		//Филиализация
		// << Казаков Е.Л.  25.05.2017
		Если ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеЛимитаОФК И Организация.абс_СтатусОрганизации  = Перечисления.абс_СтатусОрганизации.Филиал Тогда
//		Если ПараметрыСеанса.абс_НастройкиСистемы.СогласованиеЛимитаОФК Тогда
		// Казаков Е.Л.  25.05.2017  >>
			Список.Очистить();
			Список.Добавить(ТекСтатус);
			Если Не мРолиПользователяФилиал.Найти(Справочники.РолиИсполнителей.РуководительДФМ) = Неопределено Тогда
				Если ПревышенПорогСогласованияПоКонтрагенту Тогда
					Список.Добавить(Перечисления.абсСтатусыСчетов.ДопСогласованиеКТТК);
				Иначе
					Если ТзСогласования.Найти(Справочники.РолиИсполнителей.РуководительОФК) <> Неопределено Тогда
						Список.Добавить(Перечисления.абсСтатусыСчетов.ДопСогласованиеОФК);
						Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
					Иначе
						Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
						Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Филиализация		
	КонецЕсли;

	// Откорректируем на статусе Утверждение ПВП
	Если ТекСтатус = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом Тогда
		ЭлементСогласован 				= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
		ЭлементУтверждениеПрезидентом	= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
		ЭлементСогласованиеЗЗ			= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
		
		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату,
		Справочники.РолиИсполнителей.Президент);
		
		ЗЗСогласован = Технический ИЛИ ЗакупочныйЗаказ.ЗЗСогласован 
		ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
		ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;						
		
		Если СуммаПлатежа <= ПределСуммыУтверждения Тогда
			Если ЗЗСогласован Тогда
				Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
					Список.Удалить(ЭлементСогласованиеЗЗ);
				КонецЕсли;						
				Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПрезидентом);
				КонецЕсли;				
			Иначе
				Если НЕ ЭлементСогласован = Неопределено Тогда
					Список.Удалить(ЭлементСогласован);
				КонецЕсли;                                 	
				
				Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПрезидентом);
				КонецЕсли;			
			КонецЕсли;			
		Иначе			
			Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеЗЗ);
			КонецЕсли;					
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;						
		КонецЕсли;		
	КонецЕсли;
	
	// Откорректируем на статусе Утверждение Президентом
	Если ТекСтатус = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда		
		ЭлементСогласован 				= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
		ЭлементСогласованиеЗЗ			= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);		
		ЗЗСогласован = Технический ИЛИ ЗакупочныйЗаказ.ЗЗСогласован 
		ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
		ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;							
		
		Если ЗЗСогласован Тогда
			Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеЗЗ);
			КонецЕсли;		
		Иначе
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;                                 	
		КонецЕсли;					
	КонецЕсли;
	
	// Откорректируем на статусе Уточнить
	Если ТекСтатус = Перечисления.абсСтатусыСчетов.Уточнить Тогда		
		// В рамках БП согласование нету перехода в статус Уточнено
		БПСогласование = НайтиБПСогласование();		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");		
		Если НЕ БПСогласование = Неопределено ИЛИ СогласованиеБезБП Тогда
			ЭлементУточнено = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Уточнено);
			
			Если НЕ ЭлементУточнено = Неопределено Тогда
				Список.Удалить(ЭлементУточнено);
			КонецЕсли;			
			
			ЭлементСогласован = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
			
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;
			
		Иначе
			
			ЭлементСогласованиеОФК = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
			
			Если НЕ ЭлементСогласованиеОФК = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеОФК);				
			КонецЕсли;
			
			ЭлементСогласованиеДРУ = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
			
			Если НЕ ЭлементСогласованиеДРУ = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеДРУ);
			КонецЕсли;
		КонецЕсли;
		
		//АБС ВСТАВКА №7899 НАЧАЛО
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникГруппыНСИ) = Неопределено 
			или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникДК) = Неопределено  Тогда
			
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отменен);
			
		КонецЕсли;
		//\\АБС ВСТАВКА №7899 КОНЕЦ
		
	КонецЕсли;
	
	//АБС ВСТАВКА №4292 НАЧАЛО   			
	Если ТекСтатус = Перечисления.абсСтатусыСчетов.Уточнить и СтатусСчетаСтарый = Перечисления.абсСтатусыСчетов.Согласован Тогда 
		Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);  			
	КонецЕсли;
	//Если ТекСтатус = Перечисления.абсСтатусыСчетов.Согласован Тогда 
	//врЗначение = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Уточнить);
	//	Если НЕ ЗначениеЗаполнено(врЗначение) Тогда
	//		Список.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);	
	//	КонецЕсли;
	//КонецЕсли;		
	//\\АБС ВСТАВКА №4292 КОНЕЦ   	
	
	// Окорректируем на статусе Согласование ЗЗ 
	//  со статуса Согласование ЗЗ можно перейти только в тот статус
	//  с которого БП перешел на Согласование ЗЗ
	Если ТекСтатус = Перечисления.абсСтатусыСчетов.СогласованиеЗЗ Тогда
		ЭлементУтверждениеРуководителемДФМ  = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ);
		ЭлементУтверждениеПВП 				= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
		ЭлементУтверждениеПрезидентом 		= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
		ЭлементСогласован					= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		Если Не СогласованиеБезБП Тогда
			БПСогласование = НайтиБПСогласование();
			
			Если БПСогласование = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если БПСогласование.СтатусОжиданияЗЗ = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ Тогда
				
				Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПВП);
				КонецЕсли;
				
				Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПрезидентом);
				КонецЕсли;
				
			ИначеЕсли БПСогласование.СтатусОжиданияЗЗ = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом Тогда
				
				Если НЕ ЭлементУтверждениеРуководителемДФМ = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеРуководителемДФМ);
				КонецЕсли;
				
				Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПрезидентом);
				КонецЕсли;			
				
			ИначеЕсли БПСогласование.СтатусОжиданияЗЗ = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда
				
				Если НЕ ЭлементУтверждениеРуководителемДФМ = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеРуководителемДФМ);
				КонецЕсли;
				
				Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПВП);
				КонецЕсли;
				
			КонецЕсли;
			
			Если (НЕ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован) ИЛИ
				(ЗначениеЗаполнено(мТекущийЗЗ) И НЕ мЗЗСогласован) Тогда
				
				Если НЕ ЭлементСогласован = Неопределено Тогда
					Список.Удалить(ЭлементСогласован);
				КонецЕсли;
				
			КонецЕсли;                                                   
		КонецЕсли;
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
		
	КонецЕсли;
	
	//Романова 12-12-2016 D2016-1103-3060
	Если Технический и Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Утвержден Тогда 
		Список.Добавить(Перечисления.абсСтатусыСчетов.Оплачен);
	КонецЕсли;
	//D2016-1103-3060-
	
	//Бобылев А.А. 06.11.2018г Первичка
	Согласован = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
	Если НЕ Согласован = Неопределено  и ПроверкаПИП() И ТекСтатус <> Перечисления.абсСтатусыСчетов.ОформлениеАВЗ Тогда
		Список.Удалить(Согласован);
		ОформленияАВЗ = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
		Если ОформленияАВЗ = Неопределено Тогда 
			Список.Добавить(Перечисления.абсСтатусыСчетов.ОформлениеАВЗ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаПИП()
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ttk_КонтрагентыАВЗ.Контрагент
	               |ИЗ
	               |	РегистрСведений.ttk_КонтрагентыАВЗ КАК ttk_КонтрагентыАВЗ
	               |ГДЕ
	               |	ttk_КонтрагентыАВЗ.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Количество = Запрос.Выполнить().Выгрузить().Количество();
	Если Количество > 0 Тогда 
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	//Крамаренко Д.М.
	//забыли возврат
	Возврат Результат;
	
КонецФункции

Функция БылСогласованДРУ() Экспорт
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	Если Не СогласованиеБезБП Тогда
		БПСогласование = НайтиБПСогласование();
		
		Если НЕ БПСогласование = Неопределено Тогда
			
			Возврат БПСогласование.СогласованиеДРУ;
			
		КонецЕсли;
	Иначе
		Возврат СогласованиеДРУ;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

Функция НайтиМинимальныйСтатус()
	
	Если Оплаты.Количество() = 0 Тогда
		Возврат мСписокСтатусов.Получить(0);
	КонецЕсли;
	
	МинимальныйИндекс = мСписокСтатусов.Количество() - 1;
	
	Для Каждого СтрокаОплата Из Оплаты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОплата.Оплата.СтатусОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекИндекс = мСписокСтатусов.Найти(СтрокаОплата.СтатусОплаты);
		
		Если ТекИндекс = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МинимальныйИндекс = Мин(ТекИндекс, МинимальныйИндекс);		
	КонецЦикла;
	
	Возврат мСписокСтатусов.Получить(МинимальныйИндекс);
	
КонецФункции

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции
          
//Функция осуществляет проверку заполнености
// табличной части и осуществляет ее заполнение строкой
// по данным шапки
Функция ПроверитьТабличнуюЧасть()
	
	Если Оплаты.Количество() = 0 Тогда
		ЗаполнитьОплату();
		УдалитьОбновитьСоздатьОплаты();
	КонецЕсли;
	//НФС 2018
	//Дублирование, потом удалить
	Для Каждого локСтрока из Оплаты Цикл
		Если НЕ ЗначениеЗаполнено(локСтрока.ttk_ОбъектБюджетирования) Тогда
			локСтрока.ttk_ОбъектБюджетирования = ttk_ОбщегоНазначения.ОпределитьОбъектБюджетирования(Организация, локСтрока.ЦФУ);
		КонецЕсли;		
	КонецЦикла;
	
	
	// АБС ИЗМЕНЕНО Фролов 20110926
	// Проблема с разбиением оплат по техническим счетам:
	// Заменено условие <Если  Оплаты.Количество()>0 Тогда> на 
	// <Если  Оплаты.Количество()=1 Тогда>	
	
	Если Технический ИЛИ Оплаты.Количество() =1 Тогда	
		Если  Оплаты.Количество()=1 Тогда
			//ЗаполнитьЗначенияСвойств(Оплаты[0],ЭтотОбъект); Григорьев Д.В.
			Если ЗначениеЗаполнено(Оплаты[0].Оплата) Тогда
				ОбъектОплата = Оплаты[0].Оплата.ПолучитьОбъект();
				Если ОбъектОплата = Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				//ОбъектОплата.БюджетнаяКатегория = ЭтотОбъект.БюджетнаяКатегория;
				ОбъектОплата.БюджетнаяСтатья    = ЭтотОбъект.БюджетнаяСтатья;
				ОбъектОплата.Валюта             = ЭтотОбъект.Валюта;
				ОбъектОплата.ВалютнаяСумма      = ЭтотОбъект.ВалютнаяСумма; 
				ОбъектОплата.ДатаПлатежа        = ЭтотОбъект.ДатаПлатежа; 
				ОбъектОплата.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента; 
				ОбъектОплата.КВ                 = ЭтотОбъект.КВ; 
				ОбъектОплата.Контрагент         = ЭтотОбъект.Контрагент; 
				ОбъектОплата.Курс               = ЭтотОбъект.Курс;
				Если ЗначениеЗаполнено(ЭтотОбъект.НазначениеПлатежа) Тогда
					ОбъектОплата.НазначениеПлатежа = ЭтотОбъект.НазначениеПлатежа;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОбъектОплата.НазначениеПлатежа) 
					и НЕ ЗначениеЗаполнено(ЭтотОбъект.НазначениеПлатежа) Тогда
					ЭтотОбъект.НазначениеПлатежа = ОбъектОплата.НазначениеПлатежа;
				КонецЕсли;				
				ОбъектОплата.Организация = ЭтотОбъект.Организация;
				Если ЗначениеЗаполнено(ЭтотОбъект.ОснованиеПлатежа) Тогда
					ОбъектОплата.ОснованиеПлатежа = ЭтотОбъект.ОснованиеПлатежа;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОбъектОплата.ОснованиеПлатежа)
					и НЕ ЗначениеЗаполнено(ЭтотОбъект.ОснованиеПлатежа) Тогда
					ЭтотОбъект.ОснованиеПлатежа = ОбъектОплата.ОснованиеПлатежа;
				КонецЕсли;				
				ОбъектОплата.СуммаПлатежа    = ЭтотОбъект.СуммаПлатежа;
				ОбъектОплата.СчетКонтрагента = ЭтотОбъект.СчетКонтрагента;
				ОбъектОплата.ТипРасхода      = ЭтотОбъект.ТипРасхода;
				ОбъектОплата.ТипСети         = ЭтотОбъект.ТипСети;
				ОбъектОплата.ТЭО = ЭтотОбъект.ТЭО;
				ОбъектОплата.ЦФО = ЭтотОбъект.ЦФО;
				ОбъектОплата.ЦФУ = ЭтотОбъект.ЦФУ;
				
				//абс_Стрельцов+ добавлено: 18.09.2012
				//при переносе ПУ
				//---------------------------------------------------
				//Если мПроведениеПоМеханизмуПроектногоУчета Тогда
					//АБС НАЧАЛО Задача №08759
		            //ОбъектОплата.Проект = ЭтотОбъект.Проект;
					ОбъектОплата.РаспределениеПоПроектам.Загрузить(ЭтотОбъект.РаспределениеПоПроектам.Выгрузить());
					//\\АБС КОНЕЦ Задача №08759
				//КонецЕСли;
				//---------------------------------------------------
				//абс_Стрельцов-
				
				ОбъектОплата.Записать();
			КонецЕсли;
		КонецЕсли;	
	Иначе 
		//установим реквизиты оплаты как в строке ТЧ Оплаты
		//Для Каждого СтрокаОплаты Из ЭтотОбъект.Оплаты Цикл
		//	Если ЗначениеЗаполнено(СтрокаОплаты.Оплата) Тогда
		//	НеобходимоПерезаписать = Ложь;
		//	МетаданныеОплаты = СтрокаОплаты.Оплата.Метаданные();
		//	МетаданныеТЧ    = ЭтотОбъект.Метаданные().ТабличныеЧасти.Оплаты;
		//	Для Каждого РеквизитОплаты Из МетаданныеОплаты.Реквизиты Цикл
		//		Для Каждого РеквизитТЧ Из МетаданныеТЧ.Реквизиты Цикл
		//			Если РеквизитОплаты.Имя = РеквизитТЧ.Имя Тогда
		//				Если СтрокаОплаты.Оплата[РеквизитОплаты.Имя]<>СтрокаОплаты[РеквизитТЧ.Имя] Тогда
		//					НеобходимоПерезаписать = Истина;
		//				КонецЕсли;	
		//			КонецЕсли;
		//			
		//		КонецЦикла;
		//		
		//	КонецЦикла;
		//	Если НеобходимоПерезаписать Тогда
		//		ОбъектОплата = СтрокаОплаты.Оплата.ПолучитьОбъект(); 
		//		Для Каждого РеквизитОплаты Из МетаданныеОплаты.Реквизиты Цикл
		//			Для Каждого РеквизитТЧ Из МетаданныеТЧ.Реквизиты Цикл
		//				Если РеквизитОплаты.Имя = РеквизитТЧ.Имя Тогда
		//					ОбъектОплата[РеквизитОплаты.Имя] = СтрокаОплаты[РеквизитТЧ.Имя] 							
		//				КонецЕсли;
		//				
		//			КонецЦикла;
		//			
		//		КонецЦикла;
		//		ОбъектОплата.Записать();
		//		
		//	КонецЕсли;	
		//	КонецЕсли;	
		//КонецЦикла;	
		//
	КонецЕсли;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.Оплаты.Очистить();
	ЭтотОбъект.СчетНаОплатуПоставщику=Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
	ЭтотОбъект.НомерПП="";
	ЭтотОбъект.ДатаПлатежа = ТекущаяДата();
	// Start КТТК Ермолов Е.Л.  09.02.2015 000031066
	ЭтотОбъект.ДатаОплаты = Неопределено;
	ЭтотОбъект.ДатаОплатыПП = Неопределено;
	ЭтотОбъект.ОтправленВБанк = Ложь;
	// Stop КТТК Ермолов Е.Л.  09.02.2015
    // Start КТТК Ермолов Е.Л.  16.11.2015 000035239
	ЭтотОбъект.Оплаты.Очистить();
	ЭтотОбъект.РаспределениеПоПроектам.Очистить();
	ЭтотОбъект.ДокументОснование = Неопределено;
	// Stop КТТК Ермолов Е.Л.  16.11.2015
	
	// {{ТТК Лапин А. Заявка № 7737686 04.07.2016 начало
	ОбособленноеПодразделение = Справочники.абс_ОбособленныеПодразделения.ПустаяСсылка();
	КПП = "";
	// }}ТТК Лапин А. Заявка № 7737686 04.07.2016 окончание

КонецПроцедуры
                
Процедура КонтрольЛимитов(Отказ) Экспорт
	
	Если УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
		Возврат;
	КонецЕсли;      	
	
	// {{ТТК Лапин А. Заявка Обнуление лимитов 27.10.2015 начало
	//	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(БюджетнаяСтатья) Тогда
	Если абс_Бюджетирование.ПоСтатьеРазрешеноПревышениеБюджета(БюджетнаяСтатья, Организация) Тогда
	// }}ТТК Лапин А. Заявка № Обнуление лимитов 27.10.2015 окончание	
 		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №29472 НАЧАЛО «2 декабря 2014 г.», Пополитов
	Если абс_Бюджетирование.МесяцаИсключенияИзКонтроляЛимитов(ПериодПлатежа, Организация) Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №29472 КОНЕЦ  	
	
	СтруктураАналитик = Новый Структура;
	СтруктураАналитик.Вставить("Организация",Организация);		
	СтруктураАналитик.Вставить("ЦФО", ЦФО);
	СтруктураАналитик.Вставить("абс_ТипРасхода", ТипРасхода);
	СтруктураАналитик.Вставить("абс_ТипКонтрагента", ТипКонтрагента);
	СтруктураАналитик.Вставить("СтатьяОборотов", Справочники.СтатьиОборотовПоБюджетам.ПустаяСсылка());
	СтруктураАналитик.Вставить("абс_ТипСети", Справочники.абс_ТипыСетей.ПустаяСсылка());
	СтруктураАналитик.Вставить("абс_КВ", Справочники.абс_КапитальныеВложения.ПустаяСсылка());
	СтруктураАналитик.Вставить("абс_ТЭО", Справочники.абс_ТЭО.ПустаяСсылка());
	СтруктураАналитик.Вставить("абс_ЦФУ", Справочники.абс_ЦФУ.ПустаяСсылка());
	СтруктураАналитик.Вставить("ttk_ОбъектБюджетирования", Справочники.ttk_ОбъектыБюджетирования.ПустаяСсылка());
	
	////Григорьев Д.В. 22.12.2017 НФС {
	//
	//
	//КолонкиАналитик = "БюджетнаяСтатья, ТипСети, КВ, ТЭО, ЦФУ, ttk_ОбъектБюджетирования";
	//ОплатыТЗ = Оплаты.Выгрузить(, КолонкиАналитик);
	//ОплатыТЗ.Свернуть(КолонкиАналитик);
	//КоличествоРазныхНаборовАналитик = ОплатыТЗ.Количество();
	////} Григорьев Д.В. 22.12.2017 НФС
	//
	
	КолонкиАналитик = "БюджетнаяСтатья, ТипСети, КВ, ТЭО, ЦФУ, ttk_ОбъектБюджетирования, ttk_Город";
	КолонкиИтогов = "СуммаПлатежа,ВалютнаяСумма";
	ОплатыТЗ = Оплаты.Выгрузить(,КолонкиАналитик + ", " + КолонкиИтогов);
	ОплатыТЗ.Свернуть(КолонкиАналитик, КолонкиИтогов);
	//НФС 2018
	//Крамаренко Д.М.
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
	Если ПроцентНДС = Неопределено Тогда
		ПроцентНДС = 0;
	КонецЕсли;
	СтрокаСообщения = "";
	Для Каждого Стр Из ОплатыТЗ Цикл //КоличествоРазныхНаборовАналитик Цикл
		//не делаем движения и контроли по статье где "абс_БезПроведенияПоЛимитам = Истина"
		Если Стр.БюджетнаяСтатья.абс_БезПроведенияПоЛимитам Тогда Продолжить; КонецЕсли;  
		СтруктураАналитик.СтатьяОборотов = Стр.БюджетнаяСтатья;
		СтруктураАналитик.абс_ТипСети = Стр.ТипСети;
		СтруктураАналитик.абс_КВ = Стр.КВ;
		СтруктураАналитик.абс_ТЭО = Стр.ТЭО;
		СтруктураАналитик.абс_ЦФУ = Стр.ЦФУ;
		СтруктураАналитик.ttk_ОбъектБюджетирования = Стр.ttk_ОбъектБюджетирования;			
		Остаток = абс_Бюджетирование.ОстатокЛимитаПоБюджету(НачалоМесяца(ПериодПлатежа), КонецМесяца(ПериодПлатежа), СтруктураАналитик);
		СуммаПлатежаБезНДС = Окр(Стр.СуммаПлатежа*100/(100+ПроцентНДС),2);
		Если Остаток < СуммаПлатежаБезНДС Тогда
			Если Остаток = -2 Тогда
				СтрокаСообщения = СтрокаСообщения+"В ПЕРИОДЕ " + абс_СлужебныеФункции.ВернутьНазваниеМесяца(ПериодПлатежа) + " НЕ ЗАДАН ЛИМИТ!";
			ИначеЕсли Остаток = -1 Тогда 
				СтрокаСообщения = СтрокаСообщения+"В ПЕРИОДЕ " + абс_СлужебныеФункции.ВернутьНазваниеМесяца(ПериодПлатежа) + " НЕ НАЙДЕН ЛИМИТ ПО АНАЛИТИКАМ ДОКУМЕНТА!";
			Иначе
				СтрокаСообщения = СтрокаСообщения+"В ПЕРИОДЕ " + абс_СлужебныеФункции.ВернутьНазваниеМесяца(ПериодПлатежа) + " СУММА ПРЕВЫШАЕТ ЛИМИТ! СУММА = " + СуммаПлатежаБезНДС + "; ЛИМИТ = " + Остаток + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//КонецЕсли;
    //--------------------------------------------------------------
	//абс_Стрельцов-
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры	

//АБС ВСТАВКА 18552 НАЧАЛО
Функция УсловиеКонтроляДДС() Экспорт
	
	КолонкиАналитик = "БюджетнаяСтатья";
	ОплатыТЗ = Оплаты.Выгрузить(,КолонкиАналитик);
	ОплатыТЗ.Свернуть(КолонкиАналитик);
	
	УсловиеКонтроляДДС = Ложь;
	
	Для Каждого аСтр из ОплатыТЗ Цикл		
	
		Запрос = Новый Запрос;      
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РС.Организация,
		|	РС.Сценарий,
		|	РС.КонтрольПоОрганизации,
		|	РС.ПорядокСписанияЛимитаПоСценарию КАК ПорядокСписанияЛимитаПоСценарию
		|ИЗ
		|	РегистрСведений.абс_КонтрольЛимитаДДСпоОрганизацииИСценарию КАК РС
		|ГДЕ
		|	РС.Организация = &Организация
		|	И ВЫБОР
		|			КОГДА &КонтрольВключен
		|				ТОГДА РС.КонтрольПоОрганизации
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И РС.Сценарий.абс_Бюджет = &абс_Бюджет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСписанияЛимитаПоСценарию";
		Запрос.УстановитьПараметр("КонтрольВключен", Истина);
		Запрос.УстановитьПараметр("Организация"    , Организация);  
		Запрос.УстановитьПараметр("абс_Бюджет"     , ?(аСтр.БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост"),Перечисления.абс_Бюджет.абс_ДДС_САРЕХ,Перечисления.абс_Бюджет.абс_ДДС_ОРЕХ));
		
		
		Если Константы.абс_КонтрольЛимитаПоСтатьямДДС.Получить()
			и не Запрос.Выполнить().Пустой()
			и Не (СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка
			или СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ
			или СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен
			или СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить)
			
			Тогда УсловиеКонтроляДДС  = Истина;
			Прервать;
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат УсловиеКонтроляДДС;	
	
	
КонецФункции	

Процедура КонтрольЛимитовПоДДС(Отказ) Экспорт
	
	//АБС ВСТАВКА №29472 НАЧАЛО «2 декабря 2014 г.», Пополитов
	Если абс_Бюджетирование.МесяцаИсключенияИзКонтроляЛимитов(ПериодПлатежа, Организация, Истина) Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №29472 КОНЕЦ	
	
	мСтруктураАналитик = ПостроитьСтруктуруАналитик(Истина);
	Если не УсловиеКонтроляДДС() Тогда
		Возврат;
	КонецЕсли;	
	
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);  	
	Если ПроцентНДС = Неопределено Тогда
		ПроцентНДС = 0;
	КонецЕсли; 
	//Считаем, что сумма для контроля всегда в руб. с ндс
	//НФС 2018
	//Крамаренко Д.М.
	//переносим в цикл отбора по строкам с одинаковыми аналитиками
	//врИсполнение = СуммаПлатежа;//Окр(СуммаПлатежа*100/(100+ПроцентНДС),2);
	//врИсполнение = 0;
	//НФС 2018
	//Крамаренко Д.М.
	//перенесено в цикл	
	//абс_БезКонтроляЛимита = БюджетнаяСтатья.абс_БезКонтроляЛимита;
	//врИсполнение = 0;
	
	КолонкиАналитик = "БюджетнаяСтатья, ТипСети, КВ, ТЭО, ЦФУ, ttk_ОбъектБюджетирования";
	КолонкиИтогов = "СуммаПлатежа";
	ОплатыТЗ = Оплаты.Выгрузить(,КолонкиАналитик + ", " + КолонкиИтогов);
	ОплатыТЗ.Свернуть(КолонкиАналитик, КолонкиИтогов);
	
	Для Каждого аСтр из ОплатыТЗ Цикл
		абс_БезКонтроляЛимита = аСтр.БюджетнаяСтатья.абс_БезКонтроляЛимита;
		врИсполнение = 0;
		мСтруктураАналитик.Вставить("СтатьяОборотов",		аСтр.БюджетнаяСтатья);
		мСтруктураАналитик.Вставить("ТипСети",				аСтр.ТипСети);
		мСтруктураАналитик.Вставить("КВ",					аСтр.КВ);
		мСтруктураАналитик.Вставить("ТЭО",					аСтр.ТЭО);
		//НФС 2018
		мСтруктураАналитик.Вставить("ЦФУ",					аСтр.ЦФУ);
		мСтруктураАналитик.Вставить("ОбъектБюджетирования",	аСтр.ttk_ОбъектБюджетирования);
		
		врИсполнение = аСтр.СуммаПлатежа;
		
		//РезультатЗапроса = ПостроитьЗапросПоОстаткам(мСтруктураАналитик, мВалютаРегламентированногоУчета); 

		ТаблицаЛимитовПоДДС = ПостроитьЗапросПоОстаткам(мСтруктураАналитик,	мВалютаРегламентированногоУчета);
		
		Если не Технический	и не абс_БезКонтроляЛимита и ТаблицаЛимитовПоДДС.Итог("СуммаОстатокЛимита") < врИсполнение Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не хватает лимита по ДДС, требуется «"+врИсполнение+"», остаток «"+ТаблицаЛимитовПоДДС.Итог("СуммаОстатокЛимита")+"»!",Отказ);
			Возврат;
		КонецЕсли;	
	         	
		Для Каждого Строка Из ТаблицаЛимитовПоДДС Цикл	    		
			МинимальнаяСумма = Макс(Мин(врИсполнение, ПроверкаНаNull(Строка.СуммаОстатокЛимита)), 0);
			Строка.Исполнение = ?(Технический или абс_БезКонтроляЛимита, врИсполнение, МинимальнаяСумма);
			врИсполнение = ?(МинимальнаяСумма = врИсполнение, 0, врИсполнение - МинимальнаяСумма);			
			Если Строка.Исполнение <= 0 или не ЗначениеЗаполнено(Строка.Сценарий) Тогда
				Продолжить;
			КонецЕсли;		
			//+++ НФС 2018 Григорьев Д.В,
			//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
			////ЗаполнитьСтандартныйНаборДанныхПоРегистру(Движение);
			//Движение.Период 					= ПериодПлатежа;
			//Движение.СтатьяОборотов 			= аСтр.БюджетнаяСтатья;
			//Движение.ЦФО 						= ЦФО;
			//Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
			//Движение.абс_ТипСети 				= аСтр.ТипСети;
			//Движение.абс_КВ 					= аСтр.КВ;
			//Движение.абс_ТЭО 					= аСтр.ТЭО;
			//Движение.абс_ЦФУ 					= аСтр.ЦФУ;
			//Движение.абс_ТипРасхода 			= ТипРасхода;
			//Движение.Организация 				= Организация;
			//Движение.ttk_ОбъектБюджетирования 	= ?(ЗначениеЗаполнено(аСтр.ttk_ОбъектБюджетирования), аСтр.ttk_ОбъектБюджетирования, Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация));
			//Движение.Валюта						= Валюта;
			//Движение.Сценарий = Строка.Сценарий;
			//Движение.СуммаСценарияИсполнение	= Строка.Исполнение;
			//Движение.СуммаСценарияИсполнениеВал = Строка.Исполнение;			
			//--- НФС 2018 Григорьев Д.В,
			Если Технический или абс_БезКонтроляЛимита Тогда
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	//+++ НФС 2018 Григорьев Д.В,
	//Движения.КонтролируемыеЗначенияБюджетов.Записать(); 	
	//--- НФС 2018 Григорьев Д.В,
	
КонецПроцедуры	

Функция ПроверкаНаNull(Число)
	Возврат ?(Число=null,0,Число);	
КонецФункции	
//\\АБС ВСТАВКА 18552 КОНЕЦ
	
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ ПРЕДОПРЕДЕЛННЫХ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//Документ уже имеет движения по оборотам бюджета, сделанные при записи документа, регистр очищать нельзя
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записывать = Истина;
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Очистить();
	Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Записать();	
	Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
	Движения.КонтролируемыеЗначенияБюджетов.Очистить();		
	Движения.КонтролируемыеЗначенияБюджетов.Записать();	
	                          	
	//АБС ВСТАВКА №38427 НАЧАЛО «4 февраля 2014 г.», Пополитов
	//очистка движений документа в статусах начальной обработки и финальной стадии отказа от документа
	СписокСтатусовДляКонтроля = Новый СписокЗначений;
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
	СписокСтатусовДляКонтроля.Добавить(Перечисления.абсСтатусыСчетов.Отменен); 		
	Если не СписокСтатусовДляКонтроля.НайтиПоЗначению(СтатусСчета) = Неопределено Тогда 	
		Если мУдалятьДвижения Тогда
			ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;	
	//\\АБС ВСТАВКА №38427 КОНЕЦ
	
	ТЗДолиПоПроектам = абс_БюджетированиеПривилегированный.ПолучитьТаблицуРаспределенияПоПроектам(РаспределениеПоПроектам.Выгрузить(), "Все");
	Если ТЗДолиПоПроектам.Количество()=0 Тогда 
		н = ТЗДолиПоПроектам.Добавить();
		н.ДоляРаспределения = СуммаПлатежа;
	КонецЕСли;
	
	ИтогКоэфПоПроектам = ТЗДолиПоПроектам.Итог("ДоляРаспределения");
	абс_ВременнаяКонстантаВеденияПроектногоУчета = ИтогКоэфПоПроектам <> 0; 
	
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);	
	Если ПроцентНДС = Неопределено Тогда
		ПроцентНДС = 0;
	КонецЕсли;
	
	//НФС 2018
	//Подстановка одной статьи вместо нескольких статей
	СтатьяДляРаспределенияПоПроектам = "";
	//не пишет только статья За счет средств сотрудников Компании ВБ09
	КолонкиАналитик = "БюджетнаяСтатья";
	ОплатыАналитики = Оплаты.Выгрузить(,КолонкиАналитик);
	ОплатыАналитики.Свернуть(КолонкиАналитик);
	Для Каждого строкаАналитик из ОплатыАналитики Цикл
		Если НЕ строкаАналитик.БюджетнаяСтатья.абс_БезПроведенияПоЛимитам Тогда
			БезПроведенияПоЛимитам = строкаАналитик.БюджетнаяСтатья.абс_БезПроведенияПоЛимитам;
			СтатьяДляРаспределенияПоПроектам = строкаАналитик.БюджетнаяСтатья; 
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Если Технический Тогда
		Если СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК или СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован Тогда 
			Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда   				
				//АБС НАЧАЛО Задача №08759
				Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
					//+++ НФС 2018 Григорьев Д.В.
					//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
					//ЗаполнитьСтандартныйНаборДанныхПоРегистру(Движение); 						
					//Движение.Проект = СтрокаПроекта.Проект;					
					////НФС 2018
					////добавить на проверку несовпадения по ЦФУ на КТТК
					//Движение.СтатьяОборотов = СтатьяДляРаспределенияПоПроектам;
					//Движение.ttk_ОбъектБюджетирования = Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация);
					//Движение.СуммаСценарияИсполнение	= Окр(Движение.СуммаСценарияИсполнение*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
					//Движение.СуммаСценарияИсполнениеВал = Окр(Движение.СуммаСценарияИсполнениеВал*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
					//--- НФС 2018 Григорьев Д.В.
				КонецЦикла;		 
				//\\АБС КОНЕЦ Задача №08759 				
			Иначе				
				//НФС 2018
				//Крамаренко Д.М.
				КолонкиАналитик = "БюджетнаяСтатья, ТипСети, КВ, ТЭО, ЦФУ, ttk_ОбъектБюджетирования";
				КолонкиИтогов = "СуммаПлатежа, ВалютнаяСумма";
				ОплатыТЗ = Оплаты.Выгрузить(,КолонкиАналитик + ", " + КолонкиИтогов);
				ОплатыТЗ.Свернуть(КолонкиАналитик, КолонкиИтогов);
				ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);  	
				Если ПроцентНДС = Неопределено Тогда
					ПроцентНДС = 0;
				КонецЕсли; 
				Для Каждого Стр Из ОплатыТЗ Цикл //КоличествоРазныхНаборовАналитик Цикл
					//+++ НФС 2018 Григорьев Д.В.
					//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
					//Движение.Период 					= ПериодПлатежа;
					//Движение.СтатьяОборотов 			= Стр.БюджетнаяСтатья;
					//Движение.ЦФО 						= ЦФО;
					//Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
					//Движение.абс_ТипСети 				= Стр.ТипСети;
					//Движение.абс_КВ 					= Стр.КВ;
					//Движение.абс_ТЭО 					= Стр.ТЭО;
					//Движение.абс_ЦФУ 					= Стр.ЦФУ;
					//Движение.абс_ТипРасхода 			= ТипРасхода;
					//Движение.Организация 				= Организация;
					//Движение.ttk_ОбъектБюджетирования 	= ?(ЗначениеЗаполнено(Стр.ttk_ОбъектБюджетирования), Стр.ttk_ОбъектБюджетирования, Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация));
					//Движение.СуммаСценарияИсполнение	= Окр(Стр.СуммаПлатежа*100/(100+ПроцентНДС),2);
					//Движение.СуммаСценарияИсполнениеВал = Окр(Стр.ВалютнаяСумма*100/(100+ПроцентНДС),2);
					//Движение.Валюта						= Валюта;
					//--- НФС 2018 Григорьев Д.В.
				КонецЦикла;
				////было
				//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
				//ЗаполнитьСтандартныйНаборДанныхПоРегистру(Движение);				
			КонецЕсли; 
			//+++ НФС 2018 Григорьев Д.В.
			//Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;		
			//--- НФС 2018 Григорьев Д.В.
			//НФС 2018
			КонтрольЛимитовПоДДС(Отказ);
		КонецЕсли;		
		Возврат;		
	КонецЕсли;
	
	//АБС ВСТАВКА №10351 НАЧАЛО
	//Если не ЗакупочныйЗаказ.НефиксированнаяСумма
	
	//НФС 2018
	Если Не ЗакупочныйЗаказ.НефиксированнаяСумма или
		(ЗакупочныйЗаказ.НефиксированнаяСумма и глЗначениеПеременной("абс_СписаниеИКонтрольЛимитовПоСхемеГоловнойКомпании") > ПериодПлатежа
			и (ПараметрыСеанса.абс_ПользовательДЗО	или Организация.абс_СтатусОрганизации <> Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация)) Тогда
		//+++ НФС 2018 Григорьев Д.В.
		//Движения.КонтролируемыеЗначенияБюджетов.Записывать = Истина;
		//--- НФС 2018 Григорьев Д.В.
		КонтрольЛимитовПоДДС(Отказ);
		Возврат;
	ИначеЕсли ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
		Если (ПараметрыСеанса.абс_ПользовательДЗО или Организация.абс_СтатусОрганизации <> Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация) Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;	
	//\\АБС ВСТАВКА №10351 КОНЕЦ	
	
	// АБС ВСТАВКА 02390 Начало
	//НФС 2018 счет не пишет больше график поставки ЗЗ	
	Если мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <> '00010101' И мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа <= Дата Тогда
		//НФС 2018
		Возврат;
		Если не (СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Или СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ) Тогда
			//НФС 2018
			//Крамаренко Д.М.
			Если Год(Дата) < Год(ТекущаяДата()) Тогда
				Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				Движение.ПериодПоставки = НачалоМесяца(ПериодПлатежа);
				Движение.Сумма = Окр(ВалютнаяСумма*100/(100+ПроцентНДС),2);
				Движение.ЗакупочныйЗаказ = ЗакупочныйЗаказ;
			Иначе
				//НФС 2018
				//Крамаренко Д.М.
				КолонкиАналитик = "БюджетнаяСтатья, ТипСети, КВ, ТЭО, ЦФУ, ttk_ОбъектБюджетирования, ttk_Город";
				КолонкиИтогов = "СуммаПлатежа,ВалютнаяСумма";
				ОплатыТЗ = Оплаты.Выгрузить(,КолонкиАналитик + ", " + КолонкиИтогов);
				ОплатыТЗ.Свернуть(КолонкиАналитик, КолонкиИтогов);
				ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);  	
				Если ПроцентНДС = Неопределено Тогда
					ПроцентНДС = 0;
				КонецЕсли; 
				Для Каждого Стр Из ОплатыТЗ Цикл
					Движение = Движения.абс_ГрафикПоставкиЗакупочногоЗаказа.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Период = Дата;
					Движение.ПериодПоставки = НачалоМесяца(ПериодПлатежа);
					Движение.Сумма = Окр(Стр.ВалютнаяСумма*100/(100+ПроцентНДС),2);
					Движение.СтатьяОборотов = Стр.БюджетнаяСтатья;
					Движение.абс_ТипСети 				= Стр.ТипСети;
					Движение.абс_КВ 					= Стр.КВ;
					Движение.абс_ТЭО 					= Стр.ТЭО;
					Движение.абс_ЦФУ 					= Стр.ЦФУ;
					Движение.ttk_ОбъектБюджетирования	= Стр.ttk_ОбъектБюджетирования;
					Движение.ttk_Город					= Стр.ttk_Город;
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;  	
	// АБС ВСТАВКА 02390 Конец
	
	//АБС ВСТАВКА №13576 НАЧАЛО
	//
	//\\АБС ВСТАВКА №13576 КОНЕЦ
	
	//НФС 2018
	//Крамаренко Д.М.
	БезПроведенияПоЛимитам = Ложь;
	СтатьяДляРаспределенияПоПроектам = "";
	//не пишет только статья За счет средств сотрудников Компании ВБ09
	КолонкиАналитик = "БюджетнаяСтатья";
	ОплатыАналитики = Оплаты.Выгрузить(,КолонкиАналитик);
	ОплатыАналитики.Свернуть(КолонкиАналитик);
	Для Каждого строкаАналитик из ОплатыАналитики Цикл
		Если НЕ строкаАналитик.БюджетнаяСтатья.абс_БезПроведенияПоЛимитам Тогда
			БезПроведенияПоЛимитам = строкаАналитик.БюджетнаяСтатья.абс_БезПроведенияПоЛимитам;
			СтатьяДляРаспределенияПоПроектам = строкаАналитик.БюджетнаяСтатья; 
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	

	//не пишет только статья За счет средств сотрудников Компании ВБ09
	Если НЕ БезПроведенияПоЛимитам Тогда			
		//Заявка 4056
		Если СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеОФК Или СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнено Или СтатусСчета = Перечисления.абсСтатусыСчетов.Согласован 
			Или СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ Или СтатусСчета = Перечисления.абсСтатусыСчетов.НалоговыйКонтроль Тогда
			КонтрольЛимитов(Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда 				
				//АБС НАЧАЛО Задача №08759
				Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл					
					//+++ НФС 2018 Григорьев Д.В.
					//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
					//ЗаполнитьСтандартныйНаборДанныхПоРегистру(Движение);					
					//Движение.Проект = СтрокаПроекта.Проект;
					//Движение.СтатьяОборотов = СтатьяДляРаспределенияПоПроектам;
					////НФС 2018
					////Крамаренко Д.М.
					////добавить на проверку несовпадения по ЦФУ на КТТК
					//Движение.ttk_ОбъектБюджетирования = Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация);
					//Движение.СуммаСценарияИсполнение	= Окр(Движение.СуммаСценарияИсполнение*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
					//Движение.СуммаСценарияИсполнениеВал = Окр(Движение.СуммаСценарияИсполнениеВал*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
					//--- НФС 2018 Григорьев Д.В.
				КонецЦикла;		 
				//\\АБС КОНЕЦ Задача №08759    				
			Иначе 				
				//НФС 2018
				//Крамаренко Д.М.
				КолонкиАналитик = "БюджетнаяСтатья, ТипСети, КВ, ТЭО, ЦФУ, ttk_ОбъектБюджетирования";
				КолонкиИтогов = "СуммаПлатежа, ВалютнаяСумма";
				ОплатыТЗ = Оплаты.Выгрузить(,КолонкиАналитик + ", " + КолонкиИтогов);
				ОплатыТЗ.Свернуть(КолонкиАналитик, КолонкиИтогов);
				ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);  	
				Если ПроцентНДС = Неопределено Тогда
					ПроцентНДС = 0;
				КонецЕсли; 
				Для Каждого Стр Из ОплатыТЗ Цикл //КоличествоРазныхНаборовАналитик Цикл
					Если Стр.БюджетнаяСтатья.абс_БезПроведенияПоЛимитам Тогда Продолжить; КонецЕсли;
					//+++ НФС 2018 Григорьев Д.В.
					//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
					//Движение.Период 					= ПериодПлатежа;
					//Движение.СтатьяОборотов 			= Стр.БюджетнаяСтатья;
					//Движение.ЦФО 						= ЦФО;
					//Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
					//Движение.абс_ТипСети 				= Стр.ТипСети;
					//Движение.абс_КВ 					= Стр.КВ;
					//Движение.абс_ТЭО 					= Стр.ТЭО;
					//Движение.абс_ЦФУ 					= Стр.ЦФУ;
					//Движение.абс_ТипРасхода 			= ТипРасхода;
					//Движение.Организация 				= Организация;
					//Движение.ttk_ОбъектБюджетирования 	= ?(ЗначениеЗаполнено(Стр.ttk_ОбъектБюджетирования), Стр.ttk_ОбъектБюджетирования, Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация));
					//Движение.СуммаСценарияИсполнение	= Окр(Стр.СуммаПлатежа*100/(100+ПроцентНДС),2);
					//Движение.СуммаСценарияИсполнениеВал = Окр(Стр.ВалютнаяСумма*100/(100+ПроцентНДС),2);
					//Движение.Валюта						= Валюта;
					//--- НФС 2018 Григорьев Д.В.
				КонецЦикла;				
			КонецЕсли;			
		Иначе			
			Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда //мПроведениеПоМеханизмуПроектногоУчета Тогда 				
				//АБС НАЧАЛО Задача №08759
				Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
					//+++ НФС 2018 Григорьев Д.В.
					//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
					//ЗаполнитьСтандартныйНаборДанныхПоРегистру(Движение); 					
					//Движение.Проект = СтрокаПроекта.Проект;
					////НФС 2018
					////Крамаренко Д.М.
					////добавить на проверку несовпадения по ЦФУ на КТТК
					//Движение.СтатьяОборотов = СтатьяДляРаспределенияПоПроектам;
					//Движение.ttk_ОбъектБюджетирования = Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация);
					//Движение.СуммаСценарияИсполнение	= Окр(Движение.СуммаСценарияИсполнение*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
					//Движение.СуммаСценарияИсполнениеВал = Окр(Движение.СуммаСценарияИсполнениеВал*СтрокаПроекта.ДоляРаспределения/ИтогКоэфПоПроектам,2);
					//--- НФС 2018 Григорьев Д.В.
				КонецЦикла;		 
				//\\АБС КОНЕЦ Задача №08759 				
			Иначе
				//НФС 2018
				//Крамаренко Д.М.
				КолонкиАналитик = "БюджетнаяСтатья, ТипСети, КВ, ТЭО, ЦФУ, ttk_ОбъектБюджетирования";
				КолонкиИтогов = "СуммаПлатежа, ВалютнаяСумма";
				ОплатыТЗ = Оплаты.Выгрузить(,КолонкиАналитик + ", " + КолонкиИтогов);
				ОплатыТЗ.Свернуть(КолонкиАналитик, КолонкиИтогов);
				ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);  	
				Если ПроцентНДС = Неопределено Тогда
					ПроцентНДС = 0;
				КонецЕсли; 
				Для Каждого Стр Из ОплатыТЗ Цикл //КоличествоРазныхНаборовАналитик Цикл
					Если Стр.БюджетнаяСтатья.абс_БезПроведенияПоЛимитам Тогда Продолжить; КонецЕсли;
					//+++ НФС 2018 Григорьев Д.В.
					//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
					//Движение.Период 					= ПериодПлатежа;
					//Движение.СтатьяОборотов 			= Стр.БюджетнаяСтатья;
					//Движение.ЦФО 						= ЦФО;
					//Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
					//Движение.абс_ТипСети 				= Стр.ТипСети;
					//Движение.абс_КВ 					= Стр.КВ;
					//Движение.абс_ТЭО 					= Стр.ТЭО;
					//Движение.абс_ЦФУ 					= Стр.ЦФУ;
					//Движение.абс_ТипРасхода 			= ТипРасхода;
					//Движение.Организация 				= Организация;
					//Движение.ttk_ОбъектБюджетирования 	= ?(ЗначениеЗаполнено(Стр.ttk_ОбъектБюджетирования), Стр.ttk_ОбъектБюджетирования, Справочники.ttk_ОбъектыБюджетирования.НайтиПоРеквизиту("Организация", Организация));
					//Движение.СуммаСценарияИсполнение	= Окр(Стр.СуммаПлатежа*100/(100+ПроцентНДС),2);
					//Движение.СуммаСценарияИсполнениеВал = Окр(Стр.ВалютнаяСумма*100/(100+ПроцентНДС),2);
					//Движение.Валюта						= Валюта;
					//--- НФС 2018 Григорьев Д.В.
				КонецЦикла
				//Движение = Движения.КонтролируемыеЗначенияБюджетов.Добавить();
				//ЗаполнитьСтандартныйНаборДанныхПоРегистру(Движение); 				
			КонецЕсли;		
		КонецЕсли;
		//+++ НФС 2018 Григорьев Д.В.
		//Движения.КонтролируемыеЗначенияБюджетов.Записать();
		//--- НФС 2018 Григорьев Д.В.
	КонецЕсли;	
		
	КонтрольЛимитовПоДДС(Отказ);
	//Исаенко С.П. 14.11.2018 задача 1046
	Если Не Отказ Тогда
		Отказ = ttk_ОбщегоНазначения.ttk_ИспользованиеЗапрещенныхСтатейДДС(ЭтотОбъект);
	КонецЕсли;	
	Возврат;
		 	
КонецПроцедуры

Процедура ЗаполнитьСтандартныйНаборДанныхПоРегистру(Движение)
	
	//Для регистра: КонтролируемыеЗначенияБюджетов
	//+++ НФС 2018 Григорьев Д.В.
	//Движение.Период 					= ПериодПлатежа;
	//Движение.СтатьяОборотов 			= БюджетнаяСтатья;
	//Движение.ЦФО 						= ЦФО;
	//Движение.абс_ТипКонтрагента 		= ТипКонтрагента;
	//Движение.абс_ТипСети 				= ТипСети;
	//Движение.абс_КВ 					= КВ;
	//Движение.абс_ТЭО 					= ТЭО;
	//Движение.абс_ЦФУ 					= ЦФУ;
	//Движение.абс_ТипРасхода 			= ТипРасхода;
	//Движение.Организация 				= Организация; 	
	//ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);  	
	//Если ПроцентНДС = Неопределено Тогда
	//	ПроцентНДС = 0;
	//КонецЕсли;  	
	//Движение.СуммаСценарияИсполнение	= Окр(СуммаПлатежа*100/(100+ПроцентНДС),2);
	//Движение.СуммаСценарияИсполнениеВал = Окр(ВалютнаяСумма*100/(100+ПроцентНДС),2);
	//Движение.Валюта						= Валюта;	
	//--- НФС 2018 Григорьев Д.В.
	
КонецПроцедуры	

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ (СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка 
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ
		ИЛИ СтатусСчета = Перечисления.абсСтатусыСчетов.Отменен) Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение документа.", Отказ);
		
	КонецЕсли;              
	
КонецПроцедуры

Процедура СоздатьКорректировкуДолга() Экспорт  
	
	Если ЭтоНовый() Тогда
		Сообщить("Необходимо записать документ!");
		Возврат;
	КонецЕсли;
		
	РезультатЗапроса = абс_БизнесПроцессыПривелегированный.ПолучитьПоставкиОЗКПоЗЗ(ЗакупочныйЗаказ, Ссылка);
	
	Если Не абс_БизнесПроцессыПривелегированный.ПроверитьКорректировкиДолгаОЗК(Ссылка) Тогда
		Сообщить("По счету на оплату уже введена корректировка долга");
		Возврат;
	КонецЕсли;
	
	Для Каждого ДокПоставки Из РезультатЗапроса Цикл
			
		КД = Документы.КорректировкаДолга.СоздатьДокумент();
		
		КД.ВидОперации=Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
		КД.Организация = Организация;
		КД.КонтрагентДебитор = Контрагент;
		КД.ОтражатьВУправленческомУчете = Истина;
		КД.ОтражатьВБухгалтерскомУчете  = Истина;
		КД.ОтражатьВНалоговомУчете      = Истина;
		КД.абс_ВзаимозачетПоОЗК         = Истина;
		КД.абс_СчетНаОплату             = Ссылка;
		КД.ВалютаДокумента              = Валюта;
		абс_СуммаПлатежаВал = СуммаПлатежа;
		абс_СуммаПлатежаРуб = МодульВалютногоУчета.ПересчитатьВСуммуРегл(абс_СуммаПлатежаВал,глЗначениеПеременной("ВалютаРегламентированногоУчета"), Валюта, ДатаОплаты);
		КД.СчетДт        = ПланыСчетов.Хозрасчетный.НайтиПоКоду("79.02");
		КД.СчетДтНУ      = ПланыСчетов.Налоговый.НайтиПоКоду("79.02");
		КД.СубконтоДт1   = ДокПоставки.Организация;
		КД.СубконтоДтНУ1 = ДокПоставки.Организация;
		
		СтрокаКД = КД.СуммыДолга.Добавить();
		СтрокаКД.ВидЗадолженности   = Перечисления.ВидыЗадолженности.Дебиторская;
		СтрокаКД.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаКД.КратностьВзаиморасчетов = Кратность;
		СтрокаКД.КурсВзаиморасчетов      = Курс;
		СтрокаКД.Сумма                   = абс_СуммаПлатежаРуб;
		СтрокаКД.СуммаНУ                 = абс_СуммаПлатежаРуб;
		СтрокаКД.СуммаРегл               = абс_СуммаПлатежаРуб;
				
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтрокаКД.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
		СтрокаКД.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;		
		
		КД.ПолучитьФорму("ФормаДокумента").Открыть();
		
	КонецЦикла;

КонецПроцедуры

Функция ПостроитьСтруктуруАналитик(ИнтервалМесяц = Ложь) Экспорт
	
	СтруктураАналитик = Новый Структура;
	СтруктураАналитик.Вставить("Организация"	, Организация);
	СтруктураАналитик.Вставить("Сценарий"	    , абс_Бюджетирование.ПолучитьСценарийДляКонтроляДДС(Организация,,БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост")));	
	СтруктураАналитик.Вставить("ЦФО"			, ЦФО);
	СтруктураАналитик.Вставить("ТипРасхода"		, ТипРасхода);
	СтруктураАналитик.Вставить("ТипКонтрагента"	, ТипКонтрагента);
	//СтруктураАналитик.Вставить("СтатьяОборотов"	, БюджетнаяСтатья);
	//СтруктураАналитик.Вставить("ТипСети"		, ТипСети);
	//СтруктураАналитик.Вставить("КВ"			, КВ);
	//СтруктураАналитик.Вставить("ТЭО"			, ТЭО);
	//СтруктураАналитик.Вставить("ЦФУ"			, ЦФУ);
	абс_ВременнаяКонстантаВеденияПроектногоУчета = Ложь;  									
	//НФС 2018
	//Крамаренко Д.М. отключено как ненужное
	//Если абс_ВременнаяКонстантаВеденияПроектногоУчета Тогда 		
	//	ТЗДолиПоПроектам = РаспределениеПоПроектам.Выгрузить();
	//	Если ТЗДолиПоПроектам.Количество()=0 Тогда 
	//		н = ТЗДолиПоПроектам.Добавить();
	//	КонецЕсли;
	//	СписокГрупп = Новый СписокЗначений;
	//	Для Каждого СтрокаПроекта Из ТЗДолиПоПроектам Цикл
	//		СписокГрупп.Добавить(СтрокаПроекта.Проект);
	//		ПолучитьВсехРодителейПроекта(СтрокаПроекта.Проект, СписокГрупп);
	//		СтруктураАналитик.Вставить("Проект", СписокГрупп);
	//	КонецЦикла;
	//КонецЕСли;	
	Если ИнтервалМесяц Тогда
		СтруктураАналитик.Вставить("НачалоПериода"		, НачалоМесяца(ПериодПлатежа));
		СтруктураАналитик.Вставить("КонецПериода"		, КонецМесяца(ПериодПлатежа)); 	
	Иначе	
		СтруктураАналитик.Вставить("НачалоПериода"		, НачалоГода(ПериодПлатежа));
		СтруктураАналитик.Вставить("КонецПериода"		, КонецГода(ПериодПлатежа));
	КонецЕсли;

	Возврат СтруктураАналитик;
	
КонецФункции

Функция ПостроитьЗапросПоОстаткам(СтруктураПолей, Валюта, ТолькоИнформацияОНаличииЛимита = Ложь, Сценарий = Неопределено, СценарийШапка = Ложь) Экспорт
		                     	
	СтруктураАналитик = Новый Структура;
	СтруктураАналитик.Вставить("Организация"		, СтруктураПолей.Организация);
	СтруктураАналитик.Вставить("Сценарий"	    	, СтруктураПолей.Сценарий);
	//странно что нет по ЦФУ
	//Крамаренко Д.М.
	//Проверить
	//Крамаренко Д.М. Запрос на обслуживание "SC15141"
	//проверили - надо
	СтруктураАналитик.Вставить("абс_ЦФУ"			, СтруктураПолей.ЦФУ);
	//Крамаренко Д.М. Запрос на обслуживание "SC15141"
	СтруктураАналитик.Вставить("ЦФО"				, СтруктураПолей.ЦФО);
	//СтруктураАналитик.Вставить("абс_ТипРасхода"	, СтруктураПолей.ТипРасхода);
	//СтруктураАналитик.Вставить("абс_ТипКонтрагента", СтруктураПолей.ТипКонтрагента);
	//СтруктураАналитик.Вставить("абс_ТипСети"		, СтруктураПолей.ТипСети);
	
	
	//ххх Брель Виктор Андреевич 21.06.2018 11:52:32, заявка 77356750<<<
	//Крамаренко Д.М. Запрос на обслуживание "SC15141"
	//КВпоПост = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост");
	Если СтруктураПолей.СтатьяОборотов = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост") Тогда
		СтруктураАналитик.Вставить("абс_КВ"				, СтруктураПолей.КВ);
		СтруктураАналитик.Вставить("СтатьяОборотов"		, СтруктураПолей.СтатьяОборотов);
	Иначе 
		СтруктураАналитик.Вставить("абс_КВ",  Справочники.абс_КапитальныеВложения.ПустаяСсылка());
		СтруктураАналитик.Вставить("СтатьяОборотов"		, СтруктураПолей.СтатьяОборотов);
	КонецЕсли;
	//ххх Брель Виктор Андреевич 21.06.2018 11:52:32, заявка 77356750<<<
	//КВпоПост = Справочники.СтатьиОборотовПоБюджетам.НайтиПоКоду("КВпоПост");
	//Крамаренко Д.М. Запрос на обслуживание "SC15141"
	
	СтруктураАналитик.Вставить("абс_ТЭО"			, СтруктураПолей.ТЭО);
			
	СтруктураАналитик.Вставить("ttk_ОбъектБюджетирования", СтруктураПолей.ОбъектБюджетирования);
	Если СтруктураПолей.Свойство("Проект") Тогда 
    	СтруктураАналитик.Вставить("Проект", СтруктураПолей.Проект);
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	//НФС 2018
	//Крамаренко Д.М.
	//проверка перехода через год и отсутствия перенесенного лимита
	//действует только до конца 2018
	Если Год(ТекущаяДата()) > Год(СтруктураПолей.НачалоПериода) Тогда
		Запрос.УстановитьПараметр("ДатаНач", НачалоГода(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(НачалоГода(ТекущаяДата())), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("ДатаНач", СтруктураПолей.НачалоПериода);
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(СтруктураПолей.КонецПериода), ВидГраницы.Включая));
	КонецЕсли;
		
	СтрокаОтбора = "";
	Для каждого ЭлементСтруктуры из СтруктураАналитик Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			Если ЭлементСтруктуры.Ключ = "Проект" или ЭлементСтруктуры.Ключ = "Сценарий" Тогда
				СтрокаОтбора = СтрокаОтбора+" И "+ЭлементСтруктуры.Ключ+" В(&"+ЭлементСтруктуры.Ключ+")"; 
			Иначе
				СтрокаОтбора = СтрокаОтбора+" И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ; 
			КонецЕсли;
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЕсли;		
	КонецЦикла;
	СтрокаОтбора = Сред(СтрокаОтбора,3);   
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОборотыБюджетов.Сценарий,
	|	СУММА(ЕСТЬNULL(ОборотыБюджетов.СуммаУпрОборот, 0)) КАК СуммаПлан,
	|	СУММА(0) КАК СуммаЛимита,
	|	СУММА(0) КАК СуммаЛимитаИсполнение
	|ПОМЕСТИТЬ вр
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(&ДатаНач, &ДатаКон, ," + СтрокаОтбора + " ) КАК ОборотыБюджетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетов.Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтролируемыеЗначенияБюджетовОбороты.Сценарий,
	|	СУММА(0),
	|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот),
	|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот)
	|ИЗ
	|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&ДатаНач, &ДатаКон, ," + СтрокаОтбора + " ) КАК КонтролируемыеЗначенияБюджетовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеЗначенияБюджетовОбороты.Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_КонтрольЛимитаДДСпоОрганизацииИСценарию.Сценарий,
	|	абс_КонтрольЛимитаДДСпоОрганизацииИСценарию.ПорядокСписанияЛимитаПоСценарию
	|ПОМЕСТИТЬ пр
	|ИЗ
	|	РегистрСведений.абс_КонтрольЛимитаДДСпоОрганизацииИСценарию КАК абс_КонтрольЛимитаДДСпоОрганизацииИСценарию
	|ГДЕ
	|	абс_КонтрольЛимитаДДСпоОрганизацииИСценарию.Организация В(&Организация)
	|	И абс_КонтрольЛимитаДДСпоОрганизацииИСценарию.КонтрольПоОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	пр.Сценарий,
	|	пр.ПорядокСписанияЛимитаПоСценарию КАК ПорядокСписанияЛимитаПоСценарию,
	|	СУММА(естьnull(вр.СуммаПлан,0)) КАК СуммаПлан,
	|	СУММА(естьnull(вр.СуммаЛимита,0)) КАК СуммаЛимита,
	|	СУММА(естьnull(вр.СуммаЛимитаИсполнение,0)) КАК СуммаЛимитаИсполнение,
	|	СУММА(естьnull(вр.СуммаЛимита,0) - естьnull(вр.СуммаЛимитаИсполнение,0)) КАК СуммаОстатокЛимита,
	|	СУММА(0) КАК Исполнение,
	|	СУММА(0) КАК Пропорция
	|ИЗ
	|	пр КАК пр
	|		ЛЕВОЕ СОЕДИНЕНИЕ вр КАК вр
	|		ПО пр.Сценарий = вр.Сценарий
	|
	|СГРУППИРОВАТЬ ПО
	|	пр.Сценарий,
	|	пр.ПорядокСписанияЛимитаПоСценарию
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСписанияЛимитаПоСценарию";
				
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
//ххх Брель Виктор Андреевич 17.05.2018 12:10:20, заявка <<<
Процедура ПроверитьАналитикуПоЗЗ(Отказ)
	Если ЗначениеЗаполнено(ЗакупочныйЗаказ) Тогда
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_СчетНаОплатуОплаты.ЦФУ,
		|	абс_СчетНаОплатуОплаты.БюджетнаяСтатья,
		|	абс_СчетНаОплатуОплаты.КВ,
		|	абс_СчетНаОплатуОплаты.ТЭО,
		|	абс_СчетНаОплатуОплаты.ttk_ОбъектБюджетирования
		|ПОМЕСТИТЬ ВР_АналитикаСчета
		|ИЗ
		|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
		|ГДЕ
		|	абс_СчетНаОплатуОплаты.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_СчетНаОплатуОплаты.ttk_ОбъектБюджетирования,
		|	абс_СчетНаОплатуОплаты.ТЭО,
		|	абс_СчетНаОплатуОплаты.КВ,
		|	абс_СчетНаОплатуОплаты.БюджетнаяСтатья,
		|	абс_СчетНаОплатуОплаты.ЦФУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	абс_ЗакупочныйЗаказГрафикПоставок.ttk_ОбъектБюджетирования,
		|	абс_ЗакупочныйЗаказГрафикПоставок.абс_ЦФУ,
		|	абс_ЗакупочныйЗаказГрафикПоставок.абс_ТЭО,
		|	абс_ЗакупочныйЗаказГрафикПоставок.абс_КВ,
		|	абс_ЗакупочныйЗаказГрафикПоставок.СтатьяОборотов,
		|	абс_ЗакупочныйЗаказГрафикПоставок.Ссылка КАК ЗакупочныйЗаказ
		|ПОМЕСТИТЬ ВР_АналитикаЗЗ
		|ИЗ
		|	Документ.абс_ЗакупочныйЗаказ.ГрафикПоставок КАК абс_ЗакупочныйЗаказГрафикПоставок
		|ГДЕ
		|	абс_ЗакупочныйЗаказГрафикПоставок.Ссылка = &ЗакупочныйЗаказ
		|
		|СГРУППИРОВАТЬ ПО
		|	абс_ЗакупочныйЗаказГрафикПоставок.абс_ТЭО,
		|	абс_ЗакупочныйЗаказГрафикПоставок.абс_КВ,
		|	абс_ЗакупочныйЗаказГрафикПоставок.абс_ЦФУ,
		|	абс_ЗакупочныйЗаказГрафикПоставок.СтатьяОборотов,
		|	абс_ЗакупочныйЗаказГрафикПоставок.ttk_ОбъектБюджетирования,
		|	абс_ЗакупочныйЗаказГрафикПоставок.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВР_АналитикаСчета.ЦФУ,
		|	ВР_АналитикаСчета.БюджетнаяСтатья,
		|	ВР_АналитикаСчета.КВ,
		|	ВР_АналитикаСчета.ТЭО,
		|	ВР_АналитикаСчета.ttk_ОбъектБюджетирования
		|ИЗ
		|	ВР_АналитикаСчета КАК ВР_АналитикаСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_АналитикаЗЗ КАК ВР_АналитикаЗЗ
		|		ПО ВР_АналитикаСчета.ЦФУ = ВР_АналитикаЗЗ.абс_ЦФУ
		|			И ВР_АналитикаСчета.БюджетнаяСтатья = ВР_АналитикаЗЗ.СтатьяОборотов
		|			И ВР_АналитикаСчета.КВ = ВР_АналитикаЗЗ.абс_КВ
		|			И ВР_АналитикаСчета.ТЭО = ВР_АналитикаЗЗ.абс_ТЭО
		|			И ВР_АналитикаСчета.ttk_ОбъектБюджетирования = ВР_АналитикаЗЗ.ttk_ОбъектБюджетирования
		|ГДЕ
		|	ВР_АналитикаЗЗ.ЗакупочныйЗаказ ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ЗакупочныйЗаказ", ЗакупочныйЗаказ);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТексТошибки = "Контроль аналитик по Графику Поставок ЗЗ (Отсутствует набор аналитик) :" ;
	ТекстОшибкиДоп = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстОшибкиДоп =  ТекстОшибкиДоп + Символы.ПС + " | ЦФУ: " + Строка(ВыборкаДетальныеЗаписи.ЦФУ) + " ";
		//ТекстОшибкиДоп =  ТекстОшибкиДоп + Символы.ПС + " | ТипСети: " + Строка(ВыборкаДетальныеЗаписи.ТипСети) + " ";
		ТекстОшибкиДоп =  ТекстОшибкиДоп + Символы.ПС + " | БюджетнаяСтатья: " + Строка(ВыборкаДетальныеЗаписи.БюджетнаяСтатья) + " ";
		ТекстОшибкиДоп =  ТекстОшибкиДоп + Символы.ПС + " | КВ: " + Строка(ВыборкаДетальныеЗаписи.КВ) + " ";
		ТекстОшибкиДоп =  ТекстОшибкиДоп + Символы.ПС + " | ТЭО: " + Строка(ВыборкаДетальныеЗаписи.ТЭО) + " ";
		ТекстОшибкиДоп =  ТекстОшибкиДоп + Символы.ПС + " | ОбъектБюджетирования: " + Строка(ВыборкаДетальныеЗаписи.ttk_ОбъектБюджетирования) + " ";
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстОшибкиДоп) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТексТошибки+ТекстОшибкиДоп,Отказ);
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецЕсли;

КонецПроцедуры
// Брель Виктор Андреевич 17.05.2018 12:10:20 >>>


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//абс_Стрельцов+ добавлено: 17.09.2012
//при переносе ПУ
мПроведениеПоМеханизмуПроектногоУчета = глЗначениеПеременной("абс_ПроведениеПоМеханизмуПроектногоУчета");
//
//абс_Стрельцов-

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

// Заполним список статусов для определения минимального статуса документа
мСписокСтатусов = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();

мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
мРолиПользователя.Добавить(Справочники.РолиИсполнителей.ПустаяСсылка());
мДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа = глЗначениеПеременной("абс_ДатаНачалаИспользованияРегистраГрафикПоставкиЗакупочногоЗаказа");

мРолиПользователяФилиал = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь,Ссылка.Организация);
мРолиПользователяКТТК   = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь,Справочники.Организации.НайтиПоНаименованию("КТТК"));