///////////////////////////////////////////////////////////////////////////////
//ПЕРЕМЕННЫЕ МОДУЛЯ

&НаСервере
Перем мВалютаРегУчета;
&НаКлиенте
Перем мСписокСтатусов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ ПРЕДОПРЕДЕЛЕННЫХ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установим отбор статусов
	УстановитьОтборИзмененияСтатусов();
	
	// Заполним список доступных статусов
	ЗаполнитьСписокВыбораСтатусов();
	
	// Установим режим просмотра документа
	УстановитьРежимПросмотраДокумента();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// 20110630, заявка 201
		// Если пользователь в тонком клиенте, то ему нельзя создавать счета в общем списке счетов
		
		мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		мРолиПользователя	 = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
		
		Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.СозданиеТехническихСчетов) = Неопределено Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Введите счет на оплату из документа ""Закупочный заказ"" по кнопке ""Сформировать счет"". 
				|Из общего списка счетов вводятся только технические счета.", Отказ);
			
		КонецЕсли;		
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		// 20110630, заявка 201
		
		
		Объект.СтатусСчета 		= Перечисления.абсСтатусыСчетов.Подготовка;
		
		ЗаполнитьСписокВыбораСтатусов();
		
		Объект.Ответственный 	= глЗначениеПеременной("глТекущийПользователь");
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Объект.СчетСогласован 	= Ложь;	
		
		Если Объект.Технический И НЕ РазрешеныТехническиеСчета() Тогда
			Объект.Технический = Ложь;
		КонецЕсли;
		
		// АБС ВСТАВКА 170
		Объект.ПричинаИзмененияСтатуса = "";
		// АБС ВСТАВКА 170 КОНЕЦ
		
		Объект.Куратор = Справочники.абс_Кураторы.ПустаяСсылка();
		
	КонецЕсли;	
	
	мСтатус = Объект.СтатусСчета;
	мВалютаРегУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаРегламентированногоУчета = мВалютаРегУчета;    
	мСписокСтатусов = абс_БизнесПроцессы.ПолучитьМассивСтатусовСчетаНаОплату();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьАналитики();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.СтатусСчета = ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Подготовка");
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации)   Тогда 
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику");	
		КонецЕсли; 
	КонецЕсли;	
	
	ЗаполнитьКодКонтрагента();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ВыполнитьПроверкиСчетаНаСервере(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		
		// {{ТТК Лапин А. Заявка № 04.05.2016 начало
		ЭтоПользовательСРольюАбс_РедактированиеЗавершенногоПлана = Ложь;
		ЭтоПользовательСРольюАбс_РедактированиеЗавершенногоПлана = абс_БизнесПроцессы.РазрешеноУтверждениеПланаПлатежей();
		
		Если Объект.СтатусСчета = Перечисления.абсСтатусыСчетов.Отказ И ЭтоПользовательСРольюАбс_РедактированиеЗавершенногоПлана Тогда
			// это Пономарев переводит в отказ, ему можно.. он массово в отказ кидает
		Иначе
		// }}ТТК Лапин А. Заявка № 04.05.2016 окончание	
			ВвестиСтроку(Объект.ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина);
		// {{ТТК Лапин А. Заявка № 04.05.2016 начало	
		КонецЕсли; 
		// }}ТТК Лапин А. Заявка № 04.05.2016 окончание

		// АБС ВСТАВКА Вводим номера телефонов 
		абс_БизнесПроцессыКлиент.ВвестиВнутреннийНомерТелефона(ПолучитьДанныеПользователя());			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПользователя() 
	
	СтруктураПользователя = Новый Структура("Пользователь, ВнутреннийНомер");
	
	СтруктураПользователя.Пользователь 		= глЗначениеПеременной("глТекущийПользователь");
	СтруктураПользователя.ВнутреннийНомер 	= СтруктураПользователя.Пользователь.абс_ВнутреннийНомер;
	
	Возврат СтруктураПользователя;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Обновим статус ЗЗ в регистре статусов
	// Запустим необходимые бизнес процессы	
	// Попробуем выполнить задачи по счету на оплату
	// Обновим список досупных состояний
	ПослеЗаписиСчетаНаСервере(ПараметрыЗаписи);
	
	// Установим отбор списка изменения статусов
	УстановитьОтборИзмененияСтатусов();
	
	// Установим режим просмотра документа
	УстановитьРежимПросмотраДокумента();
		
КонецПроцедуры

&НаСервере 
Процедура ПослеЗаписиСчетаНаСервере(ПараметрыЗаписи)
	
	// Обновим список досупных состояний
	ЗаполнитьСписокВыбораСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодКонтрагента()
	
	абс_КодКонтрагента = " "+Объект.Контрагент.Код;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ФОРМОЙ

&НаКлиенте
Процедура УстановитьДоступностьАналитики()
	
	ТолькоПросмотрАналитики = НЕ Объект.Технический;
	
	//Элементы.СтраницаАналитика.ТолькоПросмотр 	= ТолькоПросмотрАналитики;
	
	Элементы.Организация.ТолькоПросмотр 		= ТолькоПросмотрАналитики;
	Элементы.ЦФУ.ТолькоПросмотр 				= ТолькоПросмотрАналитики;
	Элементы.ЦФО.ТолькоПросмотр 				= ТолькоПросмотрАналитики;
	Элементы.БюджетнаяСтатья.ТолькоПросмотр 	= ТолькоПросмотрАналитики;
	Элементы.ТипКонтрагента.ТолькоПросмотр 		= ТолькоПросмотрАналитики;
	Элементы.ТипРасхода.ТолькоПросмотр 			= ТолькоПросмотрАналитики;
	Элементы.ТипСети.ТолькоПросмотр 			= ТолькоПросмотрАналитики;
	Элементы.ТЭО.ТолькоПросмотр 				= ТолькоПросмотрАналитики;
	Элементы.КВ.ТолькоПросмотр 					= ТолькоПросмотрАналитики;
	Элементы.БюджетнаяКатегория.ТолькоПросмотр 	= ТолькоПросмотрАналитики;
	Элементы.ОснованиеПлатежа.ТолькоПросмотр 	= ТолькоПросмотрАналитики;
	Элементы.НомерПП.ТолькоПросмотр 			= ТолькоПросмотрАналитики;
	
	Элементы.СтатьяДвиженияДенежныхСредств.Доступность = РазрешитьРедактироватьДДС();	
	
КонецПроцедуры

&НаСервере
Функция РазрешитьРедактироватьДДС()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	РазрешитьРедактироватьДДС = НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникДК) = Неопределено
								или не Константы.абс_СоответствияСтатейДДСИУправленческихСтатейЗатратВклКонтроль.Получить();
	
	Возврат РазрешитьРедактироватьДДС; 
	
КонецФункции

&НаСервере
Процедура УстановитьОтборИзмененияСтатусов()
	
	//ОтборЗаказ = ТабличноеПолеСогласованиеСчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	//ОтборЗаказ.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СчетНаОплату");
	//ОтборЗаказ.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЗаказ.ПравоеЗначение 	= Объект.Ссылка; 
	//ОтборЗаказ.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//
	//ОтборЗаказ.Использование 	= Истина;
	//
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотраДокумента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусСчета = Объект.Ссылка.СтатусСчета;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_ТаблицаСтатусовБПТТК.РедактированиеДокумента,
	                      |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса
	                      |ИЗ
	                      |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                      |ГДЕ
	                      |	абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату)
	                      |	И абс_ТаблицаСтатусовБПТТК.Статус = &ТекСтатус");
						  
	Запрос.УстановитьПараметр("ТекСтатус", СтатусСчета);
	
	РазрешеноРедактирование = Ложь;
	РазрешеноМенятьСтатус 	= Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивРолей = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ МассивРолей.Найти(Выборка.ОтветственныйЗаИзменениеСтатуса) = Неопределено Тогда
			РазрешеноМенятьСтатус = Истина
		КонецЕсли;
		
		РазрешеноРедактирование = РазрешеноРедактирование ИЛИ Выборка.РедактированиеДокумента;
	КонецЦикла;
	
	
	// Если есть задачи текущему пользователю, то ему разрешено изменить статус
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	                      |			&ТекПользователь,
	                      |			ОбъектЗадачи = &СчетНаОплатуСсылка
	                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
						  
	Запрос.УстановитьПараметр("ТекПользователь"		, ТекПользователь);
	Запрос.УстановитьПараметр("СчетНаОплатуСсылка"	, Объект.Ссылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;	
		
	// Установим необходимый вид просмотра документа
	Если НЕ РазрешеноРедактирование Тогда
		
		ТолькоПросмотр = Истина;
			
	Иначе
		
		ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
	// ДРУ может изменить сумму	
	Если (СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка) ИЛИ
		((СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеДРУ) 
		И (НЕ МассивРолей.Найти(Справочники.РолиИсполнителей.СогласованиеДРУ) = Неопределено)) Тогда
		
		Элементы.СуммаПлатежа.ТолькоПросмотр 	= Ложь;
		Элементы.СуммаПлатежа.Доступность 		= Истина;
		
		Элементы.ВалютнаяСумма.ТолькоПросмотр	= Ложь;
		Элементы.ВалютнаяСумма.Доступность		= Истина;
		
		Элементы.Курс.ТолькоПросмотр 			= Ложь;
		Элементы.Курс.Доступность 				= Истина;
		
	Иначе
		
		Элементы.СуммаПлатежа.ТолькоПросмотр 	= Истина;
		Элементы.ВалютнаяСумма.ТолькоПросмотр	= Истина;
		Элементы.Курс.ТолькоПросмотр  			= Истина;
		
	КонецЕсли;
	
	//Если СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Тогда
	//	
	//	ЭлементыФормы.ДействияФормы.Кнопки.Файлы.Доступность = Истина;
	//	
	//Иначе
	//	
	//	ЭлементыФормы.ДействияФормы.Кнопки.Файлы.Доступность = Ложь;
	//	
	//КонецЕсли;	
	
	Элементы.СтатусСчета.Доступность = РазрешеноМенятьСтатус;
	
	Элементы.КнопкаПровестиИЗакрыть.Доступность = РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус;
//	Элементы.КнопкаЗаписать.Доступность			= РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус;
	Элементы.КнопкаПровести.Доступность			= РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус;
	Элементы.КнопкаОтменаПроведения.Доступность	= РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус;
	
	мСтатусСчета = СтатусСчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусов()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя	 = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Список = Элементы.СтатусСчета.СписокВыбора;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	СтатусСчета = Объект.Ссылка.СтатусСчета;
	
	Если Список = Неопределено Тогда
		Список = Новый СписокЗначений;
	Иначе
		Список.Очистить();
	КонецЕсли;
	
	Список.Добавить(Объект.СтатусСчета);	
		
	Если Объект.Технический И Объект.Ссылка.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ДирККР) = Неопределено Тогда
			Список.Добавить(Перечисления.абсСтатусыСчетов.Согласован);
			Список.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;	
	
	ЗапросДоступныхСтатусов = Новый Запрос("ВЫБРАТЬ
	                                       |	абс_ТаблицаСтатусовБПТТК.СтатусНовый КАК СтатусНовый,
	                                       |	абс_ТаблицаСтатусовБПТТК.УсловиеПерехода,
	                                       |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса,
	                                       |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаНовыйСтатус
	                                       |ИЗ
	                                       |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                                       |ГДЕ
	                                       |	абс_ТаблицаСтатусовБПТТК.Статус = &Статус
	                                       |	И абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса В(&СписокРолей)
	                                       |	И абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату)
	                                       |
	                                       |УПОРЯДОЧИТЬ ПО
	                                       |	СтатусНовый");
										   
	ЗапросДоступныхСтатусов.УстановитьПараметр("Статус"		, СтатусСчета);
	ЗапросДоступныхСтатусов.УстановитьПараметр("СписокРолей", мРолиПользователя);
	
	ТаблицаДоступныхСтатусов = ЗапросДоступныхСтатусов.Выполнить().Выгрузить();
		
	Для Каждого СтрокаДоступногоСтатуса Из ТаблицаДоступныхСтатусов Цикл
		Если Список.НайтиПоЗначению(СтрокаДоступногоСтатуса.СтатусНовый) = Неопределено Тогда
			Список.Добавить(СтрокаДоступногоСтатуса.СтатусНовый);
		КонецЕсли;
	КонецЦикла;
	
	// Откорректируем список доступных состояний в зависимости от услуги связи
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Тогда
		ЭлементНедоступноеСостояние = Неопределено;
		
		Если абс_БизнесПроцессы.МожноСогласовыватьСчетНаОплату(Объект.Ссылка) Тогда
					
			// Если необходимо согласование
			Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.ВыборСогласованияДРУОФК) = Неопределено Тогда
				Если Объект.ЗакупочныйЗаказ.БюджетнаяСтатья.абс_УслугаСвязи И Объект.ЗакупочныйЗаказ.НефиксированнаяСумма Тогда
					ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
				Иначе
					ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
				КонецЕсли;
				
				Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
					Список.Удалить(ЭлементНедоступноеСостояние);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
			
			Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
				Список.Удалить(ЭлементНедоступноеСостояние);
			КонецЕсли;
						
			ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеДРУ);
			
			Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
				Список.Удалить(ЭлементНедоступноеСостояние);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//// Откорректируем список доступных состояний по пределам утверждения сумм
	//// Проверим для первого Вице-президента
	//Если  НЕ Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом) = Неопределено 
	//	И НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда
	//	
	//	ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
	//		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату,
	//		Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
	//	
	//	ЭлементНедоступноеСостояние = Неопределено;
	//	
	//	Если Объект.СуммаПлатежа > ПределСуммыУтверждения Тогда			
	//		ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
	//	Иначе
	//		ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом); 
	//	КонецЕсли;
	//	
	//	Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
	//		Список.Удалить(ЭлементНедоступноеСостояние);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//// Проверим для президента
	//Если  НЕ Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом) = Неопределено
	//	И НЕ СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда
	//	
	//	ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
	//		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату,
	//		Справочники.РолиИсполнителей.Президент);
	//	
	//	ЭлементНедоступноеСостояние = Неопределено;
	//	
	//	Если Объект.СуммаПлатежа > ПределСуммыУтверждения Тогда			
	//		ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
	//	Иначе
	//		ЭлементНедоступноеСостояние = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом); 
	//	КонецЕсли;
	//	
	//	Если НЕ ЭлементНедоступноеСостояние = Неопределено Тогда
	//		Список.Удалить(ЭлементНедоступноеСостояние);
	//	КонецЕсли;
	//КонецЕсли;
	
	// Откорректируем на статусе Утверждение ДФМ.
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ Тогда
		ЭлементСогласован 		= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
		ЭлементУтверждениеПВП	= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
		ЭлементСогласованиеЗЗ	= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
		
		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату,
			Справочники.РолиИсполнителей.ПервыйВицеПрезидент);		
			
		ЗЗСогласован = Объект.Технический ИЛИ Объект.ЗакупочныйЗаказ.ЗЗСогласован 
			ИЛИ Объект.ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
			ИЛИ Объект.ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;
			
		Если Объект.СуммаПлатежа <= ПределСуммыУтверждения Тогда
			Если ЗЗСогласован Тогда
				Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
					Список.Удалить(ЭлементСогласованиеЗЗ);
				КонецЕсли;		
				
				Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПВП);
				КонецЕсли;
				
			Иначе
				Если НЕ ЭлементСогласован = Неопределено Тогда
					Список.Удалить(ЭлементСогласован);
				КонецЕсли;                                 	
				
				Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПВП);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеЗЗ);
			КонецЕсли;		
			
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;
						
		КонецЕсли;
	КонецЕсли;	
	
	// Откорректируем на статусе Утверждение ПВП
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом Тогда
				
		ЭлементСогласован 				= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
		ЭлементУтверждениеПрезидентом	= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
		ЭлементСогласованиеЗЗ			= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);

		ПределСуммыУтверждения = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
			Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату,
			Справочники.РолиИсполнителей.Президент);
			
		ЗЗСогласован = Объект.Технический ИЛИ Объект.ЗакупочныйЗаказ.ЗЗСогласован 
			ИЛИ Объект.ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
			ИЛИ Объект.ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;						
		
		Если Объект.СуммаПлатежа <= ПределСуммыУтверждения Тогда
			Если ЗЗСогласован Тогда
				Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
					Список.Удалить(ЭлементСогласованиеЗЗ);
				КонецЕсли;		
				
				Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПрезидентом);
				КонецЕсли;				
			Иначе
				Если НЕ ЭлементСогласован = Неопределено Тогда
					Список.Удалить(ЭлементСогласован);
				КонецЕсли;                                 	
				
				Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
					Список.Удалить(ЭлементУтверждениеПрезидентом);
				КонецЕсли;			
			КонецЕсли;			
		Иначе
			
			Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеЗЗ);
			КонецЕсли;		
			
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Откорректируем на статусе Утверждение Президентом
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда
				
		ЭлементСогласован 				= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
		ЭлементСогласованиеЗЗ			= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеЗЗ);
			
		ЗЗСогласован = Объект.Технический ИЛИ Объект.ЗакупочныйЗаказ.ЗЗСогласован 
			ИЛИ Объект.ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
			ИЛИ Объект.ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;								
	
		Если ЗЗСогласован Тогда
			Если НЕ ЭлементСогласованиеЗЗ = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеЗЗ);
			КонецЕсли;		
		Иначе
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;                                 	
		КонецЕсли;			
		
	КонецЕсли;
	
	// Откорректируем на статусе Уточнить
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.Уточнить Тогда
		
		// В рамках БП согласование нету перехода в статус Уточнено
		БПСогласование = НайтиБПСогласование();
		
		Если НЕ БПСогласование = Неопределено Тогда
			ЭлементУточнено = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Уточнено);
			
			Если НЕ ЭлементУточнено = Неопределено Тогда
				Список.Удалить(ЭлементУточнено);
			КонецЕсли;			
			
			ЭлементСогласован = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.Согласован);
			
			Если НЕ ЭлементСогласован = Неопределено Тогда
				Список.Удалить(ЭлементСогласован);
			КонецЕсли;
						
		Иначе
			
			ЭлементСогласованиеОФК = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
			
			Если НЕ ЭлементСогласованиеОФК = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеОФК);				
			КонецЕсли;

			ЭлементСогласованиеДРУ = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.СогласованиеОФК);
			
			Если НЕ ЭлементСогласованиеДРУ = Неопределено Тогда
				Список.Удалить(ЭлементСогласованиеДРУ);
			КонецЕсли;
		КонецЕсли;

	
	КонецЕсли;
	
	// Окорректируем на статусе Согласование ЗЗ 
	//  со статуса Согласование ЗЗ можно перейти только в тот статус
	//  с которого БП перешел на Согласование ЗЗ
	Если СтатусСчета = Перечисления.абсСтатусыСчетов.СогласованиеЗЗ Тогда
		ЭлементУтверждениеРуководителемДФМ  = Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ);
		ЭлементУтверждениеПВП 				= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом);
		ЭлементУтверждениеПрезидентом 		= Список.НайтиПоЗначению(Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом);
		
		БПСогласование = НайтиБПСогласование();
		
		Если БПСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если БПСогласование.СтатусОжиданияЗЗ = Перечисления.абсСтатусыСчетов.УтверждениеРуководителемДФМ Тогда
			
			Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеПВП);
			КонецЕсли;

			Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеПрезидентом);
			КонецЕсли;
			
		ИначеЕсли БПСогласование.СтатусОжиданияЗЗ = Перечисления.абсСтатусыСчетов.УтверждениеВицеПрезидентом Тогда
			
			Если НЕ ЭлементУтверждениеРуководителемДФМ = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеРуководителемДФМ);
			КонецЕсли;
			
			Если НЕ ЭлементУтверждениеПрезидентом = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеПрезидентом);
			КонецЕсли;			
			
		ИначеЕсли БПСогласование.СтатусОжиданияЗЗ = Перечисления.абсСтатусыСчетов.УтверждениеПрезидентом Тогда
			
			Если НЕ ЭлементУтверждениеРуководителемДФМ = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеРуководителемДФМ);
			КонецЕсли;
			
			Если НЕ ЭлементУтверждениеПВП = Неопределено Тогда
				Список.Удалить(ЭлементУтверждениеПВП);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	// Если счет технический то:
	// 1. оплаты не видны
	// 2. аналитика недоступна
	// 
	
	// Видимость оплат
	Элементы.СтраницаОплаты.Видимость = НЕ Объект.Технический;
	
	// Доступность аналитики
	ДоступностьАналитики = Объект.Технический;
	
	Элементы.ЗакупочныйЗаказ.Доступность 		= НЕ ДоступностьАналитики;
	
	Элементы.ЗакупочныйЗаказ.АвтоОтметкаНезаполненного = ДоступностьАналитики;
	
	УстановитьДоступностьАналитики();
	
	//ЭлементыФормы.НазначениеПлатежа.Доступность		= ДоступностьАналитики;
	//ЭлементыФормы.ОснованиеПлатежа.Доступность		= ДоступностьАналитики;
		
	Элементы.Технический.Доступность		= РазрешеныТехническиеСчета();

КонецПроцедуры

&НаСервере
Функция РазрешеныТехническиеСчета()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	мРазрешеныТехническиеСчета = НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СозданиеТехническихСчетов) = Неопределено;
	
	Возврат мРазрешеныТехническиеСчета; 
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьАналитикуПоЗЗ(ЗЗСсылка)
	
	ПоляАналитики = "ЦФО, ЦФУ, БюджетнаяКатегория, ТипКонтрагента, ТипРасхода, ТипСети, КВ, ТЭО, БюджетнаяСтатья";
	
	СтруктураАналитики = Новый Структура(ПоляАналитики);
		
	ЗаполнитьЗначенияСвойств(СтруктураАналитики, ЗЗСсылка, ПоляАналитики);
	
	Возврат СтруктураАналитики;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КнопкаПровестиИЗакрыть(Команда)
	
	Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
	    ttk_ОбщегоНазначения.СообщитьОбОшибке("Невозможно провести документ.");
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаписать(Команда)
	
	Если НЕ Записать(Новый Структура("РежимЗаписиДокумента", РежимЗаписиДокумента.Запись)) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Невозможно записать документ.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПровести(Команда)
	
	Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Невозможно провести документ.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтменаПроведения(Команда)
	
	Если НЕ Записать(Новый Структура("РежимЗаписиДокумента", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Невозможно провести документ.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СтатусСчетаПриИзменении(Элемент)
	
	// Если выбран элемент не из списка не дадим выбрать
	
	Если Элемент.СписокВыбора.НайтиПоЗначению(мСтатус) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран неверный статус документа");
		
		мСтатус = Объект.СтатусСчета;
		Возврат;
	КонецЕсли;	
	
	Объект.СтатусСчета = мСтатус;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупочныйЗаказПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСвойств(Объект, ЗаполнитьАналитикуПоЗЗ(Объект.ЗакупочныйЗаказ),
		"ЦФО, ЦФУ, БюджетнаяКатегория, ТипКонтрагента, ТипРасхода, ТипСети, КВ, ТЭО, БюджетнаяСтатья");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническийПриИзменении(Элемент)
		
	Если Объект.Технический И ЗначениеЗаполнено(Объект.ЗакупочныйЗаказ) Тогда
		
		Объект.ЗакупочныйЗаказ = Неопределено;
		
		ЗакупочныйЗаказПриИзменении(Неопределено);
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();	
	
	Если НЕ Объект.Технический Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОплаты;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаАналитика;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С БИЗНЕС ПРОЦЕССАМИ

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат НЕ Объект.СтатусСчета = Объект.Ссылка.СтатусСчета;
	
КонецФункции

&НаСервере
Функция НайтиБПСогласование()
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоСчетуНаОплату(Объект.Ссылка, "абсСогласованиеСчетаНаОплату");
	
КонецФункции


&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс = ПолучитьКурсВалюты(Объект.Валюта,Объект.Дата);
	Объект.СуммаПлатежа = ПересчетВалютныхСумм(Объект.ВалютнаяСумма,Объект.Валюта,ВалютаРегламентированногоУчета,Объект.Дата);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ
&НаСервереБезКонтекста
Функция ПересчетВалютныхСумм(Сумма,ВалютаНач,ВалютаКон,Дата)	
	Возврат МодульВалютногоУчета.ПересчитатьВСуммуРегл(Сумма, ВалютаКон, ВалютаНач, Дата);	
КонецФункции

&НаКлиенте
Процедура ВалютнаяСуммаПриИзменении(Элемент)
Объект.СуммаПлатежа =ПересчетВалютныхСумм(Объект.ВалютнаяСумма,Объект.Валюта,ВалютаРегламентированногоУчета,Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция ПолучитьКурсВалюты(Валюта,Дата)
	
	Возврат МодульвалютногоУчета.ПолучитьКурсВалюты(Валюта,Дата).Курс;

КонецФункции

&НаСервере
Процедура ВыполнитьПроверкиСчетаНаСервере(Отказ)
	
	Если НЕ Объект.Технический И НЕ ЗначениеЗаполнено(Объект.ЗакупочныйЗаказ) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран закупочный заказ.", Отказ);
		Возврат;
	КонецЕсли;	
	
	Если Объект.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыУточненияПодготовки = Новый Массив();
	
	СтатусыУточненияПодготовки.Добавить(Перечисления.абсСтатусыСчетов.Подготовка);
	СтатусыУточненияПодготовки.Добавить(Перечисления.абсСтатусыСчетов.Отказ);
	СтатусыУточненияПодготовки.Добавить(Перечисления.абсСтатусыСчетов.Уточнить);
	
	Если СтатусыУточненияПодготовки.Найти(Объект.СтатусСчета) = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерВходящегоСчета) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""Номер входящего счета""", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоСчета) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""Дата входящего счета""", Отказ);
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""Организация""", Отказ);
		//КонецЕсли;
		//
		//Если НЕ ЗначениеЗаполнено(Объект.ЦФО) Тогда
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""ЦФО""", Отказ);
		//КонецЕсли;
		//
		//Если НЕ ЗначениеЗаполнено(Объект.ЦФУ) Тогда
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""ЦФУ""", Отказ);
		//КонецЕсли;
		//
		//Если НЕ ЗначениеЗаполнено(Объект.БюджетнаяСтатья) Тогда
		//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит: ""Бюджетная Статья""", Отказ);
		//КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоСчетаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.НомерВходящегоСчета) Тогда
	     Объект.ОснованиеПлатежа = "";
		 Объект.ОснованиеПлатежа = Объект.НомерВходящегоСчета+?(ЗначениеЗаполнено(Объект.ДатаВходящегоСчета)," от "+Формат(Объект.ДатаВходящегоСчета,"ДФ=dd.MM.yy"),"");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоСчетаПриИзменении(Элемент)
		
	ДатаСчета = Формат(Объект.ДатаВходящегоСчета,"ДФ=dd.MM.yy");	
	Если ЗначениеЗаполнено(ДатаСчета) Тогда
      	 Объект.ОснованиеПлатежа = "";
		 Объект.ОснованиеПлатежа = СокрЛП(Объект.НомерВходящегоСчета)+?(ЗначениеЗаполнено(Объект.ДатаВходящегоСчета)," от "+ДатаСчета,"");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СканСчетаНаОплатуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	АдресХранилища = "";	
	ПутьКФайлу = "";
	
	Если НЕ ПоместитьФайл(АдресХранилища, "", ПутьКФайлу, Истина, УникальныйИдентификатор) Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при загрузке файла на сервер.");
		Возврат;
	КонецЕсли;
	
	ИмяФайла = "";
	ИмяКаталога = "";
	
	РаботаСФайлами.ПолучитьКаталогИИмяФайла(ПутьКФайлу, ИмяКаталога, ИмяФайла);
	
	РезультатЗаписи = ПередатьФайлНаСервер(АдресХранилища, ИмяФайла);
	
	Если РезультатЗаписи.Успешно Тогда
		Объект.СканСчетаНаОплату = РезультатЗаписи.ХранилищеСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередатьФайлНаСервер(ВремФайл, ИмяФайла)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВремФайл);
	
	СтруктураВозврата = абс_РаботаСФайлами.ЗаписатьФайлВоВнешнееХранилище(Объект.Ссылка, ДвоичныеДанные, ИмяФайла);
	
	Возврат СтруктураВозврата;
			
КонецФункции
     
&НаКлиенте
Процедура СканСчетаНаОплатуОткрытие(Элемент, СтандартнаяОбработка)

	СсылкаНаФайл = Объект.СканСчетаНаОплату;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаФайл) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Загрузка файла...");
	
	НаименованиеФайла = "";
	
	АдресХран = ПолучитьФайлССервера(СсылкаНаФайл, НаименованиеФайла);
	
	Если АдресХран = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьФайл(АдресХран, НаименованиеФайла, Истина);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлССервера(СсылкаНаФайл, НаименованиеФайла)	
	
	ДвоичныеДанные = абс_РаботаСФайлами.ПолучитьФайлИзВнешнегоХранилища(СсылкаНаФайл);
	
	Если ДвоичныеДанные = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка 
		АдресХранилища = "";	
		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		НаименованиеФайла = СсылкаНаФайл.Наименование;

	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при получении файла из хранилища.");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат АдресХранилища;
			
КонецФункции

&НаКлиенте
Процедура КнопкаСоздатьЗРС(Команда)
	
	// Вставить содержимое обработчика.
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные изменены. Записать документ?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		Иначе
			возврат;
		КонецЕсли;
	КонецЕсли;
	мСписокСтатусов = ПолучитьМассивСтатусовСчетаНаОплату();
	ИндексСтатусаСогласован = мСписокСтатусов.Найти(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Согласован"));
	ИндексТекСтатуса 		= мСписокСтатусов.Найти(Объект.СтатусСчета);
	Если ИндексТекСтатуса<ИндексСтатусаСогласован Тогда
		Если Не Объект.Технический  Тогда

		Предупреждение("Статус счета не может быть меньше ""Согласован""");
		Возврат;
		КонецЕсли;
	КонецЕсли;
	

	
	ДокОплата = Объект.Оплаты.Получить(0).Оплата;
	ЗРС =  Объект.Оплаты.Получить(0).ЗРС;
	Если Не ЗначениеЗАполнено(ЗРС) Тогда
		//Ответ = Вопрос("Форма будет закрыта. Продолжить?", РежимДиалогаВопрос.ДаНет);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		
		КурсВзаиморасчетов = Объект.Курс;
		
		СоздатьЗРС(ДокОплата,КурсВзаиморасчетов);
		
        ОбновитьТЗ();
        


	Иначе
		
		Предупреждение("По данному счету уже введен документ "+ЗРС);
	КонецЕсли;
   
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтатусовСчетаНаОплату()
МассивСтатусовСчета = Новый Массив;
	
	//МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Согласован"));
	
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Отказ"));
	
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Подготовка"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Уточнить"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.СогласованиеДРУ"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.СогласованиеОФК"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.УтверждениеРуководителемДФМ"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.УтверждениеВицеПрезидентом"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.УтверждениеПрезидентом"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.СогласованиеЗЗ"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Уточнено"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Согласован"));
	
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.ВОплату"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Исполнение"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Утвержден"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.ГотовКОплате"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.ОтправленВБанк"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.ПеренесенВГК"));
	МассивСтатусовСчета.Добавить(ПредопределенноеЗначение("Перечисление.абсСтатусыСчетов.Оплачен"));
	Возврат МассивСтатусовСчета;
КонецФункции
         
&НаСервере
Процедура ОбновитьТЗ()
КонецПроцедуры
                 
&НаСервере
Процедура СоздатьЗРС(ДокОплата,КурсВзаиморасчетов)
	
	НовыйЗРС = Документы.ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
	НовыйЗРС.Дата = ТекущаяДата();
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Организация = ОргПоУмолчанию;
	Иначе
		Организация = ДокОплата.Организация;
	КонецЕсли;

	НовыйЗРС.Организация = Объект.Организация;
	НовыйЗРС.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	НовыйЗРС.абс_БюджетнаяКатегория = ДокОплата.БюджетнаяКатегория;
	НовыйЗРС.абс_ЗакупочныйЗаказ = ДокОплата.ЗакупочныйЗаказ;
	НовыйЗРС.абс_КВ              = ДокОплата.КВ;
	НовыйЗРС.абс_ТипКонтрагента = ДокОплата.Контрагент.абс_ТипыКонтрагентов;
	НовыйЗРС.абс_ТипРасхода = ДокОплата.ТипРасхода;
	НовыйЗРС.абс_ТипСети    = ДокОплата.ТипСети;
	НовыйЗРС.абс_ТЭО        = ДокОплата.ТЭО;
	НовыйЗРС.абс_ЦФУ        = ДокОплата.ЦФУ;
	НовыйЗРС.Статус        =Перечисления.абсСтатусыПлатежей.Подготовка;
	НовыйЗРС.ВалютаДокумента = ДокОплата.Валюта;
	НовыйЗРС.КурсДокумента = КурсВзаиморасчетов;
	//Если Счет.
	НовыйЗРС.ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	НовыйЗРС.ДатаРасхода = ДокОплата.ДатаПлатежа; 
	НовыйЗРС.Контрагент  = ДокОплата.Контрагент;
	НовыйЗРС.КратностьДокумента =1;
	НовыйЗРС.СуммаДокумента = ДокОплата.ВалютнаяСумма;
	НовыйЗРС.Описание = ""+ДокОплата.НазначениеПлатежа+ ДокОплата.ОснованиеПлатежа;
	НовыйЗРС.СтатьяОборотов = ДокОплата.БюджетнаяСтатья;
	НовыйЗРС.ЦФО =  ДокОплата.ЦФО;
	НовыйЗРС.ФормаОплаты = Перечисления.ВидыДенежныхСредств.Безналичные;
	НовыйЗРС.Состояние=Перечисления.СостоянияОбъектов.Подготовлен;
	СтрокаОплат = НовыйЗРС.Оплаты.Добавить();
	СтрокаОплат.Оплата = ДокОплата.Ссылка;
	Счет =  абс_СлужебныеФункции.ОпределитьСчетПоОплате(ДокОплата.Ссылка);
	СтрокаОплат.СчетНаОплату = Счет;
	//Заполнение вид операции по виду операции в счете	
	Если ЗначениеЗаполнено(СтрокаОплат.СчетНаОплату) Тогда
		
		Если ЗначениеЗаполнено(СтрокаОплат.СчетНаОплату.ВидОперации) Тогда
			НовыйЗРС.ВидОперации=СтрокаОплат.СчетНаОплату.ВидОперации; 
		КонецЕсли;
		
	КонецЕсли;
	//Заполнение вид операции по виду операции в счете	
	СтрокаРасшифровки = НовыйЗРС.РасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.ДоговорКонтрагента = ДокОплата.ДоговорКонтрагента;
	СтрокаРасшифровки.КратностьВзаиморасчетов=1;
	СтрокаРасшифровки.КурсВзаиморасчетов = КурсВзаиморасчетов;
	СтрокаРасшифровки.СуммаВзаиморасчетов = ДокОплата.ВалютнаяСумма;
	СтрокаРасшифровки.СуммаПлатежа = ДокОплата.ВалютнаяСумма*КурсВзаиморасчетов;
	Если ЗначениеЗаполнено(СтрокаОплат.СчетНаОплату) Тогда
	СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств =СтрокаОплат.СчетНаОплату.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	Попытка
		НовыйЗРС.Записать(РежимЗаписиДокумента.Проведение);
		//Состояние("Обрабатывается "+НовыйЗРС.Ссылка);
	Исключение	
		НовыйЗРС.Записать();
		//Состояние("Обрабатывается "+НовыйЗРС.Ссылка);
	КонецПопытки;
	
	УстановитьЗРСвСчете(НовыйЗРС,ДокОплата,Счет);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьЗРСвСчете(ЗРС,Оплата,Счет)
	
	Если ЗначениеЗаполнено(Счет) Тогда
		ОбъектСчет = Счет.ПолучитьОбъект();
		СтрокаОплаты = Объектсчет.Оплаты.Найти(Оплата,"Оплата");
		Если СтрокаОплаты<>Неопределено Тогда
			СтрокаОплаты.ЗРС = ЗРС.Ссылка;
			ОбъектСчет.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьКодКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	//АБС ВСТАВКА №6986 НАЧАЛО
	абс_НастройкиПоУмолчаниюДляТехническогоСчета(Объект.СтатьяДвиженияДенежныхСредств);
	//\\АБС ВСТАВКА №6986 КОНЕЦ
	
КонецПроцедуры

//АБС ВСТАВКА №6986 НАЧАЛО
&НаСервере
Процедура абс_НастройкиПоУмолчаниюДляТехническогоСчета(врСтатьяДвиженияДенежныхСредств)
	
	Если НЕ Объект.Технический Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	*
	               |ИЗ
	               |	РегистрСведений.абс_НастройкиПоУмолчаниюДляТехническогоСчета КАК абс
	               |ГДЕ
	               |	абс.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств";
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств",врСтатьяДвиженияДенежныхСредств);	
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект,Результат);	
	КонецЦикла;		
	
КонецПроцедуры
//\\АБС ВСТАВКА №6986 КОНЕЦ

&НаКлиенте
Процедура БюджетнаяСтатьяПриИзменении(Элемент)
	Объект.СтатьяДвиженияДенежныхСредств = врПолучитьСтатьюДДС();
КонецПроцедуры
            
&НаСервере
Функция врПолучитьСтатьюДДС()
		
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьСтатьюДДС(Объект.БюджетнаяСтатья,Объект.НазначениеПлатежа);
			
КонецФункции

&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	Объект.СтатьяДвиженияДенежныхСредств = врПолучитьСтатьюДДС();
КонецПроцедуры
 


