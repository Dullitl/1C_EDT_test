//Налоговый режим организации
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получает значение субконто в том случае, если заданы правила его переопределения
//
// Параметры
//  Субконто - начальное значение субконто
//  ПараметрыПолученияСубконто - соответсвие, 
//                              ключ соответсвия - тип, 
//                              значение - параметры, которые помогают преобразовывать 
//                              субконто соотв. типа из одного значения в другое
//
// Возвращаемое значение:
//   Субконто
// Если для субконто некоторого типа не задаы параметры преобразования, то его 
// значение не изменяется
//
Функция ПолучитьСубконто(Субконто, ПараметрыПолученияСубконто)
    Параметры = ПараметрыПолученияСубконто[ТипЗнч(Субконто)];
    Если Параметры = НеОпределено Тогда
        // для субконто этого типа не заданы парамтры переопределения
        Возврат Субконто;
    КонецЕсли;
    // для статьи затрат
	Если ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
        ВидСтатьиЗатрат = Параметры.ВидСтатьиЗатрат;
        ДополнительныеСтатьиЗатрат = Параметры.ДополнительныеСтатьиЗатрат;
        КлючПоиска = Новый Структура("ВидСтатьиЗатрат, СтатьяЗатратНачисления", ВидСтатьиЗатрат, Субконто);
        Строки = ДополнительныеСтатьиЗатрат.НайтиСтроки(КлючПоиска);
        Если Строки.Количество() = 0 Тогда
            КлючПоиска = Новый Структура("ВидСтатьиЗатрат, СтатьяЗатратНачисления", ВидСтатьиЗатрат, Справочники.СтатьиЗатрат.ПустаяСсылка());
            Строки = ДополнительныеСтатьиЗатрат.НайтиСтроки(КлючПоиска);
            Если Строки.Количество() = 0 Тогда
                Возврат Субконто;
            Иначе
                Возврат Строки[0].СтатьяЗатрат;
            КонецЕсли;
        Иначе
            Возврат Строки[0].СтатьяЗатрат;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ВидСтатьиЗатрат = Параметры.ВидСтатьиЗатрат;
        ДополнительныеСтатьиЗатрат = Параметры.ДополнительныеСтатьиЗатрат;
        КлючПоиска = Новый Структура("ВидСтатьиЗатрат, СтатьяЗатратНачисления", ВидСтатьиЗатрат, Субконто);
        Строки = ДополнительныеСтатьиЗатрат.НайтиСтроки(КлючПоиска);
        Если Строки.Количество() = 0 Тогда
            КлючПоиска = Новый Структура("ВидСтатьиЗатрат, СтатьяЗатратНачисления", ВидСтатьиЗатрат, Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка());
            Строки = ДополнительныеСтатьиЗатрат.НайтиСтроки(КлючПоиска);
            Если Строки.Количество() = 0 Тогда
                Возврат Субконто;
            Иначе
                Возврат Строки[0].СтатьяЗатрат;
            КонецЕсли;
        Иначе
            Возврат Строки[0].СтатьяЗатрат;
		КонецЕсли;	
		
	// для получения субконто другого типа - дописываем ИначеЕсли...
    Иначе
        Возврат Субконто;
    КонецЕсли;
    
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// автозаполнение субконто по данным строки 
Процедура АвтозаполнениеСубконто(ДанныеУчета, СтрокаДанных, ПустойСчет)
	// если не пустой счет - заполним "автозаполняемые" субконто
	Если ДанныеУчета.СчетДт <> ПустойСчет и ДанныеУчета.СчетДт <> NULL Тогда
		Если ДанныеУчета.НомерСубконтоРаботникиДт <> 0 
			И НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоДт" + ДанныеУчета.НомерСубконтоРаботникиДт]) Тогда
				СтрокаДанных["СубконтоДт" + ДанныеУчета.НомерСубконтоРаботникиДт] = ДанныеУчета.Физлицо;
		КонецЕсли;
			
		Если ДанныеУчета.НомерСубконтоРаботникиДтНУ <> 0 
			И НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоДтНУ" + ДанныеУчета.НомерСубконтоРаботникиДтНУ]) Тогда
				СтрокаДанных["СубконтоДтНУ" + ДанныеУчета.НомерСубконтоРаботникиДтНУ] = ДанныеУчета.Физлицо;
		КонецЕсли;
		
			Если ДанныеУчета.НомерСубконтоПодразделенияДт <> 0
				и Не ЗначениеЗаполнено(ДанныеУчета["СубконтоДт" + ДанныеУчета.НомерСубконтоПодразделенияДт]) Тогда
				СтрокаДанных["СубконтоДт" + ДанныеУчета.НомерСубконтоПодразделенияДт] = ДанныеУчета.ПодразделениеОрганизации;	
			КонецЕсли;
		
		Если ДанныеУчета.НомерСубконтоПодразделенияДтНУ <> 0 
			и НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоДтНУ" + ДанныеУчета.НомерСубконтоПодразделенияДтНУ]) Тогда
				СтрокаДанных["СубконтоДтНУ" + ДанныеУчета.НомерСубконтоПодразделенияДтНУ] = ДанныеУчета.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеУчета.СчетКт <> ПустойСчет и ДанныеУчета.СчетДт <> NULL Тогда
		
		Если ДанныеУчета.НомерСубконтоРаботникиКт <> 0 
			и НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоКт" + ДанныеУчета.НомерСубконтоРаботникиКт]) Тогда
			СтрокаДанных["СубконтоКт" + ДанныеУчета.НомерСубконтоРаботникиКт] = ДанныеУчета.Физлицо;
		КонецЕсли;
		
		Если ДанныеУчета.НомерСубконтоРаботникиКтНУ <> 0 
			и НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоКтНУ" + ДанныеУчета.НомерСубконтоРаботникиКтНУ]) Тогда
			СтрокаДанных["СубконтоКтНУ" + ДанныеУчета.НомерСубконтоРаботникиКтНУ] = ДанныеУчета.Физлицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // АвтозаполнениеСубконто


// создает строку промежуточной таблицы, которая впоследствии будет выгружена в табличную часть
// Параметры:
//	ДанныеУчета - спозиционированная выборка по результату запроса
//
Функция СоздатьСтрокуПромежуточнойТаблицы(ДанныеУчета, ПромежуточнаяТаблица, ПустойСчет, ПодразделениеФизлица = Неопределено)

	СтрокаДанных = ПромежуточнаяТаблица.Добавить();
	СтрокаДанных.СчетДт			= ДанныеУчета.СчетДт;
	СтрокаДанных.СчетКт			= ДанныеУчета.СчетКт;
	СтрокаДанных.СубконтоДт1	= ДанныеУчета.СубконтоДт1;
	СтрокаДанных.СубконтоДт2	= ДанныеУчета.СубконтоДт2;
	СтрокаДанных.СубконтоДт3	= ДанныеУчета.СубконтоДт3;
	СтрокаДанных.СубконтоКт1	= ДанныеУчета.СубконтоКт1;
	СтрокаДанных.СубконтоКт2	= ДанныеУчета.СубконтоКт2;
	СтрокаДанных.СубконтоКт3	= ДанныеУчета.СубконтоКт3;
	СтрокаДанных.Сумма			= ДанныеУчета.Результат;
	
	СтрокаДанных.СчетДтНУ		= ДанныеУчета.СчетДтНУ;
	СтрокаДанных.СчетКтНУ		= ДанныеУчета.СчетКтНУ;
	СтрокаДанных.СубконтоДтНУ1	= ДанныеУчета.СубконтоДтНУ1;
	СтрокаДанных.СубконтоДтНУ2	= ДанныеУчета.СубконтоДтНУ2;
	СтрокаДанных.СубконтоДтНУ3	= ДанныеУчета.СубконтоДтНУ3;
	СтрокаДанных.СубконтоКтНУ1	= ДанныеУчета.СубконтоКтНУ1;
	СтрокаДанных.СубконтоКтНУ2	= ДанныеУчета.СубконтоКтНУ2;
	СтрокаДанных.СубконтоКтНУ3	= ДанныеУчета.СубконтоКтНУ3;
	
	СтрокаДанных.ОтражениеВУСН		= ДанныеУчета.ОтражениеВУСН;	
	СтрокаДанных.СпособРаспределенияЗатрат = ДанныеУчета.СпособРаспределенияЗатрат;
	
	// выполним автозаполнение субконто если это предусмотрено способом отражения в бухучете
	Если ДанныеУчета.СчетДт <> ПустойСчет Тогда
		Если ДанныеУчета.НомерСубконтоРаботникиДт <> 0 
			И НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоДт" + ДанныеУчета.НомерСубконтоРаботникиДт]) Тогда
			СтрокаДанных["СубконтоДт" + ДанныеУчета.НомерСубконтоРаботникиДт] = ДанныеУчета.Физлицо;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеУчета.СчетКт <> ПустойСчет Тогда
		Если ДанныеУчета.НомерСубконтоРаботникиКт <> 0 
			И НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоКт" + ДанныеУчета.НомерСубконтоРаботникиКт]) Тогда
			СтрокаДанных["СубконтоКт" + ДанныеУчета.НомерСубконтоРаботникиКт] = ДанныеУчета.Физлицо;
		КонецЕсли;
		Если ДанныеУчета.НомерСубконтоКонтрагентыКт <> 0 
			И НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоКт" + ДанныеУчета.НомерСубконтоКонтрагентыКт]) Тогда
			СтрокаДанных["СубконтоКт" + ДанныеУчета.НомерСубконтоКонтрагентыКт] = ДанныеУчета.Контрагент;
		КонецЕсли;
		Если ДанныеУчета.НомерСубконтоИсполнДокументыКт <> 0 
			И НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоКт" + ДанныеУчета.НомерСубконтоИсполнДокументыКт]) Тогда
			СтрокаДанных["СубконтоКт" + ДанныеУчета.НомерСубконтоИсполнДокументыКт] = ДанныеУчета.ИсполнительныйДокумент;
		КонецЕсли;
		Если ДанныеУчета.НомерСубконтоПодразделениеКт <> 0 
			И НЕ ЗначениеЗаполнено(ДанныеУчета["СубконтоКт" + ДанныеУчета.НомерСубконтоПодразделениеКт]) и ПодразделениеФизлица <> Неопределено Тогда
			СтрокаДанных["СубконтоКт" + ДанныеУчета.НомерСубконтоПодразделениеКт] = ПодразделениеФизлица;
		КонецЕсли;
	КонецЕсли;
	Возврат СтрокаДанных;

КонецФункции // СоздатьСтрокуПромежуточнойТаблицы

// проверяет должен ли быть указан или нет счет учета по НУ
//
// Параметры
//  СчетДт,СчетКт - счета хозрасчетного плана счетов
//  СчетДтНУ	  - счет налогового плана счетов - будущий счет дебета
//
// Возвращаемое значение:
//   булево   – если сочетание корректно, то истина
//
Функция КорректноеСочетаниеСчетов(Выборка,Сообщение)
	
	Сообщение = "";
	
	СчетКт = Выборка.СчетКт;
	СчетДт = Выборка.СчетДт;

	Если НЕ ЗначениеЗаполнено(Выборка.СчетДтНУ) Тогда
		Если (СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда или СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов)
			и Не СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию) 
			и Не СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) 
			и Не СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) 
			и Не СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль) 
			и Не СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)
			и (СчетДт <> ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов)
			и Не Выборка.СчетДтОтноситсяКДеятельностиЕНВД Тогда
			Сообщение = "Не указан счет налогового учета!";
		КонецЕсли;
	Иначе
		Если (СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда или СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов) Тогда
			Сообщение = "Проводки в дебет "+Выборка.НаименованиеСчетДт +" не должны отражаться в налоговом учете!";
		ИначеЕсли Выборка.СчетДтОтноситсяКДеятельностиЕНВД Тогда
			Сообщение = "Для вида деятельности, облагаемого ЕНВД, необходимо очистить счета Дт НУ и Кт НУ.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(Сообщение)
	
КонецФункции // КорректноеСочетаниеСчетов()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
Функция СформироватьЗапросПоОтражениюВУчете()

	Запрос = Новый Запрос();
	
	

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.НомерСтроки,
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт,
		|	ВЫБОР
		|		КОГДА СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		КОГДА СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СчетДтОтноситсяКДеятельностиЕНВД,
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт.Наименование КАК НаименованиеСчетДт,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1
		|	КОНЕЦ КАК СубконтоДт1,
		|	ДтВидСубконто1.ВидСубконто КАК ДтВидСубконто1,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2
		|	КОНЕЦ КАК СубконтоДт2,
		|	ДтВидСубконто2.ВидСубконто КАК ДтВидСубконто2,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3
		|	КОНЕЦ КАК СубконтоДт3,
		|	ДтВидСубконто3.ВидСубконто КАК ДтВидСубконто3,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2 ССЫЛКА Справочник.ПодразделенияОрганизаций
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3 ССЫЛКА Справочник.ПодразделенияОрганизаций
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|	КОНЕЦ КАК НоменклатурнаяГруппа,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1.ХарактерЗатрат
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2.ХарактерЗатрат
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3.ХарактерЗатрат
		|	КОНЕЦ КАК ХарактерЗатрат,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ1.ХарактерЗатрат
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ2.ХарактерЗатрат
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ3.ХарактерЗатрат
		|	КОНЕЦ КАК ХарактерЗатратНУ,
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1
		|	КОНЕЦ КАК СубконтоКт1,
		|	КтВидСубконто1.ВидСубконто КАК КтВидСубконто1,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт2
		|	КОНЕЦ КАК СубконтоКт2,
		|	КтВидСубконто2.ВидСубконто КАК КтВидСубконто2,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт3
		|	КОНЕЦ КАК СубконтоКт3,
		|	КтВидСубконто3.ВидСубконто КАК КтВидСубконто3,
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконтоНУ1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконтоНУ1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ1
		|	КОНЕЦ КАК СубконтоДтНУ1,
		|	ДтВидСубконтоНУ1.ВидСубконто КАК ДтВидСубконтоНУ1,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконтоНУ2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконтоНУ2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ2
		|	КОНЕЦ КАК СубконтоДтНУ2,
		|	ДтВидСубконтоНУ2.ВидСубконто КАК ДтВидСубконтоНУ2,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконтоНУ3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И ДтВидСубконтоНУ3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ3
		|	КОНЕЦ КАК СубконтоДтНУ3,
		|	ДтВидСубконтоНУ3.ВидСубконто КАК ДтВидСубконтоНУ3,
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконтоНУ1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконтоНУ1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКтНУ1
		|	КОНЕЦ КАК СубконтоКтНУ1,
		|	КтВидСубконтоНУ1.ВидСубконто КАК КтВидСубконтоНУ1,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконтоНУ2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконтоНУ2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКтНУ2
		|	КОНЕЦ КАК СубконтоКтНУ2,
		|	КтВидСубконтоНУ2.ВидСубконто КАК КтВидСубконтоНУ2,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконтоНУ3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ В (&парамСчетаРасчетовСПерсоналом)
		|				И КтВидСубконтоНУ3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.ПустаяСсылка)
		|		ИНАЧЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКтНУ3
		|	КОНЕЦ КАК СубконтоКтНУ3,
		|	КтВидСубконтоНУ3.ВидСубконто КАК КтВидСубконтоНУ3,
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_страх)
		|			ТОГДА ""Взносы в ПФР на страховую часть пенсии""
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_нак)
		|			ТОГДА ""Взносы в ПФР на накопительную часть пенсии""
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ)
		|			ТОГДА ""Взносы в ФСС РФ (НС и ПЗ)""
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТФОМС)
		|			ТОГДА ""ЕСН в части ТФОМС""
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФФОМС)
		|			ТОГДА ""ЕСН в части ФФОМС""
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС)
		|			ТОГДА ""Взносы по социальному страхованию (ЕСН в части, перечисляемой в ФСС)""
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕСН_ФБ)
		|			ТОГДА ""ЕСН в части, зачисляемой в Федеральный бюджет""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СодержаниеПроводки,
		|	ВЫБОР
		|		КОГДА ДтВидСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА ДтВидСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗаполненоСубконтоДт1,
		|	ВЫБОР
		|		КОГДА ДтВидСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2 = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА ДтВидСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗаполненоСубконтоДт2,
		|	ВЫБОР
		|		КОГДА ДтВидСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3 = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА ДтВидСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗаполненоСубконтоДт3,
		|	ВЫБОР
		|		КОГДА ДтВидСубконтоНУ1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ1 = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА ДтВидСубконтоНУ1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ1 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗаполненоСубконтоДтНУ1,
		|	ВЫБОР
		|		КОГДА ДтВидСубконтоНУ2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ2 = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА ДтВидСубконтоНУ2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ2 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗаполненоСубконтоДтНУ2,
		|	ВЫБОР
		|		КОГДА ДтВидСубконтоНУ3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ3 = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА ДтВидСубконтоНУ3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДтНУ3 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗаполненоСубконтоДтНУ3,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненСчетДт,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненСчетКт,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненСчетДтНУ,
		|	ВЫБОР
		|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненСчетКтНУ
		|ИЗ
		|	(ВЫБРАТЬ
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.НомерСтроки КАК НомерСтроки,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СчетДт КАК СчетДт,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоДт1 КАК СубконтоДт1,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоДт2 КАК СубконтоДт2,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоДт3 КАК СубконтоДт3,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СчетКт КАК СчетКт,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоКт1 КАК СубконтоКт1,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоКт2 КАК СубконтоКт2,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоКт3 КАК СубконтоКт3,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СчетДтНУ КАК СчетДтНУ,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоДтНУ1 КАК СубконтоДтНУ1,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоДтНУ2 КАК СубконтоДтНУ2,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоДтНУ3 КАК СубконтоДтНУ3,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СчетКтНУ КАК СчетКтНУ,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоКтНУ1 КАК СубконтоКтНУ1,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоКтНУ2 КАК СубконтоКтНУ2,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.СубконтоКтНУ3 КАК СубконтоКтНУ3,
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.Сумма КАК Сумма
		|	ИЗ
		|		Документ.абс_ЗадолженностьМГ_МН.ОтражениеВУчете КАК абс_ЗадолженностьМГ_МНОтражениеВУчете
		|	ГДЕ
		|		абс_ЗадолженностьМГ_МНОтражениеВУчете.Ссылка = &парамРегистратор
		|		И абс_ЗадолженностьМГ_МНОтражениеВУчете.Сумма <> 0) КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
		|		ПО ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт = СчетаУчетаПоДеятельностиЕНВД.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ДтВидСубконто1
		|		ПО (ДтВидСубконто1.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт)
		|			И (ДтВидСубконто1.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ДтВидСубконто2
		|		ПО (ДтВидСубконто2.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт)
		|			И (ДтВидСубконто2.НомерСтроки = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ДтВидСубконто3
		|		ПО (ДтВидСубконто3.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт)
		|			И (ДтВидСубконто3.НомерСтроки = 3)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК КтВидСубконто1
		|		ПО (КтВидСубконто1.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт)
		|			И (КтВидСубконто1.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК КтВидСубконто2
		|		ПО (КтВидСубконто2.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт)
		|			И (КтВидСубконто2.НомерСтроки = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК КтВидСубконто3
		|		ПО (КтВидСубконто3.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт)
		|			И (КтВидСубконто3.НомерСтроки = 3)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ДтВидСубконтоНУ1
		|		ПО (ДтВидСубконтоНУ1.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ)
		|			И (ДтВидСубконтоНУ1.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ДтВидСубконтоНУ2
		|		ПО (ДтВидСубконтоНУ2.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ)
		|			И (ДтВидСубконтоНУ2.НомерСтроки = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ДтВидСубконтоНУ3
		|		ПО (ДтВидСубконтоНУ3.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДтНУ)
		|			И (ДтВидСубконтоНУ3.НомерСтроки = 3)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК КтВидСубконтоНУ1
		|		ПО (КтВидСубконтоНУ1.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ)
		|			И (КтВидСубконтоНУ1.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК КтВидСубконтоНУ2
		|		ПО (КтВидСубконтоНУ2.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ)
		|			И (КтВидСубконтоНУ2.НомерСтроки = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК КтВидСубконтоНУ3
		|		ПО (КтВидСубконтоНУ3.Ссылка = ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКтНУ)
		|			И (КтВидСубконтоНУ3.НомерСтроки = 3)";
		
	
	ВестиРеглУчетРасчетовСПерсоналомСводно = глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
	МассивСчетовРасчетовСПерсоналом = Новый Массив;
	Если ВестиРеглУчетРасчетовСПерсоналомСводно Тогда
		//Подготовка массива счетов учета расчетов с персоналом
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
        МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда);
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Налоговый.РасходыНаОплатуТрудаБудущихПериодов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("парамСчетаРасчетовСПерсоналом", МассивСчетовРасчетовСПерсоналом);

	Возврат Запрос.Выполнить();

КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не задана организация!", Отказ, Заголовок);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не задан период за который выполняется отражение начислений в бухгалтерском учете!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоДоходам, Отказ, ПроверятьСочетание, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоДоходам.НомерСтроки) + """ табл. части ""Проводки"": ";
	
	Если ВыборкаПоДоходам.НеЗаполненСчетДт Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет дебета!", Отказ, Заголовок);
		ПроверятьСочетание = Ложь;
	КонецЕсли;

	Если ВыборкаПоДоходам.НеЗаполненСчетКт Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет кредита!", Отказ, Заголовок);
		ПроверятьСочетание = Ложь;
	КонецЕсли;
	
	Если ВыборкаПоДоходам.НЕЗаполненоСубконтоДт1 Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение субконто 1 дебета """ + ВыборкаПоДоходам.ДтВидСубконто1 + """!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.НЕЗаполненоСубконтоДт2 Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение субконто 2 дебета """ + ВыборкаПоДоходам.ДтВидСубконто2 + """!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.НЕЗаполненоСубконтоДт3 Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение субконто 3 дебета """ + ВыборкаПоДоходам.ДтВидСубконто3 + """!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ПроверятьСочетание Тогда
		
		Если ВыборкаПоДоходам.НЕЗаполненоСубконтоДтНУ1 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение субконто 1 дебета НУ """ + ВыборкаПоДоходам.ДтВидСубконтоНУ1 + """!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоДоходам.НЕЗаполненоСубконтоДтНУ2 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение субконто 2 дебета НУ """ + ВыборкаПоДоходам.ДтВидСубконтоНУ2 + """!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоДоходам.НЕЗаполненоСубконтоДтНУ3 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение субконто 3 дебета НУ """ + ВыборкаПоДоходам.ДтВидСубконтоНУ3 + """!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщение = "";
	Если ПроверятьСочетание И Не КорректноеСочетаниеСчетов(ВыборкаПоДоходам,Сообщение) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + Сообщение, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеСтрокиДохода(ВыборкаПоДоходам, Отказ, ПроверятьСочетание, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоДоходам.НомерСтроки) +
	""" табл. части "+ВыборкаПоДоходам.ТипСтроки+": ";

	Если ВыборкаПоДоходам.НеЗаполненВидРасчета Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.НеЗаполненСотрудник Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.НеЗаполненСчетДт Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет дебета!", Отказ, Заголовок);
		ПроверятьСочетание = Ложь;
	КонецЕсли;
	
	Если ВыборкаПоДоходам.НеЗаполненСчетКт Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет кредита!", Отказ, Заголовок);
		ПроверятьСочетание = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.ДокументОснование) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан документ основание!", Отказ, Заголовок);
	КонецЕсли;
	
	Сообщение = "";
	Если ПроверятьСочетание И ВыборкаПоДоходам.ОтражаетсяНУ И Не КорректноеСочетаниеСчетов(ВыборкаПоДоходам,Сообщение) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + Сообщение, Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.ТипСтроки = "Основные начисления" Тогда
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияНачало) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияКонец) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияКонец) и ЗначениеЗаполнено(ВыборкаПоДоходам.ПериодДействияНачало) Тогда
			Если ВыборкаПоДоходам.ПериодДействияКонец < ВыборкаПоДоходам.ПериодДействияНачало Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания не должна быть меньше даты начала!", Отказ, Заголовок);
			ИначеЕсли НачалоМесяца(ВыборкаПоДоходам.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоДоходам.ПериодДействияНачало) Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоДоходам.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоОтражениюВУчете(ВыборкаПоДоходам, ТаблицаЗатрат, ОтражатьРазницы = Ложь)
	
	// проводка по бухгалтерскому регистру
	СтрокаДвижения = Движения.Хозрасчетный.Добавить();

	// Свойства
	СтрокаДвижения.Период = Дата;

	// Измерения
	СтрокаДвижения.Организация  = Организация;

	// бухучет
	СтрокаДвижения.СчетДт       = ВыборкаПоДоходам.СчетДт;
	СтрокаДвижения.СчетКт       = ВыборкаПоДоходам.СчетКт;
	СтрокаДвижения.СубконтоДт[ВыборкаПоДоходам.ДтВидСубконто1] = ВыборкаПоДоходам.СубконтоДт1;
	СтрокаДвижения.СубконтоДт[ВыборкаПоДоходам.ДтВидСубконто2] = ВыборкаПоДоходам.СубконтоДт2;
	СтрокаДвижения.СубконтоДт[ВыборкаПоДоходам.ДтВидСубконто3] = ВыборкаПоДоходам.СубконтоДт3;
	СтрокаДвижения.СубконтоКт[ВыборкаПоДоходам.КтВидСубконто1] = ВыборкаПоДоходам.СубконтоКт1;
	СтрокаДвижения.СубконтоКт[ВыборкаПоДоходам.КтВидСубконто2] = ВыборкаПоДоходам.СубконтоКт2;
 	СтрокаДвижения.СубконтоКт[ВыборкаПоДоходам.КтВидСубконто3] = ВыборкаПоДоходам.СубконтоКт3;	

	// ресурсы
	СтрокаДвижения.Сумма = ВыборкаПоДоходам.Сумма;
	
	     СтрокаДвижения.Содержание = ВыборкаПоДоходам.СчетКт.Наименование;
	
	// реквизиты
	СтрокаДвижения.НомерЖурнала  = "";
	
	СтрокаБУ = СтрокаДвижения;
	
	// Добавим строку в таблицу затрат.
	НоваяСтрока = ТаблицаЗатрат.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоДоходам);
	НоваяСтрока.СчетЗатрат = ВыборкаПоДоходам.СчетДт;
	НоваяСтрока.СуммаРегл = ВыборкаПоДоходам.Сумма;
	
	// проводка по налоговому учету по налогу на прибыль
	Если (Не ВыборкаПоДоходам.СчетДтНУ.Пустая() Или ВыборкаПоДоходам.СчетКт = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов) Тогда
		
		// Добавим данные по налоговому учету в таблицу затрат.
		НоваяСтрока.СчетЗатратНУ = ВыборкаПоДоходам.СчетДтНУ;
		НоваяСтрока.СуммаНал = ВыборкаПоДоходам.Сумма;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетДтНУ) Тогда
			
			СчетНУСоответствующийСчетуБУДт =НайтиСчетНУ(СтрокаБУ.СчетДт, ВыборкаПоДоходам.СубконтоДт1, ВыборкаПоДоходам.СубконтоДт2, ВыборкаПоДоходам.СубконтоДт3);
			
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУДт) Тогда
				Сообщить("Не найдено соответствие для счета БУ " +  СтрокаБУ.СчетДт + ", разницы между БУ и НУ не рассчитаны");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетКтНУ) Тогда
			
			СчетНУСоответствующийСчетуБУКт = НайтиСчетНУ(СтрокаБУ.СчетКт, ВыборкаПоДоходам.СубконтоКт1, ВыборкаПоДоходам.СубконтоКт2, ВыборкаПоДоходам.СубконтоКт3);
			
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУКт) Тогда
				Сообщить("Не найдено соответствие для счета БУ " +  СтрокаБУ.СчетКт + ", разницы между БУ и НУ не рассчитаны");
				Возврат;
			КонецЕсли;
	    КонецЕсли;

		СтрокаДвижения = Движения.Налоговый.Добавить();

		// Свойства
		СтрокаДвижения.Период = КонецМесяца(ПериодРегистрации);
		
		// Измерения
		СтрокаДвижения.Организация   = Организация;
		
		// налоговый учет
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетДтНУ) Тогда
			
			СтрокаДвижения.СчетДт = СчетНУСоответствующийСчетуБУДт;
			БухгалтерскийУчет.УстановитьСубконто(СчетНУСоответствующийСчетуБУДт, СтрокаДвижения.СубконтоДт, 1, ВыборкаПоДоходам.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(СчетНУСоответствующийСчетуБУДт, СтрокаДвижения.СубконтоДт, 2, ВыборкаПоДоходам.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(СчетНУСоответствующийСчетуБУДт, СтрокаДвижения.СубконтоДт, 3, ВыборкаПоДоходам.СубконтоДт3);
		Иначе
			СтрокаДвижения.СчетДт = ВыборкаПоДоходам.СчетДтНУ;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижения.СчетДт, СтрокаДвижения.СубконтоДт, 1, ВыборкаПоДоходам.СубконтоДтНУ1);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижения.СчетДт, СтрокаДвижения.СубконтоДт, 2, ВыборкаПоДоходам.СубконтоДтНУ2);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижения.СчетДт, СтрокаДвижения.СубконтоДт, 3, ВыборкаПоДоходам.СубконтоДтНУ3);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетКтНУ) Тогда
			
			СтрокаДвижения.СчетКт = СчетНУСоответствующийСчетуБУКт;
			БухгалтерскийУчет.УстановитьСубконто(СчетНУСоответствующийСчетуБУКт, СтрокаДвижения.СубконтоКт, 1, ВыборкаПоДоходам.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(СчетНУСоответствующийСчетуБУКт, СтрокаДвижения.СубконтоКт, 2, ВыборкаПоДоходам.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(СчетНУСоответствующийСчетуБУКт, СтрокаДвижения.СубконтоКт, 3, ВыборкаПоДоходам.СубконтоКт3);
		Иначе
			СтрокаДвижения.СчетКт = ВыборкаПоДоходам.СчетКтНУ;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижения.СчетКт, СтрокаДвижения.СубконтоКт, 1, ВыборкаПоДоходам.СубконтоКтНУ1);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижения.СчетКт, СтрокаДвижения.СубконтоКт, 2, ВыборкаПоДоходам.СубконтоКтНУ2);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижения.СчетКт, СтрокаДвижения.СубконтоКт, 3, ВыборкаПоДоходам.СубконтоКтНУ3);
		КонецЕсли;
		
		
		// ресурсы
	                                                                                  
		СтрокаДвижения.Сумма        = ВыборкаПоДоходам.Сумма;
	
	
	    СтрокаДвижения.Содержание = ВыборкаПоДоходам.СчетКт.Наименование;
	
		// реквизиты
		СтрокаДвижения.НомерЖурнала = "";
		
		НалоговыйУчет.ВидУчетаПоПБУ18(СтрокаДвижения);
				
		ДобавитьСтрокуВДвиженияПоОтражениюВУчетеРазниц(СтрокаБУ, СтрокаДвижения, НоваяСтрока, ОтражатьРазницы);
	
	КонецЕсли;
	
КонецПроцедуры  // ДобавитьСтрокуВДвиженияПоОтражениюВУчете

Процедура ДобавитьСтрокуВДвиженияПоОтражениюВУчетеРазниц(ВыборкаПоДоходамБУ, ВыборкаПоДоходамНУ, СтрокаРегистраНакопления, ОтражатьРазницы)
	
	Если ПериодРегистрации < '20100101' Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборкаПоДоходамБУ.СчетДт <> ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов 
	   И ВыборкаПоДоходамБУ.СчетКт <> ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов Тогда
	    // не отражаем разницы, не связанные с РБП
		Возврат;
	КонецЕсли;
	
	Если ВыборкаПоДоходамНУ.СчетДт = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД Тогда
		// не отражаем разницы, если это ЕНВД
    	Возврат;
	КонецЕсли;
	
	Содержание = ВыборкаПоДоходамБУ.Содержание;
	
	
	Если ВыборкаПоДоходамБУ.СчетДт = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов И
		(ВыборкаПоДоходамБУ.СубконтоДт.РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов.РБПНаПФР Или
		ВыборкаПоДоходамБУ.СубконтоДт.РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов.РБПНаСтраховыеВзносы Или
		ВыборкаПоДоходамБУ.СубконтоДт.РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов.РБПНаФСС) Тогда
		
		
		СчетНУСоответствующийСчетуБУ = НайтиСчетНУ(ВыборкаПоДоходамБУ.СчетДт);
		
		Если СчетНУСоответствующийСчетуБУ = ВыборкаПоДоходамНУ.СчетДт	Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  ВыборкаПоДоходамБУ.СчетДт + ", разницы между БУ и НУ не рассчитаны");
			Возврат;
		КонецЕсли;
		
		СтрокаРегистраНакопления.ПодразделениеОрганизации = ВыборкаПоДоходамНУ.СубконтоДт.Подразделения;
		СтрокаРегистраНакопления.НоменклатурнаяГруппа = ВыборкаПоДоходамНУ.СубконтоДт.НоменклатурныеГруппы;
		СтрокаРегистраНакопления.СтатьяЗатрат = ВыборкаПоДоходамНУ.СубконтоДт.СтатьиЗатрат;
		СтрокаРегистраНакопления.ОбъектСтроительства = ВыборкаПоДоходамНУ.СубконтоДт.ОбъектыСтроительства;
		
		Если НЕ ОтражатьРазницы Тогда
			Возврат;
		КонецЕсли;
		СтрокаРегистраНакопления.ВременнаяРазница = - СтрокаРегистраНакопления.Сумма;
		
		Строка = Движения.Налоговый.Добавить();
		
		// Свойства
		Строка.Период = КонецМесяца(ПериодРегистрации);
		
		// Измерения
		Строка.Организация   = Организация;
		Строка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
		
		Строка.СчетДт = СчетНУСоответствующийСчетуБУ;
		Для Каждого СтрокаСубконто Из  ВыборкаПоДоходамБУ.СубконтоДт Цикл
			
			Строка.СубконтоДт[СтрокаСубконто.Ключ] = СтрокаСубконто.Значение;
		КонецЦикла;
		
		// ресурсы
		Строка.Сумма        = ВыборкаПоДоходамБУ.Сумма;
		
		// реквизиты
		Строка.НомерЖурнала = "ЗП";
		
		// Содержание проводок
		Строка.Содержание = Содержание;
		
		Строка = Движения.Налоговый.Добавить();
		
		// Свойства
		Строка.Период = КонецМесяца(ПериодРегистрации);
		
		// Измерения
		Строка.Организация   = Организация;
		Строка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
		
		
		Строка.СчетДт = ВыборкаПоДоходамНУ.СчетДт;
		Для Каждого СтрокаСубконто Из  ВыборкаПоДоходамНУ.СубконтоДт Цикл
			
			Строка.СубконтоДт[СтрокаСубконто.Ключ] = СтрокаСубконто.Значение;
		КонецЦикла;
		
		// ресурсы
		Строка.Сумма        = -ВыборкаПоДоходамНУ.Сумма;
		
		// реквизиты
		Строка.НомерЖурнала = "ЗП";
		
		// Содержание проводок
		Строка.Содержание = Содержание;
		
		
	КонецЕсли;	
	//абс см №36170
	Если ВыборкаПоДоходамБУ.СчетКт = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов И
		(ВыборкаПоДоходамБУ.СубконтоКт.РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов.РБПНаПФР Или
		ВыборкаПоДоходамБУ.СубконтоКт.РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов.РБПНаСтраховыеВзносы Или
		ВыборкаПоДоходамБУ.СубконтоКт.РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов.РБПНаФСС) Тогда
		
		Если НЕ ОтражатьРазницы Тогда
			Движения.Налоговый.Удалить(ВыборкаПоДоходамНУ);
			Возврат;
		КонецЕсли;
		
		ВыборкаПоДоходамНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
		ВыборкаПоДоходамНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
		//СтрокаРегистраНакопления.ВременнаяРазница = СтрокаРегистраНакопления.Сумма;
		СтрокаРегистраНакопления.СуммаНал  = 0;
		СтрокаРегистраНакопления.СуммаБух  = СтрокаРегистраНакопления.СуммаРегл;
		СтрокаРегистраНакопления.СуммаРегл = 0;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРегистраНакопления.СчетЗатратНУ) Тогда
			СтрокаРегистраНакопления.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаРегистраНакопления.СчетЗатрат), Ложь, ПериодРегистрации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  // ДобавитьСтрокуВДвиженияПоОтражениюВУчетеРазниц

// Подбриает счет НУ по счету БУ виду затрат
// Параметры:
//	СчетБУ
//	Субконто1
//	Субконто2
//	Субконто3
//
Функция  НайтиСчетНУ(СчетБУ, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Субконто1) И ТипЗнч(Субконто1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто1.ВидРасходовНУ;
	ИначеЕсли НЕ ЗначениеЗаполнено(Субконто2) И ТипЗнч(Субконто2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто2.ВидРасходовНУ;
	ИначеЕсли НЕ ЗначениеЗаполнено(Субконто3) И ТипЗнч(Субконто3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто3.ВидРасходовНУ;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетБУ, ВидЗатратНУ), Ложь, ПериодРегистрации);
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетБУ), Ложь, ПериодРегистрации);
		КонецЕсли;
		
	Иначе
		СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетБУ), Ложь, ПериодРегистрации);
	КонецЕсли;
	
	Возврат СчетНУСоответствующийСчетуБУ;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//Исаенко С.П. 25.10.2018
	Если ttk_ИнтеграцияБП30Сервер.ПроверкаИспользованияКонстантыИнтеграцияБП30(Дата) Тогда
		Движения.абс_НезавершенноеПроизводствоБУ.Очистить();
		Движения.абс_НезавершенноеПроизводствоНУ.Очистить();
		Движения.Налоговый.Очистить();
		Движения.Хозрасчетный.Очистить();
		Возврат;
	КонецЕсли;
	//Исаенко С.П.
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// определим налоговый режим
	УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ПериодРегистрации, ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверятьСочетание = Истина;
	
	ВыборкаПоОтражениюВУчете = СформироватьЗапросПоОтражениюВУчете().Выбрать();
	ВалютаРеглУчета  = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Подготовим структуру таблицы для отражения затрат.
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	ПоддержкаПБУ18 = ?(УчетнаяПолитика = Неопределено, Ложь, УчетнаяПолитика.ПоддержкаПБУ18);	
	ОтражатьРазницы = (ПоддержкаПБУ18 И ПроверятьСочетание);
	
	Пока ВыборкаПоОтражениюВУчете.Следующий() Цикл

		ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоОтражениюВУчете, Отказ, ПроверятьСочетание);

		Если Не Отказ Тогда
			
			ДобавитьСтрокуВДвиженияПоОтражениюВУчете(ВыборкаПоОтражениюВУчете, ТаблицаЗатрат, ОтражатьРазницы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроведения

//АБС ВСТАВКА №000019958 НАЧАЛО
Процедура ПроверитьТипНеопределено(Строка,Счет,ТипСчета)
	
	Для Н = 0 по Счет.ВидыСубконто.Количество()-1 Цикл
		Если Строка["Субконто"+ТипСчета+(Н+1)] = Неопределено Тогда
			Строка["Субконто"+ТипСчета+(Н+1)] = Счет.ВидыСубконто[Н].ВидСубконто.ТипЗначения.ПривестиЗначение();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
//\\АБС ВСТАВКА №000019958 КОНЕЦ
	
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ОтражениеВУчете Цикл
		ПроверитьТипНеопределено(Строка,Строка.СчетДт,"Дт");
		ПроверитьТипНеопределено(Строка,Строка.СчетКт,"Кт");		
	КонецЦикла;	
		
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//АБС ВСТАВКА №30448 НАЧАЛО «29 декабря 2014 г.», Пополитов
 	ПериодРегистрации = Дата;
 	//\\АБС ВСТАВКА №30448 КОНЕЦ    	
	//Исаенко С.П. 23.10.2018
	Отказ = ПроведенВБухгалтерии и ttk_ИнтеграцияБП30Сервер.ПроверкаИспользованияКонстантыИнтеграцияБП30(Дата);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры

//АБС ОБНОВЛЕНИЕ
//АБС+
Функция АБС_ПолучитьОбособленноеДляФизЛица(ФизЛицо)
	 Запрос = Новый Запрос;
	 Запрос.Текст=
	 "ВЫБРАТЬ
	 |	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.ОбособленноеПодразделение КАК Обособленное
	 |ИЗ
	 |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	 |		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник
	 |ГДЕ
	 |	СотрудникиОрганизаций.Физлицо = &Физлицо
	 |	И (НЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.ОбособленноеПодразделение ЕСТЬ NULL )
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ОбособленноеПодразделение
	 |ИЗ
	 |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	 |		ПО (ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = СотрудникиОрганизаций.Ссылка)
	 |ГДЕ
	 |	СотрудникиОрганизаций.Физлицо = &Физлицо
	 |	И ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	 |	И (НЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ОбособленноеПодразделение ЕСТЬ NULL )";
	 Запрос.УстановитьПараметр("Дата",Новый Граница(КонецМесяца(ПериодРегистрации),ВидГраницы.Включая));
	 Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	 ТЗ = Запрос.Выполнить().Выгрузить();
	 Если ТЗ.Количество()=0 Тогда
		 Возврат Справочники.ОбособленныеПодразделения.ПустаяСсылка();
	 ИначеЕсли ТЗ.Количество()>=1 Тогда
		 Возврат ТЗ[0][0];
	 Иначе 	 Возврат Справочники.ОбособленныеПодразделения.ПустаяСсылка(); 		 
	 КонецЕсли; 
 КонецФункции		
//\\АБС ОБНОВЛЕНИЕ

