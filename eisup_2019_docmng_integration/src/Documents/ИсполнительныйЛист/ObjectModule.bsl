////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

#Если Клиент Тогда

// Формирует печатную форму по документу
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   сформированный табличный документ
//
Функция ПечатьКарточки()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, ИсполнительныйЛист.Физлицо.Наименование) КАК ФИОРаботника,
	|	ИсполнительныйЛист.Дата,
	|	ИсполнительныйЛист.Номер,
	|	ИсполнительныйЛист.Размер,
	|	ИсполнительныйЛист.Предел,
	|	ВЫБОР
	|		КОГДА ИсполнительныйЛист.СпособРасчетаИЛ = 1
	|			ТОГДА "" %""
	|		ИНАЧЕ "" руб.""
	|	КОНЕЦ КАК ПорядокРасчета,
	|	ИсполнительныйЛист.ВидИсполнительногоДокумента,
	|	ИсполнительныйЛист.РеквизитыИсполнительногоДокумента,
	|	ВЫРАЗИТЬ(ИсполнительныйЛист.Получатель.НаименованиеПолное КАК СТРОКА(300)) КАК Получатель,
	|	ЕСТЬNULL(ФактАдресФизЛица.Представление, ""<адрес не указан>"") КАК ФактАдресФизЛица,
	|	ЕСТЬNULL(ФактическийАдресПолучателя.Представление, ""<адрес не указан>"") КАК ФактическийАдресПолучателя
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, Физлицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ФактическийАдресПолучателя
	|		ПО ИсполнительныйЛист.Получатель = ФактическийАдресПолучателя.Объект
	|			И (ФактическийАдресПолучателя.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ФактическийАдресПолучателя.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ФактАдресФизЛица
	|		ПО ИсполнительныйЛист.Физлицо = ФактАдресФизЛица.Объект
	|			И (ФактАдресФизЛица.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ФактАдресФизЛица.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|ГДЕ
	|	ИсполнительныйЛист.Ссылка = &Ссылка";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИсполнительныйЛист_КарточкаУчета";
	
	Макет = ПолучитьМакет("Карточка");
	СекцияКарточка = Макет.ПолучитьОбласть("Карточка");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
    СекцияКарточка.Параметры.Заполнить(Выборка);
	СекцияКарточка.Параметры.Дата = Формат(СекцияКарточка.Параметры.Дата,"ДФ='ММММ гггг ""г.""'");
	СекцияКарточка.Параметры.Получатель = СокрЛП(СекцияКарточка.Параметры.Получатель);
	ТабДокумент.Вывести(СекцияКарточка);
	
	Возврат	ТабДокумент
	
КонецФункции // ПечатьКарточки()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Карточка" Тогда
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ПечатьКарточки(), КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (карточка учета)");
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Карточка", "Карточка учета");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсполнительныйЛист.Дата,
	               |	ИсполнительныйЛист.Организация,
	               |	ВЫБОР
	               |		КОГДА ИсполнительныйЛист.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	               |			ТОГДА ИсполнительныйЛист.Организация
	               |		ИНАЧЕ ИсполнительныйЛист.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ КАК ГоловнаяОрганизация,
	               |	ИсполнительныйЛист.Физлицо,
	               |	ИсполнительныйЛист.ДатаДействия,
	               |	ИсполнительныйЛист.ДатаОкончания,
	               |	ИсполнительныйЛист.Размер,
	               |	ИсполнительныйЛист.Предел,
	               |	ИсполнительныйЛист.УчитыватьБольничныеЛисты,
	               |	ИсполнительныйЛист.СпособРасчетаИЛ,
	               |	ИсполнительныйЛист.Получатель,
	               |	ИсполнительныйЛист.Ссылка,
	               |	ИсполнительныйЛист.ПроцентПочтовогоСбора,
	               |	ИсполнительныйЛист.СпособРасчетаПС,
	               |	ИсполнительныйЛист.Тариф
	               |ИЗ
	               |	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	               |ГДЕ
	               |	ИсполнительныйЛист.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Физлицо) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаДействия) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана дата действия удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	// Получатель
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Получатель) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан получатель!", Отказ, Заголовок);
	КонецЕсли;
	
	//Проверка почтового сбора
	Если ВыборкаПоШапкеДокумента.СпособРасчетаПС <> 1 Тогда
		Если ВыборкаПоШапкеДокумента.СпособРасчетаПС = 0 И ВыборкаПоШапкеДокумента.ПроцентПочтовогоСбора = 0 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не задан процент почтового сбора!"), Отказ, Заголовок);
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособРасчетаПС = 2 И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Тариф) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не задан тариф почтового сбора!"), Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента)

	// Движения регистра ПлановыеУдержанияРаботниковОрганизаций
	
	// Определим вид расчета
	Если ВыборкаПоШапкеДокумента.СпособРасчетаИЛ = 1 Тогда// Процентом
		
		Если ВыборкаПоШапкеДокумента.УчитыватьБольничныеЛисты Тогда
			Если ВыборкаПоШапкеДокумента.Предел = 0 Тогда
				ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом;
				
			Иначе
				ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела;
				
			КонецЕсли;
			
		Иначе // не учитываем БЛ
			Если ВыборкаПоШапкеДокумента.Предел = 0 Тогда
				ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ;
				
			Иначе
				ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе// Фикс суммой
		
		Если ВыборкаПоШапкеДокумента.Предел = 0 Тогда
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой;
			
		Иначе
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Движение = Движения.ПлановыеУдержанияРаботниковОрганизаций.Добавить();
	// свойства
	Движение.Период					= ВыборкаПоШапкеДокумента.ДатаДействия;

	// измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.ВидРасчета				= ВидРасчета;
	
	Движение.ДокументОснование		= ВыборкаПоШапкеДокумента.Ссылка;

	// ресурсы
	Движение.Действие				= Перечисления.ВидыДействияСНачислением.Начать;
	Движение.Показатель1			= ВыборкаПоШапкеДокумента.Размер;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		Движение.ПериодЗавершения	= ВыборкаПоШапкеДокумента.ДатаОкончания + 86400;
		Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;
		// не заполняются
		//СпособОтраженияВБухучетеЗавершения
		//РазмерЗавершения
		//ВалютаЗавершения
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.СпособРасчетаПС <> 1 Тогда
		
		Движение = Движения.ПлановыеУдержанияРаботниковОрганизаций.Добавить();
		// свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.ДатаДействия;

		// измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.ВидРасчета				= ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСборПоИЛ;
		
		Движение.ДокументОснование		= ВыборкаПоШапкеДокумента.Ссылка;

		// ресурсы
		Движение.Действие				= Перечисления.ВидыДействияСНачислением.Начать;
		Если ВыборкаПоШапкеДокумента.СпособРасчетаПС = 0 Тогда
			Движение.Показатель1			= ВыборкаПоШапкеДокумента.ПроцентПочтовогоСбора;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
			Движение.ПериодЗавершения	= ВыборкаПоШапкеДокумента.ДатаОкончания + 86400;
			Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;
			// не заполняются
			//СпособОтраженияВБухучетеЗавершения
			//РазмерЗавершения
			//ВалютаЗавершения
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

