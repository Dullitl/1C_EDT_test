////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда		
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	ЭтоНовый = (Параметры.Ключ.Пустая() И Параметры.ЗначениеКопирования.Пустая());
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();	
	
КонецПроцедуры // ПослеЗаписиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "СоответствиеАналитикБУиУУ"

&НаКлиенте
Процедура СоответствиеАналитикБУиУУСчетХозрасчетныйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеАналитикБУиУУ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или КэшированныеДанные.СчетХозрасчетный = ТекущиеДанные.СчетХозрасчетный Тогда		
		Возврат;                           		
	КонецЕсли;
		
	ДанныеСтроки = Новый Структура("СчетХозрасчетный, 
							|СубконтоХозр1, 
							|СубконтоХозр2,
							|СубконтоХозр3,
							|СубконтоХозр1Доступность,
							|СубконтоХозр2Доступность,
							|СубконтоХозр3Доступность");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные); 
	УстановитьОграниченияТиповСубконто(ЭтаФорма, ДанныеСтроки, Истина);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеАналитикБУиУУПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СоответствиеАналитикБУиУУ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;                           		
	КонецЕсли;
	
	КэшированныеДанные.СчетХозрасчетный = ТекущиеДанные.СчетХозрасчетный;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеАналитикБУиУУПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СоответствиеАналитикБУиУУ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;                           		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Учитывается = Истина;	
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура("СчетХозрасчетный, 
							|СубконтоХозр1, 
							|СубконтоХозр2,
							|СубконтоХозр3,
							|СубконтоХозр1Доступность,
							|СубконтоХозр2Доступность,
							|СубконтоХозр3Доступность");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные); 
	УстановитьОграниченияТиповСубконто(ЭтаФорма, ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ЗаменяемыеКлючиАналитик"

&НаКлиенте
Процедура ЗаменяемыеКлючиАналитикВидАналитикиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаменяемыеКлючиАналитик.ТекущиеДанные;
	ДанныеСтроки = 
			Новый Структура("ВидАналитики, ЗаменяемаяАналитика, ЗамещающаяАналитика");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	УстановитьОграниченияТиповАналитик(ЭтаФорма, ДанныеСтроки, Истина);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеКлючиАналитикПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗаменяемыеКлючиАналитик.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;                           		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Учитывается = Истина;	
	КонецЕсли;
	
	МассивПараметровВыбора = Новый Массив;
	ВидАналитики = ТекущиеДанные.ВидАналитики;
	Если ВидАналитики = "Счет" Тогда
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		
	КонецЕсли;
	
	ЭтаФорма.Элементы["ЗаменяемыеКлючиАналитикЗаменяемаяАналитика"].ПараметрыВыбора = 
		Новый ФиксированныйМассив(МассивПараметровВыбора);
	ЭтаФорма.Элементы["ЗаменяемыеКлючиАналитикЗамещающаяАналитика"].ПараметрыВыбора = 
		Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ДЛЯ ЗаменяемыеКлючиАналитик

&НаКлиенте
Процедура ЗаменяемыеКлючиАналитикСнятьФлажки(Команда)
	
	УстановитьСнятьФлажки("СоответствиеАналитикБУиУУ", Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеКлючиАналитикУстановитьФлаг(Команда)

	УстановитьСнятьФлажки("СоответствиеАналитикБУиУУ", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеКлючиАналитикЗаполнить(Команда)
	
	Если Объект.ЗаменяемыеКлючиАналитик.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК  Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаменяемыеКлючиАналитикЗаполнитьНаСервере();

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ДЛЯ СоответствиеАналитикБУиУУ

&НаКлиенте
Процедура СоответствиеАналитикБУиУУСнятьФлажки(Команда)
	
	УстановитьСнятьФлажки("СоответствиеАналитикБУиУУ", Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеАналитикБУиУУУстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки("СоответствиеАналитикБУиУУ", Истина);		
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеАналитикБУиУУЗаполнить(Команда)
	
	Если Объект.СоответствиеАналитикБУиУУ.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК  Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	СоответствиеАналитикБУиУУЗаполнитьНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ И ПОДВАЛА

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуРедактированияМногострочногоТекста(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность, 
		"Комментарий");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КэшированныеДанные = Новый Структура;
	КэшированныеДанные.Вставить("СчетХозрасчетный", Неопределено);
	
	Для Каждого СтрокаТабЧасти Из Объект.СоответствиеАналитикБУиУУ Цикл 
		
		ДанныеСтроки = Новый Структура("СчетХозрасчетный, 
							|СубконтоХозр1, 
							|СубконтоХозр2,
							|СубконтоХозр3,
							|СубконтоХозр1Доступность,
							|СубконтоХозр2Доступность,
							|СубконтоХозр3Доступность");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабЧасти);
		УстановитьОграниченияТиповСубконто(ЭтаФорма, ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, ДанныеСтроки); 
		
	КонецЦикла;
	
	Для Каждого СтрокаТабЧасти Из Объект.ЗаменяемыеКлючиАналитик Цикл 
		
		ДанныеСтроки = 
			Новый Структура("ВидАналитики, ЗаменяемаяАналитика, ЗамещающаяАналитика");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабЧасти);
		УстановитьОграниченияТиповАналитик(ЭтаФорма, ДанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьФормуНаСервере()

&НаСервере
Процедура УстановитьСнятьФлажки(ИмяТабЧасти, Установить)
	
	ТабЧасть = Объект[ИмяТабЧасти];
	Для Каждого СтрокаТабЧасти Из ТабЧасть Цикл
		СтрокаТабЧасти.Учитывается = Установить;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияМногострочногоТекста(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, 
		Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ТекстВведен = ВвестиСтроку(МногострочныйТекст,,, Истина);
	Иначе
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
	Если Не ТекстВведен Тогда
		Возврат;
	КонецЕсли;
		
	РезультатРедактирования = МногострочныйТекст;
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграниченияТиповСубконто(Форма, ДанныеСтроки, ПривестиЗначение = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СоответствиеАналитикБУиУУСубконтоХозр1",
		"СоответствиеАналитикБУиУУСубконтоХозр2",
		"СоответствиеАналитикБУиУУСубконтоХозр3");
	
	ПриВыбореСчета(ДанныеСтроки, Форма, ПоляФормы, ПривестиЗначение);

КонецПроцедуры // УстановитьОграниченияТиповСубконто()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграниченияТиповАналитик(Форма, ДанныеСтроки, ПривестиЗначение = Ложь)

	ВидАналитики = ДанныеСтроки.ВидАналитики;
	Если ВидАналитики = "Счет" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный")
	ИначеЕсли ВидАналитики = "ЦФО" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Подразделения")
	ИначеЕсли ВидАналитики = "ЦФУ" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.абс_ЦФУ")
	КонецЕсли;
	
	Форма.Элементы["ЗаменяемыеКлючиАналитикЗаменяемаяАналитика"].ОграничениеТипа = ОписаниеТипов;
	Если ПривестиЗначение Тогда
		ДанныеСтроки["ЗаменяемаяАналитика"] = 
				ОписаниеТипов.ПривестиЗначение(ДанныеСтроки["ЗаменяемаяАналитика"]);
	КонецЕсли;
	Форма.Элементы["ЗаменяемыеКлючиАналитикЗамещающаяАналитика"].ОграничениеТипа = ОписаниеТипов;
	Если ПривестиЗначение Тогда
		ДанныеСтроки["ЗамещающаяАналитика"] = 
				ОписаниеТипов.ПривестиЗначение(ДанныеСтроки["ЗамещающаяАналитика"]);
	КонецЕсли;
			
КонецПроцедуры // УстановитьОграниченияТиповАналитик()

// Процедура установки типа и доступности субконто в зависимости от выбранного счета.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПриВыбореСчета(ДанныеСтроки, Форма, ПоляФормы, ПривестиЗначение) Экспорт
	
	ДанныеСчета = ПолучитьСвойстваСчета(ДанныеСтроки.СчетХозрасчетный);
	
	Для Индекс = 1 По 3 Цикл
		
		Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
			
			Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
				Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			КонецЕсли;
			
			ДанныеСтроки["СубконтоХозр" + Индекс + "Доступность"] = Истина; 
			
			Если ПривестиЗначение Тогда
				ДанныеСтроки["СубконтоХозр" + Индекс] = 
					ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(ДанныеСтроки["СубконтоХозр" + Индекс]);
			КонецЕсли;
			
		Иначе
			
			ДанныеСтроки["СубконтоХозр" + Индекс + "Доступность"] = Ложь;
			
			Если ПривестиЗначение Тогда
				ДанныеСтроки["СубконтоХозр" + Индекс] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Определение структуры свойств счета.
//
// Параметры:
//  Счет - ПланСчетовСсылка.Хозрасчетный
//
// Возвращаемое значение:
//  Структура                
//
&НаСервереБезКонтекста
Функция ПолучитьСвойстваСчета(Счет) Экспорт

	ДанныеСчета = Новый Структура;

	Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		
		ДанныеСчета.Вставить("Ссылка"                         , Счет.Ссылка);
		ДанныеСчета.Вставить("КоличествоСубконто"             , Счет.ВидыСубконто.Количество());

		МаксКоличествоСубконто = 3;
		Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
			
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения);
			
		КонецЦикла;
		
	Иначе
		
		ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
		
	КонецЕсли;

	Возврат ДанныеСчета;

КонецФункции

&НаСервере
Функция СоответствиеАналитикБУиУУЗаполнитьНаСервере()
	
	Объект.СоответствиеАналитикБУиУУ.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.kwr_СоответствиеАналитикБУиУУ.СрезПоследних(&ДатаСреза) КАК kwr_СоответствиеАналитикБУиУУ
	|ГДЕ
	|	kwr_СоответствиеАналитикБУиУУ.Учитывается";
	Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	
	Объект.СоответствиеАналитикБУиУУ.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПодготовитьФормуНаСервере();
	
	Модифицированность = Истина;
	
КонецФункции

&НаСервере
Функция ЗаменяемыеКлючиАналитикЗаполнитьНаСервере()
	
	Объект.ЗаменяемыеКлючиАналитик.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(kwr_ЗаменяемыеКлючиАналитик.ЗаменяемаяАналитика) = ТИП(Справочник.абс_ЦФУ)
	               |			ТОГДА ""ЦФУ""
	               |		ИНАЧЕ ""Счет""
	               |	КОНЕЦ КАК ВидАналитики,
	               |	kwr_ЗаменяемыеКлючиАналитик.ЗаменяемаяАналитика,
	               |	kwr_ЗаменяемыеКлючиАналитик.ЗамещающаяАналитика
	               |ИЗ
	               |	РегистрСведений.kwr_ЗаменяемыеКлючиАналитик.СрезПоследних(&ДатаСреза, ) КАК kwr_ЗаменяемыеКлючиАналитик
	               |ГДЕ
	               |	kwr_ЗаменяемыеКлючиАналитик.Учитывается";
	Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	
	Объект.ЗаменяемыеКлючиАналитик.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПодготовитьФормуНаСервере();
	
	Модифицированность = Истина;
	
КонецФункции

&НаСервере
Процедура СоответствиеУслугиНГЗаполнитьНаСервере()
	
	
	Объект.СоответствиеАналитикБУиУУ.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.ttk_СоответствиеУслугПоКатегориям.СрезПоследних(&ДатаСреза, ) КАК ttk_СоответствиеУслугПоКатегориямСрезПоследних
	|ГДЕ
	|	ttk_СоответствиеУслугПоКатегориямСрезПоследних.Учитывается";
	Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	
	Объект.СоответствиеУслугПоКатегориям.Загрузить(Запрос.Выполнить().Выгрузить());	
		
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеУслугиНГЗаполнить(Команда)
	
	Если Объект.СоответствиеУслугПоКатегориям.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК  Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	СоответствиеУслугиНГЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЭтоНовый Тогда
		ОбновитьВидимость();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимость()
	
	УстановитьТолькоПросмотрВсемЭлементам(ПолучитьПраваНаДокумент());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотрВсемЭлементам(мТолькоПросмотр = Истина)

	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ДекорацияФормы") Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Элемент.ТолькоПросмотр = мТолькоПросмотр;
		Исключение
			Элемент.Доступность = Не мТолькоПросмотр;						
		КонецПопытки;
	КонецЦикла;
	
	Элементы.Ответственный.ТолькоПросмотр = мТолькоПросмотр;
	Элементы.Комментарий.ТолькоПросмотр = мТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПраваНаДокумент()
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Исполнитель = &Исполнитель
	|	И РолиИИсполнители.Роль = &Роль");
	Запрос.УстановитьПараметр("Роль",Справочники.РолиИсполнителей.УстановкаСоответствияАналитикВыручки);
	Запрос.УстановитьПараметр("Исполнитель",ПараметрыСеанса.ТекущийПользователь);
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат НЕ Результат.Следующий();
	
	//глЗначениеПеременной("глТекущийПользователь")
КонецФункции
