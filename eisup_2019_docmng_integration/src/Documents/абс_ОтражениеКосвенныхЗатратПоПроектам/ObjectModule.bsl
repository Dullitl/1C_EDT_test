
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности выбранных правил закрытия
	// Они должны быть с признаком "Проектный учет" и счет = 25, 26, 44
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ОтражениеКосвенныхЗатратПоПроектамПравилаЗакрытия.Правило,
	|	абс_ОтражениеКосвенныхЗатратПоПроектамПравилаЗакрытия.НомерСтроки
	|ИЗ
	|	Документ.абс_ОтражениеКосвенныхЗатратПоПроектам.ПравилаЗакрытия КАК абс_ОтражениеКосвенныхЗатратПоПроектамПравилаЗакрытия
	|ГДЕ
	|	абс_ОтражениеКосвенныхЗатратПоПроектамПравилаЗакрытия.Ссылка = &Ссылка
	|	И (НЕ абс_ОтражениеКосвенныхЗатратПоПроектамПравилаЗакрытия.Правило.Счет В ИЕРАРХИИ (&СписокСчетов)
	|			ИЛИ НЕ абс_ОтражениеКосвенныхЗатратПоПроектамПравилаЗакрытия.Правило.абс_ПроектныйУчет)";
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Сообщить("В документе в табличной части ""Правила закрытия"" используются некорректные правила:" + Символы.ПС);
		Отказ = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить(""+Выборка.НомерСтроки + " " + Выборка.Правило);
		КонецЦикла;
	КонецЕсли;	
	
	// Проверим наличие документов за тот же период с той же организацией и ЦФО
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ОтражениеКосвенныхЗатратПоПроектам.Ссылка
	|ИЗ
	|	Документ.абс_ОтражениеКосвенныхЗатратПоПроектам КАК абс_ОтражениеКосвенныхЗатратПоПроектам
	|ГДЕ
	|	абс_ОтражениеКосвенныхЗатратПоПроектам.Ссылка <> &Ссылка
	|	И абс_ОтражениеКосвенныхЗатратПоПроектам.Организация = &Организация
	|	И абс_ОтражениеКосвенныхЗатратПоПроектам.ЦФО = &ЦФО
	|	И НАЧАЛОПЕРИОДА(абс_ОтражениеКосвенныхЗатратПоПроектам.Дата, МЕСЯЦ) = &Дата";
	
	ЗАпрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Сообщить("Существует документ(ы), введенные в том же периоде по таким же Организации и ЦФО, что и текущий документ!", СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижения() Экспорт
	
	УдалитьДвижения();
	СтруктураДвижений = СформироватьСтруктуруДвижений();

	Для каждого СтрПравило из ПравилаЗакрытия Цикл
		Попытка
			Справочники.абс_ПравилаЗакрытияСчетов.СформироватьПроводки(СтрПравило.Правило, СтруктураДвижений);		

		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка в правиле "+СтрПравило.Правило+": 
			| "+ОписаниеОшибки());

		КонецПопытки;
	КонецЦикла;
	
	Для каждого ЭлСтруктуры из СтруктураДвижений Цикл
		Если ЭлСтруктуры.Ключ = "Период" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлСтруктуры.Ключ = "Организация" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлСтруктуры.Ключ = "ПараметрыДокументаДляЗапроса" Тогда
			Продолжить;
		КонецЕсли;
		
		Движения[ЭлСтруктуры.Ключ].Загрузить(ЭлСтруктуры.Значение);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура УдалитьДвижения()
	
	Движения.ОборотыБюджетов.Прочитать();
	
	Количество = Движения.ОборотыБюджетов.Количество();

	Если Количество > 0 Тогда
        Движения.ОборотыБюджетов.Очистить();
		Движения.ОборотыБюджетов.Записать();
    КонецЕсли;
    	
КонецПроцедуры

Функция СформироватьСтруктуруДвижений() Экспорт
	
	СтруктураДвижений = Новый Структура;
	Для каждого Движение Из Метаданные().Движения Цикл
		Движения[Движение.Имя].Очистить();
		СтруктураДвижений.Вставить(Движение.Имя, Движения[Движение.Имя].Выгрузить());
	КонецЦикла;
	
	СтруктураДвижений.Вставить("Период", КонецМесяца(Дата));
	СтруктураДвижений.Вставить("Организация",Организация);
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("НазваниеПараметра");
	ТаблицаПараметров.Колонки.Добавить("Параметр");
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.НазваниеПараметра = "ЦФО";
	НоваяСтрока.Параметр = ЦФО;
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.НазваниеПараметра = "ЦФУ";
	НоваяСтрока.Параметр = ЦФУ;
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.НазваниеПараметра = "ОтборПоЦФО";
	НоваяСтрока.Параметр = ЗначениеЗаполнено(ЦФО);
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.НазваниеПараметра = "ОтборПоЦФУ";
	НоваяСтрока.Параметр = ЗначениеЗаполнено(ЦФУ);
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.НазваниеПараметра = "Сценарий";
	НоваяСтрока.Параметр = абс_Бюджетирование.ПолучитьСтруктуСценариевПоОрганизации(Организация).СценарийФакт;
	
	СтруктураДвижений.Вставить("ПараметрыДокументаДляЗапроса", ТаблицаПараметров);
		
	Возврат СтруктураДвижений;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		//запись помеченного на удаление документа с активными записями
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает/снимает признак активности движений документа
//
Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	Для Каждого Движение Из Движения Цикл   
		Движение.Прочитать();
		Для Каждого Строка Из Движение Цикл
			Строка.Активность = ФлагАктивности;
		КонецЦикла;
		Движение.Записать();
	КонецЦикла;
	
КонецПроцедуры // УстановитьАктивностьДвижений()

