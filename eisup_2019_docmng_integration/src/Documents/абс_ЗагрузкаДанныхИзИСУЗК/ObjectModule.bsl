Функция СоздатьФизЛицо(Код,Фамилия,Имя,Отчество,ДатаРождения) Экспорт
	
	СтруктураВозврата = Новый Структура("ФизЛицо,Описание");
	СтруктураВозврата.Вставить("Описание","");
	Описание = "";
	ФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("абс_КодИСУЗК", Код);
	ФИО = Фамилия+" "+Имя+" "+Отчество;
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		//АБС Заявка 9266 Начало
		Если Найти(""+ФизЛицо,Имя)>0 И Найти(""+ФизЛицо,Отчество)>0 И Найти(""+ФизЛицо,Фамилия)>0 Тогда
			
			СтруктураВозврата.Вставить("ФизЛицо", ФизЛицо);
			СтруктураВозврата.Вставить("Описание", "Физ. Лицо найдено "+ФизЛицо);
			
		Иначе  //АБС Заявка 9266 Конец
			//Требуется обновить ФИО и сотрудника
			НаборЗаписей = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизЛицо.Установить(ФизЛицо.Ссылка);
			НаборЗаписей.Прочитать();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизЛицо = ФизЛицо.Ссылка;
			НоваяЗапись.Фамилия = Фамилия;
			НоваяЗапись.Период = ТекущаяДата();
			НоваяЗапись.Имя = Имя;
			НоваяЗапись.Отчество = Отчество;
			НаборЗаписей.Записать(Истина);
			Об = ФизЛицо.ПолучитьОбъект();
			Об.Наименование = ФИО;
			Об.ОбменДанными.Загрузка = Истина;
			Об.Записать();
			СтруктураВозврата.Вставить("Описание","Изменены ФИО физ.лица "+ФизЛицо+" ");
		КонецЕсли;	
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФИОФизЛицСрезПоследних.ФизЛицо
		               |ИЗ
		               |	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
		               |ГДЕ
		               |	ФИОФизЛицСрезПоследних.Фамилия = &Фамилия
		               |	И ФИОФизЛицСрезПоследних.Имя = &Имя
		               |	И ФИОФизЛицСрезПоследних.Отчество = &Отчество
		               |	И ФИОФизЛицСрезПоследних.ФизЛицо.абс_КодИСУЗК = &Код";
		Запрос.УстановитьПараметр("Фамилия",Фамилия);
		Запрос.УстановитьПараметр("Имя",Имя);
		Запрос.УстановитьПараметр("Отчество",Отчество);
		Запрос.УстановитьПараметр("Код",СокрЛП(Код));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Вставить("ФизЛицо",Выборка.ФизЛицо);
			СтруктураВозврата.Вставить("Описание","");
		Иначе
			НовыйФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
			НовыйФЛ.абс_КодИСУЗК = СокрЛП(Код);
			НовыйФЛ.ДатаРождения = ДатаРождения;
			НовыйФЛ.Наименование = Фамилия+" "+Имя+" "+Отчество;
			НовыйФЛ.УстановитьНовыйКод();
			НовыйФЛ.Записать();
			
			НайденноеФизЛицо = НовыйФЛ.Ссылка;
			НаборЗаписей = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизЛицо.Установить(НайденноеФизЛицо);
			НаборЗаписей.Прочитать();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизЛицо = НайденноеФизЛицо;
			НоваяЗапись.Фамилия = Фамилия;
			НоваяЗапись.Период = '198001010000';
			НоваяЗапись.Имя = Имя;
			НоваяЗапись.Отчество = Отчество;
			НаборЗаписей.Записать(Истина);
			СтруктураВозврата.Вставить("ФизЛицо",НайденноефизЛицо);
			СтруктураВозврата.Вставить("Описание","#Создано физ. лицо "+НайденноеФизЛицо+" с кодом ИСУЗК "+Код+" под пользователем "+ГлЗначениеПеременной("ГлТекущийПользователь")+" время создания "+ТекущаяДата()+""+Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

Функция СоздатьПодразделение(СтрокаДанных) Экспорт
	
	СтруктураВозврата = Новый Структура("Подразделение,Описание");
	СтруктураВозврата.Вставить("Подразделение",Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	СтруктураВозврата.Вставить("Описание","");
	
	Если ЗначениеЗаполнено(СтрокаДанных.КодРодителя) Тогда
		Родитель = Справочники.ПодразделенияОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", СтрокаДанных.КодРодителя, , Организация);
		Если Родитель.Пустая() Тогда
			СтруктураВозврата.Описание = "Не найдено подразделение с кодом ИСУЗК "+СтрокаДанных.КодРодителя+", которое указано в качестве родителя";
			Возврат СтруктураВозврата;
		КонецЕсли;
	Иначе
		Родитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", СтрокаДанных.Код, , Организация);
	
	Если Не ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
		
		НовоеПодразделение = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		НовоеПодразделение.абс_КодИСУЗК = СокрЛП(СтрокаДанных.Код);
		НовоеПодразделение.Владелец = Организация;
		НовоеПодразделение.Наименование = СтрокаДанных.Наименование;
		НовоеПодразделение.Родитель = Родитель;
		НовоеПодразделение.ОбменДанными.Загрузка = Истина;
		НовоеПодразделение.абс_Используется = СтрокаДанных.Используется;
		НовоеПодразделение.УстановитьНовыйКод();
		НовоеПодразделение.Записать();
		СтруктураВозврата.Вставить("Описание","#Создано подразделение "+НовоеПодразделение.Ссылка+" с кодом ИСУЗК "+СтрокаДанных.Код+" под пользователем "+ГлЗначениеПеременной("ГлТекущийПользователь")+" время создания "+ТекущаяДата());
		Подразделение = НовоеПодразделение.Ссылка;
		СтруктураВозврата.Вставить("Подразделение",Подразделение);
		
	Иначе 
		Если ЗначениеЗаполнено(Подразделение) Тогда
			СтруктураВозврата.Вставить("Подразделение",Подразделение);
		КонецЕсли;
		Если Подразделение.Родитель <> Родитель Тогда
			СтруктураВозврата.Описание = "Код ИСУЗК родителя найденного подразделения не соответствует загруженному";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СоздатьСотрудника(СтрокаТабличнойЧасти) Экспорт
	
	СтруктураВозврата = Новый Структура("Сотрудник,Описание");
	СтруктураВозврата.Вставить("Описание","");
	СтруктураВозврата.Вставить("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Должность) Тогда
		СтрокаТабличнойЧасти.Должность = СоздатьДолжность(СтрокаТабличнойЧасти.КодДолжности, СтрокаТабличнойЧасти.НаименованиеДолжности);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ФизЛицо) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Подразделение)  Тогда
		
		НовыйСотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
		НовыйСотрудник.Актуальность = Истина;
		НовыйСотрудник.Физлицо = СтрокаТабличнойЧасти.ФизЛицо;
		НовыйСотрудник.абс_КодИСУЗК = СокрЛП(СтрокаТабличнойЧасти.Код);
		НовыйСотрудник.Наименование = ""+?(ПустаяСтрока(СтрокаТабличнойЧасти.ФИО), СтрокаТабличнойЧасти.ФизЛицо.Наименование, СтрокаТабличнойЧасти.ФИО);
		НовыйСотрудник.ДатаПриемаНаРаботу = СтрокаТабличнойЧасти.ДатаПриема;
		НовыйСотрудник.ДатаУвольнения = СтрокаТабличнойЧасти.ДатаУвольнения;
		НовыйСотрудник.ПодразделениеОрганизации = СтрокаТабличнойЧасти.Подразделение;
		НовыйСотрудник.Должность = СтрокаТабличнойЧасти.Должность;
		НовыйСотрудник.ОбособленноеПодразделение = СтрокаТабличнойЧасти.Подразделение.Владелец;
		НовыйСотрудник.Организация = Организация;
		НовыйСотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
		НовыйСотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
		НовыйСотрудник.УстановитьНовыйКод();
		НовыйСотрудник.Записать();
		СтруктураВозврата.Вставить("Сотрудник",НовыйСотрудник.Ссылка);
		СтруктураВозврата.Вставить("Описание","#Создан сотрудник "+НовыйСотрудник.Ссылка+" с кодом "+СтрокаТабличнойЧасти.Код+" под пользователем "+ГлЗначениеПеременной("ГлТекущийПользователь")+" время создания "+ТекущаяДата()+""+Символы.ПС);
		СформироватьПриемНаРаботу(НовыйСотрудник.Ссылка,СтрокаТабличнойЧасти.Подразделение,СтрокаТабличнойЧасти.Должность,Неопределено);
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
КонецФункции

Функция СоздатьДолжность(Код, Наименование, Обновлять = Ложь)
	
	Должность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Наименование,Истина);
	
	Если Не ЗначениеЗаполнено(Должность) Тогда
		НоваяДолжность = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
		НоваяДолжность.Наименование = Наименование;
		НоваяДолжность.Код = СокрЛП(Код);
		НоваяДолжность.ОбменДанными.Загрузка = Истина;
		НоваяДолжность.Записать();
		Должность = НоваяДолжность.Ссылка;
	КонецЕсли;
	
	Возврат Должность.Ссылка;
	
КонецФункции

Процедура СоздатьОбновитьДолжности() Экспорт
	
	ТабДолжностей = Сотрудники.Выгрузить(, "Должность,КодДолжности,НаименованиеДолжности");
	
	ТабДолжностей.Свернуть("Должность,КодДолжности,НаименованиеДолжности");
	
	Для Каждого СтрДолжность Из ТабДолжностей Цикл
		
		СтрДолжность.Должность = СоздатьДолжность(СтрДолжность.КодДолжности, СтрДолжность.НаименованиеДолжности, Ложь);
		
		СтрокиСотрПоДолжности = Сотрудники.НайтиСтроки(Новый Структура("КодДолжности", СтрДолжность.КодДолжности));
		
		Для Каждого СтрСотрПоДолжности Из СтрокиСотрПоДолжности Цикл
			
			СтрСотрПоДолжности.Должность = СтрДолжность.Должность;
					
		КонецЦикла;
	КонецЦикла;
		        
КонецПроцедуры

Процедура СформироватьПриемНаРаботу(Сотрудник,Подразделение,Должность,ТЗСотрудники) Экспорт
	
	Если ТЗСотрудники<>Неопределено Тогда
		СтрокаСотрудника = ТЗСотрудники.Найти(Сотрудник,"Сотрудник");
	Иначе
		СтрокаСотрудника = Неопределено;
	КонецЕсли;
	
	Если СтрокаСотрудника<>Неопределено Тогда
		//Проверяем подразделение в документе и в приеме, если отличаются, формируем кадровое перемещение
		мСтароеПодразделение = СтрокаСотрудника.ПодразделениеОрганизации;
		мСтараяДолжность  = СтрокаСотрудника.Должность;
		ИзменилосьПодразделение = Ложь;
		ИзмениласьДолжность = Ложь;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Если Подразделение<>СтрокаСотрудника.ПодразделениеОрганизации Тогда
				ИзменилосьПодразделение = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Должность) Тогда
			Если Должность<>СтрокаСотрудника.Должность Тогда
				ИзмениласьДолжность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Если ИзменилосьПодразделение ИЛИ ИзмениласьДолжность Тогда
				Док = Документы.КадровоеПеремещениеОрганизаций.СоздатьДокумент();
				Док.Дата = ТекущаяДата();
				Док.Организация = Подразделение.Владелец;
				СтрокаФЛ = Док.ФизическиеЛица.Добавить();
				СтрокаФЛ.ФизическоеЛицо = Сотрудник.ФизЛицо;
				СтрокаРаботника = Док.РаботникиОрганизации.Добавить();
				СтрокаРаботника.Сотрудник = Сотрудник;
				СтрокаРаботника.ФизЛицо  = Сотрудник.ФизЛицо;
				СтрокаРаботника.ЗанимаемыхСтавок=1;
				СтрокаРаботника.ДатаНачала = НачалоДня(ТекущаяДата());
				СтрокаРаботника.ГрафикРаботы =Справочники.ГрафикиРаботы.НайтиПоНаименованию("Пятидневка");
				Если  ИзмениласьДолжность Тогда
					СтрокаРаботника.Должность =Должность;  
					СтрокаСотрудника.Должность =Должность;
				Иначе
					СтрокаРаботника.Должность =СтрокаСотрудника.Должность;
				КонецЕсли;
				Если  ИзменилосьПодразделение Тогда
					СтрокаРаботника.ПодразделениеОрганизации =Подразделение;
					СтрокаСотрудника.ПодразделениеОрганизации =Подразделение;
				Иначе
					СтрокаРаботника.ПодразделениеОрганизации= СтрокаСотрудника.ПодразделениеОрганизации;
				КонецЕсли;
				Попытка
					Док.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
				Сообщить("Записан документ "+Док.Ссылка);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НовыйПрием = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();
		НовыйПрием.Дата = ТекущаяДата();
		НовыйПрием.Организация = Сотрудник.Организация;
		НоваяСтрока = НовыйПрием.РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ФизЛицо = Сотрудник.ФизЛицо;
		НоваяСтрока.ГрафикРаботы = Справочники.ГрафикиРаботы.НайтиПоНаименованию("Пятидневка");
		НоваяСтрока.Должность = Должность;
		НоваяСтрока.ЗанимаемыхСтавок =1;
		НоваяСтрока.ПодразделениеОрганизации = Подразделение;
		НоваяСтрока.ДатаПриема = ?(ЗначениеЗаполнено(Сотрудник.ДатаПриемаНаРаботу),Сотрудник.ДатаПриемаНаРаботу,НачалоГода(ТекущаяДата()));
		Попытка
			НовыйПрием.Записать(РежимЗаписиДокумента.Проведение);
			Если ТЗСотрудники<>Неопределено Тогда
				СтрокаТЗ = ТЗСотрудники.Добавить();
				СтрокаТЗ.Сотрудник = Сотрудник;
				СтрокаТЗ.Должность = Должность;
			КонецЕсли;
			СтрокаТЗ.ПодразделениеОрганизации = Подразделение;
		Исключение
			НовыйПрием.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	КонецЕсли;
	//АБС Заявка 9266
	СотрудникОбъект = Сотрудник.ПолучитьОбъект();
	СотрудникОбъект.ПодразделениеОрганизации = Подразделение;
	СотрудникОбъект.Должность = Должность;
	СотрудникОбъект.Записать();
	
	//АБС Заявка 9266

КонецПроцедуры


