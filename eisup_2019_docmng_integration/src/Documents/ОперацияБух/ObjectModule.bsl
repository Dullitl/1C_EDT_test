////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой бухгалтерской справки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма бухгалтерской справки.
//
Функция ПечатьБухгалтерскойСправки()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Организация,
	|	ОперацияБух.Номер,
	|	ОперацияБух.Дата,
	|	ОперацияБух.Содержание
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("БухгалтерскаяСправка");
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБух_БухгалтерскаяСправка";

	// Выведем шапку документа.
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	ШапкаДокумента.Параметры.Организация    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ШапкаДокумента.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
	ШапкаДокумента.Параметры.Содержание     = Док.Содержание;
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
		СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
									 
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы.
			ТабДокумент.Вывести(ПодвалТаблицы);
				
			// Выведем разрыв страницы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			// Выведем заголовок таблицы.
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	ИначеЕсли ИмяМакета = "БухгалтерскаяСправка" Тогда

		ТабДокумент = ПечатьБухгалтерскойСправки();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("БухгалтерскаяСправка", "Бухгалтерская справка");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.ОперацияБух") Тогда
		Возврат;
	КонецЕсли;

	//АБС ВСТАВКА НАЧАЛО
	//Очищаем аналитику при копирование, если она не используется
	Если ЗначениеЗаполнено(ОбъектКопирования.абс_ЦФУ) и не ОбъектКопирования.абс_ЦФУ.абс_Используется Тогда
		абс_ЦФУ = Справочники.абс_ЦФУ.ПустаяСсылка();
	КонецЕсли;   	                                                          
	Если ЗначениеЗаполнено(ОбъектКопирования.абс_ЦФО) 
		и ОбъектКопирования.абс_ЦФО.абс_ГодИспользования <> НачалоГода(абс_СерверныеФункции.ПолучитьДатуСервера()) Тогда
		абс_ЦФО = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектКопирования.абс_БюджетнаяСтатья) и не ОбъектКопирования.абс_БюджетнаяСтатья.абс_Используется Тогда
		абс_БюджетнаяСтатья = Справочники.СтатьиОборотовПоБюджетам.ПустаяСсылка();
	КонецЕсли; 	
	//\\АБС ВСТАВКА КОНЕЦ
	
	Организация   = ОбъектКопирования.Организация;
	Комментарий   = ОбъектКопирования.Комментарий;
	Содержание    = ОбъектКопирования.Содержание;
	Ответственный = ОбъектКопирования.Ответственный;

	ДвиженияБУ = РегистрыБухгалтерии.Хозрасчетный.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);

	Пока ДвиженияБУ.Следующий() Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.СчетДт          = ДвиженияБУ.СчетДт;
		Проводка.СчетКт          = ДвиженияБУ.СчетКт;

		Для каждого Субконто Из ДвиженияБУ.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из ДвиженияБУ.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Проводка.ВалютаДт        = ДвиженияБУ.ВалютаДт;
		Проводка.ВалютаКт        = ДвиженияБУ.ВалютаКт;
		Проводка.ВалютнаяСуммаДт = ДвиженияБУ.ВалютнаяСуммаДт;
		Проводка.ВалютнаяСуммаКт = ДвиженияБУ.ВалютнаяСуммаКт;
		Проводка.КоличествоДт    = ДвиженияБУ.КоличествоДт;
		Проводка.КоличествоКт    = ДвиженияБУ.КоличествоКт;
		Проводка.НомерЖурнала    = ДвиженияБУ.НомерЖурнала;
		Проводка.Организация     = ДвиженияБУ.Организация;
		Проводка.Содержание      = ДвиженияБУ.Содержание;
		Проводка.Сумма           = ДвиженияБУ.Сумма;

	КонецЦикла;

	ДвиженияНУ = РегистрыБухгалтерии.Налоговый.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);

	Пока ДвиженияНУ.Следующий() Цикл

		Проводка = Движения.Налоговый.Добавить();

		Проводка.СчетДт          = ДвиженияНУ.СчетДт;
		Проводка.СчетКт          = ДвиженияНУ.СчетКт;

		Для каждого Субконто Из ДвиженияНУ.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из ДвиженияНУ.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Проводка.КоличествоДт    = ДвиженияНУ.КоличествоДт;
		Проводка.КоличествоКт    = ДвиженияНУ.КоличествоКт;
		Проводка.НомерЖурнала    = ДвиженияНУ.НомерЖурнала;
		Проводка.Организация     = ДвиженияНУ.Организация;
		Проводка.ВидУчетаДт      = ДвиженияНУ.ВидУчетаДт;
		Проводка.ВидУчетаКт      = ДвиженияНУ.ВидУчетаКт;
		Проводка.Содержание      = ДвиженияНУ.Содержание;
		Проводка.Сумма           = ДвиженияНУ.Сумма;

	КонецЦикла;

КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	ЭтоНовыйДокумент = Ссылка.Пустая();

	Если ЭтоНовыйДокумент Тогда
		РанееУстановленнаяПометкаУдаления = Ложь;

	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст ="
		|ВЫБРАТЬ 
		|	0 
		|ИЗ
		|	Документ.ОперацияБух КАК Операция
		|
		|ГДЕ
		|	(Операция.Ссылка = &СсылкаНаОперацию) И
		|	(Операция.ПометкаУдаления = Ложь)";

		Запрос.УстановитьПараметр("СсылкаНаОперацию", Ссылка); 
		Результат = Запрос.Выполнить();
		РанееУстановленнаяПометкаУдаления = Результат.Пустой();

	КонецЕсли;

	Если ПометкаУдаления <> РанееУстановленнаяПометкаУдаления Тогда

		//АБС ВСТАВКА 09.11.2014 Навценя
		Филлиализация_УстановкаПометкиУдаления(Отказ);
		//АБС ВСТАВКА КОНЕЦ
		
		Если НЕ Отказ Тогда 
			
			Для каждого ПроводкиДокумента из Движения Цикл

				Если (НЕ ПроводкиДокумента.Модифицированность()) И 
						(НЕ ПроводкиДокумента.Выбран()) И
						(НЕ ЭтоНовыйДокумент) Тогда

					ПроводкиДокумента.Прочитать();

				КонецЕсли;

				КоличествоПроводок = ПроводкиДокумента.Количество();

				Если КоличествоПроводок > 0 Тогда

					// Определяем текущую активность проводок по первой проводке
					ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;
					НужнаяАктивностьПроводок  = НЕ ПометкаУдаления;

					Если ТекущаяАктивностьПроводок <> НужнаяАктивностьПроводок Тогда
						ПроводкиДокумента.УстановитьАктивность(НужнаяАктивностьПроводок);
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	//АБС ВСТАВКА 10.10.2014 Навценя
	СформироватьЗакрытиеРегистровВзаиморасчетов(Отказ);
	//АБС ВСТАВКА КОНЕЦ

КонецПроцедуры

// АБС ВСТАВКА Фролов 20111117
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	НачатьТранзакцию();
	
	Если Движения.Хозрасчетный.Количество() > 0 Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	Если Движения.ОборотыБюджетов.Количество() > 0 Тогда
		Движения.ОборотыБюджетов.Записать();
	КонецЕсли;
	Если Движения.Налоговый.Количество() > 0 Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;
	Если НЕ абс_РучноеФормированиеОборотовБюджетов Тогда
		абс_Бюджетирование.ПроведениеПоРегиструБюджетирования(Ссылка, Отказ, РежимПроведенияДокумента.Неоперативный);		
	КонецЕсли;	
	
	//АБС Коломиец начало
	Если абс_ДоходыПрошлыхЛет Тогда
		Сценарий = Константы.абс_СценарийУбыткиПрошлыхЛет.Получить();
	Иначе
		Сценарий = Неопределено;
	КонецЕсли;
	//АБС Коломиец конец
	
	 // {{KM WARE Малыгин П.К. Заявка №35417  18.11.2015 начало
	 // Если документ помечается на удаление, то проверка не нужна
	 // {{Старый код:
	 // КонтрольПроводокПройден = абс_Бюджетирование.КонтрольСоответствияПроводокБухОборотамБюджетов(Ссылка,Отказ,Сценарий);
     // }}Новый код:
	Если ПометкаУдаления = Ложь Тогда
	КонтрольПроводокПройден = абс_Бюджетирование.КонтрольСоответствияПроводокБухОборотамБюджетов(Ссылка,Отказ,Сценарий);
	Иначе 
	КонтрольПроводокПройден = Истина;	
	КонецЕсли;
     // }}KM WARE Малыгин П.К. Заявка №35417  18.11.2015 окончание 
	
	Если ПометкаУдаления = Ложь Тогда
	КонтрольПроводокПройден = абс_Бюджетирование.КонтрольСоответствияПроводокБухОборотамБюджетов(Ссылка,Отказ,Сценарий);
	Иначе 
	КонтрольПроводокПройден = Истина;	
	КонецЕсли;
	
	Если НЕ КонтрольПроводокПройден Тогда
		
		Отказ = Истина;   		
		ОтменитьТранзакцию();
		
	Иначе
		
		ЗафиксироватьТранзакцию();
			
	КонецЕсли;
	
КонецПроцедуры
// АБС ВСТАВКА Фролов 20111117 КОНЕЦ


//АБС ВСТАВКА Навценя 10.10.2014

Процедура СформироватьЗакрытиеРегистровВзаиморасчетов(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ (абс_ВидОперацииФилиализация = Перечисления.абс_ВидыОперацийФилиаизация.ВГР_ДЗО_ДЗО 
		ИЛИ абс_ВидОперацииФилиализация = Перечисления.абс_ВидыОперацийФилиаизация.ВГР_ДЗО_КТТК) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И абс_КорректировкаЗаписейРегистров.Пустая() Тогда 
		Возврат;
	КонецЕсли;
		
	КорректировкаОбъект = ?(абс_КорректировкаЗаписейРегистров.Пустая(), 
							Документы.КорректировкаЗаписейРегистров.СоздатьДокумент(),
							абс_КорректировкаЗаписейРегистров.ПолучитьОбъект());
							
	Если КорректировкаОбъект = Неопределено Тогда 
		КорректировкаОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
	КонецЕсли;
	
	КорректировкаОбъект.Дата = Дата;
	КорректировкаОбъект.Ответственный = Ответственный;
	КорректировкаОбъект.ПометкаУдаления = ПометкаУдаления;
	
	СписокРегистров = Новый СписокЗначений;
	СписокРегистров.Добавить("ВзаиморасчетыСКонтрагентами", 						"Взаиморасчеты с контрагентами");
	СписокРегистров.Добавить("ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов", 	"Взаиморасчеты с контрагентами по документам расчетов");
	СписокРегистров.Добавить("РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", 	"Расчеты по приобретению (бухгалтерский учет)");
	СписокРегистров.Добавить("РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", 	"Расчеты по реализации (бухгалтерский учет)");
   	СписокРегистров.Добавить("РасчетыСКонтрагентами", 								"Расчеты с контрагентами");
	
	Для каждого ЭлементСписка Из СписокРегистров Цикл			
		НоваяСтрока = КорректировкаОбъект.ТаблицаРегистровНакопления.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;	
	КонецЦикла;
	
	КорректировкаОбъект.Записать();
	абс_КорректировкаЗаписейРегистров = КорректировкаОбъект.Ссылка;
	
	Для Каждого регистр из СписокРегистров Цикл 
		КорректировкаОбъект.Движения[регистр.Значение].Записать();			
	КонецЦикла;
	
	Если ПометкаУдаления Тогда 
		Возврат;
	КонецЕсли;
	
	МассивДоговоров = ПолучитьМассивДоговоров();
	
	Если МассивДоговоров.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	МассивРезультатов = ПолучитьМассивРезультатов(МассивДоговоров);
	
	Если СписокРегистров.Количество() <> МассивРезультатов.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Для  й = 1 по МассивРезультатов.Количество() - 1 Цикл
		Регистр = СписокРегистров[й].Значение;
		ТаблицаДвижений = МассивРезультатов[й].Выгрузить();
		КорректировкаОбъект.Движения[Регистр].Загрузить(ТаблицаДвижений);
		КорректировкаОбъект.Движения[Регистр].Записать();
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьМассивРезультатов(МассивДоговоров)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	                      |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	                      |	ВзаиморасчетыСКонтрагентамиОстатки.Организация,
	                      |	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	                      |	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	                      |	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	                      |	&Период
	                      |ИЗ
	                      |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                      |			&МоментВремени,
	                      |			Организация = &Организация
	                      |				И ДоговорКонтрагента В (&МассивДоговоров)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента,
	                      |	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка,
	                      |	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом,
	                      |	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ВидРасчетовСКонтрагентом,
	                      |	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.УпрУчет,
	                      |	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация,
	                      |	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
	                      |	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	                      |	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаРеглОстаток КАК СуммаРегл,
	                      |	&Период
	                      |ИЗ
	                      |	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	                      |			&МоментВремени,
	                      |			Организация = &Организация
	                      |				И ДоговорКонтрагента В (&МассивДоговоров)) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента,
	                      |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Сделка,
	                      |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Документ,
	                      |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты,
	                      |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты,
	                      |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Организация,
	                      |	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
	                      |	-РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	                      |	-РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРег,
	                      |	&Период
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
	                      |			&МоментВремени,
	                      |			Организация = &Организация
	                      |				И ДоговорКонтрагента В (&МассивДоговоров)
	                      |				И СчетОплаты В ИЕРАРХИИ (&СчетаОстатков)) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента,
	                      |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Сделка,
	                      |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Документ,
	                      |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты,
	                      |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.ДатаОплаты,
	                      |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Организация,
	                      |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
	                      |	-РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	                      |	-РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток КАК СуммаРег,
	                      |	&Период
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
	                      |			&МоментВремени,
	                      |			Организация = &Организация
	                      |				И ДоговорКонтрагента В (&МассивДоговоров)
	                      |				И СчетОплаты В ИЕРАРХИИ (&СчетаОстатков)) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	                      |	РасчетыСКонтрагентамиОстатки.Сделка,
	                      |	РасчетыСКонтрагентамиОстатки.РасчетыВозврат,
	                      |	РасчетыСКонтрагентамиОстатки.Организация,
	                      |	РасчетыСКонтрагентамиОстатки.Контрагент,
	                      |	-РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	                      |	-РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	                      |	&Период
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	                      |			&МоментВремени,
	                      |			Организация = &Организация
	                      |				И ДоговорКонтрагента В (&МассивДоговоров)) КАК РасчетыСКонтрагентамиОстатки");
						  
	Запрос.УстановитьПараметр("МассивКонтрагентов", ОтборКонтрагентыВГР.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("МассивДоговоров",  	МассивДоговоров);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Период", 			Дата);
	Запрос.УстановитьПараметр("МоментВремени", 		МоментВремени());
	Запрос.УстановитьПараметр("СчетаОстатков", 		абс_СчетаПереносаФилиализация.ВыгрузитьКолонку("СчетУчета"));
	
	Возврат Запрос.ВыполнитьПакет();
		
КонецФункции

Функция ПолучитьМассивДоговоров() 
	
	МассивДоговоров = Новый Массив;
	МассивСчетов = абс_СчетаПереносаФилиализация.ВыгрузитьКолонку("СчетУчета");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Хозрасчетный.Ссылка
	                      |ИЗ
	                      |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                      |ГДЕ
	                      |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)");
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		МассивСчетов.Добавить(Выборка.Ссылка);		
	КонецЦикла;
	
	Для Каждого Движение из Движения.Хозрасчетный Цикл 
		
		Если НЕ Движение.Активность Тогда 
			Продолжить;
		КонецЕсли;
		
		Если МассивСчетов.Найти(Движение.СчетДт) <> Неопределено Тогда
			Договор = Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры];
			Если ЗначениеЗаполнено(Договор) Тогда 
				МассивДоговоров.Добавить(Договор);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивСчетов.Найти(Движение.СчетКт) <> Неопределено Тогда
			Договор = Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры];
			Если ЗначениеЗаполнено(Договор) Тогда 
				МассивДоговоров.Добавить(Договор);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

Процедура Филлиализация_УстановкаПометкиУдаления(Отказ)
	
	Если НЕ ПометкаУдаления Тогда 
		Возврат;
	КонецЕсли;
	
	Если абс_ВидОперацииФилиализация <> Перечисления.абс_ВидыОперацийФилиаизация.ПереносДанных Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Статус ИЗ Документ.абс_ПереносДанных ГДЕ ДокументДвиженийОпераияБух = &ОперацияБух");
	Запрос.УстановитьПараметр("ОперацияБух", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		
		Статусы = Перечисления.абс_СтатусыПереносДанных;
		
		Если ПометкаУдаления = Истина 
			И (Выборка.Статус = Статусы.ВыполненПеренос ИЛИ Выборка.Статус = Статусы.ОжидаетФормированиеДвижений) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не возможно пометить на удаление документ в статусе """ 
												+ Выборка.Статус + """. Необходимо перевести документ в статус ""Отказ"" или ""Ожидает удаления движений"".", Отказ);		
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА КОНЕЦ


