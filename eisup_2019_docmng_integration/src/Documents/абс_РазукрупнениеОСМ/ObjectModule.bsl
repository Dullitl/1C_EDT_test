

//////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.абс_КомплектацияОС") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьРазукрупнениеОСМПоРазукрупнениеОС(ДанныеЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	Если Не ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Номер) Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Для Каждого НаборЗаписей Из Движения Цикл
			НаборЗаписей.Очистить();
			НаборЗаписей.Записывать = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Движения.абс_СтоимостьОСМеждународный.Записывать = Истина;
	Движения.ОсновныеСредстваМеждународныйУчет.Записывать = Истина;
	Движения.Международный.Записывать = Истина;
	
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода = КонецМесяца(Дата);
	
	СтруктураЗапросов = Документы.абс_РазукрупнениеОСМ.ПолучитьСтруктуруЗапросовПроведения();
	
	СтруктураПараметровСтрока = ПолучитьМакет("СтруктураПараметров").ПолучитьТекст();
	СтруктураПараметров = ЗначениеИзСтрокиВнутр(СтруктураПараметровСтрока);
	
	ТаблицаСроков = Новый ТаблицаЗначений;
	ТаблицаСроков.Колонки.Добавить("ГруппаОС", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыОС"));
	ТаблицаСроков.Колонки.Добавить("ЦельИспользования", Новый ОписаниеТипов("СправочникСсылка.ЦелиИспользования"));
	ТаблицаСроков.Колонки.Добавить("СрокИспользования", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	
	Для Сч = 1 По 12 Цикл
		СтрокаТаблицы = ТаблицаСроков.Добавить();
		СтрокаТаблицы.ГруппаОС = СтруктураПараметров["ГруппаУчета"+Сч];
		СтрокаТаблицы.ЦельИспользования = СтруктураПараметров["Цель"+Сч];
		СтрокаТаблицы.СрокИспользования = СтруктураПараметров["СПИ"+Сч];
	КонецЦикла;
	
	ПустыеСубконто = ПолучитьПустыеСубконто();
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", НачалоПериода);
	Запрос.УстановитьПараметр("ТаблицаСроков", ТаблицаСроков);
	Запрос.УстановитьПараметр("ПустыеСубконто", ПустыеСубконто);
	
	ТекстыЗапросов = Новый СписокЗначений;
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_МеждународныйУчет_ТекстЗапросаВидыСубконтоСчетов, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_МеждународныйУчет_ТекстЗапросаСоответствиеСчетовХозрасчетный, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_МеждународныйУчет_ТекстЗапросаСрокиПолезногоИспользования, "");
	
	Запрос.Текст = "";
	Для Каждого ЭлементСписка Из ТекстыЗапросов Цикл
		Запрос.Текст = Запрос.Текст+ЭлементСписка.Значение;
	КонецЦикла;
	
	Запрос.ВыполнитьПакет();
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("МоментДокументаДляРН", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТекстыЗапросов = Новый СписокЗначений;
	
	/////////////////////////////////////////////////////////////////////////
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	ТекстыЗапросов.Добавить(СтруктураЗапросов.абс_ВнеоборотныеАктивы_ТекстЗапросаОсновныеСредстваМСФОПоОдномуОС, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаШапкаДокумента, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаТабличнаяЧастьОсновныеСредства, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаСтоимостьСтарогоОсновногоСредства, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаРаспределениеСтоимости, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаНераспределеннаяСтоимость, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаСтоимостьНовыхОсновныхСредств, "");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаТаблица_ОсновныеСредстваМеждународныйУчет, "Таблица_ОсновныеСредстваМеждународныйУчет");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаТаблица_абс_СтоимостьОСМеждународный, "Таблица_абс_СтоимостьОСМеждународный");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_ТекстЗапросаТаблица_Международный, "Таблица_Международный");
	ТекстыЗапросов.Добавить(СтруктураЗапросов.Разукрупнение_УдалениеВременныхТаблиц, "");
	
	
	/////////////////////////////////////////////////////////////////////////
	
	
	Запрос.Текст = "";
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		Запрос.Текст = Запрос.Текст+ТекстЗапроса.Значение;
	КонецЦикла;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДанных = Новый Структура;
	
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		
		ИмяТаблицы = ТекстЗапроса.Представление;
		
		Если Не ПустаяСтрока(ИмяТаблицы) Тогда
			Индекс = ТекстыЗапросов.Индекс(ТекстЗапроса);
			ТаблицыДанных.Вставить(ИмяТаблицы, Результат[Индекс].Выгрузить());
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыДанных.Свойство("Таблица_ОсновныеСредстваМеждународныйУчет") Тогда
		
		ТаблицаРегистра = ТаблицыДанных.Таблица_ОсновныеСредстваМеждународныйУчет;
		Если ТаблицаРегистра.Количество()>0 Тогда
			
			НаборЗаписей = Движения.ОсновныеСредстваМеждународныйУчет;
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицыДанных.Свойство("Таблица_абс_СтоимостьОСМеждународный") Тогда
		
		ТаблицаРегистра = ТаблицыДанных.Таблица_абс_СтоимостьОСМеждународный;
		Если ТаблицаРегистра.Количество()>0 Тогда
			
			НаборЗаписей = Движения.абс_СтоимостьОСМеждународный;
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицыДанных.Свойство("Таблица_Международный") Тогда
		
		ТаблицаРегистра = ТаблицыДанных.Таблица_Международный;
		Если ТаблицаРегистра.Количество()>0 Тогда
			
			НаборЗаписей = Движения.Международный;
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			
		КонецЕсли;
		
	КонецЕсли;
	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Обработка заполнения

Процедура ЗаполнитьРазукрупнениеОСМПоРазукрупнениеОС(ДанныеЗаполнения)
	
	ДокОснование = ДанныеЗаполнения.ПолучитьОбъект();
	ЗаполнитьШапкуИОчиститьТЧ(ДокОснование);
		
	Для Каждого СтрокаОС Из ДокОснование.ОС Цикл
		
		СтрокаТЧ = ОсновныеСредства.Добавить();
		СтрокаТЧ.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		СтрокаТЧ.МОЛ = СтрокаОС.МОЛРегл;
		СтрокаТЧ.Местонахождение = ДокОснование.ПодразделениеОрганизации;
		СтрокаТЧ.КоэффициентУскорения = СтрокаОС.КоэффициентУскоренияБУ;
		Если СтрокаТЧ.КоэффициентУскорения=0 Тогда
			СтрокаТЧ.КоэффициентУскорения = 1;
		КонецЕсли;
		
		СтрокаТЧ.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		СтрокаТЧ.ДатаПринятияКУчету = СтрокаОС.ДатаПринятияКУчетуРегл;
		СтрокаТЧ.СчетСниженияСтоимости = ПланыСчетов.абс_МеждународныйОСРЖД.Служебный;
		
		Способ = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ.Способы[0];
		СтрокаТЧ.СчетЗатрат = ПланыСчетов.Международный.НайтиПоКоду("М"+Способ.СчетЗатрат.Код);
		СтрокаТЧ.Субконто1 = Способ.Субконто1;
		СтрокаТЧ.Субконто2 = Способ.Субконто2;
		СтрокаТЧ.Субконто3 = Способ.Субконто3;
		ВидыСубконто = СтрокаТЧ.СчетЗатрат.ВидыСубконто;
		КоличествоСубконто = ВидыСубконто.Количество();
		Для Сч = 1 По КоличествоСубконто Цикл
			Если СтрокаТЧ["Субконто"+Сч]=Неопределено Или Не ЗначениеЗаполнено(СтрокаТЧ["Субконто"+Сч]) Тогда
				Если ВидыСубконто[Сч-1].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиЗатрат Тогда
					СтрокаТЧ["Субконто"+Сч] = Способ.СтатьяЗатрат;
				ИначеЕсли ВидыСубконто[Сч-1].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоМеждународные.НоменклатурныеГруппы Тогда
					СтрокаТЧ["Субконто"+Сч] = Способ.НоменклатурнаяГруппа;
				ИначеЕсли ВидыСубконто[Сч-1].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Подразделения Тогда
					СтрокаТЧ["Субконто"+Сч] = Способ.ПодразделениеОрганизации;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаКоэффициента Из ДокОснование.РаспределениеПоКоэффициентам Цикл
		СтрокаТЧ = ОсновныеСредства.Найти(СтрокаКоэффициента.НовоеОсновноеСредство, "ОсновноеСредство");
		Если СтрокаТЧ<>Неопределено Тогда
			СтрокаТЧ.Коэффициент = СтрокаКоэффициента.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуИОчиститьТЧ(ДокОснование)
	
	Дата = ДокОснование.Дата;
	Организация = ДокОснование.Организация;
	ДокументОснование = ДокОснование.Ссылка;
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Если Номер = "" Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;
	
	ОсновныеСредства.Очистить();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Функция ПолучитьПустыеСубконто()

	ПустыеСубконто = Новый СписокЗначений;
	ВыборкаСубконто = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Выбрать();
	Пока ВыборкаСубконто.Следующий() Цикл
		ПустыеСубконто.Добавить(ВыборкаСубконто.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	ПустыеСубконто.Добавить(Неопределено);

	Возврат ПустыеСубконто;

КонецФункции // ПолучитьПустыеСубконто()











































//////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

//Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
//	
//	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.абс_РазукрупнениеОС") Тогда
//		
//		СтандартнаяОбработка = Ложь;
//		
//		ТаблицыДанных = Новый Структура;
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
//		
//		ТекстыЗапросов = Новый СписокЗначений;
//		ТекстыЗапросов.Добавить(ТекстЗапросаШапкаОснования(), "ТаблицаШапка");
//		ТекстыЗапросов.Добавить(ТекстЗапросаОсновныеСредстваОснования(), "ТаблицаОсновныеСредства");
//		
//		абс_ПроведениеДокументов.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапросов, ТаблицыДанных);
//		
//		Если ТаблицыДанных.ТаблицаШапка.Количество()>0 Тогда
//			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТаблицыДанных.ТаблицаШапка[0]);
//		КонецЕсли;
//		ОсновныеСредства.Очистить();
//		Для Каждого СтрокаТаблицы Из ТаблицыДанных.ТаблицаОсновныеСредства Цикл
//			СтрокаОС = ОсновныеСредства.Добавить();
//			ЗаполнитьЗначенияСвойств(СтрокаОС, СтрокаТаблицы);
//			СтрокаОС.СчетЗатрат = абс_МеждународныйУчетОСРЖД.ПреобразоватьСчетаБУвСчетМСФОРЖД(СтрокаТаблицы.СчетЗатратБУ).Счет;
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
//	
//	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
//	
//	Если Не ОбменДанными.Загрузка Тогда
//		Возврат;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ОбработкаПроведения(Отказ, РежимПроведения)
//	
//	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
//		абс_ПроведениеДокументов.УдалитьДвиженияРегистратора(Ссылка);
//	КонецЕсли;
//	
//	абс_ПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
//	Документы.абс_РазукрупнениеОСРЖД.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	абс_ПроведениеДокументов.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект, ДополнительныеСвойства.ЭтоНовый);
//	
//	абс_ВнеоборотныеАктивы.Отразить_абс_ОсновныеСредстваРЖД(ДополнительныеСвойства, Движения, Отказ);
//	абс_ВнеоборотныеАктивы.Отразить_абс_СтоимостьОСРЖД(ДополнительныеСвойства, Движения, Отказ);
//	абс_ВнеоборотныеАктивы.Отразить_абс_МеждународныйОСРЖД(ДополнительныеСвойства, Движения, Отказ);
//	
//	абс_ПроведениеДокументов.ЗаписатьНаборыЗаписей(ЭтотОбъект);	
//		
//КонецПроцедуры



//Функция ТекстЗапросаШапкаОснования()
//	
//	Возврат "ВЫБРАТЬ
//			|	абс_РазукрупнениеОС.Организация,
//			|	абс_РазукрупнениеОС.Ссылка КАК ДокументОснование,
//			|	абс_РазукрупнениеОС.СтароеОсновноеСредство КАК ОсновноеСредство,
//			|	абс_РазукрупнениеОС.Дата
//			|ИЗ
//			|	Документ.абс_РазукрупнениеОС КАК абс_РазукрупнениеОС
//			|ГДЕ
//			|	абс_РазукрупнениеОС.Ссылка = &Основание
//			|;
//			|";
//	
//КонецФункции

//Функция ТекстЗапросаОсновныеСредстваОснования()
//	
//	Возврат "ВЫБРАТЬ
//			|	абс_РазукрупнениеОСОС.ОсновноеСредство,
//			|	абс_РазукрупнениеОСРаспределениеПоКоэффициентам.Коэффициент,
//			|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатратБУ,
//			|	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1,
//			|	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2,
//			|	СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3,
//			|	абс_РазукрупнениеОСОС.МОЛРегл КАК МОЛ,
//			|	абс_РазукрупнениеОСОС.Ссылка.ПодразделениеОрганизации КАК Местонахождение,
//			|	абс_РазукрупнениеОСОС.ДатаПринятияКУчетуРегл КАК ДатаПринятияКУчету,
//			|	абс_РазукрупнениеОСОС.НачислятьАмортизациюБУ КАК НачислятьАмортизацию,
//			|	абс_РазукрупнениеОСОС.КоэффициентУскоренияБУ КАК КоэффициентУскорения
//			|ИЗ
//			|	Документ.абс_РазукрупнениеОС.ОС КАК абс_РазукрупнениеОСОС
//			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_РазукрупнениеОС.РаспределениеПоКоэффициентам КАК абс_РазукрупнениеОСРаспределениеПоКоэффициентам
//			|		ПО абс_РазукрупнениеОСОС.Ссылка = абс_РазукрупнениеОСРаспределениеПоКоэффициентам.Ссылка
//			|			И абс_РазукрупнениеОСОС.ОсновноеСредство = абс_РазукрупнениеОСРаспределениеПоКоэффициентам.НовоеОсновноеСредство
//			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
//			|		ПО абс_РазукрупнениеОСОС.СпособОтраженияРасходовПоАмортизацииБУ = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
//			|ГДЕ
//			|	абс_РазукрупнениеОСОС.Ссылка = &Основание
//			|;
//			|";
//	
//КонецФункции
