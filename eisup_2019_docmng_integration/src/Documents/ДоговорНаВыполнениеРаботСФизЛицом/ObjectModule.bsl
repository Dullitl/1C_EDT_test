////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ОбработкаКомментариев; 

Перем мДатаРождения Экспорт;
Перем мПаспорт Экспорт;
Перем мАдресПрописки Экспорт;
Перем мАдресПропискиПредставление Экспорт;
Перем мАдресПроживания Экспорт;
Перем мАдресПроживанияПредставление Экспорт;
Перем мПол Экспорт;
Перем мСтраховойНомерПФР Экспорт;
Перем мИНН Экспорт;
Перем ПериодЗаписи;

Перем мТекущийПользователь;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка",				Ссылка);
    Запрос.УстановитьПараметр("Адрес",				Перечисления.ТипыКонтактнойИнформации.Адрес);
    Запрос.УстановитьПараметр("АдресЮридический",	Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
    Запрос.УстановитьПараметр("ФизЛицо",			Сотрудник.ФизЛицо);
    Запрос.УстановитьПараметр("Дата",				Дата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Номер,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Дата,
	|	ВЫРАЗИТЬ(ДоговорНаВыполнениеРаботСФизЛицом.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ХарактерОплаты КАК ЧастотаВыплат,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Наименование) КАК РаботникНаименование,
	|	ДоговорНаВыполнениеРаботСФизЛицом.СуммаЗаРаботу,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ВалютаДокумента.НаименованиеПолное КАК ВалютаДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование КАК ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	КонтактнаяИнформация.Представление КАК АдресОрганизации,
	|	ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.НомерСчета, ""__________________"") КАК НомерСчета,
	|	ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.Банк.Наименование, ""_______________________________________________________________________________________"") КАК Банк
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ДоговорНаВыполнениеРаботСФизЛицом.Организация = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = &Адрес)
	|			И (КонтактнаяИнформация.Вид = &АдресЮридический)
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ИмяМакета = "Договор" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорНаВыполнениеРаботСФизЛицом_Договор";
		
		// получаем макет
		Если Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский тогда
			Макет = ПолучитьМакет("ДоговорАвторскогоЗаказа");
		Иначе
			Макет = ПолучитьМакет(ИмяМакета);
		КонецЕсли;
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечати().Выбрать();
		Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.ДатаНачала    = Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yyyy");
			Макет.Параметры.ДатаОкончания = Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		Макет.Параметры.ЧастотаВыплат = Нрег(Макет.Параметры.ЧастотаВыплат);
		Макет.Параметры.НазваниеОрганизации = СокрЛП(Макет.Параметры.НазваниеОрганизации);
		
		ТабДокумент.Вывести(Макет);
		
	ИначеЕсли ИмяМакета = "БланкСогласования" Тогда
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		#Если Клиент Тогда
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ДоговорНаВыполнениеРаботСФизЛицом", ИмяМакета, ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ДоговорНаВыполнениеРаботСФизЛицом", ИмяМакета, ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		#КонецЕсли							
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Договор "));
	
КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Договор,БланкСогласования","Договор","Бланк согласования");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	//  Организация
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан сотрудник, с которым заключается договор!", Отказ, Заголовок);
	Иначе 
		Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Указан сотрудник другой организации!"), Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ОшибкаСотрудникНеДоговорник Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Указан сотрудник, не являющийся договорником!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровГПХСФизЛицами.Авторский И ВидАвторскогоДоговора.Пустая() Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан вид авторского договора!", Отказ, Заголовок);
	КонецЕсли;	
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВидРасчета) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указано начисление!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.ОшибкаКодаДоходаНДФЛ Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Указанный вид расчета имеет неподходящий код дохода по НДФЛ!", , Заголовок);
	КонецЕсли;
	
	// ХарактерОплаты
	Если НЕ ЗначениеЗаполнено(ХарактерОплаты) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан порядок оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	Если Не ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указаны даты договора!", Отказ, Заголовок);
	ИначеЕсли ДатаНачала > ДатаОкончания Тогда	
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Неверно указаны даты договора!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДобавитьСтрокуВПлановыеНачисления(ВыборкаПоШапкеДокумента)
	
	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		Движение.Период	= ДатаНачала;
	ИначеЕсли ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока Тогда
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		Движение.Период	= Макс(НачалоМесяца(ДатаОкончания),ДатаНачала);
	Иначе
		Возврат
	КонецЕсли;
	
	// Измерения
	Движение.Сотрудник		= Сотрудник;
	Движение.Организация	= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Движение.ДокументОснование = Ссылка;
	Движение.ВидРасчетаИзмерение = ВидРасчета;
	
	// Ресурсы
	Движение.ВидРасчета		= ВидРасчета;
	Движение.Действие		= Перечисления.ВидыДействияСНачислением.Начать;
	Движение.Показатель1	= СуммаЗаРаботу;
	Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте") Тогда
		Движение.Валюта1			= Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		Движение.Валюта1			= ВалютаДокумента;
	КонецЕсли;
	// Реквизиты
	
	Движение.ПериодЗавершения 	= ДатаОкончания + 86400;
	Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;
	
КонецПроцедуры

Процедура ДвиженияРегистров(ВыборкаПоШапкеДокумента)
	
	ДобавитьСтрокуВПлановыеНачисления(ВыборкаПоШапкеДокумента);
	
	ДоговорНаВыполнениеРаботСФизЛицомПереопределяемый.ДобавитьСтрокуВРеглУчетПлановыхНачисленийРаботниковОрганизаций(ЭтотОбъект, ВыборкаПоШапкеДокумента);
	
КонецПроцедуры

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамСсылка",	Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.Организация = &парамГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаСотрудникНеДоговорник,
	|	Договор.ВидРасчета.КодДоходаЕСН КАК КодДоходаЕСН,
	|	ВЫБОР
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
	|			ТОГДА ВЫБОР
	|					КОГДА Договор.ВидРасчета.КодДоходаНДФЛ В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.КодДоходаПоУмолчанию), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2010))
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
	|				И Договор.ВидАвторскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАвторскогоДоговора.АвторскогоЗаказа)
	|			ТОГДА ВЫБОР
	|					КОГДА Договор.ВидРасчета.КодДоходаНДФЛ В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2201), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2202), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2203), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2204), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2205), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2206), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2207), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2208), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2209), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2210))
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
	|				И Договор.ВидАвторскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАвторскогоДоговора.Лицензионный)
	|			ТОГДА ВЫБОР
	|					КОГДА Договор.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1300)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
	|				И Договор.ВидАвторскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАвторскогоДоговора.ОбОтчужденииИсключительныхПрав)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаКодаДоходаНДФЛ
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договор
	|ГДЕ
	|	Договор.Ссылка = &парамСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// АБС ВСТАВКА
	//Если абс_СтатусДоговора = Перечисления.абс_СтатусыДоговоровПодряда.Исполнение Тогда
	//// АБС ВСТАВКА КОНЕЦ

	//	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	//	ОбработкаКомментариев.УдалитьСообщения();
	//	
	//	// Заголовок для сообщений об ошибках проведения.
	//	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	//	
	//	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
	//	
	//	// Получим реквизиты шапки из запроса
	//	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	//	
	//	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
	//		//Надо позвать проверку заполнения реквизитов шапки
	//		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	//		
	//		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	//		Если НЕ Отказ Тогда
	//			
	//			ДвиженияРегистров(ВыборкаПоШапкеДокумента);
	//			
	//		КонецЕсли; 
	//	КонецЕсли;
	//		
	//	ОбработкаКомментариев.ПоказатьСообщения();
	//// АБС ВСТАВКА	
	//КонецЕсли;
	//// АБС ВСТАВКА КОНЕЦ
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);	
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, "Организация, ВидДоговора, ФизЛицо");
		
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			Организация = ""; ВидДоговора = ""; ФизЛицо = "";
			
			Возврат
		Иначе
			
			Сотрудник = Основание;
			
			Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	// АБС ВСТАВКА
	//Если абс_СтатусДоговора = Перечисления.абс_СтатусыДоговоровПодряда.Исполнение Тогда
	//	Если ЗначениеЗаполнено(абс_ФизическоеЛицо) И (абс_Контрагент.Наименование <> абс_ФизическоеЛицо.Наименование) Тогда
	//		
	//		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	//		Контрагент.Наименование = абс_ФизическоеЛицо.Наименование;
	//		Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный;
	//		Контрагент.УстановитьНовыйКод();
	//		Контрагент.ОбменДанными.Загрузка = Истина;
	//		Попытка
	//			Контрагент.Записать();
	//			абс_Контрагент = Контрагент;
	//			Сообщить("Создан конрагент " + Контрагент.Наименование + " с кодом " + Контрагент.Код);
	//		Исключение
	//			Сообщить("Не удалось создать контрагента на основании физического лица");
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЕсли;
    // АБС ВСТАВКА КОНЕЦ
	
	//АБС ВСТАВКА 36982 26.12.2013 15:19:08  Шамов
	//прочитаем персональные данные из ИСУЗК, чтобы не перезаписать пустые поля
	Если Не ЭтоНовый() Тогда
		СообщениеОбОшибке = "";
		Попытка
			СтруктураДанных = абс_WebServiceСервер.ИнициализацияDogovor_PersonData_Get(Номер, Дата, СообщениеОбОшибке);
		Исключение
			Сообщить(СообщениеОбОшибке);
			Сообщить("Персональные данные не получены из базы ИСУЗК");
			СообщениеОбОшибке = "";
			Отказ = Истина;
			Возврат;
		КонецПопытки;	
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			Сообщить(СообщениеОбОшибке);
			Сообщить("Персональные данные не получены из базы ИСУЗК");
			СообщениеОбОшибке = "";
			Отказ = Истина;
			Возврат;
    	КонецЕсли;  
		Если СтруктураДанных <> Неопределено Тогда			
			
			//АБС ВСТАВКА 23957  10.01.2014 17:51:37  Шамов
			Если НЕ ЗначениеЗаполнено(СтруктураДанных.DateOfBirth)
				ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.Passport)
				ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.AddressPropiska)
				ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.Address)
			//АБС ВСТАВКА 49007  06.11.2014 12:38:05  Шамов
			//СНИЛС должен быть заполнен
				ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.PFR)
			//АБС ВСТАВКА 49007 КОНЕЦ
					Тогда
				//пустые данные не получаем
				Возврат;
			КонецЕсли;
			//АБС ВСТАВКА 23957 КОНЕЦ 
			
			абс_ДатаРождения 	= СтруктураДанных.DateOfBirth;
			абс_Паспорт 		= СтруктураДанных.Passport;
		    абс_АдресПрописки 	= СтруктураДанных.AddressPropiska;
		    абс_АдресПроживания = СтруктураДанных.Address;
			абс_АдресПропискиПредставление = СтруктураДанных.AddressPropiskaRep;
			абс_АдресПроживанияПредставление = СтруктураДанных.AddressRep;		
			
			Пол = СтруктураДанных.Pol;
			Если Пол = "Мужской" Тогда
				абс_Пол 		= Перечисления.ПолФизическихЛиц.Мужской;
			ИначеЕсли Пол = "Женский" Тогда
				абс_Пол 		= Перечисления.ПолФизическихЛиц.Женский;
			КонецЕсли;
			абс_СтраховойНомерПФР = СтруктураДанных.PFR;
			абс_ИНН = СтруктураДанных.INN;
			
			//АБС ВСТАВКА №44897 НАЧАЛО «27 июня 2014 г.», Пополитов
			мДатаРождения 					= абс_ДатаРождения;
			мПаспорт 						= абс_Паспорт;
			мАдресПрописки 					= абс_АдресПрописки;
			мАдресПроживания 				= абс_АдресПроживания;
			мАдресПропискиПредставление 	= абс_АдресПропискиПредставление;
			мАдресПроживанияПредставление 	= абс_АдресПроживанияПредставление;
			мПол 							= абс_Пол;
			мСтраховойНомерПФР 				= абс_СтраховойНомерПФР;
			мИНН 							= абс_ИНН;	
			//\\АБС ВСТАВКА №44897 КОНЕЦ			
			
		Иначе
			Сообщить("Персональные данные не получены из базы ИСУЗК");
			Отказ = Истина;
			Возврат;
		КонецЕсли; 	
	КонецЕсли;
	//АБС ВСТАВКА  КОНЕЦ
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Если обмен данными не делаем проверок
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// АБС ВСТАВКА
	// Проверка заполнения обязательных полей
	Если абс_СтатусДоговора = Перечисления.абс_СтатусыДоговоровПодряда.ПодписаниеВторойСтороны Тогда
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Сообщить("Не заполнено поле ""Организация""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			Сообщить("Не заполнено поле ""Подразделение""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(абс_ЦФО) Тогда
			Сообщить("Не заполнено поле ""ЦФО""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(абс_ЦФУ) Тогда
			Сообщить("Не заполнено поле ""ЦФУ""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// Казаков Е.Л. 04.10.2016 НАЧАЛО
		Если Не ЗначениеЗаполнено(ttk_ГруппаСпособовОтражения) Тогда
			Сообщить("Не заполнено поле ""Группа способов отражения""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// Казаков Е.Л. 04.10.2016 ОКОНЧАНИЕ
			
		// Проверка правильности заполнения дат и сумм
			
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			Сообщить("Не заполнена дата начала договора");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			Сообщить("Не заполнена дата окончания договора");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если ДатаНачала > ДатаОкончания Тогда
			Сообщить("Дата начала договора больше даты окончания");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из абс_ГрафикРабот  Цикл
			
			Если СтрокаТЧ.ДатаНачала > СтрокаТЧ.ДатаОкончания Тогда
				Сообщить("В строке номер "+ СтрокаТЧ.НомерСтроки + " таблицы График работ Дата начала периода больше даты окончания");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Если СтрокаТЧ.ДатаНачала < ДатаНачала Тогда
				Сообщить("В строке номер " + СтрокаТЧ.НомерСтроки + " таблицы График работ Дата начала периода меньше даты начала договора");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Если СтрокаТЧ.ДатаНачала > ДатаОкончания Тогда
				Сообщить("В строке номер " + СтрокаТЧ.НомерСтроки + " таблицы График работ Дата окончания периода больше даты окончания договора");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(мДатаРождения) Тогда
			Сообщить("Не заполнено поле ""Дата рождения"" на закладке Персональные данные");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(мПаспорт) Тогда
			Сообщить("Не заполнено поле ""Паспортные данные"" на закладке Персональные данные");
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(мАдресПрописки) Тогда
			Сообщить("Не заполнено поле ""Адрес по прописке"" на закладке Персональные данные");
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(мАдресПроживания) Тогда
			Сообщить("Не заполнено поле ""Адрес места жительства"" на закладке Персональные данные");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(мПол) Тогда
			Сообщить("Не заполнено поле ""Пол"" на закладке Персональные данные");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ПодразделениеОрганизации.абс_ТипПодразделенияОрганизации <> Перечисления.абс_ТипыПодразделенийОрганизации.ПодразделениеОрганизации Тогда
			Сообщить("Выбрано подразделение организации с неверным типом");
			Отказ = Истина;
			Возврат;						
		КонецЕсли;
			
	ИначеЕсли абс_СтатусДоговора = Перечисления.абс_СтатусыДоговоровПодряда.СогласованиеКадрами Тогда
		
		Если Не ЗначениеЗаполнено(СпособОтраженияВБухучете) Тогда
			Сообщить("Не заполнено поле ""Учет""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КодВычета) Тогда
			Сообщить("Не заполнено поле ""Код вычета""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	// АБС ВСТАВКА КОНЕЦ

	
	//Если абс_СтатусДоговора = Перечисления.абс_СтатусыДоговоровПодряда.Исполнение Тогда
	//	
	//	Если Не ЗначениеЗаполнено(СпособОтраженияВБухучете) Тогда
	//		Сообщить("Не заполнено поле Учет");
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//	Если Не ЗначениеЗаполнено(КодВычета) Тогда
	//		Сообщить("Не заполнено поле Код вычета");
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
    	
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусДоговораПодрядаПоРегистру(Ссылка);
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	ДаннаяБазаНеКопия = абс_СерверныеФункции.абс_ДаннаяБазаНеКопия();
	Если не ДаннаяБазаНеКопия Тогда
		ЗаписатьНовыйСтатус(абс_СтатусДоговора);	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	Если ДаннаяБазаНеКопия и (не абс_СтатусДоговора = СтатусПоРегистру или не ЗначениеЗаполнено(СтатусПоРегистру)) Тогда
		ЗаписатьНовыйСтатус(абс_СтатусДоговора);
		
		// АБС ВСТАВКА ИНТЕГРАЦИЯ С ИСУЗК
	    Если ЗначениеЗаполнено(СтатусПоРегистру) Тогда
						   				
			// Создаем договор в ИСУЗК
		    Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорНаВыполнениеРаботСФизЛицом.Номер,
			|	ДоговорНаВыполнениеРаботСФизЛицом.Дата,
			// нач закоммент Нарыжный 14.11.2013 35133
			//|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.абс_КодИСУЗК КАК Сотрудник,
			// кон закоммент Нарыжный 14.11.2013 35133
			// нач ВСТАВКА Нарыжный 14.11.2013 35133
			|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.абс_УникальныйИдентификаторСотрудника КАК Сотрудник, 
			// кон ВСТАВКА Нарыжный 14.11.2013 35133
			|	ДоговорНаВыполнениеРаботСФизЛицом.Организация.Код КАК Организация,
			|	ДоговорНаВыполнениеРаботСФизЛицом.СуммаЗаРаботу КАК СуммаПоДоговору,
			|	ДоговорНаВыполнениеРаботСФизЛицом.ВидРасчета.Наименование КАК ВидРасчета,
			|	ДоговорНаВыполнениеРаботСФизЛицом.Комментарий,
			|	ДоговорНаВыполнениеРаботСФизЛицом.Ответственный.Наименование КАК Ответственный,
			|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачалаДоговора,
			|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончанияДоговора,
			|	ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.абс_КодИСУЗК КАК ПодразделениеОрганизации,
			|	ДоговорНаВыполнениеРаботСФизЛицом.СпособОтраженияВБухучете.Наименование КАК СпособОтраженияВБУ,
			//Крамаренко Д.М. BEGIN
			|	ДоговорНаВыполнениеРаботСФизЛицом.СпособОтраженияВБухучете.Родитель.Наименование КАК СпособОтраженияРодитель,
			|	ДоговорНаВыполнениеРаботСФизЛицом.СпособОтраженияВБухучете КАК СпособОтраженияВБУСсылка,
			//Крамаренко Д.М. END
			// Казаков Е.Л.  НАЧАЛО
			|	ДоговорНаВыполнениеРаботСФизЛицом.ttk_ГруппаСпособовОтражения.Наименование КАК ttk_ГруппаСпособовОтражения,
			// Казаков Е.Л.  ОКОНЧАНИЕ
			|	ДоговорНаВыполнениеРаботСФизЛицом.КодВычета.Наименование КАК КодВычета,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_ЦФУ.Код КАК ЦФУ,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_Фамилия КАК Фамилия,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_Имя КАК Имя,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_Отчество КАК Отчество,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_ФизическоеЛицо.абс_КодИСУЗК КАК ФизЛицо,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_Контрагент.Код КАК Контрагент,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_НомерДоговора КАК НомерДоговора,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_ДатаПодписания КАК ДатаПодписания,
			|	ДоговорНаВыполнениеРаботСФизЛицомабс_ГрафикРабот.ДатаНачала КАК ДатаНачалаГрафик,
			|	ДоговорНаВыполнениеРаботСФизЛицомабс_ГрафикРабот.ДатаОкончания КАК ДатаОкончанияГрафик,
			|	ДоговорНаВыполнениеРаботСФизЛицомабс_ГрафикРабот.СуммаОплаты КАК СуммаОплатыГрафик,
			|	ДоговорНаВыполнениеРаботСФизЛицомабс_ГрафикРабот.Содержание КАК СодержаниеГрафик,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ВидДоговораСтрока,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ВидАвторскогоДоговораСтрока,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ХарактерОплатыСтрока,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК СтатусСтрока,
			|	ДоговорНаВыполнениеРаботСФизЛицом.ВидДоговора,
			|	ДоговорНаВыполнениеРаботСФизЛицом.ВидАвторскогоДоговора,
			|	ДоговорНаВыполнениеРаботСФизЛицом.ХарактерОплаты,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_СтатусДоговора КАК СтатусДоговора,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_ЦФО.Код КАК ЦФО,
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_ПричинаИзмененияСтатуса КАК ПричинаИзмененияСтатуса,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК СотрудникИзменившийСтатус,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодЗаписи,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПользовательИзменившийСтатус,
			//Задача 000021629
			|	ДоговорНаВыполнениеРаботСФизЛицом.абс_ВНДоговора КАК ВНДоговора
			//
			|ИЗ
			|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом.абс_ГрафикРабот КАК ДоговорНаВыполнениеРаботСФизЛицомабс_ГрафикРабот
			|		ПО (ДоговорНаВыполнениеРаботСФизЛицомабс_ГрафикРабот.Ссылка = ДоговорНаВыполнениеРаботСФизЛицом.Ссылка)
			|ГДЕ
			|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Результат = Запрос.Выполнить().Выгрузить();
			
			//Крамаренко Д.М. BEGIN
			Результат.Колонки.Добавить("СтруктураДанныхСО");
			//Крамаренко Д.М. END

			
			Для Каждого Строка Из Результат Цикл
				
				Строка.ВидДоговораСтрока = Строка(Строка.ВидДоговора);
				Строка.ВидАвторскогоДоговораСтрока = Строка(Строка.ВидАвторскогоДоговора);
				Строка.ХарактерОплатыСтрока = Строка(Строка.ХарактерОплаты);
				Строка.СтатусСтрока = Строка(Строка.СтатусДоговора);
				Строка.ПериодЗаписи = ПериодЗаписи;
				Строка.СотрудникИзменившийСтатус = мТекущийПользователь.абс_Сотрудник.абс_КодИСУЗК;
				Строка.ПользовательИзменившийСтатус = мТекущийПользователь.Наименование;
				
				//Строка.ПолСтрока = Строка(Строка.Пол);
				
				//Крамаренко Д.М. BEGIN
				СтруктураДанныхСО = Новый Структура;
				Если ЗначениеЗаполнено(Строка.СпособОтраженияВБУСсылка) Тогда					
					СтруктураДанныхСО.Вставить("СчетДт", Строка.СпособОтраженияВБУСсылка.СчетДт.Код);
					//требуется только 2 субконто, 3-ий всегда перечисление хозспособ на счете 08.03
					Попытка
						СубконтоДт1 = Строка.СпособОтраженияВБУСсылка.СубконтоДт1;
						Если СубконтоДт1.Метаданные().ДлинаКода > 0	Тогда
							СтруктураДанныхСО.Вставить("КодСубконтоДт1", СубконтоДт1.Код);
							СтруктураДанныхСО.Вставить("НаименованиеДт1", СубконтоДт1.Наименование);
						Иначе
							СтруктураДанныхСО.Вставить("КодСубконтоДт1", "");
							СтруктураДанныхСО.Вставить("НаименованиеДт1", СубконтоДт1.Наименование);
						КонецЕсли;
					Исключение
					КонецПопытки;					
					Попытка
						СубконтоДт2 = Строка.СпособОтраженияВБУСсылка.СубконтоДт2;		
						Если СубконтоДт2.Метаданные().ДлинаКода > 0	Тогда
							СтруктураДанныхСО.Вставить("КодСубконтоДт2", СубконтоДт2.Код);
							СтруктураДанныхСО.Вставить("НаименованиеДт2", СубконтоДт2.Наименование);
						Иначе
							СтруктураДанныхСО.Вставить("КодСубконтоДт2", "");
							СтруктураДанныхСО.Вставить("НаименованиеДт2", СубконтоДт2.Наименование);
						КонецЕсли;		
					Исключение
					КонецПопытки;					
					Попытка
						СубконтоДт3 = Строка.СпособОтраженияВБУСсылка.СубконтоДт3;		
						Если НЕ Строка.СпособОтраженияВБУСсылка.СчетДт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств  Тогда			
							Если СубконтоДт3.Метаданные().ДлинаКода > 0	Тогда
								СтруктураДанныхСО.Вставить("КодСубконтоДт3", СубконтоДт3.Код);
								СтруктураДанныхСО.Вставить("НаименованиеДт3", СубконтоДт3.Наименование);
							Иначе
								СтруктураДанныхСО.Вставить("КодСубконтоДт3", "");
								СтруктураДанныхСО.Вставить("НаименованиеДт3", СубконтоДт3.Наименование);
							КонецЕсли;			
						КонецЕсли;
					Исключение
					КонецПопытки;
				Иначе
					СтруктураДанныхСО.Вставить("КодСубконтоДт1", "");
					СтруктураДанныхСО.Вставить("НаименованиеДт1", "");
					СтруктураДанныхСО.Вставить("КодСубконтоДт2", "");
					СтруктураДанныхСО.Вставить("НаименованиеДт2", "");
					СтруктураДанныхСО.Вставить("КодСубконтоДт3", "");
					СтруктураДанныхСО.Вставить("НаименованиеДт3", "");
					СтруктураДанныхСО.Вставить("СчетДт", "");
				КонецЕсли;
				Строка.СтруктураДанныхСО = СтруктураДанныхСО;
				//Крамаренко Д.М. END
				
			КонецЦикла;
			
			ТаблицаДляВыгрузки = Результат.Скопировать(, "Номер, Дата, Сотрудник, Организация,  СуммаПоДоговору, ВидРасчета, Комментарий, Ответственный, ДатаНачалаДоговора, 
			| ДатаОкончанияДоговора, ПодразделениеОрганизации, СпособОтраженияВБУ, КодВычета, ЦФУ, Фамилия, Имя, Отчество, ФизЛицо,
			| Контрагент, НомерДоговора, ДатаПодписания, ДатаНачалаГрафик, ДатаОкончанияГрафик, СуммаОплатыГрафик, СодержаниеГрафик, 
			| ВидДоговораСтрока, ВидАвторскогоДоговораСтрока, ХарактерОплатыСтрока, СтатусСтрока, ЦФО, ПричинаИзмененияСтатуса, СотрудникИзменившийСтатус, ПериодЗаписи, ПользовательИзменившийСтатус,ВНДоговора, ttk_ГруппаСпособовОтражения,
			//Крамаренко Д.М. BEGIN
			| СпособОтраженияРодитель, СтруктураДанныхСО");
			//Крамаренко Д.М. END
			//ДатаРождения, ПаспортныеДанные, АдресПоПрописке, АдресМестаЖительства, ПолСтрока");
			
			//Сообщить(ЗначениеВСтрокуВнутр(ТаблицаДляВыгрузки));
			
			СообщениеОбОшибке = "";
			ДокументСозданВИСУЗК = Ложь;
			Попытка
				ДокументСозданВИСУЗК = абс_WebServiceСервер.ИнициализацияDogovor_Act_Integration(Номер, Дата, ЗначениеВСтрокуВнутр(ТаблицаДляВыгрузки), СообщениеОбОшибке);
			Исключение	
				Сообщить(СообщениеОбОшибке);
				Сообщить("Не удалось создать документ в базе ИСУЗК!");
				СообщениеОбОшибке= "";
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				Сообщить(СообщениеОбОшибке);
				Сообщить("Не удалось создать документ в базе ИСУЗК!");
				Отказ = Истина;
				Возврат;
			КонецЕсли; 
			Если Не ДокументСозданВИСУЗК Тогда
				Сообщить("Не удалось создать документ в базе ИСУЗК!");
				Отказ = Истина;
				Возврат;
			Иначе
				//Сообщить("Документ создан в базе ИСУЗК");
			КонецЕсли;
						
			// Передача персональных данных
			Если мАдресПроживания = Неопределено Тогда
				мАдресПроживания = "";
			КонецЕсли;
			Если мАдресПрописки = Неопределено Тогда
				мАдресПрописки = "";
			КонецЕсли;
			//АБС+ Тупиков
			Если мАдресПроживанияПредставление = Неопределено Тогда
				мАдресПроживанияПредставление = "";
			КонецЕсли;
			Если мАдресПропискиПредставление = Неопределено Тогда
				мАдресПропискиПредставление = "";
			КонецЕсли;
			//АБС-
			Если мДатаРождения = Неопределено Тогда
				мДатаРождения = Дата(1, 1, 1);
			КонецЕсли;
			Если мИНН = Неопределено Тогда
				мИНН = "";
			КонецЕсли;
			Если мПол = Неопределено Тогда
				мПол = Перечисления.ПолФизическихЛиц.ПустаяСсылка();
			КонецЕсли;
			Если мСтраховойНомерПФР = Неопределено Тогда
				мСтраховойНомерПФР = "";
			КонецЕсли;
			Если мПаспорт = Неопределено Тогда
				мПаспорт = "";
			КонецЕсли;			
			
			//АБС ВСТАВКА №40545 НАЧАЛО «15 апреля 2014 г.», Пополитов
				//АБС ВСТАВКА 000024066  22.01.2014 11:51:37  Шамов
				//Если НЕ ЗначениеЗаполнено(мАдресПроживания)
				//	ИЛИ НЕ ЗначениеЗаполнено(мАдресПрописки)
				//	ИЛИ НЕ ЗначениеЗаполнено(мПаспорт)
				//	ИЛИ НЕ ЗначениеЗаполнено(мДатаРождения)
				//		Тогда
				//	//пустые данные не передаем
				//	Возврат;
				//КонецЕсли;
				//АБС ВСТАВКА 000024066 КОНЕЦ 			
			Если ЗначениеЗаполнено(мАдресПроживания)
				и ЗначениеЗаполнено(мАдресПрописки)
				и ЗначениеЗаполнено(мПаспорт)
				и ЗначениеЗаполнено(мДатаРождения) Тогда
				  			
				СообщениеОбОшибке = "";
				ПерсональныеДанныеЗаписаныВИСУЗК = Ложь;
				Попытка
					ПерсональныеДанныеЗаписаныВИСУЗК = абс_WebServiceСервер.ИнициализацияDogovor_PersonData_Put(Номер, 
					Дата, мДатаРождения, мПаспорт, мАдресПрописки, мАдресПроживания, мАдресПропискиПредставление, мАдресПроживанияПредставление, Строка(мПол), мСтраховойНомерПФР, мИНН, СообщениеОбОшибке);
				Исключение
					Сообщить(СообщениеОбОшибке);
					Сообщить("Не удалось записать персональные данные в базу ИСУЗК!");
					СообщениеОбОшибке = "";
					Отказ = Истина;
					Возврат;
				КонецПопытки;
				Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
					Сообщить(СообщениеОбОшибке);
					Сообщить("Не удалось записать персональные данные в базу ИСУЗК!");
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
				Если Не ПерсональныеДанныеЗаписаныВИСУЗК Тогда
					Сообщить("Не удалось записать персональные данные в базу ИСУЗК!");
					Отказ = Истина;
					Возврат;
				Иначе
					//Сообщить("Персональные данные переданы в базу ИСУЗК");
				КонецЕсли;
				
			КонецЕсли;
			//\\АБС ВСТАВКА №40545 КОНЕЦ
		КонецЕсли;
					
	// АБС ВСТАВКА КОНЕЦ 		
	КонецЕсли;

	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
    // Передаем файл в базу ИСУЗК. В случае успеха удаляем файл из ЕИСУП
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.ИмяФайла КАК Наименование,
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
	|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	ТЗФайлов = Запрос.Выполнить().Выгрузить();

	СписокФайлов = Новый Соответствие;
	Для Каждого ТекФайл Из ТЗФайлов Цикл
		ТекФайл = Новый Структура("Ссылка, Наименование", ТекФайл.Ссылка, ТекФайл.Ссылка.Наименование);
		СписокФайлов.Вставить(ТекФайл.Ссылка, ТекФайл);
	КонецЦикла;
	
	СообщениеОбОшибке = "";
	Попытка
		Результат = абс_WebServiceСервер.ИнициализацияDogovor_PersonData_PutFile(СписокФайлов, Ссылка, СообщениеОбОшибке, "Договор");
	Исключение
		Сообщить(СообщениеОбОшибке);
		СообщениеОбОшибке = "";
		//Отказ = Истина;
		//Возврат;
	КонецПопытки;
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщить(СообщениеОбОшибке);
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТЗФайлов Цикл
		ФайлОбъект = СтрокаТЗ.Ссылка.ПолучитьОбъект();
		ПутьКФайлу = Константы.абс_ПутьКВнешнемуХранилищу.Получить() + "/" + ФайлОбъект.Хранилище.Получить();
		
		Попытка
			УдалитьФайлы(ПутьКФайлу);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТЗФайлов Цикл
		ФайлОбъект = СтрокаТЗ.Ссылка.ПолучитьОбъект();
		Попытка
			ФайлОбъект.Удалить();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	Если Не СогласованиеБезБП Тогда
		ВыполнитьЗадачиПоБП(Отказ);
	КонецЕсли;
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
КонецПроцедуры

Процедура ВыполнитьЗадачиПоБП(Отказ) Экспорт
	
	Попытка
		//абс_БизнесПроцессы.ВыполнитьДвижениеПоРегиструСтатусовКадровыхДокументов(Ссылка);

		// Запустим БП если он еще не запущен
		Если  абс_СтатусДоговора = Перечисления.абс_СтатусыДоговоровПодряда.Подготовка Тогда
			
			БПСогласование = НайтиБПСогласование();
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияДоговораПодряда(Ссылка);	
			КонецЕсли;	
		КонецЕсли;
		
		// Попробуем закрыть задачу согласования
		ЗадачаСогласование = ПолучитьЗадачуПоДоговоруСогласование();
				
		Если НЕ ЗадачаСогласование = Неопределено Тогда
			Для Каждого Задача Из ЗадачаСогласование Цикл
				// {{ТТК Лапин А. Заявка № 05.08.2015 начало
				// 
				// {{Старый код:
				//ВыполнитьЗадачуСогласование(Задача);
				// {{Новый код:
				ЗадачаОбъект = Задача.ПолучитьОбъект();
				
				Если НЕ ЗадачаОбъект = Неопределено Тогда
				
					ВыполнитьЗадачуСогласование(Задача);
					
				Конецесли;
				// }}ТТК Лапин А. Заявка № 05.08.2015 окончание
			КонецЦикла;
		КонецЕсли;
						
	Исключение
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи договора подряда: " + ОписаниеОшибки() + ".", Отказ);
		
		Возврат;
		
	КонецПопытки;

КонецПроцедуры

// АБС ВСТАВКА СогласованиеДоговоров
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовДоговоровПодряда.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Договор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	ПериодЗаписи = абс_СерверныеФункции.ПолучитьДатуСервера();
	Запись.Период = ПериодЗаписи;

	Запись.Договор				= Ссылка;
	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусДоговора		= НовыйСтатус;
	
	Запись.Комментарий 			= абс_ПричинаИзмененияСтатуса;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоДоговоруПодряда(Ссылка, "абс_СогласованиеДоговоровПодряда");
	
КонецФункции

Функция ПолучитьЗадачуПоДоговоруСогласование()
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СпТочек = Новый Массив;
	
	ТекСтатус = Ссылка.абс_СтатусДоговора;
	
	Если ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеОтказ);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.ПодписаниеВторойСтороны Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ЗаполнениеДоговораПодряда);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.СогласованиеРуководителяЦФО Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ПодписаниеВторойСтороны);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.ПроверкаЭБ Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеРукЦФО);

	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.СогласованиеГлавнымБухгалтером Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ПроверкаЭБ);

	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.СогласованиеКадрами Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеГлавнымБухгалтером);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.ПроверкаПД Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеОтделомКадров);

	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.Подписание Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеПроверкаПД);

	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.РегистрацияСотрудника Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеПодписание);

	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.РегистрацияНомераДоговора Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеРегистрацияСотрудника);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.Исполнение Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеРегистрацияНомераДоговора);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеЗакрытиеБухгалтерией);
        СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеЗакрытиеОтделомКадров);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.ЗакрытиеБухгалтерией Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеИсполнение);

	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.ЗакрытиеОтделомКадров Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеЗакрытиеБухгалтерией);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.Закрыт Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеЗакрытиеОтделомКадров);
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыДоговоровПодряда.Отказ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ПодписаниеВторойСтороны);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеРукЦФО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ПроверкаЭБ);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ВыборВариантаПроверкаПД);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеГлавнымБухгалтером);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеСогласованиеОтделомКадров);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеПодписание);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеРегистрацияСотрудника);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеДоговоровПодряда.ТочкиМаршрута.ДействиеРегистрацияНомераДоговора);
		
	КонецЕсли;
			
	Возврат НайтиЗадачуПоДоговору(БП, СпТочек,,Ложь);

КонецФункции

Функция НайтиЗадачуПоДоговору(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина)
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В(&ТочкаМаршрута)
	                           |	И ВЫБОР
	                           |			КОГДА &ОтборПоИсполнителю
	                           |				ТОГДА абсЗадачаДоговора.Исполнитель = &Исполнитель
	                           |			ИНАЧЕ ИСТИНА
	                           |		КОНЕЦ
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель"		, Исполнитель);
	ЗапросЗадач.УстановитьПараметр("ОтборПоИсполнителю"	, ОтборПоИсполнителю);
	
	Возврат ЗапросЗадач.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
		// {{ТТК Лапин А. Заявка № 000033936 и подобная по договору... в почте 04.08.2015 начало
		// 
		// {{Старый код:
		// ЗадачаОбъект.ВыполнитьЗадачу();
        // }}Новый код:
		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось полностью выполнить задачу: "+ОписаниеОшибки());
		КонецПопытки;
		// }}ТТК Лапин А. Заявка № 000033936 и подобная по договору... в почте  04.08.2015 окончание
		
		Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс.ДоговорПодряда) Тогда
			
			БПОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();			
			БПОбъект.ДоговорПодряда = Ссылка;
			БПОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// АБС ВСТАВКА
	Организация = ОбъектКопирования.Организация;
	Подразделение = ОбъектКопирования.ПодразделениеОрганизации;
	абс_ЦФО = ОбъектКопирования.абс_ЦФО;
	абс_ЦФУ = ОбъектКопирования.абс_ЦФУ;
	абс_Фамилия = ОбъектКопирования.абс_Фамилия;
	абс_Имя = ОбъектКопирования.абс_Имя;
	абс_Отчество = ОбъектКопирования.абс_Отчество;
	ДатаНачала = ОбъектКопирования.ДатаНачала;
	ДатаОкончания = ОбъектКопирования.ДатаОкончания;
	ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.абс_ПоАктамВыполненныхРабот;
	
	Для Каждого СтрокаТЧ Из ОбъектКопирования.абс_ГрафикРабот Цикл
		
		Строка = абс_ГрафикРабот.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТЧ);
		
	КонецЦикла;
	
	СуммаЗаРаботу = абс_ГрафикРабот.Итог("СуммаОплаты");
	
	Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПустаяСсылка();
	Комментарий = "";
	СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	КодВычета = Справочники.ВычетыНДФЛ.ПустаяСсылка();
	абс_ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	абс_Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	абс_НомерДоговора = "";
	абс_ДатаПодписания = Дата(1, 1, 1);
	абс_ПричинаИзмененияСтатуса = "";
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");