Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;
Перем мСчетФактура;
Перем ДокументОтгрузкиОбъект;
Перем УчетнаяПолитикаРегл;
Перем мИспользоватьРасширеннуюАналитику, мДатаНачалаИспользованияРасширеннойАналитики Экспорт;
Перем СтруктураШапкиДокументаОтгрузки;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента) Экспорт

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете)
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаРегл = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
    СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке = УчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке;
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()


Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено, Отказ) Экспорт
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
    СтруктураШапкиДокументаОтгрузки = Неопределено;
	СтруктураШапкиЭтогоДокумента = ttk_ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		//Полная структура шапки не нужна - такой документ не будем проводить
		СтруктураШапкиДокумента = СтруктураШапкиЭтогоДокумента;
		Возврат;
	КонецЕсли;

	ДокументОтгрузкиОбъект = ДокументОтгрузки.ПолучитьОбъект();
	
	// Сформируем структуру реквизитов шапки документа РТиУ
	ДокументОтгрузкиОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокументаОтгрузки,,Отказ);
	
	// Курсы валют определяем на дату текущего документа
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаУправленческогоУчета"), СтруктураШапкиЭтогоДокумента.Дата);
	СтруктураШапкиДокументаОтгрузки.Вставить("КурсВалютыУправленческогоУчета", СтруктураКурса.Курс);
	СтруктураШапкиДокументаОтгрузки.Вставить("КратностьВалютыУправленческогоУчета", СтруктураКурса.Кратность);
	
	Если СтруктураШапкиДокументаОтгрузки.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокументаОтгрузки.ВалютаДокумента, СтруктураШапкиЭтогоДокумента.Дата);
		СтруктураШапкиДокументаОтгрузки.Вставить("КурсДокумента", СтруктураКурса.Курс);
		СтруктураШапкиДокументаОтгрузки.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	КонецЕсли;
	
	Если СтруктураШапкиДокументаОтгрузки.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокументаОтгрузки.ВалютаВзаиморасчетов, СтруктураШапкиЭтогоДокумента.Дата);
		СтруктураШапкиДокументаОтгрузки.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
		СтруктураШапкиДокументаОтгрузки.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	КонецЕсли;

	СтруктураШапкиДокумента = новый Структура;
	Для каждого ЭлементСтруктуры Из СтруктураШапкиДокументаОтгрузки Цикл
		СтруктураШапкиДокумента.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	//Переопределяем параметры шапки, которые задаются текущим документом
	СтруктураШапкиДокумента.Вставить("ДатаДокументаОтгрузки", СтруктураШапкиДокументаОтгрузки.Дата);
	СтруктураШапкиДокумента.Вставить("ДокументОтгрузки", СтруктураШапкиЭтогоДокумента.ДокументОтгрузки);
	ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, СтруктураШапкиЭтогоДокумента, "Дата, Ссылка, ВидДокумента, ПредставлениеВидаДокумента");
	
	//Признаки отражения в учете - из текущего документа (с учетом возможного отложенного проведения) 
	ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, СтруктураШапкиЭтогоДокумента, "ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете");
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", СтруктураШапкиЭтогоДокумента.ОтражатьВНалоговомУчетеУСН);
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа",			Ложь);
	
	СтруктураШапкиДокумента.Вставить("Комиссионер",			СтруктураШапкиДокумента.Контрагент);	//для контроля остатков регистра ТоварыОрганизаций
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
   	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, ДокументОтгрузки");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если не РазрешенаОтгрузкаБезПереходаПраваСобственности() Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Реализация отгруженных товаров может выполняться только при использовании расширенной аналитики учета затрат", Отказ, Заголовок);
	КонецЕсли;

	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
		
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОтгрузки) Тогда
		Если НЕ СтруктураШапкиДокумента.ДокументОтгрузки.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			СтрокаСообщения = "Указанный документ отгрузки не регистрирует отгрузку без перехода права собственности!";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ СтруктураШапкиДокумента.ДокументОтгрузки.Проведен Тогда
			СтрокаСообщения = "В качестве документа отгрузки указан не проведенный документ!";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ, Заголовок);
		КонецЕсли;
		Если НачалоДня(СтруктураШапкиДокумента.Дата)<НачалоДня(СтруктураШапкиДокумента.ДатаДокументаОтгрузки) Тогда
			СтрокаСообщения = "Дата документа отгрузки позже даты документа!";
			ttk_ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	Перем ТаблицаПоУслугам, ТаблицаПоТаре, Заголовок;

	ДокументОтгрузкиОбъект = ДокументОтгрузки.ПолучитьОбъект();
	ДокументОтгрузкиОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,Отказ, Заголовок)
    ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
    ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
    ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,Отказ, Заголовок, СтруктураШапкиДокумента);

	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Движения.Налоговый.Модифицированность() Тогда
			Движения.Налоговый.Записать();
		КонецЕсли;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
		|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал, ПринадлежностьНоменклатуры, Комиссионный, Комитент, ДоговорКомиссии, СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Количество");
		
		ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки, , Истина);
		ВыручкаПоТоварам.ЗаполнитьЗначения(Ложь, "Комиссионный");		
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ВыручкаПоТоварам, Отказ);
		
	КонецЕсли;
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);

КонецПроцедуры

// Формируем движения по регистру ТоварыОрганизаций
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество()=0 Тогда Возврат; КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
		ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)

	Если не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
        Возврат;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Приход, Отказ, Заголовок);
	
	КопияТовары = ТаблицаПоТоварам.Скопировать();
	
	ТабИменТовары = Неопределено;
	ttk_ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
	ttk_ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
	
	// ТОВАРЫ ПО РЕГИСТРУ Продажи.
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		
		// В этом случае таблицы документа обрабатываются особым образом
		ТаблицаДвиженийТовары = Движения.Продажи.ВыгрузитьКолонки();
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, СтруктураШапкиДокумента.Проект, СтруктураШапкиДокумента.Дата, "Продажи");
		
		// Вставляем уже подготовленные таблицы движений
		ТаблицыДанныхДокумента = Новый Структура;
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
		
	Иначе
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
		ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
		
	КонецЕсли;
	
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        СтруктураШапкиДокумента.Организация);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         СтруктураШапкиДокумента.Контрагент);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    СтруктураШапкиДокумента.Ссылка);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      СтруктураШапкиДокумента.Подразделение);
	
	// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
	КонецЕсли;
	
	ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
	СтруктТаблицДокумента = Новый Структура;
	Если ТаблицаПоТоварам.Количество()>0 Тогда
		ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
    КонецЕсли;
	КопияТовары = ТаблицаПоТоварам.Скопировать();
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
	КонецЕсли;	
	СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
	
	ТаблицыДанныхДокумента = ttk_ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);
	
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
	
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ttk_ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка);
	КонецЕсли;
	ttk_ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам
		);

	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
		
	ТаблицаВыручкиДляБУ = ТаблицаПоТоварам.Скопировать( , "СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
	ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ", "СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
	
	ДатаДока   = Дата;
	Счет91     = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	
	// Проводки по выручке и НДС без списания партий
	Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл
		
		// Выручка
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                 = ДатаДока;
		Проводка.Организация            = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание 			= "Реализация отгруженных товаров";
		Проводка.СписаниеПартий         = Истина;
		Проводка.Сумма = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
		
		Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
		КонецЕсли; 
		
		Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
		Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
			Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС 
			И СтрокаТЧ.НДС <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период               = ДатаДока;
			Проводка.Организация          = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание           = "Реализация отгруженных товаров";
			Проводка.СписаниеПартий       = Истина;
			
			Проводка.СчетДт = ?( БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, Счет91), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС);
			Для каждого СубконтоСчета Из Проводка.СчетДт.ВидыСубконто Цикл
				Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
			
			Если не СтруктураШапкиДокумента.Свойство("МоментОпределенияНалоговойБазыНДС") Тогда
				Если ЗначениеЗаполнено(УчетнаяПолитикаРегл)
					И ЗначениеЗаполнено(УчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС) 
					Тогда
					МоментОпределенияНалоговойБазыНДС = УчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС;
				Иначе
					МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
				КонецЕсли; 
				СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС",МоментОпределенияНалоговойБазыНДС);
			КонецЕсли; 
			
			Если СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
			ИначеЕсли СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", СтруктураШапкиДокумента.ДокументОтгрузки);
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			КонецЕсли;
			
			Проводка.Сумма                = СтрокаТЧ.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	
	//Отражение взаиморасчетов по реализации товаров
	// Проводки по взаиморасчетам
	СуммаПоТоварам = ТаблицаПоТоварам.Итог("СуммаБезНДСВал") + ТаблицаПоТоварам.Итог("НДСВал");
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок, СуммаПоТоварам, ТаблицаПоВзаиморасчетам);
	
	Если СтруктураПараметровЗачетАванса = Ложь тогда
		Отказ       = Истина;
		СуммаАванса = 0;
	Иначе
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ТаблицаПоТоварам);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;// Проводки по взаиморасчетам
	
	
	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ, , Истина);
		БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	Конецесли;

КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ВыручкаПоТоварам, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)
		И Не ВыручкаПоТоварам.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ВыручкаПоТоварам, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента), , Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента,	ТаблицаПоТоварам)
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Документы.ТипВсеСсылки());
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
		
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
		
		СтрокаНовойТаблицы.СчетНДС = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
		
		СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
		
		КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
		
		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
			Конецесли;
		КонецЦикла; 
		
		КоррСчет = СтрокаНовойТаблицы.СчетНДС;
		
		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
			Конецесли;
		КонецЦикла; 
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
				Конецесли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента,
										  |, Организация, ВалютаРегламентированногоУчета
	                                      |, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
										  |, НДСВключенВСтоимость
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |,НачислятьНДСПоОтгрузке,ДокументОтгрузки,ВидОперации");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	СтруктураПараметров.Вставить("УчетАгентскогоНДС",ложь);	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Выбытие");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция РазрешенаОтгрузкаБезПереходаПраваСобственности() Экспорт
	Возврат мИспользоватьРасширеннуюАналитику И 
		(НачалоДня(мДатаНачалаИспользованияРасширеннойАналитики)<=НачалоДня(Дата)
		ИЛИ НЕ ЗначениеЗаполнено(Дата));
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
    Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения, Отказ);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
    Если Отказ Тогда
		Возврат;
	КонецЕсли;
    ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокументаОтгрузки, ТаблицаПоТоварам);

	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", истина);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары", ТаблицаПоТоварам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
		Отказ, Заголовок);

	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОтгрузки, "Товары");
	Иначе
		СуммаДокумента = 0;
	КонецЕсли;
	мСчетФактура = УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");

	//признаки отражения в учете возьмем из ДокументОтгрузки - эти флаги всегда должны совпадать
	Если значениеЗаполнено(ДокументОтгрузки) Тогда
		ОтражатьВУправленческомУчете = ДокументОтгрузки.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете = ДокументОтгрузки.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете = ДокументОтгрузки.ОтражатьВНалоговомУчете;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	Если мСчетФактура = неопределено Тогда
		//кэшируем значение переменной
		мСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру( Ссылка, "СчетФактураВыданный");
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект,,, мСчетФактура);

КонецПроцедуры


#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;


	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ), Ссылка);

КонецПроцедуры // Печать

Процедура ОбработкаЗаполнения(Основание)
	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		Возврат;
	КонецЕсли;
		
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	Сделка = Основание.Сделка;    	
	ДокументОтгрузки = Основание;
	ОтражатьВУправленческомУчете 	= Основание.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете 	= Основание.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете 		= Основание.ОтражатьВНалоговомУчете;
КонецПроцедуры


#КонецЕсли

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
мИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
