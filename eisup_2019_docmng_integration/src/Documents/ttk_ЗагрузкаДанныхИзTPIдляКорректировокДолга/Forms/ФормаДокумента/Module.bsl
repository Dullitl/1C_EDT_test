
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МесяцЗагрузки.Вариант = ВариантСтандартногоПериода.Месяц;
	Если Объект.ПериодЗагрузки = Дата("00010101") ТОгда
		
		МесяцЗагрузки.ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса());	
		МесяцЗагрузки.ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	иначе
		МесяцЗагрузки.ДатаНачала = НачалоМесяца(Объект.ПериодЗагрузки);	
		МесяцЗагрузки.ДатаОкончания = КонецМесяца(Объект.ПериодЗагрузки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ТОгда 
		Объект.Ответственный =  глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНаСервере()
	Объект.ДанныеКвитования.Очистить();
	
	ТаблицаТПИ = ЗагрузитьДаныеИзTPI();	
	Если ТаблицаТПИ.Количество() > 0 ТОгда
		   Объект.ДанныеКвитования.Загрузить(ТаблицаТПИ);
		//Для каждого СтрокаТаблицы из ТаблицаТПИ ТОгда
		//	 НоваяСтрока = Объект.ДанныеКвитования.Добавить();
		//	 НоваяСтрока.Контрагент = СтрокаТаблицы.Контрагент;
		//	 НоваяСтрока.ДоговорКонтрагента = СтрокаТаблицы.ДоговорСсылка;
		//	 
		//КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


Функция ЗагрузитьДаныеИзTPI()
	Отказ = ложь;
	ТЗ_Платежей = Новый ТаблицаЗначений;
	Массив = Новый массив;
	Массив.Добавить("TRANSDATE");
	Массив.Добавить(Формат(НачалоМесяца(Объект.ПериодЗагрузки),"ДФ=yyyy-MM-dd"));

	
	ОбщегоНазначения.ttk_ПолучитьТаблицуИзTPIпоНастройкеОбмена(Отказ,"000000500.Загрузка данных квитования",ТЗ_Платежей,истина,Массив);
	Если  ТЗ_Платежей.Количество() = 0 ТОгда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТПИ.TRANSDATE,
		|	ТаблицаТПИ.LSCHET,
		|	ТаблицаТПИ.KODDOG_EISUP,
		|	ТаблицаТПИ.SUMMAKVIT,
		|	ВЫРАЗИТЬ(ТаблицаТПИ.CURRENCY_ID КАК СТРОКА(3)) КАК CURRENCY_ID,
		|	ТаблицаТПИ.FLAG_AGR
		|ПОМЕСТИТЬ ВТ_ТаблицаТПИ
		|ИЗ
		|	&ТаблицаТПИ КАК ТаблицаТПИ
		|ГДЕ
		|	(ВЫРАЗИТЬ(ТаблицаТПИ.CURRENCY_ID КАК СТРОКА(3))) = ""810""
		|	И (ВЫРАЗИТЬ(ТаблицаТПИ.FLAG_AGR КАК СТРОКА(1))) = ""N""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорСсылка,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_ТаблицаТПИ.SUMMAKVIT, 0) КАК ЧИСЛО(15, 2)) КАК СуммаКвитования,
		|	ВТ_ТаблицаТПИ.FLAG_AGR КАК ПризнакАгр,
		|	ВТ_ТаблицаТПИ.CURRENCY_ID
		|ПОМЕСТИТЬ ВТ_ТаблицаДоговоров
		|ИЗ
		|	ВТ_ТаблицаТПИ КАК ВТ_ТаблицаТПИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ((ВЫРАЗИТЬ(ВТ_ТаблицаТПИ.LSCHET КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ДоговорыКонтрагентов.абс_ЛицевойСчетБиллинга КАК СТРОКА(50))))
		|			И (ВЫБОР
		|				КОГДА ПОДСТРОКА(ЕСТЬNULL(ВТ_ТаблицаТПИ.KODDOG_EISUP, """"), 1, 1) = """"
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ (ВЫРАЗИТЬ(ВТ_ТаблицаТПИ.KODDOG_EISUP КАК СТРОКА(9))) = (ВЫРАЗИТЬ(ДоговорыКонтрагентов.Код КАК СТРОКА(9)))
		|			КОНЕЦ)
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_ТаблицаТПИ.SUMMAKVIT, 0) КАК ЧИСЛО(15, 2)),
		|	ВТ_ТаблицаТПИ.FLAG_AGR,
		|	ВТ_ТаблицаТПИ.CURRENCY_ID
		|ИЗ
		|	ВТ_ТаблицаТПИ КАК ВТ_ТаблицаТПИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ((ВЫРАЗИТЬ(ВТ_ТаблицаТПИ.KODDOG_EISUP КАК СТРОКА(9))) = (ВЫРАЗИТЬ(ДоговорыКонтрагентов.Код КАК СТРОКА(9))))
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаДоговоров.ДоговорСсылка КАК ДоговорКонтрагента,
		|	МАКСИМУМ(ВТ_ТаблицаДоговоров.СуммаКвитования) КАК Сумма,
		|	ВТ_ТаблицаДоговоров.ДоговорСсылка.Владелец КАК Контрагент,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаДоговоров.ПризнакАгр КАК СТРОКА(10)) КАК ПризнакАгр,
		|	ВТ_ТаблицаДоговоров.CURRENCY_ID КАК КодВалюты
		|ИЗ
		|	ВТ_ТаблицаДоговоров КАК ВТ_ТаблицаДоговоров
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаДоговоров.ДоговорСсылка,
		|	ВТ_ТаблицаДоговоров.ДоговорСсылка.Владелец,
		|	ВТ_ТаблицаДоговоров.CURRENCY_ID,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаДоговоров.ПризнакАгр КАК СТРОКА(10))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ТаблицаТПИ",ТЗ_Платежей);
	РезультатЗапроса = Запрос.Выполнить();
	ЕСли РезультатЗапроса.Пустой() ТОгда
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат  РезультатЗапроса.Выгрузить();
	КонецЕсли;	
	
КонецФункции


&НаКлиенте
Процедура ЗаполнитьТаблицу(Команда)
	ЗаполнитьТаблицуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МесяцЗагрузкиПриИзменении(Элемент)
Объект.ПериодЗагрузки = НачалоМесяца(МесяцЗагрузки.ДатаОкончания);	
ЭтаФорма.Модифицированность =истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.ПериодЗагрузки = НачалоМесяца(МесяцЗагрузки.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкиНаСервере(ИндексСтроки)
	Если Объект.ДанныеКвитования[ИндексСтроки].ДоговорКонтрагента.ВалютаВзаиморасчетов =  Константы.ВалютаУправленческогоУчета.Получить() ТОгда
		ОбработкаДанныхПоДоговору(Объект.ДанныеКвитования[ИндексСтроки]);
	КонецЕсли;	
	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировки(Команда)
	МенюОпераций=Новый СписокЗначений;
	МенюОпераций.Добавить(1,"По всем строкам");
	МенюОпераций.Добавить(2,"По выделенным строкам");
	МенюОпераций.Добавить(3,"По строкам без документа корректировки долга");
	КолСтрок=Элементы.ДанныеКвитования.ВыделенныеСтроки.Количество();
	
	ВыбраннаяОперация=МенюОпераций.ВыбратьЭлемент("Выбрано документов - "+КолСтрок);
	
	Если ВыбраннаяОперация  = Неопределено Тогда
	ИначеЕсли ВыбраннаяОперация.Значение = 1 Тогда
		КолСтрок = Объект.ДанныеКвитования.Количество();
		Для каждого Стр Из Объект.ДанныеКвитования Цикл
			Состояние("Обрабатывается строка "+строка(Стр.НомерСтроки)); 
			СоздатьКорректировкиНаСервере(Объект.ДанныеКвитования.Индекс(Стр));
			ОбработкаПрерыванияПользователя();
		КонецЦикла;

	ИначеЕсли ВыбраннаяОперация.Значение = 2 Тогда
		КолСтрок=Элементы.ДанныеКвитования.ВыделенныеСтроки.Количество();
		ВСтроки=Новый Массив;
		Для каждого Стр Из Элементы.ДанныеКвитования.ВыделенныеСтроки Цикл
			Состояние("Обрабатывается строка "+строка(Стр+1)); 
			СоздатьКорректировкиНаСервере(Стр);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		Элементы.ДанныеКвитования.ВыделенныеСтроки.Очистить();
	ИначеЕсли ВыбраннаяОперация.Значение = 3 Тогда
		КолСтрок = Объект.ДанныеКвитования.Количество();
		Для каждого Стр Из Объект.ДанныеКвитования Цикл
			ЕСли ЗначениеЗаполнено(Стр.КорректировкаДолга) ТОгда
				Продолжить;
			КонецЕсли;	
			Состояние("Обрабатывается строка "+строка(Стр.НомерСтроки)); 
			СоздатьКорректировкиНаСервере(Объект.ДанныеКвитования.Индекс(Стр)); 
			ОбработкаПрерыванияПользователя();
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаДанныхПоДоговору(ДанныеКвитования);
	НачатьТранзакцию();
	Если  ДанныеКвитования.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом ТОгда
		ДоговорОбъект = ДанныеКвитования.ДоговорКонтрагента.ПолучитьОбъект();
		ДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = ложь;
		ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		ДоговорОбъект.Записать();
	КонецЕсли;
	
	ДокКорректировка = СоздаемДокументКорректировкиЗаписей("#Обнуление регистров");
	
	ДвиженияУчетЗатрат = ДокКорректировка.Движения.ВзаиморасчетыСКонтрагентами;
	ДвиженияУчетЗатрат.Загрузить(ПолучитьТаблицуВзаиморасчетыСКонтрагентами(ДокКорректировка.Ссылка,ДанныеКвитования));
	
	ДвиженияУчетЗатрат = ДокКорректировка.Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
	ДвиженияУчетЗатрат.Загрузить(ПолучитьТаблицуВзаиморасчетыСКонтрагентамиПоДокументамРасчетов(ДанныеКвитования,ДокКорректировка.Ссылка));
	
	ДвиженияУчетЗатрат.записать();
	Сообщить("Создан документ "+ СокрЛП(ДокКорректировка.Ссылка));
	
	
	ФормируемКорректрировкуДолга(ДанныеКвитования);
	ЭтотОбъект.Записать();	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Функция  СоздаемДокументКорректировкиЗаписей(Комментарий)
	ДокОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
	ДокОбъект.Дата = КонецДня(МесяцЗагрузки.ДатаОкончания);
	
	ДокОбъект.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
	ДокОбъект.Комментарий	= СокрЛП(Комментарий);
	     Таб = ДокОбъект.ТаблицаРегистровНакопления.Добавить();
		Таб.Имя				= "ВзаиморасчетыСКонтрагентами";
		Таб.Представление	= "Взаиморасчеты с контрагентами";
		
		
		Таб = ДокОбъект.ТаблицаРегистровНакопления.Добавить();
		Таб.Имя				= "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов";
		Таб.Представление	= "Взаиморасчеты с контрагентами по документам расчетов";
		
	ДокОбъект.Записать();
	Возврат ДокОбъект;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуВзаиморасчетыСКонтрагентами(Регистратор,ДанныеКвитования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр,
		|	&Период,
		|	&Регистратор,
		|	ИСТИНА КАК Активность,
		|	&ВидДвижения
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДанныеКвитования.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", ДанныеКвитования.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат  Результат;
КонецФункции

&НаСервере
Функция ПолучитьТаблицуВзаиморасчетыСКонтрагентамиПоДокументамРасчетов(ДанныеКвитования,Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Период,
		|	&Регистратор,
		|	ИСТИНА КАК Активность,
		|	&ВидДвижения,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ВидРасчетовСКонтрагентом,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.УпрУчет,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаРеглОстаток КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДанныеКвитования.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", ДанныеКвитования.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат  Результат;
КонецФункции

&НаСервере
Процедура  ФормируемКорректрировкуДолга(ДанныеКвитования)
	Если ЗначениеЗаполнено(ДанныеКвитования.КорректировкаДолга) ТОгда
		ДокОбъект = ДанныеКвитования.КорректировкаДолга.ПолучитьОбъект();
	Иначе
		ДокОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
		ДокОбъект.Дата = КонецДня(МесяцЗагрузки.ДатаОкончания);
		ДокОбъект.Организация = Объект.Организация;
		ДокОбъект.ОтражатьВУправленческомУчете = истинА;
		ДокОбъект.ОтражатьВБухгалтерскомУчете = истинА;
		ДокОбъект.ОтражатьВНалоговомУчете = истинА;
		ДокОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета;
		
	КонецЕсли;
	
		
	ДокОбъект.КонтрагентДебитор = ДанныеКвитования.Контрагент;
	ДокОбъект.КонтрагентКредитор = ДанныеКвитования.Контрагент;
	ДокОбъект.ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
	
	ТабЧасть = ДокОбъект.СуммыДолга;
	ТабЧасть.Очистить();
	
	НоваяСТрока = ТабЧасть.Добавить();
	НоваяСТрока.ДоговорКонтрагента = ДанныеКвитования.ДоговорКонтрагента;
	НоваяСТрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
	НоваяСТрока.Сумма =  ДанныеКвитования.Сумма;
	НоваяСТрока.СуммаРегл = ДанныеКвитования.Сумма;
	НоваяСТрока.СуммаНУ = ДанныеКвитования.Сумма;
	НоваяСТрока.КурсВзаиморасчетов = 1;
	НоваяСТрока.КратностьВзаиморасчетов = 1;
	НоваяСТрока.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	НоваяСТрока.СчетУчетаАвансов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	
	НоваяСТрока = ТабЧасть.Добавить();
	НоваяСТрока.ДоговорКонтрагента = ДанныеКвитования.ДоговорКонтрагента;
	НоваяСТрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
	НоваяСТрока.Сумма =  ДанныеКвитования.Сумма;
	НоваяСТрока.СуммаРегл = ДанныеКвитования.Сумма;
	НоваяСТрока.СуммаНУ = ДанныеКвитования.Сумма;
	НоваяСТрока.КурсВзаиморасчетов = 1;
	НоваяСТрока.КратностьВзаиморасчетов = 1;
	НоваяСТрока.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	НоваяСТрока.СчетУчетаАвансов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	
	
	
	ДокОбъект.Ответственный = глЗначениеПеременной("глТекущийПользователь");;
	ДокОбъект.Комментарий = "#Квитование платежей";
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);	
	ДанныеКвитования.КорректировкаДолга =ДокОбъект.Ссылка; 
	
КонецПроцедуры
