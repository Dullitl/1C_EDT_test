
Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбъектКопирования);
	Проведен = Ложь;
	ПометкаУдаления = Ложь;
	Номер = "";
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПустаяСсылка();
	ДокументДвижений = Документы.КорректировкаЗаписейРегистров.ПустаяСсылка();
	ДокументДвиженийОпераияБух = Документы.ОперацияБух.ПустаяСсылка();
	Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка;
	ПредварительныеДанные.Очистить();
	ПредварительныеДанныеНУ.Очистить();
	ПредварительныеДанныеЗаполнены = Ложь;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если УстановкаПометкиУдаления(Отказ) Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьПовторныйВводОперации(Отказ);
	ПроверитьВводПоОтдельнымСчетам(Отказ);
	
	ПроверитьЗаполнениеОперацияНаправлениеПереноса(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	ЗапонлитьПредставлениеСпискаСчетов();
	ДатаПереноса = ПолучитьДатуПереноса();
	ПроверитьДатуРеорганизации(ДатаПереноса, Отказ);
	РежимЗаписи = ПолучитьРежимЗаписиДокумента();
	
	Если НЕ Операция.СозданиеСправочников Тогда	
		СоздатьДокументДвижений(ДатаПереноса);
		СоздатьДокументДвиженийОпераияБух(ДатаПереноса);
		ПроверитьЗакрытыеСчета(ДатаПереноса, Отказ);
		ПроверитьЗакрытыеСубСчета(ДатаПереноса, Отказ);
	Иначе
		ПроверитьНастройкиГруппСправочников(Отказ);			
	КонецЕсли;		
			
	ПроверитьНДСсАвансов(Отказ);
	ПроверитьЗаполнениеПредварительныхДанных(Отказ);
	ПроверитьСубконто69(Отказ);
	ПроверитьЗаполнениеОбособленногоПодразделения(Отказ);
	ПроверитьОтрицательныеСуммыНУ(Отказ);
		
	//ЗаполнитьПредварительныеДанные(Истина, Отказ);
	//ЗаполнитьПредварительныеДанныеНУ(Истина, Отказ);
		
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	абс_Филиализация.ОчиститьДвиженияДокументаПереноса(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
			
	Если Статус = Перечисления.абс_СтатусыПереносДанных.ОжидаетФормированиеДвижений Тогда
		
		МенеджерЗаписи = РегистрыСведений.абс_СостояниеДокументовПереноса.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Ссылка;
		МенеджерЗаписи.Операция = Операция;
		МенеджерЗаписи.НаправлениеПереноса = НаправлениеПереноса;
		МенеджерЗаписи.Проведен = Ложь;
		МенеджерЗаписи.ЕстьОшибки = Ложь;
		МенеджерЗаписи.Записать();			
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыПереносДанных.ВыполненПеренос
		И Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
				
		Движения.абс_ВыполненныеПереносы.Очистить();
		Движения.абс_ВыполненныеПереносы.Записать();
		Движения.абс_ВыполненныеПереносы.Записывать = Истина;
		Запись = Движения.абс_ВыполненныеПереносы.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ЭтотОбъект);
		
		абс_Привилегированный.ЗапонлитьСуммуОперацииБух(ДокументДвиженийОпераияБух);	
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	абс_Филиализация.ОчиститьДвиженияДокументаПереноса(Ссылка);
	
	Движения.абс_ВыполненныеПереносы.Записать();
	
	абс_Привилегированный.ОчиститьСуммуОперацииБух(ДокументДвиженийОпераияБух);
	
	НаборЗаписей = РегистрыСведений.абс_СостояниеДокументовПереноса.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Записать();
	
	СледующиеНаправления = Перечисления.абс_НаправленияПереноса.ПолучитьСледующиеНаправления(НаправлениеПереноса);
	Для Каждого Направление Из СледующиеНаправления Цикл
		ДокументПереноса = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(ДЗО, Операция, Направление, СчетаБУНУ.ВыгрузитьКолонку("Счет"));
		Если ДокументПереноса.Проведен Тогда
			ДокументОбъект = ДокументПереноса.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка;
	
КонецПроцедуры




Процедура СоздатьДокументДвижений(ДатаПереноса)
	
	СоздаватьДокумент = Ложь;
	
	Если Не ЗначениеЗаполнено(ДокументДвижений) Тогда
		СоздаватьДокумент = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументДвижений) Тогда 
		Если ДокументДвижений.ПолучитьОбъект() = Неопределено Тогда 
			СоздаватьДокумент = Истина;
		Иначе
			Если ДокументДвижений.абс_ОрганизацияИсточник <> ДЗО Тогда 
				СоздаватьДокумент = Истина;
			ИначеЕсли ДокументДвижений.абс_ОрганизацияПриемник <> Филиал Тогда 
				СоздаватьДокумент = Истина;
			ИначеЕсли (ДокументДвижений.Дата <> ДатаПереноса) И (Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка) Тогда 
				СоздаватьДокумент = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ СоздаватьДокумент Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументДвижений) Тогда
		ДокументДвиженийОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
	Иначе
		ДокументДвиженийОбъект = ДокументДвижений.ПолучитьОбъект();
		Если ДокументДвиженийОбъект=Неопределено Тогда
			ДокументДвиженийОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		КонецЕсли;
	КонецЕсли;
	
	ДокументДвиженийОбъект.абс_ОрганизацияИсточник = ДЗО;
	ДокументДвиженийОбъект.абс_ОрганизацияПриемник = Филиал;
	ДокументДвиженийОбъект.абс_Заблокирована = Истина;
	ДокументДвиженийОбъект.Дата = ?(ДатаПереноса = Неопределено, Дата, ДатаПереноса);
	ДокументДвиженийОбъект.Записать(РежимЗаписиДокумента.Запись);			
	ДокументДвижений = ДокументДвиженийОбъект.Ссылка;
	
КонецПроцедуры

Процедура СоздатьДокументДвиженийОпераияБух(ДатаПереноса)
	
	Если НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПриемИзКТТКВФилиал Тогда 
		Возврат;
	КонецЕсли;
			
	СтруктураПараметров = Новый Структура("Орг, ДатаПереноса, СоздаватьДокумент, ДЗО, Филиал, Операция, НаправлениеПереноса,
											| ДокументДвиженийОпераияБух, Статус, Дата, ПометкаУдаления");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	
	СтруктураПараметров.Орг = ПолучитьОрганизацияПоНаправлениюПереноса();
	СтруктураПараметров.ДатаПереноса = ДатаПереноса;
	СтруктураПараметров.СоздаватьДокумент = Ложь;

	абс_Привилегированный.СоздатьДокументДвиженийОпераияБух(СтруктураПараметров);
	
	Если СтруктураПараметров.СоздаватьДокумент Тогда  
		ДокументДвиженийОпераияБух = СтруктураПараметров.ДокументДвиженийОпераияБух;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПовторныйВводОперации(Отказ)
	
	Если Операция = Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	абс_ПереносДанных.Ссылка
	                      |ИЗ
	                      |	Документ.абс_ПереносДанных КАК абс_ПереносДанных
	                      |ГДЕ
	                      |	абс_ПереносДанных.ДЗО = &ДЗО
	                      |	И абс_ПереносДанных.Операция = &Операция
	                      |	И абс_ПереносДанных.НаправлениеПереноса = &НаправлениеПереноса
	                      |	И абс_ПереносДанных.Ссылка <> &Ссылка
	                      |	И НЕ абс_ПереносДанных.ПометкаУдаления
	                      |	И абс_ПереносДанных.Ссылка <> ЗНАЧЕНИЕ(Справочник.абс_ВидыОперацийПереносаДанных.ПоСчетам)");
						  
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("НаправлениеПереноса", НаправлениеПереноса);
	Запрос.УстановитьПараметр("ДЗО", ДЗО);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Для %1 по операции %2, %3 уже введен документ: %4", 
																				ДЗО, 
																				Операция, 
																				НаправлениеПереноса, 
																				Выборка.Ссылка);
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВводПоОтдельнымСчетам(Отказ)
	
	Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
		Возврат;
	КонецЕсли;
	
	МассивСчетовПереноса = ПолучитьМассивСчетовПереноса();
		
	МассивНекорректныхСчетовОС = Новый Массив;
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("03.01"));
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"));
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.02"));
	
	МассивНекорректныхСчетовНМА = Новый Массив;
	МассивНекорректныхСчетовНМА.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("04.01"));
	МассивНекорректныхСчетовНМА.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("05"));
	
	Для Каждого счетПереноса из МассивСчетовПереноса Цикл 
		
		Для Каждого счетОС из МассивНекорректныхСчетовОС Цикл 
			Если счетПереноса = счетОС ИЛИ счетОС.ПринадлежитЭлементу(счетПереноса) Тогда 
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Для корреткного переноса счета " + Строка(счетПереноса) + " необходимо использовать операцию ""01,02,03  + Регистры (Передача из ДЗО в Филиал)""", Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого счетНМА из МассивНекорректныхСчетовНМА Цикл 
			Если счетПереноса = счетНМА ИЛИ счетНМА.ПринадлежитЭлементу(счетПереноса) Тогда 
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Для корреткного переноса счета " + Строка(счетПереноса) + " необходимо использовать операцию ""04,05 + Регистры (Передача из ДЗО в Филиал)""", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	абс_ПереносДанныхСчетаБУНУ.Ссылка
	                      |ИЗ
	                      |	Документ.абс_ПереносДанных.СчетаБУНУ КАК абс_ПереносДанныхСчетаБУНУ
	                      |ГДЕ
	                      |	абс_ПереносДанныхСчетаБУНУ.Ссылка.ДЗО = &ДЗО
	                      |	И абс_ПереносДанныхСчетаБУНУ.Ссылка.Операция = &Операция
	                      |	И абс_ПереносДанныхСчетаБУНУ.Ссылка.НаправлениеПереноса = &НаправлениеПереноса
	                      |	И абс_ПереносДанныхСчетаБУНУ.Ссылка.Ссылка <> &Ссылка
	                      |	И НЕ абс_ПереносДанныхСчетаБУНУ.Ссылка.ПометкаУдаления
	                      |	И (абс_ПереносДанныхСчетаБУНУ.Счет В ИЕРАРХИИ (&МассивСчетов)
	                      |			ИЛИ абс_ПереносДанныхСчетаБУНУ.Счет.Родитель В ИЕРАРХИИ (&МассивСчетов))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	абс_ПереносДанныхСчетаБУНУ.Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("НаправлениеПереноса", НаправлениеПереноса);
	Запрос.УстановитьПараметр("ДЗО", ДЗО);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетовПереноса);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Для %1 по указанным счетам, по направлению переноса %2 уже введен документ: %3", 
																				ДЗО, 
																				НаправлениеПереноса, 
																				Выборка.Ссылка);
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
	КонецЕсли;

		
КонецПроцедуры


Процедура ПроверитьПредыдущееНаправление(Отказ)
	
	//ПредыдущееНаправление = Перечисления.абс_НаправленияПереноса.ПолучитьПредыдущееНаправление(НаправлениеПереноса);
	//
	//Если ЗначениеЗаполнено(ПредыдущееНаправление) Тогда
	//	Если Не ЗначениеЗаполнено(Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(ДЗО, Операция, ПредыдущееНаправление)) Тогда
	//	//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Для "+ДЗО+" отсутствует документ с операцией "+Операция+", "+ПредыдущееНаправление, Отказ);
	//		//Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗакрытыеСчета(ДатаПереноса, Отказ)
	
	Если Операция = Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.СогласованиеГлавнымБухгалтеромДЗО 
			И НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК Тогда 
		Если Операция.СписокСчетовБУ.Количество()>0 Тогда 
			
			СчетаБУ = Операция.СписокСчетовБУ.ВыгрузитьКолонку("Счет");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетУчета КАК СчетУчета
			               |ПОМЕСТИТЬ ВтРодители
			               |ИЗ
			               |	РегистрСведений.абс_ЗакрытыеСчетаУчета.СрезПоследних(, ) КАК абс_ЗакрытыеСчетаУчетаСрезПоследних
			               |ГДЕ
			               |	абс_ЗакрытыеСчетаУчетаСрезПоследних.Организация = &Организация
			               |	И абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетЗакрыт = ИСТИНА
			               |	И абс_ЗакрытыеСчетаУчетаСрезПоследних.ДатаЗакрытия <= &ДатаЗакрытия
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Хозрасчетный.Ссылка КАК ЗакрытыйСчет
			               |ИЗ
			               |	ВтРодители КАК ВтРодители
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
			               |		ПО (ВтРодители.СчетУчета = Хозрасчетный.Ссылка
			               |				ИЛИ ВтРодители.СчетУчета = Хозрасчетный.Ссылка.Родитель
			               |				ИЛИ ВтРодители.СчетУчета = Хозрасчетный.Ссылка.Родитель.Родитель)
			               |АВТОУПОРЯДОЧИВАНИЕ";							  
							
			Запрос.УстановитьПараметр("Организация",  ДЗО);
			Запрос.УстановитьПараметр("ДатаЗакрытия", ДатаПереноса);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Сообщить("По выбранному ДЗО нет закрытых счетов");
				Отказ = Истина;
			Иначе
				ТзЗапрос = Результат.Выгрузить();
				МассивЗакрытыхСчетов = ТзЗапрос.ВыгрузитьКолонку("ЗакрытыйСчет");
				
				ЕстьНезакрытыйСчет = Ложь;
				Для каждого СчетБУ из СчетаБУ Цикл
					Если МассивЗакрытыхСчетов.Найти(СчетБУ)=Неопределено Тогда
						ЕстьНезакрытыйСчет = Истина;
						Сообщить("Счет "+ СчетБУ +" не закрыт");
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьНезакрытыйСчет Тогда							
					Отказ = Истина;		
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Сообщить("Необходимо заполнить список счетов БУ в выбранной операции");
			Отказ = Истина;	
		КонецЕсли;				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьЗакрытыеСубСчета(ДатаПереноса, Отказ)
	
	Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.СогласованиеГлавнымБухгалтеромДЗО 
			И НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК Тогда 
		Если СчетаБУНУ.Количество() > 0 Тогда 
			
			СчетаБУ = Новый Массив;
			
			Для Каждого строка из СчетаБУНУ Цикл 	
				Если ТипЗнч(строка.Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда 
					СчетаБУ.Добавить(строка.Счет);
				КонецЕсли;
			КонецЦикла;
				
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетУчета КАК СчетУчета
			               |ПОМЕСТИТЬ ВтРодители
			               |ИЗ
			               |	РегистрСведений.абс_ЗакрытыеСчетаУчета.СрезПоследних(, ) КАК абс_ЗакрытыеСчетаУчетаСрезПоследних
			               |ГДЕ
			               |	абс_ЗакрытыеСчетаУчетаСрезПоследних.Организация = &Организация
			               |	И абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетЗакрыт = ИСТИНА
			               |	И абс_ЗакрытыеСчетаУчетаСрезПоследних.ДатаЗакрытия <= &ДатаЗакрытия
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Хозрасчетный.Ссылка КАК ЗакрытыйСчет
			               |ИЗ
			               |	ВтРодители КАК ВтРодители
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
			               |		ПО (ВтРодители.СчетУчета = Хозрасчетный.Ссылка
			               |				ИЛИ ВтРодители.СчетУчета = Хозрасчетный.Ссылка.Родитель
			               |				ИЛИ ВтРодители.СчетУчета = Хозрасчетный.Ссылка.Родитель.Родитель)
			               |АВТОУПОРЯДОЧИВАНИЕ";							  
							
			Запрос.УстановитьПараметр("Организация",  ДЗО);
			Запрос.УстановитьПараметр("ДатаЗакрытия", ДатаПереноса);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Сообщить("По выбранному ДЗО нет закрытых счетов");
				Отказ = Истина;
			Иначе
				ТзЗапрос = Результат.Выгрузить();
				МассивЗакрытыхСчетов = ТзЗапрос.ВыгрузитьКолонку("ЗакрытыйСчет");
				
				ЕстьНезакрытыйСчет = Ложь;
				Для каждого СчетБУ из СчетаБУ Цикл
					Если МассивЗакрытыхСчетов.Найти(СчетБУ)=Неопределено Тогда
						ЕстьНезакрытыйСчет = Истина;
						Сообщить("Счет "+ СчетБУ +" не закрыт");
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьНезакрытыйСчет Тогда							
					Отказ = Истина;		
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Сообщить("Необходимо заполнить список счетов БУ на закладке ""Счета переноса БУ/НУ """);
			Отказ = Истина;	
		КонецЕсли;				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьНастройкиГруппСправочников(Отказ)
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.СогласованиеГлавнымБухгалтеромДЗО Тогда				
		Если Операция.ВидыСправочников.Количество()>0 Тогда
			мВидыСправочников = Операция.ВидыСправочников.ВыгрузитьКолонку("ВидСправочника");
			ВидыНастройки = ПланыВидовХарактеристик.абс_НастройкиСистемы; 
			ВидыСправочников = Справочники.абс_ВидыСправочниковПереносаДанных; 
			
			Если мВидыСправочников.Найти(ВидыСправочников.НоменклатурныеГруппы)<>Неопределено Тогда 
				НастройкаСистемы = ПолучитьНастройкуСистемы(ВидыНастройки.ГруппаНоменклатурныеГруппы,ДЗО,Отказ);	
				НастройкаСистемы = ПолучитьНастройкуСистемы(ВидыНастройки.ГруппаНоменклатурныеГруппы,Филиал,Отказ);
			КонецЕсли;
			Если мВидыСправочников.Найти(ВидыСправочников.ОбъектыСтроительства)<>Неопределено Тогда
				НастройкаСистемы = ПолучитьНастройкуСистемы(ВидыНастройки.ГруппаОбъектыСтроительства,ДЗО,Отказ);	
				НастройкаСистемы = ПолучитьНастройкуСистемы(ВидыНастройки.ГруппаОбъектыСтроительства,Филиал,Отказ);
			КонецЕсли;
			Если мВидыСправочников.Найти(ВидыСправочников.Склады)<>Неопределено Тогда
				НастройкаСистемы = ПолучитьНастройкуСистемы(ВидыНастройки.ГруппаСклад,ДЗО,Отказ);	
				НастройкаСистемы = ПолучитьНастройкуСистемы(ВидыНастройки.ГруппаСклад,Филиал,Отказ);
			КонецЕсли;
		Иначе
			Сообщить("Необходимо заполнить виды справочников в операции");
			Отказ = Истина;	
		КонецЕсли;				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуРеорганизации(ДатаПереноса, Отказ)

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;

	Если ДатаПереноса = Неопределено Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Для """+ДЗО+""" необходимо указать дату переноса", Отказ);	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьНДСсАвансов(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.Свойство("КонтролироватьНДСсАвансов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.абс_НастройкиСистемы.КонтролироватьНДСсАвансов = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.КонтролироватьНДСсАвансов Тогда 
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда 
		Возврат;
	КонецЕсли;

	МассивАвансовыхСчетов = Новый Массив;
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));	
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02.Д"));		
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.22"));	
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.22.Д"));	
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.32"));	
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.32.Д"));

	Если НЕ ПереносАвансовПолученных(МассивАвансовыхСчетов) Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаРеорганизации = РегистрыСведений.абс_ДатаРеорганизацииДЗО.Получить(Новый Структура("Организация", ДЗО)).ДатаРеорганизации;
	
	Если ПолучитьСуммуРасхожденийНДСсАвансов(МассивАвансовыхСчетов, ДатаРеорганизации) < 100 Тогда 
		Возврат;
	КонецЕсли;
	
	ttk_ОбщегоНазначения.СообщитьОбОшибке("Рассхождения между остатками авансов полученных и НДС на счете 76.АВ превышает допустимое отклонение в 100р", Отказ);
	
	Отчет = Справочники.ВнешниеОбработки.НайтиПоКоду("000001736");
	Если Не ЗначениеЗаполнено(Отчет) Тогда 
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда  
		Если Вопрос("Открыть отчет по сверке НДС с авансов?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда 
			Возврат;
		КонецЕсли;
		
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = Отчет.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
			Если Не Форма = Неопределено Тогда
				Форма.ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация", ДЗО);
				Форма.ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КонецДня(ДатаРеорганизации));
				Форма.Открыть();
			Иначе
				ВнешнийОтчет = ВнешниеОтчеты.Создать(ИмяФайла);
				Форма.ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация", ДЗО);
				Форма.ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КонецДня(ДатаРеорганизации));
				Форма = ВнешнийОтчет.ПолучитьФорму();
				Если Форма <> Неопределено Тогда
					Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		Исключение
			Сообщить("Не удалось открыть отчет по сверке НДС");
		КонецПопытки;
	#КонецЕсли
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеОперацияНаправлениеПереноса(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Операция) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить операцию для переноса", Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ Операция.СозданиеСправочников Тогда
		Если НЕ ЗначениеЗаполнено(НаправлениеПереноса) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить напраление переноса", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивСчетовПереноса()
	
	МассивСчетов = Новый Массив;
	
	Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереносимыеСчета.Счет
		|ИЗ
		|	Справочник.абс_ВидыОперацийПереносаДанных.СписокСчетовБУ КАК ПереносимыеСчета
		|ГДЕ
		|	ПереносимыеСчета.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПереносимыеСчета.Счет");
		
		Запрос.УстановитьПараметр("Ссылка", Операция);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			МассивСчетов.Добавить(Выборка.Счет);	
		КонецЦикла;
	Иначе
		Для Каждого строка из СчетаБУНУ Цикл 	
			Если ТипЗнч(строка.Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда 
				МассивСчетов.Добавить(строка.Счет);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат МассивСчетов;
	
КонецФункции

Функция ПолучитьМассивСчетовПереносаНУ()
	
	МассивСчетов = Новый Массив;
	
	Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереносимыеСчета.Счет
		|ИЗ
		|	Справочник.абс_ВидыОперацийПереносаДанных.СписокСчетовНУ КАК ПереносимыеСчета
		|ГДЕ
		|	ПереносимыеСчета.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПереносимыеСчета.Счет");
		
		Запрос.УстановитьПараметр("Ссылка", Операция);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			МассивСчетов.Добавить(Выборка.Счет);	
		КонецЦикла;
		
	Иначе
		Для Каждого строка из СчетаБУНУ Цикл 	
			Если ТипЗнч(строка.Счет) = Тип("ПланСчетовСсылка.Налоговый") Тогда 
				МассивСчетов.Добавить(строка.Счет);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат МассивСчетов;
	
КонецФункции

Функция ПолучитьРежимЗаписиДокумента()
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.ОжидаетФормированиеДвижений Тогда
		ПометкаУдаления = Ложь;
		Возврат РежимЗаписиДокумента.Проведение;
	ИначеЕсли Статус = Перечисления.абс_СтатусыПереносДанных.ВыполненПеренос Тогда
		ПометкаУдаления = Ложь;
		Возврат РежимЗаписиДокумента.Проведение;
	ИначеЕсли Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда 
		Возврат РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	Возврат РежимЗаписиДокумента.Запись;
	
КонецФункции

Функция ПолучитьДатуПереноса()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	абс_ДатаРеорганизацииДЗО.ДатаРеорганизации
		|ИЗ
		|	РегистрСведений.абс_ДатаРеорганизацииДЗО КАК абс_ДатаРеорганизацииДЗО
		|ГДЕ
		|	абс_ДатаРеорганизацииДЗО.Организация = &ДЗО";

	Запрос.УстановитьПараметр("ДЗО", ДЗО);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	Иначе 	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаРеорганизации;
	КонецЕсли;
	
КонецФункции // ПолучитьДатуПереноса()

Функция ПолучитьНастройкуСистемы(парВидНастройки, парОрганизация, парОтказ)
	
	ЗначениеНастройки = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	абс_НастройкиСистемы.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.абс_НастройкиСистемы КАК абс_НастройкиСистемы
	               |ГДЕ
	               |	абс_НастройкиСистемы.Настройка = &Настройка
	               |	И абс_НастройкиСистемы.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Настройка", парВидНастройки);
	Запрос.УстановитьПараметр("Организация", парОрганизация);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		парОтказ = Истина;
		Сообщить("Не задано значение настройки системы: "+ парВидНастройки.Наименование +" для организации "+парОрганизация, СтатусСообщения.Внимание);
	Иначе
		Выборка = Результат.Выбрать();
        Пока Выборка.Следующий() Цикл
       		ЗначениеНастройки = Выборка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

Функция ПолучитьСуммуРасхожденийНДСсАвансов(МассивАвансовыхСчетов, ДатаРеорганизации)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	                      |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ХозрасчетныйОстатки.Счет = &Счет6202
	                      |					ИЛИ ХозрасчетныйОстатки.Счет.Код = ""62.02.Д""
	                      |				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК Сумма6202,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ХозрасчетныйОстатки.Счет = &Счет6222
	                      |					ИЛИ ХозрасчетныйОстатки.Счет.Код = ""62.22.Д""
	                      |				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК Сумма6222,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ХозрасчетныйОстатки.Счет = &Счет6232
	                      |					ИЛИ ХозрасчетныйОстатки.Счет.Код = ""62.32.Д""
	                      |				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК Сумма6232,
	                      |	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК АвансыИтого,
	                      |	ХозрасчетныйОстатки.Организация
	                      |ПОМЕСТИТЬ ВТ_62
	                      |ИЗ
	                      |	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период {(&Период)}, Счет В (&МассивАвансовыхСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты),
	                      |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов),
	                      |	ХозрасчетныйОстатки.Организация
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Контрагент,
	                      |	ДоговорКонтрагента
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	                      |	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Сумма,
	                      |	ХозрасчетныйОстатки.Организация,
	                      |	ХозрасчетныйОстатки.Субконто2 КАК Документ
	                      |ПОМЕСТИТЬ ВТ_76АВ
	                      |ИЗ
	                      |	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период {(&Период)}, Счет = &Счет76АВ, , Организация = &Организация) КАК ХозрасчетныйОстатки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты),
	                      |	ХозрасчетныйОстатки.Организация,
	                      |	ХозрасчетныйОстатки.Субконто2
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТ_76АВ.Контрагент КАК Контрагент,
	                      |	СУММА(ВТ_76АВ.Сумма) КАК Сумма,
	                      |	ВТ_76АВ.Организация
	                      |ПОМЕСТИТЬ ВТ_76АВ_Контрагенты
	                      |ИЗ
	                      |	ВТ_76АВ КАК ВТ_76АВ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_76АВ.Контрагент,
	                      |	ВТ_76АВ.Организация
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Контрагент
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	НДСсАвансовОстатки.Организация КАК Организация,
	                      |	НДСсАвансовОстатки.Покупатель КАК Контрагент,
	                      |	НДСсАвансовОстатки.ДоговорКонтрагента,
	                      |	НДСсАвансовОстатки.СтавкаНДС,
	                      |	НДСсАвансовОстатки.НДСОстаток
	                      |ПОМЕСТИТЬ ВТ_НДСсАвансов
	                      |ИЗ
	                      |	РегистрНакопления.НДСсАвансов.Остатки(&Период {(&Период)}, Организация = &Организация) КАК НДСсАвансовОстатки
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Контрагент,
	                      |	Организация
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТ_НДСсАвансов.Организация,
	                      |	ВТ_НДСсАвансов.Контрагент КАК Контрагент,
	                      |	СУММА(ВТ_НДСсАвансов.НДСОстаток) КАК НДСОстаток
	                      |ПОМЕСТИТЬ ВТ_НДСсАвансов_Контрагенты
	                      |ИЗ
	                      |	ВТ_НДСсАвансов КАК ВТ_НДСсАвансов
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_НДСсАвансов.Организация,
	                      |	ВТ_НДСсАвансов.Контрагент
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Контрагент
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТ_76АВ_Контрагенты.Контрагент,
	                      |	ВТ_76АВ_Контрагенты.Организация
	                      |ПОМЕСТИТЬ ВТ_Совпадает
	                      |ИЗ
	                      |	ВТ_НДСсАвансов_Контрагенты КАК ВТ_НДСсАвансов_Контрагенты
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_76АВ_Контрагенты КАК ВТ_76АВ_Контрагенты
	                      |		ПО ВТ_НДСсАвансов_Контрагенты.Организация = ВТ_76АВ_Контрагенты.Организация
	                      |			И ВТ_НДСсАвансов_Контрагенты.Контрагент = ВТ_76АВ_Контрагенты.Контрагент
	                      |			И ВТ_НДСсАвансов_Контрагенты.НДСОстаток = ВТ_76АВ_Контрагенты.Сумма
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТ_НДСсАвансов.Организация,
	                      |	ВТ_НДСсАвансов.Контрагент,
	                      |	ВТ_НДСсАвансов.ДоговорКонтрагента,
	                      |	ВТ_НДСсАвансов.СтавкаНДС,
	                      |	ВТ_НДСсАвансов.НДСОстаток КАК НДСОстаток
	                      |ПОМЕСТИТЬ ВТ_76АВ_Совпадает
	                      |ИЗ
	                      |	ВТ_НДСсАвансов КАК ВТ_НДСсАвансов
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Совпадает КАК ВТ_Совпадает
	                      |		ПО ВТ_НДСсАвансов.Организация = ВТ_Совпадает.Организация
	                      |			И ВТ_НДСсАвансов.Контрагент = ВТ_Совпадает.Контрагент
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	НДСсАвансов.СчетФактура КАК Документ,
	                      |	МАКСИМУМ(НДСсАвансов.СтавкаНДС) КАК СтавкаНДС,
	                      |	МАКСИМУМ(НДСсАвансов.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	                      |	НДСсАвансов.Покупатель КАК Контрагент,
	                      |	НДСсАвансов.Организация
	                      |ПОМЕСТИТЬ ВТ_ДоговораПоДокументу
	                      |ИЗ
	                      |	РегистрНакопления.НДСсАвансов КАК НДСсАвансов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Совпадает КАК ВТ_Совпадает
	                      |		ПО НДСсАвансов.Организация = ВТ_Совпадает.Организация
	                      |			И НДСсАвансов.Покупатель = ВТ_Совпадает.Контрагент
	                      |ГДЕ
	                      |	ВТ_Совпадает.Контрагент ЕСТЬ NULL 
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	НДСсАвансов.СчетФактура,
	                      |	НДСсАвансов.Покупатель,
	                      |	НДСсАвансов.Организация
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка,
	                      |	МАКСИМУМ(ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	                      |	МАКСИМУМ(ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС) КАК СтавкаНДС,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента) КАК КоличествоРазличных
	                      |ПОМЕСТИТЬ ВТ_ППВ
	                      |ИЗ
	                      |	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_76АВ КАК ВТ_76АВ
	                      |		ПО ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = ВТ_76АВ.Документ
	                      |ГДЕ
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка
	                      |
	                      |ИМЕЮЩИЕ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента) = 1
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                      |	МАКСИМУМ(ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС) КАК СтавкаНДС,
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация КАК Организация
	                      |ПОМЕСТИТЬ ВТ_ППВ_СтавкиНДС
	                      |ИЗ
	                      |	ВТ_62 КАК ВТ_62
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	                      |		ПО ВТ_62.Контрагент = ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Контрагент
	                      |			И ВТ_62.ДоговорКонтрагента = ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ДоговорКонтрагента
	                      |			И ВТ_62.Организация = ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация
	                      |ГДЕ
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Контрагент,
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация,
	                      |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Организация,
	                      |	Контрагент,
	                      |	ДоговорКонтрагента
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	МАКСИМУМ(ХозрасчетныйОбороты.Субконто2) КАК Субконто2,
	                      |	ХозрасчетныйОбороты.Регистратор
	                      |ПОМЕСТИТЬ ВТ_ПереносыЗадолженности
	                      |ИЗ
	                      |	РегистрБухгалтерии.Хозрасчетный.Обороты(, &Период {(&Период)}, Регистратор, Счет В (&МассивАвансовыхСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	                      |ГДЕ
	                      |	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ХозрасчетныйОбороты.Регистратор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ОтражениеРеализацииТоваровИУслугНДС.Ссылка КАК Ссылка,
	                      |	МАКСИМУМ(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС) КАК СтавкаНДС,
	                      |	ОтражениеРеализацииТоваровИУслугНДС.ДоговорКонтрагента КАК ДоговорКонтрагента
	                      |ПОМЕСТИТЬ ВТ_ОтражениеНДС
	                      |ИЗ
	                      |	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги
	                      |		ПО (ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = ОтражениеРеализацииТоваровИУслугНДС.Ссылка)
	                      |ГДЕ
	                      |	ОтражениеРеализацииТоваровИУслугНДС.Организация = &Организация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОтражениеРеализацииТоваровИУслугНДС.Ссылка,
	                      |	ОтражениеРеализацииТоваровИУслугНДС.ДоговорКонтрагента
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ДоговорКонтрагента,
	                      |	Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТ_76АВ.Организация,
	                      |	ВТ_76АВ.Контрагент,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	                      |			ТОГДА ВТ_76АВ.Документ.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	                      |				И ВТ_ОтражениеНДС.ДоговорКонтрагента ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ОтражениеНДС.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	                      |				И ВТ_ППВ.Ссылка ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ППВ.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.КорректировкаДолга
	                      |				И ВТ_ПереносыЗадолженности.Регистратор ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ПереносыЗадолженности.Субконто2
	                      |		КОГДА ВТ_ДоговораПоДокументу.ДоговорКонтрагента ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ДоговораПоДокументу.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.КорректировкаДолга
	                      |			ТОГДА ВТ_76АВ.Документ.ДоговорКонтрагента
	                      |	КОНЕЦ КАК Договор,
	                      |	СУММА(ВТ_76АВ.Сумма) КАК Сумма,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	                      |				И ВТ_ППВ.Ссылка ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ППВ.СтавкаНДС
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	                      |				И ВТ_ОтражениеНДС.СтавкаНДС ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ОтражениеНДС.СтавкаНДС
	                      |		ИНАЧЕ ВТ_ДоговораПоДокументу.СтавкаНДС
	                      |	КОНЕЦ КАК СтавкаНДС
	                      |ПОМЕСТИТЬ ВТ_76АВ_НеСовпадает
	                      |ИЗ
	                      |	ВТ_76АВ КАК ВТ_76АВ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Совпадает КАК ВТ_Совпадает
	                      |		ПО ВТ_76АВ.Организация = ВТ_Совпадает.Организация
	                      |			И ВТ_76АВ.Контрагент = ВТ_Совпадает.Контрагент
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговораПоДокументу КАК ВТ_ДоговораПоДокументу
	                      |		ПО ВТ_76АВ.Организация = ВТ_ДоговораПоДокументу.Организация
	                      |			И ВТ_76АВ.Контрагент = ВТ_ДоговораПоДокументу.Контрагент
	                      |			И ВТ_76АВ.Документ = ВТ_ДоговораПоДокументу.Документ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ППВ КАК ВТ_ППВ
	                      |		ПО ВТ_76АВ.Документ = ВТ_ППВ.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПереносыЗадолженности КАК ВТ_ПереносыЗадолженности
	                      |		ПО ВТ_76АВ.Документ = ВТ_ПереносыЗадолженности.Регистратор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтражениеНДС КАК ВТ_ОтражениеНДС
	                      |		ПО ВТ_76АВ.Документ = ВТ_ОтражениеНДС.Ссылка
	                      |ГДЕ
	                      |	ВТ_Совпадает.Контрагент ЕСТЬ NULL 
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_76АВ.Организация,
	                      |	ВТ_76АВ.Контрагент,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	                      |			ТОГДА ВТ_76АВ.Документ.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	                      |				И ВТ_ОтражениеНДС.ДоговорКонтрагента ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ОтражениеНДС.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	                      |				И ВТ_ППВ.Ссылка ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ППВ.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.КорректировкаДолга
	                      |				И ВТ_ПереносыЗадолженности.Регистратор ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ПереносыЗадолженности.Субконто2
	                      |		КОГДА ВТ_ДоговораПоДокументу.ДоговорКонтрагента ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ДоговораПоДокументу.ДоговорКонтрагента
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.КорректировкаДолга
	                      |			ТОГДА ВТ_76АВ.Документ.ДоговорКонтрагента
	                      |	КОНЕЦ,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	                      |				И ВТ_ППВ.Ссылка ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ППВ.СтавкаНДС
	                      |		КОГДА ВТ_76АВ.Документ ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	                      |				И ВТ_ОтражениеНДС.СтавкаНДС ЕСТЬ НЕ NULL 
	                      |			ТОГДА ВТ_ОтражениеНДС.СтавкаНДС
	                      |		ИНАЧЕ ВТ_ДоговораПоДокументу.СтавкаНДС
	                      |	КОНЕЦ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТ_76АВ_Совпадает.Организация,
	                      |	ВТ_76АВ_Совпадает.Контрагент,
	                      |	ВТ_76АВ_Совпадает.ДоговорКонтрагента,
	                      |	ВТ_76АВ_Совпадает.СтавкаНДС,
	                      |	ВТ_76АВ_Совпадает.НДСОстаток КАК НДСОстаток,
	                      |	0 КАК Сумма6202,
	                      |	0 КАК Сумма6222,
	                      |	0 КАК Сумма6232,
	                      |	0 КАК АвансыИтого,
	                      |	1 КАК ПризнакСовпадения
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	ВТ_76АВ_Совпадает КАК ВТ_76АВ_Совпадает
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_76АВ_НеСовпадает.Организация,
	                      |	ВТ_76АВ_НеСовпадает.Контрагент,
	                      |	ВТ_76АВ_НеСовпадает.Договор,
	                      |	ВТ_76АВ_НеСовпадает.СтавкаНДС,
	                      |	ВТ_76АВ_НеСовпадает.Сумма,
	                      |	0,
	                      |	0,
	                      |	0,
	                      |	0,
	                      |	2
	                      |ИЗ
	                      |	ВТ_76АВ_НеСовпадает КАК ВТ_76АВ_НеСовпадает
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_62.Организация,
	                      |	ВТ_62.Контрагент,
	                      |	ВТ_62.ДоговорКонтрагента,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(ВТ_62.Сумма6222, 0) <> 0
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	                      |		КОГДА ВТ_ППВ_СтавкиНДС.СтавкаНДС ЕСТЬ НЕ NULL 
	                      |				И ВТ_62.Сумма6202 + ВТ_62.Сумма6232 <> 0
	                      |				И ВТ_ППВ_СтавкиНДС.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	                      |			ТОГДА ВТ_ППВ_СтавкиНДС.СтавкаНДС
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	                      |	КОНЕЦ,
	                      |	0,
	                      |	ВТ_62.Сумма6202,
	                      |	ВТ_62.Сумма6222,
	                      |	ВТ_62.Сумма6232,
	                      |	ВТ_62.АвансыИтого,
	                      |	0
	                      |ИЗ
	                      |	ВТ_62 КАК ВТ_62
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ППВ_СтавкиНДС КАК ВТ_ППВ_СтавкиНДС
	                      |		ПО ВТ_62.Контрагент = ВТ_ППВ_СтавкиНДС.Контрагент
	                      |			И ВТ_62.Организация = ВТ_ППВ_СтавкиНДС.Организация
	                      |			И ВТ_62.ДоговорКонтрагента = ВТ_ППВ_СтавкиНДС.ДоговорКонтрагента
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТ.Организация КАК Организация,
	                      |	ВТ.Контрагент КАК Контрагент,
	                      |	ВТ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                      |	МАКСИМУМ(ВТ.СтавкаНДС) КАК СтавкаНДС,
	                      |	СУММА(ВТ.НДСОстаток) КАК Сумма76,
	                      |	СУММА(ВТ.Сумма6202) КАК Сумма6202,
	                      |	СУММА(ВТ.Сумма6222) КАК Сумма6222,
	                      |	СУММА(ВТ.Сумма6232) КАК Сумма6232,
	                      |	СУММА(ВТ.АвансыИтого) КАК Сумма62Итог,
	                      |	МАКСИМУМ(ВТ.ПризнакСовпадения) КАК ПризнакСовпадения,
	                      |	СУММА(ВЫРАЗИТЬ((ВТ.Сумма6202 + ВТ.Сумма6232) * ЕСТЬNULL(ВЫБОР
	                      |					КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	                      |							ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	                      |						ТОГДА 18 / 118
	                      |					ИНАЧЕ ВЫБОР
	                      |							КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	                      |									ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	                      |								ТОГДА 10 / 110
	                      |							ИНАЧЕ ВЫБОР
	                      |									КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	                      |											ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	                      |										ТОГДА 20 / 120
	                      |									ИНАЧЕ ВЫБОР
	                      |											КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	                      |													ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	                      |												ТОГДА 0
	                      |											ИНАЧЕ 18 / 118
	                      |										КОНЕЦ
	                      |								КОНЕЦ
	                      |						КОНЕЦ
	                      |				КОНЕЦ, 18 / 118) КАК ЧИСЛО(15, 2))) КАК СуммаНДСПо62,
	                      |	СУММА(ВЫРАЗИТЬ((ВТ.Сумма6202 + ВТ.Сумма6232) * ЕСТЬNULL(ВЫБОР
	                      |					КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	                      |							ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	                      |						ТОГДА 18 / 118
	                      |					ИНАЧЕ ВЫБОР
	                      |							КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	                      |									ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	                      |								ТОГДА 10 / 110
	                      |							ИНАЧЕ ВЫБОР
	                      |									КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	                      |											ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	                      |										ТОГДА 20 / 120
	                      |									ИНАЧЕ ВЫБОР
	                      |											КОГДА ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	                      |													ИЛИ ВТ.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	                      |												ТОГДА 0
	                      |											ИНАЧЕ 18 / 118
	                      |										КОНЕЦ
	                      |								КОНЕЦ
	                      |						КОНЕЦ
	                      |				КОНЕЦ, 18 / 118) - ВТ.НДСОстаток КАК ЧИСЛО(15, 2))) КАК Разница
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.Контрагент,
	                      |	ВТ.Организация,
	                      |	ВТ.ДоговорКонтрагента");
						  
	Запрос.УстановитьПараметр("Организация", ДЗО);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(ДатаРеорганизации)));
	Запрос.УстановитьПараметр("Счет76АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);	
	Запрос.УстановитьПараметр("МассивАвансовыхСчетов", МассивАвансовыхСчетов);
	Запрос.УстановитьПараметр("Счет6202", ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
	Запрос.УстановитьПараметр("Счет6222", ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.22"));
	Запрос.УстановитьПараметр("Счет6232", ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.32"));

	
	Рассхождение = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Рассхождение = Рассхождение + Выборка.Разница;		
	КонецЦикла;
	
	Возврат Рассхождение; 
	
КонецФункции

Функция ПереносАвансовПолученных(МассивАвансовыхСчетов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	1 КАК п
	                      |ИЗ
	                      |	Справочник.абс_ВидыОперацийПереносаДанных.СписокСчетовБУ КАК ПереносимыеСчета
	                      |ГДЕ
	                      |	ПереносимыеСчета.Ссылка = &Ссылка
	                      |	И ПереносимыеСчета.Счет В(&МассивАвансовыхСчетов)");
						  
	Запрос.УстановитьПараметр("Ссылка", Операция);
	Запрос.УстановитьПараметр("МассивАвансовыхСчетов", МассивАвансовыхСчетов);	
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция УстановкаПометкиУдаления(Отказ)
	
	Статусы = Перечисления.абс_СтатусыПереносДанных;
	
	Если ПометкаУдаления = Истина 
		И (Статус = Статусы.ВыполненПеренос ИЛИ Статус = Статусы.ОжидаетФормированиеДвижений) Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не возможно пометить на удаление документ в статусе """ 
											+ Статус + """. Необходимо перевести документ в статус ""Отказ"" или ""Ожидает удаления движений"".", Отказ);		
	КонецЕсли;
	
	Если (ПометкаУдаления = Истина) И (Ссылка.ПометкаУдаления = Ложь) И (НЕ Отказ) Тогда 
		абс_Привилегированный.УстановкаПометкиУдаленияОперацияБух(ДокументДвиженийОпераияБух, ПометкаУдаления);
	КонецЕсли;
		
	Если ПометкаУдаления = Истина И Ссылка.ПометкаУдаления = Ложь Тогда 
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьПредварительныеДанные(ПередЗаписью = Ложь, Отказ = Ложь) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередЗаписью И ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередЗаписью И Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда
		ПредварительныеДанные.Очистить();
	КонецЕсли;
	
	Если ПередЗаписью И Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередЗаписью И Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;

	Если ПередЗаписью И Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьПредварительныеДанные Тогда 
		Возврат;
	КонецЕсли;
	
	ПредварительныеДанные.Очистить();
	
	ДокументПередачаИзДЗОВКТТК = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(ДЗО, Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СчетаБУНУ.ВыгрузитьКолонку("Счет"));
	Запрос = Новый Запрос;
	
	Если НЕ ЗначениеЗаполнено(ДокументПередачаИзДЗОВКТТК) ИЛИ НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ХозрасчетныйОстатки.Счет,
			|	ХозрасчетныйОстатки.Субконто1,
			|	ХозрасчетныйОстатки.Субконто2,
			|	ХозрасчетныйОстатки.Субконто3,
			|	ХозрасчетныйОстатки.Организация,
			|	ХозрасчетныйОстатки.СуммаОстатокДт,
			|	ХозрасчетныйОстатки.СуммаОстатокКт,
			|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,
			|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт,
			|	ХозрасчетныйОстатки.КоличествоОстатокДт,
			|	ХозрасчетныйОстатки.КоличествоОстатокКт,
			|	ХозрасчетныйОстатки.Валюта
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки";
			
	Иначе
			
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХозрасчетныйОбороты.Счет,
		               |	ХозрасчетныйОбороты.Субконто1,
		               |	ХозрасчетныйОбороты.Субконто2,
		               |	ХозрасчетныйОбороты.Субконто3,
		               |	ХозрасчетныйОбороты.Организация,
		               |	ХозрасчетныйОбороты.Валюта,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОстатокКт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОстатокДт,
		               |	ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОстатокКт,
		               |	ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОстатокДт,
		               |	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОстатокКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОстатокДт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В ИЕРАРХИИ (&МассивСчетов), , , , ) КАК ХозрасчетныйОбороты
		               |ГДЕ
		               |	ХозрасчетныйОбороты.Регистратор = &Регистратор";
					   
		Запрос.УстановитьПараметр("Регистратор",  ДокументПередачаИзДЗОВКТТК.ДокументДвиженийОпераияБух);
				   		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Организация",  ДЗО);
	Запрос.УстановитьПараметр("МассивСчетов", ПолучитьМассивСчетовПереноса());
	Запрос.УстановитьПараметр("Период", 	  Новый Граница(КонецДня(ПолучитьДатуПереноса())));
	
	СтатьяПоУмолчанию = ПолучитьСтатьюДДСПоУмолчанию();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НомерДДС = ПолучитьНомерСубконто(Выборка.Счет, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
		Если (Выборка.СуммаОстатокДт <> 0) ИЛИ (Выборка.КоличествоОстатокДт <> 0) Тогда
			строка = ПредварительныеДанные.Добавить();
			строка.СчетДт = Выборка.Счет;
			строка.СубконтоДт1 		= Выборка.Субконто1;
			строка.СубконтоДт2 		= Выборка.Субконто2;
			строка.СубконтоДт3 		= Выборка.Субконто3;
			строка.Сумма	  		= Выборка.СуммаОстатокДт;
			строка.КоличествоДт 	= Выборка.КоличествоОстатокДт;
			строка.ВалютнаяСуммаДт 	= Выборка.ВалютнаяСуммаОстатокДт;
			строка.ВалютаДт 		= Выборка.Валюта;
			Если НомерДДС <> -1 Тогда 
				строка["СубконтоДт" + Строка(НомерДДС)] = СтатьяПоУмолчанию;
			КонецЕсли;
		ИначеЕсли (Выборка.СуммаОстатокКт <> 0) ИЛИ (Выборка.КоличествоОстатокКт <> 0) Тогда
			строка = ПредварительныеДанные.Добавить();
			строка.СчетКт = Выборка.Счет;
			строка.СубконтоКт1 		= Выборка.Субконто1;
			строка.СубконтоКт2 		= Выборка.Субконто2;
			строка.СубконтоКт3 		= Выборка.Субконто3;
			строка.Сумма	   		= Выборка.СуммаОстатокКт;
			строка.КоличествоКт 	= Выборка.КоличествоОстатокКт;
			строка.ВалютнаяСуммаКт 	= Выборка.ВалютнаяСуммаОстатокКт;
			строка.ВалютаКт 		= Выборка.Валюта;
			Если НомерДДС <> -1 Тогда 
				строка["СубконтоКт" + Строка(НомерДДС)] = СтатьяПоУмолчанию;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	ПредварительныеДанныеЗаполнены = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПредварительныеДанныеНУ(ПередЗаписью = Ложь, Отказ = Ложь) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередЗаписью И ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередЗаписью И Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда
		ПредварительныеДанныеНУ.Очистить();
	КонецЕсли;
	
	Если ПередЗаписью И Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередЗаписью И Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;

	Если ПередЗаписью И Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьПредварительныеДанные Тогда 
		Возврат;
	КонецЕсли;
	
	ПредварительныеДанныеНУ.Очистить();
	
	ДокументПередачаИзДЗОВКТТК = Документы.абс_ПереносДанных.ПолучитьДокументПоОперацииНаправлению(ДЗО, Операция, Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК, СчетаБУНУ.ВыгрузитьКолонку("Счет"));
	Запрос = Новый Запрос;
	
	Если НЕ ЗначениеЗаполнено(ДокументПередачаИзДЗОВКТТК) ИЛИ НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	НалоговыйОстатки.Счет,
		               |	НалоговыйОстатки.Субконто1,
		               |	НалоговыйОстатки.Субконто2,
		               |	НалоговыйОстатки.Субконто3,
		               |	НалоговыйОстатки.Организация,
		               |	НалоговыйОстатки.СуммаОстатокДт,
		               |	НалоговыйОстатки.СуммаОстатокКт,
		               |	НалоговыйОстатки.КоличествоОстатокДт,
		               |	НалоговыйОстатки.КоличествоОстатокКт,
		               |	НалоговыйОстатки.ВидУчета
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет В ИЕРАРХИИ (&МассивСчетов), , Организация = &Организация) КАК НалоговыйОстатки";
			
	Иначе
			
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	НалоговыйОбороты.Счет,
		               |	НалоговыйОбороты.Субконто1,
		               |	НалоговыйОбороты.Субконто2,
		               |	НалоговыйОбороты.Субконто3,
		               |	НалоговыйОбороты.Организация,
		               |	НалоговыйОбороты.СуммаОборотДт КАК СуммаОстатокКт,
		               |	НалоговыйОбороты.СуммаОборотКт КАК СуммаОстатокДт,
		               |	НалоговыйОбороты.КоличествоОборотДт КАК КоличествоОстатокКт,
		               |	НалоговыйОбороты.КоличествоОборотКт КАК КоличествоОстатокДт,
		               |	НалоговыйОбороты.ВидУчета
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Обороты(, , Регистратор, Счет В ИЕРАРХИИ (&МассивСчетов), , , , ) КАК НалоговыйОбороты
		               |ГДЕ
		               |	НалоговыйОбороты.Регистратор = &Регистратор";
					   
		Запрос.УстановитьПараметр("Регистратор",  ДокументПередачаИзДЗОВКТТК.ДокументДвиженийОпераияБух);
				   		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Организация",  ДЗО);
	Запрос.УстановитьПараметр("МассивСчетов", ПолучитьМассивСчетовПереносаНУ());
	Запрос.УстановитьПараметр("Период", 	  Новый Граница(КонецДня(ПолучитьДатуПереноса())));
	
	СтатьяПоУмолчанию = ПолучитьСтатьюДДСПоУмолчанию();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НомерДДС = ПолучитьНомерСубконто(Выборка.Счет, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
		Если (Выборка.СуммаОстатокДт <> 0) ИЛИ (Выборка.КоличествоОстатокДт <> 0) Тогда
			строка = ПредварительныеДанныеНУ.Добавить();
			строка.СчетДт = Выборка.Счет;
			строка.СубконтоДт1 		= Выборка.Субконто1;
			строка.СубконтоДт2 		= Выборка.Субконто2;
			строка.СубконтоДт3 		= Выборка.Субконто3;
			строка.Сумма	  		= Выборка.СуммаОстатокДт;
			строка.КоличествоДт 	= Выборка.КоличествоОстатокДт;
			строка.ВидУчетаДт 		= Выборка.ВидУчета;
			Если НомерДДС <> -1 Тогда 
				строка["СубконтоДт" + Строка(НомерДДС)] = СтатьяПоУмолчанию;
			КонецЕсли;
		ИначеЕсли (Выборка.СуммаОстатокКт <> 0) ИЛИ (Выборка.КоличествоОстатокКт <> 0) Тогда
			строка = ПредварительныеДанныеНУ.Добавить();
			строка.СчетКт = Выборка.Счет;
			строка.СубконтоКт1 		= Выборка.Субконто1;
			строка.СубконтоКт2 		= Выборка.Субконто2;
			строка.СубконтоКт3 		= Выборка.Субконто3;
			строка.Сумма	   		= Выборка.СуммаОстатокКт;
			строка.КоличествоКт 	= Выборка.КоличествоОстатокКт;
			строка.ВидУчетаКт 		= Выборка.ВидУчета;
			Если НомерДДС <> -1 Тогда 
				строка["СубконтоКт" + Строка(НомерДДС)] = СтатьяПоУмолчанию;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	ПредварительныеДанныеЗаполнены = Истина;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПредварительныхДанных(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда
		ПредварительныеДанные.Очистить();
		ПредварительныеДанныеНУ.Очистить();
        ПредварительныеДанныеЗаполнены = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьПредварительныеДанные Тогда 
		Возврат;
	КонецЕсли;
		
	Если Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Операция.СозданиеСправочников Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПредварительныеДанныеЗаполнены Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить предварительные данные.", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОрганизацияПоНаправлениюПереноса()
	
	Если НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК Тогда 
		Возврат ДЗО;
	ИначеЕсли НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПриемИзКТТКВФилиал Тогда 
		Возврат Филиал
	Иначе
		Возврат Справочники.Организации.НайтиПоКоду("000000001");	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерСубконто(Счет, ВидСубконто)
		
	Для Каждого строкаВид Из Счет.ВидыСубконто Цикл 
		Если строкаВид.ВидСубконто = ВидСубконто Тогда 
			Возврат строкаВид.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

Функция ПолучитьСтатьюДДСПоУмолчанию()
	
	Если НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПередачаИзДЗОВКТТК
		ИЛИ НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПриемИзДЗОВКТТК Тогда 
		Возврат  Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД243");
	ИначеЕсли НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПередачаИзКТТКВФилиал 
		ИЛИ НаправлениеПереноса = Перечисления.абс_НаправленияПереноса.ПриемИзКТТКВФилиал Тогда  
		Возврат  Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД244"); 
	КонецЕсли;
	
	Возврат  Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ТД243");
	
КонецФункции

Процедура ПроверитьСубконто69(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
		
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.КонтролироватьСубконто69 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда 
		Возврат;
	КонецЕсли;

	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ХозрасчетныйОстатки.Счет,
	                      |	ХозрасчетныйОстатки.Субконто2,
	                      |	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
	                      |	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт
	                      |ИЗ
	                      |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	                      |			&Период,
	                      |			Счет В ИЕРАРХИИ (&Счет_69)
	                      |				И Счет В ИЕРАРХИИ (&МассивСчетов),
	                      |			,
	                      |			Организация = &ДЗО) КАК ХозрасчетныйОстатки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ХозрасчетныйОстатки.Счет,
	                      |	ХозрасчетныйОстатки.Субконто2");
						  
	Запрос.УстановитьПараметр("Счет_69",  	  ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	Запрос.УстановитьПараметр("ДЗО",  		  ДЗО);
	Запрос.УстановитьПараметр("МассивСчетов", ПолучитьМассивСчетовПереноса());
	Запрос.УстановитьПараметр("Период", 	  Новый Граница(КонецДня(ПолучитьДатуПереноса())));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 	
		Если НЕ ЗначениеЗаполнено(Выборка.Субконто2) Тогда 
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено 2-е субконто - ""Обособленные подразделения"" на счете: " + Строка(Выборка.Счет), Отказ);
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗапонлитьПредставлениеСпискаСчетов()
	
	ПредставлениеСпискаСчетов = "";
	
	Если Операция <> Справочники.абс_ВидыОперацийПереносаДанных.ПоСчетам Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого счет из ПолучитьМассивСчетовПереноса() Цикл
		Если СтрДлина(ПредставлениеСпискаСчетов) > 85 Тогда 
			Прервать;
		КонецЕсли;
		ПредставлениеСпискаСчетов = ПредставлениеСпискаСчетов 
							+ ?(ПустаяСтрока(ПредставлениеСпискаСчетов), "", ", ") 
							+ строка(счет);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОбособленногоПодразделения(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
		
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.КонтролироватьОбособленныеПодразделения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ТребуетсяПрвоерка = Ложь;
	МассивСчетовПереноса = ПолучитьМассивСчетовПереноса();
		
	МассивНекорректныхСчетовОС = Новый Массив;
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("03.01"));
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"));
	МассивНекорректныхСчетовОС.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.02"));
		
	Для Каждого счетПереноса из МассивСчетовПереноса Цикл 	
		Для Каждого счетОС из МассивНекорректныхСчетовОС Цикл 
			Если счетПереноса = счетОС ИЛИ счетОС.ПринадлежитЭлементу(счетПереноса) Тогда
				ТребуетсяПрвоерка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;			
	КонецЦикла;
	
	Если НЕ ТребуетсяПрвоерка Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СостоянияОСОрганизаций.ОсновноеСредство
	                      |ПОМЕСТИТЬ ос
	                      |ИЗ
	                      |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	                      |ГДЕ
	                      |	СостоянияОСОрганизаций.Состояние = &Состояние
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	                      |ИЗ
	                      |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	                      |			,
	                      |			Организация = &ДЗО
	                      |				И ОсновноеСредство.абс_ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.абс_ОбособленныеПодразделения.ПустаяСсылка)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ос КАК ос
	                      |		ПО (ос.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство)
	                      |ГДЕ
	                      |	ос.ОсновноеСредство ЕСТЬ NULL 
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство");
						  
						  	
	Запрос.УстановитьПараметр("ДЗО", 		ДЗО);
	Запрос.УстановитьПараметр("Состояние", 	Перечисления.СостоянияОС.СнятоСУчета);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить  ""Обособленное подразделение"" в карточках ОС, участвующих в переносе", Отказ);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПроверитьОтрицательныеСуммыНУ(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
		
	Если НЕ ПараметрыСеанса.абс_НастройкиСистемы.КонтролироватьСубконто69 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Статус <> Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.абс_СтатусыПереносДанных.Отказ Тогда 
		Возврат;
	КонецЕсли;

	Счет_01_НУ = ПланыСчетов.Налоговый.НайтиПоКоду("01.01");
	Счет_02_НУ = ПланыСчетов.Налоговый.НайтиПоКоду("02.01");
	
	СчетаПереносаНУ = ПолучитьМассивСчетовПереносаНУ();
	
	Если СчетаПереносаНУ.Найти(Счет_01_НУ) = Неопределено
		И СчетаПереносаНУ.Найти(Счет_02_НУ) = Неопределено
		И СчетаПереносаНУ.Найти(ПланыСчетов.Налоговый.НайтиПоКоду("01")) = Неопределено Тогда 
		Возврат;	
	КонецЕсли;
	
	МассивВидыУчета = Новый Массив;
	МассивВидыУчета.Добавить(Перечисления.ВидыУчетаПоПБУ18.ПР);
	МассивВидыУчета.Добавить(Перечисления.ВидыУчетаПоПБУ18.НУ);
    	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	НалоговыйОстатки.Счет,
	                      |	НалоговыйОстатки.Субконто1,
	                      |	НалоговыйОстатки.СуммаОстатокДт,
	                      |	НалоговыйОстатки.ВидУчета
	                      |ПОМЕСТИТЬ вт_01
	                      |ИЗ
	                      |	РегистрБухгалтерии.Налоговый.Остатки(
	                      |			&Период,
	                      |			Счет = &Счет_01_НУ,
	                      |			,
	                      |			Организация = &ДЗО
	                      |				И ВидУчета В (&МассивВидыУчета)) КАК НалоговыйОстатки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	НалоговыйОстатки.Счет,
	                      |	НалоговыйОстатки.Субконто1,
	                      |	НалоговыйОстатки.СуммаОстатокДт,
	                      |	НалоговыйОстатки.ВидУчета
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	НалоговыйОстатки.Счет,
	                      |	НалоговыйОстатки.Субконто1,
	                      |	НалоговыйОстатки.ВидУчета,
	                      |	НалоговыйОстатки.СуммаОстатокКт
	                      |ПОМЕСТИТЬ вт_02
	                      |ИЗ
	                      |	РегистрБухгалтерии.Налоговый.Остатки(
	                      |			&Период,
	                      |			Счет = &Счет_02_НУ,
	                      |			,
	                      |			Организация = &ДЗО
	                      |				И ВидУчета В (&МассивВидыУчета)) КАК НалоговыйОстатки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	НалоговыйОстатки.Счет,
	                      |	НалоговыйОстатки.Субконто1,
	                      |	НалоговыйОстатки.ВидУчета,
	                      |	НалоговыйОстатки.СуммаОстатокКт
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(вт_01.Субконто1, вт_02.Субконто1) КАК ОС,
	                      |	ЕСТЬNULL(вт_01.СуммаОстатокДт, 0) - ЕСТЬNULL(вт_02.СуммаОстатокКт, 0) КАК Сумму,
	                      |	ЕСТЬNULL(вт_01.ВидУчета, вт_02.ВидУчета) КАК ВидУчета
	                      |ИЗ
	                      |	вт_01 КАК вт_01
	                      |		ПОЛНОЕ СОЕДИНЕНИЕ вт_02 КАК вт_02
	                      |		ПО вт_01.Субконто1 = вт_02.Субконто1
	                      |			И вт_01.ВидУчета = вт_02.ВидУчета
	                      |ГДЕ
	                      |	ЕСТЬNULL(вт_01.СуммаОстатокДт, 0) - ЕСТЬNULL(вт_02.СуммаОстатокКт, 0) < 0");
						  
	Запрос.УстановитьПараметр("Счет_01_НУ",   		Счет_01_НУ);
	Запрос.УстановитьПараметр("Счет_02_НУ",   		Счет_02_НУ);
	Запрос.УстановитьПараметр("ДЗО",  		 	 	ДЗО);
	Запрос.УстановитьПараметр("МассивВидыУчета",  	МассивВидыУчета);
	Запрос.УстановитьПараметр("Период", 	  		Новый Граница(КонецДня(ПолучитьДатуПереноса())));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 	
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Остаток по счету 01 минус остаток по счету 02 по виду учета " 
									+ Строка(Выборка.ВидУчета)
									+ " не должен быть отрицательным. ОС: " + Строка(Выборка.ОС), Отказ);
	КонецЦикла;
		
КонецПроцедуры
