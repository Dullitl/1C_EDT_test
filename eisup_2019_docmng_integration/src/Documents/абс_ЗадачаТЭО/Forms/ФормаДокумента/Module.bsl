&НаКлиенте
Перем мСтатус,НовыйДокумент;

&НаСервере
Процедура ОтправитьНеОтправленные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ПерепискаТЭО.НомерСообщения
	|ИЗ
	|	РегистрСведений.абс_ПерепискаТЭО КАК абс_ПерепискаТЭО
	|ГДЕ
	|	абс_ПерепискаТЭО.Регистратор = &Регистратор
	|	И НЕ абс_ПерепискаТЭО.СообщениеОтправлено";
	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		БылаОшибка = Ложь;
		ОтправитьВТаблицыSQL(ВыборкаДетальныеЗаписи.НомерСообщения,БылаОшибка);		
	КонецЦикла;

КонецПроцедуры

 &НаСервере
 Процедура ОтправитьВТаблицыSQL(НомерСообщения,Отказ)
	 
	НастройкаОбменаSQL = Справочники.абс_НастройкиОбменаСSQL.НайтиПоНаименованию("Отправка почты ТЭО");
	Если НастройкаОбменаSQL <> Справочники.абс_НастройкиОбменаСSQL.ПустаяСсылка() Тогда
		Справочники.абс_НастройкиОбменаСSQL.ВыполнитьОбменТЭО(НастройкаОбменаSQL,Объект.Ссылка,Отказ,НомерСообщения);
	Иначе
		Сообщить("Не найдены параметры подключения SQL.Проверьте заполнение справочника настройка обмена SQL!");
		Отказ = Ложь; 
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьТекущегоПользователя()
 
 	 Возврат  глЗначениеПеременной("глТекущийПользователь");
 
КонецФункции
 
&НаКлиенте
Процедура УправлениеДоступностью()
	
	мТекущийПользователь  = ПолучитьТекущегоПользователя();
	
	Если Объект.Автор  <> мТекущийПользователь ИЛИ Объект.Статус <> ПредопределенноеЗначение("Перечисление.абс_СтатусыЗадачТЭО.Подготовка") Тогда
		Элементы.Тема.ТолькоПросмотр  = Истина;	
		Элементы.Дата.ТолькоПросмотр  = Истина;
	КонецЕсли;
 
КонецПроцедуры
 
 &НаСервере
 Процедура ПолучитьМассивСтатусовНаСервере(СписокСтатусов)
	 
	 Если Не ЗначениеЗаполнено(Объект.Ссылка)Тогда
		 СписокСтатусов.Добавить(Перечисления.абс_СтатусыЗадачТЭО.Подготовка);
	 Иначе
		 
		 СписокСтатусов.Добавить(Объект.Статус);
		 
		 Если Объект.Статус = Перечисления.абс_СтатусыЗадачТЭО.Подготовка Тогда
			 СписокСтатусов.Добавить(Перечисления.абс_СтатусыЗадачТЭО.НаИсполнение);
		 ИначеЕсли  Объект.Статус = Перечисления.абс_СтатусыЗадачТЭО.НаИсполнение Тогда
             СписокСтатусов.Добавить(Перечисления.абс_СтатусыЗадачТЭО.ВРаботе);
		 ИначеЕсли  Объект.Статус = Перечисления.абс_СтатусыЗадачТЭО.ВРаботе Тогда
			 СписокСтатусов.Добавить(Перечисления.абс_СтатусыЗадачТЭО.Выполнено);
             СписокСтатусов.Добавить(Перечисления.абс_СтатусыЗадачТЭО.Контроль);
		 ИначеЕсли  Объект.Статус = Перечисления.абс_СтатусыЗадачТЭО.Контроль Тогда
			 СписокСтатусов.Добавить(Перечисления.абс_СтатусыЗадачТЭО.Выполнено);
		 КонецЕсли;	
		 
	 КонецЕсли;
 КонецПроцедуры

 &НаСервере
Процедура ЗаполнитьСписокДоступныхСтатусов()
	
	СписокСтатусов = Новый Массив();
	
	ПолучитьМассивСтатусовНаСервере(СписокСтатусов);

	Элементы.Статус.РежимВыбораИзСписка = Истина;
	Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(СписокСтатусов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСообщений()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_ПерепискаТЭО.Сообщение,
		|	абс_ПерепискаТЭО.АвторСообщения,
		|	абс_ПерепискаТЭО.Дата КАК Дата,
		|	абс_ПерепискаТЭО.НомерСообщения,
		|	абс_ПерепискаТЭО.ЕстьВложения,
		|	абс_ПерепискаТЭО.СообщениеОтправлено
		|ИЗ
		|	РегистрСведений.абс_ПерепискаТЭО КАК абс_ПерепискаТЭО
		|ГДЕ
		|	абс_ПерепискаТЭО.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Переписка.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		мПользователь = ПолучитьТекущегоПользователя();
		
		НовыйДокумент = Истина;
		Объект.ТЭО    = Параметры.ТЭО;
		Объект.Автор  = мПользователь;
		Объект.Статус = Перечисления.абс_СтатусыЗадачТЭО.Подготовка;
		
		Если Параметры.Свойство("Основание") Тогда			
			Объект.ЗадачаОснование = Параметры.Основание;
		КонецЕсли;	
		
		Если Параметры.Свойство("ШаблонЗадачи") Тогда
			ЗаполнитьЗначенияСвойств(Объект,Параметры.ШаблонЗадачи,"Тема,ЕстьКонтроль,Контролер");
			Объект.ПолучателиСообщений.Загрузить(Параметры.ШаблонЗадачи.ПолучателиСообщений.Выгрузить());
		КонецЕсли;	
		
		НС = Объект.ПолучателиСообщений.Добавить();
		НС.Пользователь =  мПользователь;
		
	Иначе
		ЗаполнитьТаблицуСообщений();
	КонецЕсли;
		
	ЗаполнитьСписокДоступныхСтатусов();
   // мСтатус = Объект.Статус;

КонецПроцедуры

&НаСервере
Функция ПолучитьНовыйНомерСообщения()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_ПерепискаТЭО.НомерСообщения КАК НомерСообщения
	|ИЗ
	|	РегистрСведений.абс_ПерепискаТЭО КАК абс_ПерепискаТЭО
	|ГДЕ
	|	абс_ПерепискаТЭО.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСообщения УБЫВ" ;
	
	
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.НомерСообщения + 1;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьСообщениеВложенияВРегистры(НомерСообщения)
	НачатьТранзакцию();
	НомерСообщения = ПолучитьНовыйНомерСообщения();
	
	НаборЗаписей = РегистрыСведений.абс_ПерепискаТЭО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
	
	НоваяЗапись =  НаборЗаписей.Добавить();
	НоваяЗапись.Сообщение        = Ответ;
	НоваяЗапись.АвторСообщения   = ПолучитьТекущегоПользователя();
	НоваяЗапись.Дата             = абс_СерверныеФункции.ПолучитьДатуСервера();
	НоваяЗапись.НомерСообщения   = НомерСообщения;
	
	Если ТЗВложения.Количество() > 0 Тогда
		НоваяЗапись.ЕстьВложения = Истина;	
	КонецЕсли;	
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.абс_ВложенияТЭО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
	
	Для каждого Стр Из ТЗВложения Цикл
		НоваяЗапись =  НаборЗаписей.Добавить();
		
		ВнешнийФайл 	= Новый ДвоичныеДанные(Стр.ПолноеИмяФайла);
		ТекКлючСтроки = Неопределено;
		РезультатЗаписи = абс_РаботаСФайлами.ЗаписатьФайлВоВнешнееХранилище(Объект.Ссылка, ВнешнийФайл, Стр.ИмяФайла, , ТекКлючСтроки);		
		ФайлВложения = РезультатЗаписи.ХранилищеСсылка;
		
		НоваяЗапись.Вложение       = ФайлВложения;
		НоваяЗапись.НомерСообщения = НомерСообщения;
		НоваяЗапись.Комментарий    = Стр.Комментарий;
		
	КонецЦикла;	
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВложения(Ответ,НомерСообщения,Отказ)
	ДобавитьСообщениеВложенияВРегистры(НомерСообщения);
КонецПроцедуры

&НаСервере
Процедура ПроставитьСтатусОтправки(НомерСообщения,Отказ)
	
	НаборЗаписей = РегистрыСведений.абс_ПерепискаТЭО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		Если Запись.НомерСообщения =  НомерСообщения Тогда	
			Запись.СообщениеОтправлено = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(Отказ)
	
	Попытка
		Записать();
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Произошка ошибка при сохранение задачи!";
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьОтвет(Команда)
	
	Если Ответ <> "" Тогда
		
		Отказ = Ложь;
		ОтказПриОтправке = Ложь;

		Если НовыйДокумент Тогда
			ЗаписатьНаКлиенте(Отказ);
		КонецЕсли;
		
		НомерСообщения = 0;
		ОтправитьСообщениеВложения(Ответ,НомерСообщения,Отказ);
		
		
		Если Не Отказ Тогда
			
			ТЗВложения.Очистить();
			ОтправитьВТаблицыSQL(НомерСообщения,Отказ);
			
			Если Отказ Тогда
				Предупреждение("Произошка ошибка при отправке.Сообщение сохранено!",10);
			Иначе
				ПроставитьСтатусОтправки(НомерСообщения,Отказ);
			КонецЕсли;
			
			Ответ = "";
			
		КонецЕсли;
		
		Если Не Отказ Тогда
			Предупреждение("Сообщение успешно отправлено!",10);
		КонецЕсли;	
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо ввести текст сообщения!";
		Сообщение.Сообщить();
	КонецЕсли;	
	
	ЗаполнитьТаблицуСообщений();
	
	ЭтаФорма.ТекущийЭлемент  = Элементы.Переписка;
	Shell = Новый COMОбъект("WScript.Shell");
    Shell.sendKeys("{END}");      
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НовыйДокумент = Ложь;
	
	мСтатус = Объект.Статус;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НовыйДокумент = Истина;	
	КонецЕсли;
	
	УправлениеДоступностью();
	УстановитьВидимостьПоляКонтролер();
	УстановитьВидимостьПолучателей();
	
	Shell = Новый COMОбъект("WScript.Shell");
    Shell.sendKeys("{END}");
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусВРегистр(СтрокаПричиныИзмененияСтатуса)
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусПоЗаявкеНаИзмениеПрав(Объект.Ссылка);
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЗадачТЭО.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Задача.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период              = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запись.Задача				= Объект.Ссылка;
	Запись.Исполнитель	 		= ПолучитьТекущегоПользователя();	
	Запись.СтатусЗадачи  		= Объект.Статус;
	
	Запись.Комментарий 			= СтрокаПричиныИзмененияСтатуса;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

		Если мСтатус <> Объект.Статус или НовыйДокумент Тогда
			
			Если НЕ НовыйДокумент Тогда
				СтрокаПричиныИзмененияСтатуса = "";
				ВвестиСтроку(СтрокаПричиныИзмененияСтатуса,"Введите причину изменения статуса",,Истина);
				Объект.абс_ПричинаИзмененияСтатуса = СтрокаПричиныИзмененияСтатуса;
				мСтатус = Объект.Статус;
			КонецЕсли;
			
			ЗаписатьСтатусВРегистр(СтрокаПричиныИзмененияСтатуса);
			НовыйДокумент = Ложь;
					
           	УправлениеДоступностью();

		КонецЕсли;
		
		Оповестить("ЗаписанДокументЗадачаТЭО",,Объект.Ссылка);
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		ЗаполнитьСписокДоступныхСтатусов();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложения(Команда)
	ОткрытьФорму("Документ.абс_ЗадачаТЭО.Форма.Форма",Новый Структура("ТЗВложения",ТЗВложения),ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыбраныФайлыВложения" Тогда
		ТЗВложения.Очистить();
		
		Для каждого Стр Из Параметр Цикл
			НС = ТЗВложения.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Стр);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложения(НомерСообщения)
	
	ОткрытьФорму("Документ.абс_ЗадачаТЭО.Форма.ОткрытьВложения",Новый Структура("НомерСообщения,Регистратор",НомерСообщения,Объект.Ссылка),ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда	
		Если Поле.Имя = "ПерепискаСообщение" Тогда
			ОткрытьФорму("Документ.абс_ЗадачаТЭО.Форма.ПросмотрСообщения",Новый Структура("ТекстСообщения,АвторСообщения,Дата",Элемент.ТекущиеДанные.Сообщение,СокрЛП(Элемент.ТекущиеДанные.АвторСообщения.Наименование),Строка(Элемент.ТекущиеДанные.Дата)),ЭтаФорма);
		Иначе	
			ОткрытьВложения(Элемент.ТекущиеДанные.НомерСообщения);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеОтправленные1(Команда)
	ОтправитьНеОтправленные();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПереписку(Команда)
	ЗаполнитьТаблицуСообщений();
	ЭтаФорма.ТекущийЭлемент  = Элементы.Переписка;
	Shell = Новый COMОбъект("WScript.Shell");
    Shell.sendKeys("{END}");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоляКонтролер()
 	Элементы.Контролер.Видимость = Объект.ЕстьКонтроль;
КонецПроцедуры

Процедура УстановитьВидимостьПолучателей()
	Если Элементы.ДобавитьПолучателя.Заголовок = "Показать получателей" Тогда
		Элементы.Группа9.Видимость = Истина;
		Элементы.ДобавитьПолучателя.Заголовок = "Скрыть получателей";
	Иначе
		Элементы.Группа9.Видимость = Ложь;
		Элементы.ДобавитьПолучателя.Заголовок = "Показать получателей";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьКонтрольПриИзменении(Элемент)
	УстановитьВидимостьПоляКонтролер();	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьПолучателей(Команда)
	УстановитьВидимостьПолучателей();
КонецПроцедуры
