////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачала, ВидРасчета, ПроцентОплаты)

	СтрокаИнтервала					= ТаблицаИнтерваловОплаты.Добавить();
	СтрокаИнтервала.Начало			= ДатаНачала;
	СтрокаИнтервала.Расчет			= ВидРасчета;
	СтрокаИнтервала.ПроцентОплаты	= ПроцентОплаты;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуИнтервалов()

// Выполняет проверку непрерывности интервалов начислений
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// создадим массив начислений, по которым будем проверять непрерывность записей
	МассивНачислений = Новый Массив;
	МассивНачислений.Добавить(?(ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни));	
	МассивНачислений.Добавить(ВидРасчета);
	
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("Сотрудник, ДатаНачала");
	
	ПредыдущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	ПредыдущаяДатаОкончания = '00010101';
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи и записи не из массива начислений
		Если Строка.Сторно ИЛИ МассивНачислений.Найти(Строка.ВидРасчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийСотрудник <> Строка.Сотрудник Тогда
			ПредыдущийСотрудник = Строка.Сотрудник;
			СтрокаНеПервая = Ложь;
		КонецЕсли;
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			СтрокаНеПервая = Истина;
		КонецЕсли;
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла;
	
	Если ДоплачиватьДоПолногоСреднегоЗаработка Тогда
		ТНачислений = Начисления.Выгрузить(Новый Структура("ВидРасчета, Сторно",ВидРасчетаДоплаты, Ложь));
		ТНачислений.Сортировать("Сотрудник, ДатаНачала");
		ПредыдущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		ПредыдущаяДатаОкончания = '00010101';
		СтрокаНеПервая = Ложь;
		Для Каждого Строка ИЗ ТНачислений Цикл
			
			Если ПредыдущийСотрудник <> Строка.Сотрудник Тогда
				ПредыдущийСотрудник = Строка.Сотрудник;
				СтрокаНеПервая = Ложь;
			КонецЕсли;
			
			// если встретили не первую строку начислений
			Если СтрокаНеПервая Тогда
				// строка не первая
				Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
					СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
					""" табл. части ""Начисления"": ";
					ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
				КонецЕсли;
			Иначе
				СтрокаНеПервая = Истина;
			КонецЕсли;
			ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

Функция ПолучитьВариантАлгоритмаРасчета(ВыборкаПоШапкеДокумента, ПоПравиламЗакона213ФЗ)

	ВариантАлгоритмаРасчета = НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьВариантАлгоритмаРасчета(ВыборкаПоШапкеДокумента);
	Если ВариантАлгоритмаРасчета <> Неопределено Тогда
		Возврат ВариантАлгоритмаРасчета
	КонецЕсли;
	
	Если ПоПравиламЗакона213ФЗ Тогда
		Если ПрименятьЛьготыПриНачисленииПособия И ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение И ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
			ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года;
		ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года;
		ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
			ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ;
		Иначе
			ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйБезОграничений;
		КонецЕсли;
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам И ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемПоБеременности
	ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничением;
	ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ;
	Иначе
		ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйБезОграничений;
	КонецЕсли;

	Возврат ВариантАлгоритмаРасчета
	
КонецФункции // ПолучитьВариантАлгоритмаРасчета()

// Формирует соответствие в котором находятся действующие графики сотрудника 
// на указанные даты
Функция ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Физлицо",			ВыборкаПоШапкеДокумента.Физлицо);
	Запрос.УстановитьПараметр("Дата",				ВыборкаПоШапкеДокумента.ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасчета",			ВыборкаПоШапкеДокумента.ВидРасчета);
    НачислениеПоБольничномуЛистуПереопределяемый.УстановитьДополнительныеПараметрыЗапросаГрафиковРаботы(Запрос, ВыборкаПоШапкеДокумента);
	
	НачМесяца = НачалоМесяца(ДатаНачала);
	ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период
	|ПОМЕСТИТЬ ВТДатыПоМесяцам";
	Пока НачМесяца < НачалоМесяца(ДатаОкончания) Цикл
		НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ИНДЕКСИРОВАТЬ ПО Период";
	
	Запрос.Текст = ДатыПоМесяцамТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокДат.Период КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени
	|ПОМЕСТИТЬ ВТСотрудникиДаты
	|ИЗ
	|	ВТДатыПоМесяцам КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&Дата,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Ссылка
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК Сотрудники
	|					ГДЕ
	|						Сотрудники.Физлицо = &Физлицо
	|						И ИСТИНА
	|						И Сотрудники.Организация = &ГоловнаяОрганизация)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьПолеЗапросаГрафиковРаботы());
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ИСТИНА",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьУсловиеЗапросаГрафиковРаботы());
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Период КАК Период,
	|	ГрафикиРаботыПоВидамВремени.План,
	|	ПериодыДействия.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСотрудникиДаты КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ПериодыДействия.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ПериодыДействия.Период = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.План ЕСТЬ Не NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Период КАК Период,
	|	ПериодыДействия.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСотрудникиДаты КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО ПериодыДействия.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И ПериодыДействия.Период = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ Не NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействия.Сотрудник КАК Сотрудник,
	|	ПериодыДействия.Сотрудник.ВидЗанятости КАК ВидЗанятостиСотрудника,
	|	ПериодыДействия.Период КАК Месяц,
	|	ПериодыДействия.ВидУчетаВремени,
	|	ПериодыДействия.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И ТабелиУчетаВремениПоСотруднику.Период ЕСТЬ NULL 
	|			ТОГДА ПериодыДействия.ГрафикРаботы
	|		ИНАЧЕ ПериодыДействия.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.Период ЕСТЬ NULL 
	|				И ТабелиУчетаВремениПоСотруднику.Период ЕСТЬ Не NULL 
	|			ТОГДА ПериодыДействия.ГрафикРаботы
	|		КОГДА ПериодыДействия.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.Период ЕСТЬ Не NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.Период ЕСТЬ Не NULL )
	|			ТОГДА ПериодыДействия.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|	КОНЕЦ КАК ГрафикРаботыНорма
	|ИЗ
	|	ВТСотрудникиДаты КАК ПериодыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ПериодыДействия.Период = СводныеИндивидуальныеГрафикиРаботы.Период
	|			И ПериодыДействия.Сотрудник = СводныеИндивидуальныеГрафикиРаботы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИндивидуальныхГрафиковИТабелей КАК ИндивидуальныеГрафикиРаботы
	|		ПО ПериодыДействия.Период = ИндивидуальныеГрафикиРаботы.Период
	|			И ПериодыДействия.Сотрудник = ИндивидуальныеГрафикиРаботы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ПериодыДействия.Период = ТабелиУчетаВремениПоСотруднику.Период
	|			И ((Не ТабелиУчетаВремениПоСотруднику.План))
	|			И ПериодыДействия.Сотрудник = ТабелиУчетаВремениПоСотруднику.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьГрафикРаботыСотрудника()

// Определяет льготный процент оплаты
//
// Параметры
//  ВыборкаПоШапкеДокумента - имеет свойства, одноименные с реквизитами докмента
//  ПроцентОплатыИзТаблицы - число
//
// Возвращаемое значение:
//   число - процент от среднего заработка
//
Функция ПроцентОплатыСУчетомЛьгот(ВыборкаПоШапкеДокумента, ПроцентОплатыИзТаблицы)

	Если ВыборкаПоШапкеДокумента.ПрименятьЛьготыПриНачисленииПособия Тогда
		Если ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.ЗачетНестраховыхПериодов Тогда
			Возврат ?(ПроцентОплатыИзТаблицы = ВыборкаПоШапкеДокумента.ПроцентОплатыБезЛьгот, ВыборкаПоШапкеДокумента.ПроцентОплаты, ПроцентОплатыИзТаблицы)
		Иначе
			Возврат ВыборкаПоШапкеДокумента.ПроцентОплаты
		КонецЕсли;
	Иначе
		Возврат ПроцентОплатыИзТаблицы
	КонецЕсли;	

КонецФункции // ПроцентОплатыСУчетомЛьгот()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ИмяМакета <> "АнализСкидки" И Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Результат = НачислениеПоБольничномуЛистуПереопределяемый.Печать(ИмяМакета, КоличествоЭкземпляров, НаПринтер, ЭтотОбъект);
	Если Результат <> Неопределено Тогда
		Возврат Результат
	КонецЕсли;
	
	Если ИмяМакета = "РасчетСреднегоЗаработка" Тогда
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		ПериодРасчетаСреднегоЗаработка = 12;
		ОписаниеПериода = "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy");
		Если ПериодРегистрации >= ДатаЗакона213ФЗ И ДатаНачалаОплаты < ДатаЗакона213ФЗ Тогда // переходный период 2009-2010 годов
			СписокСоставляющихСреднегоЗаработка = Новый Массив(2); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
			Начало = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ПериодРасчетаСреднегоЗаработка, ОписаниеПериода, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, Ложь, СписокСоставляющихСреднегоЗаработка);
			СписокСоставляющихСреднегоЗаработка = Новый Массив(2); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
			Продолжение = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ПериодРасчетаСреднегоЗаработка, ОписаниеПериода, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, Ложь, СписокСоставляющихСреднегоЗаработка,Ложь);
			
			Макет = ПолучитьОбщийМакет("РасчетСреднегоЗаработка");
			Секция = Макет.ПолучитьОбласть("ШапкаОсобая");
	        Секция.Параметры.ЗаголовокРаздела = "Расчет среднего заработка по правилам 2010 года";
			ТабДокумент = Новый ТабличныйДокумент;
			ТабДокумент.Вывести(Начало);
			ТабДокумент.Вывести(Секция);
			ТабДокумент.Вывести(Продолжение);
		ИначеЕсли ПериодРегистрации >= ДатаЗакона213ФЗ И ДатаНачалаСобытия < ДатаЗакона213ФЗ Тогда  // продолжение переходящего б/л, полностью в 2010 году
			СписокСоставляющихСреднегоЗаработка = Новый Массив(2); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
			ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ПериодРасчетаСреднегоЗаработка, ОписаниеПериода, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, Ложь,СписокСоставляющихСреднегоЗаработка);
		Иначе 
			ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ПериодРасчетаСреднегоЗаработка, ОписаниеПериода, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, Ложь);
		КонецЕсли;
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Синоним) + " (расчет среднего заработка)");
	ИначеЕсли ИмяМакета = "ОборотЛисткаНетрудоспособности" Тогда                                                                                                         
		ТабДокумент = НачислениеПоБольничномуЛистуПереопределяемый.ПечатьОборотаБольничного(ЭтотОбъект);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Синоним) + " (оборот листка нетрудоспособности)");
	ИначеЕсли ИмяМакета = "АнализСкидки" Тогда                                                                                                         
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		Если ПериодРегистрации < ДатаЗакона213ФЗ Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Материальная помощь учитывается только с " + Формат(ДатаЗакона213ФЗ,"ДЛФ=DD") + "!");
			Возврат Неопределено;
		КонецЕсли;
		Если РасчетСреднего.Количество() = 0 Тогда  
			РаботаСДиалогами.ВывестиПредупреждение("Анализ учтенных сумм материальной помощи можно распечатать только после расчета!");
			Возврат Неопределено;
		КонецЕсли;
		ТабДокумент = ФормированиеПечатныхФорм.АнализУчтеннойВРасчетеСреднегоСкидки(ЭтотОбъект);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Синоним) + " (анализ учтенных сумм скидки)");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // Печать()

Процедура НастроитьКолонкуВидаДохода(КолонкаТабличногоПоля) Экспорт

	ПоказыватьЕСН = ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	Если ПоказыватьЕСН Тогда
		Описание = Новый ОписаниеТипов("СправочникСсылка.ДоходыЕСН");
		КолонкаТабличногоПоля.ТекстШапки = "Код для ЕСН";
	Иначе
		Описание = Новый ОписаниеТипов("СправочникСсылка.ДоходыПоСтраховымВзносам");
		КолонкаТабличногоПоля.ТекстШапки = "Вид дохода по страховым взносам";
	КонецЕсли;
	КолонкаТабличногоПоля.ЭлементУправления.ОграничениеТипа = Описание;

КонецПроцедуры

#КонецЕсли

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеПоБольничномуЛисту
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных

КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Выполняет перерасчет по заданному списку физлиц
// Параметры
// 	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина, ВыборкаПоШапкеДокумента);
	
	// Зафиксируем данные табличных частей после расчета
	Записать();

	НачислениеПоБольничномуЛистуПереопределяемый.ПереписатьПрочиеДвиженияПриПерерасчете(ЭтотОбъект, ВыборкаПоШапкеДокумента);
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

Процедура ПрочитатьДанныеОЛьготах() Экспорт

	НачислениеПоБольничномуЛистуСервис.ПрочитатьДанныеОЛьготах(ЭтотОбъект);

КонецПроцедуры

Процедура ПрочитатьРазмерыПособия(ТолькоДополнительныеДанные, ГоловнаяОрганизация = Неопределено) Экспорт

	НачислениеПоБольничномуЛистуСервис.ПрочитатьРазмерыПособия(ЭтотОбъект, Истина, ТолькоДополнительныеДанные, ГоловнаяОрганизация)
	
КонецПроцедуры

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//		РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
//		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего И ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеПоБольничномуЛистуРасчетСреднего.НомерСтроки,
		|	НачислениеПоБольничномуЛистуРасчетСреднего.ВидРасчета,
		|	НачислениеПоБольничномуЛистуРасчетСреднего.БазовыйПериодНачало,
		|	НачислениеПоБольничномуЛистуРасчетСреднего.БазовыйПериодКонец,
		|	НачислениеПоБольничномуЛистуРасчетСреднего.Результат,
		|	НачислениеПоБольничномуЛистуРасчетСреднего.СкидкаПоСтраховымВзносам,
		|	НачислениеПоБольничномуЛистуРасчетСреднего.ОтработаноДней,
		|	НачислениеПоБольничномуЛистуРасчетСреднего.Сотрудник
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК НачислениеПоБольничномуЛистуРасчетСреднего
		|ГДЕ
		|	НачислениеПоБольничномуЛистуРасчетСреднего.Ссылка = &ПервичныйБольничныйЛист";
		Запрос.УстановитьПараметр("ПервичныйБольничныйЛист", ПервичныйБольничныйЛист);
		ДанныеПервичногоДокумента = Запрос.Выполнить().Выгрузить();
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		Если ПериодРегистрации >= ДатаЗакона213ФЗ И ДатаНачалаСобытия < ДатаЗакона213ФЗ Тогда // переходный период 2010 года
			НетСтрокЗаработка = ДанныеПервичногоДокумента.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010)).Количество() = 0;
			НетСтрокПремий = ДанныеПервичногоДокумента.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010)).Количество() = 0;
			Если НетСтрокЗаработка И НетСтрокПремий Тогда
				ВременнаяСтруктура = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(РассчитываемыеТаблицы);
				ВременнаяСтруктура.Начисления = Ложь;
				ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, ВременнаяСтруктура, ВыборкаПоШапкеДокумента, РежимПерерасчета);
				ВременнаяТаблица = РасчетСреднего.Выгрузить();
				РасчетСреднего.Загрузить(ДанныеПервичногоДокумента);
				Строки213ФЗ = ВременнаяТаблица.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010));
				Для каждого СтрокаРасчета Из Строки213ФЗ Цикл
					ЗаполнитьЗначенияСвойств(РасчетСреднего.Добавить(),СтрокаРасчета);
				КонецЦикла;
				Строки213ФЗ = ВременнаяТаблица.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010));
				Для каждого СтрокаРасчета Из Строки213ФЗ Цикл
					ЗаполнитьЗначенияСвойств(РасчетСреднего.Добавить(),СтрокаРасчета);
				КонецЦикла;
			Иначе
				РасчетСреднего.Загрузить(ДанныеПервичногоДокумента);
			КонецЕсли;
		Иначе
			РасчетСреднего.Загрузить(ДанныеПервичногоДокумента);
		КонецЕсли;
		Записать();
		РассчитываемыеТаблицы.РасчетСреднего = Ложь;
	КонецЕсли;
	
	РезультатЗапроса = Неопределено;
	Если Не РассчитываемыеТаблицы.РасчетСреднего Тогда
		РезультатЗапроса = СформироватьЗапросПоРасчетСреднего();
	КонецЕсли;
	
	Отказ = Не ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета, РезультатЗапроса);
	
	Если Не Отказ Тогда
		// Отразим пособие в учете
		Если РассчитываемыеТаблицы.Начисления Тогда
			Записать();
			НачислениеПоБольничномуЛистуПереопределяемый.АвтозаполнениеПроводок(ЭтотОбъект, ВыборкаПоШапкеДокумента, Не РежимПерерасчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Рассчитать()

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления) Экспорт
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ОбособленноеПодразделение,ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";
	
	ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	ДатаОкончанияОплаты = ВыборкаПоШапкеДокумента.ДатаНачалаОплаты + (ВыборкаПоШапкеДокумента.ДнейОплаты - 1) * мДлинаСуток;
	БЛБезОплаты = ?(ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни);
	ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	ТаблицаИнтерваловОплаты = ЗаполнитьТаблицуИнтервалов(ДатаНачалаСобытия, ВыборкаПоШапкеДокумента.ВидРасчета);
	// таблица значений с колонками:  Месяц, ГрафикРаботы, ГрафикРаботыНорма
	ГрафикиСотрудникаПоМесяцам = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента);
	ГрафикиСотрудникаПоМесяцам.Индексы.Добавить("Месяц");
	ЕстьДанныеОСотруднике = ГрафикиСотрудникаПоМесяцам.Количество() > 0;
	Если Не ЕстьДанныеОСотруднике Тогда
		СтрокаСвойствИзДокумента = СтрокаСвойствИзДокумента + ", ГрафикРаботы, ВидУчетаВремени, ПодразделениеОрганизации"
	КонецЕсли;
	СтруктураПоиска = Новый Структура("Месяц");
	
	Если ДатаНачала < ДатаНачалаОплаты Тогда
		
		ТекущаяДатаНачала = ДатаНачала;
		ВременнаяДатаОкончания = НачалоДня(ДатаНачалаОплаты - 1);
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВременнаяДатаОкончания);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			
			Если ЕстьДанныеОСотруднике Тогда
				
				СтруктураПоиска.Месяц = НачалоМесяца(ТекущаяДатаНачала);
				Для каждого ДанныеОГрафиках Из ГрафикиСотрудникаПоМесяцам.НайтиСтроки(СтруктураПоиска) Цикл
					
					// строка движений
					Движение = НаборОсновныеНачисления.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
					
					// заполнение графиков работы
					ЗаполнитьЗначенияСвойств(Движение,ДанныеОГрафиках); // ГрафикРаботы, ГрафикРаботыНорма, ВидУчетаВремени, ПодразделениеОрганизации 
					
					// Свойства
					Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
					Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
					Движение.ВидРасчета					= БЛБезОплаты;
					
					// Реквизиты
					Движение.Авторасчет					= Истина;
					
				КонецЦикла;
				
			Иначе
				
				// строка движений
				Движение = НаборОсновныеНачисления.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
				
				// Свойства
				Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
				Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
				Движение.ВидРасчета					= БЛБезОплаты;
				
				// Реквизиты
				Движение.Авторасчет					= Истина;
				
			КонецЕсли;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВременнаяДатаОкончания);				
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ИнтервалОплаты Из ТаблицаИнтерваловОплаты Цикл
		
		НомерИнтервалаОплаты = ТаблицаИнтерваловОплаты.Индекс(ИнтервалОплаты);
		
		Если ИнтервалОплаты.Начало > ДатаОкончания Тогда
			Продолжить;
		КонецЕсли;
		Если НомерИнтервалаОплаты < 2 и ТаблицаИнтерваловОплаты[НомерИнтервалаОплаты + 1].Начало < ДатаНачалаОплаты Тогда
			Продолжить;
		КонецЕсли;
		
		ОкончаниеИнтервалаОплаты = ?(НомерИнтервалаОплаты = 2, ДатаОкончания, Мин(ТаблицаИнтерваловОплаты[НомерИнтервалаОплаты + 1].Начало - мДлинаСуток,ДатаОкончания));
		
		ТекущаяДатаНачалаОплаты = Макс(ИнтервалОплаты.Начало, ДатаНачалаОплаты);
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНарушенияРежима) Или ВыборкаПоШапкеДокумента.ДатаНарушенияРежима <= ТекущаяДатаНачалаОплаты Тогда
			Если ДатаОкончанияОплаты < ТекущаяДатаНачалаОплаты Тогда
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ОкончаниеИнтервалаОплаты);
			Иначе
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ДатаОкончанияОплаты, ОкончаниеИнтервалаОплаты);
			КонецЕсли;
		Иначе 
			Если ДатаОкончанияОплаты < ТекущаяДатаНачалаОплаты Тогда
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ОкончаниеИнтервалаОплаты, ВыборкаПоШапкеДокумента.ДатаНарушенияРежима - 1);
			Иначе
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ДатаОкончанияОплаты, ОкончаниеИнтервалаОплаты, ВыборкаПоШапкеДокумента.ДатаНарушенияРежима - 1);
			КонецЕсли;
		КонецЕсли;
		
		Пока ТекущаяДатаНачалаОплаты <= ТекущаяДатаОкончания Цикл
			
			СчитаемПоПравиламЗакона213ФЗ = ВыборкаПоШапкеДокумента.ПериодРегистрации >= ДатаЗакона213ФЗ И НачалоДня(ТекущаяДатаНачалаОплаты) >= ДатаЗакона213ФЗ;
			ВариантАлгоритмаРасчета = ПолучитьВариантАлгоритмаРасчета(ВыборкаПоШапкеДокумента, СчитаемПоПравиламЗакона213ФЗ);	
			
			Если ЕстьДанныеОСотруднике Тогда
				СтруктураПоиска.Месяц = НачалоМесяца(ТекущаяДатаНачалаОплаты);
				Для каждого ДанныеОГрафиках Из ГрафикиСотрудникаПоМесяцам.НайтиСтроки(СтруктураПоиска) Цикл
					
					
					// строка движений
					Движение = НаборОсновныеНачисления.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
					
					// заполнение графиков работы
					ЗаполнитьЗначенияСвойств(Движение,ДанныеОГрафиках); // ГрафикРаботы, ГрафикРаботыНорма, ВидУчетаВремени, ПодразделениеОрганизации 
					
					// Свойства
					Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачалаОплаты);
					Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
					Если ДанныеОГрафиках.ВидЗанятостиСотрудника = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
						Движение.ВидРасчета				= БЛБезОплаты;
					Иначе
						Движение.ВидРасчета				= ?(Движение.ПериодДействияНачало <= ДатаОкончанияОплаты,ИнтервалОплаты.Расчет,БЛБезОплаты);
					КонецЕсли;
					
					// Реквизиты
					Если СчитаемПоПравиламЗакона213ФЗ Тогда
						Движение.Показатель1				= ПроцентОплатыСУчетомЛьгот(ВыборкаПоШапкеДокумента, ИнтервалОплаты.ПроцентОплаты);
						Движение.Показатель2				= ?(ВыборкаПоШапкеДокумента.ПрименятьЛьготыПриНачисленииПособия, ИнтервалОплаты.ПроцентОплаты, 0);
					Иначе
						Движение.Показатель1				= ИнтервалОплаты.ПроцентОплаты;
						НачислениеПоБольничномуЛистуПереопределяемый.УточнитьПроцентОплаты(Движение, ВыборкаПоШапкеДокумента, ТекущаяДатаНачалаОплаты, ИнтервалОплаты);
					КонецЕсли;
					
					Если Движение.ПериодДействияНачало > ДатаОкончанияОплаты Тогда
						Движение.Показатель1					= 0;
						Движение.Показатель2					= 0;
					КонецЕсли;
					
					Движение.ВариантАлгоритмаРасчета	= ВариантАлгоритмаРасчета;
					Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНарушенияРежима) И Движение.ПериодДействияНачало >= ВыборкаПоШапкеДокумента.ДатаНарушенияРежима Тогда
						Если СчитаемПоПравиламЗакона213ФЗ Тогда
							Движение.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ;
						Иначе
							НачислениеПоБольничномуЛистуПереопределяемый.УточнитьВариантАлгоритмаРасчетаПриНарушенииРежима(ВыборкаПоШапкеДокумента, Движение);
						КонецЕсли;
					КонецЕсли;
					
					Движение.Авторасчет					= Истина;
				
				КонецЦикла;
				        
			Иначе
				
				// строка движений
				Движение = НаборОсновныеНачисления.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
				
				// Свойства
				Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачалаОплаты);
				Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
				Движение.ВидРасчета				    = ?(Движение.ПериодДействияНачало <= ДатаОкончанияОплаты,ИнтервалОплаты.Расчет,БЛБезОплаты);
				
				// Реквизиты
				Если СчитаемПоПравиламЗакона213ФЗ Тогда
					Движение.Показатель1				= ПроцентОплатыСУчетомЛьгот(ВыборкаПоШапкеДокумента, ИнтервалОплаты.ПроцентОплаты);
					Движение.Показатель2				= ?(ВыборкаПоШапкеДокумента.ПрименятьЛьготыПриНачисленииПособия, ИнтервалОплаты.ПроцентОплаты, 0);
				Иначе
					Движение.Показатель1				= ИнтервалОплаты.ПроцентОплаты;
					НачислениеПоБольничномуЛистуПереопределяемый.УточнитьПроцентОплаты(Движение, ВыборкаПоШапкеДокумента, ТекущаяДатаНачалаОплаты, ИнтервалОплаты);
				КонецЕсли;
				Если Движение.ПериодДействияНачало > ДатаОкончанияОплаты Тогда
					Движение.Показатель1					= 0;
					Движение.Показатель2					= 0;
				КонецЕсли;
				Движение.ВариантАлгоритмаРасчета	= ВариантАлгоритмаРасчета;
				Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНарушенияРежима) И Движение.ПериодДействияНачало >= ВыборкаПоШапкеДокумента.ДатаНарушенияРежима Тогда
					Если СчитаемПоПравиламЗакона213ФЗ Тогда
						Движение.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ;
					Иначе
						НачислениеПоБольничномуЛистуПереопределяемый.УточнитьВариантАлгоритмаРасчетаПриНарушенииРежима(ВыборкаПоШапкеДокумента, Движение);
					КонецЕсли;
				КонецЕсли;
				Движение.Авторасчет					= Истина;
				        
			КонецЕсли;
			
			ТекущаяДатаНачалаОплаты = КонецДня(ТекущаяДатаОкончания) + 1;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНарушенияРежима) Или ВыборкаПоШапкеДокумента.ДатаНарушенияРежима <= ТекущаяДатаНачалаОплаты Тогда
				Если ДатаОкончанияОплаты < ТекущаяДатаНачалаОплаты Тогда
					ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ОкончаниеИнтервалаОплаты);
				Иначе
					ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ДатаОкончанияОплаты, ОкончаниеИнтервалаОплаты);
				КонецЕсли;
			Иначе 
				Если ДатаОкончанияОплаты < ТекущаяДатаНачалаОплаты Тогда
					ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ОкончаниеИнтервалаОплаты, ВыборкаПоШапкеДокумента.ДатаНарушенияРежима - 1);
				Иначе
					ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачалаОплаты), ДатаОкончанияОплаты, ОкончаниеИнтервалаОплаты, ВыборкаПоШапкеДокумента.ДатаНарушенияРежима - 1);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Если ДоплачиватьДоПолногоСреднегоЗаработка Тогда
		ВременнаяТаблица = НаборОсновныеНачисления.Выгрузить();
		СтрокиОсновногоНачисления = ВременнаяТаблица.НайтиСтроки(Новый Структура("Сторно",Ложь));
		Для каждого СуществующееДвижение Из СтрокиОсновногоНачисления Цикл
			Движение = НаборОсновныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СуществующееДвижение,,"Показатель1, Показатель2, ВидРасчета, ВариантАлгоритмаРасчета");
		    Движение.ВидРасчета = ВидРасчетаДоплаты;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоНачислениям()

// Формирует таблицу значений, описывающую размеры выплаты пособия по периодам
//
Функция ЗаполнитьТаблицуИнтервалов(ДатаНачалаСобытия, ВидРасчетаОтПричины) Экспорт
	
	ТаблицаИнтерваловОплаты = Новый ТаблицаЗначений;
	ТаблицаИнтерваловОплаты.Колонки.Добавить("Начало",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаИнтерваловОплаты.Колонки.Добавить("Расчет",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	ТаблицаИнтерваловОплаты.Колонки.Добавить("ПроцентОплаты",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(6,2)));
	
	НачислениеПоБольничномуЛистуПереопределяемый.ЗаполнитьТаблицуИнтерваловПоПрочимПричинам(ТаблицаИнтерваловОплаты,ДатаНачалаСобытия, ДатаОкончания, ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком, ВидРасчетаОтПричины, ПроцентОплаты);
	Если ТаблицаИнтерваловОплаты.Количество() > 0 Тогда
		Возврат ТаблицаИнтерваловОплаты
	КонецЕсли;
	
	УточненныйПроцент = ?(ЗначениеЗаполнено(ВыплатаЗаСчетФедеральногоБюджета), ПроцентОплатыБезЛьгот, ПроцентОплаты);
	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно 
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 					ВидРасчетаОтПричины, УточненныйПроцент);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 10 * мДлинаСуток, ВидРасчетаОтПричины, 50);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток,			ВидРасчетаОтПричины, 0);
		
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 				  	ВидРасчетаОтПричины, УточненныйПроцент);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 24 * мДлинаСуток, ВидРасчетаОтПричины, 0);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток,			ВидРасчетаОтПричины, 0);
		
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 				  	ВидРасчетаОтПричины, УточненныйПроцент);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 7 * мДлинаСуток,	ВидРасчетаОтПричины, 0);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток,			ВидРасчетаОтПричины, 0);
		
	Иначе
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 		   ВидРасчетаОтПричины, УточненныйПроцент);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток, ВидРасчетаОтПричины, 0);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток, ВидРасчетаОтПричины, 0);
		
	КонецЕсли;
	
	Возврат ТаблицаИнтерваловОплаты
	
КонецФункции // ЗаполнитьТаблицуИнтервалов()

// Возвращает вид расчета, соответствующий причине нетрудоспособности
//
// Параметры
//  Причина  – <ПеречислениеСсылка.ПричиныНетрудочпособности> – причина нетрудоспособности
//
// Возвращаемое значение:
//   ПланыВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций   – вид расчета
//
Функция ПолучитьВидРасчетаОтПричиныНетрудоспособности(Причина) Экспорт

	Если Причина = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам;
		
	ИначеЕсли Причина = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве;
		
	Иначе
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВидРасчетаОтПричиныНетрудоспособности()

Функция ПолучитьСтрокуЗаполняемыхРеквизитов() Экспорт

	СтрокаРеквизитов = "Организация,Сотрудник,ФизЛицо,ПервичныйБольничныйЛист,ДатаНарушенияРежима,"
			+ "ДоплачиватьДоПолногоСреднегоЗаработка,ВидРасчетаДоплаты,"
			+ "ПодпадаетПодЕНВД,СтратегияОтраженияВУчете,"
			+ "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,"
			+ "ПроцентОплатыБезЛьгот,ОграничениеПособияБезЛьгот,ПрименятьЛьготыПриНачисленииПособия,ВыплатаЗаСчетФедеральногоБюджета,"
			+ "ПричинаНетрудоспособности,ВидРасчета,ДатаНачалаСобытия,ПроцентОплаты,ОграничениеПособия,"
			+ "СлучайУходаЗаБольнымРебенком";
		
	Возврат НачислениеПоБольничномуЛистуПереопределяемый.ДополнитьСтрокуЗаполняемыхРеквизитов(СтрокаРеквизитов)
	
КонецФункции // ПолучитьСтрокуЗаполняемыхРеквизитов()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//	
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьСтруктуруПечатныхФорм(ЭтотОбъект);
	Если СтруктураПечатныхФорм = Неопределено Тогда
		СтруктураПечатныхФорм = Новый Структура("РасчетСреднегоЗаработка, ОборотЛисткаНетрудоспособности, АнализСкидки","Расчет среднего заработка", "Оборот листка нетрудоспособности", "Анализ учтенных сумм скидки по мат.помощи");
	КонецЕсли;
	Возврат СтруктураПечатныхФорм
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Определяет последний день болезни, оформленной несколькими листками нетрудоспособности
//
// Параметры
//  ПервичныйБольничныйЛист - ДокументСсылка.НачислениеПоБольничномуЛисту
//                 первичный листок нетрудоспособности
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л
//
Функция ПоследнийДеньБолезни(ПервичныйБольничныйЛист) Экспорт 

	ДатаОкончанияБолезни = '00010101';
	
	Если Не ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат	ДатаОкончанияБолезни
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПервичныйБольничныйЛист",ПервичныйБольничныйЛист);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеПоБольничномуЛисту.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|ГДЕ
	|	НачислениеПоБольничномуЛисту.Ссылка = &ПервичныйБольничныйЛист
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеПоБольничномуЛисту.ДатаОкончания
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|ГДЕ
	|	НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист = &ПервичныйБольничныйЛист
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДатаОкончанияБолезни = Выборка.ДатаОкончания;
	КонецЕсли;

	Возврат	ДатаОкончанияБолезни
	
КонецФункции // ПоследнийДеньБолезни()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(СобиратьДополнительныеДанные = Истина) Экспорт 

	Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаНачалаСобытия);
	НачислениеПоБольничномуЛистуПереопределяемый.УстановитьДополнительныеПараметрыЗапросаПоНачислениям(Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени
	|ПОМЕСТИТЬ ВТДанныеОСотруднике
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеПоБольничномуЛисту.Дата,
	|	НачислениеПоБольничномуЛисту.ПериодРегистрации,
	|	НачислениеПоБольничномуЛисту.Организация,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеПоБольничномуЛисту.Организация
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	НачислениеПоБольничномуЛисту.Комментарий,
	|	НачислениеПоБольничномуЛисту.Ответственный,
	|	НачислениеПоБольничномуЛисту.Сотрудник,
	|	НачислениеПоБольничномуЛисту.Физлицо,
	|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности,
	|	НачислениеПоБольничномуЛисту.ПроцентОплаты,
	|	НачислениеПоБольничномуЛисту.ЯвляетсяПродолжениемБолезни,
	|	НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист,
	|	НачислениеПоБольничномуЛисту.ДатаНачалаСобытия,
	|	НачислениеПоБольничномуЛисту.ДатаНачала,
	|	НачислениеПоБольничномуЛисту.ДатаНачалаОплаты,
	|	НачислениеПоБольничномуЛисту.ДатаОкончания,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособия,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент,
	|	НачислениеПоБольничномуЛисту.СтратегияОтраженияВУчете,
	|	НачислениеПоБольничномуЛисту.ПодпадаетПодЕНВД,
	|	НачислениеПоБольничномуЛисту.СлучайУходаЗаБольнымРебенком,
	|	НачислениеПоБольничномуЛисту.ДнейОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительныеПоля,
	|	НачислениеПоБольничномуЛисту.ДатаНарушенияРежима,
	|	НачислениеПоБольничномуЛисту.ВидРасчета,
	|	НачислениеПоБольничномуЛисту.Ссылка,
	|	НачислениеПоБольничномуЛисту.ДоплачиватьДоПолногоСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.ВидРасчетаДоплаты,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаНачало,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	НачислениеПоБольничномуЛисту.ВыплатаЗаСчетФедеральногоБюджета,
	|	НачислениеПоБольничномуЛисту.ПрименятьЛьготыПриНачисленииПособия,
	|	НачислениеПоБольничномуЛисту.ПроцентОплатыБезЛьгот,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособияБезЛьгот
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|ГДЕ
	|	НачислениеПоБольничномуЛисту.Ссылка = &ДокументСсылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ДополнительныеПоля,",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьДополнительныеПоляЗапросаДанныеДокумента());
	Запрос.Выполнить();
	
	Запрос.Текст = НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьТекстДополнительнойТаблицыДокумента(Запрос, СобиратьДополнительныеДанные);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеПоБольничномуЛисту.Ссылка,
	|	НачислениеПоБольничномуЛисту.Дата,
	|	НачислениеПоБольничномуЛисту.ПериодРегистрации,
	|	НачислениеПоБольничномуЛисту.ГоловнаяОрганизация КАК Организация,
	|	НачислениеПоБольничномуЛисту.ГоловнаяОрганизация,
	|	НачислениеПоБольничномуЛисту.Организация КАК ОбособленноеПодразделение,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент.Сотрудник КАК ИсправляемыйДокументСотрудник,
	|	НачислениеПоБольничномуЛисту.Сотрудник,
	|	НачислениеПоБольничномуЛисту.Сотрудник.Физлицо КАК Физлицо,
	|	НачислениеПоБольничномуЛисту.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	НачислениеПоБольничномуЛисту.ПроцентОплаты,
	|	НачислениеПоБольничномуЛисту.ПроцентОплатыБезЛьгот,
	|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности,
	|	НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист,
	|	НачислениеПоБольничномуЛисту.ЯвляетсяПродолжениемБолезни,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособия,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособияБезЛьгот,
	|	НачислениеПоБольничномуЛисту.СлучайУходаЗаБольнымРебенком,
	|	НачислениеПоБольничномуЛисту.ДатаНачала,
	|	НачислениеПоБольничномуЛисту.ДатаОкончания,
	|	НачислениеПоБольничномуЛисту.ДатаНачалаОплаты,
	|	НачислениеПоБольничномуЛисту.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	НачислениеПоБольничномуЛисту.ДатаНарушенияРежима,
	|	НачислениеПоБольничномуЛисту.ДнейОплаты,
	|	НачислениеПоБольничномуЛисту.ВидРасчета КАК ВидРасчета,
	|	ПараметрыВидаРасчета.СпособРасчета КАК СпособРасчета,
	|	&ДокументСсылка КАК ДокументОснование,
	|	12 КАК ПериодРасчетаСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаНачало,
	|	НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаНачало КАК ДатаНачалаРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияРасчетногоПериода,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени,
	|	НачислениеПоБольничномуЛисту.ДоплачиватьДоПолногоСреднегоЗаработка,
	|	НачислениеПоБольничномуЛисту.ВидРасчетаДоплаты,
	|	НачислениеПоБольничномуЛисту.ПрименятьЛьготыПриНачисленииПособия,
	|	НачислениеПоБольничномуЛисту.ВыплатаЗаСчетФедеральногоБюджета,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Сотрудник.Организация = ВЫБОР
	|				КОГДА НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА НачислениеПоБольничномуЛисту.Организация
	|				ИНАЧЕ НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Дата < НачислениеПоБольничномуЛисту.ПериодРегистрации
	|			ТОГДА НачислениеПоБольничномуЛисту.ПериодРегистрации
	|		КОГДА НачислениеПоБольничномуЛисту.Дата > КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительныеПоля
	|ИЗ
	|	ВТДанныеДокумента КАК НачислениеПоБольничномуЛисту
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСотруднике КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительнаяТаблица КАК ДополнительнаяТаблица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО НачислениеПоБольничномуЛисту.ВидРасчета = ПараметрыВидаРасчета.Ссылка";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьПолеЗапросаПоДокументу());
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ДополнительныеПоля",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьДополнительныеПоляЗапросаПоДокументу());
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента) Экспорт 

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.Организация;
	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , 			ВыборкаПоШапкеДокумента.ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВидРасчета",						ВыборкаПоШапкеДокумента.ВидРасчета);
	НачислениеПоБольничномуЛистуПереопределяемый.УстановитьДополнительныеПараметрыЗапросаПоНачислениям(Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеПоБольничномуЛистуНачисления.Ссылка,
	|	НачислениеПоБольничномуЛистуНачисления.НомерСтроки КАК НомерСтроки,
	|	НачислениеПоБольничномуЛистуНачисления.ВидРасчета,
	|	НачислениеПоБольничномуЛистуНачисления.ДатаНачала,
	|	НачислениеПоБольничномуЛистуНачисления.ДатаОкончания,
	|	НачислениеПоБольничномуЛистуНачисления.Показатель1,
	|	НачислениеПоБольничномуЛистуНачисления.Показатель2,
	|	НачислениеПоБольничномуЛистуНачисления.Показатель3,
	|	НачислениеПоБольничномуЛистуНачисления.Показатель4,
	|	НачислениеПоБольничномуЛистуНачисления.Показатель5,
	|	НачислениеПоБольничномуЛистуНачисления.Показатель6,
	|	НачислениеПоБольничномуЛистуНачисления.Результат,
	|	НачислениеПоБольничномуЛистуНачисления.ДополнительныйРезультат,
	|	НачислениеПоБольничномуЛистуНачисления.ПодразделениеОрганизации,
	|	НачислениеПоБольничномуЛистуНачисления.НормаДней,
	|	НачислениеПоБольничномуЛистуНачисления.НормаЧасов,
	|	НачислениеПоБольничномуЛистуНачисления.НормаДнейПоПятидневке,
	|	НачислениеПоБольничномуЛистуНачисления.ОтработаноДней,
	|	НачислениеПоБольничномуЛистуНачисления.ОтработаноЧасов,
	|	НачислениеПоБольничномуЛистуНачисления.ОтработаноДнейПоПятидневке,
	|	НачислениеПоБольничномуЛистуНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	НачислениеПоБольничномуЛистуНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	НачислениеПоБольничномуЛистуНачисления.ДополнительныеДанные,
	|	НачислениеПоБольничномуЛистуНачисления.ДатаНачалаСобытия,
	|	НачислениеПоБольничномуЛистуНачисления.Сторно,
	|	НачислениеПоБольничномуЛистуНачисления.Авторасчет,
	|	НачислениеПоБольничномуЛистуНачисления.Сотрудник,
	|	НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов,
	|	НачислениеПоБольничномуЛистуНачисления.ОтработаноЧасовПоПятидневке,
	|	НачислениеПоБольничномуЛистуНачисления.НормаЧасовПоПятидневке,
	|	НачислениеПоБольничномуЛистуНачисления.СторнируемыйДокумент,
	|	НачислениеПоБольничномуЛистуНачисления.ЧислоМесяцев,
	|	НачислениеПоБольничномуЛистуНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛистуНачисления
	|ГДЕ
	|	НачислениеПоБольничномуЛистуНачисления.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТПоследниеДаты
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачалаСобытия)
	|			И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	МаксПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТГрафикРаботыПоСотруднику
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТГрафикРаботыНормаПоСотруднику
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|			И ((Не ГрафикиРаботыПоВидамВремени.План))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Сотрудник,
	|	ЕСТЬNULL(ГрафикРаботыПоСотруднику.Сотрудник, ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|		КОНЕЦ) КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА (Не ГрафикРаботыНормаПоСотруднику.НомерСтроки ЕСТЬ NULL )
	|				ИЛИ (РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						И (Не РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени ЕСТЬ NULL )
	|					ИЛИ (Не(РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|								И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)))
	|						И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						И (Не РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени ЕСТЬ NULL ))
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|							И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|				КОНЕЦ
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	СтрокиНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме КАК ЯвляетсяДоходомВНатуральнойФорме,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.КодДоходаПоУмолчанию), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2012))
	|						ТОГДА СтрокиНачисления.ДатаНачала
	|					ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|				КОНЕЦ
	|		ИНАЧЕ СтрокиНачисления.Ссылка.ПериодРегистрации
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныйРезультат,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.ЧислоМесяцев,
	|	СтрокиНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (Не СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЯвляетсяПособием,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = &ВидРасчета
	|				И (Не СтрокиНачисления.Сторно)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьПериодНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеДаты КАК ПоследниеДаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|				И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыПоСотруднику КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыНормаПоСотруднику КАК ГрафикРаботыНормаПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыНормаПоСотруднику.НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьПолеЗапросаПоНачислениям());
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьДополнительноеПолеЗапросаПоНачислениям());
	Возврат Запрос.Выполнить();
    
КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего() Экспорт 

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);

	// реализация Федерального закона № 180-ФЗ от 22.12.2005 г.:
	// поле "Сотрудник" с 1 января 2006 года может идентифицировать несколько мест работы,
	// включая работу по внутреннему совместительству
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
	|		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Сотрудник,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.СкидкаПоСтраховымВзносам,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	НЕОПРЕДЕЛЕНО КАК ПрочиеПоля
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК СтрокаРасчетСреднего
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ПрочиеПоля",НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьПрочиеПоляЗапросаПоСреднему());
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	// ПериодРегистрации
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;

	//  Организация
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой выполняется начисление!"), Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка того, что не изменили сотрудника при исправлении
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник) 
		И (ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник <> ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("При исправлении документа нельзя изменить сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачалаСобытия
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана дата начала нетрудоспособности!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана дата начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана дата окончания расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание < ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Дата окончания расчетного периода не должна быть меньше даты начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачалаОплаты
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаОплаты) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана дата назначения пособия!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана дата начала оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаОкончания
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана дата окончания оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Период нетрудоспособности
	Если ВыборкаПоШапкеДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачалаСобытия Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Дата начала периода отстутствия сотрудника не должна быть меньше даты начала события!", Отказ, Заголовок);
	КонецЕсли;

	// Период нетрудоспособности
	Если ВыборкаПоШапкеДокумента.ДатаНачалаОплаты < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Дата назначения пособия не должна быть меньше даты начала периода отстутствия сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	// Период нетрудоспособности
	Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачалаОплаты Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Дата окончания периода отстутствия сотрудника не должна быть меньше даты назначения пособия!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана причина нетрудоспособности!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком И Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СлучайУходаЗаБольнымРебенком) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан случай ухода за ребенком!", Отказ, Заголовок);
		
	Иначе 
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан вид расчета для начисления пособия!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Процент оплаты
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан процент оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ПериодРегистрации >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() И ВыборкаПоШапкеДокумента.ДатаНачалаОплаты >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОграничениеПособия) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указано ограничение пособия!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ПрименятьЛьготыПриНачисленииПособия И (Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОграничениеПособияБезЛьгот)) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указано ограничение пособия для расчета без предоставления льгот!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДоплачиватьДоПолногоСреднегоЗаработка И Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаДоплаты) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан вид расчета для начисления доплаты до полного среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидЗанятости
	Если ВыборкаПоШапкеДокумента.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Документ не может быть оформлен на внутреннего совместителя!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> Null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> Null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!"), Отказ, Заголовок);
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДополнительныеПроверкиДокумента(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверятьМестоРаботы = Истина, ПроводитьДополнительныеПроверки = Ложь) Экспорт 

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Оплата"": ";
	
	// Сотрудник в табличном поле
	Если ПроверятьМестоРаботы И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
			
		Иначе
			Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
				
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
					ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Дата начала события
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) И ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;

	// Подразделение
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("не указано подразделение организации!"), Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указано подразделение, принадлежащее другой организации!"), Отказ, Заголовок);
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроверятьПериодНачисления И 
		(ВыборкаПоСтрокамДокумента.ПериодДействияНачало < ВыборкаПоШапкеДокумента.ДатаНачала 
			ИЛИ ВыборкаПоСтрокамДокумента.ПериодДействияНачало > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
			ИЛИ ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоШапкеДокумента.ДатаНачала 
			ИЛИ ВыборкаПоСтрокамДокумента.ПериодДействияКонец > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли;

	Если ПроводитьДополнительныеПроверки Тогда
		НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДополнительныеПроверкиСтрокиНачислений(ЭтотОбъект,ВыборкаПоСтрокамДокумента,Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РасчетСреднего" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверятьМестоРаботы = Истина) Экспорт 

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если ПроверятьМестоРаботы И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	Выборка				- спозиционированная на определеной строке выборка
//						  из результата запроса к ТЧ документа
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей) Экспорт 
	
	Движение = ПроведениеРасчетов.ДобавитьСтрокуОсновныхНачислений(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
	
	Если ВыборкаПоСтрокамДокумента.ЯвляетсяПособием Тогда
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		СчитаемПоПравиламЗакона213ФЗ = ВыборкаПоШапкеДокумента.ПериодРегистрации >= ДатаЗакона213ФЗ И Движение.ПериодДействияНачало >= ДатаЗакона213ФЗ;
		
		Движение.ДополнительныйРезультат = ВыборкаПоСтрокамДокумента.ДополнительныйРезультат;
		Движение.ВариантАлгоритмаРасчета = ПолучитьВариантАлгоритмаРасчета(ВыборкаПоШапкеДокумента, СчитаемПоПравиламЗакона213ФЗ);
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНарушенияРежима) И Движение.ПериодДействияНачало >= ВыборкаПоШапкеДокумента.ДатаНарушенияРежима Тогда
			Если СчитаемПоПравиламЗакона213ФЗ Тогда
				Движение.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ;
			Иначе
				НачислениеПоБольничномуЛистуПереопределяемый.УточнитьВариантАлгоритмаРасчетаПриНарушенииРежима(ВыборкаПоШапкеДокумента, Движение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборОсновныеНачисления) Экспорт 
	
	Движение = НаборОсновныеНачисления.Добавить();
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Организация,ДатаНачалаСобытия,СпособРасчета,"
									+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,ПериодРасчетаСреднегоЗаработка";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,Сотрудник,ВидРасчета,Результат,СкидкаПоСтраховымВзносам," 
									+ "ОтработаноПоПятидневке,НормаПоПятидневке,ОтработаноДней,ОтработаноЧасов,КоэффициентИндексации,ЧислоМесяцев";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	ПерерассчитываемыйДокумент = Неопределено
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		
		// Скопируем параметры начисления
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание, ПолучитьСтрокуЗаполняемыхРеквизитов());	
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		Если ПериодРегистрации >= ДатаЗакона213ФЗ И ДатаНачалаСобытия < ДатаЗакона213ФЗ Тогда // переходный период 2010 года
			ПрочитатьДанныеОЛьготах();
		КонецЕсли;
		
		// добавим другие реквизиты
		Если ПервичныйБольничныйЛист.Пустая() Тогда
			ПервичныйБольничныйЛист	= Основание;
		КонецЕсли;
		
		ЯвляетсяПродолжениемБолезни = Истина;
		ДатаНачала = ПоследнийДеньБолезни(ПервичныйБольничныйЛист) + мДлинаСуток;
		ДатаНачалаОплаты = ДатаНачала;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Не Основание.ТекущееОбособленноеПодразделение.Пустая() Тогда
			Организация = Основание.ТекущееОбособленноеПодразделение;
		Иначе
			Организация = Основание.Организация;
		КонецЕсли;
		
		Сотрудник	= Основание;
		Физлицо		= Основание.Физлицо;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Ложь); // данные по отразжению в учете уже не нужны

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	ПроверятьМестоРаботы = НачислениеПоБольничномуЛистуПереопределяемый.ПроверятьМестоРаботы(ВыборкаПоШапкеДокумента);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если Не Отказ Тогда
		
		// Проверим непрерывность следования записей начислений
		ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок);
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска			= Истина;
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, ПроверятьМестоРаботы, Истина);
			
			Если Не Отказ Тогда
				Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
				Иначе
					ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если Не Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьПрочиеДвиженияДокумента(ЭтотОбъект, ВыборкаПоШапкеДокумента, Отказ, Заголовок, ВыборкаПоНачислениям);
		
		Если Не Отказ Тогда
			
			// выполним удаление перерасчетов исправленного документа
			Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
				ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
			КонецЕсли;
		
			Для Каждого Набор Из Движения Цикл
				ТипНабораЗаписей = ТипЗнч(Набор);
				Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
					Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
					Набор.Записать();
				КонецЕсли;
			КонецЦикла;
			ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ДополнительныеДействияПередЗаписью(ЭтотОбъект)
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток	= 86400; // в секундах

