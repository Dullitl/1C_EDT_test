Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СчетУчетаБУОбъектаСтроительства,
								|Оборудование.СчетУчетаБУ";

	мСтрокаРеквизитыНалУчета =  "СчетУчетаНУОбъектаСтроительства,
								|Оборудование.СчетУчетаНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой ОС-15,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС15РасширеннаяАналитика(ПечатьПоДаннымУпрУчета = Истина)

	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаОборудованияВМонтаж_ОС15";
	Макет       = ПолучитьМакет("ОС15");

	Шапка         = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Оборот        = Макет.ПолучитьОбласть("ОборотнаяСторона");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Дата                           КАК ДатаДокумента,
	|	Номер                          КАК НомерДокумента,
	|	ОбъектСтроительства            КАК ОбъектВнеоборотныхАктивов,
	|	СтатьяЗатрат,
	|	Склад,
	|	Склад.Представление КАК СкладПредставление
	|
	|ИЗ
	|	Документ.ПередачаОборудованияВМонтаж КАК ПередачаОборудованияВМонтаж
	|
	|ГДЕ
	|	Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	Шапка.Параметры.Заполнить(ВыборкаПоШапке);
	
	Если ПечатьПоДаннымУпрУчета тогда
		ШапкаТаблицы.Параметры.Валюта = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
	Иначе
		ШапкаТаблицы.Параметры.Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета").Наименование;
	КонецЕсли;	

	ТабДокумент.Вывести(Шапка);
	ТабДокумент.Вывести(ШапкаТаблицы);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	РегАналитикаУчетаЗатрат.Затрата.НаименованиеПолное КАК ОборудованиеНаименование,	
					|	РегАналитикаУчетаЗатрат.Затрата КАК Оборудование,
					|	УчетЗатратРегл.Количество,
					|	УчетЗатратРегл.Стоимость КАК СтоимостьВсего
					|ИЗ
					|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
					|		ПО УчетЗатратРегл.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
					|ГДЕ
					|	УчетЗатратРегл.Регистратор = &Ссылка
					|	И УчетЗатратРегл.Активность = ИСТИНА";
	
	Если глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет 
	  И ПечатьПоДаннымУпрУчета Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"УчетЗатратРегл","УчетЗатрат");
	КонецЕсли;
					
	ВыборкаПоОборудованию = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОборудованию.Следующий() Цикл

		Если ВыборкаПоОборудованию.Количество = 0 
		 ИЛИ ВыборкаПоОборудованию.Количество = Null Тогда
			Количество = 1;
		Иначе
			Количество = ВыборкаПоОборудованию.Количество;
		КонецЕсли;

		СтрокаТаблицы.Параметры.Заполнить(ВыборкаПоОборудованию);
		СтрокаТаблицы.Параметры.СтоимостьЕдиницы = Окр(ВыборкаПоОборудованию.СтоимостьВсего / Количество, 2);

		ТабДокумент.Вывести(СтрокаТаблицы);

	Конеццикла;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	Оборот.Параметры.Заполнить(ВыборкаПоШапке);
	ТабДокумент.Вывести(Оборот);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу = 0;

	Возврат ТабДокумент;

КонецФункции // ПечатьОС15()
	
// Функция формирует табличный документ с печатной формой ОС-15,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС15(ПечатьПоДаннымУпрУчета = Истина)

	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	  И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата) Тогда
		Возврат ПечатьОС15РасширеннаяАналитика(ПечатьПоДаннымУпрУчета);
	КонецЕсли;		
	
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаОборудованияВМонтаж_ОС15";
	Макет       = ПолучитьМакет("ОС15");

	Шапка         = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Оборот        = Макет.ПолучитьОбласть("ОборотнаяСторона");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Дата                           КАК ДатаДокумента,
	|	Номер                          КАК НомерДокумента,
	|	ОбъектСтроительства            КАК ОбъектВнеоборотныхАктивов,
	|	СтатьяЗатрат,
	|	Склад,
	|	Склад.Представление КАК СкладПредставление
	|
	|ИЗ
	|	Документ.ПередачаОборудованияВМонтаж КАК ПередачаОборудованияВМонтаж
	|
	|ГДЕ
	|	Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	Шапка.Параметры.Заполнить(ВыборкаПоШапке);
	
	НазваниеРегистра = "ПартииТоваровНаСкладах";
	
	Если ПечатьПоДаннымУпрУчета тогда
		ШапкаТаблицы.Параметры.Валюта = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
	Иначе
		НазваниеРегистра = НазваниеРегистра+"БухгалтерскийУчет";
		ШапкаТаблицы.Параметры.Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета").Наименование;
	КонецЕсли;	

	ТабДокумент.Вывести(Шапка);
	ТабДокумент.Вывести(ШапкаТаблицы);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	ТекстЗапроса	= "ВЫБРАТЬ "
	+НазваниеРегистра+".Номенклатура.НаименованиеПолное КАК ОборудованиеНаименование,"
	+НазваниеРегистра+".Номенклатура КАК Оборудование,"
	+НазваниеРегистра+".Стоимость КАК СтоимостьВсего,"
	+НазваниеРегистра+".Количество
	|ИЗ
	|	РегистрНакопления."+НазваниеРегистра+" КАК "+НазваниеРегистра+" 
	|
	|ГДЕ "
	+НазваниеРегистра+".Регистратор = &Ссылка И "
	+НазваниеРегистра+".Активность = ИСТИНА";

	Запрос.Текст = ТекстЗапроса;
	ВыборкаПоОборудованию = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОборудованию.Следующий() Цикл

		Если ВыборкаПоОборудованию.Количество = 0 
		 ИЛИ ВыборкаПоОборудованию.Количество = Null Тогда
			Количество = 1;
		Иначе
			Количество = ВыборкаПоОборудованию.Количество;
		КонецЕсли;

		СтрокаТаблицы.Параметры.Заполнить(ВыборкаПоОборудованию);
		СтрокаТаблицы.Параметры.СтоимостьЕдиницы = Окр(ВыборкаПоОборудованию.СтоимостьВсего / Количество, 2);

		ТабДокумент.Вывести(СтрокаТаблицы);

	Конеццикла;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	Оборот.Параметры.Заполнить(ВыборкаПоШапке);
	ТабДокумент.Вывести(Оборот);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу = 0;

	Возврат ТабДокумент;

КонецФункции // ПечатьОС15()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОС15упр" тогда

		// Унифицированная форма М-4 (Акт о приеме оборудования)
		ТабДокумент = ПечатьОС15();
	ИначеЕсли ИмяМакета = "ОС15бух" тогда
		// печать по данным бухучета
		ТабДокумент = ПечатьОС15(Ложь);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Передача оборудования в монтаж"), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("ОС15упр", "Форма ОС-15 (упр. учет)");
	СтруктураМакетов.Вставить("ОС15бух", "Форма ОС-15 (бух. учет)");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Состояние";

КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаБУОбъектаСтроительства,СчетУчетаНУОбъектаСтроительства";
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация,ОбъектСтроительства, СтатьяЗатрат, Склад";
	
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);
	

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьУУ";

КонецПроцедуры

// Дополняет список обязательных параметров табл. части
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСРегл(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаБУ,СчетУчетаНУ";

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	РеквизитыТабОС = "Номенклатура,Количество,ЕдиницаИзмерения,Коэффициент"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	ДополнитьОбязательныеРеквизитыТабОСРегл(РеквизитыТабОС);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Оборудование");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оборудование", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	НаборДвижений = Движения.Хозрасчетный;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = Движения.СписанныеТовары.Выгрузить();
	ТаблицаДвижений.Очистить();

	Сч = 0;
	Для Каждого Строка Из ТаблицаПоТоварам Цикл

		Сч = Сч+1;

		НоваяСтрока = ТаблицаДвижений.Добавить();

		НоваяСтрока.НомерСтрокиДокумента  = Сч;

		НоваяСтрока.Склад        = Склад;
		НоваяСтрока.Номенклатура = Строка.Номенклатура;

		НоваяСтрока.СчетУчетаБУ  = Строка.СчетУчетаБУ;
		НоваяСтрока.СчетУчетаНУ  = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Строка.СчетУчетаБУ, Строка.СчетУчетаНУ);

		НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Строка.Количество;
        НоваяСтрока.Качество                   = Строка.Качество;

		НоваяСтрока.ОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
		НоваяСтрока.ОтражатьВБухгалтерскомУчете  = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
		НоваяСтрока.ОтражатьВНалоговомУчете      = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;

		НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.Оборудование;

		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ОбъектСтроительства = ОбъектСтроительства;
		НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;

		НоваяСтрока.КорСчетБУ = СчетУчетаБУОбъектаСтроительства;
		НоваяСтрока.КорСчетНУ = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, СчетУчетаБУОбъектаСтроительства, СчетУчетаНУОбъектаСтроительства);

		НоваяСтрока.КорСубконтоБУ1 = ОбъектСтроительства;
		
		//АБС НАЧАЛО Задача №08759
		Если НЕ Строка.Заказ.Пустая() Тогда 
	        НоваяСтрока.ЗаказПартии                 = Строка.Заказ;
			НоваяСтрока.ЗаказСписания               = Строка.Заказ;
			НоваяСтрока.СписыватьТолькоПоЗаказу     = Истина;
		КонецЕсли;
  		//\\АБС КОНЕЦ Задача №08759
		
		//АБС ВСТАВКА №7104 НАЧАЛО
		//НоваяСтрока.КорСубконтоБУ2 = Перечисления.СпособыСтроительства.Подрядный;
        НоваяСтрока.КорСубконтоБУ2 =  абс_СпособыСтроительства;
		//\\АБС ВСТАВКА №7104 КОНЕЦ
		
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж;

	КонецЦикла;

	Движения.СписанныеТовары.мПериод            = Дата;
	Движения.СписанныеТовары.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		ОтражатьВБухгалтерскомУчете,
		ОтражатьВНалоговомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);	
	
	// Списание партий и формирование проводок по списанию в БУ и НУ
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаДвижений);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
		// Контроль остатков товара
		Если Оборудование.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если Не Отказ Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			//+++ Колесников А.С. 19.10.2018 [894]
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ТаблицаПоТоварам.Колонки.Добавить("СчетУчета");
				Для Каждого Элемент из ТаблицаПоТоварам Цикл
					Элемент.СчетУчета = Элемент.СчетУчетаБУ;
				КонецЦикла;
			КонецЕсли;
			//--- Колесников А.С. 19.10.2018 [894]

			// Заполним таблицу движений.
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			Движения.ТоварыНаСкладах.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НаборДвижений = Движения.ТоварыОрганизаций;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
		КонецЕсли;
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Процедура ДвиженияПоРегистрам(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ДвиженияПоТоварамОрганизаций(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(Отказ, Заголовок, СтруктураШапкиДокумента);

	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Номенклатура",     "Номенклатура");
	
	//АБС НАЧАЛО Задача №08759
    СтруктураПолей.Вставить("Заказ",     "Заказ");
 	//\\АБС КОНЕЦ Задача №08759
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры",     "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры",     "СерияНоменклатуры");
	СтруктураПолей.Вставить("Количество",     "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ",     "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ",     "СчетУчетаНУ");

	РезультатЗапросаПоТЧ = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей);
	ТаблицаПоТоварам          = РезультатЗапросаПоТЧ.Выгрузить();
	ТаблицаПоТоварам.Колонки.Добавить("Качество");
	ТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	//АБС ВСТАВКА №7104 НАЧАЛО
	Если НЕ ЗначениеЗаполнено(абс_СпособыСтроительства) Тогда
		Сообщить("Не заполнен способ строительства!",СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;	
	//\\АБС ВСТАВКА №7104 КОНЕЦ
	
	// Движения по документу
	Если Не Отказ Тогда
	
		ДвиженияПоРегистрам(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Оборудование);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

//АБС ВСТАВКА 32568
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , );
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, ДанныеЗаполнения.Ссылка);

		абс_СпособыСтроительства = Перечисления.СпособыСтроительства.Подрядный;
		
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		
		ОтражатьВБухгалтерскомУчете=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
		КонецЕсли;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения,
		|	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмеренияМест,
		|	ПоступлениеТоваровУслугОборудование.Количество,
		|	ПоступлениеТоваровУслугОборудование.КоличествоМест,
		|	ПоступлениеТоваровУслугОборудование.Коэффициент,
		|	ПоступлениеТоваровУслугОборудование.Номенклатура,
		|	ПоступлениеТоваровУслугОборудование.СерияНоменклатуры,
		|	ПоступлениеТоваровУслугОборудование.Склад,
		|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
		|	ПоступлениеТоваровУслугОборудование.Сумма,
		|	ПоступлениеТоваровУслугОборудование.СуммаНДС,
		|	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
		|	ПоступлениеТоваровУслугОборудование.СчетУчетаНДС,
		|	ПоступлениеТоваровУслугОборудование.СчетУчетаНУ,
		|	ПоступлениеТоваровУслугОборудование.ХарактеристикаНоменклатуры,
		|	ПоступлениеТоваровУслугОборудование.Цена,
		|	ПоступлениеТоваровУслугОборудование.абс_Проект,
		|	ПоступлениеТоваровУслугОборудование.Заказ,
		|	ПоступлениеТоваровУслугОборудование.абс_ЗакупочныйЗаказТЧ,
		|	ПоступлениеТоваровУслугОборудование.ЗаказПоставщику,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.Организация
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);
		
		Оборудование.Загрузить(Запрос.Выполнить().Выгрузить());		
		
		Склад=ДанныеЗаполнения.СкладОрдер;
		СчетУчетаБУОбъектаСтроительства=ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
		СчетУчетаНУОбъектаСтроительства= ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств;
		ДокументОснование=ДанныеЗаполнения.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры
//\\АБС ВСТАВКА 32568 КОНЕЦ



мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
