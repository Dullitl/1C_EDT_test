Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем Счет;
Перем Содержание;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет заполненость шапки и табличной части документа
//
Функция ПроверитьЗаполнениеДокумента()
	
	ЕстьОшибки =Ложь;
	
	Если НЕ ЗначениеЗаполнено(Получатель)Тогда
		Сообщить("Не выбран  получатель");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	
	Для каждого СтрокаТабличнойЧасти Из ОС Цикл
		
		//АБС+
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) И Счет = ПланыСчетов.ЗабалансовыйУчет.ПустаяСсылка() Тогда
			Сообщить("В строке №"+СтрокаТабличнойЧасти.НомерСтроки +" не указан счет учета"+Символы.ПС);
			ЕстьОшибки = Истина;
		КонецЕсли;
		//АБС-

		Если ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_ЕМЦСС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сегмент) Тогда
				Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указан сегмент.");
				ЕстьОшибки = Истина;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОборудованиеЕМЦСС) Тогда
				Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указан ОборудованиеЕМЦСС.");
				ЕстьОшибки = Истина;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.МестоХранения) Тогда
				Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указан склад.");
				ЕстьОшибки = Истина;			
			КонецЕсли;
			
			
		Иначе	
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.АрендованноеОС) Тогда
				Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указано Арендованное ОС.");
				ЕстьОшибки = Истина;			
			КонецЕсли;
			
			
			Если НЕ ЗначениеЗаполнено(Получатель) Тогда
				Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указан контрагент.");
				ЕстьОшибки = Истина;			
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.Количество = 0 Тогда
				Сообщить("Строка " + СтрокаТабличнойЧасти.НомерСтроки + ", не указано количество  """ + СтрокаТабличнойЧасти.Номенклатура + ".");
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ЕстьОшибки;
	
КонецФункции

//Функция осуществляет проверку реквизитов шапки документа
//
Функция ПроверитьШапкуДокумента()
	
	Если ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_ЕМЦСС Тогда
		
		Счет = ПланыСчетов.ЗабалансовыйУчет.СегментСетиЕМЦССМПСРФ;
		Содержание = "Выбытие по счету "+Счет;
		
	ИначеЕсли (ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Аренда) 
		ИЛИ (ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Хранение) Тогда
		
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Сообщить("Не указан сотрудник");
			Возврат Истина;	
		КонецЕсли;	
		
		Если ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Аренда Тогда
			
			Счет =  ПланыСчетов.ЗабалансовыйУчет.АрендованныеОС;
			Содержание = "Выбытие по счету "+Счет;;
			
		ИначеЕсли ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Хранение Тогда
			
			Счет = ПланыСчетов.ЗабалансовыйУчет.ОСНаОтветХранении;
			Содержание = "Выбытие по счету "+Счет;;
			
		КонецЕсли;
	ИначеЕсли ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Лизинг Тогда
		
		Счет = ПланыСчетов.ЗабалансовыйУчет.ЛизинговоеИмущество;//СчетПоКоду("001.6");
		Содержание = "Выбытие по счету "+Счет;;
		
	Иначе
		Сообщить("Ошибка в реквизите ""Вид полученных ценностей""");
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


// Функция получает остатки по арендованным ос, из табличной части документа
//
Функция ПодготовитьТаблицу()
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	абс_ВыбытиеОСПолучВАрендуОС.АрендованноеОС,
	              |	СУММА(абс_ВыбытиеОСПолучВАрендуОС.Количество) КАК Количество,
	              |	абс_ВыбытиеОСПолучВАрендуОС.Сегмент,
	              |	абс_ВыбытиеОСПолучВАрендуОС.ОборудованиеЕМЦСС,
	              |	абс_ВыбытиеОСПолучВАрендуОС.МестоХранения,
	              |	ВЫБОР
	              |		КОГДА абс_ВыбытиеОСПолучВАрендуОС.Счет <> ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.ПустаяСсылка)
	              |			ТОГДА абс_ВыбытиеОСПолучВАрендуОС.Счет
	              |		ИНАЧЕ ВЫБОР
	              |				КОГДА абс_ВыбытиеОСПолучВАрендуОС.Ссылка.ВидЦенностей = ЗНАЧЕНИЕ(Перечисление.абс_ВидыЦенностей.ОС_Аренда)
	              |					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.АрендованныеОС)
	              |				КОГДА абс_ВыбытиеОСПолучВАрендуОС.Ссылка.ВидЦенностей = ЗНАЧЕНИЕ(Перечисление.абс_ВидыЦенностей.ОС_ЕМЦСС)
	              |					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.СегментСетиЕМЦССМПСРФ)
	              |				КОГДА абс_ВыбытиеОСПолучВАрендуОС.Ссылка.ВидЦенностей = ЗНАЧЕНИЕ(Перечисление.абс_ВидыЦенностей.ОС_Хранение)
	              |					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.ОСНаОтветХранении)
	              |				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.СегментСетиЕМЦССМПСРФ)
	              |			КОНЕЦ
	              |	КОНЕЦ КАК Счет,
	              |	абс_ВыбытиеОСПолучВАрендуОС.Ссылка.Сотрудник,
	              |	абс_ВыбытиеОСПолучВАрендуОС.Ссылка.Получатель
	              |ПОМЕСТИТЬ ВТНоменклатура
	              |ИЗ
	              |	Документ.абс_ВыбытиеОСПолучВАренду.ОС КАК абс_ВыбытиеОСПолучВАрендуОС
	              |ГДЕ
	              |	абс_ВыбытиеОСПолучВАрендуОС.Ссылка = &Ссылка
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	абс_ВыбытиеОСПолучВАрендуОС.АрендованноеОС,
	              |	абс_ВыбытиеОСПолучВАрендуОС.Сегмент,
	              |	абс_ВыбытиеОСПолучВАрендуОС.ОборудованиеЕМЦСС,
	              |	абс_ВыбытиеОСПолучВАрендуОС.МестоХранения,
	              |	абс_ВыбытиеОСПолучВАрендуОС.Ссылка.Сотрудник,
	              |	абс_ВыбытиеОСПолучВАрендуОС.Ссылка.Получатель,
	              |	ВЫБОР
	              |		КОГДА абс_ВыбытиеОСПолучВАрендуОС.Счет <> ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.ПустаяСсылка)
	              |			ТОГДА абс_ВыбытиеОСПолучВАрендуОС.Счет
	              |		ИНАЧЕ ВЫБОР
	              |				КОГДА абс_ВыбытиеОСПолучВАрендуОС.Ссылка.ВидЦенностей = ЗНАЧЕНИЕ(Перечисление.абс_ВидыЦенностей.ОС_Аренда)
	              |					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.АрендованныеОС)
	              |				КОГДА абс_ВыбытиеОСПолучВАрендуОС.Ссылка.ВидЦенностей = ЗНАЧЕНИЕ(Перечисление.абс_ВидыЦенностей.ОС_ЕМЦСС)
	              |					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.СегментСетиЕМЦССМПСРФ)
	              |				КОГДА абс_ВыбытиеОСПолучВАрендуОС.Ссылка.ВидЦенностей = ЗНАЧЕНИЕ(Перечисление.абс_ВидыЦенностей.ОС_Хранение)
	              |					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.ОСНаОтветХранении)
	              |				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.СегментСетиЕМЦССМПСРФ)
	              |			КОНЕЦ
	              |	КОНЕЦ
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВложенныйЗапрос.Количество,
	              |	СУММА(ВложенныйЗапрос.СуммаОстВсего) КАК СуммаОстВсего,
	              |	СУММА(ВложенныйЗапрос.КоличествоОстВсего) КАК КоличествоОстВсего,
	              |	ВложенныйЗапрос.АрендованноеОС,
	              |	ВложенныйЗапрос.Сегмент,
	              |	ВложенныйЗапрос.ОборудованиеЕМЦСС,
	              |	ВложенныйЗапрос.МестоХранения,
	              |	ВложенныйЗапрос.Счет,
	              |	ВложенныйЗапрос.Сотрудник,
	              |	ВложенныйЗапрос.Получатель
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		ВТНоменклатура.АрендованноеОС КАК АрендованноеОС,
	              |		ВТНоменклатура.Количество КАК Количество,
	              |		СУММА(ЕСТЬNULL(ЗабалансовыйУчетОстатки.СуммаОстатокДт, 0)) КАК СуммаОстВсего,
	              |		СУММА(ЕСТЬNULL(ЗабалансовыйУчетОстатки.КоличествоОстатокДт, 0)) КАК КоличествоОстВсего,
	              |		ВТНоменклатура.Сегмент КАК Сегмент,
	              |		ВТНоменклатура.ОборудованиеЕМЦСС КАК ОборудованиеЕМЦСС,
	              |		ВТНоменклатура.МестоХранения КАК МестоХранения,
	              |		ВТНоменклатура.Счет КАК Счет,
	              |		ВТНоменклатура.Сотрудник КАК Сотрудник,
	              |		ВТНоменклатура.Получатель КАК Получатель
	              |	ИЗ
	              |		ВТНоменклатура КАК ВТНоменклатура
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЗабалансовыйУчет.Остатки(&Дата, , , Организация = &Организация) КАК ЗабалансовыйУчетОстатки
	              |			ПО ВТНоменклатура.Счет = ЗабалансовыйУчетОстатки.Счет
	              |				И (ВЫБОР
	              |					КОГДА ВТНоменклатура.Счет = ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.АрендованныеОС)
	              |							ИЛИ ВТНоменклатура.Счет = ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.ОСНаОтветХранении)
	              |						ТОГДА ВТНоменклатура.АрендованноеОС = ЗабалансовыйУчетОстатки.Субконто1
	              |								И ВТНоменклатура.Сотрудник = ЗабалансовыйУчетОстатки.Субконто2
	              |								И ВТНоменклатура.Получатель = ЗабалансовыйУчетОстатки.Субконто3
	              |					КОГДА ВТНоменклатура.Счет = ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.СегментСетиЕМЦССМПСРФ)
	              |						ТОГДА ВТНоменклатура.Сегмент = ЗабалансовыйУчетОстатки.Субконто1
	              |								И ВТНоменклатура.ОборудованиеЕМЦСС = ЗабалансовыйУчетОстатки.Субконто2
	              |								И ВТНоменклатура.МестоХранения = ЗабалансовыйУчетОстатки.Субконто3
	              |					ИНАЧЕ ИСТИНА
	              |				КОНЕЦ)
	              |	
	              |	СГРУППИРОВАТЬ ПО
	              |		ВТНоменклатура.Количество,
	              |		ВТНоменклатура.АрендованноеОС,
	              |		ВТНоменклатура.Сегмент,
	              |		ВТНоменклатура.ОборудованиеЕМЦСС,
	              |		ВТНоменклатура.МестоХранения,
	              |		ВТНоменклатура.Счет,
	              |		ВТНоменклатура.Сотрудник,
	              |		ВТНоменклатура.Получатель) КАК ВложенныйЗапрос
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ВложенныйЗапрос.Количество,
	              |	ВложенныйЗапрос.АрендованноеОС,
	              |	ВложенныйЗапрос.Сегмент,
	              |	ВложенныйЗапрос.ОборудованиеЕМЦСС,
	              |	ВложенныйЗапрос.МестоХранения,
	              |	ВложенныйЗапрос.Счет,
	              |	ВложенныйЗапрос.Сотрудник,
	              |	ВложенныйЗапрос.Получатель";
	Запрос.УстановитьПараметр("Дата",МоментВремени());	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//АБС+ 
Функция ЗаполнитьСчетУчетаВТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт 
	
	Если ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_ЕМЦСС Тогда
		
		СтрокаТабличнойЧасти.Счет = ПланыСчетов.ЗабалансовыйУчет.СегментСетиЕМЦССМПСРФ;
		
	ИначеЕсли ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Аренда Тогда
		
		СтрокаТабличнойЧасти.Счет =  ПланыСчетов.ЗабалансовыйУчет.АрендованныеОС;
		
	ИначеЕсли ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Хранение Тогда
		
		СтрокаТабличнойЧасти.Счет = ПланыСчетов.ЗабалансовыйУчет.ОСНаОтветХранении;
		
	ИначеЕсли ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_Лизинг Тогда
		
		СтрокаТабличнойЧасти.Счет = ПланыСчетов.ЗабалансовыйУчет.ЛизинговоеИмущество;//СчетПоКоду("001.6");
		
	КонецЕсли;
	
КонецФункции
//АБС-

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура - обработчик события "Обработка проведения" 
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Отказ = ПроверитьШапкуДокумента();
	
	Если Не Отказ Тогда      //АБС+
		Отказ = ПроверитьЗаполнениеДокумента();
	КонецЕсли;
	
	Если Не Отказ Тогда
		                     
		ТаблицаОстатков = ПодготовитьТаблицу();
		
		Для Каждого СтрокаТаблицы Из  ТаблицаОстатков Цикл
			
			КоличествоОстВсего = СтрокаТаблицы.КоличествоОстВсего;
			СуммаОстВсего      = СтрокаТаблицы.СуммаОстВсего;
			Количество         = СтрокаТаблицы.Количество;
			Если КоличествоОстВсего < Количество Тогда
				Если ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_ЕМЦСС Тогда 
					ТекстСообщения = "На сегменте "+СтрокаТаблицы.Сегмент+", по месту хранения "+СтрокаТаблицы.МестоХранения+" "+КоличествоОстВсего+
					" из необходимых " +Количество+" "+СтрокаТаблицы.ОборудованиеЕМЦСС+" ("+СтрокаТаблицы.Счет+")";
				Иначе	
					ТекстСообщения = "У контрагента "+СтрокаТаблицы.Получатель+", по сотруднику "+СтрокаТаблицы.Сотрудник+" "+КоличествоОстВсего+
					" из необходимых "+Количество+" "+СтрокаТаблицы.АрендованноеОС + " ("+СтрокаТаблицы.Счет+")";
				КонецЕсли;
				Сообщить(ТекстСообщения);
				Отказ = Истина;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если Не Отказ Тогда
			
			Для Каждого СтрокаТаблицы Из  ТаблицаОстатков Цикл
				Проводка = Движения.ЗабалансовыйУчет.Добавить();
				Проводка.ДатаЗаписи = Дата;
				Проводка.Организация = Организация;
				Проводка.Период      = Дата;
				Проводка.Регистратор = Ссылка;
				Проводка.СчетКт      = СтрокаТаблицы.Счет;
				Если ВидЦенностей = Перечисления.абс_ВидыЦенностей.ОС_ЕМЦСС Тогда
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"АБС_ДобСегмент",СтрокаТаблицы.Сегмент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"АБС_ДобОборудование",СтрокаТаблицы.ОборудованиеЕМЦСС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Склады",СтрокаТаблицы.МестоХранения);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"АБС_ОСАрендованные",СтрокаТаблицы.АрендованноеОС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизации",СтрокаТаблицы.Сотрудник);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтрокаТаблицы.Получатель);
					
				КонецЕсли;
				
				Проводка.КоличествоКт = СтрокаТаблицы.Количество;
				Проводка.Сумма        = СуммаОстВсего*Количество/КоличествоОстВсего;
				Проводка.Содержание   = "Перемещение по счету "+СтрокаТаблицы.Счет;
				
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура  - обработчик события "Перед записью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры  // ПередЗаписью

Счет = ПланыСчетов.ЗабалансовыйУчет.ПустаяСсылка();
Содержание = "";

