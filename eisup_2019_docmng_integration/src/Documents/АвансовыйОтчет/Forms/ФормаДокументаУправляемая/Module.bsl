
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);
		
	Иначе
		
		// АБС ВСТАВКА Согласование первичных документов
		Объект.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка;
		
		Объект.ОтражатьВБухгалтерскомУчете 	= Ложь;
		Объект.ОтражатьВНалоговомУчете 		= Ложь;
		// АБС ВСТАВКА Согласование первичных документов КОНЕЦ
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;

		Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		
	КонецЕсли;
	
	//УстановитьВидимость();
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	
	// АБС ВСТАВКА Согласование первичных документов
	мСтатусДокумента = Объект.абс_Статус;
	
	ЗаполнитьСписокВыбораСтатусов();
	
	УстановитьРежимПросмотраДокумента();
	// АБС ВСТАВКА Согласование первичных документов КОНЕЦ
	
	
	
КонецПроцедуры


// АБС ВСТАВКА Согласование первичных документов 
&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусов()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	СписокСтатусов = Элементы.мСтатусДокумента.СписокВыбора;	
	СписокСтатусов.Очистить();
	
	Если СписокСтатусов = Неопределено Тогда
		СписокСтатусов = Новый СписокЗначений();
	Иначе
		СписокСтатусов.Очистить();
	КонецЕсли;
	
	СписокСтатусов.Добавить(Объект.абс_Статус);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтатус = абс_БизнесПроцессы.ПолучитьСтатусПервичногоДокументаПоРегистру(Объект.Ссылка);
	
	Если ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительОФК) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
		
		Если (Объект.Ответственный = мТекущийПользователь И 
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено)))
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)  Тогда
			
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Подготовка);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);
			
		КонецЕсли;
					
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			//СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Отказ);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено ИЛИ
			 НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПервичныхДокументов.КорректировкаДокумента Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено ИЛИ
			 НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыПервичныхДокументов.Завершен);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат НЕ Объект.абс_Статус = Объект.Ссылка.абс_Статус;
	
КонецФункции

&НаСервере
Процедура УстановитьРежимПросмотраДокумента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	ТекСтатус = Объект.Ссылка.абс_Статус;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_ТаблицаСтатусовБПТТК.РедактированиеДокумента,
	                      |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса
	                      |ИЗ
	                      |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                      |ГДЕ
	                      |	абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеПервичныхДокументов)
	                      |	И абс_ТаблицаСтатусовБПТТК.Статус = &ТекСтатус");
						  
	Запрос.УстановитьПараметр("ТекСтатус", ТекСтатус);
	
	РазрешеноРедактирование 		= Ложь;
	РазрешеноМенятьСтатус 			= Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ мРолиПользователя.Найти(Выборка.ОтветственныйЗаИзменениеСтатуса) = Неопределено Тогда
			РазрешеноМенятьСтатус = Истина;
			
			РазрешеноРедактирование = РазрешеноРедактирование ИЛИ Выборка.РедактированиеДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавили определение ответственных лиц по ответственным в подразделениях
	// поэтому не проверяем их по ролям пользователей.
		
	Если Объект.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка И
			((НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) ИЛИ
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникСклада) 				= Неопределено)) Тогда
		
		РазрешеноМенятьСтатус = Истина;
	Иначе
		РазрешеноМенятьСтатус = Ложь;
	КонецЕсли;
	
	// Если есть задачи текущему пользователю, то ему разрешено изменить статус
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	                      |			&ТекПользователь,
	                      |			ОбъектЗадачи = &ПервичныйДокументСсылка
	                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
						  
	Запрос.УстановитьПараметр("ТекПользователь"				, мТекущийПользователь);
	Запрос.УстановитьПараметр("ПервичныйДокументСсылка"		, Объект.Ссылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;	
		
	// Установим необходимый вид просмотра документа
	Если НЕ РазрешеноРедактирование Тогда
		
		ТолькоПросмотр = Истина;
		
	Иначе
		
		ТолькоПросмотр = Ложь;

	КонецЕсли;
			
	РазрешеноЗаписатьДокумент = (РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус);
		
	Элементы.мСтатусДокумента.ТолькоПросмотр = НЕ РазрешеноМенятьСтатус;	
	
	Элементы.ФормаПровестиИЗакрыть.Доступность 	= РазрешеноЗаписатьДокумент;	
	Элементы.ФормаЗакрыть.Доступность 			= РазрешеноЗаписатьДокумент;
	Элементы.ФормаПровести.Доступность 			= РазрешеноЗаписатьДокумент;
	//Элементы.ФормаОтменаПроведения.Доступность 	= РазрешеноЗаписатьДокумент;												
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	мСтатусДокумента = Объект.абс_Статус;
	
	ЗаполнитьСписокВыбораСтатусов();
	
	УстановитьРежимПросмотраДокумента();
КонецПроцедуры

&НаКлиенте
Процедура мСтатусДокументаПриИзменении(Элемент)
	
	Объект.абс_Статус = мСтатусДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	//Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
ЭтаФорма.Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
		
	Записать(Новый Структура("РежимЗаписи", ПолучитьРежимЗаписиДокумента()));
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
		
	Записать(Новый Структура("РежимЗаписи", ПолучитьРежимЗаписиДокумента()));
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРежимЗаписиДокумента()
	
	РежимЗаписи = Неопределено;
	
	Если 	Объект.абс_Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыПервичныхДокументов.Подготовка") ИЛИ
			Объект.абс_Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыПервичныхДокументов.Отказ") Тогда
		
		Если Объект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
		Иначе	
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
	ИначеЕсли Объект.абс_Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыПервичныхДокументов.КорректировкаДокумента") Тогда
		
		РежимЗаписи = РежимЗаписиДокумента.Запись;		
		
	Иначе
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	КонецЕсли;
	
	Возврат РежимЗаписи;
	
КонецФункции
  
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	// АБС ВСТАВКА Не разрешаем выбирать номенклатуру, которая не используется
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбменаССервером = Новый Структура("Номенклатура");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	
	ДанныеДляЗаполнения = ТоварыНоменклатураПриИзмененииСервер(ДанныеОбменаССервером);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеОбменаССервером);

КонецПроцедуры

&НаСервере
Функция ТоварыНоменклатураПриИзмененииСервер(ДанныеДляЗаполнения)
	
	Если ДанныеДляЗаполнения <> Неопределено Тогда		
		
		Если ДанныеДляЗаполнения.Номенклатура.абс_НеИспользовать Тогда
					
			ТекстСообщения = "" + Символы.ПС + "Выбранная номенклатура """ + СокрЛП(ДанныеДляЗаполнения.Номенклатура) + """ не используется." + 
				?(ЗначениеЗаполнено(ДанныеДляЗаполнения.Номенклатура.абс_ОсновнаяНоменклатура), " Вместо выбранной номенклатуры необходимо использовать номенклатуру с кодом: " + ДанныеДляЗаполнения.Номенклатура.абс_ОсновнаяНоменклатура.Код, "");
				
			#Если ВебКлиент Тогда
				Предупреждение(ТекстСообщения);
			#Иначе
			    ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
			#КонецЕсли
	
			ДанныеДляЗаполнения.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			
		ИначеЕсли НЕ ДанныеДляЗаполнения.Номенклатура.абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
			
			ТекстСообщения = "Выбранная номенклатура не находится в статусе ""Использование"".";
			
			#Если ВебКлиент Тогда
				Предупреждение(ТекстСообщения);
			#Иначе
			    ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
			#КонецЕсли
			
			ДанныеДляЗаполнения.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура абс_УказыватьСкладВТабличнойЧастиПриИзменении(Элемент)
	абс_УказыватьСкладВТЧ();
КонецПроцедуры

&НаСервере
Процедура абс_УказыватьСкладВТЧ()
	мУказаниеСкладовВТЧ = Объект.абс_УказыватьСкладВТабличнойЧасти;
КонецПроцедуры

