Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаБух;

Перем РежимВосстановленияПоследовательностейРасчетов Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УвеличениеДолга", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("УменьшениеДолга", Перечисления.ВидыЗадолженности.Дебиторская);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолга.Ссылка.Номер КАК Номер,
	|	КорректировкаДолга.Ссылка.Дата КАК Дата,
	|	КорректировкаДолга.Ссылка.КонтрагентДебитор КАК Получатель,
	|	КорректировкаДолга.Ссылка.Организация КАК Поставщик,
	|	КорректировкаДолга.Ссылка.Организация КАК Организация,
	|	КорректировкаДолга.НомерСтроки КАК НомерСтроки,
	|	КорректировкаДолга.ДоговорКонтрагента КАК ДоговорВзаиморасчетов,
	|	КорректировкаДолга.ДоговорКонтрагента.Представление КАК ПредставлениеДоговора,
	|	КорректировкаДолга.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КорректировкаДолга.Сделка КАК Сделка,
	|	КорректировкаДолга.Сделка.Представление КАК ПредставлениеСделки,
	|	ВЫБОР
	|		КОГДА КорректировкаДолга.ВидЗадолженности = &УвеличениеДолга
	|			ТОГДА КорректировкаДолга.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолгаКонтрагента,
	|	ВЫБОР
	|		КОГДА КорректировкаДолга.ВидЗадолженности = &УменьшениеДолга
	|			ТОГДА КорректировкаДолга.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УменьшениеДолгаКонтрагента
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Валюта";


	Шапка = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_КорректировкаДолга";

	Макет = ПолучитьМакет("КорректировкаДолга");

	// Выводим шапку накладной
	ЗаголовокВыведен = Ложь;
	НомерПП = 0;
	
	ВыборкаВалют       = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалют.Следующий() Цикл
		
		ИтогоВПлюс  = 0;
		ИтогоВМинус = 0;
		ВыборкаСтрокТовары = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗаголовокВыведен Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.ТекстЗаголовка = ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ВыборкаСтрокТовары, "Корректировка долга");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Организация, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Получатель, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ЗаголовокВыведен = Истина;
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьМакета);

			ИтогоВПлюс  = ИтогоВПлюс  + ВыборкаСтрокТовары.УвеличениеДолгаКонтрагента;
			ИтогоВМИнус = ИтогоВМИнус + ВыборкаСтрокТовары.УменьшениеДолгаКонтрагента;

		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ИтогоВПлюс  = ИтогоВПлюс;
		ОбластьМакета.Параметры.ИтогоВМИнус = ИтогоВМИнус;
		ОбластьМакета.Параметры.Валюта      = ВыборкаВалют.Валюта;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаДолга" Тогда		
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками дебиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
	 |		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаРеглОстаток, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ КАК СуммаРеглОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыСКонтрагентами
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И УпрУчет = ИСТИНА
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыПоДокументам
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
	 |			И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |ГДЕ
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) > 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.Сумма                         = Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл                     = Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ остатками кредиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);
	Иначе
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
	 |		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаРеглОстаток, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ КАК СуммаРеглОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыСКонтрагентами
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И УпрУчет = ИСТИНА
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыПоДокументам
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
	 |			И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |ГДЕ
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
		НоваяСтрока.Сумма                         = - Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл                     = - Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейСуммДолгаРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("НомерСтрокиДокумента"          , "НомерСтроки");


	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"          , "СчетУчетаРасчетов");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам"              , "СчетУчетаАвансов");

	СтруктураПолей.Вставить("СчетУчетаРасчетов"          , "СчетУчетаРасчетов");
	СтруктураПолей.Вставить("СчетУчетаАвансов"           , "СчетУчетаАвансов");
	
	СтруктураПолей.Вставить("СуммаПлатежа"               , "СуммаРегл");
	СтруктураПолей.Вставить("СуммаНУ"                    , "СуммаНУ");
	
	СтруктураПолей.Вставить("КоррСчет"              					  , "Ссылка.СчетДт");
	СтруктураПолей.Вставить("КоррСубконто1"              				  , "Ссылка.СубконтоДт1");
	СтруктураПолей.Вставить("КоррСубконто2"              				  , "Ссылка.СубконтоДт2");
	СтруктураПолей.Вставить("КоррСубконто3"              				  , "Ссылка.СубконтоДт3");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности и ОтражатьВНалоговомУчете Тогда
		СтруктураПолей.Вставить("СуммаНУ"              					  , "СуммаНУ");
		
		СтруктураПолей.Вставить("КоррСчетНУ"              					  , "Ссылка.СчетДтНУ");
		СтруктураПолей.Вставить("КоррСубконтоНУ1"              				  , "Ссылка.СубконтоДтНУ1");
		СтруктураПолей.Вставить("КоррСубконтоНУ2"              				  , "Ссылка.СубконтоДтНУ2");
		СтруктураПолей.Вставить("КоррСубконтоНУ3"              				  , "Ссылка.СубконтоДтНУ3");
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура УдалитьДвиженияДляВосстановленияПоследовательностейРасчетов(Отказ)
	
	Попытка
		
		СтруктураРегистровНакопления = Новый Структура("
		|НДСВключенныйВСтоимость, НДСКосвенныеРасходы, НДСНачисленный, НДСПартииТоваров, НДСпоОСиНМА, 
		|НДСПредъявленный, НДСПредъявленныйРеализация0, НДСРеализация0,
		|РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации, РасчетыПоРеализацииВУсловныхЕдиницахОрганизации");
		
		Для каждого Регистр Из СтруктураРегистровНакопления Цикл
			
			НаборЗаписей = РегистрыНакопления[Регистр.Ключ].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		//СтруктураРегистровСведений = Новый Структура("РасчетыПоПриобретениюОрганизации, РасчетыПоРеализацииОрганизации");
		//
		//Для каждого Регистр Из СтруктураРегистровСведений Цикл
		//	
		//	НаборЗаписей = РегистрыСведений[Регистр.Ключ].СоздатьНаборЗаписей();
		//	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		//	НаборЗаписей.Записать();
		//	
		//КонецЦикла;
		//
		СтруктураРегистровБухгалтерии = Новый Структура("Налоговый, Хозрасчетный");
		
		Для каждого Регистр Из СтруктураРегистровБухгалтерии Цикл
			
			НаборЗаписей = РегистрыБухгалтерии[Регистр.Ключ].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	Исключение
		
		Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, Заголовок);
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ПодготовитьТаблицуСуммДолгаУпр(ТаблицаРасчетов, СтруктураШапкиДокумента);
	ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента);
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуСуммДолгаУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаКонтрагента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаКонтрагента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Если документ расчетов не указан, то при ведении по документам расчетов необходимо
		// указать ссылку на текущий документ
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) 
			И СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаВзаиморасчеты = Неопределено;
		КонецЕсли;

		СтрокаТаблицы.УвеличениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаТаблицы.Сумма);

		СтрокаТаблицы.УменьшениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаТаблицы.Сумма);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.УвеличениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 0,
		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтрокаТаблицы.КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтрокаТаблицы.КратностьВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));

		СтрокаТаблицы.УменьшениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, 
		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтрокаТаблицы.КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтрокаТаблицы.КратностьВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));

	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента)

	// Добполнение таблицы расчетов полями.
	
	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.Колонки.Добавить("ВидРасчетовСКонтрагентом", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасчетовСКонтрагентами"));
	ТаблицаРасчетов.Колонки.Добавить("УвеличениеДолгаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетов.Колонки.Добавить("УменьшениеДолгаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаРасчетов.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентами.Прочее,"ВидРасчетовСКонтрагентом");
	
	// Заполняем контрагента по значению поля КонтрагентДебитор
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
	СтрокиДебиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		// Контрагент для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
		КонецЦикла; 
		
		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 000 для последующей корректировки (объединения)
		// движений по кредиторской и дебиторской задолженностям.
		Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Вспомогательный,"КоррСчет");
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");
			
		иначе //абсо +
			
			ТаблицаРасчетов.Колонки.Добавить("КоррСчетКт");
			ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоКт1");
			ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоКт2");
			ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоКт3");
			ТаблицаРасчетов.Колонки.Добавить("КоррСчетДт");
			ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоДт1");
			ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоДт2");
			ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоДт3");
			
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ТаблицаРасчетов.Колонки.Добавить("КоррСчетКтНУ");
				ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоКтНУ1");
				ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоКтНУ2");
				ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоКтНУ3");
				ТаблицаРасчетов.Колонки.Добавить("КоррСчетДтНУ");
				ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоДтНУ1");
				ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоДтНУ2");
				ТаблицаРасчетов.Колонки.Добавить("КоррСубконтоДтНУ3");
			КонецЕсли; 
			
			// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
			Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
				СтрокаКредиторки.КоррСчетКт = СтруктураШапкиДокумента.СчетКт;
				СтрокаКредиторки.КоррСубконтоКт1 = СтруктураШапкиДокумента.СубконтоКт1;
				СтрокаКредиторки.КоррСубконтоКт2 = СтруктураШапкиДокумента.СубконтоКт2;
				СтрокаКредиторки.КоррСубконтоКт3 = СтруктураШапкиДокумента.СубконтоКт3;
				Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СтрокаКредиторки.КоррСчетКтНУ = СтруктураШапкиДокумента.СчетКтНУ;
					СтрокаКредиторки.КоррСубконтоКтНУ1 = СтруктураШапкиДокумента.СубконтоКтНУ1;
					СтрокаКредиторки.КоррСубконтоКтНУ2 = СтруктураШапкиДокумента.СубконтоКтНУ2;
					СтрокаКредиторки.КоррСубконтоКтНУ3 = СтруктураШапкиДокумента.СубконтоКтНУ3;
				КонецЕсли; 
			КонецЦикла; 
		
			// Счет и аналитику списания для Дебиторской задолженности устанавливается из другого поля
			Для каждого СтрокаДебиторки Из СтрокиДебиторки Цикл
				СтрокаДебиторки.КоррСчетДт = СтруктураШапкиДокумента.СчетДт;
				СтрокаДебиторки.КоррСубконтоДт1 = СтруктураШапкиДокумента.СубконтоДт1;
				СтрокаДебиторки.КоррСубконтоДт2 = СтруктураШапкиДокумента.СубконтоДт2;
				СтрокаДебиторки.КоррСубконтоДт3 = СтруктураШапкиДокумента.СубконтоДт3;
				Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СтрокаДебиторки.КоррСчетДтНУ = СтруктураШапкиДокумента.СчетДтНУ;
					СтрокаДебиторки.КоррСубконтоДтНУ1 = СтруктураШапкиДокумента.СубконтоДтНУ1;
					СтрокаДебиторки.КоррСубконтоДтНУ2 = СтруктураШапкиДокумента.СубконтоДтНУ2;
					СтрокаДебиторки.КоррСубконтоДтНУ3 = СтруктураШапкиДокумента.СубконтоДтНУ3;
				КонецЕсли; 
			КонецЦикла; 
		
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор,"КоррСубконто1");
		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"КоррСубконто2");
		
		// Счет переноса для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
		КонецЦикла; 
			
	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;
			СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;
			СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтрокаКредиторки.КоррСчетНУ = СтруктураШапкиДокумента.СчетКтНУ;
				СтрокаКредиторки.КоррСубконтоНУ1 = СтруктураШапкиДокумента.СубконтоКтНУ1;
				СтрокаКредиторки.КоррСубконтоНУ2 = СтруктураШапкиДокумента.СубконтоКтНУ2;
				СтрокаКредиторки.КоррСубконтоНУ3 = СтруктураШапкиДокумента.СубконтоКтНУ3;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	// Определим вид погашения задолженности - возврат оплаты или непосредственно погашение.
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		СтрокаРасчетов.УвеличениеДолгаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаРасчетов.СуммаРегл);

		СтрокаРасчетов.УменьшениеДолгаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаРасчетов.СуммаРегл);
		
		Если СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			или СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			Тогда
			
			СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
			
			Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская тогда
				//Это возврат от поставщика
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			или СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			Тогда
			
			СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
			
			Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская тогда
				//Это возврат покупателю
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолгаРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Дебитор""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Кредитор""!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		
	Иначе //.ПереносЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Получатель""!");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
	
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
				СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Вспомогательный счет""!");
			КонецЕсли;
			
		Иначе
			ЕстьДебиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") <> Неопределено;
			ЕстьКредиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") <> Неопределено;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				
				Если ЕстьДебиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет переноса дебиторской задолженности""!");
				КонецЕсли;
				
				Если ЕстьКредиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет переноса кредиторской задолженности""!");
				КонецЕсли;
				
			//абсо {
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
				И ИспользоватьВспомогательныйСчет Тогда	
				
				Если ЕстьДебиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности""!");
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтруктураОбязательныхПолей.Вставить("СчетДтНУ", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности в НУ""!");
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьКредиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности""!");
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтруктураОбязательныхПолей.Вставить("СчетКтНУ", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности в НУ""!");
					КонецЕсли;
				КонецЕсли;
			//}асбо	
			
			Иначе //.СписаниеЗадолженности 
				
				Если ЕстьДебиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности""!");
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтруктураОбязательныхПолей.Вставить("СчетДтНУ", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности в НУ""!");
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьКредиторскаяЗадолженность Тогда
					СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности""!");
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтруктураОбязательныхПолей.Вставить("СчетКтНУ", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности в НУ""!");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// {{KM WARE Агапов Н.А. Заявка №34608 29.10.2015 начало
	//Организация в документе должна совпадать с организацией, указанной в договоре для переноса долга
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
	//	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	//КонецЕсли;
	// }}KM WARE Агапов Н.А. Заявка №34608 29.10.2015 окончание
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	ЭтоВалютныйДокумент = СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		ПроверятьТипСделки = Истина;
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ТребуемыйТипСделки      = Тип("ДокументСсылка.ЗаказПокупателя");
				ПредставлениеТипаСделки = "Заказ покупателя"; 
			Иначе
				ТребуемыйТипСделки      = Тип("ДокументСсылка.ЗаказПоставщику");
				ПредставлениеТипаСделки = "Заказ поставщику"; 
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ТребуемыйТипСделки      = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
				ПредставлениеТипаСделки = "Счет на оплату покупателю"; 
			Иначе
				ТребуемыйТипСделки      = Тип("ДокументСсылка.СчетНаОплатуПоставщика");
				ПредставлениеТипаСделки = "Счет на оплату поставщику"; 
			КонецЕсли;
		Иначе
			ПроверятьТипСделки = Ложь;
		КонецЕсли;
	Иначе
		ПроверятьТипСделки = Ложь;
	КонецЕсли;
			
	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)  Тогда
			Продолжить;
		КонецЕсли;
		
        СтрокаНачалаСообщенияОбОшибке = "В строке "+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " ";

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(
					СтрокаНачалаСообщенияОбОшибке + "выбран договор, взаиморасчеты по которому ведутся по заказам.
					|Необходимо заполнить сделку!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента Тогда
			Если ЭтоВалютныйДокумент ИЛИ НЕ СтрокаТаблицы.РасчетыВУсловныхЕдиницах Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(
					СтрокаНачалаСообщенияОбОшибке + "выбран договор с несоответствующей документу валютой взаиморасчетов.
					|Необходимо выбрать договор с валютой " + СтруктураШапкиДокумента.ВалютаДокумента
					+ ?(ЭтоВалютныйДокумент, "", " или договор в условных единицах"), Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли;
		
		Если ПроверятьТипСделки Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) 
				ИЛИ ТипЗнч(СтрокаТаблицы.СделкаВзаиморасчеты) <> ТребуемыйТипСделки Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке(
					СтрокаНачалаСообщенияОбОшибке + "необходимо выбрать сделку с типом " + ПредставлениеТипаСделки + ",
			    	|иначе перенос долга на выбранный в шапке договор невозможен!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если ЭтоВалютныйДокумент Тогда
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаКонтрагента");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаКонтрагента");
		Иначе
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаРегл");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаРегл");
		КонецЕсли; 
		
		Разница = СуммаДеб - СуммаКред;
		
		Если Разница <> 0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. 
			                 |Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Дебиторская задолженность: "  + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2")  + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Разница: " + Формат(Разница, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетов");
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу значений, не содержащую строк источника со значением Ложь в колонке "ВестиПоДокументамРасчетовСКонтрагентом"
//
// Параметры:
// ТаблицаИсточник		- <ТаблицаЗначений> исходная таблица. 
//							Обязательно должна содержать колонку "ВестиПоДокументамРасчетовСКонтрагентом"
//
Функция ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаИсточник)
	
	ТаблицаРезультат = ТаблицаИсточник.Скопировать();
	СтрокиНеПоДокументам = ТаблицаРезультат.НайтиСтроки(Новый Структура("ВестиПоДокументамРасчетовСКонтрагентом", Ложь));
	Для каждого СтрокаНеПоДокументам Из СтрокиНеПоДокументам Цикл
		ТаблицаРезультат.Удалить(СтрокаНеПоДокументам);
	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции // ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок)
							
	Если НЕ РежимВосстановленияПоследовательностейРасчетов Тогда
	
		ДвиженияПоРегистрамУпр(РежимПроведения,  СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
		
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, 
		                                             ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
		       	                                     ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	
		ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	КонецЕсли;

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, 
							Отказ, Заголовок);
							
	ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, РежимВосстановленияПоследовательностейРасчетов, Отказ, Заголовок);
		
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ТаблицаУвеличениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		ТаблицаУменьшениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУвеличениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУвеличениеДолга.Получить(Счетчик);
			Если СтрокаТаблицы.УвеличениеДолгаКонтрагента = 0 Тогда
				ТаблицаУвеличениеДолга.Удалить(СтрокаТаблицы);
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУменьшениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУменьшениеДолга.Получить(Счетчик);
			
			Если СтрокаТаблицы.УменьшениеДолгаКонтрагента = 0 Тогда
				ТаблицаУменьшениеДолга.Удалить(СтрокаТаблицы);
			Иначе 
				Счетчик= Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаУвеличениеДолга.Количество() > 0 Тогда
			
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаУпр.Имя         = "СуммаУпр";
			ТаблицаУвеличениеДолга.Колонки.СделкаВзаиморасчеты.Имя        = "Сделка";
			
			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУвеличениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
			// ПО РЕГИСТРУ РасчетыСКонтрагентами.
			НаборДвижений = Движения.РасчетыСКонтрагентами;
			ТаблицаУвеличениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			ТаблицаУвеличениеДолгаРасчеты = ТаблицаУвеличениеДолга.Скопировать();
			ТаблицаУвеличениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

			ТаблицаКомитентов = ТаблицаУвеличениеДолга.Скопировать();
			Счетчик = 0;
			Пока Счетчик < ТаблицаКомитентов.Количество() Цикл

				СтрокаТаблицы = ТаблицаКомитентов.Получить(Счетчик);

				Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
				 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
					ТаблицаКомитентов.Удалить(СтрокаТаблицы);
				Иначе 
					Счетчик= Счетчик + 1;
				КонецЕсли;

			КонецЦикла;

			Если ТаблицаКомитентов.Количество() > 0 Тогда

				НаборДвижений = Движения.ДенежныеСредстваКомитента;
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ДенежныеСредстваКомитента.ВыполнитьРасход();

			КонецЕсли;

		КонецЕсли;

		Если ТаблицаУменьшениеДолга.Количество() > 0 Тогда

			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаУпр.Имя = "СуммаУпр";
			ТаблицаУменьшениеДолга.Колонки.СделкаВзаиморасчеты.Имя = "Сделка";

			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУменьшениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

			НаборДвижений = Движения.РасчетыСКонтрагентами;
			ТаблицаУменьшениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			ТаблицаУменьшениеДолгаРасчеты = ТаблицаУменьшениеДолга.Скопировать();
			ТаблицаУменьшениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУменьшениеДолгаРасчеты, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

			ТаблицаКомиссионеров = ТаблицаУменьшениеДолга.Скопировать();
			Счетчик = 0;
			Пока Счетчик < ТаблицаКомиссионеров.Количество() Цикл

				СтрокаТаблицы = ТаблицаКомиссионеров.Получить(Счетчик);

				Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
				 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
					ТаблицаКомиссионеров.Удалить(СтрокаТаблицы);
				Иначе 
					Счетчик= Счетчик + 1;
				КонецЕсли;

			КонецЦикла;

			Если ТаблицаКомиссионеров.Количество() > 0 Тогда

				НаборДвижений = Движения.ДенежныеСредстваКомиссионера;
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУменьшениеДолга, ТаблицаДвижений);

				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Движения.ДенежныеСредстваКомиссионера.ВыполнитьРасход();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, 
	                                                   ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                                                   ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность)
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	ДатаДвижений = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата, Дата);
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;

	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
 	                              ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                              ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, 
								  Отказ, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	
	ПроводкиБУ      = Движения.Хозрасчетный;
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	ДатаДока        = Дата;
	ВалютаРег       = мВалютаРегламентированногоУчета;
	ДанныеВалютыРег = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
	
	КэшВидовСубконтоПоСчетам = Новый Соответствие;
	
	// Зафиксируем расчеты с покупателями
	
	Если ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() > 0 Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
				КоррСчет = СчетДт;
			Иначе
				КоррСчет = ВспомогательныйСчет;
			КонецЕсли;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентКредитор);
		Иначе
			КоррСчет = СчетКт;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		КонецЕсли;
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, СтруктураШапкиДокумента);

		Если Не (СтруктураПараметровДДС = Ложь) тогда
			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Возврат);
			СтруктураПараметровДДС.Вставить("Направление", "Выбытие");
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;
			
	КонецЕсли;
	
	Если ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() > 0 Тогда
		
		КоррСчет = СчетДт;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
			и СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда 
			КоррСчет = СчетКт;
			Для Каждого СтрТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность Из ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность Цикл //АБС Коломиец 19318+
				СтрТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.КоррСубконто1 = СубконтоКт1;
				СтрТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.КоррСубконто2 = СубконтоКт2;
                СтрТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.КоррСубконто3 = СубконтоКт3;				
			КонецЦикла;  //АБС Коломиец 19318-
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
			и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			КоррСчет = ВспомогательныйСчет;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность, СтруктураШапкиДокумента);

		Если Не (СтруктураПараметровДДС = Ложь) тогда
			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
			СтруктураПараметровДДС.Вставить("Направление", "Поступление");
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;

	КонецЕсли;
	
	// Зафиксируем расчеты с поставщиками
	
	Если ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() > 0 Тогда
		
		КоррСчет = СчетДт;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
			и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			КоррСчет = ВспомогательныйСчет;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, СтруктураШапкиДокумента);
		Если Не (СтруктураПараметровДДС = Ложь) тогда

			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Возврат);
			СтруктураПараметровДДС.Вставить("Направление", "Поступление");
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;
			
	КонецЕсли;

	Если ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() > 0 Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
				КоррСчет = СчетДт;
			Иначе
				КоррСчет = ВспомогательныйСчет;
			КонецЕсли;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентКредитор);
		Иначе
			КоррСчет = СчетКт;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		КонецЕсли;
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок, КоррСчет, ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, СтруктураШапкиДокумента);

		Если Не (СтруктураПараметровДДС = Ложь) тогда
			СтруктураПараметровДДС.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
			СтруктураПараметровДДС.Вставить("Направление", "Выбытие");
			
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям, , , КэшВидовСубконтоПоСчетам);
		Конецесли;

	КонецЕсли;
	
	// Зафиксируем прочие расчеты
	
	Для каждого ТекущийПлатеж Из ТаблицаПоСуммамДолга Цикл
		Если ТекущийПлатеж.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению
			или ТекущийПлатеж.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			Тогда
			// Договор обработан ранее 
			Продолжить;
		КонецЕсли; 
		
		Если ТекущийПлатеж.УвеличениеДолгаКонтрагента <> 0 Тогда
			
			ДтКт     = "Дт";
			КоррДтКт = "Кт";
			СчетРасчетов = ТекущийПлатеж.СчетУчетаРасчетов;
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Увеличение долга";

			Проводка["Счет" + ДтКт]= СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт],Проводка["Субконто" + ДтКт], "Контрагенты", 
				?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета,
				СтруктураШапкиДокумента.КонтрагентКредитор, СтруктураШапкиДокумента.КонтрагентДебитор));
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт],Проводка["Субконто" + ДтКт], "Договоры", ТекущийПлатеж.ДоговорКонтрагента);
				
			Если СчетРасчетов.Валютный тогда
				Проводка["Валюта" + ДтКт]        = ТекущийПлатеж.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКт] = ТекущийПлатеж.УвеличениеДолгаКонтрагента;
			КонецЕсли;
				
			Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчет;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УвеличениеДолгаКонтрагента,
						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				КонецЕсли;
					
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета  //абсо
				И ИспользоватьВспомогательныйСчет Тогда
				
				Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчетКт;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,	ТекущийПлатеж.КоррСубконтоКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,	ТекущийПлатеж.КоррСубконтоКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,	ТекущийПлатеж.КоррСубконтоКт3);
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УвеличениеДолгаКонтрагента,
						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				КонецЕсли;
					
			Иначе
				
				Для каждого ВидСубконтоКоррСчета из ТекущийПлатеж.КоррСчет.ВидыСубконто цикл
					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], ВидСубконтоКоррСчета.НомерСтроки, СтруктураШапкиДокумента["Субконто" + КоррДтКт + ВидСубконтоКоррСчета.НомерСтроки]);
				КонецЦикла;
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = ТекущийПлатеж.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = ТекущийПлатеж.УвеличениеДолгаКонтрагента;
				КонецЕсли;
				
			КонецЕсли;

			Проводка.Сумма = ТекущийПлатеж.СуммаРегл;
			
		КонецЕсли; 
		
		Если ТекущийПлатеж.УменьшениеДолгаКонтрагента <> 0 Тогда
			
			ДтКт     = "Кт";
			КоррДтКт = "Дт";              
			СчетРасчетов = ?(НЕ ЗначениеЗаполнено(ТекущийПлатеж.СчетУчетаАвансов),ТекущийПлатеж.СчетУчетаРасчетов, ТекущийПлатеж.СчетУчетаАвансов);
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Уменьшение долга";

			Проводка["Счет" + ДтКт]= СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт], Проводка["Субконто" + ДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт], Проводка["Субконто" + ДтКт],"Договоры",     ТекущийПлатеж.ДоговорКонтрагента);
				
			Если СчетРасчетов.Валютный тогда
				Проводка["Валюта" + ДтКт]        = ТекущийПлатеж.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКт] = ТекущийПлатеж.УменьшениеДолгаКонтрагента;
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(ТекущийПлатеж.КоррСчет) Тогда //абсо 
				ТекущийПлатеж.КоррСчет = ТекущийПлатеж.КоррСчетДт;
			КонецЕсли;
			
			Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчет;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УменьшениеДолгаКонтрагента,
						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				КонецЕсли;
					
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета  //абсо
				И ИспользоватьВспомогательныйСчет Тогда
				
				Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчетДт;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,	ТекущийПлатеж.КоррСубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,	ТекущийПлатеж.КоррСубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,	ТекущийПлатеж.КоррСубконтоДт3);
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УвеличениеДолгаКонтрагента,
						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				КонецЕсли;
					
			Иначе
				
				Для каждого ВидСубконтоКоррСчета из ТекущийПлатеж.КоррСчет.ВидыСубконто цикл
					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], ВидСубконтоКоррСчета.НомерСтроки, СтруктураШапкиДокумента["Субконто" + КоррДтКт + ВидСубконтоКоррСчета.НомерСтроки]);
				КонецЦикла;
				
				Если ТекущийПлатеж.КоррСчет.Валютный Тогда
					Проводка["Валюта" + КоррДтКт] 		 = ТекущийПлатеж.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + КоррДтКт] = ТекущийПлатеж.УменьшениеДолгаКонтрагента;
				КонецЕсли;
				
			КонецЕсли;

			Проводка.Сумма = ТекущийПлатеж.СуммаРегл;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	//АБС ВСТАВКА №38162 НАЧАЛО «31 марта 2014 г.», Пополитов
	Счет91   = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет9102 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Счет63   = ПланыСчетов.Налоговый.НайтиПоКоду("63");
	//\\АБС ВСТАВКА №38162 КОНЕЦ 
	
	// Списание задолженности в налоговом учете
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
		и ТаблицаПоСуммамДолга.Количество()>0
		и СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Для Каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
			Если СтрокаДолга.СуммаНУ = 0 Тогда
				Продолжить;
			КонецЕсли; 
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Сумма       = СтрокаДолга.СуммаНУ;
			
			Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				ПроводкаНУ.Содержание  = "Списана дебиторская задолженность";
				
				ПроводкаНУ.СчетДт = СтрокаДолга.КоррСчетНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтрокаДолга.КоррСубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтрокаДолга.КоррСубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтрокаДолга.КоррСубконтоНУ3);
				
				ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
				
				//АБС ВСТАВКА №38162 НАЧАЛО «31 марта 2014 г.», Пополитов
				Если ЗначениеЗаполнено(СчетДт) и СчетДт.ПринадлежитЭлементу(Счет91)
					и ЗначениеЗаполнено(СчетДтНУ) и СчетДтНУ.ПринадлежитЭлементу(Счет63) Тогда
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Содержание  	= "Списана дебиторская задолженность ВР";
					ПроводкаНУ.Сумма 		= СтрокаДолга.СуммаНУ;
					
					ПроводкаНУ.СчетКт       = СтрокаДолга.КоррСчетНУ;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.КоррСубконтоНУ1);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.КоррСубконтоНУ2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаДолга.КоррСубконтоНУ3);
				
					ПроводкаНУ.СчетДт      	= ?(СчетДт.ПринадлежитЭлементу(Счет9102),ПланыСчетов.Налоговый.ВнереализационныеРасходы,ПланыСчетов.Налоговый.ВнереализационныеДоходы);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);					
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
					
					ПроводкаНУ.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.ВР;
					ПроводкаНУ.ВидУчетаКт	= Перечисления.ВидыУчетаПоПБУ18.ВР;
					
				КонецЕсли;
				//\\АБС ВСТАВКА №38162 КОНЕЦ 
				
			ИначеЕсли СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
				ПроводкаНУ.Содержание  = "Списана кредиторская задолженность";
				
				ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
				
				ПроводкаНУ.СчетКт = СтрокаДолга.КоррСчетНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.КоррСубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.КоррСубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаДолга.КоррСубконтоНУ3);
			КонецЕсли; 
			
		КонецЦикла; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
		И ИспользоватьВспомогательныйСчет
		и ТаблицаПоСуммамДолга.Количество()>0
		и СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Для Каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
			Если СтрокаДолга.СуммаНУ = 0 Тогда
				Продолжить;
			КонецЕсли; 
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Сумма       =  СтрокаДолга.СуммаНУ;
			
			Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				ПроводкаНУ.Содержание  = "Списана дебиторская задолженность";
				
				ПроводкаНУ.СчетДт = СтрокаДолга.КоррСчетДтНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтрокаДолга.КоррСубконтоДтНУ1);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтрокаДолга.КоррСубконтоДтНУ2);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтрокаДолга.КоррСубконтоДтНУ3);
				
				ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
				
			ИначеЕсли СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
				ПроводкаНУ.Содержание  = "Списана кредиторская задолженность";
				
				ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", СтрокаДолга.ДоговорКонтрагента);
				
				ПроводкаНУ.СчетКт = СтрокаДолга.КоррСчетКтНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.КоррСубконтоКтНУ1);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.КоррСубконтоКтНУ2);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаДолга.КоррСубконтоКтНУ3);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
		и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
		
		БухгалтерскийУчетРасчетовСКонтрагентами.СопоставитьПроводкиКорректировкиДолгаСВспомогательнымСчетом(ПроводкиБУ);
		
	КонецЕсли; 
	
	////абс Родин Лимитный контроль 
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда	
	//	Если глЗначениеПеременной("абс_ИспользоватьКонтрольЛимитовПоДоговорам") Тогда
	//		Если Не Отказ Тогда
	//			
	//			СообщениеПриОтказе = "";
	//			
	//			СтруктураТаблиц = Новый Структура();
	//			СтруктураТаблиц.Вставить("ТаблицаПоСуммамДолга",ТаблицаПоСуммамДолга);
	//			
	//			абс_БюджетированиеПривилегированный.ФормированиеДвиженийПоКонтролируемымЗатратам(ЭтотОбъект,Отказ,СообщениеПриОтказе,СтруктураТаблиц,Ложь);
	//			
	//			Если Отказ И СообщениеПриОтказе <> "" Тогда
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеПриОтказе,Отказ); 
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли; 
	////абс Родин Лимитный контроль 
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Используется при проведении документа "Корректировка долга" с операцией "Перенос задолженности".
// Формирует движения регистров по контрагенту, на которого переносится долг.
//
Процедура ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, РежимВосстановленияПоследовательностейРасчетов, Отказ, Заголовок) Экспорт
	
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Возврат;
	КонецЕсли;
	
	ПереносДолгаНаДругогоКонтрагента = СтруктураШапкиДокумента.КонтрагентДебитор <> СтруктураШапкиДокумента.КонтрагентКредитор;
	
	ФормироватьДвиженияУпрВзаиморасчетов = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И НЕ РежимВосстановленияПоследовательностейРасчетов;
	
	ФормироватьДвиженияВзаиморасчетовПоДокументам = НЕ РежимВосстановленияПоследовательностейРасчетов 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом;
	
	Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		ВидРасчетовСКонтрагентом = 
			?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
			Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации, Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
			
	КонецЕсли;
	
	// Движения регистров ВзаиморасчетыСКонтрагентами, РасчетыСКонтрагентами, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
	
	Если ФормироватьДвиженияУпрВзаиморасчетов ИЛИ ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
			
			ВидДвижения = ?(СтрокаДолга.УвеличениеДолгаКонтрагента > 0, 
			ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			
			Если ФормироватьДвиженияУпрВзаиморасчетов Тогда
				
				// ВзаиморасчетыСКонтрагентами 
				
				Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				Движение.Сделка             = Неопределено;
				
				НоваяСуммаВзаиморасчетов    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаДолга.Сумма,
				СтрокаДолга.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтрокаДолга.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтрокаДолга.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				СуммаУпр = ?(ВидДвижения = ВидДвиженияНакопления.Расход, СтрокаДолга.УвеличениеДолгаУпр, СтрокаДолга.УменьшениеДолгаУпр);
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Движение.СуммаУпр            = СуммаУпр;
				
				// РасчетыСКонтрагентами 
				
				Движение = Движения.РасчетыСКонтрагентами.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				Движение.Сделка             = Неопределено;
				Движение.РасчетыВозврат     = Перечисления.РасчетыВозврат.Расчеты;
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Движение.СуммаУпр            = СуммаУпр;
				
			КонецЕсли;
			
			// ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
			
			Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
				
				Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				Движение.Сделка             = Неопределено;
				
				НовыйДокументРасчетов = ?(НЕ ЗначениеЗаполнено(СтрокаДолга.ДокументРасчетовСКонтрагентом) ИЛИ ПереносДолгаНаДругогоКонтрагента, 
				СтруктураШапкиДокумента.Ссылка, СтрокаДолга.ДокументРасчетовСКонтрагентом);
				
				Движение.ДокументРасчетовСКонтрагентом = НовыйДокументРасчетов;
				Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
				Движение.УпрУчет                       = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					Движение.СуммаРегл = СтрокаДолга.СуммаРегл;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФормироватьДвиженияРасчетовПоРеализации = 
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ФормироватьДвиженияРасчетовПоПриобретению = 
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
			
	Если ФормироватьДвиженияРасчетовПоРеализации Тогда
		НаборЗаписей = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
		СчетПрихода = СтруктураШапкиДокумента.СчетДт; 
		СчетРасхода = СтруктураШапкиДокумента.СчетКт; 
	ИначеЕсли ФормироватьДвиженияРасчетовПоПриобретению Тогда
		НаборЗаписей = Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
		СчетПрихода = СтруктураШапкиДокумента.СчетКт; 
		СчетРасхода = СтруктураШапкиДокумента.СчетДт; 
	Иначе
		НаборЗаписей = Неопределено;
	КонецЕсли;
	
	Если НЕ НаборЗаписей = Неопределено Тогда
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		
		Для каждого ДвижениеОснование Из НаборЗаписей Цикл
			
			СчетОплаты = ?(ДвижениеОснование.ВидДвижения = ВидДвиженияНакопления.Приход, СчетПрихода, СчетРасхода);   //АБС Коломиец 000013209+  транзитный счет исключаем
			Если СчетОплаты.Код = "76.99" Тогда 				
				Продолжить;
			КонецЕсли;     //АБС Коломиец-
			
			НовоеДвижение             = ТаблицаЗаписей.Добавить();
			НовоеДвижение.Период      = ДвижениеОснование.Период;
			НовоеДвижение.Активность  = Истина;
			НовоеДвижение.ВидДвижения = ?(ДвижениеОснование.ВидДвижения = ВидДвиженияНакопления.Приход,
				ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			НовоеДвижение.Организация        = СтруктураШапкиДокумента.Организация;
			НовоеДвижение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
			НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			НовоеДвижение.Сделка             = Неопределено;
			//АБС ИЗМЕНЕНИЕ 36693  18.12.2013 15:44:30  Шамов
			//НовоеДвижение.Документ           = ?(ПереносДолгаНаДругогоКонтрагента И ЗначениеЗаполнено(ДвижениеОснование.ДатаОплаты),
			//	СтруктураШапкиДокумента.Ссылка, ДвижениеОснование.Документ);
			НовоеДвижение.Документ           = ?(ПереносДолгаНаДругогоКонтрагента,
				СтруктураШапкиДокумента.Ссылка, ДвижениеОснование.Документ);
			//АБС ИЗМЕНЕНИЕ 36693 КОНЕЦ
			НовоеДвижение.ДатаОплаты         = ?(ЗначениеЗаполнено(ДвижениеОснование.ДатаОплаты), Дата, '00010101');
			НовоеДвижение.СчетОплаты         = ?(ДвижениеОснование.ВидДвижения = ВидДвиженияНакопления.Приход, СчетПрихода, СчетРасхода);
			
			НовоеДвижение.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				ДвижениеОснование.СуммаВзаиморасчетов,
				ДвижениеОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				?(ДвижениеОснование.СуммаВзаиморасчетов = 0, 1, ДвижениеОснование.СуммаРег / ДвижениеОснование.СуммаВзаиморасчетов), СтруктураШапкиДокумента.КурсВзаиморасчетов,
				1, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
			
			НовоеДвижение.СуммаРег = ДвижениеОснование.СуммаРег;
			
		КонецЦикла;
	
		НаборЗаписей.Загрузить(ТаблицаЗаписей);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает субконто на счете по виду субконто. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконтоПоВидуСубконто(Счет, Субконто, ВидСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "") Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Счет.ВидыСубконто.Найти(ВидСубконто) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубконто + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // БухгалтерскийУчет.УстановитьСубконто()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация", "ДоговорОрганизация");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора", "ВидДоговора");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	КонецЕсли; 
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаДокумента Тогда
			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураШапкиДокумента.КурсДокумента);
			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураШапкиДокумента.КратностьДокумента);
		Иначе
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураКурса.Курс);
			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВосстановленияПоследовательностейРасчетов Тогда
		СтруктураШапкиДокумента.Вставить("РежимВосстановленияПоследовательностейРасчетов", Истина);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "СуммыДолга".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом"  , "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ДоговорВид"                              , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("Организация"                      , "ДоговорКонтрагента.Организация");

	СтруктураПолей.Вставить("КонтролироватьДенежныеСредстваКомитента" , "ДоговорКонтрагента.КонтролироватьДенежныеСредстваКомитента");
	СтруктураПолей.Вставить("СделкаВзаиморасчеты"                     , "Сделка");
	СтруктураПолей.Вставить("СделкаРасчеты"                           , "Сделка");
	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"           , "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("Сумма"                                   , "Сумма");
	СтруктураПолей.Вставить("СуммаРегл"                               , "СуммаРегл");
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
	//АБС ВСТАВКА 40676  21.05.2014 16:43:05  Шамов
	СтруктураПолей.Вставить("абс_ОтключитьПроверкуСчетовРасчетовАвансов", "абс_ОтключитьПроверкуСчетовРасчетовАвансов");
	//АБС ВСТАВКА 40676 КОНЕЦ
	
	ДополнитьСтруктуруПолейСуммДолгаРегл(СтруктураПолей);

	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ДоговорКонтрагентаПредставление"            , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента)");
	СтруктураСложныхПолей.Вставить("СделкаПредставление"                        , "ПРЕДСТАВЛЕНИЕ(Док.Сделка)");
	СтруктураСложныхПолей.Вставить("ДокументРасчетовСКонтрагентомПредставление" , "ПРЕДСТАВЛЕНИЕ(Док.ДокументРасчетовСКонтрагентом)");
	СтруктураСложныхПолей.Вставить("ВалютаВзаиморасчетовПредставление"          , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов)");
	
	РезультатЗапросаПоСуммамДолга = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			Тогда
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			тогда
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			тогда
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе 
			Счетчик= Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			Тогда
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Учетная политика 
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		мУчетнаяПолитикаБух = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Иначе
		мУчетнаяПолитикаБух = Неопределено;
	КонецЕсли; 
	
	Если РежимВосстановленияПоследовательностейРасчетов Тогда
		СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", Истина);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", ?(НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух),Ложь,мУчетнаяПолитикаБух.ОпределятьАвансыПриПроведенииДокумента));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ОрганизацияДебитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентДебитор);
		Если НЕ ЗначениеЗаполнено(ОрганизацияДебитор) Тогда
			ОрганизацияКредитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентКредитор);
			Если ЗначениеЗаполнено(ОрганизацияКредитор) Тогда
				Организация        = ОрганизацияКредитор;
				КонтрагентДебитор  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
				КонтрагентКредитор = Основание.КонтрагентДебитор;  
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Организация = ОрганизацияДебитор;
			КонтрагентКредитор = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
			КонтрагентДебитор  = Основание.КонтрагентКредитор;  
		КонецЕсли;
		
		Для каждого СтрокаОснования Из Основание.СуммыДолга Цикл
			НоваяСтрока = СуммыДолга.Добавить();
			НоваяСтрока.ВидЗадолженности        = ?(СтрокаОснования.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, Перечисления.ВидыЗадолженности.Кредиторская, Перечисления.ВидыЗадолженности.Дебиторская);			
			
			ТекКонтрагент =  ?(НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, КонтрагентДебитор, КонтрагентКредитор);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент",   ТекКонтрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
				
			Запрос.Текст = "
			|ВЫБРАТЬ 
			|	Ссылка 
			|ИЗ Справочник.ДоговорыКонтрагентов
			|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Контрагент
			|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяСтрока.ДоговорКонтрагента = Выборка.Ссылка;
			Иначе 
				ttk_ОбщегоНазначения.СообщитьОбОшибке("У контрагента " + ТекКонтрагент + " отсутствует договор на поставку с организацией " + Организация + ".");
			КонецЕсли;
			
			НоваяСтрока.КурсВзаиморасчетов      = СтрокаОснования.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = СтрокаОснования.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                   = СтрокаОснования.Сумма;
			
		КонецЦикла;
			
	КонецЕсли;

	//АБС ВСТАВКА 58739 и 17801
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") 
		или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		абс_ЗаполнитьПоПлатежномуПоручению(Основание);
	КонецЕсли;	
	//\\АБС
	
	//Сторчевой А.Н. D2017-0119-3148 {                                   
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ttk_ПроектКорректировкиДога") Тогда
		абс_КорректировкаОснование = Основание;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,, "Дата, Номер, Ответственный, Комментарий");
		ТЗСуммыДолга = Основание.СуммыДолга.Выгрузить();
		Суммы = ТЗСуммыДолга.ВыгрузитьКолонку("Сумма");
		ЭтотОбъект.СуммыДолга.Загрузить(ТЗСуммыДолга);
		ЭтотОбъект.СуммыДолга.ЗагрузитьКолонку(Суммы, "СуммаРегл");
	КонецЕсли;
	// } Сторчевой А.Н. D2017-0119-3148
	
	//+ Машута А. 09.10.2018 http://sd.ttk.ru/sd/operator/#uuid:task$1413990
	УстановитьТипКонтрагентаПриЗаполнении();
	//- Машута А. 09.10.2018	
		
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый() И НЕ РежимВосстановленияПоследовательностейРасчетов;
	
КонецПроцедуры // ПередЗаписью


// АБС ВСТАВКА Фролов 11640
Процедура абс_ПроверкаЗаполненияКоррректировкаРегистров(Отказ)
	
	Если абс_КорректировкаРегистраРасчетыПоРеализации.Итог("СуммаВзаиморасчетов") <> 0 //ИЛИ абс_КорректировкаРегистраРасчетыПоРеализации.Итог("СуммаРег") <> 0 
		Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Регистр ""Расчеты по реализации (бухгалтерский учет)"": Сумма корректировок в Приход не совпадает с суммой корректировок в Расход.", Отказ);
	КонецЕсли;
	
	Если абс_КорректировкаРегистраРасчетыПоПриобретению.Итог("СуммаВзаиморасчетов") <> 0 //ИЛИ абс_КорректировкаРегистраРасчетыПоПриобретению.Итог("СуммаРег") <> 0 
		Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Регистр ""Расчеты по приобретению (бухгалтерский учет)"": Сумма корректировок в Приход не совпадает с суммой корректировок в Расход.", Отказ);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура абс_ДвиженияПоРегистрамКорректировкаРегистров(Отказ, РежимПроведения)	
	
	ДвиженияПоРеализации 		= Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
	ДвиженияПоПриобретению 		= Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
	
	ДвиженияПоРеализации.Очистить();
	ДвиженияПоПриобретению.Очистить();
	
	Для Каждого СтрокаКоррПоРеализации Из абс_КорректировкаРегистраРасчетыПоРеализации Цикл
		
		Движение = ДвиженияПоРеализации.Добавить();
		
		Движение.ВидДвижения = ?(СтрокаКоррПоРеализации.ВидДвижения = Перечисления.ВидыДвиженийПриходРасход.Приход, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		
		Движение.Период 				= Дата;
		
		Движение.ДоговорКонтрагента 	= ДоговорКонтрагента;
		Движение.Контрагент 			= КонтрагентДебитор;
		Движение.Организация 			= Организация;
		Движение.Документ				= СтрокаКоррПоРеализации.ДокументРасчетовСКонтрагентом;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаКоррПоРеализации, "СчетОплаты,Сделка,ДатаОплаты");
		
		Движение.СуммаВзаиморасчетов		= - СтрокаКоррПоРеализации.СуммаВзаиморасчетов;
		Движение.СуммаРег					= - СтрокаКоррПоРеализации.СуммаРег;		
		
	КонецЦикла;
	
	Для Каждого СтрокаКоррПоПриобретению Из абс_КорректировкаРегистраРасчетыПоПриобретению Цикл
		
		Движение = ДвиженияПоПриобретению.Добавить();
		
		Движение.ВидДвижения = ?(СтрокаКоррПоПриобретению.ВидДвижения = Перечисления.ВидыДвиженийПриходРасход.Приход, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		
		Движение.Период 				= Дата;
		
		Движение.ДоговорКонтрагента 	= ДоговорКонтрагента;
		Движение.Контрагент 			= КонтрагентДебитор;
		Движение.Организация 			= Организация;
		Движение.Документ				= СтрокаКоррПоПриобретению.ДокументРасчетовСКонтрагентом;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаКоррПоПриобретению, "СчетОплаты,Сделка,ДатаОплаты");
		
		Движение.СуммаВзаиморасчетов		= - СтрокаКоррПоПриобретению.СуммаВзаиморасчетов;
		Движение.СуммаРег					= - СтрокаКоррПоПриобретению.СуммаРег;
			
	КонецЦикла;
	
КонецПроцедуры
// АБС ВСТАВКА Фролов 11640 КОНЕЦ


Процедура абс_ПроверитьСчетаВзаиморасчетов(ТабВзаиморасчетов, ВидВзаиморасчетов, Отказ)
	
	Для Каждого СтрВзаиморасчетов из ТабВзаиморасчетов Цикл
		
		//АБС ВСТАВКА 40676  21.05.2014 16:02:22  Шамов
		Если СтрВзаиморасчетов.абс_ОтключитьПроверкуСчетовРасчетовАвансов Тогда
			#ЕСЛИ КЛИЕНТ ТОГДА
			ВремОтказ = Ложь;
			абс_СлужебныеФункции.ПроверитьСчетаРасчетовАвансов(СтрВзаиморасчетов.СчетУчетаРасчетов, СтрВзаиморасчетов.СчетУчетаАвансов, ВидВзаиморасчетов, ВремОтказ);
			Если ВремОтказ Тогда
				Сообщить("В строке " + СтрВзаиморасчетов.НомерСтроки + " счет учета расчетов с контрагентами не соответствует счету учета авансов!");
			КонецЕсли;
			#КОНЕЦЕСЛИ
			Продолжить;
		КонецЕсли;
		//АБС ВСТАВКА 40676 КОНЕЦ
		
		абс_СлужебныеФункции.ПроверитьСчетаРасчетовАвансов(СтрВзаиморасчетов.СчетУчетаРасчетов, СтрВзаиморасчетов.СчетУчетаАвансов, ВидВзаиморасчетов, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	      ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	      ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность;
		  
	// АБС ВСТАВКА Фролов 11640 КОНЕЦ	  
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.абс_КорректировкаРегистровВзаиморасчетов Тогда
		
		абс_ПроверкаЗаполненияКоррректировкаРегистров(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;		
		
		абс_ДвиженияПоРегистрамКорректировкаРегистров(Отказ, РежимПроведения);
		
		Возврат;
	КонецЕсли;
	// АБС ВСТАВКА Фролов 11640 КОНЕЦ	  
		  
		  
	//АБС
	 НаборЗаписейУпр = Движения.абс_ВзаиморасчетыПоДокументам.Выгрузить();
	 //АБС
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	ИначеЕсли РежимВосстановленияПоследовательностейРасчетов Тогда
		УдалитьДвиженияДляВосстановленияПоследовательностейРасчетов(Отказ);
	КонецЕсли;
	//АБС
	Движения.абс_ВзаиморасчетыПоДокументам.Загрузить(НаборЗаписейУпр);
	//АБС
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	                            ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                            ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ Отказ И ОтражатьВБухгалтерскомУчете Тогда
		
		абс_ПроверитьСчетаВзаиморасчетов(ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность	, "Покупатели", Отказ);
		абс_ПроверитьСчетаВзаиморасчетов(ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность	, "Покупатели", Отказ);
		абс_ПроверитьСчетаВзаиморасчетов(ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность	, "Поставщики", Отказ);
		абс_ПроверитьСчетаВзаиморасчетов(ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность	, "Поставщики", Отказ);
		
		Если Отказ Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Счета учета расчетов с контрагентами не соответствует счетам учета авасов.", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//АБС Вставка 58739
	АБС_ПроверкаЗаполненностиДокументаПриКонвертацииВалюты(СтруктураШапкиДокумента,Отказ,Заголовок);
	//\\АБС
	
	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
							ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
							ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок);
		
		//АБС ВСТАВКА 58739
		АБС_ДвиженияДляКонвертацииВалюты(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ);
		//\\АБС Вставка							
		//АБС 1833
		АБС_ИнверсияПроводок();
		//АБС 1833
		
		//АБС ВСТАВКА №26973 НАЧАЛО «10 марта 2015 г.», Пополитов
		абс_ДвиженияПоЗабалансу(СтруктураШапкиДокумента,Отказ);
		//\\АБС ВСТАВКА №26973 КОНЕЦ
	
		// АБС Фролов для проведения по бюджетированию
		Движения.Хозрасчетный.Записать();
		Если  Не абс_РучнойВвод Тогда
			АБС_ПровестиПоУпрДебиторке(ЭтотОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли; 
	
	Если Не Отказ И абс_ВзаимозачетПоОЗК И ЗначениеЗаполнено(абс_СчетНаОплату) Тогда
		абс_СоздатьОбратнуюКорректировкуДолга();
	КонецЕсли;	
	
КонецПроцедуры	// ОбработкаПроведения()	

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

//АБС ВСТАВКА 58739
Процедура АБС_ПроверкаЗаполненностиДокументаПриКонвертацииВалюты(СтруктураШапкиДокумента,Отказ,Заголовок)
	
	Если не СтруктураШапкиДокумента.абс_КонвертацияВалюты Тогда
		возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_ПлатежноеПоручение) Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбрано Платежное поручение!",Отказ,Заголовок);		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.абс_СуммаПлатежаРуб = 0 Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена сумма платежа в рублях!",Отказ,Заголовок);		
	КонецЕсли;
	
	
	Если СтруктураШапкиДокумента.абс_СуммаПлатежаВал = 0 Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена сумма платежа в валюте!",Отказ,Заголовок);		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.абс_СуммаПлатежаВал = 0 Тогда
		Отказ = Истина;
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена сумма платежа в валюте!",Отказ,Заголовок);		
	КонецЕсли;
	
	// {{KM WARE Агапов Н.А. Заявка №34608 29.10.2015 начало
	//Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.абс_ПрочийДоходРасход) Тогда
	//	Отказ = Истина;
	//	ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена аналитика счета доходов (расходов)!",Отказ,Заголовок);		
	//КонецЕсли;	
    // }}KM WARE Агапов Н.А. Заявка №34608 29.10.2015 окончание
КонецПроцедуры	

Процедура АБС_ДвиженияДляКонвертацииВалюты(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ)
	
	Если не СтруктураШапкиДокумента.абс_КонвертацияВалюты 
		или СтруктураШапкиДокумента.абс_ПлатежноеПоручение = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	//БулевоПлатежноеПоручениеВходящее = ТипЗнч(СтруктураШапкиДокумента.абс_ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее");
	Запрос = Новый Запрос;
	//АБС Чалавиев 03_12_2013 000023145	
	БулевоПлатежноеПоручениеВходящее = Ложь;
	//Если БулевоПлатежноеПоручениеВходящее Тогда
	Если ТипЗнч(СтруктураШапкиДокумента.абс_ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		БулевоПлатежноеПоручениеВходящее = Истина;
	//АБС Чалавиев 03_12_2013 000023145	
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Док.СчетУчетаРасчетовСКонтрагентом,
		|	Док.СубконтоКт1,
		|	Док.СубконтоКт2,
		|	Док.СубконтоКт3,
		|	Док.СчетУчетаРасчетовСКонтрагентомНУ,
		|	Док.СубконтоНУКт1,
		|	Док.СубконтоНУКт2,
		|	Док.СубконтоНУКт3,
		|	Док.СуммаДокумента,
		|	Док.ВидОперации,
		|	Док.ВалютаДокумента,
		|	Док.ДатаОплаты
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка";
	//АБС Чалавиев 03_12_2013 000023145	
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.абс_ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		БулевоПлатежноеПоручениеВходящее = Истина;
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СчетУчетаРасчетовСКонтрагентом,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СубконтоКт1,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СубконтоКт2,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СубконтоКт3,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СчетУчетаРасчетовСКонтрагентомНУ,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СубконтоНУКт1,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СубконтоНУКт2,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СубконтоНУКт3,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.СуммаДокумента,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.ВидОперации,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.ВалютаДокумента,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.ДатаОплаты
		|ИЗ
		|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
		|ГДЕ
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка = &Ссылка";
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.абс_ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СчетУчетаРасчетовСКонтрагентом,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоДт1,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоДт2,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоДт3,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СчетУчетаРасчетовСКонтрагентомНУ,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоНУДт1,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоНУДт2,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоНУДт3,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.СуммаДокумента,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.ВидОперации,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.ВалютаДокумента,
		|	ПлатежныйОрдерСписаниеДенежныхСредств.ДатаОплаты
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
		|ГДЕ
		|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка = &Ссылка";
		
	//АБС Чалавиев 03_12_2013 000023145	
	Иначе
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Док.СчетУчетаРасчетовСКонтрагентом,
		|	Док.СубконтоДт1,
		|	Док.СубконтоДт2,
		|	Док.СубконтоДт3,
		|	Док.СчетУчетаРасчетовСКонтрагентомНУ,
		|	Док.СубконтоНУДт1,
		|	Док.СубконтоНУДт2,
		|	Док.СубконтоНУДт3,
		|	Док.СуммаДокумента,
		|	Док.ВидОперации,
		|	Док.ВалютаДокумента,
		|	Док.ДатаОплаты
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка";		
		
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.абс_ПлатежноеПоручение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		возврат;
	КонецЕсли;
	
// +++ввв 26.12.2016 г.
//	Если БулевоПлатежноеПоручениеВходящее Тогда			
//		Для каждого Проводка Из Движения.Хозрасчетный Цикл
//			ПроводкаДляИнверсии = Неопределено; 				
//			Если Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)<>Неопределено Тогда
//				ПроводкаДляИнверсии = Проводка;				
//			КонецЕсли;  				
//			Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)<>Неопределено Тогда
//				ПроводкаДляИнверсии = Проводка; 					
//			КонецЕсли;
//			Если ПроводкаДляИнверсии<>Неопределено Тогда
//				мСчетДт = ПроводкаДляИнверсии.СчетДт;
//				мСчетКт = ПроводкаДляИнверсии.СчетКт;
//				Если мСчетДт.Валютный Тогда
//					ВалютаДт = ПроводкаДляИнверсии.ВалютаДт;
//					ВалютнаяСуммаДт = ПроводкаДляинверсии.ВалютнаяСуммаДт;
//				Иначе	
//					ВалютаДт = Неопределено;
//					ВалютнаяСуммаДт = 0;
//				КонецЕсли;
//				Если мСчетКт.Валютный Тогда
//					ВалютаКт = проводкаДляИнверсии.ВалютаКт;
//// +++ввв 26.12.2016 г.
//					//ВалютнаяСуммаКт = ПроводкаДляИнверсии.ВалютаКт;
//					ВалютнаяСуммаКт = ПроводкаДляИнверсии.ВалютнаяСуммаКт;
//// ---ввв 26.12.2016 г.
//				Иначе	
//					ВалютаКт = Неопределено;
//					ВалютнаяСуммаКт = 0;					
//				КонецЕсли;
//				
//				мКонтрагент = Неопределено;
//				мДоговорКонтрагента = Неопределено;
//				
//				Для каждого ВидСубконто Из мСчетДт.ВидыСубконто Цикл 					
//					Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
//						мДоговорКонтрагента = ПроводкаДляИнверсии.СубконтоДт.Договоры;
//					ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
//						мКонтрагент = ПроводкаДляИнверсии.СубконтоДт.Контрагенты;
//					КонецЕсли;
//				КонецЦикла;
//				
//				Для каждого ВидСубконто Из мСчетКт.ВидыСубконто Цикл 					
//					Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
//						мДоговорКонтрагента = ПроводкаДляИнверсии.СубконтоКт.Договоры;
//					ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
//						мКонтрагент = ПроводкаДляИнверсии.СубконтоКт.Контрагенты;
//					КонецЕсли;
//				КонецЦикла;
//				ПроводкаДляИнверсии.СчетДт = мСчетКт;
//				ПроводкаДляИнверсии.СубконтоДт.Очистить(); 			                                				
//				ПроводкаДляИнверсии.СчетКт = мСчетДт;
//				ПроводкаДляИнверсии.СубконтоКт.Очистить();
//				ПроводкаДляИнверсии.Сумма = ПроводкаДляИнверсии.Сумма;
//				
//				Для каждого ВидСубконто Из мСчетДт.ВидыСубконто Цикл 					
//					Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
//						ПроводкаДляИнверсии.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, мДоговорКонтрагента);
//					ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
//						ПроводкаДляИнверсии.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, мКонтрагент);
//					КонецЕсли;
//				КонецЦикла;
//				
//				Для каждого ВидСубконто Из мСчетКт.ВидыСубконто Цикл  					
//					Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
//						ПроводкаДляИнверсии.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, мДоговорКонтрагента);
//					ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
//						ПроводкаДляИнверсии.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, мКонтрагент);
//					КонецЕсли;
//				КонецЦикла;
//				
//				//Валютные параметры
//				Если мСчетДт.Валютный Тогда
//					ПроводкаДляИнверсии.ВалютаКт = ВалютаДт;
//					ПроводкаДляИнверсии.ВалютнаяСуммаКт = ВалютнаяСуммаДт; 
//				Иначе	
//					ПроводкаДляИнверсии.ВалютаКт = Неопределено;
//					ПроводкаДляИнверсии.ВалютнаяСуммаКт = 0;	
//				КонецЕсли;
//				Если мСчетКт.Валютный Тогда
//					ПроводкаДляИнверсии.ВалютаДт = ВалютаКт;
//					ПроводкаДляИнверсии.ВалютнаяСуммаДт = ВалютнаяСуммаКт;
//				Иначе	
//					ПроводкаДляИнверсии.ВалютаДт = Неопределено;
//					ПроводкаДляИнверсии.ВалютнаяСуммаДт = 0;						
//				КонецЕсли;
//				//Валютные параметры
//			КонецЕсли;	
//		КонецЦикла;		
//	КонецЕсли;	
// ---ввв 26.12.2016 г.

	//Проводка № 1 - списание счета 76.01.20
	Проводка = Движения.Хозрасчетный.Добавить();
	Проводка.Активность = Истина;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Период = СтруктураШапкиДокумента.дата;
	Проводка.Содержание = "Списание счета 76 на вспомогательный счет";
	
	Если БулевоПлатежноеПоручениеВходящее Тогда
		Проводка.СчетКт = СтруктураШапкиДокумента.абс_ВспомогательныйСчет;
		Проводка.СчетДт = Выборка.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоКт,"Контрагенты",Выборка.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоКт,"Договоры",Выборка.СубконтоКт2); 	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"Контрагенты",Выборка.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"Договоры",Выборка.СубконтоКт2);	
	Иначе	
		Проводка.СчетДт = СтруктураШапкиДокумента.абс_ВспомогательныйСчет;
		Проводка.СчетКт = Выборка.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоДт,"Контрагенты",Выборка.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоДт,"Договоры",Выборка.СубконтоДт2); 	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Контрагенты",Выборка.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Договоры",Выборка.СубконтоДт2);
	КонецЕсли;
	
	Если Проводка.СчетКт.Валютный Тогда
		Проводка.ВалютаКт = Выборка.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.абс_СуммаПлатежаВал;		
	КонецЕсли;
	Если Проводка.СчетДт.Валютный Тогда
		Проводка.ВалютаДт = Выборка.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.абс_СуммаПлатежаВал;		
	КонецЕсли;	
	
	Проводка.Сумма = СтруктураШапкиДокумента.абс_СуммаПлатежаРуб;//СтруктураШапкиДокумента.МодульВалютногоУчета.ПересчитатьВСуммуРегл(Выборка.СуммаДокумента,Константы.ВалютаРегламентированногоУчета.Получить,Выборка.ВалютаДокумента,Выборка.ДатаОплаты);	
	КурсоваяРазница = ТаблицаПоСуммамДолга.Итог("СуммаПлатежа")-Проводка.Сумма;
	
	//Проводка № 4 Дт 76.99 Кт 91
	
	Проводка = Движения.Хозрасчетный.Добавить();
	Проводка.Активность = Истина;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Период = СтруктураШапкиДокумента.дата;
	Проводка.Содержание = "Прибыль (убыток) от продажи валюты";
	
	Если БулевоПлатежноеПоручениеВходящее Тогда
		Если КурсоваяРазница<0 Тогда
			//доход
			Проводка.СчетДт = СтруктураШапкиДокумента.абс_ВспомогательныйСчет;
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;  		
			БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоДт,"Контрагенты",Выборка.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоДт,"Договоры",Выборка.СубконтоКт2); 		
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
			Проводка.Сумма = -КурсоваяРазница;
		Иначе
			//расход
			Проводка.СчетКт = СтруктураШапкиДокумента.абс_ВспомогательныйСчет;
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;		
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Контрагенты",Выборка.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Договоры",Выборка.СубконтоКт2);		
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
			Проводка.Сумма = КурсоваяРазница;
		КонецЕсли;   	
	Иначе           
		Если КурсоваяРазница>0 Тогда
			//доход
			Проводка.СчетДт = СтруктураШапкиДокумента.абс_ВспомогательныйСчет;
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;  		
			БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоДт,"Контрагенты",Выборка.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(СтруктураШапкиДокумента.абс_ВспомогательныйСчет,проводка.СубконтоДт,"Договоры",Выборка.СубконтоДт2); 		
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
			Проводка.Сумма = КурсоваяРазница;
		Иначе
			//расход
			Проводка.СчетКт = СтруктураШапкиДокумента.абс_ВспомогательныйСчет;
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;		
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Контрагенты",Выборка.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Договоры",Выборка.СубконтоДт2);		
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
			Проводка.Сумма = -КурсоваяРазница;
		КонецЕсли;
	КонецЕсли;
	
	//Налоговый учет
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Проводка = Движения.Налоговый.Добавить();
		Проводка.Активность = Истина;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Период = СтруктураШапкиДокумента.дата;
		Проводка.Содержание = "Прибыль (убыток) от продажи валюты";
		Если БулевоПлатежноеПоручениеВходящее Тогда
			Если КурсоваяРазница<0 Тогда
				//доход
				Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
				Проводка.Сумма = -КурсоваяРазница;
			Иначе
				//расход
				Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
				Проводка.Сумма = КурсоваяРазница;
			КонецЕсли;	
		Иначе
			Если КурсоваяРазница>0 Тогда
				//доход
				Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
				Проводка.Сумма = КурсоваяРазница;
			Иначе
				//расход
				Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.абс_ПрочийДоходРасход);
				Проводка.Сумма = -КурсоваяРазница;
			КонецЕсли;
		КонецЕсли;
		 		
	КонецЕсли;
	
КонецПроцедуры

Процедура абс_ЗаполнитьПоПлатежномуПоручению(Основание) Экспорт
	//АБС Чалавиев 03_12_2013 000023145
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	//АБС Чалавиев 03_12_2013 000023145
	
	абс_КонвертацияВалюты = Истина;
	ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
	
	// {{KM WARE Агапов Н.А. Заявка №34608 30.10.2015 начало
	//Организация = Основание.Организация;
	// }}KM WARE Агапов Н.А. Заявка №34608 30.10.2015 окончание
	
	//КонтрагентДебитор = Основание.СубконтоДт1;
	абс_ПлатежноеПоручение = Основание;
	абс_СуммаПлатежаВал = абс_ПлатежноеПоручение.СуммаДокумента;
	абс_СуммаПлатежаРуб=МодульВалютногоУчета.ПересчитатьВСуммуРегл(абс_СуммаПлатежаВал,Константы.ВалютаРегламентированногоУчета.Получить(),абс_ПлатежноеПоручение.ВалютаДокумента,абс_ПлатежноеПоручение.ДатаОплаты);
	
	// {{KM WARE Агапов Н.А. Заявка №34608 29.10.2015 начало
	//абс_ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.99");
	абс_ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	// }}KM WARE Агапов Н.А. Заявка №34608 29.10.2015 окончание
	
	СчетКт  = абс_ВспомогательныйСчет;
	Если ТипЗнч(абс_ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		//АБС Чалавиев 03_12_2013 000023145
		или ТипЗнч(абс_ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда 
		//АБС Чалавиев 03_12_2013 000023145
		СубконтоКт1 = абс_ПлатежноеПоручение.СубконтоКт1;
		СубконтоКт2 = абс_ПлатежноеПоручение.СубконтоКт2;
		СубконтоКт3 = абс_ПлатежноеПоручение.СубконтоКт3;	
	Иначе	
		СубконтоКт1 = абс_ПлатежноеПоручение.СубконтоДт1;
		СубконтоКт2 = абс_ПлатежноеПоручение.СубконтоДт2;
		СубконтоКт3 = абс_ПлатежноеПоручение.СубконтоДт3;
	КонецЕсли;
	
КонецПроцедуры

Процедура АБС_ИнверсияПроводок()
               	
	//НаборЗаписейБУ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	//НаборЗаписейБУ.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписейБУ.Прочитать();
	
	Если ИспользоватьВспомогательныйСчет Тогда
		
		СтрокаИнверсии = СуммыДолга.Найти(Истина,"абс_Инверсия");
		Если СтрокаИнверсии<>Неопределено Тогда
			Для Каждого Проводка Из Движения.Хозрасчетный Цикл 				
				
				ПроводкаДляИнверсии = Неопределено; 				
				Если Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)<>Неопределено Тогда
					Если СтрокаИнверсии.ДоговорКонтрагента = Проводка.СубконтоДт.Договоры 
						Тогда
						ПроводкаДляИнверсии = Проводка;
					КонецЕсли;					
				КонецЕсли;  				
				Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)<>Неопределено Тогда
					Если СтрокаИнверсии.ДоговорКонтрагента = Проводка.СубконтоКт.Договоры  
						Тогда
						ПроводкаДляИнверсии = Проводка;
					КонецЕсли;  					
				КонецЕсли;
				Если ПроводкаДляИнверсии<>Неопределено Тогда
					мСчетДт = ПроводкаДляИнверсии.СчетДт;
					мСчетКт = ПроводкаДляИнверсии.СчетКт;
					Если мСчетДт.Валютный Тогда
						ВалютаДт = ПроводкаДляИнверсии.ВалютаДт;
						ВалютнаяСуммаДт = ПроводкаДляинверсии.ВалютнаяСуммаДт;
					Иначе	
						ВалютаДт = Неопределено;
						ВалютнаяСуммаДт = 0;
					КонецЕсли;
					Если мСчетКт.Валютный Тогда
						ВалютаКт = проводкаДляИнверсии.ВалютаКт;
						ВалютнаяСуммаКт = ПроводкаДляИнверсии.ВалютаКт;
					Иначе	
						ВалютаКт = Неопределено;
						ВалютнаяСуммаКт = 0;					
					КонецЕсли;
					
					мКонтрагент = Неопределено;
					мДоговорКонтрагента = Неопределено;
					
					Для каждого ВидСубконто Из мСчетДт.ВидыСубконто Цикл 					
						Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
							//Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, ДоговорКонтрагента);
							мДоговорКонтрагента = ПроводкаДляИнверсии.СубконтоДт.Договоры;
						ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							мКонтрагент = ПроводкаДляИнверсии.СубконтоДт.Контрагенты;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого ВидСубконто Из мСчетКт.ВидыСубконто Цикл 					
						Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
							мДоговорКонтрагента = ПроводкаДляИнверсии.СубконтоКт.Договоры;
						ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							мКонтрагент = ПроводкаДляИнверсии.СубконтоКт.Контрагенты;
						КонецЕсли;
					КонецЦикла;
					ПроводкаДляИнверсии.СчетДт = мСчетКт;
					ПроводкаДляИнверсии.СубконтоДт.Очистить(); 			                                				
					ПроводкаДляИнверсии.СчетКт = мСчетДт;
					//Для Каждого ВидСуб Из ПроводкаДляИнверсии.СубконтоКт Цикл
					//ПроводкаДляИнверсии.СубконтоКт[ВидСуб.Ключ] = Неопределено;
					//КонецЦикла;
					ПроводкаДляИнверсии.СубконтоКт.Очистить();
					ПроводкаДляИнверсии.Сумма = - ПроводкаДляИнверсии.Сумма;
					Для каждого ВидСубконто Из мСчетДт.ВидыСубконто Цикл 					
						Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
							ПроводкаДляИнверсии.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, мДоговорКонтрагента);
						ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							ПроводкаДляИнверсии.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, мКонтрагент);
						КонецЕсли;
					КонецЦикла;
					
					Для каждого ВидСубконто Из мСчетКт.ВидыСубконто Цикл  					
						Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
							ПроводкаДляИнверсии.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, мДоговорКонтрагента);
						ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							ПроводкаДляИнверсии.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, мКонтрагент);
						КонецЕсли;
					КонецЦикла;
					
					//Валютные параметры
					Если мСчетДт.Валютный Тогда
						ПроводкаДляИнверсии.ВалютаКт = ВалютаДт;
						ПроводкаДляИнверсии.ВалютнаяСуммаКт =ВалютнаяСуммаДт; 
					Иначе	
						ПроводкаДляИнверсии.ВалютаКт = Неопределено;
						ПроводкаДляИнверсии.ВалютнаяСуммаКт = 0;	
					КонецЕсли;
					Если мСчетКт.Валютный Тогда
						ПроводкаДляИнверсии.ВалютаДт = ВалютаКт;
						ПроводкаДляИнверсии.ВалютнаяСуммаДт =ВалютнаяСуммаКт;
					Иначе	
						ПроводкаДляИнверсии.ВалютаДт = Неопределено;
						ПроводкаДляИнверсии.ВалютнаяСуммаДт = 0;						
					КонецЕсли;
					//Валютные параметры
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	  	
КонецПроцедуры

Процедура АБС_ПровестиПоУпрДебиторке(Ссылка)  Экспорт
	
	//НаборЗаписей = РегистрыНакопления.абс_ВзаиморасчетыПоДокументам.СоздатьНаборЗаписей();
	 НаборЗаписей =Движения.абс_ВзаиморасчетыПоДокументам.Выгрузить();

	//НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	//НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	//	
	//НаборЗаписейБух = РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СоздатьНаборЗаписей();
	//НаборЗаписейБух.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписейБух.Прочитать();
	 НаборЗаписейБух =  Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Выгрузить();
	//Проводки 
	СуммаЗадолженности = 0;
	СуммаВалЗадолженности = 0;
	СуммаАванса = 0;
	СуммаВалАванса = 0;
	СуммаЗачетаАванса = 0;
	СуммаВалЗачетаАванса = 0;
	
	//Проводки
	
	//СуммаДокумента = Документ.СуммаДокумента;
	ТекСтрокаАванса = Неопределено;
	ТекСтрокаЗадолженности = Неопределено;
	Для Каждого ЗаписьБУ Из НаборЗаписейБух Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Активность = ЗаписьБУ.Активность;
		Если ЗаписьБУ.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
			Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
		Иначе
			Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		Запись.Контрагент = ЗаписьБУ.Контрагент;
		Запись.ДоговорКонтрагента = ЗаписьБУ.ДоговорКонтрагента;
		Запись.Документ = ЗаписьБУ.Документ;
		Запись.Период = ЗаписьБУ.Период;
		Запись.Регистратор = Ссылка;
		Если ЗаписьБУ.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
			
			Запись.СуммаВзаиморасчетов = ЗаписьБУ.СуммаВзаиморасчетов;
			Если ЗначениеЗаполнено( ЗаписьБУ.СуммаРег) Тогда 
				Запись.СуммаРегл = ЗаписьБУ.СуммаРег;
			Иначе
				Запись.СуммаРегл = ЗаписьБУ.СуммаВзаиморасчетов;
			КонецЕсли;
			
		Иначе
			Запись.СуммаВзаиморасчетов = ЗаписьБУ.СуммаВзаиморасчетов;
			Запись.СуммаРегл = ЗаписьБУ.СуммаРег;
		КонецЕсли;
		
		
		
		
	КонецЦикла;
	 
	//НаборЗаписей.Записать(Истина);
	Движения.абс_ВзаиморасчетыПоДокументам.Загрузить(НаборЗаписей);		
Конецпроцедуры

Процедура абс_СоздатьОбратнуюКорректировкуДолга()  
	
	ПоставкиОЗК = абс_БизнесПроцессыПривелегированный.ПолучитьПоставкиОЗКПоЗЗ(абс_СчетНаОплату.ЗакупочныйЗаказ, абс_СчетНаОплату); 
	
	Если ПоставкиОЗК.Количество() > 0 Тогда
		ДоговорФилиала = ПоставкиОЗК[0].ДоговорКонтрагента;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если абс_БизнесПроцессыПривелегированный.ПроверитьКорректировкиДолгаОЗК(абс_СчетНаОплату, Ссылка) Тогда
		
		КД = Документы.КорректировкаДолга.СоздатьДокумент();
		
		КД.ВидОперации=Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
		КД.Организация = ?(ПоставкиОЗК.Количество() > 0, ПоставкиОЗК[0].Организация, СубконтоДт1);
		КД.КонтрагентДебитор           = КонтрагентДебитор;
		КД.ОтражатьВУправленческомУчете = Истина;
		КД.ОтражатьВБухгалтерскомУчете  = Истина;
		КД.ОтражатьВНалоговомУчете      = Истина;
		КД.абс_ВзаимозачетПоОЗК         = Истина;
		КД.абс_КорректировкаОснование   = Ссылка;
		КД.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("79.02");
		КД.СчетКтНУ = ПланыСчетов.Налоговый.НайтиПоКоду("79.02");
		КД.СубконтоКт1 = Организация;
		КД.СубконтоКтНУ1 = Организация;
		КД.ВалютаДокумента = ВалютаДокумента;
		
		Для Каждого ТекСтр Из СуммыДолга Цикл
			СтрокаКД = КД.СуммыДолга.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКД, ТекСтр);
			СтрокаКД.ВидЗадолженности        = Перечисления.ВидыЗадолженности.Кредиторская;
			СтрокаКД.ДоговорКонтрагента      = ДоговорФилиала;			
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, КД.КонтрагентКредитор, СтрокаКД.ДоговорКонтрагента);
			СтрокаКД.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			СтрокаКД.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;			
		КонецЦикла;
	
		КД.ПолучитьФорму("ФормаДокумента").Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

//АБС ВСТАВКА №26973 НАЧАЛО «10 марта 2015 г.», Пополитов
Процедура абс_ДвиженияПоЗабалансу(СтруктураШапкиДокумента,Отказ)
	
	Если Отказ или не абс_ДелатьДвиженияПоЗабалансу Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТЧ.ВидЗадолженности,
	               |	ТЧ.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ТЧ.ДоговорКонтрагента,
	               |	СУММА(ТЧ.СуммаРегл) КАК СуммаРегл
	               |ИЗ
	               |	Документ.КорректировкаДолга.СуммыДолга КАК ТЧ
	               |ГДЕ
	               |	ТЧ.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧ.ДоговорКонтрагента,
	               |	ТЧ.ДоговорКонтрагента.Владелец,
	               |	ТЧ.ВидЗадолженности";
	Строка = Запрос.Выполнить().Выбрать();
	
	Пока Строка.Следующий() Цикл	
		
		Если Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			жВидЗадолженности = "Дт";
		Иначе
			жВидЗадолженности = "Кт";
		КонецЕсли;		
		
		ЗабалансСчет = ЭтотОбъект["ЗабалансСчет"+жВидЗадолженности];
		Если не ЗначениеЗаполнено(ЗабалансСчет) Тогда
			Продолжить;
		КонецЕсли;	
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Активность  = Истина;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
		Проводка.Содержание  = "Забаланс";	
		Проводка.Сумма       = Строка.СуммаРегл;    	  			
		Проводка["Счет"+жВидЗадолженности] = ЗабалансСчет;
		Проводка["Субконто"+жВидЗадолженности].Очистить();		
		Для каждого ВидыСубконто Из Проводка["Счет"+жВидЗадолженности].ВидыСубконто Цикл 
			Проводка["Субконто"+жВидЗадолженности].Вставить(ВидыСубконто.ВидСубконто, абс_ЗаполнитьСубконтоЗабаланса(жВидЗадолженности,Строка,ВидыСубконто.ВидСубконто.ТипЗначения.ПривестиЗначение())); 				
		КонецЦикла;	
		
	КонецЦикла;	

КонецПроцедуры

Функция абс_ЗаполнитьСубконтоЗабаланса(жВидЗадолженности,жСтрока,жПустаяСсылка)
	
	НовоеЗначение = Неопределено;
	ТипПустойСсылки = ТипЗнч(жПустаяСсылка);
	
	Для Н = 1 По 3 Цикл 
		ЗабалансСубконто = ЭтотОбъект["ЗабалансСубконто"+жВидЗадолженности+Н];	
		Если ТипПустойСсылки = ТипЗнч(ЗабалансСубконто) и ЗначениеЗаполнено(ЗабалансСубконто) Тогда
			НовоеЗначение = ЗабалансСубконто; 	
		КонецЕсли;
	КонецЦикла;		
	
	Если ТипПустойСсылки = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		НовоеЗначение = жСтрока.ДоговорКонтрагента;	
	КонецЕсли;	
	Если ТипПустойСсылки = Тип("СправочникСсылка.Контрагенты") Тогда
		НовоеЗначение = жСтрока.Контрагент;	
	КонецЕсли;
	Если ТипПустойСсылки = Тип("СправочникСсылка.ас_ПериодыОтражения") и не ЗначениеЗаполнено(НовоеЗначение) Тогда
		НовоеЗначение = абс_СерверныеФункции.ПолучитьПериодНДСПоДате(Дата);	
	КонецЕсли;	
	
	Возврат НовоеЗначение;	
		
КонецФункции	
//\\АБС ВСТАВКА №26973 КОНЕЦ

//+ Машута А. 09.10.2018 http://sd.ttk.ru/sd/operator/#uuid:task$1413990
Процедура УстановитьТипКонтрагентаПриЗаполнении() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		абс_ТипКонтрагента = КонтрагентДебитор.абс_ТипыКонтрагентов;	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		абс_ТипКонтрагента = КонтрагентКредитор.абс_ТипыКонтрагентов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	УстановитьТипКонтрагентаПриЗаполнении();	
КонецПроцедуры
//- Машута А. 09.10.2018

РежимВосстановленияПоследовательностейРасчетов = Ложь;
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

