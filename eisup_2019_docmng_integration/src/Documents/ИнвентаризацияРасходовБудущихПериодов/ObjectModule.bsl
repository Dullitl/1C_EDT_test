Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Валюта курс и кратность для пересчета регламентированных сумм
Перем мВалютаУпрУчета Экспорт;
Перем мКурсУпрУчета Экспорт;
Перем мКратностьУпрУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
//	
//	// Функция формирует табличный документ с печатной формой накладной,
//	// разработанной методистами
//	//
//	// Возвращаемое значение:
//	//  Табличный документ - печатная форма накладной
//	//
//	Функция ПечатьДокумента()
//		
//		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
//		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
//			ВыводитьКоды    = Истина;
//			Колонка         = "Артикул";
//			ТекстКодАртикул = "Артикул";
//		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
//			ВыводитьКоды    = Истина;
//			Колонка         = "Код";
//			ТекстКодАртикул = "Код";
//		Иначе
//			ВыводитьКоды    = Ложь;
//			Колонка         = "";
//			ТекстКодАртикул = "Код";
//		КонецЕсли;
//		
//		Если ВыводитьКоды Тогда
//			ОбластьШапки  = "ШапкаСКодом";
//			ОбластьСтроки = "СтрокаСКодом";
//		Иначе
//			ОбластьШапки  = "ШапкаТаблицы";
//			ОбластьСтроки = "Строка";
//		Конецесли;
//		
//		Запрос = Новый Запрос;
//		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
//			ВалютаПечати = мВалютаРегламентированногоУчета;
//		Иначе
//			ВалютаПечати = мВалютаУпрУчета;
//		КонецЕсли;
//		
//		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
//		Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	Номер,
//		|	Дата,
//		|	Организация,
//		|	Склад.Представление КАК ПредставлениеСклада,
//		|	Организация,
//		|	Склад,
//		|	Товары.(
//		|		НомерСтроки,
//		|		Номенклатура,
//		|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
//		|		Номенклатура.НаименованиеПолное КАК Товар,
//		|		Количество                      КАК Количество,
//		|		КоличествоУчет                  КАК КоличествоПоУчету,
//		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
//		|			ИНАЧЕ Цена
//		|		КОНЕЦ КАК Цена,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
//		|			ИНАЧЕ Сумма
//		|		КОНЕЦ КАК Сумма,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
//		|			ИНАЧЕ СуммаУчет
//		|		КОНЕЦ КАК СуммаПоУчету,
//		|		ХарактеристикаНоменклатуры      КАК Характеристика,
//		|		СерияНоменклатуры               КАК Серия
//		|	)
//		|ИЗ
//		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
//		|
//		|ГДЕ
//		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
//		|УПОРЯДОЧИТЬ ПО
//		|	Товары.НомерСтроки";
//		
//		Шапка = Запрос.Выполнить().Выбрать();
//		Шапка.Следующий();
//		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
//		
//		ТабДокумент = Новый ТабличныйДокумент;
//		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";
//		
//		Макет = ПолучитьМакет("ИнвентаризацияТоваровНаСкладе");
//		
//		// Выводим шапку накладной
//		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
//		ОбластьМакета.Параметры.ТекстЗаголовка = ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Инвентаризация товаров на складе");
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		// Выводим данные об организации и складе
//		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
//		ОбластьМакета.Параметры.Заполнить(Шапка);
//		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
//		ОбластьМакета.Параметры.ВалютаНаименование = ВалютаПечати.Наименование;
//		ОбластьМакета.Параметры.Валюта             = ВалютаПечати;
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		// Выводим шапку таблицы
//		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
//		Если ВыводитьКоды Тогда
//			ОбластьМакета.Параметры.Колонка = Колонка;
//		КонецЕсли;
//		
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		ОбластьМакета    = Макет.ПолучитьОбласть(ОбластьСтроки);
//		ИтогСуммы        = 0;
//		ИтогСуммыПоУчету = 0;
//		
//		Пока ВыборкаСтрокТовары.Следующий() Цикл
//			
//			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
//				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
//				Продолжить;
//			КонецЕсли;
//			
//			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
//			ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
//			
//			Если ВыводитьКоды Тогда
//				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
//			КонецЕсли;
//			
//			ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
//			ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
//			
//			ТабДокумент.Вывести(ОбластьМакета);
//			
//		КонецЦикла;
//		
//		// Вывести Итого
//		ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
//		ОбластьМакета.Параметры.Всего        = ОбщегоНазначения.ФорматСумм(ИтогСуммы);
//		ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначения.ФорматСумм(ИтогСуммыПоУчету);
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		// Выводим подписи к документу
//		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		Возврат ТабДокумент;
//		
//	КонецФункции // ПечатьДокумента()
//	
//	// ТекстОписания
//	//
//	// Параметры: 
//	//  Нет.
//	//
//	// Возвращаемое значение:
//	//  Нет.
//	//
//	Функция ПечатьИНВ3(БезФактическихДанных = Ложь)
//		
//		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
//		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
//			ТоварКод = "Артикул";
//		Иначе
//			ТоварКод = "Код";
//		КонецЕсли;
//		
//		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
//			ВалютаПересчета = мВалютаРегламентированногоУчета;
//		Иначе
//			ВалютаПересчета = мВалютаУпрУчета;
//		КонецЕсли;
//		
//		ВалютаПечати = мВалютаРегламентированногоУчета;
//		Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
//		Запрос       = Новый Запрос;
//		
//		Запрос.УстановитьПараметр("ТекущийДокумент",      ЭтотОбъект.Ссылка);
//		Запрос.УстановитьПараметр("Курс",                 Параметры.Курс);
//		Запрос.УстановитьПараметр("Кратность",            Параметры.Кратность);
//		Запрос.УстановитьПараметр("ВидСкладаНТТ",         Перечисления.ВидыСкладов.НТТ);
//		Запрос.УстановитьПараметр("БезФактическихДанных", БезФактическихДанных);
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	Номер КАК НомерДокумента,
//		|	Дата  КАК ДатаДокумента,
//		|	Дата  КАК ДатаСнятияОстатков,
//		|	Организация,
//		|	Склад.Представление КАК ПредставлениеСклада,
//		|	Товары.(
//		|		НомерСтроки                     КАК Номер,
//		|		Номенклатура,
//		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
//		|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
//		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
//		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
//		|		ВЫБОР
//		|			КОГДА &БезФактическихДанных ТОГДА 0
//		|			ИНАЧЕ Количество
//		|		КОНЕЦ КАК ФактКоличество,
//		|		КоличествоУчет КАК БухКоличество,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
//		|			ИНАЧЕ Цена * &Курс / &Кратность
//		|		КОНЕЦ КАК Цена,
//		|		ВЫБОР
//		|			КОГДА &БезФактическихДанных ТОГДА 0
//		|			ИНАЧЕ ВЫБОР КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице ИНАЧЕ Сумма * &Курс / &Кратность КОНЕЦ
//		|		КОНЕЦ КАК ФактСумма,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
//		|			ИНАЧЕ СуммаУчет * &Курс / &Кратность
//		|		КОНЕЦ КАК БухСумма,
//		|		ХарактеристикаНоменклатуры КАК Характеристика,
//		|		СерияНоменклатуры КАК Серия,
//		|		СчетУчетаБУ  Как СубСчет
//		|	)
//		|ИЗ
//		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
//		|
//		|ГДЕ
//		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
//		|УПОРЯДОЧИТЬ ПО
//		|	Товары.НомерСтроки";
//		
//		Шапка = Запрос.Выполнить().Выбрать();
//		Шапка.Следующий();
//		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
//		
//		ТабДокумент = Новый ТабличныйДокумент;
//		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ3";
//		Макет       = ПолучитьОбщийМакет("ИНВ3");
//		
//		// Выводим шапку накладной
//		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
//		ОбластьМакета.Параметры.Заполнить(Шапка);
//		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
//		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
//		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
//		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
//		ОбластьМакета.Параметры.ДатаСнятияОстатков       = Шапка.ДатаСнятияОстатков;
//		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
//		ТабДокумент.Вывести(ОбластьМакета);
//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		
//		СтрокНаСтранице = 19;
//		СтрокШапки      = 5;
//		СтрокПодвала    = 5;
//		НомерСтраницы   = 2;
//		Ном             = 0;
//		
//		ИтогФактКоличество = 0;
//		ИтогФактСумма      = 0;
//		ИтогБухКоличество  = 0;
//		ИтогБухСумма       = 0;
//		
//		КолвоСтрокПоСтранице = 0;
//		КолвоПостранице      = 0;
//		СуммаЛиста           = 0;
//		ИтогоКолво           = 0;
//		ИтогоСумма           = 0;
//		
//		// Выводим заголовок таблицы
//		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
//		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
//		ТабДокумент.Вывести(ЗаголовокТаблицы);
//		
//		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
//		
//		Если КоличествоСтрок = 1 Тогда
//			ПереноситьПоследнююСтроку = 0;
//		Иначе
//			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
//			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
//			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
//		КонецЕсли;
//		
//		// Выводим многострочную часть докмента
//		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
//		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
//		Пока ВыборкаСтрокТовары.Следующий() Цикл
//			
//			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
//				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
//				Продолжить;
//			КонецЕсли;
//			
//			Ном = Ном + 1;
//			//Начинаем новую страницу, если предыдущая строка была последней на странице
//			//или пора переносить последнюю строку на последнюю страницу с подвалом.
//			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
//			
//			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
//				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
//				
//				ОбластьИтоговПоСтранице                               = Макет.ПолучитьОбласть("ПодвалСтраницы");
//				ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
//				ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
//				ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
//				ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
//				
//				ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
//				Если НЕ БезФактическихДанных Тогда
//					ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
//					ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
//				КонецЕсли;
//				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
//				
//				НомерСтраницы = НомерСтраницы + 1;
//				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//				
//				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
//				ТабДокумент.Вывести(ЗаголовокТаблицы);
//				
//				ИтогФактКоличество = 0;
//				ИтогФактСумма      = 0;
//				ИтогБухКоличество  = 0;
//				ИтогБухСумма       = 0;
//				
//				КолвоСтрокПоСтранице = 0;
//				КолвоПостранице      = 0;
//				СуммаЛиста           = 0;
//				
//			КонецЕсли;
//			
//			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
//			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
//			ОбластьМакета.Параметры.Номер             = Ном;
//			
//			ТабДокумент.Вывести(ОбластьМакета);
//			
//			ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
//			ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
//			ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
//			ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
//			ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
//			ИтогоСумма         = ИтогоСумма         + ВыборкаСтрокТовары.ФактСумма;
//			
//			КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
//			КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
//			СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;
//			
//		КонецЦикла;
//		
//		// Выводим итоги по последней странице
//		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
//		ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
//		ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
//		Если НЕ БезФактическихДанных Тогда
//			ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
//			ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
//		КонецЕсли;
//		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
//		
//		// Выводим подвал документа
//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
//		ОбластьМакета.Параметры.Заполнить(Шапка);
//		ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
//		ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
//		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
//		Если НЕ БезФактическихДанных Тогда
//			ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(ИтогоКолво);
//			ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
//		КонецЕсли;
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		// Зададим параметры макета
//		ТабДокумент.ПолеСверху = 0;
//		ТабДокумент.ПолеСлева  = 0;
//		ТабДокумент.ПолеСнизу  = 0;
//		ТабДокумент.ПолеСправа = 0;
//		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
//		
//		Возврат ТабДокумент;
//		
//	КонецФункции // ПечатьИНВ3()
//	
//	//АБС
//	Функция ПечатьИНВ3_СРасшифровкойКомиссии(БезФактическихДанных = Ложь)
//		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
//		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
//			ТоварКод = "Артикул";
//		Иначе
//			ТоварКод = "Код";
//		КонецЕсли;
//		
//		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
//			ВалютаПересчета = мВалютаРегламентированногоУчета;
//		Иначе
//			ВалютаПересчета = мВалютаУпрУчета;
//		КонецЕсли;
//		
//		ВалютаПечати = мВалютаРегламентированногоУчета;
//		Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
//		Запрос       = Новый Запрос;
//		
//		Запрос.УстановитьПараметр("ТекущийДокумент",      ЭтотОбъект.Ссылка);
//		Запрос.УстановитьПараметр("Курс",                 Параметры.Курс);
//		Запрос.УстановитьПараметр("Кратность",            Параметры.Кратность);
//		Запрос.УстановитьПараметр("ВидСкладаНТТ",         Перечисления.ВидыСкладов.НТТ);
//		Запрос.УстановитьПараметр("БезФактическихДанных", БезФактическихДанных);
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	Номер КАК НомерДокумента,
//		|	Дата  КАК ДатаДокумента,
//		|	Дата  КАК ДатаСнятияОстатков,
//		|	Организация,
//		|	Склад.Представление КАК ПредставлениеСклада,
//		|	Товары.(
//		|		НомерСтроки                     КАК Номер,
//		|		Номенклатура,
//		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
//		|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
//		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
//		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
//		|		ВЫБОР
//		|			КОГДА &БезФактическихДанных ТОГДА 0
//		|			ИНАЧЕ Количество
//		|		КОНЕЦ КАК ФактКоличество,
//		|		КоличествоУчет КАК БухКоличество,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
//		|			ИНАЧЕ Цена * &Курс / &Кратность
//		|		КОНЕЦ КАК Цена,
//		|		ВЫБОР
//		|			КОГДА &БезФактическихДанных ТОГДА 0
//		|			ИНАЧЕ ВЫБОР КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице ИНАЧЕ Сумма * &Курс / &Кратность КОНЕЦ
//		|		КОНЕЦ КАК ФактСумма,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
//		|			ИНАЧЕ СуммаУчет * &Курс / &Кратность
//		|		КОНЕЦ КАК БухСумма,
//		|		ХарактеристикаНоменклатуры КАК Характеристика,
//		|		СерияНоменклатуры КАК Серия,
//		|		СчетУчетаБУ  Как СубСчет
//		|	)
//		|ИЗ
//		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
//		|
//		|ГДЕ
//		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
//		|УПОРЯДОЧИТЬ ПО
//		|	Товары.НомерСтроки";
//		
//		Шапка = Запрос.Выполнить().Выбрать();
//		Шапка.Следующий();
//		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
//		
//		ТабДокумент = Новый ТабличныйДокумент;
//		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ3";
//		Макет       = ПолучитьОбщийМакет("ИНВ3");
//		
//		// Выводим шапку накладной
//		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
//		ОбластьМакета.Параметры.Заполнить(Шапка);
//		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
//		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
//		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
//		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
//		ОбластьМакета.Параметры.ДатаСнятияОстатков       = Шапка.ДатаСнятияОстатков;
//		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
//		ТабДокумент.Вывести(ОбластьМакета);
//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		
//		СтрокНаСтранице = 19;
//		СтрокШапки      = 5;
//		СтрокПодвала    = 5;
//		НомерСтраницы   = 2;
//		Ном             = 0;
//		
//		ИтогФактКоличество = 0;
//		ИтогФактСумма      = 0;
//		ИтогБухКоличество  = 0;
//		ИтогБухСумма       = 0;
//		
//		КолвоСтрокПоСтранице = 0;
//		КолвоПостранице      = 0;
//		СуммаЛиста           = 0;
//		ИтогоКолво           = 0;
//		ИтогоСумма           = 0;
//		
//		// Выводим заголовок таблицы
//		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
//		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
//		ТабДокумент.Вывести(ЗаголовокТаблицы);
//		
//		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
//		
//		Если КоличествоСтрок = 1 Тогда
//			ПереноситьПоследнююСтроку = 0;
//		Иначе
//			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
//			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
//			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
//		КонецЕсли;
//		
//		// Выводим многострочную часть докмента
//		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
//		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
//		Пока ВыборкаСтрокТовары.Следующий() Цикл
//			
//			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
//				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
//				Продолжить;
//			КонецЕсли;
//			
//			Ном = Ном + 1;
//			//Начинаем новую страницу, если предыдущая строка была последней на странице
//			//или пора переносить последнюю строку на последнюю страницу с подвалом.
//			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
//			
//			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
//				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
//				
//				ОбластьИтоговПоСтранице                               = Макет.ПолучитьОбласть("ПодвалСтраницы");
//				ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
//				ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
//				ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
//				ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
//				
//				ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
//				Если НЕ БезФактическихДанных Тогда
//					ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
//					ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
//				КонецЕсли;
//				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
//				
//				НомерСтраницы = НомерСтраницы + 1;
//				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//				
//				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
//				ТабДокумент.Вывести(ЗаголовокТаблицы);
//				
//				ИтогФактКоличество = 0;
//				ИтогФактСумма      = 0;
//				ИтогБухКоличество  = 0;
//				ИтогБухСумма       = 0;
//				
//				КолвоСтрокПоСтранице = 0;
//				КолвоПостранице      = 0;
//				СуммаЛиста           = 0;
//				
//			КонецЕсли;
//			
//			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
//			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
//			ОбластьМакета.Параметры.Номер             = Ном;
//			
//			ТабДокумент.Вывести(ОбластьМакета);
//			
//			ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
//			ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
//			ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
//			ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
//			ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
//			ИтогоСумма         = ИтогоСумма         + ВыборкаСтрокТовары.ФактСумма;
//			
//			КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
//			КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
//			СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;
//			
//		КонецЦикла;
//		
//		// Выводим итоги по последней странице
//		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
//		ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
//		ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
//		Если НЕ БезФактическихДанных Тогда
//			ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
//			ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
//		КонецЕсли;
//		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
//		
//		// Выводим подвал документа
//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
//		ОбластьМакета.Параметры.Заполнить(Шапка);
//		ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
//		ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
//		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
//		Если НЕ БезФактическихДанных Тогда
//			ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(ИтогоКолво);
//			ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
//		КонецЕсли;
//		
//		//Комиссия
//		ПредседательКомиссииСтр = КомиссияТМЦ.ЧленыКомиссии.Найти(Истина,"Председатель");
//		Если ПредседательКомиссииСтр <> Неопределено Тогда
//			ПредседательКомиссии = ОбщегоНазначения.ДанныеФизЛица(Организация, ПредседательКомиссииСтр.ЧленКомиссии, Дата);
//			ОбластьМакета.Параметры.ДолжностьПредседателя = ПредседательКомиссии.Должность;
//			ОбластьМакета.Параметры.ФИОпредседателя = ПредседательКомиссии.Фамилия+" "+Лев(ПредседательКомиссии.Имя,1)+"."+Лев(ПредседательКомиссии.Отчество,1)+".";
//		КонецЕсли;
//		Сч = 2;
//		Для каждого ЧленКомиссииСтр  из КомиссияТМЦ.ЧленыКомиссии Цикл
//			Если Сч>4 Тогда
//				прервать;
//			КонецЕсли;
//			Если ЧленКомиссииСтр.Председатель Тогда
//				продолжить;
//			КонецЕсли;
//			ЧленКомиссии = ОбщегоНазначения.ДанныеФизЛица(Организация, ЧленКомиссииСтр.ЧленКомиссии, Дата);
//			ОбластьМакета.Параметры["ДолжностьЧленаКомиссии"+Сч] = ЧленКомиссии.Должность;
//			ОбластьМакета.Параметры["ФИОЧленаКомиссии"+Сч] = ЧленКомиссии.Фамилия+" "+Лев(ЧленКомиссии.Имя,1)+"."+Лев(ЧленКомиссии.Отчество,1)+".";
//			Сч = Сч+1;
//		КонецЦикла;	
//		//\\
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		// Зададим параметры макета
//		ТабДокумент.ПолеСверху = 0;
//		ТабДокумент.ПолеСлева  = 0;
//		ТабДокумент.ПолеСнизу  = 0;
//		ТабДокумент.ПолеСправа = 0;
//		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
//		
//		Возврат ТабДокумент;
//		
//	КонецФункции // Напечатать 
//	
//	//\\АБС
//	
//	// ТекстОписания
//	//
//	// Параметры: 
//	//  Нет.
//	//
//	// Возвращаемое значение:
//	//  Нет.
//	//
//	Функция ПечатьИНВ19()
//		
//		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
//		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
//			ТоварКод = "Артикул";
//		Иначе
//			ТоварКод = "Код";
//		КонецЕсли;
//		
//		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
//			ВалютаПересчета = мВалютаРегламентированногоУчета;
//		Иначе
//			ВалютаПересчета = мВалютаУпрУчета;
//		КонецЕсли;
//		
//		ВалютаПечати = мВалютаРегламентированногоУчета;
//		Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
//		Запрос       = Новый Запрос;
//		
//		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
//		Запрос.УстановитьПараметр("Курс",            Параметры.Курс);
//		Запрос.УстановитьПараметр("Кратность",       Параметры.Кратность);
//		Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	Номер  КАК НомерДокумента,
//		|	Дата   КАК ДатаДокумента,
//		|	Дата   КАК ДатаНачалаИнвентаризации,
//		|	Организация КАК Руководители,
//		|	Организация,
//		|	Склад.Представление КАК ПредставлениеСклада,
//		|	Товары.(
//		|		НомерСтроки КАК Номер,
//		|		Номенклатура,
//		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
//		|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
//		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
//		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
//		|		Количество                     КАК ФактКоличество,
//		|		КоличествоУчет                 КАК БухКоличество,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
//		|			ИНАЧЕ Цена * &Курс / &Кратность
//		|		КОНЕЦ КАК Цена,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
//		|			ИНАЧЕ Сумма * &Курс / &Кратность
//		|		КОНЕЦ КАК ФактСумма,
//		|		ВЫБОР
//		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
//		|			ИНАЧЕ СуммаУчет * &Курс / &Кратность
//		|		КОНЕЦ КАК БухСумма,
//		|		ХарактеристикаНоменклатуры     КАК Характеристика,
//		|		СерияНоменклатуры КАК Серия
//		|	)
//		|ИЗ
//		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
//		|
//		|ГДЕ
//		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
//		|УПОРЯДОЧИТЬ ПО
//		|	Товары.НомерСтроки";
//		
//		Шапка = Запрос.Выполнить().Выбрать();
//		Шапка.Следующий();
//		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
//		
//		ТабДокумент = Новый ТабличныйДокумент;
//		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ19";
//		Макет       = ПолучитьОбщийМакет("ИНВ19");
//		
//		// Выводим шапку накладной
//		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
//		ОбластьМакета.Параметры.Заполнить(Шапка);
//		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
//		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
//		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
//		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
//		ОбластьМакета.Параметры.ДатаНачалаИнвентаризации = Шапка.ДатаНачалаИнвентаризации;
//		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
//		
//		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
//		Руководитель = Руководители.Руководитель;
//		Бухгалтер    = Руководители.ГлавныйБухгалтер;
//		
//		ТабДокумент.Вывести(ОбластьМакета);
//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		
//		СтрокНаСтранице = 19;
//		СтрокШапки      = 5;
//		СтрокПодвала    = 5;
//		НомерСтраницы   = 2;
//		Ном             = 0;
//		
//		ИтогоРезультатИзлишекКолво   = 0;
//		ИтогоРезультатИзлишекСумма   = 0;
//		ИтогоРезультатНедостачаКолво = 0;
//		ИтогоРезультатНедостачаСумма = 0;
//		
//		// Выводим заголовок таблицы
//		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
//		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
//		ТабДокумент.Вывести(ЗаголовокТаблицы);
//		
//		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
//		
//		Если КоличествоСтрок = 1 Тогда
//			ПереноситьПоследнююСтроку = 0;
//		Иначе
//			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
//			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
//			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
//		КонецЕсли;
//		
//		// Выводим многострочную часть докмента
//		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
//		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы1");
//		Пока ВыборкаСтрокТовары.Следующий() Цикл
//			
//			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
//				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
//				Продолжить;
//			КонецЕсли;
//			
//			//Начинаем новую страницу, если предыдущая строка была последней на странице
//			//или пора переносить последнюю строку на последнюю страницу с подвалом.
//			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
//			
//			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
//				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
//				
//				ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы1");
//				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
//				
//				НомерСтраницы = НомерСтраницы + 1;
//				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//				
//				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
//				ТабДокумент.Вывести(ЗаголовокТаблицы);
//				
//			КонецЕсли;
//			
//			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
//			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
//			
//			Разница     = 0;
//			РазницаСумм = 0;
//			
//			Разница     = ВыборкаСтрокТовары.ФактКоличество - ВыборкаСтрокТовары.БухКоличество;
//			РазницаСумм = ВыборкаСтрокТовары.ФактСумма      - ВыборкаСтрокТовары.БухСумма;
//			Если Разница = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			Если Разница < 0 И РазницаСумм < 0 Тогда
//				ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
//				ОбластьМакета.Параметры.РезультатНедостачаСумма = - РазницаСумм;
//				ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
//				ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;
//				
//				ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
//				ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + (- РазницаСумм);
//			ИначеЕсли Разница < 0 И РазницаСумм >= 0 Тогда
//				ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
//				ОбластьМакета.Параметры.РезультатНедостачаСумма = РазницаСумм;
//				ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
//				ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;
//				
//				ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
//				ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + РазницаСумм;
//			Иначе
//				ОбластьМакета.Параметры.РезультатНедостачаКолво = 0;
//				ОбластьМакета.Параметры.РезультатНедостачаСумма = 0;
//				ОбластьМакета.Параметры.РезультатИзлишекКолво   = Разница;
//				ОбластьМакета.Параметры.РезультатИзлишекСумма   = РазницаСумм;
//				
//				ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + Разница;
//				ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + РазницаСумм;
//			КонецЕсли;
//			
//			ТабДокумент.Вывести(ОбластьМакета);
//			
//			Ном = Ном + 1;
//			
//		КонецЦикла;
//		
//		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы1");
//		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво;
//		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма;
//		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
//		
//		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
//		ОбластьМакета.Параметры.ФИОБухгалтера =  Бухгалтер;
//		ОбластьМакета.Параметры.Заполнить(Шапка);
//		ТабДокумент.Вывести(ОбластьМакета);
//		
//		// Зададим параметры макета
//		ТабДокумент.ПолеСверху = 0;
//		ТабДокумент.ПолеСлева  = 0;
//		ТабДокумент.ПолеСнизу  = 0;
//		ТабДокумент.ПолеСправа = 0;
//		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
//		
//		Возврат ТабДокумент;
//		
//	КонецФункции // ПечатьИНВ19()


//	// Процедура осуществляет печать документа. Можно направить печать на 
//	// экран или принтер, а также распечатать необходимое количество копий.
//	//
//	//  Название макета печати передается в качестве параметра,
//	// по переданному названию находим имя макета в соответствии.
//	//
//	// Параметры:
//	//  НазваниеМакета - строка, название макета.
//	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ можно распечатать только после его записи");
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ИНВ11" Тогда
			
			ТабДокумент = ПечатьИнв11();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли; 
			
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
		
	КонецПроцедуры // Печать
	
//	
//	// Возвращает доступные варианты печати документа
//	//
//	// Возвращаемое значение:
//	//  Структура, каждая строка которой соответствует одному из вариантов печати
//	//  
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		Возврат Новый Структура("ИНВ11","Инвентаризация расходов будущих периодов");
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
// 
// Процедура формирования унифицированной печатной формы документа ИНВ-17
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта инвентаризации.
//
//
Функция ПечатьИнв11() Экспорт
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	//	Данные для шапки акта
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.Дата КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.Дата КАК ДатаОкончанияИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияРасходовБудущихПериодов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка";
	
	ВыборкаШапка= Запрос.Выполнить().Выбрать();
	ВыборкаШапка.Следующий();

	//	Данные строк таблиц
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =       
	"ВЫБРАТЬ
	|	ИнвентаризацияРасходовБудущихПериодовРБП.Ссылка,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.НомерСтроки КАК Номер,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.КодРБП,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.ВидРБП,
	//|	ИнвентаризацияРасходовБудущихПериодовРБП.ДатаНачалаСписания,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.ВидРБП.абс_ДатаВозникновенияРасходов КАК ДатаНачалаСписания,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.СрокПогашения КАК СрокПогашения,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.ОбщаяСумма КАК ОбщаяСумма,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.СписаноДоИнвентаризации КАК СписаноДоИнвентаризации,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.ОстатокРасходов КАК ОстатокРасходов,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.КоличествоМесяцевСписания КАК КоличествоМесяцевСписания,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.СписаноЗаМесяц КАК СписаноЗаМесяц,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.СписаноСНачалаГода КАК СписаноСНачалаГода,
	|	ИнвентаризацияРасходовБудущихПериодовРБП.РасчетныйОстаток КАК РасчетныйОстаток
	|ИЗ
	|	Документ.ИнвентаризацияРасходовБудущихПериодов.РБП КАК ИнвентаризацияРасходовБудущихПериодовРБП
	|ГДЕ
	|	ИнвентаризацияРасходовБудущихПериодовРБП.Ссылка = &Ссылка
	|ИТОГИ
	|	СУММА(Номер),
	|	СУММА(СрокПогашения),
	|	СУММА(ОбщаяСумма),
	|	СУММА(СписаноДоИнвентаризации),
	|	СУММА(ОстатокРасходов),
	|	СУММА(КоличествоМесяцевСписания),
	|	СУММА(СписаноЗаМесяц),
	|	СУММА(СписаноСНачалаГода),
	|	СУММА(РасчетныйОстаток)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВыборкаИтог.Следующий();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ11";
	
	Макет       = ПолучитьМакет("ИНВ11");
	
	// Формирование шапки
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ВыборкаШапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.Дата);
	Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	Шапка.Параметры.ДеньДокумента  = День(ВыборкаШапка.Дата);
	Шапка.Параметры.МесяцДокумента = Сред(Формат(ВыборкаШапка.Дата, "ДЛФ=ДД"), 
													 Найти(Формат(ВыборкаШапка.Дата, "ДЛФ=ДД"), " "));
													 
	ТабДокумент.Вывести(Шапка);

	// Формирование строк дебиторской задолженности
	ПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ВыборкаПоРБП = ВыборкаИтог.Выбрать();
	Пока ВыборкаПоРБП.Следующий() Цикл
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаПоРБП);
			ТабДокумент.Вывести(СтрокаТаблицы);
	КонецЦикла;
		
	
	ПодвалТаблицы.Параметры.Заполнить(ВыборкаИтог);
	ТабДокумент.Вывести(ПодвалТаблицы);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
		
	// Подвал печатной формы
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Подвал);
	
	Подпись = Макет.ПолучитьОбласть("Подпись");
	//Комиссия
		ПредседательКомиссииСтр = КомиссияТМЦ.ЧленыКомиссии.Найти(Истина,"Председатель");
		Если ПредседательКомиссииСтр <> Неопределено Тогда
			ПредседательКомиссии = ОбщегоНазначения.ДанныеФизЛица(Организация, ПредседательКомиссииСтр.ЧленКомиссии, Дата);
			Подпись.Параметры.ДолжностьПредседателя = ПредседательКомиссии.Должность;
			Подпись.Параметры.ФИОпредседателя = ПредседательКомиссии.Фамилия+" "+Лев(ПредседательКомиссии.Имя,1)+"."+Лев(ПредседательКомиссии.Отчество,1)+".";
		КонецЕсли;
		Сч = 2;
		Для каждого ЧленКомиссииСтр  из КомиссияТМЦ.ЧленыКомиссии Цикл
			Если Сч>4 Тогда
				прервать;
			КонецЕсли;
			Если ЧленКомиссииСтр.Председатель Тогда
				продолжить;
			КонецЕсли;
			ЧленКомиссии = ОбщегоНазначения.ДанныеФизЛица(Организация, ЧленКомиссииСтр.ЧленКомиссии, Дата);
			Подпись.Параметры["ДолжностьЧленаКомиссии"+Сч] = ЧленКомиссии.Должность;
			Подпись.Параметры["ФИОЧленаКомиссии"+Сч] = ЧленКомиссии.Фамилия+" "+Лев(ЧленКомиссии.Имя,1)+"."+Лев(ЧленКомиссии.Отчество,1)+".";
			Сч = Сч+1;
		КонецЦикла;	
		//\\
		
		
	ТабДокумент.Вывести(Подпись);
	
	
	 
	ПодвалПроверил = Макет.ПолучитьОбласть("ПодвалПроверил");
	ТабДокумент.Вывести(ПодвалПроверил);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИнв17()


Процедура ЗаполнитьПоОстаткам(ПостроительОтчета, ТолькоУчетные = Ложь) Экспорт
		
        Граница = Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая);
		Запрос = ПостроительОтчета.ПолучитьЗапрос();
		Запрос.УстановитьПараметр("Период", Граница.Значение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
						
			СтрокаТабличнойЧасти = РБП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Выборка);
			СтрокаТабличнойЧасти.ОстатокРасходов = СтрокаТабличнойЧасти.РасчетныйОстаток;
		КонецЦикла;
		
КонецПроцедуры
	//\\АБС
	
//АБС ВСТАВКА 00079
 Процедура ЗаполнитьПоОстаткамПоСчету(ПостроительОтчета, ТолькоУчетные = Ложь, Счет) Экспорт
	 
	    ДатаКон = ?(ЗначениеЗаполнено(абс_ДатаОкончания), абс_ДатаОкончания, Дата); //АБС Коломиец 16361
        Граница = Новый Граница(КонецМесяца(ДатаКон),ВидГраницы.Включая);
		Запрос = ПостроительОтчета.ПолучитьЗапрос();
		Запрос.УстановитьПараметр("Период", Граница.Значение);
		Запрос.УстановитьПараметр("РасходыБудущихПериодов",Счет);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
						
			СтрокаТабличнойЧасти = РБП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Выборка);
			СтрокаТабличнойЧасти.ОстатокРасходов = СтрокаТабличнойЧасти.РасчетныйОстаток;
		КонецЦикла;
		
КонецПроцедуры
//АБС ВСТАВКА КОНЕЦ 00079


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУпрУчета                 = Константы.ВалютаУправленческогоУчета.Получить();

