Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыРеглУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыБухУчета  Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета  Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета  Экспорт; // (Регл)
Перем мСтрокаРеквизитыУСН       Экспорт; // (Регл)

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мФлагФормированияДвиженийПоВыработке;
Перем мТабличноеПоле Экспорт;

// АБС ВСТАВКА
Перем СтрокаСтароеОС Экспорт;
//\\ АБС ВСТАВКА

//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы
Перем мРолиПользователя Экспорт;
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьОпись()
			
	ТабДок  = Новый ТабличныйДокумент;
	Макет   = ПолучитьМакет("ТабЧасть");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = Метаданные().Представление() + " № " + Номер + " от " + Формат( Дата, "ДФ=dd.MM.yyyy");
	ТабДок.Вывести( Область);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаБух");
		Область.Параметры.Организация              = Организация;
		Область.Параметры.ПодразделениеОрганизации = ПодразделениеОрганизации;
		ТабДок.Вывести( Область);
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаУпр");
		Область.Параметры.Подразделение = Подразделение;
		ТабДок.Вывести( Область);
	КонецЕсли;
	
	// Создадим структуру печатаемых реквизитов
	МетаТЧ     = Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	СтруктРекв = Новый Структура;
	СтруктРекв.Вставить("ОсновноеСредство", МетаТЧ.ОсновноеСредство);
	Для Каждого Колонка Из мТабличноеПоле.Колонки Цикл
		Если Не (Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "ИнвентарныйНомер")
			   И Колонка.Видимость Тогда
			СтруктРекв.Вставить( Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод заголовка таб части
	Область = Макет.ПолучитьОбласть( "ТабШапка|Начало");
	ТабДок.Вывести( Область);
	Область = Макет.ПолучитьОбласть( "ТабШапка|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
			Область.Параметры.КолЗаголовок = Колонка.Значение;
			ТабДок.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод данных
	Для Каждого СтрокаТЧ Из ОС Цикл
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Начало");
		Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
		Область.Параметры.ОС          = СтрокаТЧ.ОсновноеСредство;
		ТабДок.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
				Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], "БЛ=Нет; БИ=Да");
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], "ДЛФ=DD");
				Иначе
					Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
				КонецЕсли;
				ТабДок.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итогов
	Область = Макет.ПолучитьОбласть( "ТабИтог|Начало");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть( "ТабИтог|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Колонка.Ключ = "ОсновноеСредство" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") 
		   И (Найти(Колонка.Ключ,"Стоимость")> 0 
		   Или Найти(Колонка.Ключ,"Амортизация")> 0) Тогда
			Область.Параметры.КолИтог = Формат( ОС.Итог( Колонка.Ключ), "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=3,0");
		Иначе
			Область.Параметры.КолИтог = "";
		КонецЕсли;
		ТабДок.Присоединить(Область);
	КонецЦикла;
	
	Возврат ТабДок;
		
КонецФункции
	
// Процедура печати табличной части документа
//
//Процедура Печать(КнопкаТекст) Экспорт
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
		//T#7769333 — Необходимо завести статусы в документы	
		//ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Опись" Тогда
		Если мТабличноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТабДокумент = ПечатьОпись();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ("Данные табличной части документа " + ЭтотОбъект), Ссылка);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
	КонецЕсли;
	
	
		
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Опись","Опись новых ОС при разукрупнении");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// АБС ВСТАВКА

// Функция возвращает таблицу данных по старому основному средству (по срокам использования,
// самортизированной стоимости, и пр.)
// 
// Параметры:
//			  ВыводитьСообщение - Булево - если Истина, тогда выводятся сообщения при получении данных
//
Функция ПолучитьДанныеПоОС(ВыводитьСообщение = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтароеОсновноеСредство) Тогда
		возврат 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СостоянияОСУУ.Состояние = &СостояниеПринятиеКУчету
	|				ТОГДА СостоянияОСУУ.ДатаСостояния
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОНЕЦ) КАК ДатаПринятоКУчетуУУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СостоянияОСУУ.Состояние = &СостояниеВведеноВЭксплуатацию
	|				ТОГДА СостоянияОСУУ.ДатаСостояния
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)                                                   -
	|		КОНЕЦ) КАК ДатаВведеноВЭксплуатациюУУ
	|ПОМЕСТИТЬ ВведеноВЭксплуатациюПринятоКУчетуУУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостоянияОС.Состояние КАК Состояние,
	|		СостоянияОС.ДатаСостояния КАК ДатаСостояния
	|	ИЗ
	|		РегистрСведений.СостоянияОС КАК СостоянияОС
	|	ГДЕ
	|		(СостоянияОС.Состояние = &СостояниеПринятиеКУчету
	|				ИЛИ СостоянияОС.Состояние = &СостояниеВведеноВЭксплуатацию)
	|		И СостоянияОС.ОсновноеСредство = &ОС) КАК СостоянияОСУУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛУУ
	|ПОМЕСТИТЬ ТаблицаМОЛУУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(&Дата, ОсновноеСредство = &ОС) КАК МестонахождениеОССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОССрезПоследних.НачислятьАмортизацию,
	|	ЕСТЬNULL(СпособыОтраженияРасходовПоАмортизацииОССрезПоследних.СпособыОтраженияРасходовПоАмортизации, ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)) КАК СпособОтраженияРасходовУУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) КАК СпособНачисленияАмортизацииУУ
	|ПОМЕСТИТЬ НачислятьАмортизациюСпособУУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(
	|			&Дата,
	|			ОсновноеСредство = &ОС
	|				И Активность) КАК НачислениеАмортизацииОССрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(
	|				&Дата,
	|				ОсновноеСредство = &ОС
	|					И Активность) КАК СпособыОтраженияРасходовПоАмортизацииОССрезПоследних
	|		ПО НачислениеАмортизацииОССрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|				&Дата,
	|				ОсновноеСредство = &ОС
	|					И Активность) КАК ПервоначальныеСведенияОССрезПоследних
	|		ПО НачислениеАмортизацииОССрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВведеноВЭксплуатацию.ДатаСостояния КАК ДатаВвода,
	|	ПринятоКУчету.ДатаСостояния КАК ДатаПринятия,
	|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпецКоэф,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
	|	ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.АмортизацияОстаток, 0) КАК Амортизация,
	|	ЕСТЬNULL(СтоимостьОСНалоговыйУчетОстатки.АмортизацияОстаток, 0) КАК АмортизацияНУ_рег,
	|	АмортизацияПоНУ.СуммаОстатокКт КАК АмортизацияНУ,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
	|	ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.СтоимостьОстаток, 0) КАК ПервоначСтоимость,
	|	ЕСТЬNULL(СтоимостьПоНУ.СуммаОстатокДт, 0) КАК ПервоначСтоимостьНУ,
	|	ЕСТЬNULL(СтоимостьОСНалоговыйУчетОстатки.СтоимостьОстаток, 0) КАК ПервоначСтоимостьНУ_Рег,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокБУФакт,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокБУ,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОССрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляАмортУпр,
	|	ЕСТЬNULL(СтоимостьОСНалоговыйУчетОстатки.СтоимостьОстаток, 0) КАК ТекСтоимостьНУ,
	|	ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.СтоимостьОстаток, 0) - ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.АмортизацияОстаток, 0) КАК ТекСтоимость,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляАморт,
	|	ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0) КАК СтоимостьУпр,
	|	ЕСТЬNULL(СтоимостьОСОстатки.АмортизацияОстаток, 0) КАК АмортизацияУпр,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокНУФакт,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтражения,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СтоимостьДо2002, 0) КАК СтоимостьДо2002,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2002, 0) КАК АмортизацияДо2002,
	|	ВременныеПостоянныеРазницы.КВ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОССрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияУУ,
	|	ЕСТЬNULL(ВведеноВЭксплуатациюПринятоКУчетуУУ.ДатаПринятоКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПринятоКУчетуУУ,
	|	ЕСТЬNULL(ВведеноВЭксплуатациюПринятоКУчетуУУ.ДатаВведеноВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВведеноВЭксплуатациюУУ,
	|	ЕСТЬNULL(НачислятьАмортизациюСпособУУ.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюУУ,
	|	ЕСТЬNULL(НачислятьАмортизациюСпособУУ.СпособОтраженияРасходовУУ, ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)) КАК СпособОтраженияРасходовУУ,
	|	ЕСТЬNULL(НачислятьАмортизациюСпособУУ.СпособНачисленияАмортизацииУУ, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) КАК СпособНачисленияАмортизацииУУ,
	|	ЕСТЬNULL(ТаблицаМОЛУУ.МОЛУУ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК МОЛПоУУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) КАК СпособНачисленияАмортизацииБУ
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК ПринятоКУчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК СтоимостьОСБухгалтерскийУчетОстатки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСНалоговыйУчет.Остатки(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК СтоимостьОСНалоговыйУчетОстатки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&Дата, ОсновноеСредство = &ОС) КАК ПараметрыАмортизацииОССрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(&Дата, ОсновноеСредство = &ОС) КАК СтоимостьОСОстатки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК ВведеноВЭксплуатацию
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОС) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕСТЬNULL(КВ.СуммаОстатокДт, 0) КАК КВ
	|		ИЗ
	|			Константы КАК Константы
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(
	|						&Дата,
	|						Счет.Код = ""КВ"",
	|						,
	|						Субконто1 = &ОС
	|							И Организация = &Организация) КАК КВ
	|				ПО (ИСТИНА)) КАК ВременныеПостоянныеРазницы
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВведеноВЭксплуатациюПринятоКУчетуУУ КАК ВведеноВЭксплуатациюПринятоКУчетуУУ
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислятьАмортизациюСпособУУ КАК НачислятьАмортизациюСпособУУ
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМОЛУУ КАК ТаблицаМОЛУУ
	|		ПО (ИСТИНА),
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&Дата,
	|			Счет.Код = ""02.01"",
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &ОС
	|				И ВидУчета = &НУ) КАК АмортизацияПоНУ,
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&Дата,
	|			Счет.Код = ""01.01"",
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &ОС
	|				И ВидУчета = &НУ) КАК СтоимостьПоНУ
	|ГДЕ
	|	ПринятоКУчету.Организация = &Организация
	|	И ПринятоКУчету.ОсновноеСредство = &ОС
	|	И ПринятоКУчету.Состояние = &СостояниеПринятиеКУчету
	|	И ВведеноВЭксплуатацию.Организация = &Организация
	|	И ВведеноВЭксплуатацию.ОсновноеСредство = &ОС
	|	И ВведеноВЭксплуатацию.Состояние = &СостояниеВведеновЭксплуатацию";
	//АБС ИЗМЕНЕНИЕ 37963  25.02.2014 10:30:48  Шамов
	//Запрос.УстановитьПараметр("Дата",ЭтотОбъект.Дата-1);
	Запрос.УстановитьПараметр("Дата",Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая));
	//АБС ИЗМЕНЕНИЕ 37963 КОНЕЦ
	Запрос.УстановитьПараметр("ОС",ЭтотОбъект.СтароеОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("ВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("НУ",Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1,0,0,0));
	Запрос.УстановитьПараметр("СобытиеМодернизация", Перечисления.ВидыСобытийОС.Модернизация);
	Запрос.УстановитьПараметр("СостояниеВведеновЭксплуатацию", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	Запрос.УстановитьПараметр("СостояниеПринятиеКУчету", Перечисления.СостоянияОС.ПринятоКУчету);
	
	Рез =  Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		возврат 0;
	КонецЕсли;
	ТЗ = Рез.Выгрузить();
	ТЗ.Колонки.Добавить("БухТекМесяц");
	ТЗ.Колонки.Добавить("НалогТекМесяц");
	ТЗ.Колонки.Добавить("ВРТекМесяц");
	
	//АБС
	ТЗ.Колонки.Добавить("ТекущаяСтоимостьПР");
	ТЗ.Колонки.Добавить("НакопленнаяАмортизацияПР");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 КАК Субконто1,
	|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	|	0 КАК Сумма01ПР
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&КонДата,
	|			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01),
	|			,
	|			ВидУчета = &ВидУчетаПР
	|				И Организация = &Организация
	|				И Субконто1 = &СписокОС) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&КонДата,
	|			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	|			,
	|			ВидУчета = &ВидУчетаПР
	|				И Организация = &Организация
	|				И Субконто1 = &СписокОС) КАК НалоговыйОстатки
	|ИТОГИ
	|	СУММА(Сумма02ПР),
	|	СУММА(Сумма01ПР)
	|ПО
	|	Субконто1";
	//АБС ИЗМЕНЕНИЕ 37963  25.02.2014 10:30:48  Шамов
	//Запрос.УстановитьПараметр("КонДата",ЭтотОбъект.Дата-1);
	Запрос.УстановитьПараметр("КонДата",Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая));
	//АБС ИЗМЕНЕНИЕ 37963 КОНЕЦ
	Запрос.УстановитьПараметр("Организация",ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("СписокОС",ЭтотОбъект.СтароеОсновноеСредство);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);	   
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОС_01);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", ПланыСчетов.Налоговый.ОсновныеСредства);
	ВыборкаПР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Если ВыборкаПР.Следующий() Тогда
		Сумма01Пр = ВыборкаПР.Сумма01Пр;
		Сумма02Пр = ВыборкаПР.Сумма02Пр;
	Иначе
		Сумма01Пр = 0 ;
		Сумма02Пр = 0 ;
	КонецЕсли;
				   
	//\\АБС
	
	СтрокаСтароеОС = ТЗ[0];
	АмортизацияБух = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(Дата, Организация, СтароеОсновноеСредство, ВыводитьСообщение);
	АмортизацияНал = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект,Дата, Организация, СтароеОсновноеСредство, ВыводитьСообщение);
	АмортизацияУпр = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииУпр(Дата, СтароеОсновноеСредство, ВыводитьСообщение);
	Если АмортизацияБух.Количество()=0 Тогда
		СтрокаСтароеОС.БухТекМесяц = 0;
	Иначе
		СтрокаСтароеОС.БухТекМесяц = АмортизацияБух[0].Бух;
	КонецЕсли;	
	Если АмортизацияНал.Количество()=0 Тогда
		СтрокаСтароеОС.НалогТекМесяц = 0;
	Иначе
		СтрокаСтароеОС.НалогТекМесяц = АмортизацияНал[0].Налог;
	КонецЕсли;
	ТЗ.Колонки.Добавить("УпрТекМесяц", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СрокИспользованияФактУУ", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СрокИспользованияФактБУ", Новый ОписаниеТипов("Число"));
	Если АмортизацияУпр.Количество() = 0 Тогда
		СтрокаСтароеОС.УпрТекМесяц = 0;
	Иначе
		СтрокаСтароеОС.УпрТекМесяц = АмортизацияУпр[0].Упр;
	КонецЕсли;
	// вычислим сроки для вычисления амортизации по УУ и БУ
	ОпределитьСрокиФактическогоИспользования(СтрокаСтароеОС);
	
	СтрокаСтароеОС.ВРТекМесяц = СтрокаСтароеОС.БухТекМесяц - СтрокаСтароеОС.НалогТекМесяц;
	//АБС
	СтрокаСтароеОС.ТекущаяСтоимостьПР = Сумма01Пр;
	СтрокаСтароеОС.НакопленнаяАмортизацияПР = Сумма02Пр;
	//\\
	Возврат СтрокаСтароеОС;
    
КонецФункции	

// В процедуре определяются сроки фактического использования для старого ОС по УУ и БУ
// и записываются в переданную строку
//
// Параметры:
//           СтрокаОС - строка таблицы значений
//
Процедура ОпределитьСрокиФактическогоИспользования(СтрокаОС)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СостояниеОС", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	Запрос.УстановитьПараметр("ОС", СтароеОсновноеСредство);
	
	// сначала по УУ		
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияОС.ДатаСостояния КАК ДатаУУ,
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостоянияОС КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.ОсновноеСредство = &ОС
	|	И СостоянияОС.Состояние = &СостояниеОС";
	
	ТЗСрок = Запрос.Выполнить().Выгрузить();
	
	ТЗСрок.Колонки.Добавить("ФактСрок", Новый ОписаниеТипов("Число"));
	ТЗСрок.ЗаполнитьЗначения(0, "ФактСрок");
	
	ФактСрокИспользованияУУ = 0;
	Если ТЗСрок.Количество() > 0 Тогда
		ФактСрокИспользованияУУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ТЗСрок[0].ДатаУУ, Дата);
	КонецЕсли;
		
	// теперь по БУ	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаБУ,
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние = &СостояниеОС";
	
	ТЗСрок = Запрос.Выполнить().Выгрузить();
	
	ТЗСрок.Колонки.Добавить("ФактСрок", Новый ОписаниеТипов("Число"));
	ТЗСрок.ЗаполнитьЗначения(0, "ФактСрок");
	
	ФактСрокИспользованияБУ = 0;
	Если ТЗСрок.Количество() > 0 Тогда
		ФактСрокИспользованияБУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ТЗСрок[0].ДатаБУ, Дата);
	КонецЕсли;
	
	// теперь запишем в СтрокуОС
	СтрокаОС.СрокИспользованияФактУУ = ФактСрокИспользованияУУ;
	СтрокаОС.СрокИспользованияФактБУ = ФактСрокИспользованияБУ;
	
КонецПроцедуры

// В процедуре производится заполнение строки табличной части "ОС" по переданной строке нового основного средства
// и коэффициенту распределения.
//
// Параметры:
//			  НовСтр - строка табличной части "ОС", которая будет заполнена;
//			  ТекСтрока - строка данных по старому основному средству, которое распределяется;
//			  Коэффициент - коэффициент, с которым суммы старого основного средства распределяются на новое.
//
Процедура ЗаполнитьСтрокуТЧ(НовСтр, ТекСтрока, Коэффициент) Экспорт
	
	НовСтр.ДатаВводаВЭксплуатацию = ТекСтрока.ДатаВведеноВЭксплуатациюУУ;
	НовСтр.ДатаВводаВЭксплуатациюРегл = Текстрока.Датаввода;
	НовСтр.ДатаПринятияКУчету = ?(Не ЗначениеЗаполнено(ТекСтрока.ДатаПринятоКУчетуУУ), ТекСтрока.ДатаВведеноВЭксплуатациюУУ, ТекСтрока.ДатаПринятоКУчетуУУ);
	НовСтр.ДатаПринятияКУчетуРегл = НовСтр.ДатаПринятияКУчету;
	НовСтр.ИнвентарныйНомерРегл = Новстр.ОсновноеСредство.Код;
	НовСтр.КоэффициентУскорения = ТекСтрока.СпецКоэф;
	НовСтр.КоэффициентУскоренияБУ = ТекСтрока.СпецКоэф;
	НовСтр.СпециальныйКоэффициентНУ = ТекСтрока.СпецКоэф;
	НовСтр.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
	НовСтр.МОЛ = ТекСтрока.МОЛПоУУ;
	НовСтр.МОЛРегл = ТекСтрока.МОЛ;
	НовСтр.НакопленнаяАмортизация = (ТекСтрока.АмортизацияУпр + ТекСтрока.УпрТекМесяц) * Коэффициент;
	НовСтр.НакопленнаяАмортизацияБУ = (ТекСтрока.Амортизация + ТекСтрока.БухТекМесяц) * Коэффициент;
	НовСтр.НакопленнаяАмортизацияНУ = (ТекСтрока.АмортизацияНУ + ТекСтрока.НалогТекМесяц) * Коэффициент;
	НовСтр.НачислятьАмортизацию = ТекСтрока.НачислятьАмортизациюУУ;
	НовСтр.НачислятьАмортизациюБУ = ТекСтрока.НачислятьАмортизацию;
	НовСтр.НачислятьАмортизациюНУ = ТекСтрока.НачислятьАмортизацию;
	НовСтр.ПервоначальнаяСтоимость = ТекСтрока.СтоимостьУпр * Коэффициент;
	НовСтр.ПервоначальнаяСтоимостьБУ = ТекСтрока.ПервоначСтоимость * Коэффициент;
	НовСтр.ПервоначальнаяСтоимостьНУ = ТекСтрока.ПервоначСтоимостьНУ * Коэффициент;
	НовСтр.СобытиеВводВЭксплуатацию = НайтиСобытиеВводВЭксплуатацию();
	НовСтр.СобытиеВводВЭксплуатациюРегл = НовСтр.СобытиеВводВЭксплуатацию;
	НовСтр.СобытиеПринятияКУчету = НайтиСобытиеПринятияКУчету();
	НовСтр.СобытиеПринятияКУчетуРегл = НовСтр.СобытиеПринятияКУчету;
	Новстр.СпособНачисленияАмортизации = ТекСтрока.СпособНачисленияАмортизацииУУ;
	Новстр.СпособНачисленияАмортизацииБУ = ТекСтрока.СпособНачисленияАмортизацииБУ;
	НовСтр.СпособПоступленияБУ = ТекСтрока.СпособПоступления;
	НовСтр.СписатьНаЗатратыПриВводе = Ложь;
	НовСтр.СписатьНаЗатратыПриВводеРегл = Ложь;
	НовСтр.СрокИспользованияДляВычисленияАмортизации = ТекСтрока.СрокПолезногоИспользованияУУ - ТекСтрока.СрокИспользованияФактУУ;
	НовСтр.СрокИспользованияДляВычисленияАмортизацииБУ = ТекСтрока.СрокБУ - ТекСтрока.СрокИспользованияФактБУ;
	НовСтр.СрокПолезногоИспользования = ТекСтрока.СрокПолезногоИспользованияУУ;
	НовСтр.СрокПолезногоИспользованияБУ = ТекСтрока.СрокБУ;
	НовСтр.СрокПолезногоИспользованияНУ = Текстрока.срокНУ;
	НовСтр.НачислятьПоБазовойСтоимостиНУ = Ложь;
	НовСтр.СчетАмортизацииБУ = ПланыСчетов.Хозрасчетный.АмортизацияОС_01;
	НовСтр.СчетАмортизацииНУ = Планысчетов.Налоговый.АмортизацияОС_01;
	НовСтр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
	НовСтр.СчетУчетаНУ = ПланыСчетов.Налоговый.ОСвОрганизации;
	НовСтр.ТекущаяСтоимость = НовСтр.ПервоначальнаяСтоимость;
	НовСтр.ТекущаяСтоимостьБУ = НовСтр.ПервоначальнаяСтоимостьБУ;
	НовСтр.ТекущаяСтоимостьНУ = Текстрока.ПервоначСтоимостьНУ_Рег * Коэффициент;
	НовСтр.ФактическийСрокИспользованияНУ  = ТекСтрока.СрокНУФакт;
	НовСтр.СпособОтраженияРасходовПоАмортизации = ТекСтрока.СпособОтраженияРасходовУУ;
	НовСтр.СпособОтраженияРасходовПоАмортизацииБУ = ТекСтрока.СпособОтражения;
	НовСтр.СпособОтраженияРасходовПоАмортизацииНУ = ТекСтрока.СпособОтражения;
	НовСтр.СтоимостьДо2002НУ = ТекСтрока.СтоимостьДо2002 * Коэффициент;
	НовСтр.АмортизацияДо2002НУ = ТекСтрока.АмортизацияДо2002 * Коэффициент;
	НовСтр.СтоимостьДляВычисленияАмортизации = НовСтр.ТекущаяСтоимость - НовСтр.НакопленнаяАмортизация;
	НовСтр.СтоимостьДляВычисленияАмортизацииБУ = Новстр.ТекущаяСтоимостьБУ - НовСтр.НакопленнаяАмортизацияБУ;
	//АБС
	НовСтр.ТекущаяСтоимостьПР = ТекСтрока.ТекущаяСтоимостьПР * Коэффициент;
	НовСтр.НакопленнаяАмортизацияПР = ТекСтрока.НакопленнаяАмортизацияПР * Коэффициент;
	//\\АБС
КонецПроцедуры		

// Функция возвращает элемент справочника "СобытияОС" со значением реквизита "ВидСобытияОС" = 
// Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
//
Функция НайтиСобытиеВводВЭксплуатацию()
	
	Спр = Справочники.СобытияОС.НайтиПоРеквизиту("ВидСобытияОС", Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	Если Спр.Пустая() Тогда
		НовСпр = Справочники.СобытияОС.СоздатьЭлемент();
		НовСпр.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию;
		НовСпр.Наименование = "Ввод в эксплуатацию";
		НовСпр.УстановитьНовыйКод();
		НовСпр.Записать();
		Сообщить("Записан новый элемент спр-ка СобытияОС - " + НовСпр.Ссылка);
		Возврат НовСпр.Ссылка;
	КонецЕсли;
	
	Возврат Спр;
	
КонецФункции	

// Функция возвращает элемент справочника "СобытияОС" со значением реквизита "ВидСобытияОС" = 
// Перечисления.ВидыСобытийОС.Модернизация
//
Функция НайтиСобытиеМодернизация()
	
	Спр = Справочники.СобытияОС.НайтиПоРеквизиту("ВидСобытияОС", Перечисления.ВидыСобытийОС.Модернизация);
	Если Спр.Пустая() Тогда
		НовСпр = Справочники.СобытияОС.СоздатьЭлемент();
		НовСпр.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация;
		НовСпр.Наименование = "Модернизация";
		НовСпр.УстановитьНовыйКод();
		НовСпр.Записать();
		Сообщить("Записан новый элемент спр-ка СобытияОС - " + НовСпр.Ссылка);
		Возврат НовСпр.Ссылка;
	КонецЕсли;	
	
	Возврат Спр;
	
КонецФункции	

// Функция возвращает элемент справочника "СобытияОС" со значением реквизита "ВидСобытияОС" = 
// Перечисления.ВидыСобытийОС.ПринятиеКУчету
//
Функция НайтиСобытиеПринятияКУчету()
	
	Спр = Справочники.СобытияОС.НайтиПоРеквизиту("ВидСобытияОС", Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	Если Спр.Пустая() Тогда
		НовСпр = Справочники.СобытияОС.СоздатьЭлемент();
		НовСпр.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		НовСпр.Наименование = "Принятие к учету";
		НовСпр.УстановитьНовыйКод();
		НовСпр.Записать();
		Сообщить("Записан новый элемент спр-ка СобытияОС - " + НовСпр.Ссылка);
		Возврат НовСпр.Ссылка;
	КонецЕсли;
	
	Возврат Спр;
	
КонецФункции	

//\\ АБС ВСТАВКА

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
		|ОС.ВыработкаКоличество,
		|ОС.ГрафикАмортизации,
		|ОС.ДатаВводаВЭксплуатацию,
		|ОС.ДатаПоследнейМодернизации,
		|ОС.ДатаПринятияКУчету,
		|ОС.КоэффициентАмортизации,
		|ОС.КоэффициентУскорения,
		|ОС.МОЛ,
		|ОС.НазваниеДокументаВводаВЭксплуатацию,
		|ОС.НазваниеДокументаМодернизации,
		|ОС.НазваниеДокументаПринятияКУчету,
		|ОС.НакопленнаяАмортизация,
		|ОС.НачислятьАмортизацию,
		|ОС.Номенклатура,
		|ОС.ХарактеристикаНоменклатуры,
		|ОС.НомерДокументаВводаВЭксплуатацию,
		|ОС.НомерДокументаМодернизации,
		|ОС.НомерДокументаПринятияКУчету,
		|ОС.ОбъемПродукцииРабот,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
		|ОС.ПараметрВыработки,
		|ОС.ПервоначальнаяСтоимость,
		|ОС.ТекущаяСтоимость,
		|ОС.РодительскоеОС,
		|ОС.СобытиеВводВЭксплуатацию,
		|ОС.СобытиеМодернизации,
		|ОС.СобытиеПринятияКУчету,
		|ОС.СписатьНаЗатратыПриВводе,
		|ОС.СпособНачисленияАмортизации,
		|ОС.СпособОтраженияРасходовПоАмортизации,
		|ОС.СрокИспользованияДляВычисленияАмортизации,
		|ОС.СрокПолезногоИспользования,
		|ОС.СтоимостьДляВычисленияАмортизации,
		|ОС.СуммаПоследнейМодернизации";
	// АБС ВСТАВКА
	мСтрокаРеквизитыУпрУчета = мСтрокаРеквизитыУпрУчета + ", абс_СобытиеСписанияСтарогоОСУУ, Надписьабс_СобытиеСписанияСтарогоОСУУ";
	//\\ АБС ВСТАВКА
		
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
//	мСтрокаРеквизитыРеглУчета = "Организация, НадписьОрганизация, ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
	мСтрокаРеквизитыРеглУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|ОС.ИнвентарныйНомерРегл,
		|ОС.ДатаВводаВЭксплуатациюРегл,
		|ОС.ДатаПринятияКУчетуРегл,
		|ОС.НазваниеДокументаВводаВЭксплуатациюРегл,
		|ОС.НазваниеДокументаПринятияКУчетуРегл,
		|ОС.НомерДокументаВводаВЭксплуатациюРегл,
		|ОС.НомерДокументаПринятияКУчетуРегл,
		|ОС.СобытиеВводВЭксплуатациюРегл,
		|ОС.СобытиеПринятияКУчетуРегл,
		|ОС.МОЛРегл,
		|";
	// АБС ВСТАВКА
	мСтрокаРеквизитыРеглУчета = мСтрокаРеквизитыРеглУчета + "абс_СобытиеСписанияСтарогоОСРегл, Надписьабс_СобытиеСписанияСтарогоОСРегл, ";
	//\\ АБС ВСТАВКА
	
	мСтрокаРеквизитыБухУчета = "ОС.ТекущаяСтоимостьБУ,
		|ОС.ВыработкаКоличествоБУ,
		|ОС.ГрафикАмортизацииБУ,
		|ОС.ДатаПоследнейМодернизацииРегл,
		|ОС.КоэффициентАмортизацииБУ,
		|ОС.КоэффициентУскоренияБУ,
		|ОС.НазваниеДокументаМодернизацииРегл,
		|ОС.НакопленнаяАмортизацияБУ,
		|ОС.НачислятьАмортизациюБУ,
		|ОС.НомерДокументаМодернизацииРегл,
		|ОС.ОбъемПродукцииРаботБУ,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|ОС.ПараметрВыработкиБУ,
		|ОС.ПервоначальнаяСтоимостьБУ,
		|ОС.СобытиеМодернизацииРегл,
		|ОС.СписатьНаЗатратыПриВводеРегл,
		|ОС.СпособНачисленияАмортизацииБУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииБУ,
		|ОС.СпособПоступленияБУ,
		|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
		|ОС.СрокПолезногоИспользованияБУ,
		|ОС.СтоимостьДляВычисленияАмортизацииБУ,
		|ОС.СуммаПоследнейМодернизацииБУ,
		|ОС.СчетАмортизацииБУ,
		|ОС.СчетУчетаБУ";
		//,
		//|ОС.ДатаПринятияКУчетуРегл,
		//|ОС.СобытиеПринятияКУчетуРегл";
	
	мСтрокаРеквизитыНалУчета = "ОС.ТекущаяСтоимостьНУ,
		|ОС.АмортизацияДо2002НУ,
		|ОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
		|ОС.МетодНачисленияАмортизацииНУ,
		|ОС.НакопленнаяАмортизацияНУ,
		|ОС.НачислятьАмортизациюНУ,
		|ОС.НачислятьПоБазовойСтоимостиНУ,
		|ОС.ПервоначальнаяСтоимостьНУ,
		|ОС.СпециальныйКоэффициентНУ,
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииНУ,
		|ОС.СрокПолезногоИспользованияНУ,
		|ОС.СтоимостьДо2002НУ,
		|ОС.СуммаНакопленнойАмортизацииНУ,
		|ОС.СуммаПоследнейМодернизацииНУ,
		|ОС.СчетАмортизацииНУ,
		|ОС.СчетУчетаНУ,
		|ОС.ФактическийСрокИспользованияНУ,
		|ОС.ТекущаяСтоимостьПР,
		|ОС.НакопленнаяАмортизацияПР";
	
	мСтрокаРеквизитыУСН = "
		|ОС.ДатаПриобретенияУСН,
		|ОС.ПервоначальнаяСтоимостьУСН,
		|ОС.СрокПолезногоИспользованияУСН,
		|ОС.СуммаНачисленнойАмортизацииУСН,
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовУСН";
		
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура вывода сообщения об ошибке
//
Процедура ОшибкаПроведенияПоСтроке( СтрокаОС, ТекстСообщения, ТипУчета, Отказ, Заголовок)
	
	Отказ = Истина;
	
	Если СокрЛП(ТипУчета) = "(УУ)" ИЛИ НЕ ЗначениеЗаполнено(СтрокаОС.ИнвентарныйНомерРегл) Тогда
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", код ОС <" + СтрокаОС.ОсновноеСредство.Код + "> : ";
	Иначе
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", инв. номер ОС <" + СтрокаОС.ИнвентарныйНомерРегл + "> : ";
	КонецЕсли;
	
	ТекстСообщения = НачалоСообщения + ТекстСообщения;
	
	ОкончаниеСлужебногоСообщения = Найти( ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И Лев(ТекстСообщения, 1) = "{" Тогда
		ТекстСообщения = СокрЛП( Сред( ТекстСообщения, ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	#Если Клиент Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		
	#КонецЕсли

КонецПроцедуры // ОшибкаПроведенияПоСтроке()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураРеквизитовШапки = Новый Структура;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СтруктураРеквизитовШапки.Вставить("Подразделение");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	 
		СтруктураРеквизитовШапки.Вставить("Организация");
		СтруктураРеквизитовШапки.Вставить("ПодразделениеОрганизации");
		
	КонецЕсли;
	
	// АБС ВСТАВКА
	СтруктураРеквизитовШапки.Вставить("СтароеОсновноеСредство");
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураРеквизитовШапки.Вставить("абс_СобытиеСписанияСтарогоОСРегл");
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		СтруктураРеквизитовШапки.Вставить("абс_СобытиеСписанияСтарогоОСУУ");
	КонецЕсли;
	//\\ АБС ВСТАВКА

	// Гущина 2017.02.07 T#7763513 +++
	СтруктураРеквизитовШапки.Вставить("абс_Обособленное");
	// Гущина 2017.02.07 T#7763513 ---
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураРеквизитовШапки, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "ОсновноеСредство";

	// Обязательные реквизиты для отражения в УУ.
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты 
		                      + ", ДатаПринятияКУчету,
		                        |СобытиеПринятияКУчету,
		                        |ПервоначальнаяСтоимость,
		                        |";
							  
	КонецЕсли;
															
															
	// Обязательные реквизиты для отражения в регл. учете.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН	Тогда
	 
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаПринятияКУчетуРегл, СобытиеПринятияКУчетуРегл";
	 
	КонецЕсли;
	
	// Обязательные реквизиты для отражения в БУ.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", , ПервоначальнаяСтоимостьБУ";
							  
	КонецЕсли;

	// Обязательные реквизиты для отражения в НУ.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПорядокВключенияСтоимостиВСоставРасходовНУ, ПервоначальнаяСтоимостьНУ";
							  
	КонецЕсли;
	
	// Проверка заполнения обязательных реквизитов.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);

	Если НЕ Отказ Тогда
	
		Для Каждого СтрокаОС Из ТабОС Цикл
			ПроверкаПоСтроке(СтрокаОС, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть проведен!");
	КонецЕсли;

	мФлагФормированияДвиженийПоВыработке = Истина;
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

//Проверка заполнения реквизитов
//
Функция ПроверкаПоСтроке(СтрокаОС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ОбязательныеРеквизиты = "";
	
	// Обязательные реквизиты для отражения в УУ.
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если НЕ СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ТекущаяСтоимость";
			
			Если СтрокаОС.НачислятьАмортизацию Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СпособНачисленияАмортизации, СпособОтраженияРасходовПоАмортизации";
			
				Если СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				 ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования, КоэффициентУскорения";

				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПараметрВыработки, ОбъемПродукцииРабот";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизации";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизации, ПараметрВыработки, ОбъемПродукцииРабот";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Обязательные реквизиты для отражения в БУ.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ТекущаяСтоимостьБУ, СчетУчетаБУ";
			
			Если СтрокаОС.НачислятьАмортизациюБУ Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СпособНачисленияАмортизацииБУ, СпособОтраженияРасходовПоАмортизацииБУ, СчетАмортизацииБУ";
			
				Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				 ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользованияБУ";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользованияБУ, КоэффициентУскоренияБУ";

				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПараметрВыработкиБУ, ОбъемПродукцииРаботБУ";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизацииБУ";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизацииБУ, ПараметрВыработкиБУ, ОбъемПродукцииРаботБУ";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обязательные реквизиты для отражения в НУ.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СчетУчетаНУ, ПорядокВключенияСтоимостиВСоставРасходовНУ";
			
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", МетодНачисленияАмортизацииНУ, 
			                                                |СпособОтраженияРасходовПоАмортизацииНУ,
			                                                |СчетАмортизацииНУ,
			                                                |СрокПолезногоИспользованияНУ";
															
			Если СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный тогда

				НачислениеПоБазовой = Новый Структура("ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
				                                      |СуммаНакопленнойАмортизацииНУ,
				                                      |ФактическийСрокИспользованияНУ");
													  
				Для Каждого ТекРеквизит Из НачислениеПоБазовой Цикл
														  
					Если ЗначениеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) ИЛИ СтрокаОС.НачислятьПоБазовойСтоимостиНУ Тогда
						
						ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаПереходаКРасчетуПоБазовойСтоимостиНУ, 
						                                                |СуммаНакопленнойАмортизацииНУ,
						                                                |ФактическийСрокИспользованияНУ,
						                                                |НачислятьПоБазовойСтоимостиНУ";
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Конецесли;
					
		КонецЕсли;
		
	КонецЕсли;

	// Проверка текущей стоимости по НУ
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	   И НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)
	   И СтрокаОС.ТекущаяСтоимостьНУ + СтрокаОС.ТекущаяСтоимостьПР = 0 Тогда
	   
		СтрокаСообщения = "(НУ) Не заполнена текущая стоимость основного средства (НУ или ПР)";
		ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, "(НУ)", Отказ, Заголовок);
			
	КонецЕсли;
	
	РеквизитыДляПроверки = Новый Структура(ОбязательныеРеквизиты);
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		
		Значение = СтрокаОС[КлючЗначение.Ключ];
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			
			ПредставлениеРеквизита = Ссылка.Метаданные().ТабличныеЧасти.ОС.Реквизиты[КлючЗначение.Ключ].Представление();
			
			ВидУчета = ""; 
			
			Если Прав(КлючЗначение.Ключ, 2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ, 2) = "НУ" тогда
				ВидУчета = "(НУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ, 3) = "УСН" тогда
				ВидУчета = "(УСН) ";
			КонецЕсли;
			
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, ВидУчета, Отказ, Заголовок);
			
		ИначеЕсли КлючЗначение.Ключ = "НачислятьПоБазовойСтоимостиНУ" И НЕ СтрокаОС.НачислятьПоБазовойСтоимостиНУ Тогда
			
			//Логическая проверка
			СтрокаСообщения ="(НУ) не установлен признак начисления по базовой стоимости (заполнены некоторые реквизиты для начисления по базовой)";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, "(НУ)", Отказ, Заголовок);
			
		КонецЕсли;

	КонецЦикла;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл И СтрокаОС.НачислятьАмортизациюБУ Тогда
			СтрокаСообщения = "(БУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету";
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения , "(БУ)", Отказ, Заголовок);
		КонецЕсли;

		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл И ЗначениеЗаполнено(СтрокаОС.НакопленнаяАмортизацияБУ) Тогда
			СтрокаСообщения = "(БУ) накопленная амортизация по ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(БУ)", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл И ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) Тогда
			СтрокаСообщения = "(БУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(БУ)", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;
	
	Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтрокаОС.НачислятьАмортизациюНУ Тогда
			СтрокаСообщения = "(НУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету";
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения , "(НУ)", Отказ, Заголовок);
		КонецЕсли;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И ЗначениеЗаполнено(СтрокаОС.НакопленнаяАмортизацияНУ) Тогда
			СтрокаСообщения = "(НУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(НУ)", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) Тогда
			СтрокаСообщения = "(НУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(НУ)", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

// АБС ВСТАВКА

//Процедуры списания основного средства
// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам_СписаниеОС(СтруктураШапкиДокумента)
    ТаблицаПоОС = Новый ТаблицаЗначений;
	ТаблицаПоОС.Колонки.Добавить("ОсновноеСредство");
	ТаблицаПоОС.Колонки.Добавить("Стоимость");
	ТаблицаПоОС.Колонки.Добавить("Амортизация");
	ТаблицаПоОС.Колонки.Добавить("АмортизацияЗаМесяц");
	ТаблицаПоОС.Колонки.Добавить("СписаноНаЗатраты");
	ТаблицаПоОС.Колонки.Добавить("СтоимостьБУ");
	ТаблицаПоОС.Колонки.Добавить("АмортизацияБУ");
	ТаблицаПоОС.Колонки.Добавить("АмортизацияЗаМесяцБУ");
	ТаблицаПоОС.Колонки.Добавить("СписаноНаЗатратыБУ");
	ТаблицаПоОС.Колонки.Добавить("СтоимостьНУ");
	ТаблицаПоОС.Колонки.Добавить("ТекСтоимостьНУ");
	ТаблицаПоОС.Колонки.Добавить("АмортизацияНУ");
	ТаблицаПоОС.Колонки.Добавить("АмортизацияНУ_Рег");
	ТаблицаПоОС.Колонки.Добавить("АмортизацияЗаМесяцНУ");
	ТаблицаПоОС.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
	СтруктураШапкиДокумента.вставить("Событие", абс_СобытиеСписанияСтарогоОСУУ);
	СтруктураШапкиДокумента.вставить("СобытиеРегл", абс_СобытиеСписанияСтарогоОСРегл);
	
	СтрокаТаблицыПоОС = ТаблицаПоОС.Добавить();
	СтрокаТаблицыПоОС.ОсновноеСредство = ЭтотОбъект.СтароеОсновноеСредство;
	СтрокаТаблицыПоОС.Стоимость = СтрокаСтароеОС.ПервоначСтоимость;
	//АБС ИЗМЕНЕНИЕ 37963  25.02.2014 10:09:42  Шамов
	//СтрокаТаблицыПоОС.Амортизация = СтрокаСтароеОС.Амортизация;
	//СтрокаТаблицыПоОС.АмортизацияЗаМесяц = СтрокаСтароеОС.БухТекМесяц;
	СтрокаТаблицыПоОС.Амортизация = СтрокаСтароеОС.АмортизацияУпр;
	СтрокаТаблицыПоОС.АмортизацияЗаМесяц = СтрокаСтароеОС.УпрТекМесяц;
	//АБС ИЗМЕНЕНИЕ 37963 КОНЕЦ
	СтрокаТаблицыПоОС.СписаноНаЗатраты = ложь;
	СтрокаТаблицыПоОС.СтоимостьБУ = СтрокаСтароеОС.ПервоначСтоимость;
	СтрокаТаблицыПоОС.АмортизацияБУ = СтрокаСтароеОС.Амортизация;
	СтрокаТаблицыПоОС.АмортизацияЗаМесяцБУ = СтрокаСтароеОС.БухТекМесяц;
	СтрокаТаблицыПоОС.СписаноНаЗатратыБУ = ложь;
	СтрокаТаблицыПоОС.СтоимостьНУ = СтрокаСтароеОС.ПервоначСтоимостьНУ;
	СтрокаТаблицыПоОС.ТекСтоимостьНУ = СтрокаСтароеОС.ПервоначСтоимостьНУ_Рег;
	СтрокаТаблицыПоОС.АмортизацияНУ = СтрокаСтароеОС.АмортизацияНУ;
	СтрокаТаблицыПоОС.АмортизацияНУ_Рег = СтрокаСтароеОС.АмортизацияНУ_Рег;
	СтрокаТаблицыПоОС.АмортизацияЗаМесяцНУ = СтрокаСтароеОС.НалогТекМесяц;
	СтрокаТаблицыПоОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = СтрокаСтароеОС.КВ;	
	
	СписокОС = Новый Массив;
	СписокОС.Добавить(ЭтотОбъект.СтароеОсновноеСредство);
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      Дата);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОС_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство     КАК ОС_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                  КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации     КАК Направление_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (&СписокОС) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (&СписокОС) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних
	|		ПО СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|		ПО СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	
	ДвиженияПоРегистрамУпр_СписаниеОС(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений,Ложь,"");
	ДвиженияПоРегистрамРегл_СписаниеОС(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений,Ложь,"")

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр_СписаниеОС(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	АмортизацияОС              = Движения.СтоимостьОС;
	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));

	Для Каждого СтрокаОС из ТаблицаПоОС Цикл
		
		Если (СтрокаОС.Стоимость = 0) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаОС.АмортизацияЗаМесяц > 0 Тогда

			ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");

			НоваяСтрока    = ТабАмортизации.Добавить();

			НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяц;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_УУ);

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();

			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяц;
			Движение.Стоимость        = 0;

		КонецЕсли;

	КонецЦикла;

	// вызов процедуры списания амортизации по направлениям
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();

	СостояниеОС           = Движения.СостоянияОС;
	СобытиеОС             = Движения.СобытияОС;
	АмортизацияОС         = Движения.СтоимостьОС;
	ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатраты;
	НачислениеАмортизации = Движения.НачислениеАмортизацииОС;

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();
	
	ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		Если (СтрокаТЧ.Стоимость = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
			// Движения по регистру НачислениеАмортизации
			Движение = НачислениеАмортизации.Добавить();
			
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			
			Движение.НачислятьАмортизацию = Ложь;
			Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;
			
			// Движения по регистру СобытияОС
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Событие              = СтруктураШапкиДокумента.Событие;
			Движение.НазваниеДокумента = Метаданные().Представление();
			Движение.НомерДокумента    = Номер;
			
			// Движения по регистру СостоянияОС
			Движение = СостояниеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
			Движение.ДатаСостояния		  = ДатаДока;
		Если НЕ СтрокаТЧ.СписаноНаЗатраты Тогда

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();

			Движение.ОсновноеСредство = ТекОС;
			Движение.Амортизация      = СтрокаТЧ.Амортизация+СтрокаТЧ.АмортизацияЗаМесяц;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;

		Иначе
			// Движения по регистру ОССписанныеНаЗатраты
			Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();

			Движение.ОсновноеСредство = ТекОС;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;

		КонецЕсли;

	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();

	ОССписанныеНаЗатраты.мПериод   = ДатаДока;
	ОССписанныеНаЗатраты.мТаблицаДвижений = ТаблицаДвиженийОССписанныеНаЗатраты;
	Движения.ОССписанныеНаЗатраты.ВыполнитьРасход();

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл_СписаниеОС(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	СписокОС       = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	СобытиеОС             = Движения.СобытияОСОрганизаций;
	СостояниеОС			  = Движения.СостоянияОСОрганизаций;
		Для каждого СтрокаОС из ТаблицаПоОС Цикл
			
			ТекОС = СтрокаОС.ОсновноеСредство;
			
			// Движения по регистру СобытияОС
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	  = Метаданные().Представление();
			Движение.НомерДокумента		  = Номер;
			
			// Движения по регистру СостоянияОС
			Движение = СостояниеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
			Движение.ДатаСостояния		  = ДатаДока;
			
		КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",        ДатаДока);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                     КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации     КАК СчетНачисленияАмортизацииНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство              КАК ОС_НУ
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство";
	ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат

		АмортизацияОС  = Движения.СтоимостьОСБухгалтерскийУчет;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();

		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		//АБС
		ТабАмортизации.Колонки.Добавить("ИмяСубконто");
        //\\АБС
		Для каждого СтрокаОС из ТаблицаПоОС Цикл

			Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда

				НоваяСтрока = ТабАмортизации.Добавить();

				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				//АБС
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				//\\АБС
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);

				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				Если СтрокаТЗ <> Неопределено Тогда
					НоваяСтрока.СчетАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
				Иначе
					ОбщегоНазначения.ОшибкаПриПроведении("Основное средство "+ СтрокаОС.ОсновноеСредство.Наименование 
					+" не стоит на бух учете в организации "+ ТекОрганизация,Отказ); 	
					Возврат;
				КонецЕсли;

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();

				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = 0;

			КонецЕсли;

		КонецЦикла;

		//вызов процедуры списания амортизации по направлениям
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

		АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
		ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатратыОрганизаций;
		НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		ПроводкиБУ            = Движения.Хозрасчетный;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();

		ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();

		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;

			// Движения по регистру НачислениеАмортизации
			Движение = НачислениеАмортизации.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
			Если (НЕ СтрокаТЧ.СписаноНаЗатратыБУ) и (СтрокаТЧ.СтоимостьБУ>0) Тогда

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();

				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Передача;

				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
				Если СтрокаТЗ <> Неопределено Тогда
					СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаБУ;
					СчетУчетаАмортизации= СтрокаТЗ.СчетНачисленияАмортизацииБУ;
				Иначе
					
					ОбщегоНазначения.ОшибкаПриПроведении("Основное средство "+ ТекОс.Наименование 
					+" не стоит на бух учете в организации "+ ТекОрганизация,Отказ); 	
					Возврат;
					
				КонецЕсли;

				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;

				Если СуммаПроводки <> 0 Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списана амортизация";
					Проводка.Сумма       = -СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетКт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.Вспомогательный;
					

				КонецЕсли;

				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ;

				Если СуммаПроводки<>0 Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Сумма       = -СтрокаТЧ.СтоимостьБУ;
					Проводка.Содержание  = "Списана балансовая ст-ть";
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
					Проводка.СчетДт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				//СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;

				//Если СуммаПроводки<>0 Тогда

				//	Проводка = ПроводкиБУ.Добавить();
				//	Проводка.Период      = ДатаДока;
				//	Проводка.Организация = ТекОрганизация;
				//	Проводка.Содержание  = "Списана ост. стоимость";
				//	Проводка.Сумма       = СуммаПроводки;
				//	Проводка.НомерЖурнала = "ОС";

				//	Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
				//	Если НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
				//		УправлениеПроизводством.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
				//	КонецЕсли;

				//	Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
				//	УправлениеПроизводством.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекОС);

				//КонецЕсли;

			Иначе

				// Движения по регистру ОССписанныеНаЗатраты
				Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();

				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;

			КонецЕсли;

		КонецЦикла;

		АмортизацияОС.мПериод                    = ДатаДока;
		АмортизацияОС.мТаблицаДвижений           = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();

		ОССписанныеНаЗатраты.мПериод             = ДатаДока;
		ОССписанныеНаЗатраты.мТаблицаДвижений    = ТаблицаДвиженийОССписанныеНаЗатраты;
		Движения.ОССписанныеНаЗатратыОрганизаций.ВыполнитьРасход();

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат

		АмортизацияОСНУ = Движения.СтоимостьОСНалоговыйУчет;

		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();
		
		ТаблицаДвиженийСтоимостьНУ = ТаблицаДвиженийАмортизацияНУ.Скопировать();

		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
		ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
        //АБС
		ТабАмортизации.Колонки.Добавить("СуммаБУ");
		ТабАмортизации.Колонки.Добавить("ИмяСубконто");
        //\\АБС

		//\\АБС
		Для каждого СтрокаОС из ТаблицаПоОС Цикл

			Если СтрокаОС.АмортизацияЗаМесяцНУ > 0 Тогда

				НоваяСтрока = ТабАмортизации.Добавить();

				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				//АБС
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
                НоваяСтрока.СуммаБУ = СтрокаОС.АмортизацияЗаМесяцБУ;
				//\\АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина КОНЕЦ
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_НУ);

				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда
					НоваяСтрока.СчетАмортизацииНУ = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
					НоваяСтрока.СчетУчетаНУ       = СтрокаТЗ.СчетУчетаНУ;
				Иначе
					ОбщегоНазначения.ОшибкаПриПроведении("Основное средство "+ СтрокаОС.ОсновноеСредство.Наименование 
					+" не стоит на нал. учете в организации "+ ТекОрганизация,Отказ); 	
					Возврат;
				КонецЕсли;
				
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцНУ;
				Движение.Стоимость        = 0;

				Если СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ > 0 Тогда
				
					НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

					Движение = ТаблицаДвиженийСтоимостьНУ.Добавить();

					Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
					Движение.Организация      = ТекОрганизация;
					Движение.Амортизация      = 0;
					Движение.Стоимость        = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
		// Включение капитальных вложений в состав расходов.
		ТабКапитальныхВложений = ТабАмортизации.Скопировать();
		ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.Сумма);
		ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
		ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
		ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Включение капитальных вложений в состав расходов");
		
		// Формирование проводок по возникающим временным разницам.
		ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
		Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
			СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
		КонецЦикла;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Включение капитальных вложений в состав расходов");

		//вызов процедуры списания амортизации по направлениям
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Нал","ОС");
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();

		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();
		
		АмортизацияОСНУ          = Движения.СтоимостьОСНалоговыйУчет;
		НачислениеАмортизацииНУ  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		ПроводкиНУ               = Движения.Налоговый;

		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();

		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;

			// Движения по регистру НачислениеАмортизации
				Движение = НачислениеАмортизацииНУ.Добавить();
				Движение.Организация          = ТекОрганизация;
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.НачислятьАмортизацию = Ложь;
			Если СтрокаТЧ.СтоимостьНУ > 0 Тогда

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаТЧ.АмортизацияНУ_рег + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				Движение.Стоимость        = СтрокаТЧ.ТекСтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Передача;

			//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			КонецЕсли;
			//\\//АБС ИЗМЕНЕНИЕ 36572  КОНЕЦ
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда

					СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
					СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;

				КонецЕсли;

				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списана амортизация";
					Проводка.Сумма       = -СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетКт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

					//Проводка.СчетКт      = ПланыСчетов.Налоговый.Всп;
					//УправлениеПроизводством.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание балансовой стоимости Д 01.09 К 01.01
				//АБС 10.11.2009
				СуммаПроводки = СтрокаТЧ.СтоимостьНУ;
				//\\
 				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списана балансовая ст-ть";
					Проводка.Сумма       = -(СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ);
					Проводка.НомерЖурнала = "ОС";

					//Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					//УправлениеПроизводством.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетДт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				//СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

				//Если НЕ (СуммаПроводки = 0) Тогда

				//	Проводка = ПроводкиНУ.Добавить();

				//	Проводка.Период      = ДатаДока;
				//	Проводка.Организация = ТекОрганизация;
				//	Проводка.Содержание  = "Списана ост. стоимость";
				//	Проводка.Сумма       = СуммаПроводки;
				//	Проводка.НомерЖурнала = "ОС";

				//	Проводка.СчетДт      = СтруктураШапкиДокумента.СчетСписанияНУ;
				//	Если НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
				//		УправлениеПроизводством.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
				//	КонецЕсли;

				//	Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
				//	УправлениеПроизводством.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекОС);

				//КонецЕсли;

				//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//КонецЕсли;
             //\\АБС ИЗМЕНЕНИЕ 36572  КОНЕЦ
		КонецЦикла;

		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();

				
		// Рассчитаем разницы в амортизации на месяц списания
 	    РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "ОС", ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), ПроводкиНУ, Движения, Истина);
		
		ДвиженияПоРазницам_СписаниеОС(СтруктураШапкиДокумента, СписокОС, ТаблицаСчетов);

		// Списание сумм капитальных вложений, включенных в состав расходов.
		Для Каждого СтрокаТабКапитальныхВложений Из ТабКапитальныхВложений Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабКапитальныхВложений.Сумма) Тогда
		
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = "ОС";
				Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
				Проводка.Сумма        = -СтрокаТабКапитальныхВложений.Сумма;
				
				Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТабКапитальныхВложений.ОбъектУчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Движения.БракВПроизводствеНалоговыйУчет.Записать(Ложь);
		//Движения.ЗатратыНалоговыйУчет.Записать(Ложь);
		//Движения.НезавершенноеПроизводствоНалоговыйУчет.Записать(Ложь);

	КонецЕсли;
				
			
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
		ПРоводкиБУ.Записать(Истина);
	КонецЕсли; 
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не Отказ тогда
		ПроводкиНУ.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДвиженияПоРазницам_СписаниеОС(СтруктураШапкиДокумента, СписокОС, ТаблицаСчетов)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;
	
	// Списание разниц счета 01 и 02
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 Как Субконто1,
	|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	|	0 КАК Сумма02ВР,
	|	0 КАК Сумма01ПР,
	|	0 КАК Сумма01ВР,
	|	0 КАК Сумма01
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокКт,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации), ,Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
	|Субконто1 ";

	
	Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОС_01);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", ПланыСчетов.Налоговый.ОсновныеСредства);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Список = ОС.Выгрузить();
	
	ПроводкиНУ = Движения.Налоговый;
	ПроводкиБУ = Движения.Хозрасчетный;
	СчетСписанияНУ = Планысчетов.Налоговый.ПустаяСсылка();
	СубконтоНУ = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
		Если СтрокаТаблицы = NULL Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОС = ТаблицаСчетов.Найти(Выборка.Субконто1,"ОС_НУ");
		Если Выборка.Сумма01Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = ПараметрыОС.СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = -Выборка.Сумма01Вр;
			//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
			ПроводкаНУ.Содержание   = "Списана балансовая ст-ть";
			//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//	ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
		//	УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
		//	ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		//Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
		//	ПроводкаНУ              = ПроводкиНУ.Добавить();
		//	ПроводкаНУ.Период       = Дата;
		//	ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
		//	
		//	ПроводкаНУ.СчетДт      = СчетСписанияНУ;
		//	//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
		//	//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		//	ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
		//	ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
		//	ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
		//	//ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
		//	//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
		//	ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
		//	ПроводкаНУ.НомерЖурнала = "ВР";
		//КонецЕсли;
		Если Выборка.Сумма02Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = -Выборка.Сумма02Вр;
			//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
			ПроводкаНУ.Содержание   = "Списана амортизация";
			//\\АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
			//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			//\\АБС ИЗМЕНЕНИЕ 36572 КОНЕЦ
			ПроводкаНУ.НомерЖурнала = "ВР";
			
		КонецЕсли;
		
		Если Выборка.Сумма01Пр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = ПараметрыОС.СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = -Выборка.Сумма01Пр;
			//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
			ПроводкаНУ.Содержание   = "Списана балансовая ст-ть";
            //АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
			//ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
			//ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		//Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
		//	ПроводкаНУ              = ПроводкиНУ.Добавить();
		//	ПроводкаНУ.Период       = Дата;
		//	ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
		//	ПроводкаНУ.СчетДт      = СчетСписанияНУ;
		//	//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
		//	//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		//	ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
		//	ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
		//	ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
		//	ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
		//	УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
		//	ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
		//	ПроводкаНУ.НомерЖурнала = "ПР";
		//КонецЕсли;
		Если Выборка.Сумма02Пр <> 0 Тогда		
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
			//ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = -Выборка.Сумма02Пр;
			//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
           	//ПроводкаНУ.Содержание   = "Постоянныые разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
			ПроводкаНУ.Содержание   = "Списана амортизация";
            //АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина

			//ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			//УправлениеПроизводством.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
	КонецЦикла;
	
	ПроводкиНУ.Записать(Истина);
КонецПроцедуры

Процедура РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, Актив, Объект, мПроводкиНУ, Движения = Неопределено, Разукомплектация = Ложь,Ссылка = Неопределено) Экспорт
	Если Актив = "ОС" Тогда
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
		СчетУчетаБУ       = Массив;
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
		СчетУчетаНУ       = Массив;
		СчетАмортизацииБУ = ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств;
		СчетАмортизацииНУ = ПланыСчетов.Налоговый.АмортизацияОсновныхСредств;
	ИначеЕсли Актив = "НМА" Тогда
		СчетУчетаБУ       = ПланыСчетов.Хозрасчетный.НематериальныеАктивы;
		СчетУчетаНУ       = ПланыСчетов.Налоговый.НематериальныеАктивы;
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
		СчетАмортизацииБУ = Массив;
		СчетАмортизацииНУ = ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		ОбъектЕсть = Ложь;
	Иначе
		ОбъектЕсть = Истина;
	КонецЕсли;
	
	мНачДата    = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	
	ТекстУсловия = "ГДЕ";
	Если ОбъектЕсть Тогда
		ТекстУсловия = ТекстУсловия+"
		|	ХозрасчетныйОбороты.Субконто1 В (&Объект)";
	КонецЕсли;
	Если Ссылка<>Неопределено Тогда
		Если ОбъектЕсть Тогда 
			ТекстУсловия = ТекстУсловия+" И";
		КонецЕсли;	

		ТекстУсловия = ТекстУсловия+"
		|	ХозрасчетныйОбороты.Регистратор = &Ссылка
		|";
	КонецЕсли;	
	
	Если ТекстУсловия = "ГДЕ" Тогда
		ТекстУсловия = "";
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1 КАК ОбъектУчета,
	               |	ХозрасчетныйОбороты.КорСчет КАК СчетЗатрат,
	               |	ХозрасчетныйОбороты.Счет КАК СчетАмортизации,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто1 ЕСТЬ NULL 
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто1
	               |	КОНЕЦ КАК Субконто1,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто2 ЕСТЬ NULL 
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто2
	               |	КОНЕЦ КАК Субконто2,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто3 ЕСТЬ NULL 
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто3
	               |	КОНЕЦ КАК Субконто3,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата,"+?(ссылка = Неопределено,"","Регистратор")+" , Счет В ИЕРАРХИИ (&Счет02БУ), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
				   |" +ТекстУсловия+"				   
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ХозрасчетныйОбороты.КорСчет,
	               |	ХозрасчетныйОбороты.Счет,
	               |	ХозрасчетныйОбороты.КорСубконто1,
	               |	ХозрасчетныйОбороты.КорСубконто2,
	               |	ХозрасчетныйОбороты.КорСубконто3";
	
	Запрос.УстановитьПараметр("НачДата",    мНачДата);
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет02БУ",   СчетАмортизацииБУ);
	Запрос.УстановитьПараметр("Объект",   Объект);
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	РезультатЗапроса = Запрос.Выполнить();  
	ТаблицаЗатрат = РезультатЗапроса.Выгрузить();
	ТаблицаЗатрат.Колонки.Добавить("СуммаНУ");
	ТаблицаЗатрат.Колонки.Добавить("Счет02");
	Для Каждого СтрокаАмортизация Из ТаблицаЗатрат Цикл
		СтрокаАмортизация.Счет02 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаАмортизация.СчетАмортизации), Ложь, СтруктураШапкиДокумента.Дата);
	КонецЦикла;
	Для Каждого СтрокаТабЗатрат Из ТабЗатрат Цикл
		СтрокаАмортизация = ТаблицаЗатрат.Добавить();
		СтрокаАмортизация.ОбъектУчета = СтрокаТабЗатрат.ОбъектУчета;
		СтрокаАмортизация.СчетЗатрат = СтрокаТабЗатрат.СчетЗатрат;
		СтрокаАмортизация.Счет02 = СтрокаТабЗатрат.СчетАмортизацииНУ;
		Если  СтрокаТабЗатрат.СчетЗатрат.ВидыСубконто.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(СтрокаТабЗатрат.Субконто1) Тогда
				
				СтрокаАмортизация.Субконто1 = НайтиСубконтоСчетаЗатрат(СтрокаТабЗатрат.СчетЗатрат.ВидыСубконто[0], СтрокаТабЗатрат);
			Иначе
				СтрокаАмортизация.Субконто1 = СтрокаТабЗатрат.Субконто1;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТабЗатрат.СчетЗатрат.ВидыСубконто.Количество() > 1 Тогда
			Если Не ЗначениеЗаполнено(СтрокаТабЗатрат.Субконто2) Тогда
				СтрокаАмортизация.Субконто2 = НайтиСубконтоСчетаЗатрат(СтрокаТабЗатрат.СчетЗатрат.ВидыСубконто[1], СтрокаТабЗатрат);
			Иначе
				СтрокаАмортизация.Субконто2 = СтрокаТабЗатрат.Субконто2;
			КонецЕсли;
		КонецЕсли;

		Если  СтрокаТабЗатрат.СчетЗатрат.ВидыСубконто.Количество() > 2 Тогда
			Если Не ЗначениеЗаполнено(СтрокаТабЗатрат.Субконто3) Тогда
				СтрокаАмортизация.Субконто3 = НайтиСубконтоСчетаЗатрат(СтрокаТабЗатрат.СчетЗатрат.ВидыСубконто[2], СтрокаТабЗатрат);;
			Иначе
				СтрокаАмортизация.Субконто3 = СтрокаТабЗатрат.Субконто3;
			КонецЕсли;	
		КонецЕсли;
		СтрокаАмортизация.СуммаНУ = СтрокаТабЗатрат.Сумма;
		//АБС110609
		СтрокаАмортизация.Сумма = СтрокаТабЗатрат.Сумма;
	КонецЦикла;
	 ТаблицаЗатрат.Свернуть("ОбъектУчета,СчетЗатрат,Счет02,Субконто1,Субконто2,Субконто3","Сумма,СуммаНУ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
	               |	0 КАК Сумма01БУ,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК Сумма01НУ,
	               |	0 КАК Сумма01ПР
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонДата,
	               |		Счет В ИЕРАРХИИ (&Счет01НУ),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчетаНУ) КАК НалоговыйОстатки
				   |" + ?(ОбъектЕсть, "
				   |ГДЕ
	               |	НалоговыйОстатки.Субконто1  В (&Объект)", "") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт),
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&Счет01БУ), , Организация = &Организация) КАК НалоговыйОстатки
				   |" + ?(ОбъектЕсть, "
				   |ГДЕ
	               |	НалоговыйОстатки.Субконто1 В (&Объект)", "") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт)
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонДата,
	               |		Счет В ИЕРАРХИИ (&Счет01НУ),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчетаПр) КАК НалоговыйОстатки
				   |" + ?(ОбъектЕсть, "
				   |ГДЕ
	               |	НалоговыйОстатки.Субконто1  В (&Объект)", "") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |ИТОГИ
	               |	СУММА(Сумма01БУ),
	               |	СУММА(Сумма01НУ),
	               |	СУММА(Сумма01ПР)
	               |ПО
	               |	Субконто1";
				   
   	Если ОбъектЕсть Тогда
		мКонДата = Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая);
    КонецЕсли;

	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчетаНУ",   Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР", Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("Счет01НУ",   СчетУчетаНУ);	
	Запрос.УстановитьПараметр("Счет01БУ",   СчетУчетаБУ);	
	Запрос.УстановитьПараметр("Объект",   Объект);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	//АБС 23.11.07
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПараметрыАмортизацииОССрезПоследних.СрокПолезногоИспользования > ПараметрыАмортизацииОССрезПоследних.СрокИспользованияДляВычисленияАмортизации
	|			ТОГДА ПараметрыАмортизацииОССрезПоследних.СрокПолезногоИспользования
	|		ИНАЧЕ ПараметрыАмортизацииОССрезПоследних.СрокИспользованияДляВычисленияАмортизации
	|	КОНЕЦ КАК Срок,
	|	ПараметрыАмортизацииОССрезПоследних.ОсновноеСредство КАК ОС
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонДата, "+?(ОбъектЕсть,"ОсновноеСредство В (&Объект)","")+") КАК ПараметрыАмортизацииОССрезПоследних";
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Объект",   Объект);
	
	ТаблицаСроков = Запрос.Выполнить().Выгрузить();
	//\\АБС 23.11.07
	ТаблицаОС = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл
		
		// Если амортизация по НУ и по БУ совпадает, разниц нет
				Если СтрокаТаблицы.СУмма = СтрокаТаблицы.СУммаНУ Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыОС = ТаблицаОС.Найти(СтрокаТаблицы.ОбъектУчета,"Субконто1");
				
				Если СтрокаТаблицыОС = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Сумма01ВР = СтрокаТаблицыОС.Сумма01БУ - СтрокаТаблицыОС.Сумма01НУ - СтрокаТаблицыОС.Сумма01ПР;
				Если СтрокаТаблицыОС.Сумма01НУ = 0 И СтрокаТаблицыОС.Сумма01ПР = 0 И Сумма01ВР = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийПериод = ПредставлениеПериода(НачалоМесяца(СтруктураШапкиДокумента.Дата), КонецМесяца(СтруктураШапкиДокумента.Дата));
				//АБС АБ
				СчетЗатрат    = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТаблицы.СчетЗатрат), Ложь, СтруктураШапкиДокумента.Дата);
				//\\АБС
				//СчетЗатрат    = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ_АБС(СтрокаТаблицы, СтруктураШапкиДокумента.Дата);
				СчетАмортизации = СтрокаТаблицы.Счет02;
				
				// Особый случай: в БУ амортизация не начисляется или приостановлена, временные разницы 
				// равны сумме амортизации по НУ
				Если СтрокаТаблицы.СУмма = 0 И СтрокаТаблицы.СУммаНУ <> 0 Тогда
					//АБС Если по 01-му счету нет ВР, то и по 02 его не должно быть
					Если (Сумма01ВР<>0) или (СтрокаТаблицыОС.Сумма01ПР=0) Тогда
						//\\АБС
						ПроводкаНУ              = мПроводкиНУ.Добавить();
						ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
						ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
						
						ПроводкаНУ.СчетКт       = СчетАмортизации; 
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
						ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
						ПроводкаНУ.Сумма        = - СтрокаТаблицы.СУммаНУ;
						ПроводкаНУ.Содержание   = "Временные разницы за " + ТекущийПериод;
						ПроводкаНУ.СчетДт       = СчетЗатрат; 
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
						ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
						ПроводкаНУ.НомерЖурнала = "ВР";
						Продолжить;
						//АБС Иначе - это ПР, а не ВР
					Иначе
						ПроводкаНУ              = мПроводкиНУ.Добавить();
						ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
						ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
						
						ПроводкаНУ.СчетКт       = СчетАмортизации; 
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
						ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
						ПроводкаНУ.Сумма        = - СтрокаТаблицы.СУммаНУ;
						ПроводкаНУ.Содержание   = "Постоянные разницы за " + ТекущийПериод;
						ПроводкаНУ.СчетДт       = СчетЗатрат; 
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
						ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
						ПроводкаНУ.НомерЖурнала = "ПР";
						Продолжить;
					КонецЕсли;
					//\\АБС
				КонецЕсли;
				//АБС Изменено 23.11.07
				СтрокаСрокИспользования = ТаблицаСроков.Найти(СтрокаТаблицыОС.Субконто1,"ОС");
				Если СтрокаСрокИспользования = Неопределено Тогда
					// постоянная разница в оценке амортизации, возникшая вследствие постоянной разницы в оценке ОС
					// амортизация по ПР, начисленная по способу амортизации БУ
					
					СуммаПР = Окр((?(ЗначениеЗаполнено(СтрокаТаблицыОС.Сумма01БУ), СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ, 0)) * СтрокаТаблицыОС.Сумма01ПР, 2);
					
					// временная разница в оценке амортизации, возникшая вследствие временной разницы в оценке ОС
					// амортизация по ВР, начисленная по способу амортизации БУ
					СуммаВР1 = (?(ЗначениеЗаполнено(СтрокаТаблицыОС.Сумма01БУ), СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ, 0)) * Сумма01ВР;
				ИначеЕсли СтрокаСрокИспользования.Срок <= 0 Тогда
					// постоянная разница в оценке амортизации, возникшая вследствие постоянной разницы в оценке ОС
					// амортизация по ПР, начисленная по способу амортизации БУ
					
					СуммаПР = Окр((?(ЗначениеЗаполнено(СтрокаТаблицыОС.Сумма01БУ), СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ, 0)) * СтрокаТаблицыОС.Сумма01ПР, 2);
					
					// временная разница в оценке амортизации, возникшая вследствие временной разницы в оценке ОС
					// амортизация по ВР, начисленная по способу амортизации БУ
					СуммаВР1 = (?(ЗначениеЗаполнено(СтрокаТаблицыОС.Сумма01БУ), СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ, 0)) * Сумма01ВР;
				Иначе
					
					// постоянная разница в оценке амортизации, возникшая вследствие постоянной разницы в оценке ОС
					// амортизация по ПР, начисленная по способу амортизации БУ
					
					СуммаПР = Окр(СтрокаТаблицыОС.Сумма01ПР/СтрокаСрокИспользования.Срок, 2);
					
					// временная разница в оценке амортизации, возникшая вследствие временной разницы в оценке ОС
					// амортизация по ВР, начисленная по способу амортизации БУ
					СуммаВР1 = Сумма01ВР/СтрокаСрокИспользования.Срок;
				КонецЕсли;
				// временная разница в оценке амортизации, возникшая вследствие разных способов начисления амортизации по НУ и БУ	
				    СуммаВР2 = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ - СуммаПР - СуммаВР1;
					
					//АБС. Возможна ситуация, когда сумму надо относить на ПР, а не на ВР, т.к. на 01-м счете ВР нет!
					//Если Сумма01ВР = 0 и СтрокаТаблицыОС.Сумма01ПР<>0 Тогда
					//	СуммаПР = Окр(СуммаПР+СуммаВР2, 2);
					//	СуммаВР = 0;						
					//Иначе	
						//\\АБС	
						СуммаВР = Окр(СуммаВР1 + СуммаВР2, 2);
						//АБС Закроем условие	
					//КонецЕсли;
					//\\АБС
					
					Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СчетАмортизации) Тогда
						Продолжить;
					КонецЕсли;
				
				Если СуммаПР <> 0 Тогда
					ПроводкаНУ              = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетКт       = СчетАмортизации; 
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
					ПроводкаНУ.Сумма        = СуммаПР;
					ПроводкаНУ.Содержание   = "Постоянные разницы за " + ТекущийПериод;
					ПроводкаНУ.СчетДт       = СчетЗатрат; 
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
					ПроводкаНУ.НомерЖурнала = "ПР";
				КонецЕсли;
				Если СуммаВр <> 0 Тогда
					ПроводкаНУ              = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетКт       = СчетАмортизации; 
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
					ПроводкаНУ.Сумма        = СуммаВр;
					ПроводкаНУ.Содержание   = "Временные разницы за " + ТекущийПериод;
					ПроводкаНУ.СчетДт       = СчетЗатрат; 
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
					ПроводкаНУ.НомерЖурнала = "ВР";
				КонецЕсли;
				
		// Запишем сумму временной разницы в регистры.
		Если (Движения <> Неопределено) И (СуммаВр <> 0 Или СуммаПр <> 0) Тогда
			
			СтатьяЗатрат 			 = Неопределено;
			НоменклатурнаяГруппа 	 = Неопределено;
			ПодразделениеОрганизации = Неопределено;
			Для Ном = 1 по СчетЗатрат.ВидыСубконто.Количество() Цикл
				ЗначениеСубконто = СтрокаТаблицы["Субконто" + Ном];
				Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					СтатьяЗатрат = ЗначениеСубконто;
				ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					НоменклатурнаяГруппа = ЗначениеСубконто;
				ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					ПодразделениеОрганизации = ЗначениеСубконто;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				Продолжить;
			КонецЕсли;
					
			Если СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Налоговый.БракВПроизводстве) Тогда
				НоваяСтрока = Движения.БракВПроизводствеНалоговыйУчет.Добавить();
				
			ИначеЕсли СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОсновноеПроизводство_) Тогда
				НоваяСтрока = Движения.НезавершенноеПроизводствоНалоговыйУчет.Добавить();
				
			Иначе
				НоваяСтрока = Движения.ЗатратыНалоговыйУчет.Добавить();
				
			КонецЕсли;
			
			НоваяСтрока.Период 					= СтруктураШапкиДокумента.Дата;
			НоваяСтрока.СчетУчета 				= СчетЗатрат;
			НоваяСтрока.Подразделение 			= ПодразделениеОрганизации;
			НоваяСтрока.СтатьяЗатрат 			= СтатьяЗатрат;
			НоваяСтрока.НоменклатурнаяГруппа 	= НоменклатурнаяГруппа;
			НоваяСтрока.ПостояннаяРазница 		= СуммаПР;
			НоваяСтрока.ВременнаяРазница 		= СуммаВр;
			
		КонецЕсли;
		
	КонецЦикла;
	Если Разукомплектация Тогда
		мПроводкиНУ.Записать(Истина);
	Иначе
		мПроводкиНУ.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

Функция НайтиСубконтоСчетаЗатрат(Субконто, СтрокаТабЗатрат)
	
	Если Субконто.ВидСубконто.Наименование = "Подразделения" Тогда
		Возврат СтрокаТабЗатрат.ПодразделениеОрганизации;
	КонецЕсли;
	Если Субконто.ВидСубконто.Наименование = "Номенклатурные группы" Тогда
		Возврат СтрокаТабЗатрат.НоменклатурнаяГруппа;
	КонецЕсли;
	Если Субконто.ВидСубконто.Наименование = "Статьи затрат" Тогда
		Возврат СтрокаТабЗатрат.СтатьяЗатрат;
	КонецЕсли;
	
КонецФункции

//\\конец процедур списания основного средства

//\\ АБС ВСТАВКА

// Процедура формирования движений по регистру СтоимостьОС
//
Процедура ДвижениеПоРегиструАмортизацияУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
	//задваиваются записи по старому ОС
	ТаблицаДвижений.Очистить();
	//\\АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина

	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимость) тогда
				НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимость;
			Иначе
				НоваяСтрока.Стоимость        = СтрокаОС.ТекущаяСтоимость;
			КонецЕсли;
			НоваяСтрока.Амортизация      = СтрокаОС.НакопленнаяАмортизация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияУпр()

// Процедура формирования движений по регистру Амортизация бух.
//
Процедура ДвижениеПоРегиструАмортизацияБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
	//задваиваются записи по старому ОС
	ТаблицаДвижений.Очистить();
	//\\АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
				СтоимостьБУ  = СтрокаОС.ПервоначальнаяСтоимостьБУ;
			Иначе
				СтоимостьБУ  = СтрокаОС.ТекущаяСтоимостьБУ;
			КонецЕсли;

			НоваяСтрока.Стоимость        = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетУчетаБУ),       0, СтоимостьБУ);
			НоваяСтрока.Амортизация      = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииБУ), 0, СтрокаОС.НакопленнаяАмортизацияБУ);
			
		КонецЕсли;
			
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияБух()

// Процедура формирования движений по регистру Амортизация нал.
//
Процедура ДвижениеПоРегиструАмортизацияНал( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	//АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина
	//задваиваются записи по старому ОС
	ТаблицаДвижений.Очистить();
	//\\АБС ИЗМЕНЕНИЕ 36572  25.12.2013 9:27:40  Мачихина

	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) тогда
				СтоимостьНУ  = СтрокаОС.ПервоначальнаяСтоимостьНУ;
			Иначе
				СтоимостьНУ  = СтрокаОС.ТекущаяСтоимостьНУ;
			КонецЕсли;
			
			НоваяСтрока.Стоимость        = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетУчетаНУ),       0, СтоимостьНУ);
			НоваяСтрока.Амортизация      = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииНУ), 0, СтрокаОС.НакопленнаяАмортизацияНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ВыработкаОС
//
Процедура ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	Если мФлагФормированияДвиженийПоВыработке Тогда
		
		НаборДвижений   = Движения.ВыработкаОС;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Для Каждого СтрокаОС Из ТабОС Цикл
			
			Если СтрокаОС.ВыработкаКоличество > 0
			   И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
			   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработки) Тогда
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.Период            = Дата;
				НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработки;
				НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличество;
				
			КонецЕсли;
			
			Если СтрокаОС.ВыработкаКоличествоБУ > 0
			   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
			   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда
			   
				Если СтрокаОС.ПараметрВыработкиБУ <> СтрокаОС.ПараметрВыработки тогда 				
				   
					НоваяСтрока = ТаблицаДвижений.Добавить();
					НоваяСтрока.Период            = Дата;
					НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
					НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
					НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПоРегиструВыработкаОС()

// Процедура формирования движений по регистру НоменклатураОС
//
Процедура ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НоменклатураОсновныхСредств;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.Номенклатура) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Номенклатура     = СтрокаОС.Номенклатура;
			НоваяСтрока.Характеристика   = СтрокаОС.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНоменклатураОС()

// Процедура формирования движений по регистру Состав ОС
//
Процедура ДвижениеПоРегиструСоставОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.РодительскоеОС) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ВСоставе         = СтрокаОС.РодительскоеОС;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ОССписанныеНаЗатраты.
//
Процедура ДвижениеПоРегиструОССписанныеНаЗатратыУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ОССписанныеНаЗатраты;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимость;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструОССписанныеНаЗатратыУпр()

// Процедура формирования движений по регистру ОССписанныеНаЗатраты бух.
//
Процедура ДвижениеПоРегиструОССписанныеНаЗатратыБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ОССписанныеНаЗатратыОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструОССписанныеНаЗатратыБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПервоначальныеСведенияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчету;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимость;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизации;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработки;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСУпр()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.СпособПоступления           = СтрокаОС.СпособПоступленияБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                                   = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                               = Истина;
		НоваяСтрока.Организация                              = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		НоваяСтрока.МетодНачисленияАмортизации               = СтрокаОС.МетодНачисленияАмортизацииНУ;
		НоваяСтрока.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
		НоваяСтрока.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУСН( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияУСН;
		НоваяСтрока.СуммаНачисленнойАмортизации = СтрокаОС.СуммаНачисленнойАмортизацииУСН;
		НоваяСтрока.ДатаПриобретения            = СтрокаОС.ДатаПриобретенияУСН;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСУСН()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Местонахождение ОС.
//
Процедура ДвижениеПоРегиструМестонахождениеОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.МестонахождениеОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность       = Истина;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛ;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.Подразделение;
		// Гущина 2017.02.07  T#7763513 +++
		НоваяСтрока.Обособленное  = СтруктураШапкиДокумента.абс_Обособленное;
		// Гущина 2017.02.07   T#7763513 ---
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСУпр()

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		// Гущина 2017.02.07  T#7763513 +++
		НоваяСтрока.Обособленное  = СтруктураШапкиДокумента.абс_Обособленное;
		// Гущина 2017.02.07   T#7763513 ---
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ГрафикиАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСУпр()

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Начисление амортизации.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                             = Дата;
		НоваяСтрока.Активность                         = Истина;
		НоваяСтрока.ОсновноеСредство                   = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию               = СтрокаОС.НачислятьАмортизацию;
		НоваяСтрока.НачислятьАмортизациюВТекущемМесяце = Ложь;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииУпр()

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = Дата;
		НоваяСтрока.Активность           = Истина;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период               = Дата;
			НоваяСтрока.Активность           = Истина;
			НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ПараметрыАмортизации ОС.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПараметрыАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизации),
										СтрокаОС.ДатаПринятияКУчету, 
										?( СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
											Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
											СтрокаОС.ДатаПоследнейМодернизации));
			
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			НоваяСтрока.СрокПолезногоИспользования        = СтрокаОС.СрокПолезногоИспользования;
			НоваяСтрока.ОбъемПродукцииРабот               = СтрокаОС.ОбъемПродукцииРабот;
			НоваяСтрока.КоэффициентАмортизации            = СтрокаОС.КоэффициентАмортизации;
			НоваяСтрока.КоэффициентУскорения              = СтрокаОС.КоэффициентУскорения;
			
			НоваяСтрока.ПрименитьВТекущемМесяце = Ложь;
			
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользования;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизации;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРабот;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизации) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимость) тогда
					Стоимость  = СтрокаОС.ПервоначальнаяСтоимость;
				Иначе
					Стоимость  = СтрокаОС.ТекущаяСтоимость;
				КонецЕсли;
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = Стоимость;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизации;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииУпр()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
										СтрокаОС.ДатаПринятияКУчетуРегл, 
										?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
											Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
											СтрокаОС.ДатаПоследнейМодернизацииРегл));
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияБУ;
			НоваяСтрока.ОбъемПродукцииРабот        = СтрокаОС.ОбъемПродукцииРаботБУ;
			НоваяСтрока.КоэффициентАмортизации     = СтрокаОС.КоэффициентАмортизацииБУ;
			НоваяСтрока.КоэффициентУскорения       = СтрокаОС.КоэффициентУскоренияБУ;
			
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
					Стоимость  = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				Иначе
					Стоимость  = СтрокаОС.ТекущаяСтоимостьБУ;
				КонецЕсли;
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = Стоимость;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
										СтрокаОС.ДатаПринятияКУчетуРегл, 
										?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
											Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
											СтрокаОС.ДатаПоследнейМодернизацииРегл));
			НоваяСтрока.Активность                 = Истина;
			НоваяСтрока.Организация                = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство           = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияНУ;
			Если СтрокаОС.СтоимостьДляВычисленияАмортизацииПР = 0 тогда
				НоваяСтрока.ПРДляВычисленияАмортизации           = СтрокаОС.ТекущаяСтоимостьПР;
			Иначе
				НоваяСтрока.ПРДляВычисленияАмортизации           = СтрокаОС.СтоимостьДляВычисленияАмортизацииПР;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СобытияОС.
//
Процедура ДвижениеПоРегиструСобытияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СобытияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчету;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Событие		      = СтрокаОС.СобытиеПринятияКУчету;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчету;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчету;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатацию;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатацию;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатацию;
			
		КонецЕсли;
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе
		   И ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизации) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
												Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаПоследнейМодернизации);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизации;
			НоваяСтрока.СуммаЗатрат       = СтрокаОС.СуммаПоследнейМодернизации;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизации;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСобытияОСУпр()

// Процедура формирования движений по регистру  СобытияОСорганизаций.
//
Процедура ДвижениеПоРегиструСобытияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СобытиеПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчетуРегл;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатациюРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл;
			
		КонецЕсли;

		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл
		   И ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаПоследнейМодернизацииРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизацииРегл;
			НоваяСтрока.СуммаЗатратБУ     = СтрокаОС.СуммаПоследнейМодернизацииБУ;
			НоваяСтрока.СуммаЗатратНУ     = СтрокаОС.СуммаПоследнейМодернизацииНУ;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСобытияОСБух()

////////////////////////////////////////////////////////////////////////////////


// Процедура формирования движений по регистру СостоянияОС.
//
Процедура ДвижениеПоРегиструСостоянияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчету;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

// Процедура формирования движений по регистру СостоянияОСОрганизаций.
//
Процедура ДвижениеПоРегиструСостоянияОСБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчетуРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

////////////////////////////////////////////////////////////////////////////////


// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовУпр()

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС бух.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовБух()

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовНал( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Счета учета ОС бух.
//
Процедура ДвижениеПоРегиструСчетаУчетаОСБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СчетаБухгалтерскогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность                = Истина;
		НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСБух()

// Процедура формирования движений по регистру Счета учета ОС нал.
//
Процедура ДвижениеПоРегиструСчетаУчетаОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СчетаНалоговогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
	 		НоваяСтрока.Активность                = Истина;
			НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаНУ;
			НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру начисление амортизации по базовой стоимости нал.
//
Процедура ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.НачислятьПоБазовойСтоимостиНУ
		   И НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)
		   И ЗначениеЗаполнено( СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ)
		   И    СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                    = СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ;
	 		НоваяСтрока.Активность                = Истина;
			НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
			
			НоваяСтрока.ПризнакНачисленияПоБазовойСтоимости   = СтрокаОС.НачислятьПоБазовойСтоимостиНУ;
			НоваяСтрока.СуммаНакопленнойАмортизации           = СтрокаОС.СуммаНакопленнойАмортизацииНУ;
			НоваяСтрока.ФактическийСрокполезногоИспользования = СтрокаОС.ФактическийСрокИспользованияНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал()

// Процедура формирования движений по регистру Спец. коэф. амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпецКоэффициентНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)
		   И СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                 = СтруктураШапкиДокумента.Дата;
	 		НоваяСтрока.Активность             = Истина;
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация            = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСпецКоэффициентНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБух( ТабОС, СтруктураШапкиДокумента)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) Тогда
					СуммаПроводки = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				Иначе
					СуммаПроводки = СтрокаОС.ТекущаяСтоимостьБУ;
				КонецЕсли;
				
				Если НЕ (СуммаПроводки = 0) Тогда
				
					// Ввод балансовой стоимости ОС.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (баланс. стоимость)";
					
					Проводка.Сумма       = СуммаПроводки;
					
					Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
					
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииБУ) Тогда
			   
			   СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияБУ;
			   
			   Если НЕ (СуммаПроводки = 0) Тогда
			   
					// Ввод начисленной амортизации.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (начисл. амортизация)";
					Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияБУ;
					
					Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
					
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух

// Процедура формирование проводок нал.
//
Процедура ФормированиеПроводокНал( ТабОС, СтруктураШапкиДокумента)
	
	Операция = Движения.Налоговый;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
		   
            Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаНУ) Тогда

				СуммаПроводки = СтрокаОС.ТекущаяСтоимостьНУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
				
					// Ввод балансовой стоимости ОС.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (баланс. стоимость)";
					
					Проводка.Сумма       = СуммаПроводки;
					Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОС.СчетАмортизацииНУ) Тогда
			   
			   СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияНУ;
			   
			   Если НЕ (СуммаПроводки = 0) Тогда
				
					// Ввод начисленной амортизации.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (начисл. амортизация)";
					Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияНУ;
					Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ФормированиеПроводокНал

Процедура ФормированиеПроводокПоРазницам( ТабОС, СтруктураШапкиДокумента)
	
	ПараметрыУчетнойПолитикиРегл = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
	Если НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) 
		ИЛИ НЕ ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18 Тогда
		
		Возврат;
	КонецЕсли; 
	
	Операция = Движения.Налоговый;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		   ТекущаяСтоимостьПР = СтрокаОС.ТекущаяСтоимостьПР;
		   ТекущаяСтоимостьВР = СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.ТекущаяСтоимостьНУ - СтрокаОС.ТекущаяСтоимостьПР;
		   
            Если ТекущаяСтоимостьПР <> 0 Тогда

				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ПР)";
				Проводка.Сумма       = ТекущаяСтоимостьПР;
				Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
			КонецЕсли;
			
            Если ТекущаяСтоимостьВР <> 0 Тогда

				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ВР)";
				Проводка.Сумма       = ТекущаяСтоимостьВР;
				Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
			КонецЕсли;
			
		   НакопленнаяАмортизацияПР = СтрокаОС.НакопленнаяАмортизацияПР;
		   НакопленнаяАмортизацияВР = СтрокаОС.НакопленнаяАмортизацияБУ - СтрокаОС.НакопленнаяАмортизацияНУ - СтрокаОС.НакопленнаяАмортизацияПР;
			
            Если НакопленнаяАмортизацияПР <> 0 Тогда
				
				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ПР по начисл. амортизация)";
				Проводка.Сумма       = НакопленнаяАмортизацияПР;
				Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
			КонецЕсли;
			
            Если НакопленнаяАмортизацияВР <> 0 Тогда
				
				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ВР по начисл. амортизация)";
				Проводка.Сумма       = НакопленнаяАмортизацияВР;
				Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
			КонецЕсли;
			
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокПоРазницам

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	// Движение по регистрам общим для упр. и регл. учета
	ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок);
	
	// Движение по упр. регистрам
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСоставОС      ( ТабОС, СтруктураШапкиДокумента);
		
		ДвижениеПоРегиструАмортизацияУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструОССписанныеНаЗатратыУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструМестонахождениеОСУпр       ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструГрафикиАмортизацииОСУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииУпр   ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСобытияОСУпр               ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Движение по регл. регистрам
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	 
		ДвижениеПоРегиструСобытияОСБух   (ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСБух (ТабОС, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ДвижениеПоРегиструАмортизацияБух             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструОССписанныеНаЗатратыБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструМестонахождениеОСБух       ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструГрафикиАмортизацииОСБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииБух   ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСчетаУчетаОСБух            ( ТабОС, СтруктураШапкиДокумента);
		
		ФормированиеПроводокБух(ТабОС, СтруктураШапкиДокумента);
		
	КонецЕсли;
			
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		ДвижениеПоРегиструАмортизацияНал              ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСНал ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииНал    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииНал     ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовНал ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСчетаУчетаОСНал             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпецКоэффициентНал          ( ТабОС, СтруктураШапкиДокумента);
			
		ФормированиеПроводокНал(ТабОС, СтруктураШапкиДокумента);
		ФормированиеПроводокПоРазницам(ТабОС, СтруктураШапкиДокумента);
			
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ДвижениеПоРегиструПервоначальныеСведенияОСУСН( ТабОС, СтруктураШапкиДокумента);
			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	//АБС ВСТАВКА 37963  14.03.2014 11:40:44  Шамов
	Если Дата = КонецМесяца(Дата) Тогда
		Дата = Дата-1;
	ИначеЕсли Дата = НачалоМесяца(Дата) Тогда
		Дата = Дата+1;
	КонецЕсли;
	//АБС ВСТАВКА 37963 КОНЕЦ
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	//12.12.2017 Крамаренко Д.М.
	//T#7769333 — Необходимо завести статусы в документы
	Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроведениеДокументовПоОС) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Только сотрудник с ролью ""Ответственный за документы по ОС"" может проводить документ!",Отказ);
		Возврат;
	КонецЕсли;	
	//12.12.2017 Крамаренко Д.М.
	//T#7769333 — Необходимо завести статусы в документы

	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТабОС = ОС.Выгрузить();
	
	// Проверим правильность заполнения документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаОС.ОсновноеСредство, СтруктураШапкиДокумента.Дата, Отказ);
		УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаОС.ОсновноеСредство, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		// АБС ВСТАВКА
		ПолучитьДанныеПоОС();
		ДвиженияПоРегистрам_СписаниеОС(СтруктураШапкиДокумента);
		//\\ АБС ВСТАВКА
		ДвиженияПоРегистрам(ТабОС, СтруктураШапкиДокумента, Заголовок);
		// Гущина 2017.02.07  T#7763513 +++
		абс_ВнеоборотныеАктивыВызовСервера.ЗаполнитьОбособленноеПодразделениеОС(СтруктураШапкиДокумента);
		// Гущина 2017.02.07  T#7763513 ---
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мТабличноеПоле = Неопределено;

//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы
мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"));
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы