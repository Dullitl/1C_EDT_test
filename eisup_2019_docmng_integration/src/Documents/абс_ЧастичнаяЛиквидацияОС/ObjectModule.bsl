// {{ Киселева И.С. 31.07.18 #77387732
Перем мДатаНовогоПорядкаОтраженияЧастичнойЛиквидации;
// }}
Перем мУдалятьДвижения;
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы
Перем мРолиПользователя Экспорт;
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСкопирован Экспорт; // хранит признак копирования документа

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем ТабЗатрат;
Перем ПроводкиНУ;

// АБС ВСТАВКА
// в таблице абс_мТаблицаПараметровАмортизацииНУ соберем по каждому ОС суммы ПР для записи
// в регистр ПараметрыАмортизацииОСНалоговыйУчет
Перем абс_мТаблицаПараметровАмортизацииНУ;
//\\ АБС ВСТАВКА

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция возращает параметры ОС
//
Функция ПолучитьПробегАвто( ОбъектОС,  НачДата, КонДата, ПечатьПоДаннымУпрУчета = Истина)
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыработкаОС.ОсновноеСредство КАК ОбъектОС,
	|	ВыработкаОС.ПараметрВыработки,
	|	ВыработкаОС.КоличествоОборот КАК Пробег
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&КонДата, ОсновноеСредство = &ОС) КАК РегСведенияОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачГраница, &КонГраница, , ОсновноеСредство = &ОС) КАК ВыработкаОС
	|		ПО РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки";
	
	Если НЕ ПечатьПоДаннымУпрУчета тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПервоначальныеСведенияОС","ПервоначальныеСведенияОСБухгалтерскийУчет");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("ОС", ОбъектОС);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.Пробег;
	
КонецФункции // ПолучитьПробегАвто()

// Функция формирует табличный документ с печатной формой ОС4
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеОС(ПечатьПоДаннымУпрУчета = Истина)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЧастичнаяЛиквидацияОС.Номер КАК НомерДок,
	               |	ЧастичнаяЛиквидацияОС.Дата КАК ДатаДок,
	               |	ЧастичнаяЛиквидацияОС.Событие КАК Событие,
	               |	ЧастичнаяЛиквидацияОС.ПричинаСписания КАК ПричинаСписания,
	               |	ЧастичнаяЛиквидацияОС.Организация КАК Организация,
	               |	ЧастичнаяЛиквидацияОС.Организация.КодПоОКПО КАК КодПоОКПО,
	               |	ЧастичнаяЛиквидацияОС.Организация.НаименованиеПолное КАК НаимОрганизация
	               |ИЗ
	               |	Документ.абс_ЧастичнаяЛиквидацияОС КАК ЧастичнаяЛиквидацияОС
	               |ГДЕ
	               |	ЧастичнаяЛиквидацияОС.Ссылка = &Ссылка";
	СтруктураДока = Запрос.Выполнить().Выбрать();
	СтруктураДока.Следующий();
	
	СведенияОРуководителеГлавбухе = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОРуководителеГлавБухе(СтруктураДока.Организация,СтруктураДока.ДатаДок);
	
	// определимся с переменными, зависящими от типа учета
	НазваниеРегистраПервоначальныхСведений = "ПервоначальныеСведенияОС";
	НазваниеРегистраМестонахождения = "МестонахождениеОС";
	
	Запрос = Новый Запрос();
	
	Если ПечатьПоДаннымУпрУчета тогда
		кВидуУчета			= "управленческому";
		cВидаУчета 	 	  	= "управленческого";
		НазваниеАмортизации = "Амортизация";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяц";
		НазваниеСтоимости		   = "Стоимость";	
		ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета");
		СоединениеПоСчетам = "";
		СтрокиСчетов	   = "";
	Иначе
		кВидуУчета 		 	= "бухгалтерскому";
		cВидаУчета 		 	= "бухгалтерского";
		ВалютаПечати 	 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
		НазваниеАмортизации = "АмортизацияБУ";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяцБУ";
		НазваниеСтоимости		   = "СтоимостьБУ";	
		НазваниеРегистраПервоначальныхСведений = НазваниеРегистраПервоначальныхСведений+"БухгалтерскийУчет";
		НазваниеРегистраМестонахождения        = НазваниеРегистраМестонахождения+"БухгалтерскийУчет";
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
							  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,
							 |Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
							 |		ПО СписаниеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
		Запрос.УстановитьПараметр("Организация",СтруктураДока.Организация);
		Запрос.УстановитьПараметр("Дата",СтруктураДока.ДатаДок);

	КонецЕсли;	

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеОСОС.НомерСтроки                                 КАК НП,
	|	СписаниеОСОС.ОсновноеСредство                            КАК ОС,
	|	СписаниеОСОС.ОсновноеСредство.Код                        КАК ИнвНомерУпр,
	|	СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер             КАК ЗаводскойНомер,
	|	СписаниеОСОС.ОсновноеСредство.Автотранспорт              КАК Автотранспорт,
	|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска                КАК ГодВыпуска,
	|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное         КАК НаименованиеОС,
	|	СписаниеОСОС.ОсновноеСредство.ГруппаОС                   КАК Группа,
	|	ЕСТЬNULL(СписаниеОСОС."+НазваниеАмортизации+", 0)        КАК НачАмортизация,
	|	ЕСТЬNULL(СписаниеОСОС."+НазваниеСтоимости+", 0)          КАК Стоимость,
	|	ЕСТЬNULL(СписаниеОСОС."+НазваниеАмортизацииЗаМесяц+", 0) КАК АмортизацияЗаМесяц,
	|	ЕСТЬNULL(СписаниеОСОС.СписаноНаЗатраты, ЛОЖЬ)            КАК СписаноНаЗатраты,
	|	"+СтрокиСчетов+"
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПервоначальнаяСтоимость, 0) КАК НачСтоимость,
	|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ,
	|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение КАК НаимПодразделение,
	|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ.Код КАК ТабНомерМОЛ
	|ИЗ
	|	Документ.абс_ЧастичнаяЛиквидацияОС.ОС КАК СписаниеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПервоначальныхСведений+".СрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахождения+".СрезПоследних КАК МестонахождениеОсновныхСредствСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
	|		"+СоединениеПоСчетам+"
	|ГДЕ
	|	СписаниеОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеОСОС.НомерСтроки";
	РезультатЗапросаПоОС = Запрос.Выполнить();
	
	Если РезультатЗапросаПоОС.Пустой() тогда
		// скорее всего в табличной части документа нет ни строчки
		// или нет записей в регистре
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаОС = РезультатЗапросаПоОС.Выбрать();

	Если ВыборкаОС.Количество() = 1 Тогда

		ВыборкаОС.Следующий();

		Если ВыборкаОС.Автотранспорт Тогда 
			Макет = ПолучитьМакет("ОС4а");
		Иначе
			Макет = ПолучитьМакет("ОС4");
		КонецЕсли;

		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заполнить(СтруктураДока);
		Область.Параметры.Заполнить(ВыборкаОС);
		Область.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
		Область.Параметры.Валюта 	 = ВалютаПечати;
		Область.Параметры.кВидуУчета = кВидуУчета;
		Область.Параметры.cВидаУчета = cВидаУчета;

		ДокументПринятияКУчету     = "";
		ДокументВводаВЭксплуатацию = "";
		ПринятоКУчету              = "";
		ВведеноВЭксплуатацию       = "";

		// получим состояния ос 
		СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,
														ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
		ДокументВводаВЭксплуатацию = СтруктПараметров["ИмяДок"];
		ВведеноВЭксплуатацию	   = СтруктПараметров["Дата"];

		СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ПринятоКУчету,
														ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
		ДокументПринятияКУчету  = СтруктПараметров["ИмяДок"];
		ПринятоКУчету		  	= СтруктПараметров["Дата"];
		
		Если ВыборкаОС.Автотранспорт Тогда
			Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
			Если ДокументВводаВЭксплуатацию = Неопределено или ВведеноВЭксплуатацию = Неопределено Тогда
				Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, Дата, Дата, ПечатьПоДаннымУпрУчета);
			Иначе
				Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, ВведеноВЭксплуатацию, Дата, ПечатьПоДаннымУпрУчета);
			КонецЕсли;
		Иначе
			Область.Параметры.СрокЭкспл  = ?(ЗначениеЗаполнено(ВведеноВЭксплуатацию),
  			                                 УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, Дата),
								             0); 
		КонецЕсли;

		СтоимостьОС   = ?(ВыборкаОС.СписаноНаЗатраты, ВыборкаОС.НачСтоимость, ВыборкаОС.Стоимость);
		АмортизацияОС = ?(ВыборкаОС.СписаноНаЗатраты, 0, ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
		
		Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
		Область.Параметры.НачСтоимость   = СтоимостьОС;
		Область.Параметры.НачАмортизация = АмортизацияОС;
		Область.Параметры.ОстСтоимость   = ?(ВыборкаОС.СписаноНаЗатраты, 0, СтоимостьОС - АмортизацияОС);
		
		Если ПечатьПоДаннымУпрУчета тогда
			Область.Параметры.ИнвНомер = ВыборкаОС.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(СтруктураДока.ДатаДок,
											Новый Структура("ОсновноеСредство",ВыборкаОС.ОС));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			Область.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаОС.НаименованиеОС) Тогда
			Область.Параметры.НаименованиеОС = СокрЛП(ВыборкаОС.ОС);
		КонецЕсли; 

		ТабДокумент.Вывести(Область);

	Иначе

		Макет  = ПолучитьМакет("ОС4б");

		Шапка = Макет.ПолучитьОбласть("Шапка0");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
		Шапка.Параметры.cВидаУчета = cВидаУчета;
		ТабДокумент.Вывести(Шапка);

		Шапка = Макет.ПолучитьОбласть("Шапка1");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Валюта = ВалютаПечати;

		ТабДокумент.Вывести(Шапка);

		Строка1 = Макет.ПолучитьОбласть("Строка1");

		Пока ВыборкаОС.Следующий() Цикл

			Строка1.Параметры.Заполнить(ВыборкаОС);
			Строка1.Параметры.Заполнить(СтруктураДока);
			
			СтоимостьОС   = ?(ВыборкаОС.СписаноНаЗатраты, ВыборкаОС.НачСтоимость, ВыборкаОС.Стоимость);
			АмортизацияОС = ?(ВыборкаОС.СписаноНаЗатраты, 0, ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
			
			Строка1.Параметры.НачСтоимость   = СтоимостьОС;
			Строка1.Параметры.НачАмортизация = АмортизацияОС;
			Строка1.Параметры.ОстСтоимость   = ?(ВыборкаОС.СписаноНаЗатраты, 0, СтоимостьОС - АмортизацияОС);

			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";

			// получим состояния ос 
			СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,
			ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
			ДокументВводаВЭксплуатацию = СтруктПараметров["ИмяДок"];
			ВведеноВЭксплуатацию	   = СтруктПараметров["Дата"];
			
			СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ПринятоКУчету,
			ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
			ДокументПринятияКУчету  = СтруктПараметров["ИмяДок"];
			ПринятоКУчету		  	= СтруктПараметров["Дата"];

			Строка1.Параметры.СрокЭкспл  = ?(ЗначениеЗаполнено(ВведеноВЭксплуатацию),
  			                                 УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, Дата),
								             0); 
			
			Если ПечатьПоДаннымУпрУчета тогда
				Строка1.Параметры.ИнвНомер = ВыборкаОС.ИнвНомерУпр;
			Иначе
				ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(СтруктураДока.ДатаДок,
															Новый Структура("ОсновноеСредство",ВыборкаОС.ОС));
				ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
				Строка1.Параметры.ИнвНомер = ИнвНомерБух;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаОС.НаименованиеОС) Тогда
				Строка1.Параметры.НаименованиеОС = СокрЛП(ВыборкаОС.ОС);
			КонецЕсли; 
			
			Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;

			ТабДокумент.Вывести(Строка1);

		КонецЦикла;

		Шапка = Макет.ПолучитьОбласть("Шапка2");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Валюта = ВалютаПечати;
		Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
		ТабДокумент.Вывести(Шапка);

	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу = 0;

	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
		//T#7769333 — Необходимо завести статусы в документы	
		//ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС4упр" тогда
		ТабДокумент = ПечатьСписаниеОС();
	ИначеЕсли ИмяМакета = "ОС4бух" тогда
		ТабДокумент = ПечатьСписаниеОС(Ложь);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	СтруктураМакетов.Вставить("ОС4упр","Форма ОС-4 (упр. учет)");
	СтруктураМакетов.Вставить("ОС4бух","Форма ОС-4 (бух. учет)");

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	// АБС ИЗМЕНЕНИЕ
	//мСтрокаРеквизитыУпрУчета = "Событие,ОС.Стоимость, ОС.Амортизация, ОС.АмортизацияЗаМесяц, ОС.ОстСтоимость, ОС.СписаноНаЗатраты";
	мСтрокаРеквизитыУпрУчета = "Событие,ОС.Стоимость, ОС.Амортизация, ОС.АмортизацияЗаМесяц, ОС.ОстСтоимость, ОС.СписаноНаЗатраты, ОС.абс_СтоимостьУУ, ОС.абс_Амортизация, ОС.абс_АмортизацияЗаМесяц";
	//\\ АБС ИЗМЕНЕНИЕ

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	// АБС ИЗМЕНЕНИЕ
	//мСтрокаРеквизитыБухУчета = "СобытиеРегл,СчетСписанияБУ, СубконтоБУ, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ, ОС.СписаноНаЗатратыБУ";
	//мСтрокаРеквизитыНалУчета = "СчетСписанияНУ, СубконтоНУ, ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ, ОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ";
	мСтрокаРеквизитыБухУчета = "СобытиеРегл,СчетСписанияБУ, СубконтоБУ, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ, ОС.СписаноНаЗатратыБУ, ОС.абс_СтоимостьБУ, ОС.абс_АмортизацияБУ, ОС.абс_АмортизацияЗаМесяцБУ";
	мСтрокаРеквизитыНалУчета = "СчетСписанияНУ, СубконтоНУ, ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ, ОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ, ОС.абс_СтоимостьНУ, ОС.абс_АмортизацияНУ, ОС.абс_АмортизацияЗаМесяцНУ, ОС.абс_СуммаКапитальныхВложенийВключаемыхВРасходыНУ";
	//\\ АБС ИЗМЕНЕНИЕ

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Событие";
	
КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетСписанияБУ,СчетСписанияНУ,СобытиеРегл";

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Списание,
								  ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Списание,
								  ПредставлениеРеквизита,Отказ);


КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Событие";
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, Истина);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Стоимость";

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность снятия ОС с учета
		Для каждого СтрокаОС из ОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	АмортизацияОС              = Движения.СтоимостьОС;
	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));

	Для каждого СтрокаОС из ТаблицаПоОС Цикл

		Если СтрокаОС.АмортизацияЗаМесяц > 0 Тогда

			ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");

			НоваяСтрока    = ТабАмортизации.Добавить();

			// АБС ИЗМЕНЕНИЕ
			//НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяц;
			НоваяСтрока.Сумма                  = СтрокаОС.абс_АмортизацияЗаМесяц;
			//\\ АБС ИЗМЕНЕНИЕ
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_УУ);

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();

			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			// АБС ИЗМЕНЕНИЕ
			//Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяц;
			Движение.Амортизация      = СтрокаОС.абс_АмортизацияЗаМесяц;
			//\\ АБС ИЗМЕНЕНИЕ
			Движение.Стоимость        = 0;

		КонецЕсли;

	КонецЦикла;

	// вызов процедуры списания амортизации по направлениям
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();

	// АБС ИЗМЕНЕНИЕ
	//СостояниеОС           = Движения.СостоянияОС;
	//\\ АБС ИЗМЕНЕНИЕ
	СобытиеОС             = Движения.СобытияОС;
	АмортизацияОС         = Движения.СтоимостьОС;
	ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатраты;
	// АБС ИЗМЕНЕНИЕ
	//НачислениеАмортизации = Движения.НачислениеАмортизацииОС;
	//\\ АБС ИЗМЕНЕНИЕ

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();
	
	ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// АБС ИЗМЕНЕНИЕ
		// Данным документом производится частичная ликвидация ОС, соответственно,
		// начисление амортизации продолжается. Поэтому движений по регистру НачислениеАмортизацииОС не делаем.
		
		//// Движения по регистру НачислениеАмортизации
		//Движение = НачислениеАмортизации.Добавить();

		//Движение.Период               = ДатаДока;
		//Движение.ОсновноеСредство     = ТекОС;
		//Движение.НачислятьАмортизацию = Ложь;
		//Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;
		//\\ АБС ИЗМЕНЕНИЕ

		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = Метаданные().Представление();
		Движение.НомерДокумента    = Номер;

		// АБС ИЗМЕНЕНИЕ
		// начисление амортизации продолжается, поэтому в регистре СостоянияОС не фиксируем снятие с учета.
		
		//// Движения по регистру СостоянияОС
		//Движение = СостояниеОС.Добавить();
		//Движение.Период               = ДатаДока;
		//Движение.ОсновноеСредство     = ТекОС;
		//Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
		//Движение.ДатаСостояния		  = ДатаДока;
		//\\ АБС ИЗМЕНЕНИЕ

		Если НЕ СтрокаТЧ.СписаноНаЗатраты Тогда

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();

			Движение.ОсновноеСредство = ТекОС;
			Движение.Амортизация      = СтрокаТЧ.Амортизация+СтрокаТЧ.АмортизацияЗаМесяц;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;

		Иначе
			// Движения по регистру ОССписанныеНаЗатраты
			Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();

			Движение.ОсновноеСредство = ТекОС;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;

		КонецЕсли;

	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();

	ОССписанныеНаЗатраты.мПериод   = ДатаДока;
	ОССписанныеНаЗатраты.мТаблицаДвижений = ТаблицаДвиженийОССписанныеНаЗатраты;
	Движения.ОССписанныеНаЗатраты.ВыполнитьРасход();
	
	// АБС ВСТАВКА
	// изменим стоимость и срок для вычисления амортизации по УУ
	
	ТаблицаСроковФактическогоИспользования = абс_ОпределитьСрокиФактическогоИспользования(Истина);
	
	ПараметрыАмортизации = Движения.ПараметрыАмортизацииОС;
	СтруктураОтбора = Новый Структура("ОсновноеСредство");
	Для Каждого ТекСтрока Из ТаблицаПоОС Цикл
		СтруктураОтбора.ОсновноеСредство = ТекСтрока.ОсновноеСредство;
		СрезПараметров = РегистрыСведений.ПараметрыАмортизацииОС.СрезПоследних(ДатаДока, СтруктураОтбора);
		Если СрезПараметров.Количество() > 0 Тогда
			Движение = ПараметрыАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СрезПараметров[0]);
			Движение.Период = ДатаДока;
			Движение.СтоимостьДляВычисленияАмортизации = Движение.СтоимостьДляВычисленияАмортизации - ТекСтрока.Стоимость + ТекСтрока.Амортизация + ТекСтрока.АмортизацияЗаМесяц - ТекСтрока.абс_Амортизация - ТекСтрока.абс_АмортизацияЗаМесяц;
			СтрокаСрокаФактИспользования = ТаблицаСроковФактическогоИспользования.Найти(ТекСтрока.ОсновноеСредство, "ОсновноеСредство");
			Если СтрокаСрокаФактИспользования <> Неопределено Тогда
				Движение.СрокИспользованияДляВычисленияАмортизации = Движение.СрокПолезногоИспользования - СтрокаСрокаФактИспользования.ФактСрок;
			КонецЕсли;
			Движение.ПрименитьВТекущемМесяце = Ложь;
		КонецЕсли;
	КонецЦикла;
	//\\ АБС ВСТАВКА

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",         ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                              КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                     КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство              КАК ОС_НУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации     КАК СчетНачисленияАмортизацииНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|";
	ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат

		АмортизацияОС  = Движения.СтоимостьОСБухгалтерскийУчет;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();

		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));

		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл

			// АБС ИЗМЕНЕНИЕ
			//Если НЕ (СтрокаОС.АмортизацияЗаМесяцБУ = 0) Тогда
			Если НЕ (СтрокаОС.абс_АмортизацияЗаМесяцБУ = 0) Тогда
				//\\ АБС ИЗМЕНЕНИЕ
				НоваяСтрока = ТабАмортизации.Добавить();

				// АБС ИЗМЕНЕНИЕ
				//НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
				НоваяСтрока.Сумма       = СтрокаОС.абс_АмортизацияЗаМесяцБУ;
				//\\ АБС ИЗМЕНЕНИЕ
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);

				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				Если СтрокаТЗ <> Неопределено Тогда
					
					НоваяСтрока.СчетАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
					
				Иначе
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
					                    " не отражалось в бух. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
					
				КонецЕсли;

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();

				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				// АБС ИЗМЕНЕНИЕ
				//Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
				Движение.Амортизация      = СтрокаОС.абс_АмортизацияЗаМесяцБУ;
				//\\ АБС ИЗМЕНЕНИЕ
				Движение.Стоимость        = 0;

			КонецЕсли;

		КонецЦикла;

		//вызов процедуры списания амортизации по направлениям
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
        ТабАмортизацииБУ = ТабАмортизации;
		
		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

		СобытиеОС             = Движения.СобытияОСОрганизаций;
		// АБС ИЗМЕНЕНИЕ
		//СостояниеОС			  = Движения.СостоянияОСОрганизаций;	
		//\\ АБС ИЗМЕНЕНИЕ
		АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
		ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатратыОрганизаций;
		// АБС ИЗМЕНЕНИЕ
		//НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		//\\ АБС ИЗМЕНЕНИЕ
		ПроводкиБУ            = Движения.Хозрасчетный;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();

		ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();

		Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;

			// АБС ИЗМЕНЕНИЕ
			// Начисление амортизации продолжается, поэтому движений по регистру
			// НачислениеАмортизацииОСБухгалтерскийУчет не делаем.
			
			//// Движения по регистру НачислениеАмортизации
			//Движение = НачислениеАмортизации.Добавить();
			//Движение.Период               = ДатаДока;
			//Движение.ОсновноеСредство     = ТекОС;
			//Движение.Организация          = ТекОрганизация;
			//Движение.НачислятьАмортизацию = Ложь;
			//\\ АБС ИЗМЕНЕНИЕ

			// Движения по регистру СобытияОС
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	  = Метаданные().Представление();
			Движение.НомерДокумента		  = Номер;
			
			// АБС ИЗМЕНЕНИЕ
			// Продолжается начисление амортизации, поэтому не фиксируем снятие с учета в регистре
			// СостояниеОСОрганизаций.
			
			//// Движения по регистру СостоянияОС
			//Движение = СостояниеОС.Добавить();
			//Движение.Период               = ДатаДока;
			//Движение.ОсновноеСредство     = ТекОС;
			//Движение.Организация          = ТекОрганизация;
			//Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
			//Движение.ДатаСостояния		  = ДатаДока;
			//\\ АБС ИЗМЕНЕНИЕ
			
			Если НЕ СтрокаТЧ.СписаноНаЗатратыБУ И НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;

				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
				
				Если СтрокаТЗ <> Неопределено Тогда
					
					СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаБУ;
					СчетУчетаАмортизации= СтрокаТЗ.СчетНачисленияАмортизацииБУ;
					
				Иначе
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + ТекОс.Наименование +
					                    " не отражалось в бух. учете в организации " + ТекОрганизация,Отказ); 	
					Возврат;
					
				КонецЕсли;

				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					// АБС ИЗМЕНЕНИЕ
					//Проводка.Содержание   = "Списание ОС";
					Проводка.Содержание   = "Частичная ликвидация ОС";
					//\\ АБС ИЗМЕНЕНИЕ
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Сумма        = СтрокаТЧ.СтоимостьБУ;
					// АБС ИЗМЕНЕНИЕ
					//Проводка.Содержание   = "Списание ОС";
					Проводка.Содержание   = "Частичная ликвидация ОС";
					//\\ АБС ИЗМЕНЕНИЕ
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					// АБС ИЗМЕНЕНИЕ
					//Проводка.Содержание   = "Списание ОС";
					Проводка.Содержание   = "Частичная ликвидация ОС";
					//\\ АБС ИЗМЕНЕНИЕ
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
					КонецЕсли;

					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

			Иначе

				// Движения по регистру ОССписанныеНаЗатраты
				Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();

				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;

			КонецЕсли;

		КонецЦикла;

		АмортизацияОС.мПериод                    = ДатаДока;
		АмортизацияОС.мТаблицаДвижений           = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();

		ОССписанныеНаЗатраты.мПериод             = ДатаДока;
		ОССписанныеНаЗатраты.мТаблицаДвижений    = ТаблицаДвиженийОССписанныеНаЗатраты;
		Движения.ОССписанныеНаЗатратыОрганизаций.ВыполнитьРасход();

		ПроводкиБУ.Записать(Ложь);
			
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

		ПроводкиНУ = Движения.Налоговый;
	
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат

		АмортизацияОСНУ = Движения.СтоимостьОСНалоговыйУчет;

		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();
		
		ТаблицаДвиженийСтоимостьНУ = ТаблицаДвиженийАмортизацияНУ.Скопировать();

		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));

		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
//АБС заявка 2675
//			 Если СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
//			   И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
//				 И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
//						  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
//						  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
//						И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
//						   ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
//				   ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
//				   Продолжить;
//			КонецЕсли;
//АБС заявка 2675			

			// АБС ИЗМЕНЕНИЕ
			//Если НЕ (СтрокаОС.АмортизацияЗаМесяцНУ = 0) Тогда
			Если НЕ (СтрокаОС.абс_АмортизацияЗаМесяцНУ = 0) Тогда
				//\\ АБС ИЗМЕНЕНИЕ

				НоваяСтрока = ТабАмортизации.Добавить();

				// АБС ИЗМЕНЕНИЕ
				//НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцНУ;
				НоваяСтрока.Сумма       = СтрокаОС.абс_АмортизацияЗаМесяцНУ;
				//\\ АБС ИЗМЕНЕНИЕ
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";

				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_НУ);

				СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда
					НоваяСтрока.СчетАмортизацииНУ = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
					НоваяСтрока.СчетУчетаНУ       = СтрокаТЗ.СчетУчетаНУ;
				Иначе
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
					                    " не отражалось в налог. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
				КонецЕсли;

				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				// АБС ИЗМЕНЕНИЕ
				//Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцНУ;
				Движение.Амортизация      = СтрокаОС.абс_АмортизацияЗаМесяцНУ;
				//\\ АБС ИЗМЕНЕНИЕ
				Движение.Стоимость        = 0;
				
				// АБС ИЗМЕНЕНИЕ
				//НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.абс_СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				//\\ АБС ИЗМЕНЕНИЕ

			КонецЕсли;
			
		КонецЦикла;
		
		// Включение амортизационной премии в состав расходов.
		ТабКапитальныхВложений = ТабАмортизации.Скопировать();
		ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Добавить("СуммаПР",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабКапитальныхВложений.Колонки.Удалить("Сумма");
		
		// Формирование списка основных средств, по которым отражается амортизационная премия
		СписокОС = Новый Массив;
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			//АБС заявка 2675
			 //Если НЕ (СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			 //  И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			 //	И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			 //			 ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			 //			 ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			 //		   И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			 //			  ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			 //	  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа))) Тогда
			 //	  
				СписокОС.Добавить(СтрокаОС.ОсновноеСредство);
				
			//КонецЕсли;
		//АБС заявка 2675
		КонецЦикла;
		
		Если СписокОС.Количество() > 0 Тогда
			НалоговыйУчет.РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, ПроводкиНУ, ТаблицаДвиженийСтоимостьНУ, Отказ, Заголовок);			
		КонецЕсли;
		
		//вызов процедуры списания амортизации по направлениям
		Если  СписокОС.Количество() > 0 
		   И  СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "ОС", СписокОС, ТабАмортизации, ТабЗатрат, ТабАмортизацииБУ);
		КонецЕсли;
		
		// {{ Киселева И.С. 31.07.18 #77387732
		Если СписокОС.Количество() > 0 Тогда	
			Если Дата >= мДатаНовогоПорядкаОтраженияЧастичнойЛиквидации Тогда
				//новый порядок отражения амортизации при частичной ликвидации с 01.07.18
				КопияТабАмортизации = ТабАмортизации.Скопировать();
				КопияТабАмортизации.ЗаполнитьЗначения(0, "СуммаБУ");
				ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, КопияТабАмортизации, СтруктураШапкиДокумента, "Нал", "ОС");
				ПроводкиНУ.Записать(Ложь);
				
				КолонкаСумма = ТабАмортизации.ВыгрузитьКолонку("СуммаБУ");
				КопияТабАмортизации = ТабАмортизации.Скопировать();
				КопияТабАмортизации.ЗагрузитьКолонку(КолонкаСумма, "Сумма");
		        ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, КопияТабАмортизации, СтруктураШапкиДокумента, "Нал", "ОС");
				Если ПроводкиНУ.Количество() <> 0 Тогда
					Проводка = ПроводкиНУ.Получить(ПроводкиНУ.Количество()-1);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					ПроводкиНУ.Записать(Ложь)
				КонецЕсли;	
			Иначе	
				//старый порядок до 01.07.18
				ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Нал", "ОС");
				ПроводкиНУ.Записать(Ложь);
			КонецЕсли;
		КонецЕсли;
		// }} Киселева И.С. 31.07.18 #77387732

		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
		
		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();

		АмортизацияОСНУ          = Движения.СтоимостьОСНалоговыйУчет;
		// АБС ИЗМЕНЕНИЕ
		//НачислениеАмортизацииНУ  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		//\\ АБС ИЗМЕНЕНИЕ

		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();

		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
            //АБС заявка 2675
			// Если СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			//   И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			//	 И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			//			  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			//			  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			//			И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			//			   ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			//	   ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
			//	   Продолжить;
			//КонецЕсли;
			//АБС заявка 2675
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			// {{ Киселева И.С. 31.07.18 #77387732
			Если Дата < мДатаНовогоПорядкаОтраженияЧастичнойЛиквидации Тогда
				Если НЕ (СтрокаТЧ.СтоимостьНУ = 0) Тогда  
				//старый алгоритм проводок	
				// АБС ИЗМЕНЕНИЕ
				// Частичная ликвидация, поэтому начисление амортизации продолжается, движения по регистру
				// НачислениеАмортизацииОСНалоговыйУчет не формируем.
				
				//// Движения по регистру НачислениеАмортизации
				//Движение = НачислениеАмортизацииНУ.Добавить();
				//Движение.Организация          = ТекОрганизация;
				//Движение.Период               = ДатаДока;
				//Движение.ОсновноеСредство     = ТекОС;
				//Движение.НачислятьАмортизацию = Ложь;
				//\\ АБС ИЗМЕНЕНИЕ

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				Движение.Стоимость        = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;

				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда

					СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
					СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;

				КонецЕсли;

				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					// АБС ИЗМЕНЕНИЕ
					//Проводка.Содержание  = "Списание ОС";
					Проводка.Содержание  = "Частичная ликвидация ОС";
					//\\ АБС ИЗМЕНЕНИЕ
					Проводка.Сумма       = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					// АБС ИЗМЕНЕНИЕ
					//Проводка.Содержание  = "Списание ОС";
					Проводка.Содержание  = "Частичная ликвидация ОС";
					//\\ АБС ИЗМЕНЕНИЕ
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					// АБС ИЗМЕНЕНИЕ
					//Проводка.Содержание  = "Списание ОС";
					Проводка.Содержание  = "Частичная ликвидация ОС";
					//\\ АБС ИЗМЕНЕНИЕ
					Проводка.Сумма       = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетСписанияНУ;
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
					КонецЕсли;

					Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;
				КонецЕсли; //Если НЕ (СтрокаТЧ.СтоимостьНУ = 0) Тогда 
			// {{ Киселева И.С. 31.07.18 #77387732
			Иначе
				//новый алгоритм проводок
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
				Если СтрокаТЗ <> Неопределено Тогда

					СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
					СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;

				КонецЕсли;
				
				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
				Если НЕ (СуммаПроводки = 0) Тогда
					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Частичная ликвидация ОС";
					Проводка.Сумма       = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = СчетУчетаАмортизации;
					Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
				КонецЕсли;
				
				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание  = "Частичная ликвидация ОС";
					Проводка.Сумма        = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;

					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
				КонецЕсли;

				// списание остаточной стоимости Д 99.01 (91.02) К 01.09
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;

				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Частичная ликвидация ОС";
					Проводка.Сумма       = СуммаПроводки;
					Проводка.НомерЖурнала = "ОС";

					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетСписанияНУ;
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
					КонецЕсли;
					Проводка.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;

					Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					Проводка.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
				КонецЕсли;
			КонецЕсли;
		    // }} Киселева И.С. 31.07.18 #77387732
		КонецЦикла;

		АмортизацияОСНУ.мПериод          = ДатаДока;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
		
		// Рассчитаем разницы в амортизации на месяц списания
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			// Формирование массива основных средств, по которым рассчитываются разницы
			МассивОС = Новый Массив;
			Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
				//АБС заявка 2675
			   //  Если НЕ (СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			   //И (СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			   //  И НЕ (((СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
			   // 		  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
			   // 		  ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа)
			   // 		И (СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Здания
			   // 		   ИЛИ СтрокаТЧ.ОсновноеСредство.ГруппаОС = Перечисления.ГруппыОС.Сооружения))
			   //	ИЛИ СтрокаТЧ.ОсновноеСредство.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа))) Тогда
			   // 	   
					МассивОС.Добавить(СтрокаОС.ОсновноеСредство);
					
				//КонецЕсли;
			//АБС заявка 2675	
			КонецЦикла;
			
			Если МассивОС.Количество() > 0 Тогда
				// АБС ВСТАВКА
				ПроводкиНУ.Записать(Ложь);
				//\\ АБС ВСТАВКА
				// {{ Киселева И.С. 31.07.18 #77387732
				Если Дата < мДатаНовогоПорядкаОтраженияЧастичнойЛиквидации Тогда
					ДвиженияПоРазницам(СтруктураШапкиДокумента, МассивОС, ТаблицаСчетов);
				КонецЕсли;
				// }} Киселева И.С. 31.07.18 #77387732
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ Отказ Тогда
		ПроводкиНУ.Записать(Ложь);
		
		//Начало изменения по заявке № 000033109 (Григорьев Денис)
		Если Организация = Справочники.Организации.НайтиПоКоду("000000008") Тогда //Только для организации "ВОЛГАТРАНСТЕЛЕКОМ"
			ДвиженияНУ = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
			ДвиженияНУ.Отбор.Регистратор.Установить(Ссылка);
			ДвиженияНУ.Прочитать();
			Таб = ДвиженияНУ.Выгрузить();
			Для Каждого СтрОС Из ОС Цикл
				Если Дата < '20160101000000' Тогда
					Стоимость = 40000;
				Иначе
					Стоимость = 100000;
				КонецЕсли;
				Если СтрокаОС.абс_СтоимостьУУ <= Стоимость Тогда
					Для Каждого ПроводкаНУ Из Таб Цикл
						Если ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.НайтиПоКоду("10.12") И ПроводкаНУ.СубконтоДт1 = СтрОС.ОсновноеСредство Тогда							
							ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ОСвОрганизации;
							ПроводкаНУ.ВидСубконтоКт1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;							
							ПроводкаНУ.СубконтоКт1 = СтрокаОС.ОсновноеСредство;
							ПроводкаНУ.ВидСубконтоКт2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
							ПроводкаНУ.СубконтоКт2 = Неопределено;
							ПроводкаНУ.ВидСубконтоКт3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
							ПроводкаНУ.СубконтоКт3 = Неопределено;
						КонецЕсли;			
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ДвиженияНУ.Загрузить(Таб);
			ДвиженияНУ.Записать();
		КонецЕсли;
		//Конец изменения по заявке № 000033109 (Григорьев Денис)
		
	КонецЕсли;
	
	// АБС ВСТАВКА
	// изменим параметры амортизации по БУ
	ТаблицаСроковФактическогоИспользования = абс_ОпределитьСрокиФактическогоИспользования(Ложь);
	
	ПараметрыАмортизацииБУ = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	
	// изменим параметры амортизации по НУ - для  корректного начисления ПР
	ПараметрыАмортизацииНУ = Движения.ПараметрыАмортизацииОСНалоговыйУчет;	
	
	СтруктураОтбора = Новый Структура("ОсновноеСредство, Организация");
	СтруктураОтбора.Организация = Организация;
	Для Каждого ТекСтрока Из ТаблицаПоОС Цикл
		СтруктураОтбора.ОсновноеСредство = ТекСтрока.ОсновноеСредство;
		СрезПараметров = РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(ДатаДока, СтруктураОтбора);
		//АБС ВСТАВКА №42310 НАЧАЛО «21 мая 2014 г.», Пополитов 
		СрезПараметровНУ = РегистрыСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(ДатаДока, СтруктураОтбора);
		//\\АБС ВСТАВКА №42310 КОНЕЦ
		Если СрезПараметров.Количество() > 0 Тогда
			Движение = ПараметрыАмортизацииБУ.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СрезПараметров[0]);
			Движение.Период = ДатаДока;
			//Движение.СтоимостьДляВычисленияАмортизации = Движение.СтоимостьДляВычисленияАмортизации - ТекСтрока.СтоимостьБУ + ТекСтрока.АмортизацияБУ + ТекСтрока.АмортизацияЗаМесяцБУ - ТекСтрока.абс_АмортизацияБУ - ТекСтрока.абс_АмортизацияЗаМесяцБУ;
			//АБС Заявка 3892
			СтрокаСрокаФактИспользования = ТаблицаСроковФактическогоИспользования.Найти(ТекСтрока.ОсновноеСредство, "ОсновноеСредство");
			//АБС ВСТАВКА №42310 НАЧАЛО «21 мая 2014 г.», Пополитов  
			//Движение.СтоимостьДляВычисленияАмортизации = Движение.СтоимостьДляВычисленияАмортизации - ТекСтрока.СтоимостьБУ;
			//Движение.СрокИспользованияДляВычисленияАмортизации = Движение.СрокПолезногоИспользования
			Движение.СтоимостьДляВычисленияАмортизации = ТекСтрока.абс_СтоимостьБУ + ТекСтрока.АмортизацияБУ + ТекСтрока.АмортизацияЗаМесяцБУ - ТекСтрока.СтоимостьБУ - ТекСтрока.абс_АмортизацияБУ - ТекСтрока.абс_АмортизацияЗаМесяцБУ;
			Если СтрокаСрокаФактИспользования <> Неопределено Тогда
				Движение.СрокИспользованияДляВычисленияАмортизации = Движение.СрокПолезногоИспользования - СтрокаСрокаФактИспользования.ФактСрок;
			КонецЕсли;
			
			//Движение НУ
			НУ_СтоимостьДляВычисленияАмортизации = ТекСтрока.абс_СтоимостьНУ - ТекСтрока.СтоимостьНУ;
			НУ_СуммаПР = 0;
			НУ_СтрокаПР = абс_мТаблицаПараметровАмортизацииНУ.Найти(ТекСтрока.ОсновноеСредство, "ОсновноеСредство");
			Если НУ_СтрокаПР <> Неопределено Тогда
				НУ_СуммаПР = НУ_СтрокаПР.СуммаПР;			
			КонецЕсли;			
			Если НУ_СтоимостьДляВычисленияАмортизации = 0 и НУ_СуммаПР = 0 Тогда   			 		
				Продолжить;
			КонецЕсли;    
			// {{ Киселева И.С. 31.07.18 #77387732
			Если Дата <  мДатаНовогоПорядкаОтраженияЧастичнойЛиквидации Тогда
				Движение = ПараметрыАмортизацииНУ.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, СрезПараметровНУ[0]);
				Движение.Период = ДатаДока; 
				Движение.СтоимостьДляВычисленияАмортизации = НУ_СтоимостьДляВычисленияАмортизации;  			
				Движение.ПРДляВычисленияАмортизации = НУ_СуммаПР;
			КонецЕсли;
			// }} Киселева И.С. 31.07.18 #77387732
			//\\АБС ВСТАВКА №42310 КОНЕЦ    
		КонецЕсли;
	КонецЦикла;
	
	//\\ АБС ВСТАВКА
		
КонецПроцедуры

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаПоОС)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;
		
	// Списание разниц счета 01 и 02
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
	               |	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	               |	0 КАК Сумма02ВР,
	               |	0 КАК Сумма01ПР,
	               |	0 КАК Сумма01ВР,
	               |	0 КАК Сумма01
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаПР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокКт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаВР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаПР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаВР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |ИТОГИ
	               |	СУММА(Сумма02ПР),
	               |	СУММА(Сумма02ВР),
	               |	СУММА(Сумма01ПР),
	               |	СУММА(Сумма01ВР),
	               |	СУММА(Сумма01)
	               |ПО
	               |	Субконто1";
				   
	// АБС ВСТАВКА
	
	абс_мТаблицаПараметровАмортизацииНУ.Очистить();
	
	абс_ТекстЗапроса = "ВЫБРАТЬ
	                   |	ТабличнаяЧастьДокумента.ОсновноеСредство,
	                   |	ВЫБОР
	                   |		КОГДА ЕСТЬNULL(ТабличнаяЧастьДокумента.СтоимостьОС, 0) = 0
					   //АБС ИЗМЕНЕНИЕ 34543  07.11.2013 14:47:01  Шамов
					   //|			ТОГДА 0
	                   |			ТОГДА 
	                   |				ВЫБОР	
	                   |					КОГДА ЕСТЬNULL(ТабличнаяЧастьДокумента.СтоимостьОС_БУ, 0) = 0
	                   |						ТОГДА 0
	                   |					ИНАЧЕ ЕСТЬNULL(ТабличнаяЧастьДокумента.СтоимостьСписания_БУ, 0) / ТабличнаяЧастьДокумента.СтоимостьОС_БУ	
	                   |				КОНЕЦ	
					   //АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
	                   |		ИНАЧЕ ЕСТЬNULL(ТабличнаяЧастьДокумента.СтоимостьСписания, 0) / ТабличнаяЧастьДокумента.СтоимостьОС
	                   |	КОНЕЦ КАК КоэффициентСписанияНУ
	                   |ПОМЕСТИТЬ КоэффициентыНУДокумента
	                   |ИЗ
	                   |	(ВЫБРАТЬ
	                   |		абс_ЧастичнаяЛиквидацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
					   //АБС ИЗМЕНЕНИЕ 34543  07.11.2013 14:47:01  Шамов
	                   |		СУММА(абс_ЧастичнаяЛиквидацияОСОС.абс_СтоимостьБУ) КАК СтоимостьОС_БУ,
	                   |		СУММА(абс_ЧастичнаяЛиквидацияОСОС.СтоимостьБУ) КАК СтоимостьСписания_БУ,
					   //АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
	                   |		СУММА(абс_ЧастичнаяЛиквидацияОСОС.абс_СтоимостьНУ) КАК СтоимостьОС,
	                   |		СУММА(абс_ЧастичнаяЛиквидацияОСОС.СтоимостьНУ) КАК СтоимостьСписания
	                   |	ИЗ
	                   |		Документ.абс_ЧастичнаяЛиквидацияОС.ОС КАК абс_ЧастичнаяЛиквидацияОСОС
	                   |	ГДЕ
	                   |		абс_ЧастичнаяЛиквидацияОСОС.Ссылка = &Ссылка
	                   |	
	                   |	СГРУППИРОВАТЬ ПО
	                   |		абс_ЧастичнаяЛиквидацияОСОС.ОсновноеСредство) КАК ТабличнаяЧастьДокумента
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОстатки.Субконто1 КАК ОсновноеСредство,
	                   |	НалоговыйОстатки.СуммаОстатокКт * ЕСТЬNULL(КоэффициентыНУДокумента.КоэффициентСписанияНУ, 0) КАК Сумма02ПР,
	                   |	НалоговыйОстатки.СуммаОстатокКт КАК СуммаЦелая02ПР
	                   |ПОМЕСТИТЬ Суммы02ПР
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.Остатки(
	                   |			&КонДата,
	                   |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	                   |			&ВидСубконто,
	                   |			ВидУчета = &ВидУчетаПР
	                   |				И Организация = &Организация
	                   |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыНУДокумента КАК КоэффициентыНУДокумента
	                   |		ПО НалоговыйОстатки.Субконто1 = КоэффициентыНУДокумента.ОсновноеСредство
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОстатки.Субконто1 КАК ОсновноеСредство,
	                   |	НалоговыйОстатки.СуммаОстатокДт * ЕСТЬNULL(КоэффициентыНУДокумента.КоэффициентСписанияНУ, 0) КАК Сумма01ПР,
	                   |	НалоговыйОстатки.СуммаОстатокДт КАК СуммаЦелая01ПР
	                   |ПОМЕСТИТЬ Суммы01ПР
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.Остатки(
	                   |			&КонДата,
	                   |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	                   |			&ВидСубконто,
	                   |			ВидУчета = &ВидУчетаПР
	                   |				И Организация = &Организация
	                   |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыНУДокумента КАК КоэффициентыНУДокумента
	                   |		ПО НалоговыйОстатки.Субконто1 = КоэффициентыНУДокумента.ОсновноеСредство
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаДт02БУ,
	                   |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ОсновноеСредство
	                   |ПОМЕСТИТЬ СуммыДт02БУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			СчетДт В ИЕРАРХИИ (&ХозрасчетныйАмортизацияОС),
	                   |			&ВидСубконто,
	                   |			,
	                   |			,
	                   |			Организация = &Организация
	                   |				И СубконтоДт1 В (&СписокОС)) КАК ХозрасчетныйОборотыДтКт
	                   |ГДЕ
	                   |	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	ХозрасчетныйОборотыДтКт.СубконтоДт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОборотыДтКт.СубконтоДт1 КАК ОсновноеСредство,
	                   |	СУММА(НалоговыйОборотыДтКт.СуммаОборот) КАК СуммаДт02НУ
	                   |ПОМЕСТИТЬ СуммыДт02НУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			СчетДт В ИЕРАРХИИ (&НалоговыйАмортизацияОС),
	                   |			&ВидСубконто,
	                   |			,
	                   |			,
	                   |			Организация = &Организация
	                   |				И СубконтоДт1 В (&СписокОС)
	                   |				И ВидУчетаДт = &ВидУчетаНУ) КАК НалоговыйОборотыДтКт
	                   |ГДЕ
	                   |	НалоговыйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	НалоговыйОборотыДтКт.СубконтоДт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК ОсновноеСредство,
	                   |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаКт01БУ
	                   |ПОМЕСТИТЬ СуммыКт01БУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			,
	                   |			,
	                   |			СчетКт В ИЕРАРХИИ (&ХозрасчетныйОСВОрганизации)
	                   |				И (НЕ СчетКт В ИЕРАРХИИ (&ХозрасчетныйВыбытиеОС)),
	                   |			&ВидСубконто,
	                   |			Организация = &Организация
	                   |				И СубконтоКт1 В (&СписокОС)) КАК ХозрасчетныйОборотыДтКт
	                   |ГДЕ
	                   |	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	ХозрасчетныйОборотыДтКт.СубконтоКт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	НалоговыйОборотыДтКт.СубконтоКт1 КАК ОсновноеСредство,
	                   |	СУММА(НалоговыйОборотыДтКт.СуммаОборот) КАК СуммаКт01НУ
	                   |ПОМЕСТИТЬ СуммыКт01НУ
	                   |ИЗ
	                   |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	                   |			,
	                   |			&КонДата,
	                   |			Регистратор,
	                   |			,
	                   |			,
	                   |			СчетКт В ИЕРАРХИИ (&НалоговыйОСВОрганизации)
	                   |				И (НЕ СчетКт В ИЕРАРХИИ (&НалоговыйВыбытиеОС)),
	                   |			&ВидСубконто,
	                   |			Организация = &Организация
	                   |				И СубконтоКт1 В (&СписокОС)
	                   |				И ВидУчетаКт = &ВидУчетаНУ) КАК НалоговыйОборотыДтКт
	                   |ГДЕ
	                   |	НалоговыйОборотыДтКт.Регистратор = &Ссылка
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	НалоговыйОборотыДтКт.СубконтоКт1
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	Данные01БУиНУ.ОсновноеСредство КАК Субконто1,
	                   |	Данные01БУиНУ.СуммаКт01НУ КАК СуммаКт01НУ,
	                   |	Данные01БУиНУ.СуммаКт01БУ КАК СуммаКт01БУ,
	                   |	ЕСТЬNULL(Суммы01ПР.Сумма01ПР, 0) КАК Сумма01ПР,
	                   |	Данные01БУиНУ.СуммаКт01БУ - Данные01БУиНУ.СуммаКт01НУ - ЕСТЬNULL(Суммы01ПР.Сумма01ПР, 0) КАК Сумма01ВР,
	                   |	0 КАК СуммаДт02БУ,
	                   |	0 КАК СуммаДт02НУ,
	                   |	0 КАК Сумма02ПР,
	                   |	0 КАК Сумма02ВР,
	                   |	0 КАК СуммаЦелая02ПР,
	                   |	ЕСТЬNULL(Суммы01ПР.СуммаЦелая01ПР, 0) КАК СуммаЦелая01ПР
	                   |ИЗ
	                   |	(ВЫБРАТЬ
	                   |		ЕСТЬNULL(СуммыКт01БУ.ОсновноеСредство, СуммыКт01НУ.ОсновноеСредство) КАК ОсновноеСредство,
	                   |		СУММА(ЕСТЬNULL(СуммыКт01НУ.СуммаКт01НУ, 0)) КАК СуммаКт01НУ,
	                   |		СУММА(ЕСТЬNULL(СуммыКт01БУ.СуммаКт01БУ, 0)) КАК СуммаКт01БУ
	                   |	ИЗ
	                   |		СуммыКт01БУ КАК СуммыКт01БУ
	                   |			ПОЛНОЕ СОЕДИНЕНИЕ СуммыКт01НУ КАК СуммыКт01НУ
	                   |			ПО СуммыКт01БУ.ОсновноеСредство = СуммыКт01НУ.ОсновноеСредство
	                   |	
	                   |	СГРУППИРОВАТЬ ПО
	                   |		ЕСТЬNULL(СуммыКт01БУ.ОсновноеСредство, СуммыКт01НУ.ОсновноеСредство)) КАК Данные01БУиНУ
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ Суммы01ПР КАК Суммы01ПР
	                   |		ПО Данные01БУиНУ.ОсновноеСредство = Суммы01ПР.ОсновноеСредство
	                   |
	                   |ОБЪЕДИНИТЬ ВСЕ
	                   |
	                   |ВЫБРАТЬ
	                   |	Данные02БУиНУ.ОсновноеСредство,
	                   |	0,
	                   |	0,
	                   |	0,
	                   |	0,
	                   |	Данные02БУиНУ.СуммаДт02БУ,
	                   |	Данные02БУиНУ.СуммаДт02НУ,
	                   |	ЕСТЬNULL(Суммы02ПР.Сумма02ПР, 0),
	                   |	Данные02БУиНУ.СуммаДт02БУ - Данные02БУиНУ.СуммаДт02НУ - ЕСТЬNULL(Суммы02ПР.Сумма02ПР, 0),
	                   |	ЕСТЬNULL(Суммы02ПР.СуммаЦелая02ПР, 0),
	                   |	0
	                   |ИЗ
	                   |	(ВЫБРАТЬ
	                   |		ЕСТЬNULL(СуммыДт02БУ.ОсновноеСредство, СуммыДт02НУ.ОсновноеСредство) КАК ОсновноеСредство,
	                   |		СУММА(ЕСТЬNULL(СуммыДт02БУ.СуммаДт02БУ, 0)) КАК СуммаДт02БУ,
	                   |		СУММА(ЕСТЬNULL(СуммыДт02НУ.СуммаДт02НУ, 0)) КАК СуммаДт02НУ
	                   |	ИЗ
	                   |		СуммыДт02БУ КАК СуммыДт02БУ
	                   |			ПОЛНОЕ СОЕДИНЕНИЕ СуммыДт02НУ КАК СуммыДт02НУ
	                   |			ПО СуммыДт02БУ.ОсновноеСредство = СуммыДт02НУ.ОсновноеСредство
	                   |	
	                   |	СГРУППИРОВАТЬ ПО
	                   |		ЕСТЬNULL(СуммыДт02БУ.ОсновноеСредство, СуммыДт02НУ.ОсновноеСредство)) КАК Данные02БУиНУ
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ Суммы02ПР КАК Суммы02ПР
	                   |		ПО Данные02БУиНУ.ОсновноеСредство = Суммы02ПР.ОсновноеСредство
	                   |ИТОГИ
	                   |	СУММА(СуммаКт01НУ),
	                   |	СУММА(СуммаКт01БУ),
	                   |	СУММА(Сумма01ПР),
	                   |	СУММА(Сумма01ВР),
	                   |	СУММА(СуммаДт02БУ),
	                   |	СУММА(СуммаДт02НУ),
	                   |	СУММА(Сумма02ПР),
	                   |	СУММА(Сумма02ВР),
	                   |	СУММА(СуммаЦелая02ПР),
	                   |	СУММА(СуммаЦелая01ПР)
	                   |ПО
	                   |	Субконто1";

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = абс_ТекстЗапроса;
	//\\ АБС ВСТАВКА
	
	Запрос.УстановитьПараметр("НачДата", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата", Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	// АБС ВСТАВКА
	Запрос.УстановитьПараметр("ВидУчетаНУ", Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ХозрасчетныйАмортизацияОС", ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	абс_МассивВыбытие = Новый Массив;
	абс_МассивВыбытие.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	абс_МассивВыбытие.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМЦ);
	Запрос.УстановитьПараметр("ХозрасчетныйВыбытиеОС", абс_МассивВыбытие);
	абс_МассивВыбытие = Новый Массив;
	абс_МассивВыбытие.Добавить(ПланыСчетов.Налоговый.ВыбытиеМЦ);
	абс_МассивВыбытие.Добавить(ПланыСчетов.Налоговый.ВыбытиеОС);
	Запрос.УстановитьПараметр("НалоговыйВыбытиеОС", абс_МассивВыбытие);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//\\ АБС ВСТАВКА
	Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);

	
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", Массив);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", Массив);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Список = ОС.Выгрузить();
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
		Если СтрокаТаблицы = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1, "ОС_НУ");
		Если ПараметрыОС = Неопределено Тогда
			ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1,"ОС_БУ");
			Если ПараметрыОС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
		Иначе
			Если Не ЗначениеЗаполнено(ПараметрыОС.СчетУчетаНУ) Тогда
				СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			Иначе
				СчетУчетаНУ                 = ПараметрыОС.СчетУчетаНУ;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПараметрыОС.СчетНачисленияАмортизацииНУ) Тогда
				СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
			Иначе
				СчетНачисленияАмортизацииНУ = ПараметрыОС.СчетНачисленияАмортизацииНУ;
			КонецЕсли;
		КонецЕсли;
		 	
		//АБС ИЗМЕНЕНИЕ 34543  07.11.2013 15:03:57  Шамов
		//Если Выборка.Сумма01Вр <> 0 Тогда
		Если ОКР(Выборка.Сумма01Вр, 2) <> 0 Тогда
		//АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Частичная ликвидация ОС";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		//АБС ИЗМЕНЕНИЕ 34543  07.11.2013 15:03:57  Шамов
		//Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
		Если ОКР(Выборка.Сумма01Вр - Выборка.Сумма02Вр, 2) <> 0 Тогда
		//АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт      = СчетСписанияНУ;
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Частичная ликвидация ОС";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		//АБС ИЗМЕНЕНИЕ 34543  07.11.2013 15:03:57  Шамов
		//Если Выборка.Сумма02Вр <> 0 Тогда
		Если ОКР(Выборка.Сумма02Вр, 2) <> 0 Тогда
		//АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Частичная ликвидация ОС";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
			
		КонецЕсли;
		
		//АБС ИЗМЕНЕНИЕ 34543  07.11.2013 15:03:57  Шамов
		//Если Выборка.Сумма01Пр <> 0 Тогда
		Если ОКР(Выборка.Сумма01Пр, 2) <> 0 Тогда
		//АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Частичная ликвидация ОС";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		//АБС ИЗМЕНЕНИЕ 34543  07.11.2013 15:03:57  Шамов
		//Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
		Если ОКР(Выборка.Сумма01Пр - Выборка.Сумма02Пр, 2) <> 0 Тогда
		//АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.СчетДт      = СчетСписанияНУ;
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Частичная ликвидация ОС";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		//АБС ИЗМЕНЕНИЕ 34543  07.11.2013 15:03:57  Шамов
		//Если Выборка.Сумма02Пр <> 0 Тогда		
		Если ОКР(Выборка.Сумма02Пр, 2) <> 0 Тогда		
		//АБС ИЗМЕНЕНИЕ 34543 КОНЕЦ
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
			// АБС ИЗМЕНЕНИЕ
			//ПроводкаНУ.Содержание   = "Списание ОС";
			ПроводкаНУ.Содержание   = "Частичная ликвидация ОС";
			//\\ АБС ИЗМЕНЕНИЕ
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		
		// АБС ВСТАВКА
		// соберем данные по ПР в таблицу параметров амортизации по НУ
		НоваяСтрокаТаблицыПараметровНУ = абс_мТаблицаПараметровАмортизацииНУ.Добавить();
		НоваяСтрокаТаблицыПараметровНУ.ОсновноеСредство = Выборка.Субконто1;
		НоваяСтрокаТаблицыПараметровНУ.СуммаПР = Выборка.СуммаЦелая01ПР - Выборка.Сумма01ПР - Выборка.СуммаЦелая02ПР + Выборка.Сумма02ПР;
		//\\ АБС ВСТАВКА
		
	КонецЦикла;
	
	ПроводкиНУ.Записать(Ложь);
КонецПроцедуры

// АБС ВСТАВКА

// Функция возвращает таблицу сроков фактического использования для основных средств табличной части ОС документа.
// Параметры:
//			ОпределитьДляУУ - Булево - если Истина, возвращает сроки по УУ, иначе - по БУ
//
Функция абс_ОпределитьСрокиФактическогоИспользования(ОпределитьДляУУ = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СостояниеОС", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Сч = СписокОС.Количество() - 1;
	Пока Сч >= 0 Цикл
		Если Не ЗначениеЗаполнено(СписокОС[Сч]) Тогда
			СписокОС.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Если ОпределитьДляУУ Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СостоянияОС.ДатаСостояния КАК ДатаУУ,
		|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СостоянияОС КАК СостоянияОС
		|ГДЕ
		|	СостоянияОС.ОсновноеСредство В(&СписокОС)
		|	И СостоянияОС.Состояние = &СостояниеОС";
		
		ТЗСрок = Запрос.Выполнить().Выгрузить();
		
		ТЗСрок.Колонки.Добавить("ФактСрок", Новый ОписаниеТипов("Число"));
		ТЗСрок.ЗаполнитьЗначения(0, "ФактСрок");
		
		Для Каждого ТекСтрока Из ТЗСрок Цикл
			ФактСрокИспользования = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ТекСтрока.ДатаУУ, Дата);
			ТекСтрока.ФактСрок = ФактСрокИспользования;
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаБУ,
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство В(&СписокОС)
		|	И СостоянияОСОрганизаций.Организация = &Организация
		|	И СостоянияОСОрганизаций.Состояние = &СостояниеОС";
		
		ТЗСрок = Запрос.Выполнить().Выгрузить();
		
		ТЗСрок.Колонки.Добавить("ФактСрок", Новый ОписаниеТипов("Число"));
		ТЗСрок.ЗаполнитьЗначения(0, "ФактСрок");
		
		Для Каждого ТекСтрока Из ТЗСрок Цикл
			ФактСрокИспользования = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ТекСтрока.ДатаБУ, Дата);
			ТекСтрока.ФактСрок = ФактСрокИспользования;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТЗСрок;
	
КонецФункции
//\\ АБС ВСТАВКА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

		СтрокаТабличнойЧасти = ОС.Добавить();

		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация = Основание.Организация;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "Обработка проведения" 
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	//12.12.2017 Крамаренко Д.М.
	//T#7769333 — Необходимо завести статусы в документы
	Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроведениеДокументовПоОС) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Только сотрудник с ролью ""Ответственный за документы по ОС"" может проводить документ!",Отказ);
		Возврат;
	КонецЕсли;	
	//12.12.2017 Крамаренко Д.М.
	//T#7769333 — Необходимо завести статусы в документы

	
	Если мУдалятьДвижения Тогда
		ttk_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(Дата));
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ПоддержкаПБУ18, МетодНачисленияАмортизацииНУ");
		ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок, СтруктураШапкиДокумента);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство",     "ОсновноеСредство");
	СтруктураПолей.Вставить("Стоимость",            "Стоимость");
	СтруктураПолей.Вставить("Амортизация",          "Амортизация");
	СтруктураПолей.Вставить("АмортизацияЗаМесяц",   "АмортизацияЗаМесяц");
	СтруктураПолей.Вставить("СписаноНаЗатраты",     "СписаноНаЗатраты");

	СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
	СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
	СтруктураПолей.Вставить("СписаноНаЗатратыБУ",   "СписаноНаЗатратыБУ");

	СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
	СтруктураПолей.Вставить("АмортизацияНУ",        "АмортизацияНУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");
	
	// АБС ВСТАВКА
	СтруктураПолей.Вставить("абс_АмортизацияЗаМесяц", "абс_АмортизацияЗаМесяц");
	СтруктураПолей.Вставить("абс_АмортизацияЗаМесяцБУ", "абс_АмортизацияЗаМесяцБУ");
	СтруктураПолей.Вставить("абс_АмортизацияЗаМесяцНУ", "абс_АмортизацияЗаМесяцНУ");
	СтруктураПолей.Вставить("абс_Амортизация", "абс_Амортизация");
	СтруктураПолей.Вставить("абс_АмортизацияБУ", "абс_АмортизацияБУ");
	СтруктураПолей.Вставить("абс_АмортизацияНУ", "абс_АмортизацияНУ");
	СтруктураПолей.Вставить("абс_СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "абс_СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	//\\ АБС ВСТАВКА

	//АБС ВСТАВКА №42310 НАЧАЛО «28 мая 2014 г.», Пополитов
 	СтруктураПолей.Вставить("абс_СтоимостьУУ", "абс_СтоимостьУУ");
	СтруктураПолей.Вставить("абс_СтоимостьБУ", "абс_СтоимостьБУ");
	СтруктураПолей.Вставить("абс_СтоимостьНУ", "абс_СтоимостьНУ");
 	//\\АБС ВСТАВКА №42310 КОНЕЦ    	
	
	СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	// подготовка таблицы для списания
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",       Дата);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                                                         КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОС_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                          КАК ОС_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                                       КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации     КАК Направление_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов    КАК ПорядокВключенияСтоимостиВСоставРасходовНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	ТаблицаПООс.Колонки.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
	
	Для Каждого СтрокаОС ИЗ ТаблицаПоОС Цикл
		СтрокаНаправлений = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = ?(СтрокаНаправлений = Неопределено, Ложь, СтрокаНаправлений.ПорядокВключенияСтоимостиВСоставРасходовНУ);
	КонецЦикла;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "При копировании" 
//
Процедура ПриКопировании(ОбъектКопирования)
	
	мСкопирован = Истина;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

мСкопирован = Ложь;

// АБС ВСТАВКА
абс_мТаблицаПараметровАмортизацииНУ = Новый ТаблицаЗначений;
абс_мТаблицаПараметровАмортизацииНУ.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
абс_мТаблицаПараметровАмортизацииНУ.Колонки.Добавить("СуммаПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
//\\ АБС ВСТАВКА


//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы
мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"));
//12.12.2017 Крамаренко Д.М.
//T#7769333 — Необходимо завести статусы в документы
// {{ Киселева И.С. 31.07.18 #77387732
мДатаНовогоПорядкаОтраженияЧастичнойЛиквидации = '20180701000000';