////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КарточкаДепонента" тогда
		
		ТабДокумент = ПечатьКарточкиДепонента();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Карточки депонентов"));
		
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КарточкаДепонента","Карточка депонента");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Определяет сумму неполученной заработной платы по платежной ведомости
//
// Параметры
//  Ведомость - ДокументСсылка.ЗарплатаКВыплатеОрганизации - обрабатываемая платежная ведомость
//
// Возвращаемое значение:
//   число - сумма к депонированию
//
Функция ПолучитьДанныеПлатежнойВедомостиДляДепонирования(Ведомости) Экспорт
	
	ТаблицаВыплат = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДляВыплаты(Ведомости, Перечисления.ВыплаченностьЗарплаты.Задепонировано, Ссылка);
	
	ТаблицаВыплат.Свернуть("Ведомость", "СуммаКВыплате");
	
	ТаблицаВыплат.Колонки.Ведомость.Имя		= "Ссылка";
	ТаблицаВыплат.Колонки.СуммаКВыплате.Имя	= "Сумма";
	
	Возврат ТаблицаВыплат;
	
КонецФункции // ПолучитьДанныеПлатежнойВедомостиДляДепонирования()

// Выполняет автоматическое заполнение документа 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура Автозаполнение() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	(НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ИЗ
	|					Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ГДЕ
	|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация))
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата <= &Дата
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Дата",?(ЭтоНовый(),КонецДня(Дата),Дата));
	ДепонированиеЗаработнойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //  Автозаполнение

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.УстановитьПараметр("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДепонированиеОрганизаций.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(ДепонированиеОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации
		|ИЗ
		|	Документ.ДепонированиеОрганизаций КАК ДепонированиеОрганизаций
		|ГДЕ
		|	ДепонированиеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата КАК ДатаВедомости,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер КАК НомерВедомости,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование
		|ПОМЕСТИТЬ ВТДепонированныеСуммы
		|ИЗ
		|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
		|			И (ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо)
		|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|ГДЕ
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
		|	ДепонированиеЗаработнойПлаты.ДатаВедомости,
		|	ДепонированиеЗаработнойПлаты.НомерВедомости,
		|	ДепонированиеЗаработнойПлаты.Сумма,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ДепонированиеЗаработнойПлаты.ФизлицоНаименование) КАК ФИОРаботника,
		|	РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
		|	ЕСТЬNULL(ДепонированиеОрганизацийРаботники.НомерСтроки, ДепонированиеЗаработнойПлаты.ФизлицоНаименование) КАК Порядок
		|ИЗ
		|	ВТДепонированныеСуммы КАК ДепонированиеЗаработнойПлаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				Физлицо В
		|					(ВЫБРАТЬ
		|						ДепонированныеСуммы.ФизЛицо
		|					ИЗ
		|						ВТДепонированныеСуммы КАК ДепонированныеСуммы)) КАК ФИОФизЛицСрезПоследних
		|		ПО ДепонированиеЗаработнойПлаты.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаДокумента,
		|				Сотрудник.Физлицо В
		|						(ВЫБРАТЬ
		|							ДепонированныеСуммы.ФизЛицо
		|						ИЗ
		|							ВТДепонированныеСуммы КАК ДепонированныеСуммы)
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|					И Организация = &Организация) КАК РаботникиОрганизаций
		|		ПО (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|			И ДепонированиеЗаработнойПлаты.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДепонированиеОрганизаций.Работники КАК ДепонированиеОрганизацийРаботники
		|		ПО ДепонированиеЗаработнойПлаты.Ссылка = ДепонированиеОрганизацийРаботники.Ссылка
		|			И ДепонированиеЗаработнойПлаты.Физлицо = ДепонированиеОрганизацийРаботники.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()
 
#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой карточки.
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьКарточкиДепонента()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДепонированиеОрганизаций_КарточкиДепонента";
	
	Макет 		= ПолучитьМакет("КарточкаДепонента");
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Карточка");
	
	// выводим общие данные
	Если ВыборкаДляШапки.Следующий() Тогда 
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
	КонецЕсли;
	ОбластьМакета.Параметры.НазваниеОрганизации = СокрЛП(ОбластьМакета.Параметры.НазваниеОрганизации);
	
	ВыведеноСтрок = 0;
	ВалютаРасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	// выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.НомерКарточки = "" + Номер + "/" + ВыведеноСтрок;
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаРаботники.Сумма, ВалютаРасчетов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// разбиение на страницы
		Если ВыведеноСтрок % 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьКарточкиДепонента()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(ФормироватьНалоговыеПроводки)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизаций.Дата,
	|	ДепонированиеОрганизаций.Ссылка,
	|	ДепонированиеОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА ДепонированиеОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДепонированиеОрганизаций.Организация
	|		ИНАЧЕ ДепонированиеОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация";
	Если ФормироватьНалоговыеПроводки Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	ДепонированиеОрганизаций.СчетУчетаРасходов,
	|	ЕСТЬNULL(ОбщиеСуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК КомпенсацияЗаЗадержкуЗарплаты";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.ДепонированиеОрганизаций КАК ДепонированиеОрганизаций";
	Если ФормироватьНалоговыеПроводки Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
	|		ИЗ
	|			Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо 
	|					И РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка
	|		ГДЕ
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|			И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)) КАК ОбщиеСуммыПоВедомости
	|		ПО (ИСТИНА)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	ДепонированиеОрганизаций.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДепонированиеЗаработнойПлаты()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость КАК Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПериодРегистрации КАК ПериодРегистрацииВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.СпособВыплаты КАК СпособВыплатыВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Представление КАК ПредставлениеВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата КАК ДатаВедомости,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|				ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НеПомеченнаяСумма,
	|	ВЫБОР
	|		КОГДА ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Сумма <> ЕСТЬNULL(СУММА(ВЫБОР
	|						КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|							ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|						ИНАЧЕ 0
	|					КОНЕЦ), 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуммыСоответствуютВедомостям,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК НеУказаныФизлица
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|ГДЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Сумма,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДепонированиеЗаработнойПлаты()

// Формирует запрос по табличной части документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоВедомостямЗаработнойПлаты()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость КАК Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПериодРегистрации КАК ПериодРегистрацииВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата КАК Дата,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер КАК Номер,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ХарактерВыплаты КАК ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|	СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0)) КАК СуммаКДепонированию,
	|	СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0)) КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|			И (ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
	|ГДЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость,
	|	Физлицо";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВедомостямЗаработнойПлаты()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоДепонированиеЗаработнойПлаты.НомерСтроки) +
					  """ табл. части: ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.Ведомость) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указана платежная ведомость!", Отказ, Заголовок);
	Иначе
		Если ВыборкаПоДепонированиеЗаработнойПлаты.СпособВыплатыВедомости <> Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "указан документ, не предназначенный для оплаты через кассу!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.ПериодРегистрацииВедомости) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), в которой не указан месяц начисления выплачиваемой зарплаты!", Отказ, Заголовок);
		Иначе
			Если Дата < ВыборкаПоДепонированиеЗаработнойПлаты.ПериодРегистрацииВедомости Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), месяц начисления которой больше даты депонирования!",Отказ,Заголовок);
			КонецЕсли;
			Если Дата < ВыборкаПоДепонированиеЗаработнойПлаты.ДатаВедомости Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), которая оформлена позже этого депонирования!",Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.НеПомеченнаяСумма) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), в которой есть строки с невыплаченной зарплатой!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоДепонированиеЗаработнойПлаты.НеУказаныФизлица Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + ") со строками, в которых нет сотрудников!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ВыборкаПоДепонированиеЗаработнойПлаты.СуммыСоответствуютВедомостям Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "сумма по строке документа не совпадает с суммой к депонированию по платежной ведомость!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	// Свойства
	Движение.Период           				= ВыборкаПоШапкеДокумента.Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
	Движение.ПериодВзаиморасчетов       	= ВыборкаПоТЧ.ПериодРегистрацииВедомости;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов			= ВыборкаПоТЧ.Сумма; 
	// Реквизиты
	Движение.ХарактерВыплаты				= ВыборкаПоТЧ.ХарактерВыплаты; 
	Движение.СпособВыплаты					= Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
	Движение.Ведомость  					= ВыборкаПоТЧ.Ведомость; 
	
	Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.Добавить();
	// Свойства
	Движение.Период							= ВыборкаПоШапкеДокумента.Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо						= ВыборкаПоТЧ.ФизЛицо;
	Движение.Ведомость						= ВыборкаПоТЧ.Ведомость;
	
	// Ресурсы
	Движение.Сумма							= ВыборкаПоТЧ.СуммаКДепонированию; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоТЧ)
	
	Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
	
	// Измерения
	Движение.ФизЛицо   = ВыборкаПоТЧ.ФизЛицо;
	Движение.Ведомость = ВыборкаПоТЧ.Ведомость;
	
	// Ресурсы
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Процедура СформироватьРасчетыПоНДФЛ(ВыборкаПоШапкеДокумента)
	
	СтруктураДокумента = Новый Структура("Ссылка,Период,ОбособленноеПодразделение,Организация",ВыборкаПоШапкеДокумента.Ссылка,ВыборкаПоШапкеДокумента.Дата,ВыборкаПоШапкеДокумента.Организация,ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстТаблицыВыплаты = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыФизлицам
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|			И (ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо)
	|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|ГДЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , ВыборкаПоШапкеДокумента.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|			ТОГДА ПлДок.Ссылка.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНДФЛ
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ПлДок
	|ГДЕ
	|	ПлДок.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлДок.Ссылка.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	СтруктураДокумента.Вставить("ДатаНДФЛ",Выборка.ДатаНДФЛ);
	
	ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура осуществляет заполнение на основании документа 
//	ЗарплатаКВыплатеОрганизаций
//
// Параметры:
//  Основание - документ основание, из которого брать данные.
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		
		ШапкаОснования = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДокумента(Основание);
		
		Если НЕ ШапкаОснования.Проведен Тогда
			ВызватьИсключение "Платежная ведомость не проведена! Заполнение не выполнялось.";
		КонецЕсли;
		
		Если ШапкаОснования.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			ВызватьИсключение "Платежная ведомость оформлена на перечисление в банк! Заполнение не выполнялось.";
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ШапкаОснования);

		// Получим подлежащую депонированию заработную плату
		ТаблицаВыплат = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДляВыплаты(Основание.Ссылка, Перечисления.ВыплаченностьЗарплаты.Задепонировано);

		Если ТаблицаВыплат.Количество() = 0 Тогда
			ВызватьИсключение "По текущей ведомости нет сумм к депонированию!";
		КонецЕсли;	
		
		ТаблицаРаботников = ТаблицаВыплат.Скопировать();
		
		ТаблицаВыплат.Свернуть("Ведомость", "СуммаКВыплате");
		
		СтрокаВедомость = ДепонированиеЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость	= ТаблицаВыплат[0].Ведомость;
		СтрокаВедомость.Сумма		= ТаблицаВыплат[0].СуммаКВыплате;

		СуммаДокумента = ТаблицаВыплат[0].СуммаКВыплате;
		
		ТаблицаРаботников.Свернуть("Физлицо", "СуммаКВыплате");
		ТаблицаРаботников.Колонки.СуммаКВыплате.Имя = "Сумма";

		Работники.Загрузить(ТаблицаРаботников);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
		Запрос.УстановитьПараметр("Ведомости", ДепонированиеЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование КАК ФизлицоНаименование,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В(&Ведомости)
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты <> 0
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";

		Работники.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Работники.Очистить();
		
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ДепонированиеЗаработнойПлаты.Итог("Сумма");
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ОтражатьВНалоговомУчете Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецКвартала(Дата), Организация);
		ФормироватьНалоговыеПроводки = ЗначениеЗаполнено(УчетнаяПолитика) И (НЕ УчетнаяПолитика.УСН) И УчетнаяПолитика.ПоддержкаПБУ18;
	Иначе
		ФормироватьНалоговыеПроводки = Ложь;
	КонецЕсли;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(ФормироватьНалоговыеПроводки).Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// получим реквизиты табличной части
			РезультатЗапроса = СформироватьЗапросПоДепонированиеЗаработнойПлаты();
			
			Если РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке("По указанным документам на выплату зарплаты не обнаружено не получивших деньги сотрудников, на которых ещё не оформлен документ ""Депонирование""!", Отказ, Заголовок);
			Иначе
				
				Если ФормироватьНалоговыеПроводки Тогда
					ФормироватьНалоговыеПроводки = ВыборкаПоШапкеДокумента.КомпенсацияЗаЗадержкуЗарплаты > 0;
				КонецЕсли;
				Если ФормироватьНалоговыеПроводки Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасходов), Ложь, Дата);
					Если СчетНУСоответствующийСчетуБУ.Пустая() Тогда
						ОбщегоНазначения.ВывестиИнформациюОбОшибке("Постоянные разницы в налоговом учете по компенсации за задержку выплаты зарплаты сформированы не будут!",,Заголовок);
						ФормироватьНалоговыеПроводки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				// ведется ли учет задолженности в разрезе периодов возникновения задолженности
				УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
				// Определим способ ведения учета расчетов с персоналом - сводно/подробно
				ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");

				ДанныеПоВедомостямЗаработнойПлаты = СформироватьЗапросПоВедомостямЗаработнойПлаты().Выгрузить();
				ДанныеПоВедомостямЗаработнойПлаты.Индексы.Добавить("НомерСтроки");
				СтруктураПоиска = Новый Структура("НомерСтроки");
				
				ВыборкаПоДепонированиеЗаработнойПлаты = РезультатЗапроса.Выбрать();
				Пока ВыборкаПоДепонированиеЗаработнойПлаты.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок);
					
					Если Не Отказ Тогда // Заполним записи в наборах записей регистров
						ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаПоДепонированиеЗаработнойПлаты);
						СтрокиВедомости = ДанныеПоВедомостямЗаработнойПлаты.НайтиСтроки(СтруктураПоиска);
						Для каждого СтрокаВедомости Из СтрокиВедомости Цикл
							ДобавитьСтрокуВДвиженияПоРегистрамСведений(СтрокаВедомости);
							Если СтрокаВедомости.СуммаКДепонированию > 0 Тогда
								ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтрокаВедомости);
								ДобавитьСтрокуПроводки(ВыборкаПоШапкеДокумента, СтрокаВедомости, ФормироватьНалоговыеПроводки,  СчетНУСоответствующийСчетуБУ, ВестиРеглУчетРасчетовСПерсоналомПодробно);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не Отказ Тогда // регистрируем НДФЛ удержанный
					СформироватьРасчетыПоНДФЛ(ВыборкаПоШапкеДокумента)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПроводки(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, ФормироватьНалоговыеПроводки,СчетНУСоответствующийСчетуБУ,ВестиРеглУчетРасчетовСПерсоналомПодробно) 
	
	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Если ВыборкаПоТЧ.Сумма <> 0 Тогда
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ВыборкаПоШапкеДокумента.Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
		Проводка.Сумма       = ВыборкаПоТЧ.Сумма;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
			Проводка.СубконтоДт.РаботникиОрганизации = ВыборкаПоТЧ.ФизЛицо;
		КонецЕсли;
		
		Проводка.Содержание  = "Депонирование зарплаты по ведомости №" + ВыборкаПоТЧ.Номер + " от " + ВыборкаПоТЧ.Дата;
		Проводка.СчетКт		 = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
		Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
			Проводка.СубконтоКт.РаботникиОрганизации = ВыборкаПоТЧ.ФизЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаПоТЧ.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ВыборкаПоШапкеДокумента.Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
		Проводка.Сумма       = ВыборкаПоТЧ.КомпенсацияЗаЗадержкуЗарплаты;
		
		Проводка.СчетДт      = СчетУчетаРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3);
		
		Проводка.Содержание  = "Депонирование компенсации за задержку зарплаты по ведомости №" + ВыборкаПоТЧ.Номер + " от " + ВыборкаПоТЧ.Дата;
		Проводка.СчетКт		= ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
		Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
			Проводка.СубконтоКт.РаботникиОрганизации = ВыборкаПоТЧ.ФизЛицо;
		КонецЕсли;
		
		Если ФормироватьНалоговыеПроводки Тогда  // фиксируем постоянные разницы по компенсации за задержку выплаты зарплаты

			Проводка = Движения.Налоговый.Добавить();

			Проводка.Период      = ВыборкаПоШапкеДокумента.Дата;
			Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
			Проводка.Сумма       = ВыборкаПоТЧ.КомпенсацияЗаЗадержкуЗарплаты;
			Проводка.Содержание  = "Депонирование компенсации за задержку зарплаты по ведомости №" + ВыборкаПоТЧ.Номер + " от " + ВыборкаПоТЧ.Дата;

			Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3);
			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуПроводки

