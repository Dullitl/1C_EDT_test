Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Валюта курс и кратность для пересчета регламентированных сумм
Перем мВалютаУпрУчета Экспорт;
Перем мКурсУпрУчета Экспорт;
Перем мКратностьУпрУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьДокумента()
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		Конецесли;
		
		Запрос = Новый Запрос;
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ВалютаПечати = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаПечати = мВалютаУпрУчета;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	Организация,
		|	Склад.Представление КАК ПредставлениеСклада,
		|	Организация,
		|	Склад,
		|	Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Количество                      КАК Количество,
		|		КоличествоУчет                  КАК КоличествоПоУчету,
		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
		|			ИНАЧЕ Цена
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
		|			ИНАЧЕ Сумма
		|		КОНЕЦ КАК Сумма,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
		|			ИНАЧЕ СуммаУчет
		|		КОНЕЦ КАК СуммаПоУчету,
		|		ХарактеристикаНоменклатуры      КАК Характеристика,
		|		СерияНоменклатуры               КАК Серия
		|	)
		|ИЗ
		|	Документ.абс_ИнвентаризацияЗабаланса КАК ИнвентаризацияТоваровНаСкладе
		|
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";
		
		Макет = ПолучитьМакет("ИнвентаризацияТоваровНаСкладе");
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Инвентаризация товаров на складе");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим данные об организации и складе
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ВалютаНаименование = ВалютаПечати.Наименование;
		ОбластьМакета.Параметры.Валюта             = ВалютаПечати;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку таблицы
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета    = Макет.ПолучитьОбласть(ОбластьСтроки);
		ИтогСуммы        = 0;
		ИтогСуммыПоУчету = 0;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;
			
			ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
			ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего        = ОбщегоНазначения.ФорматСумм(ИтогСуммы);
		ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначения.ФорматСумм(ИтогСуммыПоУчету);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подписи к документу
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьДокумента()
	
	// ТекстОписания
	//
	// Параметры: 
	//  Нет.
	//
	// Возвращаемое значение:
	//  Нет.
	//
	Функция ПечатьИНВ3(БезФактическихДанных = Ложь)
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ТоварКод = "Артикул";
		Иначе
			ТоварКод = "Код";
		КонецЕсли;
		
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ВалютаПересчета = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаПересчета = мВалютаУпрУчета;
		КонецЕсли;
		
		ВалютаПечати = мВалютаРегламентированногоУчета;
		Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
		Запрос       = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущийДокумент",      ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",                 Параметры.Курс);
		Запрос.УстановитьПараметр("Кратность",            Параметры.Кратность);
		Запрос.УстановитьПараметр("ВидСкладаНТТ",         Перечисления.ВидыСкладов.НТТ);
		Запрос.УстановитьПараметр("БезФактическихДанных", БезФактическихДанных);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер КАК НомерДокумента,
		|	Дата  КАК ДатаДокумента,
		|	Дата  КАК ДатаСнятияОстатков,
		|	Организация,
		|	Склад.Представление КАК ПредставлениеСклада,
		|	Товары.(
		|		НомерСтроки                     КАК Номер,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|		ВЫБОР
		|			КОГДА &БезФактическихДанных ТОГДА 0
		|			ИНАЧЕ Количество
		|		КОНЕЦ КАК ФактКоличество,
		|		КоличествоУчет КАК БухКоличество,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
		|			ИНАЧЕ Цена * &Курс / &Кратность
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР
		|			КОГДА &БезФактическихДанных ТОГДА 0
		|			ИНАЧЕ ВЫБОР КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице ИНАЧЕ Сумма * &Курс / &Кратность КОНЕЦ
		|		КОНЕЦ КАК ФактСумма,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
		|			ИНАЧЕ СуммаУчет * &Курс / &Кратность
		|		КОНЕЦ КАК БухСумма,
		|		ХарактеристикаНоменклатуры КАК Характеристика,
		|		СерияНоменклатуры КАК Серия,
		|		СчетУчетаБУ  Как СубСчет
		|	)
		|ИЗ
		|	Документ.абс_ИнвентаризацияЗабаланса КАК ИнвентаризацияТоваровНаСкладе
		|
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ3";
		Макет       = ПолучитьОбщийМакет("ИНВ3");
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ДатаСнятияОстатков       = Шапка.ДатаСнятияОстатков;
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокНаСтранице = 19;
		СтрокШапки      = 5;
		СтрокПодвала    = 5;
		НомерСтраницы   = 2;
		Ном             = 0;
		
		ИтогФактКоличество = 0;
		ИтогФактСумма      = 0;
		ИтогБухКоличество  = 0;
		ИтогБухСумма       = 0;
		
		КолвоСтрокПоСтранице = 0;
		КолвоПостранице      = 0;
		СуммаЛиста           = 0;
		ИтогоКолво           = 0;
		ИтогоСумма           = 0;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Выводим многострочную часть докмента
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ОбластьИтоговПоСтранице                               = Макет.ПолучитьОбласть("ПодвалСтраницы");
				ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
				ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
				ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
				ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
				
				ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
				Если НЕ БезФактическихДанных Тогда
					ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
					ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
				ИтогФактКоличество = 0;
				ИтогФактСумма      = 0;
				ИтогБухКоличество  = 0;
				ИтогБухСумма       = 0;
				
				КолвоСтрокПоСтранице = 0;
				КолвоПостранице      = 0;
				СуммаЛиста           = 0;
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Номер             = Ном;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
			ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
			ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
			ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
			ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
			ИтогоСумма         = ИтогоСумма         + ВыборкаСтрокТовары.ФактСумма;
			
			КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
			КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
			СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
		ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
		Если НЕ БезФактическихДанных Тогда
			ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
			ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим подвал документа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
		ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
		Если НЕ БезФактическихДанных Тогда
			ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(ИтогоКолво);
			ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху = 0;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьИНВ3()
	
	//АБС
	Функция ПечатьИНВ3_СРасшифровкойКомиссии(БезФактическихДанных = Ложь)
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ТоварКод = "Артикул";
		Иначе
			ТоварКод = "Код";
		КонецЕсли;
		ДолжностьМОЛ1 = "";
		ФИОМОЛ1 = "";
		Если ЗначениеЗаполнено(МОЛ) Тогда
			//АБС ВСТАВКА 48314  15.10.2014 14:09:23  Шамов			
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			//			   |	РаботникиОрганизацийСрезПоследних.Должность,
			//			   |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
			//			   |ИЗ
			//			   |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
			//			   |ГДЕ
			//			   |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = &Физлицо";
			//Запрос.УстановитьПараметр("Физлицо",МОЛ);
			//Запрос.УстановитьПараметр("Дата",Дата);
			//ДолжностьМОЛ1 = ВыборкаМол.Должность;
			ДанныеМОЛ = ОбщегоНазначения.ДанныеФизЛица(Организация, МОЛ, Дата);
			Если НЕ ЗначениеЗаполнено(ДанныеМОЛ.Должность) Тогда
				ДолжностьМОЛ1 = абс_ПолучитьДолжностьСотрудникаПоФизлицу(МОЛ);
			Иначе
				ДолжностьМОЛ1 = ДанныеМОЛ.Должность;
			КонецЕсли;
			//\\
		    ФИОМОЛ1 = МОЛ;
		КонецЕсли; 
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ВалютаПересчета = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаПересчета = мВалютаУпрУчета;
		КонецЕсли;
		
		ВалютаПечати = мВалютаРегламентированногоУчета;
		Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
		Запрос       = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущийДокумент",      ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",                 Параметры.Курс);
		Запрос.УстановитьПараметр("Кратность",            Параметры.Кратность);
		Запрос.УстановитьПараметр("ВидСкладаНТТ",         Перечисления.ВидыСкладов.НТТ);
		Запрос.УстановитьПараметр("БезФактическихДанных", БезФактическихДанных);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер КАК НомерДокумента,
		|	Дата  КАК ДатаДокумента,
		|	Дата  КАК ДатаСнятияОстатков,
		|	Организация,
		|	Склад.Представление КАК ПредставлениеСклада,
		|	Товары.(
		|		НомерСтроки                     КАК Номер,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|		ВЫБОР
		|			КОГДА &БезФактическихДанных ТОГДА 0
		|			ИНАЧЕ Количество
		|		КОНЕЦ КАК ФактКоличество,
		|		КоличествоУчет КАК БухКоличество,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
		|			ИНАЧЕ Цена * &Курс / &Кратность
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР
		|			КОГДА &БезФактическихДанных ТОГДА 0
		|			ИНАЧЕ ВЫБОР КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице ИНАЧЕ Сумма * &Курс / &Кратность КОНЕЦ
		|		КОНЕЦ КАК ФактСумма,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
		|			ИНАЧЕ СуммаУчет * &Курс / &Кратность
		|		КОНЕЦ КАК БухСумма,
		|		ХарактеристикаНоменклатуры КАК Характеристика,
		|		СерияНоменклатуры КАК Серия,
		|		СчетУчетаБУ  Как СубСчет
		|	)
		|ИЗ
		|	Документ.абс_ИнвентаризацияЗабаланса КАК ИнвентаризацияТоваровНаСкладе
		|
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ3";
		Макет       = ПолучитьМакет("ИНВ3");
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ДатаСнятияОстатков       = Шапка.ДатаСнятияОстатков;
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
		ОбластьМакета.Параметры.ДолжностьМОЛ1 = ДолжностьМОЛ1;
		ОбластьМакета.Параметры.ФИОМОЛ1 = ФИОМОЛ1;
		//АБС ВСТАВКА 48314  15.10.2014 14:09:23  Шамов
		ОбластьМакета.Параметры.ОснованиеНомер = ДокументОснованиеНомер;
		ОбластьМакета.Параметры.ОснованиеДата = Формат(ДокументОснованиеДата, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ДатаНачала = Формат(ДатаНачалаИнвентаризации, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ДатаОкончания = Формат(ДатаОкончанияИнвентаризации, "ДФ=dd.MM.yyyy");		
		//АБС ВСТАВКА 48314 КОНЕЦ 
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокНаСтранице = 19;
		СтрокШапки      = 5;
		СтрокПодвала    = 5;
		НомерСтраницы   = 2;
		Ном             = 0;
		
		ИтогФактКоличество = 0;
		ИтогФактСумма      = 0;
		ИтогБухКоличество  = 0;
		ИтогБухСумма       = 0;
		
		КолвоСтрокПоСтранице = 0;
		КолвоПостранице      = 0;
		СуммаЛиста           = 0;
		ИтогоКолво           = 0;
		ИтогоСумма           = 0;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Выводим многострочную часть докмента
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ОбластьИтоговПоСтранице                               = Макет.ПолучитьОбласть("ПодвалСтраницы");
				ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
				ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
				ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
				ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
				
				ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
				Если НЕ БезФактическихДанных Тогда
					ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
					ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
				ИтогФактКоличество = 0;
				ИтогФактСумма      = 0;
				ИтогБухКоличество  = 0;
				ИтогБухСумма       = 0;
				
				КолвоСтрокПоСтранице = 0;
				КолвоПостранице      = 0;
				СуммаЛиста           = 0;
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Номер             = Ном;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
			ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
			ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
			ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
			ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
			ИтогоСумма         = ИтогоСумма         + ВыборкаСтрокТовары.ФактСумма;
			
			КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
			КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
			СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
		ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
		Если НЕ БезФактическихДанных Тогда
			ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
			ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим подвал документа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
		//АБС
		ОбластьМакета.Параметры.ДолжностьМОЛ1 = ДолжностьМОЛ1;
		ОбластьМакета.Параметры.ФИОМОЛ1 = ФИОМОЛ1;
		//\\АБС
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
		ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
		Если НЕ БезФактическихДанных Тогда
			ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(ИтогоКолво);
			ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
		КонецЕсли;
		
		//Комиссия
		ПредседательКомиссииСтр = КомиссияТМЦ.ЧленыКомиссии.Найти(Истина,"Председатель");
		Если ПредседательКомиссииСтр <> Неопределено Тогда
			ПредседательКомиссии = ОбщегоНазначения.ДанныеФизЛица(Организация, ПредседательКомиссииСтр.ЧленКомиссии, Дата);
			//АБС Шамов
			//ОбластьМакета.Параметры.ДолжностьПредседателя = ПредседательКомиссии.Должность;
			Если НЕ ЗначениеЗаполнено(ПредседательКомиссии.Должность) Тогда
				ОбластьМакета.Параметры.ДолжностьПредседателя = абс_ПолучитьДолжностьСотрудникаПоФизлицу(ПредседательКомиссииСтр.ЧленКомиссии);
			Иначе
				ОбластьМакета.Параметры.ДолжностьПредседателя = ПредседательКомиссии.Должность;
			КонецЕсли;
			//\\
			ОбластьМакета.Параметры.ФИОпредседателя = ПредседательКомиссии.Фамилия+" "+Лев(ПредседательКомиссии.Имя,1)+"."+Лев(ПредседательКомиссии.Отчество,1)+".";
		КонецЕсли;
		Сч = 2;
		Для каждого ЧленКомиссииСтр  из КомиссияТМЦ.ЧленыКомиссии Цикл
			Если Сч>4 Тогда
				прервать;
			КонецЕсли;
			Если ЧленКомиссииСтр.Председатель Тогда
				продолжить;
			КонецЕсли;
			ЧленКомиссии = ОбщегоНазначения.ДанныеФизЛица(Организация, ЧленКомиссииСтр.ЧленКомиссии, Дата);
			//АБС Шамов
			//ОбластьМакета.Параметры["ДолжностьЧленаКомиссии"+Сч] = ЧленКомиссии.Должность;
			Если ЧленКомиссии.Должность.Пустая() Тогда
				ОбластьМакета.Параметры["ДолжностьЧленаКомиссии"+Сч] = абс_ПолучитьДолжностьСотрудникаПоФизлицу(ЧленКомиссииСтр.ЧленКомиссии);
			Иначе
				ОбластьМакета.Параметры["ДолжностьЧленаКомиссии"+Сч] = ЧленКомиссии.Должность;
			КонецЕсли;
			//\\
			ОбластьМакета.Параметры["ФИОЧленаКомиссии"+Сч] = ЧленКомиссии.Фамилия+" "+Лев(ЧленКомиссии.Имя,1)+"."+Лев(ЧленКомиссии.Отчество,1)+".";
			Сч = Сч+1;
		КонецЦикла;	
		//\\
		
		//АБС Шамов
		ОтветственныйСтр = ОбщегоНазначения.ДанныеФизЛица(Организация, Ответственный.ФизЛицо, Дата);
		Если НЕ ЗначениеЗаполнено(ОтветственныйСтр.Должность) Тогда
			ОбластьМакета.Параметры["ДолжностьРасчетчика"] = абс_ПолучитьДолжностьСотрудникаПоФизлицу(Ответственный.ФизЛицо);
		Иначе
			ОбластьМакета.Параметры["ДолжностьРасчетчика"] = ОтветственныйСтр.Должность;
		КонецЕсли;
		ОбластьМакета.Параметры["ФИОРасчетчика"] = ОтветственныйСтр.Фамилия+" "+Лев(ОтветственныйСтр.Имя,1)+"."+Лев(ОтветственныйСтр.Отчество,1)+".";
		//\\
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху = 0;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Возврат ТабДокумент;
		
	КонецФункции // Напечатать 
	
	//\\АБС
	
	// ТекстОписания
	//
	// Параметры: 
	//  Нет.
	//
	// Возвращаемое значение:
	//  Нет.
	//
	Функция ПечатьИНВ19()
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ТоварКод = "Артикул";
		Иначе
			ТоварКод = "Код";
		КонецЕсли;
		
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ВалютаПересчета = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаПересчета = мВалютаУпрУчета;
		КонецЕсли;
		
		ВалютаПечати = мВалютаРегламентированногоУчета;
		Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
		Запрос       = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",            Параметры.Курс);
		Запрос.УстановитьПараметр("Кратность",       Параметры.Кратность);
		Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер  КАК НомерДокумента,
		|	Дата   КАК ДатаДокумента,
		|	Дата   КАК ДатаНачалаИнвентаризации,
		|	Организация КАК Руководители,
		|	Организация,
		|	Склад.Представление КАК ПредставлениеСклада,
		|	Товары.(
		|		НомерСтроки КАК Номер,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|		Количество                     КАК ФактКоличество,
		|		КоличествоУчет                 КАК БухКоличество,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
		|			ИНАЧЕ Цена * &Курс / &Кратность
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
		|			ИНАЧЕ Сумма * &Курс / &Кратность
		|		КОНЕЦ КАК ФактСумма,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
		|			ИНАЧЕ СуммаУчет * &Курс / &Кратность
		|		КОНЕЦ КАК БухСумма,
		|		ХарактеристикаНоменклатуры     КАК Характеристика,
		|		СерияНоменклатуры КАК Серия
		|	)
		|ИЗ
		|	Документ.абс_ИнвентаризацияЗабаланса КАК ИнвентаризацияТоваровНаСкладе
		|
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ19";
		Макет       = ПолучитьОбщийМакет("ИНВ19");
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ДатаНачалаИнвентаризации = Шапка.ДатаНачалаИнвентаризации;
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокНаСтранице = 19;
		СтрокШапки      = 5;
		СтрокПодвала    = 5;
		НомерСтраницы   = 2;
		Ном             = 0;
		
		ИтогоРезультатИзлишекКолво   = 0;
		ИтогоРезультатИзлишекСумма   = 0;
		ИтогоРезультатНедостачаКолво = 0;
		ИтогоРезультатНедостачаСумма = 0;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Выводим многострочную часть докмента
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы1");
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			
			Разница     = 0;
			РазницаСумм = 0;
			
			Разница     = ВыборкаСтрокТовары.ФактКоличество - ВыборкаСтрокТовары.БухКоличество;
			РазницаСумм = ВыборкаСтрокТовары.ФактСумма      - ВыборкаСтрокТовары.БухСумма;
			Если Разница = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Разница < 0 И РазницаСумм < 0 Тогда
				ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
				ОбластьМакета.Параметры.РезультатНедостачаСумма = - РазницаСумм;
				ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
				ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;
				
				ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
				ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + (- РазницаСумм);
			ИначеЕсли Разница < 0 И РазницаСумм >= 0 Тогда
				ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
				ОбластьМакета.Параметры.РезультатНедостачаСумма = РазницаСумм;
				ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
				ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;
				
				ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
				ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + РазницаСумм;
			Иначе
				ОбластьМакета.Параметры.РезультатНедостачаКолво = 0;
				ОбластьМакета.Параметры.РезультатНедостачаСумма = 0;
				ОбластьМакета.Параметры.РезультатИзлишекКолво   = Разница;
				ОбластьМакета.Параметры.РезультатИзлишекСумма   = РазницаСумм;
				
				ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + Разница;
				ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + РазницаСумм;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Ном = Ном + 1;
			
		КонецЦикла;
		
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы1");
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво;
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма;
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво;
		ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма;
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.ФИОБухгалтера =  Бухгалтер;
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху = 0;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьИНВ19()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "Ведомость" Тогда
			
			// Печать упр. формы документа
			ТабДокумент = ПечатьДокумента();
		ИначеЕсли ИмяМакета = "ИНВ3" тогда
			
			// Печать униф. формы ИНВ-3
			ТабДокумент = ПечатьИНВ3();
		ИначеЕсли ИмяМакета = "ИНВ3_СКомиссией" тогда
			
			// Печать униф. формы ИНВ-3
			ТабДокумент = ПечатьИНВ3_СРасшифровкойКомиссии();
			
		ИначеЕсли ИмяМакета = "ИНВ3_БезФактДанных" тогда
			
			// Печать униф. формы ИНВ-3
			ТабДокумент = ПечатьИНВ3(Истина);
			
		ИначеЕсли ИмяМакета = "ИНВ19" тогда
			
			// Печать униф. формы ИНВ-19
			ТабДокумент = ПечатьИНВ19();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли; 
			
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		Возврат Новый Структура("Ведомость,ИНВ3,ИНВ3_БезФактДанных,ИНВ19,ИНВ3_СКомиссией",
		"Инвентаризация товаров на складе",
		"ИНВ-3 (Инвентаризационная опись товаров)",
		"ИНВ-3 (Инвентаризационная опись с пустыми фактическими данными)",
		"ИНВ-19 (Сличительная ведомость)",
		"ИНВ-3 (с заполнением комиссии)");
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	Процедура ЗаполнитьНачальныеНастройки(ПостроительОтчета) Экспорт
		ПостроительОтчета.Текст = ПолучитьТекстЗапросаПоОстаткамБух();
		//ПостроительОтчета.Текст =
		//"ВЫБРАТЬ
		//|	ОстаткиТоваров.Номенклатура,
		//|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		//+?(УчитыватьСерии, "
		//|	ОстаткиТоваров.СерияНоменклатуры,","") + "
		//|	ОстаткиТоваров.Качество,
		//|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		//|	ВЫБОР
		//|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		//|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		//|			0 
		//|		ИНАЧЕ
		//|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		//|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		//|	КОНЕЦ                                  КАК Сумма
		//|ИЗ
		//|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад)
		//|КАК ОстаткиТоваров
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ
		//|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, 
		//|	                                                  Склад = &ПартионныйСклад) КАК ОстаткиПартий
		//|ПО
		//|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		//|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры
		//|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество
		//|
		//|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		//|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		//|     ОстаткиТоваров.Номенклатура.ВидНоменклатуры Как ВидНоменклатуры}
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ОстаткиТоваров.Номенклатура,
		//|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		//	+?(УчитыватьСерии, "
		//|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		//|	ОстаткиТоваров.Качество";
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить("Номенклатура");
		МассивОтбора.Добавить("НоменклатурнаяГруппа");
		//АБС
		МассивОтбора.Добавить("ВидНОменклатуры");
		МассивОтбора.Добавить("Счет");


		УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	КонецПроцедуры
	//Процедура ЗаполнитьНачальныеНастройки(ПостроительОтчета) Экспорт
	//	ПостроительОтчета.Текст = ПолучитьТекстЗапросаПоОстаткамБух();
	//	//ПостроительОтчета.Текст =
	//	//"ВЫБРАТЬ
	//	//|	ОстаткиТоваров.Номенклатура,
	//	//|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
	//	//+?(УчитыватьСерии, "
	//	//|	ОстаткиТоваров.СерияНоменклатуры,","") + "
	//	//|	ОстаткиТоваров.Качество,
	//	//|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
	//	//|	ВЫБОР
	//	//|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
	//	//|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	//	//|			0 
	//	//|		ИНАЧЕ
	//	//|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
	//	//|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
	//	//|	КОНЕЦ                                  КАК Сумма
	//	//|ИЗ
	//	//|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад)
	//	//|КАК ОстаткиТоваров
	//	//|
	//	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//	//|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, 
	//	//|	                                                  Склад = &ПартионныйСклад) КАК ОстаткиПартий
	//	//|ПО
	//	//|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
	//	//|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры
	//	//|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество
	//	//|
	//	//|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
	//	//|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	//	//|     ОстаткиТоваров.Номенклатура.ВидНоменклатуры Как ВидНоменклатуры}
	//	//|
	//	//|СГРУППИРОВАТЬ ПО
	//	//|	ОстаткиТоваров.Номенклатура,
	//	//|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
	//	//	+?(УчитыватьСерии, "
	//	//|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
	//	//|	ОстаткиТоваров.Качество";
	//	
	//	МассивОтбора = Новый Массив;
	//	МассивОтбора.Добавить("Номенклатура");
	//	МассивОтбора.Добавить("НоменклатурнаяГруппа");
	//	//АБС
	//	МассивОтбора.Добавить("ВидНОменклатуры");
	//	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	//КонецПроцедуры
	Процедура ЗаполнитьНачальныеНастройки1(ПостроительОтчета) Экспорт
		//ПостроительОтчета.Текст = ПолучитьТекстЗапросаПоОстаткамБух();
		ПостроительОтчета.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто2 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто3 КАК Договор,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма,
		|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Количество,
		|	ХозрасчетныйОстатки.Счет КАК СчетУчетаБУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет10_07, , ) КАК ХозрасчетныйОстатки
		|{ГДЕ
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ХозрасчетныйОстатки.Субконто1.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ХозрасчетныйОстатки.Субконто2 КАК Контрагенты,
		|	ХозрасчетныйОстатки.Субконто3 КАК ДоговорыКонтрагентов}";
		//ПостроительОтчета.Текст =
		//"ВЫБРАТЬ
		//|	ОстаткиТоваров.Номенклатура,
		//|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		//+?(УчитыватьСерии, "
		//|	ОстаткиТоваров.СерияНоменклатуры,","") + "
		//|	ОстаткиТоваров.Качество,
		//|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		//|	ВЫБОР
		//|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		//|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		//|			0 
		//|		ИНАЧЕ
		//|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		//|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		//|	КОНЕЦ                                  КАК Сумма
		//|ИЗ
		//|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад)
		//|КАК ОстаткиТоваров
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ
		//|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, 
		//|	                                                  Склад = &ПартионныйСклад) КАК ОстаткиПартий
		//|ПО
		//|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		//|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры
		//|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество
		//|
		//|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		//|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		//|     ОстаткиТоваров.Номенклатура.ВидНоменклатуры Как ВидНоменклатуры}
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ОстаткиТоваров.Номенклатура,
		//|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		//	+?(УчитыватьСерии, "
		//|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		//|	ОстаткиТоваров.Качество";
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить("Номенклатура");
		МассивОтбора.Добавить("НоменклатурнаяГруппа");
		//АБС
		МассивОтбора.Добавить("ВидНОменклатуры");
		МассивОтбора.Добавить("Контрагенты");
		МассивОтбора.Добавить("ДоговорыКонтрагентов");
		УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	КонецПроцедуры
	
	//АБС
Функция ПолучитьТекстЗапросаПоОстаткамБух() Экспорт
		Текст = 
		"ВЫБРАТЬ
		|	ЗабалансовыйУчетОстатки.Субконто1 КАК Номенклатура,
		|	"""" КАК ХарактеристикаНоменклатуры,
		|	"""" КАК СерияНоменклатуры,
		|	"""" КАК Качество,
		|	ЗабалансовыйУчетОстатки.Субконто1.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ЗабалансовыйУчетОстатки.Субконто1.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	СУММА(ВЫБОР
		|			КОГДА ЗабалансовыйУчетОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.ЗабалансовыйУчет.ТМЦНаСкладе)
		|				ТОГДА ЗабалансовыйУчетСумма.СуммаОстаток / ЗабалансовыйУчетСумма.КоличествоОстаток * ЗабалансовыйУчетОстатки.КоличествоОстаток
		|			ИНАЧЕ ЗабалансовыйУчетОстатки.СуммаОстаток
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ЗабалансовыйУчетОстатки.КоличествоОстаток) КАК Количество,
		|	0 КАК ЦенаВРознице,
		|	ЗабалансовыйУчетОстатки.Счет КАК СчетУчетаБУ
		|ИЗ
		|	РегистрБухгалтерии.ЗабалансовыйУчет.Остатки(
		|			&ДатаОстатков,
		|			,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто2 В ИЕРАРХИИ (&Склад)) КАК ЗабалансовыйУчетОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЗабалансовыйУчет.Остатки(&ДатаОстатков, , &Номенклатура, Организация = &Организация) КАК ЗабалансовыйУчетСумма
		|		ПО ЗабалансовыйУчетОстатки.Субконто1 = ЗабалансовыйУчетСумма.Субконто1
		|			И ЗабалансовыйУчетОстатки.Счет = ЗабалансовыйУчетСумма.Счет
		|{ГДЕ
		|	ЗабалансовыйУчетОстатки.Субконто1 КАК Номенклатура,
		|	ЗабалансовыйУчетОстатки.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ЗабалансовыйУчетОстатки.Субконто1.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ЗабалансовыйУчетОстатки.Счет.*}
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗабалансовыйУчетОстатки.Субконто1,
		|	ЗабалансовыйУчетОстатки.Счет,
		|	ЗабалансовыйУчетОстатки.Субконто1.ЕдиницаХраненияОстатков,
		|	ЗабалансовыйУчетОстатки.Субконто1.ЕдиницаХраненияОстатков.Коэффициент";
		возврат Текст;
	КонецФункции	
	
	//АБС
	Процедура ЗаполнитьПоМатериаламНаСкладе(ПостроительОтчета, ТолькоУчетные = Ложь) Экспорт
		
		ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
		
		ВалютаУпрУчета    = Константы.ВалютаУправленческогоУчета.Получить();
		СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		КурсУпрУчета      = СтруктураКурса.Курс;
		КратностьУпрУчета = СтруктураКурса.Кратность;
		
		Если ЗначениеЗаполнено(МестоЭксплуатацииПоСооружению) Тогда
			Параметр = "МестоЭксплуатацииПоСооружению = &МестоЭксплуатацииПоСооружению";
		Иначе
			Параметр = "";
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(МОЛ) Тогда
			ПараметрМОЛ = " И ФизЛицо = &МОЛ";
			Если Параметр = "" Тогда
				Параметр = "ФизЛицо = &МОЛ"; 	
			Иначе
				Параметр = Параметр + " И ФизЛицо = &МОЛ";
			КонецЕсли;
		Иначе
			ПараметрМОЛ = "";	
		КонецЕсли;
		
		//АБС
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ОтборПодразделения = " И Подразделение = &Подразделение";
		Иначе
			ОтборПодразделения = "";
			ОтборПодразделениеСПарам = "";
		КонецЕсли;
		//\\АБС
		
		ПостроительОтчета.Текст ="ВЫБРАТЬ
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура КАК Номенклатура,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ХарактеристикаНоменклатуры,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	СУММА(ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СтоимостьОстаток / ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.КоличествоОстаток * МатериалыВЭксплуатацииОстатки.КоличествоОстаток) КАК Сумма,
		|	СУММА(МатериалыВЭксплуатацииОстатки.КоличествоОстаток) КАК Количество,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СчетУчета,
		//АБС++ А. Ф. Фотов 22.10.09
		|	СУММА(ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СтоимостьОстаток / ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.КоличествоОстаток * МатериалыВЭксплуатацииОстатки.КоличествоОстаток) КАК СуммаУчет,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СчетУчета КАК СчетУчетаБУ,
		//АБС--
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ФизЛицо КАК МОЛ
		|ИЗ
		|	РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Остатки(&ДатаОстатков, Организация = &Организация " + ПараметрМОЛ + " "+ ОтборПодразделения +") КАК ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.МатериалыВЭксплуатации.Остатки(&ДатаОстатков, " + Параметр + ") КАК МатериалыВЭксплуатацииОстатки
		|		ПО ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура = МатериалыВЭксплуатацииОстатки.Номенклатура
		|			И ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ХарактеристикаНоменклатуры = МатериалыВЭксплуатацииОстатки.ХарактеристикаНоменклатуры
		|			И ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ФизЛицо = МатериалыВЭксплуатацииОстатки.ФизЛицо
		|{ГДЕ
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура КАК Номенклатура,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры}
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ХарактеристикаНоменклатуры,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СчетУчета,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ФизЛицо,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков,
		|	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
		
		Запрос = ПостроительОтчета.ПолучитьЗапрос();
		Запрос.УстановитьПараметр("МестоЭксплуатацииПоСооружению",МестоЭксплуатацииПоСооружению);
		Запрос.УстановитьПараметр("МОЛ",МОЛ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			Если Выборка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Выборка);
			СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
			
			Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
				СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СуммаРегл        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаУпрУчета,
			мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
			
			
		КонецЦикла;
		
	КонецПроцедуры
	//АБС
	Процедура ЗаполнитьПоМатериаламНаСкладеУпр(ПостроительОтчета, ТолькоУчетные = Ложь) Экспорт
		
		ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
		
		ВалютаУпрУчета    = Константы.ВалютаУправленческогоУчета.Получить();
		СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		КурсУпрУчета      = СтруктураКурса.Курс;
		КратностьУпрУчета = СтруктураКурса.Кратность;
		
		//Если ЗначениеЗаполнено(МОЛ) Тогда
		//	ПараметрМОЛ = "ФизЛицо = &МОЛ";
		//Иначе
		//	ПараметрМОЛ = "";
		//КонецЕсли;	
		//
		//Если ЗначениеЗаполнено(МестоЭксплуатацииПоСооружению) Тогда
		//	Параметр = "МестоЭксплуатацииПоСооружению = &МестоЭксплуатацииПоСооружению";
		//Иначе
		//	Параметр = "";
		//КонецЕсли;	
		//Если ЗначениеЗаполнено(МОЛ) Тогда
		//	Если Параметр = "" Тогда
		//		Параметр = "ФизЛицо = &МОЛ"; 	
		//	Иначе
		//		Параметр = Параметр + " И ФизЛицо = &МОЛ";
		//	КонецЕсли;
		//КонецЕсли;
		//
		//
		////Если ЗначениеЗаполнено(МОЛ) Тогда
		////	ПараметрМОЛ = " И ФизЛицо = &МОЛ";
		////	Если Параметр = "" Тогда
		////		Параметр = "ФизЛицо = &МОЛ"; 	
		////	Иначе
		////		Параметр = Параметр + " И ФизЛицо = &МОЛ";
		////	КонецЕсли;
		////Иначе
		////	ПараметрМОЛ = "";	
		////КонецЕсли;
		//
		////АБС
		////Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		////	ОтборПодразделения = " И Подразделение = &Подразделение";
		////Иначе
		////	ОтборПодразделения = "";
		////	ОтборПодразделениеСПарам = "";
		////КонецЕсли;
		////\\АБС
		//
		//ПостроительОтчета.Текст ="ВЫБРАТЬ
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура КАК Номенклатура,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ХарактеристикаНоменклатуры,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		//						 |	СУММА(ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СтоимостьОстаток / ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.КоличествоОстаток * МатериалыВЭксплуатацииОстатки.КоличествоОстаток) КАК Сумма,
		//						 |	СУММА(МатериалыВЭксплуатацииОстатки.КоличествоОстаток) КАК Количество,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СчетУчета,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ФизЛицо КАК МОЛ
		//						 |ИЗ
		//						 |	РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Остатки(&ДатаОстатков, Организация = &Организация " + ПараметрМОЛ + " "+ ОтборПодразделения +") КАК ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки
		//						 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.МатериалыВЭксплуатации.Остатки(&ДатаОстатков, " + Параметр + ") КАК МатериалыВЭксплуатацииОстатки
		//						 |		ПО ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура = МатериалыВЭксплуатацииОстатки.Номенклатура
		//						 |			И ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ХарактеристикаНоменклатуры = МатериалыВЭксплуатацииОстатки.ХарактеристикаНоменклатуры
		//						 |			И ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ФизЛицо = МатериалыВЭксплуатацииОстатки.ФизЛицо
		//						 |{ГДЕ
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура КАК Номенклатура,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры}
		//						 |
		//						 |СГРУППИРОВАТЬ ПО
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ХарактеристикаНоменклатуры,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.СчетУчета,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.ФизЛицо,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков,
		//						 |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
		  
		//ПостроительОтчета.Текст ="ВЫБРАТЬ
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура КАК Номенклатура,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.ХарактеристикаНоменклатуры,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		//						 |	СУММА(ПартииМатериаловВЭксплуатацииОстатки.СтоимостьОстаток / ПартииМатериаловВЭксплуатацииОстатки.КоличествоОстаток * МатериалыВЭксплуатацииОстатки.КоличествоОстаток) КАК Сумма,
		//						 |	СУММА(МатериалыВЭксплуатацииОстатки.КоличествоОстаток) КАК Количество,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.ФизЛицо КАК МОЛ
		//						 |ИЗ
		//						 |	РегистрНакопления.МатериалыВЭксплуатации.Остатки(&ДатаОстатков," + Параметр + " ) КАК МатериалыВЭксплуатацииОстатки
		//						 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииМатериаловВЭксплуатации.Остатки(&ДатаОстатков, "+ПараметрМОЛ+" ) КАК ПартииМатериаловВЭксплуатацииОстатки
		//						 |		ПО (ПартииМатериаловВЭксплуатацииОстатки.Номенклатура = МатериалыВЭксплуатацииОстатки.Номенклатура)
		//						 |			И (ПартииМатериаловВЭксплуатацииОстатки.ХарактеристикаНоменклатуры = МатериалыВЭксплуатацииОстатки.ХарактеристикаНоменклатуры)
		//						 |			И (ПартииМатериаловВЭксплуатацииОстатки.ФизЛицо = МатериалыВЭксплуатацииОстатки.ФизЛицо)
		//						 |{ГДЕ
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура.*,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура.НоменклатурнаяГруппа.* КАК НоменклатурнаяГруппа,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура.ВидНоменклатуры.* КАК ВидНоменклатуры}
		//						 |
		//						 |СГРУППИРОВАТЬ ПО
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.ХарактеристикаНоменклатуры,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура.ЕдиницаХраненияОстатков,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		//						 |	ПартииМатериаловВЭксплуатацииОстатки.ФизЛицо";
		//МассивОтбора = Новый Массив;
		//МассивОтбора.Добавить("Номенклатура");
		//МассивОтбора.Добавить("НоменклатурнаяГруппа");
		//АБС
		//МассивОтбора.Добавить("ВидНОменклатуры");
		//УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
		//УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭтотОбъект.ПолучитьФорму.ЭлементыФормы, ПостроительОтчета.Отбор, ,"ПостроительОтчета.Отбор");

		Запрос = ПостроительОтчета.ПолучитьЗапрос();
		Запрос.УстановитьПараметр("МестоЭксплуатацииПоСооружению",МестоЭксплуатацииПоСооружению);
		Запрос.УстановитьПараметр("МОЛ",МОЛ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			Если Выборка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Выборка);
			СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
			
			Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
				СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СуммаРегл        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаУпрУчета,
			мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
			
			
		КонецЦикла;
		
	КонецПроцедуры
	//\\АБС
	
#КонецЕсли
Функция СформироватьТаблицуОстатковЗатратПоМПЗ(ТекстОтбора, УпрУчет = Истина)
	ТекстЗапроса = "ВЫБРАТЬ
	|	РегАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,"
	+?(УчитыватьСерии, "
	|	РегАналитикаУчетаЗатрат.СерияЗатраты КАК СерияНоменклатуры,","")+"
	|	РегАналитикаУчетаЗатрат.Качество,
	|	Сумма(УчетЗатратРеглОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	Сумма(УчетЗатратРеглОстатки.СтоимостьОстаток) КАК СтоимостьОстаток
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Остатки(
	|			&ДатаОстатков,
	|			АналитикаВидаУчета В
	|				(ВЫБРАТЬ
	|					АналитикаВидаУчета.Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|				ГДЕ
	|					АналитикаВидаУчета.РазделУчета = &РазделУчета
	|					И " + ТекстОтбора + ")) КАК УчетЗатратРеглОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
	|		ПО УчетЗатратРеглОстатки.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	РегАналитикаУчетаЗатрат.Затрата,
	|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты,"
	+?(УчитыватьСерии, "
	|	РегАналитикаУчетаЗатрат.СерияЗатраты,","")+"
	|	РегАналитикаУчетаЗатрат.Качество";
	
	Если УпрУчет И глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"УчетЗатратРегл","УчетЗатрат");
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции	

// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамНаСкладеРасширеннаяАналитика(ПостроительОтчета, ДатаОстатков, ТолькоУчетные = Ложь, УпрУчет=Истина)
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
	
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	Если УпрУчет 
		И НЕ глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ОбщегоНазначения.Сообщение("Для выбранного режима использования расширенной аналитики управленческий учет себестоимости не ведется.
		|Суммы в документе могут быть заполнены не верно");
	КонецЕсли;	
	
	ТекстЗапроса = СформироватьТаблицуОстатковЗатратПоМПЗ("Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация", УпрУчет);
	
	СтруктураИзмерений = Новый Структура("ХарактеристикаЗатраты, СерияЗатраты, Качество");
	РасширеннаяАналитикаУчета.ПолучитьИспользуемыеИзмерения(СтруктураИзмерений, УпрУчет);
	ПостроительОтчета.Текст = ПолучитьТекстЗапросаПоОстаткамБух();
	
	Запрос = ПостроительОтчета.ПолучитьЗапрос();
	
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДатаОстатков",    ДатаОстатков);		
	Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.МПЗ);
	//АБС
	ВидыСубконто=новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если НЕ УчитыватьХарактеристики Тогда
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("Номенклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",Организация);
	//\\АБС	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
		СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.КоличествоУчет);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.КоэффициентЕдиницыХранения;
		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		Иначе
			СтрокаТабличнойЧасти.СуммаУчет        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, мВалютаРегламентированногоУчета,
			ВалютаУпрУчета, 1, КурсУпрУчета, 1, КратностьУпрУчета);
		КонецЕсли;											
		
		СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.СуммаУчет);
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;
		
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтрокаТабличнойЧасти.ЦенаВРознице = Выборка.ЦенаВРознице;
		Иначе
			СтрокаТабличнойЧасти.Качество     = Выборка.Качество;
		КонецЕсли;
		
		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.СуммаРегл        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаУпрУчета,
			мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
		Иначе
			СтрокаТабличнойЧасти.СуммаРегл = Выборка.Сумма;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Если УчитыватьСерии Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;
		//АБС
		Если НЕ УчитыватьХарактеристики Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ=Выборка.СчетУчетаБУ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамНаСкладе(ПостроительОтчета, ТолькоУчетные = Ложь, УпрУчет=Истина) Экспорт
	
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (НЕ ЗначениеЗаполнено(ДатаОстатков)
		ИЛИ (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата)) Тогда
		ЗаполнитьПоОстаткамНаСкладеРасширеннаяАналитика(ПостроительОтчета, ДатаОстатков, ТолькоУчетные, УпрУчет);
		Возврат;
	КонецЕсли;	
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
	
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
			ПостроительОтчета.Текст = ПолучитьТекстЗапросаПоОстаткамБух();
		
	Запрос = ПостроительОтчета.ПолучитьЗапрос();
	
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	ВидыСубконто=новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если НЕ УчитыватьХарактеристики Тогда
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("Номенклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",Организация);
	//\\АБС
	Если НЕ УпрУчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.ПартииТоваровНаСкладах","РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет");
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
		СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.КоличествоУчет);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.КоэффициентЕдиницыХранения;
		
		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		Иначе
			СтрокаТабличнойЧасти.СуммаУчет        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, мВалютаРегламентированногоУчета,
			ВалютаУпрУчета, 1, КурсУпрУчета, 1, КратностьУпрУчета);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.СуммаУчет);
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;
		
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтрокаТабличнойЧасти.ЦенаВРознице = Выборка.ЦенаВРознице;
		Иначе
			СтрокаТабличнойЧасти.Качество     = Выборка.Качество;
		КонецЕсли;
		
		Если НЕ ТолькоУчетные Тогда
			Если УпрУчет Тогда
				СтрокаТабличнойЧасти.СуммаРегл        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, ВалютаУпрУчета,
				мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
			Иначе											
				СтрокаТабличнойЧасти.СуммаРегл        = Выборка.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Если УчитыватьСерии Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;
		
		Если НЕ УчитыватьХарактеристики Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ=Выборка.СчетУчетаБУ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

// Процедура перезаполняет учетные количества в документе
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПерезаполнитьУчетныеКоличестваРасширеннаяАналитика(ДатаОстатков,ПостроительОтчета,УпрУчет) Экспорт
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
	
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	Если УпрУчет 
		И НЕ глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ОбщегоНазначения.Сообщение("Для выбранного режима использования расширенной аналитики управленческий учет себестоимости не ведется.
		|Суммы в документе могут быть заполнены не верно");
	КонецЕсли;	
	
	ТекстЗапроса = СформироватьТаблицуОстатковЗатратПоМПЗ("Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация", УпрУчет);
	
	СтруктураИзмерений = Новый Структура("ХарактеристикаЗатраты, СерияЗатраты, Качество");
	РасширеннаяАналитикаУчета.ПолучитьИспользуемыеИзмерения(СтруктураИзмерений, УпрУчет);
	
	
	Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;
		
		ПостроительОтчета.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,","") + "
		|	ОстаткиТоваров.Качество,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток)                         КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                           КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&МоментДокумента, 
		|	                Номенклатура в (ВЫБРАТЬ Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад)
		|КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(" + ТекстЗапроса + ") КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура"
		+?(СтруктураИзмерений.ХарактеристикаЗатраты,"
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры","")+"
		|	И ОстаткиПартий.Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)"
		+?(УчитыватьСерии И СтруктураИзмерений.СерияЗатраты, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "")
		+?(СтруктураИзмерений.Качество,"
		|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество","")+"
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|     ОстаткиТоваров.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Качество";
		
	Иначе
		
		ПостроительОтчета.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                                           КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&МоментДокумента,
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(" + ТекстЗапроса + ") КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура"
		+?(СтруктураИзмерений.ХарактеристикаЗатраты,"
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры","")
		+?(УчитыватьСерии И СтруктураИзмерений.СерияЗатраты, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "") + "
		|	И ОстаткиПартий.Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)		
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|     ОстаткиТоваров.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице";
		
	КонецЕсли;
	
	Запрос = ПостроительОтчета.ПолучитьЗапрос();
	
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДокументСсылка",  Ссылка);
	Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.МПЗ);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатков",  Запрос.Параметры.МоментДокумента);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабличнойЧасти ИЗ Товары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
		Если УчитыватьСерии Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры",      СтрокаТабличнойЧасти.СерияНоменклатуры);
		КонецЕсли;
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда	
			СтруктураПоиска.Вставить("ЦенаВРознице", СтрокаТабличнойЧасти.ЦенаВРознице);
		Иначе
			СтруктураПоиска.Вставить("Качество",     СтрокаТабличнойЧасти.Качество);
		КонецЕсли;
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			Если УпрУчет Тогда
				СтрокаТабличнойЧасти.КоличествоУчет = 0;
				СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Иначе	
				СтрокаТабличнойЧасти.СуммаРегл		= 0;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
			МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения
			/ СтрокаТабличнойЧасти.Коэффициент);
			
			СтрокаТабличнойЧасти.СуммаУчет        = МассивСтрок[0].Сумма;
			
			СтрокаТабличнойЧасти.Цена           = ?(СтрокаТабличнойЧасти.КоличествоУчет = 0, 0,
			СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет);
			
		Иначе
			СтрокаТабличнойЧасти.СуммаРегл = МассивСтрок[0].Сумма;										
		КонецЕсли;										
		
	КонецЦикла;
КонецПроцедуры  // ПерезаполнитьУчетныеКоличества()

// Процедура перезаполняет учетные количества в документе
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПерезаполнитьУчетныеКоличества(ПостроительОтчета,УпрУчет=Истина) Экспорт
	
	#Если Клиент Тогда
		Если Товары.Количество() > 0 Тогда
			Если УпрУчет Тогда
				ТекстВопроса = "Перезаполнить учетные количества и суммы по данным управленческого учета?";
			Иначе
				ТекстВопроса = "Перезаполнить сумму регламентированного учета?";
			КонецЕсли;
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли;
		
		// Документ должен быть записан, чтобы этот запрос сработал.
		Если Модифицированность() Тогда
			ТекстВопроса = "Перед заполнением следует записать документ.
			|Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	#КонецЕсли
	
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (НЕ ЗначениеЗаполнено(ДатаОстатков)
		ИЛИ (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата)) Тогда
		ПерезаполнитьУчетныеКоличестваРасширеннаяАналитика(ДатаОстатков,ПостроительОтчета,УпрУчет);
		Возврат;
	КонецЕсли;	
	
	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
	
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;
		
		ПостроительОтчета.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,","") + "
		|	ОстаткиТоваров.Качество,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток)                         КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                          КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&МоментДокумента, 
		|	                Номенклатура в (ВЫБРАТЬ Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад)
		|КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "") + "
		|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|     ОстаткиТоваров.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Качество";
		
	Иначе
		
		ПостроительОтчета.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&МоментДокумента,
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "") + "
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|     ОстаткиТоваров.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице";
		
	КонецЕсли;
	
	Запрос = ПостроительОтчета.ПолучитьЗапрос();
	
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДокументСсылка",  Ссылка);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	КонецЕсли;
	
	Если НЕ УпрУчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.ПартииТоваровНаСкладах","РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет");
	КонецЕсли;	
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабличнойЧасти ИЗ Товары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
		Если УчитыватьСерии Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры",      СтрокаТабличнойЧасти.СерияНоменклатуры);
		КонецЕсли;
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда	
			СтруктураПоиска.Вставить("ЦенаВРознице", СтрокаТабличнойЧасти.ЦенаВРознице);
		Иначе
			СтруктураПоиска.Вставить("Качество",     СтрокаТабличнойЧасти.Качество);
		КонецЕсли;
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			Если УпрУчет Тогда
				СтрокаТабличнойЧасти.КоличествоУчет = 0;
				СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Иначе	
				СтрокаТабличнойЧасти.СуммаРегл		= 0;
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
			МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения
			/ СтрокаТабличнойЧасти.Коэффициент);
			
			СтрокаТабличнойЧасти.СуммаУчет = МассивСтрок[0].Сумма;
			
			СтрокаТабличнойЧасти.Цена           = ?(СтрокаТабличнойЧасти.КоличествоУчет = 0, 0,
			СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет);
			
		Иначе
			СтрокаТабличнойЧасти.СуммаРегл = МассивСтрок[0].Сумма;										
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры  // ПерезаполнитьУчетныеКоличества()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()


Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

//\\АБС
	Процедура ЗаполнитьПоМатериаламПереданным(ПостроительОтчета, ТолькоУчетные = Ложь) Экспорт
		
		ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
		
		

		Запрос = ПостроительОтчета.ПолучитьЗапрос();
		//Запрос.УстановитьПараметр("МестоЭксплуатацииПоСооружению",МестоЭксплуатацииПоСооружению);
		//Запрос.УстановитьПараметр("МОЛ",МОЛ);
		//Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет10_07",ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		Запрос.УстановитьПараметр("Период", ДатаОстатков);
		//Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			Если Выборка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Выборка);
			СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
			
			Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
				СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
			//СтрокаТабличнойЧасти.СуммаРегл        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаУпрУчета,
			//мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
			
			
		КонецЦикла;
		
	КонецПроцедуры

//АБС

//АБС ВСТАВКА 48314  15.10.2014 14:09:23  Шамов			
Функция абс_ПолучитьДолжностьСотрудникаПоФизлицу(ФизЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СотрудникиОрганизаций.Должность
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |ГДЕ
	               |	СотрудникиОрганизаций.Физлицо = &Физлицо
	               |	И СотрудникиОрганизаций.абс_СтатусСотрудника = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыСотрудников.Работает)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СотрудникиОрганизаций.Ссылка УБЫВ";
	Запрос.УстановитьПараметр("Физлицо",ФизЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Должность;
	Иначе
		Возврат Справочники.ДолжностиОрганизаций.ПустаяСсылка();
	КонецЕсли;
КонецФункции
//\\

	//Функция ПолучитьТекстЗапросаПоОстаткамБух() Экспорт
	//	Текст = 
	//	"ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	//	|	"""" КАК ХарактеристикаНоменклатуры,
	//	|	"""" КАК СерияНоменклатуры,
	//	|	"""" КАК Качество,
	//	|	ХозрасчетныйОстатки.Субконто1.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	//	|	ХозрасчетныйОстатки.Субконто1.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	//	|	СУММА(Сумма.СуммаОстаток / Сумма.КоличествоОстаток * ХозрасчетныйОстатки.КоличествоОстаток) КАК Сумма,
	//	|	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК Количество,
	//	|	0 КАК ЦенаВРознице,
	//	|	ХозрасчетныйОстатки.Счет КАК СчетУчетаБУ
	//	|{ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Субконто1.*,
	//	|	ХозрасчетныйОстатки.Субконто2.*,
	//	|	ХозрасчетныйОстатки.Субконто3.*}
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	//	|			&ДатаОстатков,
	//	|			,
	//	|			&ВидыСубконто,
	//	|			Организация = &Организация
	//	|				И Субконто2 В ИЕРАРХИИ (&Склад)) КАК ХозрасчетныйОстатки
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, , &Номенклатура, Организация = &Организация) КАК Сумма
	//	|		ПО ХозрасчетныйОстатки.Субконто1 = Сумма.Субконто1
	//	|			И ХозрасчетныйОстатки.Счет = Сумма.Счет
	//	|{ГДЕ
	//	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	//	|	ХозрасчетныйОстатки.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	//	|	ХозрасчетныйОстатки.Субконто1.ВидНоменклатуры КАК ВидНоменклатуры,
	//	|	ХозрасчетныйОстатки.Субконто2 КАК Контрагенты,
	//	|	ХозрасчетныйОстатки.Субконто3 КАК ДоговорыКонтрагентов}
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ХозрасчетныйОстатки.Субконто1,
	//	|	ХозрасчетныйОстатки.Счет,
	//	|	ХозрасчетныйОстатки.Субконто1.ЕдиницаХраненияОстатков,
	//	|	ХозрасчетныйОстатки.Субконто1.ЕдиницаХраненияОстатков.Коэффициент";
	//	возврат Текст;
	//КонецФункции
	
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУпрУчета                 = Константы.ВалютаУправленческогоУчета.Получить();

