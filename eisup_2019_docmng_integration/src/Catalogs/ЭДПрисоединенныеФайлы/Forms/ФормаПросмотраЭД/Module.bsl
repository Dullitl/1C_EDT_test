
/////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	Если Элементы.КомандаОтклонить.Пометка Тогда
		ТекСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ТекСтатусЭД = Перечисления.СтатусыЭД.Получен;
	Иначе
		ТекСтатусЭД = Перечисления.СтатусыЭД.Сформирован;
	КонецЕсли;
	
	Если НЕ Объект.СтатусЭД = ТекСтатусЭД Тогда
		Объект.СтатусЭД = ТекСтатусЭД;
		ОбъектДокумент = РеквизитФормыВЗначение("Объект");
		ОбъектДокумент.Записать();
		ЭлектронныеДокументы.ОбновитьВерсиюЭД(Объект.Ссылка);
		ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
		ТребуетсяПодпись = НеобходимоПодписать();
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДоступностью(ИзменятьЗаголовок = Ложь)
	
	Элементы.ГруппаСодержимоеДокумента.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Если Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда // для входящих
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандВх;
		Элементы.КомандаПодписать.Видимость= Ложь;
		
		Если НЕ ТребуетсяПодпись Тогда // не подписываем
			Элементы.КомандаУтвердитьЭД.Видимость = НЕ Элементы.КомандаОтклонить.Пометка;
			Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
		Иначе
			Элементы.КомандаОтправитьПодтверждениеЭД.Видимость  = НЕ Элементы.КомандаОтклонить.Пометка;
			Элементы.КомандаУтвердитьЭД.Видимость = Ложь;
		КонецЕсли;
		Элементы.КомандаОтправитьЭД.Видимость = Ложь;
	ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда // для исходящих
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		Элементы.КомандаПодписать.Видимость = Ложь;
		Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
		Элементы.КомандаУтвердитьЭД.Видимость = Ложь;
		
		Элементы.КомандаВыбратьДокумент.Видимость= Ложь;
		Элементы.КомандаОтправитьЭД.Заголовок = ОпределитьЗаголовокПоНастройкам();
	ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда // для интеркампани
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
		Элементы.КомандаВыбратьДокумент.Видимость= Ложь;
		Элементы.КомандаОтправитьЭД.Видимость = Ложь;
		Элементы.ОбработкаЭлектронныеДокументыПереотправитьЭД.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ЗаголовокОтраженВУчете.Доступность= НЕ Элементы.КомандаОтклонить.Пометка;
	Элементы.ПерезаполнитьДокумент.Доступность = НЕ Элементы.КомандаОтклонить.Пометка;
	Элементы.КомандаОтправитьПодтверждениеЭД.Доступность = НЕ Элементы.КомандаОтклонить.Пометка;
	
	Элементы.КомандаОтправитьЭД.Доступность = ОтраженВУчете;
	Элементы.КомандаОтправитьПодтверждениеЭД.Доступность = ОтраженВУчете;
	Элементы.КомандаУтвердитьЭД.Доступность = (Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
												ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Получен);
	Элементы.ОбработкаЭлектронныеДокументыПереотправитьЭД.Доступность = ОтраженВУчете;
	
	ОчиститьОповещениеОНеактуальности();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если НЕ ОтраженВУчете Тогда
		Если НомерОтраженнойВУчетеВерсии=0 ИЛИ Объект.НомерВерсииЭД <= НомерОтраженнойВУчетеВерсии Тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " - неактуальный";
		ИначеЕсли Объект.НомерВерсииЭД > НомерОтраженнойВУчетеВерсии Тогда 
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " - новый";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьЗаголовокПоНастройкам()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеЦифровыеПодписи") И ТребуетсяПодпись Тогда
		Возврат НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;

	Возврат НСтр("ru = 'Утвердить и отправить'");
	
КонецФункции

&НаСервере
Процедура ОчиститьОповещениеОНеактуальности()
	
	ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, " - неактуальный", "");
	ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, " - новый", "");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусЭД(СтатусЭД = Неопределено, ДатаИзмененияСтатусаЭД = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СтатусЭД) Тогда
		СтатусЭД = Объект.Ссылка.СтатусЭД;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаИзмененияСтатусаЭД) Тогда
		ДатаИзмененияСтатусаЭД = Объект.Ссылка.ДатаИзмененияСтатусаЭД;
	КонецЕсли;
	ТекстСтатусЭД = " " +  СтатусЭД + ", " + Формат(ДатаИзмененияСтатусаЭД, "ДЛФ=");
	
	ТекстСостояния = ЭлектронныеДокументы.ПолучитьТекстСостоянияЭД(Объект.ВладелецФайла.Ссылка);
	ТекстДокументИБ = Строка(Объект.ВладелецФайла.Ссылка)+?(ЗначениеЗаполнено(ТекстСостояния),", состояние: "+ТекстСостояния,"");
	
	ЗапросПоОтражению = Новый Запрос;
	ЗапросПоОтражению.УстановитьПараметр("СсылкаНаОбъект", Объект.ВладелецФайла);

	ЗапросПоОтражению.Текст = "ВЫБРАТЬ
	                          |	СостоянияЭД.СсылкаНаОбъект,
	                          |	СостоянияЭД.ЭлектронныйДокумент
	                          |ИЗ
	                          |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	                          |ГДЕ
	                          |	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
							  
	Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда	
		НомерОтраженнойВУчетеВерсии = Выборка.ЭлектронныйДокумент.НомерВерсииЭД;
		ОтраженВУчете = Объект.Ссылка = Выборка.ЭлектронныйДокумент;
	КонецЕсли;
	
	ТЗ = ПолучитьТаблицуСтатусовЭД(Объект);
	Если ЗначениеЗаполнено(ТЗ) Тогда
		ЗначениеВРеквизитФормы(ТЗ, "СтатусыЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭЦП()
	
	Если НЕ ЗначениеЗаполнено(ТекущееСоглашениеОбИспользованииЭД) // нет соглашения
		ИЛИ НЕ ТекущееСоглашениеОбИспользованииЭД.ПроверятьСертификатыПодписей Тогда // не проверяем соотв-вия сертификатов контрагента из списка
		ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
		ТаблицаЭЦП.Очистить();
		Для Каждого ТекСтрока Из Объект.ЭлектронныеЦифровыеПодписи Цикл
			НоваяСтрока = ТаблицаЭЦП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковОжидаемыхСертификатов = ЭлектронныеДокументы.ПолучитьОтпечаткиОжидаемыхСертификатов(ТекущееСоглашениеОбИспользованииЭД);
	
	ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
	ТаблицаЭЦП.Очистить();
	Для Каждого ТекСтрока Из Объект.ЭлектронныеЦифровыеПодписи Цикл
		НоваяСтрока = ТаблицаЭЦП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
			НоваяСтрока.ОтсутствуетВСписке = Истина;
			НоваяСтрока.ВыводКартинки = 1;
		Иначе
			НоваяСтрока.ВыводКартинки = 0;
		КонецЕсли;
		ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи (НоваяСтрока, ТекСтрока)
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВерна = ?(ТекСтрока.ПодписьВерна, "Верна", "Не верна") +" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВерна = "Не проверена";
	КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)  Тогда
		Отказ = Истина;
	Иначе	
		Если Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			Элементы.КомандаОтклонить.Пометка = Истина;	
		КонецЕсли;
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		ЭтаФорма.Заголовок = ЭлектронныеДокументы.ПолучитьПредставлениеЭД(Объект.Ссылка);
		УправлениеВидимостьюДоступностью();
		ТекущееСоглашениеОбИспользованииЭД = НайтиСоглашениеОбИспользованииЭД();
		ЗаполнитьТаблицуЭЦП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// ответ на заказ никогда не подписывает покупатель или документ отклонен
	Если НЕ( Объект.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ И Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		ИЛИ Элементы.КомандаОтклонить.Пометка) Тогда 
		ФлагПодписи = ЭлектронныеДокументы.НеобходимоПодписать(Объект.Ссылка);
	КонецЕсли;
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;    
	ЗапросПоСертификатам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	СертификатыЭЦПВидыДокументов.Ссылка
	                             |ИЗ
	                             |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	                             |ГДЕ
	                             |	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	                             |	И (СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = &ТекущийПользователь
	                             |			ИЛИ СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	                             |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	                             |	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатков)
	                             |	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
	                             |	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи";
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);    
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);    
	ЗапросПоСертификатам.УстановитьПараметр("ВидДокумента", Объект.ВидЭД);
	
	ВозвращаемыйПараметр = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеЦифровыеПодписи") // Включено использование ЭЦП
							И НЕ (ЗапросПоСертификатам.Выполнить().Пустой())                     // Имеются доступные сертификаты
							И ТребуетсяПодпись;
	Возврат ВозвращаемыйПараметр;							 
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьНаКлиенте()
	Если Объект.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Интеркампани") Тогда
		Попытка
			МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		Исключение
			МассивСтруктурСертификатов = Новый Массив;
		КонецПопытки;
		ЕстьВозможностьПодписать			  = ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);
		Элементы.КомандаПодписать.Видимость   = ЕстьВозможностьПодписать;
		Элементы.КомандаУтвердитьЭД.Видимость = НЕ ЕстьВозможностьПодписать;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	                                 
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьВидимостьНаКлиенте();  
		ВыполнитьПросмотрЭДИзБД(Отказ);
	Иначе
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭЦППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ЭЦП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗначение(Объект.ВладелецФайла);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаСервере
Функция ПолучитьДанныеЭДНаСервере()
	
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Объект.Ссылка, ЭтаФорма.УникальныйИдентификатор, Истина);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла") 
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip")>0 Тогда // формат zip 
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = КаталогВременныхФайлов() + Объект.Ссылка.УникальныйИдентификатор() + "\";
			
			Если ПапкаДляРаспаковки = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
			УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			
			ФлагПросмотра = Ложь;
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
				Если Найти(РаспакованныйФайл.Имя,"packageDescription") Тогда //это пакет ЭД
					Возврат ИмяФайла;
				КонецЕсли;
				ТабличныйДокумент = ЭлектронныеДокументыФорматОбмена.СформироватьПечатнуюФормуЭД(
																		РаспакованныйФайл.ПолноеИмя, 
																		Объект.Ссылка.НаправлениеЭД, 
																		Объект.Ссылка.УникальныйИдентификатор()
																								);
				Если ТипЗнч(ТабличныйДокумент)=Тип("ТабличныйДокумент") Тогда
					Возврат ТабличныйДокумент;
				КонецЕсли;
			КонецЦикла;
			ФайлыАрхиваMXL = НайтиФайлы(ПапкаДляРаспаковки, "*.mxl");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваMXL Цикл
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
				ТабличныйДокумент = Новый ТабличныйДокумент;
				ТабличныйДокумент.Прочитать(ИмяФайлаДанных);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат ТабличныйДокумент;
			КонецЦикла;
			ФайлыАрхиваHTML = НайтиФайлы(ПапкаДляРаспаковки, "*.html");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваHTML Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
			ФайлыАрхиваDOCX = НайтиФайлы(ПапкаДляРаспаковки, "*.docx");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваDOCX Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
			ФайлыАрхиваXLS = НайтиФайлы(ПапкаДляРаспаковки, "*.xls");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXLS Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
		Иначе // другой формат
			Возврат ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПросмотрЭДИзБД(Отказ = Ложь)
	#Если ВебКлиент Тогда
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			
			УстановитьРасширениеРаботыСФайлами();
			ПодключитьРасширениеРаботыСФайлами();
		КонецЕсли;
				
	#КонецЕсли
		
	ДанныеЭД = ПолучитьДанныеЭДНаСервере();
	Если ДанныеЭД = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокументФормы = ДанныеЭД;
		Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
	ИначеЕсли ВРег(Сред(ДанныеЭД,СтрДлина(ДанныеЭД)-4)) = ".HTML" Тогда	
		ПутьКФайлуПросмотра = ДанныеЭД;
		Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаДругойФормат;
	Иначе
		ЗапуститьПриложение(ДанныеЭД);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВыполнитьОбработкуОповещенияНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ЭтаФорма.Прочитать();
	ЗаполнитьТаблицуЭЦП();
	ОбновитьСтатусЭД();
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	КолОбработанных = ПерезаполнитьДокументПоЭД();
	Если КолОбработанных > 0 Тогда
		Оповестить("ОбновитьСостояниеЭД");
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
	КонецЕсли;
	ТекстСостоянияВывод = НСтр("ru = 'Заполнено: (%1)'");	
	ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, КолОбработанных);
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,ТекстСостоянияВывод);
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьДокументПоЭД()
	
	КолОбработанных = 0;
	Попытка
		Результат = ПерезаполнитьДокументИБПоЭД(Объект.ВладелецФайла, Объект.Ссылка);
		КолОбработанных = ?(Результат, 1, 0);
	Исключение
	КонецПопытки;
	
	Если КолОбработанных = 1 Тогда
		УстановитьСостояниеЭДПоСтатусу();
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ЭлектронныеДокументы.ПолучитьПредставлениеЭД(Объект.Ссылка);
	
	Возврат КолОбработанных;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеЭДПоСтатусу()
		
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Объект.ВладелецФайла);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()>0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		НоваяЗаписьНабора.СостояниеВерсииЭД 	= ЭлектронныеДокументы.ОпределитьСостояниеВерсииПоСтатусуЭД(Объект.Ссылка);
		НоваяЗаписьНабора.ЭлектронныйДокумент 	= Объект.Ссылка;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеНаДиске = Новый Файл(ИмяФайлаДанных); // имя файла данных заполняться должно при чтении данных
	Если НЕ ДанныеНаДиске.Существует() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл данных не обнаружен: %1'"), ИмяФайлаДанных);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",		СсылкаНаВладельца);	
	СтруктураПараметров.Вставить("ПолноеИмяФайла", 	ИмяФайлаДанных);
			
	СтруктураЭД = ЭлектронныеДокументыФорматОбмена.РазобратьФайлДанных(СтруктураПараметров);
	Возврат СтруктураЭД.Загружен;
	
КонецФункции

&НаКлиенте
Процедура Отклонить(Команда)
	
	Элементы.КомандаОтклонить.Пометка = НЕ Элементы.КомандаОтклонить.Пометка;
	ИзменитьСтатусОтклонить();
	Оповестить("ОбновитьСостояниеЭД");

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	ЭтаФорма.Модифицированность = Ложь;
	ТекстПредупреждения = НСтр("ru = 'Внимание! Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?'");
	Ответ = Вопрос(ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
		
	ВыбЗнач = Объект.ВладелецФайла;
	ОписаниеТипов = Новый ОписаниеТипов();
	
	Если ВвестиЗначение(ВыбЗнач, "Укажите документ отражения в учете") Тогда
		ПерепривязатьЭлектронныйДокумент(ВыбЗнач);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ПерепривязатьЭлектронныйДокумент(ВыбранноеЗначение)
	ЭлектронныйДокумент = РеквизитФормыВЗначение("Объект");
	СтарыйВладелец = ЭлектронныйДокумент.ВладелецФайла;
	ЭлектронныйДокумент.ВладелецФайла = ВыбранноеЗначение;
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент.Автор) Тогда
		ЭлектронныйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	ОбновитьСостояниеЭДВладельцев(ЭлектронныйДокумент.Ссылка, СтарыйВладелец, ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент, "Объект");
	ТекстДокументИБ = Строка(Объект.ВладелецФайла.Ссылка)+?(ЗначениеЗаполнено(ТекстСостояния),", состояние: "+ТекстСостояния,"");
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭДВладельцев (ЭД, СтарыйВладелец, НовыйВладелец)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СостоянияЭД.СсылкаНаОбъект
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |ГДЕ
	               |	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаСтарыйДокумент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СостоянияЭД.СсылкаНаОбъект
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |ГДЕ
	               |	(НЕ СостоянияЭД.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка))
	               |	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаНовыйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Запрос.УстановитьПараметр("СсылкаНаСтарыйДокумент", СтарыйВладелец);
	Запрос.УстановитьПараметр("СсылкаНаНовыйДокумент", НовыйВладелец);

	Выборка = Запрос.ВыполнитьПакет();
	
	Результат1 = Выборка[0].Выбрать();
	Если Результат1.Следующий() Тогда
		ЗапросПоПослВерсии = Новый Запрос;
		ЗапросПоПослВерсии.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		                           |	ЭДПрисоединенныеФайлы.Ссылка
		                           |ИЗ
		                           |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		                           |ГДЕ
		                           |	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		                           |
		                           |УПОРЯДОЧИТЬ ПО
		                           |	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
		ЗапросПоПослВерсии.УстановитьПараметр("ВладелецФайла", СтарыйВладелец);
		РезультатЗапросаПоПослВерсии = ЗапросПоПослВерсии.Выполнить().Выбрать();
		Если РезультатЗапросаПоПослВерсии.Следующий() Тогда
			НовыйАктуальныйЭД  = РезультатЗапросаПоПослВерсии.Ссылка;
		Иначе	
			НовыйАктуальныйЭД = Неопределено;
		КонецЕсли;
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(СтарыйВладелец, НовыйАктуальныйЭД)
	КонецЕсли;
	
	Результат2 = Выборка[1].Выбрать();
	Если НЕ Результат2.Следующий() Тогда
		ЭлектронныеДокументыСобытия.УстановитьНовуюВерсиюЭД(НовыйВладелец, ЭД);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриЗакрытии()
   #Если Не ВебКлиент Тогда	
	УдалитьФайлы(КаталогВременныхФайлов() + Объект.НомерЭД);
	УдалитьФайлы(ИмяФайла);
   #КонецЕсли
КонецПроцедуры

&НаСервере
Функция ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус 	= Статус;
	НовСтрока.Пройден 	= Значение;
	
КонецФункции

&НаСервере
Функция ЗаполнитьКартуСтатусовЭД(ЭД, ВидЭД, НаправлениеЭД, ТребуетсяПодпись)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	Запрос.УстановитьПараметр("Контрагент", ЭД.Контрагент);
	Запрос.УстановитьПараметр("Организация", ЭД.Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Соглашение.ИспользоватьПодпись,
	               |	Соглашение.ИспользоватьКвитанции
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
	               |		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ИспользоватьКвитанции,
	               |		ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий) КАК НаправлениеЭД
	               |	ИЗ
	               |		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	               |	ГДЕ
	               |		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	               |		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	               |		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	               |		И НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	               |		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.статусыСоглашенийЭД.Действует)
	               |		И СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
	               |		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
	               |		ВЫБОР
	               |			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	               |		КОНЕЦ
	               |	ИЗ
	               |		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	               |	ГДЕ
	               |		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	               |		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	               |		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	               |		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.статусыСоглашенийЭД.Действует)
	               |		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
	               |ГДЕ
	               |	Соглашение.НаправлениеЭД = &НаправлениеЭД";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, Результат[0], НаправлениеЭД);
	КонецЕсли;

	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов, НаправлениеЭД)
	Если ТекущееСоглашениеОбИспользованииЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда

			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Сформирован);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Утвержден);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Подписан);	
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Отправлен);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПолученоПодтверждение);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ОтправленоИзвещение);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПолученоИзвещение);
		Иначе
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Получен);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Утвержден);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Подписан);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ОтправленоИзвещение);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПолученоПодтверждение);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ОтправленоИзвещение);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПолученоПодтверждение);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ОтправленоИзвещение);
        КонецЕсли;
	Иначе
		
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Сформирован);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиСтатусов.ИспользоватьПодпись Тогда
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПодготовленКОтправке);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Отправлен);
			Если НастройкиСтатусов.ИспользоватьКвитанции Тогда
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Доставлен);
			КонецЕсли;
			Если НастройкиСтатусов.ИспользоватьПодпись Тогда
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПолученоПодтверждение);
			КонецЕсли;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Сформирован);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиСтатусов.ИспользоватьПодпись Тогда
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ЧастичноПодписан);
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПолностьюПодписан);
			КонецЕсли;
		Иначе
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Получен);
			ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиСтатусов.ИспользоватьПодпись Тогда
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.Подписан);
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
				ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ОтправленоПодтверждение);
				Если НастройкиСтатусов.ИспользоватьКвитанции Тогда
					ДобавитьСтатус(КартаСтатусовЭД, Перечисления.СтатусыЭД.ДоставленоПодтверждение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = ЗаполнитьКартуСтатусовЭД(ЭД, ЭД.ВидЭД, ЭД.НаправлениеЭД, ТребуетсяПодпись);
	ПризнакПройден = Истина;
	Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл 
		ТекСтрока.Пройден = ПризнакПройден;
		Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
			И ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
			Прервать; // дальше нет необходимости обновлять статусы
		КонецЕсли;
		Если ЭД.СтатусЭД = ТекСтрока.Статус Тогда  // это был посл.статус
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭЦП(ЭтаФорма.Объект.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСЭлектроннымиПодписями(Команда)	
	
	ТабДок = ТабличныйДокументФормы;
	ТабДок.Напечатать();
	
	ТабДокЭЦП = СформироватьПечатнуюФормуСЭЦП();
	Если НЕ ТабДокЭЦП = Неопределено Тогда
		ТабДокЭЦП.Напечатать();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПечатнуюФормуСЭЦП()
	
	Если Объект.ЭлектронныеЦифровыеПодписи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТабДок = Новый ТабличныйДокумент;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("МакетЭЦП");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Документ 	= ОпределитьИмяДокумента();
	Область.Параметры.Дата 		= Формат(Объект.ДатаДокументаОтправителя, "ДЛФ=Д");
	Область.Параметры.Номер 	= Объект.НомерДокументаОтправителя;
	ТабДок.Вывести(Область);
	Для Каждого ЭлектроннаяПодпись Из Объект.ЭлектронныеЦифровыеПодписи Цикл
		Область = Макет.ПолучитьОбласть("СтрокаСертификата");
		Область.Параметры.Заполнить(ЭлектроннаяПодпись);
		ТабДок.Вывести(Область);
	КонецЦикла;
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.ИдентификаторДокумента = Объект.Ссылка.УникальныйИдентификатор();
	ТабДок.Вывести(Область);
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ОпределитьИмяДокумента()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Возврат "Заказ поставщику";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		Возврат "Каталог товаров";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.Накладная Тогда
		Возврат "Товарная накладная";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Возврат "Заказ клиента";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		Возврат "Прайс-лист"
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		Возврат "Счет";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		Возврат "Счет-фактура";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		Возврат "Передача товаров между организациями";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		Возврат "Возврат товаров между организациями";
	КонецЕсли;		
	Возврат "Произвольный документ";
	
КонецФункции

&НаКлиенте
Процедура ЭЦПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Поле.Имя, "ЭЦПКомуВыданСертификат")>0 Тогда 
		ДоверятьСертификатуПодписи(Элемент.ТекущиеДанные);
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда 
			ПоказатьСертификат(Элемент.ТекущиеДанные.Отпечаток);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификат (Отпечаток)
	
	ВыбранныйСертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сертификат не найден в хранилище сертификатов");
		Возврат;
	КонецЕсли;
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток", СтруктураСертификата, Отпечаток);
		СтруктураВозврата = ОткрытьФормуМодально("Общаяформа.СертификатЭЦП", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Функция ДобавитьСертификатПодписиВСоглашение(Отпечаток)
	
	Если НЕ ЗначениеЗаполнено(ТекущееСоглашениеОбИспользованииЭД) Тогда // нет соглашения
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектЭД = РеквизитФормыВЗначение("Объект");
	НайденнаяСтрока  = ОбъектЭД.ЭлектронныеЦифровыеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = ТекущееСоглашениеОбИспользованииЭД.ПолучитьОбъект();
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат; // ХранилищеЗначения
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

&НаСервере
Функция НайтиСоглашениеОбИспользованииЭД()
	
	ЗапросСоглашения = Новый Запрос;
	ЗапросСоглашения.УстановитьПараметр("ВидЭД", 			Объект.ВидЭД);
	ЗапросСоглашения.УстановитьПараметр("НаправлениеЭД", 	Объект.НаправлениеЭД);
	ЗапросСоглашения.УстановитьПараметр("Контрагент", 		Объект.Контрагент);
	ЗапросСоглашения.УстановитьПараметр("Организация", 		Объект.Организация);
	
	ЗапросСоглашения.Текст = "ВЫБРАТЬ
	                         |	Соглашение.Ссылка КАК Соглашение
	                         |ИЗ
	                         |	(ВЫБРАТЬ
	                         |		ВЫБОР
	                         |			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	                         |				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	                         |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	                         |		КОНЕЦ КАК НаправлениеЭД,
	                         |		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка
	                         |	ИЗ
	                         |		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	                         |	ГДЕ
	                         |		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	                         |		И ВЫБОР
	                         |				КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	                         |					ТОГДА ЛОЖЬ
	                         |				ИНАЧЕ СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	                         |						И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                         |			КОНЕЦ
	                         |	
	                         |	ОБЪЕДИНИТЬ ВСЕ
	                         |	
	                         |	ВЫБРАТЬ
	                         |		ВЫБОР
	                         |			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	                         |				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	                         |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	                         |		КОНЕЦ,
	                         |		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	                         |	ИЗ
	                         |		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                         |	ГДЕ
	                         |		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	                         |				И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                         |		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД) КАК Соглашение
	                         |ГДЕ
	                         |	Соглашение.НаправлениеЭД = &НаправлениеЭД";
							 
	Результат = ЗапросСоглашения.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда // есть соглашение
		Возврат Результат.Соглашение;
	КонецЕсли;
		
	Возврат Неопределено;
		
КонецФункции

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДоверятьСертификатуПодписи(Элементы.ЭЦП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьСертификатуПодписи(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда 
		ТекстВопроса = НСтр("ru = 'Добавить сертификат <"+ДанныеПодписи.КомуВыданСертификат+"> в список ожидаемых сертификатов контрагента?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
			Возврат;
		КонецЕсли;
		// добавим сертификат в Соглашение
		Результат = ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток);
		Если НЕ Результат Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭЦП();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЖурналуРегистрации(Команда)
	СобытиеЖурналаРегистрации = ЭлектронныеДокументыПереопределяемый.ТекстовоеПредставлениеСобытияДляЖР(Объект.ВладелецФайла);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", СобытиеЖурналаРегистрации);
	
	ОткрытьФормуМодально("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	Если НЕ (Элементы.ЭЦП.ТекущиеДанные=Неопределено) Тогда
		ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	ЭлектронныеДокументы.ОпределитьСтатусыПодписей(Объект.Ссылка,Истина);
	ЭтаФорма.Прочитать();
	ЗаполнитьТаблицуЭЦП();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеЭД(Команда)
	ЭлектронныеДокументыКлиент.ОтправитьПодтверждениеЭД(Объект.ВладелецФайла, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	ЭлектронныеДокументыКлиент.УтвердитьЭД(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭД(Команда)
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
КонецПроцедуры
 
&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	ЭлектронныеДокументыКлиент.ОтправитьПовторноЭД(Объект.ВладелецФайла, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДанныеПоНоменклатуре(Команда)
	
	ОткрытьФорму("ОбщаяФорма.СопоставлениеДанныеПоНоменклатуре", Новый Структура("ЭлектронныйДокумент", Объект.Ссылка));
	
КонецПроцедуры


