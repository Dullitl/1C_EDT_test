////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Перем мСотрудникДопСогласование Экспорт;
Перем мСменаИсполнителяПД Экспорт;

//абс_Родин
Процедура ЗаполнитьОбщиеРеквизитыТЦОПоУмолчанию() Экспорт
	
	ЭтоВзаимозависимыйКонтрагент = Справочники.ДоговорыКонтрагентов.ПолучитьСвойствоКонтрагента(Владелец);
	
	Если Владелец.ИНН = "7708503727" ИЛИ ЭтоВзаимозависимыйКонтрагент Тогда
		абс_КодСтраныПроисхожденияПредметаСделкиОКСМ   = Справочники.КлассификаторСтранМира.НайтиПоКоду("643",Истина);
		абс_КодОснованияОтнесенияСделкиККонтролируемой = Справочники.абс_КодыОснованияОтнесенияСделкиККонтролируемой.НайтиПоКоду("121",Истина);
		абс_ОсобенностиОтнесенияСделкиККонтролируемой  = Справочники.абс_ОсобенностиОтнесенияСделкиККонтролируемой.НайтиПоКоду("131",Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыТЦОПоУмолчанию()  Экспорт
	
	ЭтоВзаимозависимыйКонтрагент = Справочники.ДоговорыКонтрагентов.ПолучитьСвойствоКонтрагента(Владелец);

	//абс ВСТАВКА Урал 07.02.2014
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		абс_ТипПредметаСделки                = Перечисления.ТипыПредметовКонтролируемыхСделок.ПустаяСсылка();
		
		//абс ВСТАВКА Родин 07.04.2014	
		Если Владелец.ИНН = "7708503727" ИЛИ ЭтоВзаимозависимыйКонтрагент Тогда
			абс_НаименованиеПредметаСделки       = абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.НаименованиеПредметаСделки;
			абс_КодПредметаСделкиОКВЭД           = абс_НаименованиеПредметаСделки.ОКВЭД;//Справочники.абс_ОКВЭД.НайтиПоКоду("64.20.3");            
		КонецЕсли;
		//абс ВСТАВКА Родин 07.04.2014	
		
		
		//абс_НаименованиеПредметаСделки       = Справочники.абс_ПредметыСделок.ПустаяСсылка();				
		абс_КодПредметаСделкиТНВЭД           = "";
		абс_КодПредметаСделкиОКП             = "";
		//абс_КодПредметаСделкиОКВЭД           = Справочники.абс_ОКВЭД.ПустаяСсылка();
		абс_ОтноситсяКГруппеОднородныхСделок = Ложь;
		абс_КодНаименованияСделки            = Справочники.абс_КодыНаименованияСделки.ПустаяСсылка();				
		абс_КодСтороныСделки                 = Справочники.абс_КодыСтороныСделки.ПустаяСсылка();   //АБС Изменение Родин 190314
		//Код метода ценообразования = 04 = Метод сопоставимой рентабельности                              
		абс_КоличествоУчастниковСделки       = 0;
	Иначе	
		//\\абс ВСТАВКА Урал 07.02.2014	
		//абс Урал ИЗМЕНЕНИЕ 07.02.2014: КодПредметаСделкиОКВЭД заполняется из ПредметаСделки
		Если Владелец.ИНН = "7708503727" ИЛИ ЭтоВзаимозависимыйКонтрагент Тогда
			
			//абс ВСТАВКА Родин 07.04.2014	
			абс_НаименованиеПредметаСделки       = абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.НаименованиеПредметаСделки;
			абс_КодПредметаСделкиОКВЭД           = абс_НаименованиеПредметаСделки.ОКВЭД;//Справочники.абс_ОКВЭД.НайтиПоКоду("64.20.3");            
			//абс ВСТАВКА Родин 07.04.2014	
			
			Если абс_ВидДеятельности.Наименование = "Связь" и абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.абс_ВидДеятельности = абс_ВидДеятельности Тогда
				абс_ТипПредметаСделки                = Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга;
				//абс_НаименованиеПредметаСделки       = Справочники.абс_ПредметыСделок.НайтиПоНаименованию("Оказание услуг связи",Истина);				
				
				//абс ВСТАВКА Родин 28.03.2014	
				//абс_НаименованиеПредметаСделки       = абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.НаименованиеПредметаСделки;
				//абс ВСТАВКА Родин 28.03.2014	
				
				абс_КодПредметаСделкиТНВЭД           = "";
				абс_КодПредметаСделкиОКП             = "";
			//	абс_КодПредметаСделкиОКВЭД           = абс_НаименованиеПредметаСделки.ОКВЭД;//Справочники.абс_ОКВЭД.НайтиПоКоду("64.20");
				абс_ОтноситсяКГруппеОднородныхСделок = Истина;
				абс_КодНаименованияСделки            = Справочники.абс_КодыНаименованияСделки.НайтиПоКоду("019");				
				абс_КодСтороныСделки                 = Справочники.абс_КодыСтороныСделки.НайтиПоКоду("011");
				//Код метода ценообразования = 04 = Метод сопоставимой рентабельности                              
				абс_КоличествоУчастниковСделки       = 2;
			ИначеЕсли абс_ВидДеятельности.Наименование = "Эксплуатация" и абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.абс_ВидДеятельности = абс_ВидДеятельности  Тогда
				абс_ТипПредметаСделки                = Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга;
				//абс_НаименованиеПредметаСделки       = Справочники.абс_ПредметыСделок.НайтиПоНаименованию("Оказание услуг по технической эксплуатации сетей связи");
				
				//абс ВСТАВКА Родин 28.03.2014	
				//абс_НаименованиеПредметаСделки       = абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.НаименованиеПредметаСделки;
				//абс ВСТАВКА Родин 28.03.2014	
				
				абс_КодПредметаСделкиТНВЭД           = "";
				абс_КодПредметаСделкиОКП             = "";
				//абс_КодПредметаСделкиОКВЭД           = абс_НаименованиеПредметаСделки.ОКВЭД;//Справочники.абс_ОКВЭД.НайтиПоКоду("64.20.3");            
				абс_ОтноситсяКГруппеОднородныхСделок = Истина;
				абс_КодНаименованияСделки            = Справочники.абс_КодыНаименованияСделки.НайтиПоКоду("019");				
				абс_КодСтороныСделки                 = Справочники.абс_КодыСтороныСделки.НайтиПоКоду("011");
				//Код метода ценообразования = 04 = Метод сопоставимой рентабельности                              
				абс_КоличествоУчастниковСделки   = 2;
			ИначеЕсли абс_ВидДеятельности.Наименование = "Строительство" и абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.абс_ВидДеятельности = абс_ВидДеятельности  Тогда	   
				абс_ТипПредметаСделки            = Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга;
				//абс_НаименованиеПредметаСделки   = Справочники.абс_ПредметыСделок.НайтиПоНаименованию("Строительство / ремонт объектов связи");
				
				//абс ВСТАВКА Родин 28.03.2014	
				//абс_НаименованиеПредметаСделки       = абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.НаименованиеПредметаСделки;
				//абс ВСТАВКА Родин 28.03.2014	
				
				абс_КодПредметаСделкиТНВЭД       = "";
				абс_КодПредметаСделкиОКП         = "";
				//абс_КодПредметаСделкиОКВЭД       = абс_НаименованиеПредметаСделки.ОКВЭД;//Справочники.абс_ОКВЭД.НайтиПоКоду("45.1");            
				абс_ОтноситсяКГруппеОднородныхСделок = Истина;
				абс_КодНаименованияСделки        = Справочники.абс_КодыНаименованияСделки.НайтиПоКоду("021");
				абс_КодСтороныСделки             = Справочники.абс_КодыСтороныСделки.НайтиПоКоду("035");   //АБС Изменение Родин 190314
				//Код метода ценообразования = 04 = Метод сопоставимой рентабельности                              
				абс_КоличествоУчастниковСделки   = 2;
			Иначе
				абс_ТипПредметаСделки                = Перечисления.ТипыПредметовКонтролируемыхСделок.ПустаяСсылка();
				
				//абс ВСТАВКА Родин 07.04.2014	
				//Если НЕ ЗначениеЗаполнено(абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования) Тогда
				//	абс_НаименованиеПредметаСделки       = Справочники.абс_ПредметыСделок.ПустаяСсылка();				
				//КонецЕсли;
				//абс_КодПредметаСделкиОКВЭД           = Справочники.абс_ОКВЭД.ПустаяСсылка();
				//абс ВСТАВКА Родин 07.04.2014	
				
				абс_КодПредметаСделкиТНВЭД           = "";
				абс_КодПредметаСделкиОКП             = "";
				абс_ОтноситсяКГруппеОднородныхСделок = Ложь;
				абс_КодНаименованияСделки            = Справочники.абс_КодыНаименованияСделки.ПустаяСсылка();				
				абс_КодСтороныСделки                 = Справочники.абс_КодыСтороныСделки.ПустаяСсылка();   //АБС Изменение Родин 070414
				абс_КоличествоУчастниковСделки       = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	//\\абс ИЗМЕНЕНИЕ Урал 07.02.2014

	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовТЦО(Отказ)
	
	ЭтоВзаимозависимыйКонтрагент = Справочники.ДоговорыКонтрагентов.ПолучитьСвойствоКонтрагента(Владелец);
	
	
	Если Владелец.ИНН  = "7708503727" ИЛИ ЭтоВзаимозависимыйКонтрагент Тогда
		
		Если Не ЗначениеЗаполнено(абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена методика для трансфертного ценообразования!", Отказ);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(абс_ТипПредметаСделки) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен тип предмета сделки!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_КодСтраныПроисхожденияПредметаСделкиОКСМ) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена страна происхождения!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_КодОснованияОтнесенияСделкиККонтролируемой) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен код основания отнесения сделки к контролируемой!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_ОсобенностиОтнесенияСделкиККонтролируемой) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен код особенности отнесения сделки к контролируемой!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_КодНаименованияСделки) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен код наименования сделки!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_КодСтороныСделки) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен код стороны сделки!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_КоличествоУчастниковСделки) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено количество участников сделки!", Отказ);
		КонецЕсли;
		
	КонецЕсли;	

	Если Владелец.абс_ТипыКонтрагентов.НеЯвляетсяРезидентом Тогда
		Если Не ЗначениеЗаполнено(абс_КодПредметаСделкиТНВЭД) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен код по ТН ВЭД!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Владелец.ИНН  = "7708503727" ИЛИ ЭтоВзаимозависимыйКонтрагент Тогда
		Если Не ЗначениеЗаполнено(абс_НаименованиеПредметаСделки) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено наименование предмета сделки!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_ОтноситсяКГруппеОднородныхСделок) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен признак ""Относится к группе однородных сделок""!", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(абс_СпособОпределенияЦенКонтролируемыхСделок) Тогда
			Отказ = Истина;	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен способ определения цен контролируемых сделок!", Отказ);
		КонецЕсли;
		
		Если абс_ТипПредметаСделки = Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга или  абс_ТипПредметаСделки = Перечисления.ТипыПредметовКонтролируемыхСделок.ИнойОбъектГражданскихПрав Тогда
			Если Не ЗначениеЗаполнено(абс_КодПредметаСделкиТНВЭД) Тогда
				Отказ = Истина;	
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнен код по ТН ВЭД!", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецПроцедуры
//абс_Родин

Процедура ПечатьСоглашения(ИмяМакета)

	//Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	//ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	//ДиалогОткрытияФайла.Заголовок = "Выберите каталог";
	//
	//Если ДиалогОткрытияФайла.Выбрать() Тогда
	//	Путь = СокрЛП(ДиалогОткрытияФайла.Каталог);
	//Иначе
	//	Путь = "";
	//КонецЕсли;
	//
	//Если ПустаяСтрока(Путь) Тогда
	//	Предупреждение("Не выбран каталог!");
	//	Возврат;
	//КонецЕсли;
	
	ДокументДляСохранения = Неопределено;
	
	ДвоичныеДанные = ПолучитьМакет(ИмяМакета);    
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	ДокументДляСохранения = ПолучитьМакет(ИмяМакета).Получить();    
	
	//WordDoc = ДокументДляСохранения.Application.Documents;
	//Docum = WordDoc.Add();
	//Select = ДокументДляСохранения.Application.Selection;
	
	Word = Новый COMОбъект("Word.Application");
	Word.Visible = 1;
	WordDoc = Word.Documents;
	Docum = WordDoc.Add();
	Select = Word.Selection;
	
	//Select.InsertFile("T:\Рабочая\КТТК\Прочее\Взаиморасчеты\абс_Уведомление.doc");
	Select.InsertFile(ПутьКФайлу);
	
	//Docum =	СоздатьДокумент(Путь,Docum, ИмяМакета);
	
	Docum =	СоздатьДокумент(ПутьКФайлу,Docum, ИмяМакета);
	УдалитьФайлы(ПутьКФайлу);
	
	//Попытка
	//	Docum.SaveAs(СокрЛП(Путь) + "\" + НаименованиеФайла(Наименование));
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	//Word.Quit();


КонецПроцедуры

Функция  СоздатьДокумент(Путь, ДокументДляСохранения, ИмяМакета)
	
	ПолнаяДатаДокумента = Формат(Дата, "ДФ='дд ММММ гг'");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ДатаДокументаДень     = Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1);
	ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
	ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);
	
	ДокументДляСохранения.Variables.Item("ДатаДоговораДень").Value  = ?(ДатаДокументаДень <> "", ДатаДокументаДень, "__"); 
	ДокументДляСохранения.Variables.Item("ДатаДоговораМесяц").Value = ?(ДатаДокументаМесяц <> "", ДатаДокументаМесяц, "_____________");
	ДокументДляСохранения.Variables.Item("ДатаДоговораГод").Value   = ?(ДатаДокументаГод <> "", ДатаДокументаГод, "__");
	
	
	ДокументДляСохранения.Variables.Item("НомерДоговора").Value     = ?(СокрЛП(Номер) <> "", СокрЛП(Номер), "_____");
	
	Если ИмяМакета = "ШаблонConfidentialityAgreement" Тогда
		ДокументДляСохранения.Variables.Item("ДатаДоговора").Value  = ?(ЗначениеЗаполнено(Дата), Формат(Дата, "Л=en; ДЛФ=DD"), "                  20__");
	КонецЕсли;
	
	ДокументДляСохранения.Fields.Update();
	ДокументДляСохранения.Fields.UnLink();
	
	ДокументДляСохранения.Application.Visible=1;
	
	Возврат ДокументДляСохранения;	
	
КонецФункции

// Функция проверяет, существуют ли ссылки на договор в движениях регистров накопления.
// Если есть - нельзя менять:
//  - Валюту взаиморасчетов
//  - Ведение взаиморасчетов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция СуществуютСсылки() Экспорт

	Возврат ПолныеПрава.ПроверитьНаличиеСсылокНаДоговорКонтрагента(Ссылка);

КонецФункции //  СуществуютСсылки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью элемента справочника.
//
Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда 
		Возврат 
	КонецЕсли;	
	
	//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
	абс_НачатьЗамерПроизводительности();
	//\\АБС ВСТАВКА №38173 КОНЕЦ     	
	
	// Проверим можно ли изменять реквизиты договора.
	// Проверка осуществляется только если записывается уже существующий договор
	Если НЕ ОбменДанными.Загрузка И НЕ ЭтоНовый() Тогда

		Если ЭтоГруппа Тогда

			// Для группы владельца менять нельзя
			Если Владелец <> Ссылка.Владелец Тогда
                ТекстСообщения = "Нельзя изменять контрагента для группы договоров.";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				Отказ = Истина; 
			КонецЕсли; 

		Иначе

			// Проверим возможность смены владельца для договора
			Если Владелец <> Ссылка.Владелец Тогда

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДокументыПоДоговоруКонтрагента.Ссылка
				|ИЗ
				|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&Договор) КАК ДокументыПоДоговоруКонтрагента";
				
				Запрос.УстановитьПараметр("Договор", Ссылка);
				
				Результат = Запрос.Выполнить();
				ЕстьДокументыПоДоговору = НЕ Результат.Пустой();
				
				Если ЕстьДокументыПоДоговору Тогда
					ТекстСообщения = "Существуют документы, оформленные по договору """ + Наименование + """.
									 |Контрагент договора не может быть изменен, элемент не записан."; 
					Сообщить(ТекстСообщения, 
							 СтатусСообщения.Важное);		 
					Отказ = Истина;
				КонецЕсли; 

			КонецЕсли;      

			// Проверим возможность смены способа ведения взаиморасчетов и валюты взаиморасчетов
			Если ВедениеВзаиморасчетов <> Ссылка.ВедениеВзаиморасчетов
			 ИЛИ ВалютаВзаиморасчетов <> Ссылка.ВалютаВзаиморасчетов 
			 ИЛИ ВидДоговора <> Ссылка.ВидДоговора
			 ИЛИ Организация <> Ссылка.Организация
			 ИЛИ РасчетыВУсловныхЕдиницах <> Ссылка.РасчетыВУсловныхЕдиницах
			 ИЛИ ВидУсловийДоговора <> Ссылка.ВидУсловийДоговора 
			 ИЛИ ВестиПоДокументамРасчетовСКонтрагентом <> Ссылка.ВестиПоДокументамРасчетовСКонтрагентом Тогда

				Если ЭтотОбъект.СуществуютСсылки() Тогда

					Сообщить("Существуют документы, проведенные по договору """ + Наименование + """.
							 |Реквизиты ""Организация"", ""Ведение взаиморасчетов"", ""Валюта взаиморасчетов"", ""Вид договора"", 
							 |""По документам расчетов с контрагентом"", ""Расчеты в условных единицах"" и ""Условия выполнения договора"" не могут быть изменены, элемент не записан.", 
							 СтатусСообщения.Важное);
					Отказ = Истина;
					
				КонецЕсли;

			КонецЕсли;
			Если  ОбособленныйУчетТоваровПоЗаказамПокупателей<>Ссылка.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				Если ПолныеПрава.ПроверитьНаличиеСсылокНаДоговорКонтрагентаВЗаказахПокупателей(Ссылка) Тогда
					Сообщить("Существуют заказы покупателей, проведенные по договору """ + Наименование + """.
					|Реквизит ""Обособленный учет товаров по заказам покупателей"" не может быть изменен, элемент не записан.", 
					СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Если НЕ ПометкаУдаления = Ссылка.ПометкаУдаления И НЕ РольДоступна("ПолныеПрава") И 
				((НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка) И (НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрыт)) Тогда
				ТекстСообщения = "Запрещено устанавливать пометку на удаление.";
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);	
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если абс_ТиповаяПроверкаЭлемента() Тогда		
		абс_ЛицевойСчетБиллинга = СокрЛП(абс_ЛицевойСчетБиллинга); 				
	КонецЕсли;	
                  
	//АБС ВСТАВКА №15732 НАЧАЛО
	Если абс_ТиповаяПроверкаЭлемента() и абс_СтатусДоговора <> Ссылка.абс_СтатусДоговора Тогда
		абс_СтатусДоговораСтарый = Ссылка.абс_СтатусДоговора;
	КонецЕсли;	
	Если абс_ТиповаяПроверкаЭлемента() и абс_СтатусДоговора <> Ссылка.абс_СтатусДоговора        
		И абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП
		И НЕ Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Уточнение Тогда
		абс_СтатусДоговораДляДирКСП = Ссылка.абс_СтатусДоговора;
	КонецЕсли;		
	//\\АБС ВСТАВКА №15732 КОНЕЦ	
	
	//АБС ВСТАВКА №28363 НАЧАЛО «22 октября 2014 г.», Пополитов
	Если абс_ТиповаяПроверкаЭлемента() и абс_СтатусДоговора <> Ссылка.абс_СтатусДоговора        
		и абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Уточнение
		и не Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование Тогда
		абс_СтатусДоговораДляДопСогласования = Ссылка.абс_СтатусДоговора;
	КонецЕсли;		
	            
	Если абс_ТиповаяПроверкаЭлемента() и глЗначениеПеременной("абс_КонтрольВложенныхФайловВДоговорах")
		И Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка
		И абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ 
		//АБС ВСТАВКА №000029656 НАЧАЛО «8 декабря 2014 г.», Пополитов
		И не ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда	
		//\\АБС ВСТАВКА №000029656 КОНЕЦ     		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХДИ.Ссылка
		               |ИЗ
		               |	Справочник.ХранилищеДополнительнойИнформации КАК ХДИ
		               |ГДЕ
		               |	ХДИ.Объект = &Объект
		               |	И НЕ ХДИ.ПометкаУдаления";	   
		Если Запрос.Выполнить().Пустой() Тогда	
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Не приложен файл.", Отказ);	
		КонецЕсли;
		
	КонецЕсли;	
	//\\АБС ВСТАВКА №28363 КОНЕЦ    		
	
	//АБС ВСТАВКА №16086 НАЧАЛО
	Если абс_ТиповаяПроверкаЭлемента() и СокрЛП(глЗначениеПеременной("абс_КонтрольИННдляТрансфертногоЦенообразования")) = СокрЛП(Владелец.ИНН)
		И НЕ ЗначениеЗаполнено(абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования)
		
		//АБС ВСТАВКА Родин 190314
		//И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		И НЕ Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ДЗО
		//АБС ВСТАВКА Родин 190314
		
		И НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка 
		И НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ
		И НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отмена 
		И НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Уточнение 
		// {{ТТК Сладков А. Заявка №7753497  19.10.2016 начало  ++
		И не абс_ТипДоговора	= Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности 
		// }}ТТК Сладков А. Заявка №7753497  19.10.2016 окончание --
		Тогда
		ТекстСообщения = "Не заполнено поле «Применяемая методика для трансфертного ценообразования»."; 
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;		
	//\\АБС ВСТАВКА №16086 КОНЕЦ	
	
	// Проверим заполнение и очистим неиспользуемые реквизиты элемента договора.
	Если Не ЭтоГруппа Тогда
		
		// Проверим, заполнена ли валюта.
		Если НЕ ОбменДанными.Загрузка И НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			Сообщить("Не указана валюта договора.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;

		// Проверим, заполнена ли организация.
		Если НЕ ОбменДанными.Загрузка И НЕ ЗначениеЗаполнено(Организация) Тогда
			Сообщить("Не указана организация, от которой заключен договор.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;

		// Проверим, заполнен ли способ ведения взаиморасчетов.
		Если НЕ ОбменДанными.Загрузка И НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
			Сообщить("Не указан способ ведения взаиморасчетов по договору.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;

		// Проверим, заполнен ли вид договора.
		Если НЕ ОбменДанными.Загрузка Тогда
		
			Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
				Сообщить("Не указан вид договора.", СтатусСообщения.Важное);
				Отказ = Истина;
			Иначе
				// Проверим, правильно ли заполнен вид договора
				Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И НЕ Владелец.Покупатель Тогда
					Сообщить("Вид договора ""С покупателем"" может устанавливаться только когда у контрагента указано что он является покупателем.", СтатусСообщения.Важное);
					Отказ = Истина;
				ИначеЕсли (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
					И НЕ Владелец.Поставщик Тогда
					Сообщить("Вид договора ""С поставщиком"" может устанавливаться только когда у контрагента указано что он является поставщиком.", СтатусСообщения.Важное);
					Отказ = Истина;
				ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее
					И ВестиПоДокументамРасчетовСКонтрагентом Тогда
					Сообщить("Флажок ""По документам расчетов с контрагентами"" не может устанавливаться у договоров с видом ""Прочее"".", СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли;
		
		КонецЕсли; 
		
		Если НЕ ОбменДанными.Загрузка И НЕ ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
			
			ВестиПоДокументамРасчетовСКонтрагентом = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	// АБС ВСТАВКА 
	
	//Сторчевой А.Н. 24.01.2017 7766926 (D2016-1207-3107){
	//Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ И 
	Если (абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ
		ИЛИ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеТехБлоком) И 
	// } Сторчевой А.Н. 24.01.2017 7766926 (D2016-1207-3107)
		
	//АБС НАЧ  ВСТАВКА 36060 Нарыжный 05.12.2013	
		Не   абс_DT И
	//АБС НАЧ  ВСТАВКА 36060 Нарыжный 05.12.2013
		(Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка ИЛИ 
		  Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаКонтрагента) Тогда	
		 
		Если НЕ абс_БизнесПроцессыПривелегированный.МожноСогласовыватьДоговор(Ссылка, абс_ТипДоговора, абс_ТиповойДоговор, абс_БезЗакупочногоЗаказа, ВидДоговора, Отказ, , абс_АвтоматическиСоздаватьДоговораСФилиалами) Тогда
			абс_ЗавершитьЗамерПроизводительности();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	
	Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД И Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД 
		И ЗначениеЗаполнено(абс_ОтветственныйПД) И НЕ абс_ОтветственныйПД = Ссылка.абс_ОтветственныйПД Тогда
		
		мСменаИсполнителяПД = Истина;
		
	ИначеЕсли абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование И Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД Тогда
		
		абс_ОтветственныйПД = глЗначениеПеременной("глТекущийПользователь");
		
	ИначеЕсли абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД и НЕ ЗначениеЗаполнено(абс_ОтветственныйПД) Тогда
		
		абс_ОтветственныйПД = ПоискОтветственногоПД();		
			  		
	КонецЕсли;
	
	мРолипользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
	
	Если НЕ ЭтоГруппа Тогда
		Если абс_ТиповойДоговор И 
			(мРолипользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Пользователю запрещено обрабатывать типовые договоры.", Отказ);
			
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА КОНЕЦ
	
	// АБС ВСТАВКА Фролов 
	// Запретим записывать договор в статусе дополнительного согласования,
	// в случае если не выбран сотрудник доп. согласования
	Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование И НЕ ЗначениеЗаполнено(абс_СотрудникДопСогласование) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник доп. согласования", Отказ);
	КонецЕсли;
	//\\ АБС ВСТАВКА Фролов
	
	//АБС ВСТАВКА №8693 НАЧАЛО
	Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД и ЗначениеЗаполнено(абс_ОтветственныйПД) Тогда
		врСписокРолей = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(абс_ОтветственныйПД);
		Если врСписокРолей.Найти(Справочники.РолиИсполнителей.СогласованиеПД) = Неопределено Тогда
			Сообщить("У ответственного ПД нет соответствующей роли согласования!",СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	//\\АБС ВСТАВКА №8693 КОНЕЦ
	
	//АБС_Стрельцов+ добавлено: 12.10.2012
	//-------------------------------------
	Если ЗначениеЗаполнено(абс_ВидДеятельности) И абс_ВидДеятельности = Справочники.абс_ВидыДеятельностиКТТК.НайтиПоКоду("000000003") Тогда
		Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ И Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				Если НЕ абс_БезДоходногоДоговора И НЕ ЗначениеЗаполнено(абс_ДоходныйДоговор) Тогда
					Сообщить("Не выбран доходный договор на закладке ""Дополнительные реквизиты"" !", СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕСли;
			КонецЕСли;
		КонецЕсли;
	КонецЕСли;
	//-------------------------------------
	//АБС_Стрельцов-
	
	//АБС Коломиец 15204+
	Если Не ОбменДанными.Загрузка Тогда 
		
		Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда 
			
			// АБС ИЗМЕНЕНО Фролов 20121130
			// т.к. наименование договора разрешено менять то соглашение о конфиденциальности проверяем на каждом статусе
			Если НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка И 
				 НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ И 
				 НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отмена Тогда
				 
				Если Не Найти(НРег(Наименование), "соглашение о конфиденциальности") > 0 Тогда
					Сообщить("Договор не записан: Наименование договора должно содержать словосочетание ""Соглашение о конфиденциальности""!");
					Отказ = Истина;										
				КонецЕсли;				 
			КонецЕсли;
		
			Если 
				 (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем И 
				 (Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка И абс_СтатусДоговора <> Перечисления.абсСтатусыДоговоров.Подготовка)) ИЛИ 
				
				 (ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем И 
				 (Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация ИЛИ Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора) И 
				 абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение) Тогда
			

				Если Не ЗначениеЗаполнено(СрокДействия) Тогда
					Сообщить("Реквизит ""Срок действия"" не заполнен!");
					Отказ = Истина;
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//АБС-
			
	//АБС 19636
	Если НЕ ОбменДанными.Загрузка И НЕ ЭтоГруппа Тогда
		Если абс_АвтоматическиСоздаватьДоговораСФилиалами И абс_Филиалы.Количество()=0 Тогда
			Сообщить("Не заполнен список филиалов!");
			Отказ = Истина;
 		КонецЕсли;
	КонецЕсли;
	//АБС 19636 КОНЕЦ
	
	//АБС+ Тупиков 29.11.2012
	Если Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка И
		 НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка И 
		 НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ И 
		 НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отмена Тогда
		 
		Если ВалютаВзаиморасчетов <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
			РасчетыВУсловныхЕдиницах = НЕ Владелец.абс_ТипыКонтрагентов.НеЯвляетсяРезидентом;
		КонецЕсли;
	КонецЕсли;
	//АБС- Тупиков		
	
	//АБС+ Тупиков 15051
	Если глЗначениеПеременной("абс_АвтоматическоеФормированиеНомеровДоговоров") Тогда
		Если НЕ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация И абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
				//АБС Чалавиев  28.11.2013 000022974
				Если Не ЗначениеЗаполнено(Номер) или Номер = "0" Тогда
				//АБС Чалавиев  28.11.2013 000022974
					УстановитьНомерДоговора();
				КонецЕсли;
				ДатаНачалаАвтоматическогоФормирования = НачалоГода('20130101');
				Если Дата >= ДатаНачалаАвтоматическогоФормирования Тогда 
					ЗаписатьВРегистрЗарезервированныеНомера(Перечисления.абс_СтатусыНомераДоговоров.Используется);
				Иначе
					//удаляем движения в регистре по договору 2012 года (или ранее), если они существуют
					//такое возможно, если сначала нажали кнопку "Резерв. номер", а затем на подписании и регистрации поменяли год
					НаборЗаписей = РегистрыСведений.абс_ЗарезервированныеНомераДоговоров.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Договор.Установить(Ссылка);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//АБС- Тупиков
	
	//АБС+ Тупиков 16781
	Если НЕ ЗначениеЗаполнено(абс_ОсновнойДоговор) И (абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДополнительноеСоглашение ИЛИ абс_ТипДоговора = Перечисления.абсТипыДоговоров.Приложение) Тогда
		Если Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка 
			И НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка
			И НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ
			И НЕ абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отмена Тогда
			Сообщить("Не выбран основной договор!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//АБС- Тупиков
	
	// АБС 19636
	Если Не ЭтоГруппа И НЕ ОбменДанными.Загрузка
		И абс_АвтоматическиСоздаватьДоговораСФилиалами И 
		(абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение) Тогда
		
		ТабДоговоров = абс_Филиалы.Выгрузить();
		
		СтруктураРеквизитовДоговора = Новый Структура;		
		//ТипСправочника = ТипЗнч(ЭтотОбъект);
		//МетаданныеДоговора = Метаданные.НайтиПоТипу(ТипСправочника);
		      
		МетаданныеДоговора = ЭтотОбъект.Метаданные();
		
		Для Каждого Реквизит Из МетаданныеДоговора.Реквизиты Цикл
			СтруктураРеквизитовДоговора.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
		КонецЦикла;
		
		СтруктураРеквизитовДоговора.Вставить("Владелец", Владелец);
		СтруктураРеквизитовДоговора.Вставить("Наименование", Наименование);

		ЕстьОшибки = абс_БизнесПроцессыПривелегированный.ОбновитьСоздатьДоговорыСФилиалами(Ссылка, СтруктураРеквизитовДоговора, ТабДоговоров);
		
		Если ЕстьОшибки Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Создание договоров по филиалам произведено с ошибками.");
		КонецЕсли;
		
		абс_Филиалы.Загрузить(ТабДоговоров);
		
	КонецЕсли;
	// АБС 19636 КОНЕЦ
	//***** АБС Гетц. Проектный учет добавление проектов в договор из закупочных заказов
	Если Не ЭтоГруппа И абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ Тогда 
		абс_ПроектныйУчет.ОбновитьПроектыПоДоговору(ЭтотОбъект);
	КонецЕсли;
	//*****\\
	
	//АБС ВСТАВКА 35479  21.11.2013 19:28:30  Марат
	Если Не ЗначениеЗаполнено(Номер) Тогда
		Номер = 0;
	КонецЕсли;
	//АБС ВСТАВКА 35479 КОНЕЦ
	
	//АБС НАЧ  ВСТАВКА 36060 Нарыжный 05.12.2013 
	Если Не ЭтоГруппа И  НЕ ОбменДанными.Загрузка И абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение 
		И ЭтотОбъект.Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация И Не ЗначениеЗаполнено(абс_ВстречныйДоговор) 
		И абс_DA Тогда 
				
		Попытка
			ВстречныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ВстречныйДоговорОбъект, ЭтотОбъект);
			ВстречныйДоговорОбъект.УстановитьНовыйКод();
			ВстречныйДоговорОбъект.абс_СтатусДоговораСтарый = Неопределено;
			ВстречныйДоговорОбъект.абс_DA = Ложь;
			ВстречныйДоговорОбъект.абс_DT = Ложь;
			ВстречныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			ВстречныйДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ВстречныйДоговорОбъект.Записать();
			ЭтотОбъект.абс_ВстречныйДоговор = ВстречныйДоговорОбъект.Ссылка;
			
			НаборЗаписейИсторияСтатусов = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей();
			НаборЗаписейИсторияСтатусов.Отбор.Договор.Установить(ВстречныйДоговорОбъект.Ссылка);
			
			ЗаписьИсполнение = НаборЗаписейИсторияСтатусов.Добавить();
			
			ЗаписьИсполнение.Договор = ВстречныйДоговорОбъект.Ссылка;
			ЗаписьИсполнение.СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение;
			ЗаписьИсполнение.Исполнитель = ВстречныйДоговорОбъект.абс_Ответственный;			
			ЗаписьИсполнение.Период = ТекущаяДата();
			ЗаписьИсполнение.ВнутреннийНомер =  ВстречныйДоговорОбъект.абс_Ответственный.абс_ВнутреннийНомер;
			ЗаписьИсполнение.Комментарий = "создан автоматически на основании договора " + ЭтотОбъект.Код;
			
			НаборЗаписейИсторияСтатусов.Записать();
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Отказ  = Истина;
		КонецПопытки;	
	КонецЕсли;	
	//АБС КОН ВСТАВКА 35479 Нарыжный 05.12.2013	
	
	//АБС ВСТАВКА 35963 09.12.2013 Навцен
	ПроверитьЗаполнениеРеквизитовТЦОПоВидуДеятельности(Отказ);
	//АБС ВСТАВКА 35963 Навценя КОНЕЦ
	
	//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
	Если Отказ Тогда
		абс_ЗавершитьЗамерПроизводительности();
	КонецЕсли;	
	//\\АБС ВСТАВКА №38173 КОНЕЦ
	
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусДоговораПоРегистру(Ссылка);
	
	Если  СогласованиеБезБП Тогда
		Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование
			или абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
			
			Если НЕ СтатусПоРегистру = абс_СтатусДоговора Тогда
				абс_СтатусДопСогласования 		= СтатусПоРегистру;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	
	//Крамаренко Д.М.
	//77224821
	Если Не ЭтоГруппа И ЗначениеЗаполнено(абс_ЛицевойСчетБиллинга) Тогда
		абс_КлиентБиллинга = Истина;
	КонецЕсли;
	//Крамаренко Д.М.
	//77224821
		
	
КонецПроцедуры // ПередЗаписью()

//АБС+ Тупиков 15051
Процедура УстановитьНомерДоговора() Экспорт
	
	Префикс = Организация.Префикс;
	//АБС ВСТАВКА №000024018 НАЧАЛО «13 января 2014 г.», Пополитов
	врДатаСервера = абс_СерверныеФункции.ПолучитьДатуСервера();
 	врДатаДоговора = ?(Дата = '00010101', врДатаСервера, Дата);
 	//\\АБС ВСТАВКА №000024018 КОНЕЦ  	
	Год = Формат(врДатаДоговора, "ДФ=yyyy");
	ДатаНачалаАвтоматическогоФормирования = НачалоГода('20130101');
	//АБС ВСТАВКА 40145  31.03.2014 18:45:00  Шамов
	ДатаОсновногоДоговора = Неопределено;
	//АБС ВСТАВКА 40145		
	Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДополнительноеСоглашение Тогда
		ДатаОсновногоДоговора = абс_ОсновнойДоговор.Дата;
		Если ДатаОсновногоДоговора >= ДатаНачалаАвтоматическогоФормирования Тогда
			НомерДоговора = абс_ОсновнойДоговор.Номер + "ДС";
		Иначе //доп.соглашение к договору, который был создан до 2013 года
			ГодОсновногоДоговора = Формат(абс_ОсновнойДоговор.Дата, "ДФ = yyyy");
			НомерДоговора = Префикс + ГодОсновногоДоговора + абс_ОсновнойДоговор.Номер + "ДС";
		КонецЕсли;
	ИначеЕсли абс_ТипДоговора = Перечисления.абсТипыДоговоров.Приложение Тогда
		ДатаОсновногоДоговора = абс_ОсновнойДоговор.Дата;
		Если ДатаОсновногоДоговора >= ДатаНачалаАвтоматическогоФормирования Тогда
			НомерДоговора = абс_ОсновнойДоговор.Номер + "ПР";
		Иначе //приложение к договору, который был создан до 2013 года
			ГодОсновногоДоговора = Формат(абс_ОсновнойДоговор.Дата, "ДФ = yyyy");
			НомерДоговора = Префикс + ГодОсновногоДоговора + абс_ОсновнойДоговор.Номер + "ПР";
		КонецЕсли;
	Иначе
		НомерДоговора = Префикс + Год;		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	абс_ЗарезервированныеНомераДоговоровСрезПоследних.Договор КАК Ссылка,
	               |	абс_ЗарезервированныеНомераДоговоровСрезПоследних.НомерДоговора КАК Номер
	               |ИЗ
	               |	РегистрСведений.абс_ЗарезервированныеНомераДоговоров.СрезПоследних КАК абс_ЗарезервированныеНомераДоговоровСрезПоследних
	               |ГДЕ
	               |	абс_ЗарезервированныеНомераДоговоровСрезПоследних.НомерДоговора ПОДОБНО &НомерДоговора + ""%""
	               |	И (НЕ абс_ЗарезервированныеНомераДоговоровСрезПоследних.НомерДоговора ПОДОБНО ""%"" + &ПостфиксДС + ""%"") И (НЕ абс_ЗарезервированныеНомераДоговоровСрезПоследних.НомерДоговора ПОДОБНО ""%"" + &ПостфиксПР + ""%"")
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	абс_ЗарезервированныеНомераДоговоровСрезПоследних.НомерДоговора УБЫВ";
	Запрос.УстановитьПараметр("НомерДоговора", НомерДоговора);
	Запрос.УстановитьПараметр("ПостфиксДС", "ДС");
	Запрос.УстановитьПараметр("ПостфиксПР", "ПР");
	Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДополнительноеСоглашение ИЛИ абс_ТипДоговора = Перечисления.абсТипыДоговоров.Приложение Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (НЕ абс_ЗарезервированныеНомераДоговоровСрезПоследних.НомерДоговора ПОДОБНО ""%"" + &ПостфиксДС + ""%"") И (НЕ абс_ЗарезервированныеНомераДоговоровСрезПоследних.НомерДоговора ПОДОБНО ""%"" + &ПостфиксПР + ""%"")", "");
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если НЕ (абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДополнительноеСоглашение ИЛИ абс_ТипДоговора = Перечисления.абсТипыДоговоров.Приложение) Тогда			
			НомерДоговора = НомерДоговора + "00001";
		Иначе
			//АБС ИЗМЕНЕНИЕ 40145  31.03.2014 18:37:55  Шамов
			//НомерДоговора = НомерДоговора + "001";
			Если ДатаОсновногоДоговора <> Неопределено И ДатаОсновногоДоговора < '20130101' Тогда
				НомерДоговора = НомерДоговора + ЗапроситьНомерДоговора();
			Иначе
				НомерДоговора = НомерДоговора + "001";
			КонецЕсли;
			//АБС ИЗМЕНЕНИЕ 40145 КОНЕЦ						
		КонецЕсли;
	Иначе
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//АБС ИЗМЕНЕНИЕ 40145  31.03.2014 18:37:55  Шамов
			//НовыйНомер = СформироватьНомерДоговора(Выборка.Номер);
			НовыйНомер = СформироватьНомерДоговора(Выборка.Номер, абс_ТипДоговора);
			
			Если НовыйНомер = Неопределено Тогда
				Сообщить("Не удалось автоматически сформировать номер доп. соглашения или приложения!");
				НовыйНомер = ЗапроситьНомерДоговора();
			КонецЕсли;
			//АБС ИЗМЕНЕНИЕ 40145 КОНЕЦ						
			НомерДоговора = НомерДоговора + НовыйНомер;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//соглашение о конфиденциальности
	Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда
		НомерДоговора = НомерДоговора + "СОК";
	КонецЕсли;
		
    Номер = НомерДоговора;	
	
КонецПроцедуры

//АБС ВСТАВКА 40145  31.03.2014 18:45:00  Шамов
Функция ЗапроситьНомерДоговора()
	ВремЧисло = 1;
    #ЕСЛИ Клиент ТОГДА
		Если ВвестиЧисло(ВремЧисло, "Введите номер доп. соглашения или приложения", 3, 0) Тогда
			НовыйНомерПоПорядку = Формат(ВремЧисло, "ЧГ=");
			Если СтрДлина(НовыйНомерПоПорядку) = 1 Тогда
				НовыйНомер = "00" + НовыйНомерПоПорядку;
			ИначеЕсли СтрДлина(НовыйНомерПоПорядку) = 2 Тогда
				НовыйНомер = "0" + НовыйНомерПоПорядку;
			Иначе
				НовыйНомер = НовыйНомерПоПорядку;
			КонецЕсли;
		Иначе
			НовыйНомер = "001";	
		КонецЕсли;
    #ИНАЧЕ
		НовыйНомер = "001";	
	#КОНЕЦЕСЛИ
	Возврат НовыйНомер;
КонецФункции
//АБС ВСТАВКА 40145 КОНЕЦ

//АБС ИЗМЕНЕНИЕ 40145  31.03.2014 18:37:55  Шамов
//Функция СформироватьНомерДоговора(Номер)
Функция СформироватьНомерДоговора(Номер, абс_ТипДоговора)
//АБС ИЗМЕНЕНИЕ 40145 КОНЕЦ
	
	//АБС ВСТАВКА 39959  25.03.2014 14:11:36  Шамов
	обрНомер = "";
	для Сч = 1 по СтрДлина(Номер) цикл 
		обрНомер = Сред(Номер, Сч, 1) + обрНомер; 
	конецЦикла;
	//АБС ВСТАВКА 39959 КОНЕЦ
	
	//Доп.соглашение или приложение
	//АБС ИЗМЕНЕНИЕ 40145  31.03.2014 18:34:30  Шамов
	//Если Найти(Номер, "ДС") <> 0 ИЛИ Найти(Номер, "ПР") <> 0 Тогда
	//	
	//	Если Найти(Номер, "ДС") <> 0 Тогда	
	//	//АБС ИЗМЕНЕНИЕ 39959  25.03.2014 14:19:16  Шамов
	//	//ищем вхождение с конца строки
	//	//	НачальныйНомер = Найти(Номер, "ДС") + 2;
	//	//Иначе
	//	//	НачальныйНомер = Найти(Номер, "ПР") + 2;
	//		НачальныйНомер = СтрДлина(обрНомер) - Найти(обрНомер, "СД") + 2;
	//	Иначе
	//		НачальныйНомер = СтрДлина(обрНомер) - Найти(обрНомер, "РП") + 2;
	//	//АБС ИЗМЕНЕНИЕ 39959 КОНЕЦ
	//	КонецЕсли;
	//	НомерПоПорядку = Сред(Номер, НачальныйНомер, 3);
	//	НовыйНомерПоПорядку = Формат(Число(НомерПоПорядку) + 1, "ЧГ=");
	//	Если СтрДлина(НовыйНомерПоПорядку) = 1 Тогда
	//		НовыйНомер = "00" + НовыйНомерПоПорядку;
	//	ИначеЕсли СтрДлина(НовыйНомерПоПорядку) = 2 Тогда
	//		НовыйНомер = "0" + НовыйНомерПоПорядку;
	//	Иначе
	//		НовыйНомер = НовыйНомерПоПорядку;
	//	КонецЕсли;
	//	
	Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДополнительноеСоглашение Тогда
		
		НачальныйНомер = СтрДлина(обрНомер) - Найти(обрНомер, "СД") + 2;

		НомерПоПорядку = Сред(Номер, НачальныйНомер, 3);
		Попытка
			НовыйНомерПоПорядку = Формат(Число(НомерПоПорядку) + 1, "ЧГ=");
			Если СтрДлина(НовыйНомерПоПорядку) = 1 Тогда
				НовыйНомер = "00" + НовыйНомерПоПорядку;
			ИначеЕсли СтрДлина(НовыйНомерПоПорядку) = 2 Тогда
				НовыйНомер = "0" + НовыйНомерПоПорядку;
			Иначе
				НовыйНомер = НовыйНомерПоПорядку;
			КонецЕсли;
		Исключение
			НовыйНомер = Неопределено;
		КонецПопытки;
		
	ИначеЕсли абс_ТипДоговора = Перечисления.абсТипыДоговоров.Приложение Тогда
		НачальныйНомер = СтрДлина(обрНомер) - Найти(обрНомер, "РП") + 2;

		НомерПоПорядку = Сред(Номер, НачальныйНомер, 3);
		Попытка
			НовыйНомерПоПорядку = Формат(Число(НомерПоПорядку) + 1, "ЧГ=");
			Если СтрДлина(НовыйНомерПоПорядку) = 1 Тогда
				НовыйНомер = "00" + НовыйНомерПоПорядку;
			ИначеЕсли СтрДлина(НовыйНомерПоПорядку) = 2 Тогда
				НовыйНомер = "0" + НовыйНомерПоПорядку;
			Иначе
				НовыйНомер = НовыйНомерПоПорядку;
			КонецЕсли;
		Исключение
			НовыйНомер = Неопределено;
		КонецПопытки;
	//АБС ИЗМЕНЕНИЕ 40145 КОНЕЦ
	//обычный договор
	Иначе
		
		СтарыйНомер = Номер;
		НомерПоПорядку = Сред(СтарыйНомер, 8, 5); 
		НовыйНомерПоПорядку = Формат(Число(НомерПоПорядку) + 1, "ЧГ=");
		Если СтрДлина(НовыйНомерПоПорядку) = 1 Тогда
			НовыйНомер = "0000" + НовыйНомерПоПорядку;
		ИначеЕсли СтрДлина(НовыйНомерПоПорядку) = 2 Тогда
			НовыйНомер = "000" + НовыйНомерПоПорядку;
		ИначеЕсли СтрДлина(НовыйНомерПоПорядку) = 3 Тогда
			НовыйНомер = "00" + НовыйНомерПоПорядку;
		ИначеЕсли СтрДлина(НовыйНомерПоПорядку) = 4 Тогда
			НовыйНомер = "0" + НовыйНомерПоПорядку;
		Иначе
			НовыйНомер = НовыйНомерПоПорядку;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат НовыйНомер;
	
КонецФункции

Процедура ЗаписатьВРегистрЗарезервированныеНомера(СтатусНомера) Экспорт
	
	//АБС ВСТАВКА №000024018 НАЧАЛО «13 января 2014 г.», Пополитов
	врДатаСервера = абс_СерверныеФункции.ПолучитьДатуСервера();
	врДатаДоговора = ?(Дата = '00010101', врДатаСервера, Дата);
 	//\\АБС ВСТАВКА №000024018 КОНЕЦ  
	
	НаборЗаписей = РегистрыСведений.абс_ЗарезервированныеНомераДоговоров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Запись = НаборЗаписей.Добавить();
	Запись.Период  = врДатаСервера;
	Запись.Договор = Ссылка;
	Запись.ПрефиксОрганизации = Организация.Префикс;
	Запись.Год = Формат(врДатаДоговора, "ДФ=yyyy");
	Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДополнительноеСоглашение Тогда
		Запись.НомерДоговора = Номер;
		НачальныйНомер = Найти(Номер, "ДС") + 2;
		Запись.НомерДопСоглашения = Сред(Номер, НачальныйНомер, 3);
	ИначеЕсли абс_ТипДоговора = Перечисления.абсТипыДоговоров.Приложение Тогда
		Запись.НомерДоговора = Номер;
		НачальныйНомер = Найти(Номер, "ПР") + 2;
		Запись.НомерПриложения = Сред(Номер, НачальныйНомер, 3);
	Иначе
		Запись.НомерДоговора = Номер;		
	КонецЕсли;
	//соглашение о конфиденциальности
	Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда
		Запись.СОК = "СОК";
	КонецЕсли;
	Запись.СтатусНомера = СтатусНомера;
	НаборЗаписей.Записать();	
	
КонецПроцедуры
//АБС- Тупиков 15051

Функция ПоискОтветственногоПД()
	
	врОтветственныйПД = Справочники.Пользователи.ПустаяСсылка();
	
	//ПОПЫТКА №1
	/////////////////////////////////////////////////////////
	// {{ТТК Лапин А. Заявка № 7718091 20.02.2016 начало
	// помещаю всею попытку в Если Тогда
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОрганизацияТекПользователя = ТекПользователь.абс_Сотрудник.Организация;
	
	Если Организация = ОрганизацияТекПользователя И Организация = Справочники.Организации.НайтиПоКоду("000000001") Тогда  //Организация = КТТК
	// }}ТТК Лапин А. Заявка № 7718091 20.02.2016 окончание	
	
		// Попытаемся получить исполнителя ПД по подразделению инициатора договора.
		Попытка // добавлена обработка исключения при ошибке получения подразделения сотрудника (заявка №000034310 от 03.09.2015)
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	абс_НастройкаДляРаспределенияЗадачПД.Исполнитель
			|ИЗ
			|	РегистрСведений.абс_НастройкаДляРаспределенияЗадачПД КАК абс_НастройкаДляРаспределенияЗадачПД
			|ГДЕ
			|	абс_НастройкаДляРаспределенияЗадачПД.Использование
			|	И абс_НастройкаДляРаспределенияЗадачПД.Подразделение В(&Подразделение)");
			Запрос.УстановитьПараметр("Подразделение", абс_БизнесПроцессыПривелегированный.ПолучитьМассивРодителейПодразделения(абс_Ответственный.абс_Сотрудник.ПодразделениеОрганизации));
			
			ВыборкаИсполнителей = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаИсполнителей.Следующий() Тогда 		
				врОтветственныйПД = ВыборкаИсполнителей.Исполнитель;		
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	// {{ТТК Лапин А. Заявка № 7718091 20.02.2016 начало
	КонецЕсли; 
	// }}ТТК Лапин А. Заявка № 7718091 20.02.2016 окончание
	
	//ПОПЫТКА №2
	/////////////////////////////////////////////////////////
	Если НЕ ЗначениеЗаполнено(врОтветственныйПД) Тогда
		
		ЗапросЗадач = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РЗ.Пользователь КАК Исполнитель,
		|	РЗ.Период
		|ИЗ
		|	РегистрСведений.абс_РаспределениеЗадач КАК РЗ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоОрганизации
		|				ТОГДА РЗ.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	РЗ.Период УБЫВ");
			
		ЗапросЗадач.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Организация));
		ЗапросЗадач.УстановитьПараметр("Организация", Организация);			
		ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
		
		ПользовательКрайнейЗадачи = Неопределено;
		
		Если ВыборкаЗадач.Следующий() Тогда
			ПользовательКрайнейЗадачи = ВыборкаЗадач.Исполнитель;
		КонецЕсли;
		
		Если ПользовательКрайнейЗадачи = Неопределено Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при распределении задач пользователям ПД.");
			Возврат врОтветственныйПД;
		КонецЕсли;		

		ЗапросНастройка = Новый Запрос(
		"ВЫБРАТЬ
		|	РолиИИсполнители.Исполнитель,
		|	РолиИИсполнители.абс_ИндексИсполнителя КАК абс_ИндексИсполнителя
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СогласованиеПД)
		|	И (НЕ РолиИИсполнители.Исполнитель В
		|				(ВЫБРАТЬ
		|					РолиИИсполнители.Исполнитель
		|				ИЗ
		|					РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|				ГДЕ
		|					РолиИИсполнители.Роль = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СуперПользователь)))
		|	И (НЕ РолиИИсполнители.абс_ИндексИсполнителя = 0)
		|	И ВЫБОР
		|			КОГДА &ОтборПоОрганизации
		|				ТОГДА РолиИИсполнители.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	абс_ИндексИсполнителя");
		
		ЗапросНастройка.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Организация));
		ЗапросНастройка.УстановитьПараметр("Организация", Организация);	
		//Сторчевой А.Н. 77125458 06.06.2017 {                                   
		ЗапросНастройка.УстановитьПараметр("Организация", ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК);
		// } Сторчевой А.Н.	77125458 06.06.2017

		ВыборкаНастройки = ЗапросНастройка.Выполнить().Выбрать();
		
		ПользовательТекущейЗадачи = Неопределено;
		
		ВыборкаНастройки.НайтиСледующий(Новый Структура("Исполнитель", ПользовательКрайнейЗадачи));
		
		Если НЕ ВыборкаНастройки.Следующий() Тогда
			
			ВыборкаНастройки.Сбросить();
			
			ВыборкаНастройки.Следующий();
			
		КонецЕсли;
		
		врОтветственныйПД = ВыборкаНастройки.Исполнитель;
		
	КонецЕсли;
	
	///ИТОГ		
	Возврат врОтветственныйПД;
		
КонецФункции	

Функция МожноСогласовыватьДоговор(Отказ)
	
	Если ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если 	    абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ И 
		 Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда		 
		 
		 Запрос = Новый Запрос(
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	абс_ЗакупочныйЗаказДоговоры.Ссылка
		 |ИЗ
		 |	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
		 |ГДЕ
		 |	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента = &ДоговорКонтрагента
		 |	И абс_ЗакупочныйЗаказДоговоры.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Подготовка), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО))
		 |	И абс_ЗакупочныйЗаказДоговоры.Ссылка.КонсолидированныйЗЗПоОЗК = ЛОЖЬ
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	абс_ЗакупочныйЗаказДоговоры.Ссылка");
							   
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ТекстСообщения = "По данному договору есть ЗЗ не в статусе ""Согласование ОФК"":";
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + "" + Выборка.Ссылка;
				
			КонецЦикла;
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
			Возврат Ложь;
		Иначе
						
			СпТиповДоговоровПоЗЗ = Новый СписокЗначений();
			
			СпТиповДоговоровПоЗЗ.Добавить(Перечисления.абсТипыДоговоров.Договор);
			СпТиповДоговоровПоЗЗ.Добавить(Перечисления.абсТипыДоговоров.ДополнительноеСоглашение);
			СпТиповДоговоровПоЗЗ.Добавить(Перечисления.абсТипыДоговоров.Приложение);
			
			Если НЕ СпТиповДоговоровПоЗЗ.НайтиПоЗначению(абс_ТипДоговора) = Неопределено И 
				 НЕ абс_ТиповойДоговор И НЕ абс_БезЗакупочногоЗаказа И 
				 ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				 
				 ЗапросПоВсемЗЗ = Новый Запрос(
				 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				 |	абс_ЗакупочныйЗаказДоговоры.Ссылка
				 |ИЗ
				 |	Документ.абс_ЗакупочныйЗаказ.Договоры КАК абс_ЗакупочныйЗаказДоговоры
				 |ГДЕ
				 |	абс_ЗакупочныйЗаказДоговоры.ДоговорКонтрагента = &ДоговорКонтрагента
				 |	И абс_ЗакупочныйЗаказДоговоры.Ссылка.ПометкаУдаления = ЛОЖЬ
				 |
				 |СГРУППИРОВАТЬ ПО
				 |	абс_ЗакупочныйЗаказДоговоры.Ссылка");
				 
				 ЗапросПоВсемЗЗ.УстановитьПараметр("ДоговорКонтрагента", Ссылка);
				 
				 РезультатПоВсемЗЗ = ЗапросПоВсемЗЗ.Выполнить();
				 
				 Если РезультатПоВсемЗЗ.Пустой() Тогда 

					 ТекстСообщения = "По данному договору нету ЗЗ в статусе ""Согласование ОФК"".";
					 
					 ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
					 
				 КонецЕсли;
			 КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем Контрагент;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Контрагент = Владелец;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Владелец") Тогда
		Контрагент = ДанныеЗаполнения.Владелец;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		Иначе
			Если Контрагент.Покупатель Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ИначеЕсли Контрагент.Поставщик Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Иначе
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Иначе
		Если НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
			ВедениеВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеВедениеВзаиморасчетовПоДоговорам");
			Если НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
				ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент.НеЯвляетсяРезидентом И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РеализацияНаЭкспорт = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если НЕ (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Организация")) Тогда
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидУсловийДоговора) Тогда
		ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	КонецЕсли;

	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВестиПоДокументамРасчетовСКонтрагентом = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДокументамСКонтрагентами");
	КонецЕсли;

	Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
	 ИЛИ  ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
	   И ВалютаВзаиморасчетов <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
	КонецЕсли;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
	КонецЕсли;

	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
	 ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
	КонецЕсли;
КонецПроцедуры

// АБС ВСТАВКА СогласованиеДоговоров
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Договор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.Договор				= Ссылка;
	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусДоговора		= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

//абс Родин Лимитный контроль
Процедура ЗаписатьНовыйСтатусЛимиты(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовЛимитовПоДоговору.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Договор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запись.Договор				= Ссылка;
	Запись.Пользователь	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.Статус				= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаписатьЛимитыПоДоговору(СтруктураПараметров) Экспорт
	
	ТаблицаЛимитов = СтруктураПараметров.ТаблицаЛимитов;
	
	//АБС ВСТАВКА №000030386 НАЧАЛО «13 января 2015 г.», Пополитов
	//Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		и ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
	//\\АБС ВСТАВКА №000030386 КОНЕЦ
		НаборЗаписейТек = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
		НаборЗаписейТек.Отбор.Договор.Установить(Ссылка);
		НаборЗаписейТек.Записать();
		Возврат;
	КонецЕсли;	
	
	Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки или абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ Тогда
		
		НаборЗаписейТек = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
		НаборЗаписейТек.Отбор.Договор.Установить(Ссылка);
		НаборЗаписейТек.Отбор.ТипКонтроля.Установить(СтруктураПараметров.ТипКонтроляЛимитов);

		НаборЗаписейТек.Прочитать();
		Для каждого ТекЗапись Из НаборЗаписейТек Цикл
			ТекЗапись.ТипКонтроляНовый         = "";
			ТекЗапись.ЛимитКУдалению           = Ложь;
			ТекЗапись.ЭтоНовыйПериод           = Ложь;
			ТекЗапись.СуммаДляКорректировки    = 0;
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ Тогда
				ТекЗапись.ЛимитСогласован = Ложь;	
			КонецЕсли;	
				
			НаборЗаписейТек.Записать();
		КонецЦикла;
		
		Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки Тогда
			
			НаборЗаписейТек = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
			НаборЗаписейТек.Отбор.Договор.Установить(Ссылка);
			НаборЗаписейТек.Отбор.ТипКонтроля.Установить(СтруктураПараметров.ТипКонтроляЛимитов);
			
			МассивКУдалению = Новый Массив;
			
			НаборЗаписейТек.Прочитать();
			Для каждого ТекЗапись Из НаборЗаписейТек Цикл
				Если Не ТекЗапись.ЛимитСогласован Тогда
					МассивКУдалению.Добавить(ТекЗапись);	
				КонецЕсли;	
			КонецЦикла;
			
			Для каждого Запись Из МассивКУдалению Цикл
				НаборЗаписейТек.Удалить(Запись);
			КонецЦикла;			
			
			НаборЗаписейТек.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если абс_СтатусДоговора <> Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки и абс_СтатусДоговора <> Перечисления.абсСтатусыДоговоров.Отказ Тогда
		
		Если абс_СтатусДоговора <> Перечисления.абсСтатусыДоговоров.Корректировка Тогда
			НаборЗаписей = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Договор.Установить(Ссылка);
			НаборЗаписей.Записать();
		Иначе
			НаборЗаписейТек = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
			НаборЗаписейТек.Отбор.Договор.Установить(Ссылка);
			НаборЗаписейТек.Отбор.ТипКонтроля.Установить(СтруктураПараметров.ТипКонтроляЛимитов);
			
			МассивКУдалению = Новый Массив;
			
			НаборЗаписейТек.Прочитать();
			Для каждого ТекЗапись Из НаборЗаписейТек Цикл
				Если Не ТекЗапись.ЛимитСогласован И ТекЗапись.ЭтоНовыйПериод Тогда
					МассивКУдалению.Добавить(ТекЗапись);	
				КонецЕсли;	
			КонецЦикла;
			
			Для каждого Запись Из МассивКУдалению Цикл
				НаборЗаписейТек.Удалить(Запись);
			КонецЦикла;			
			
			НаборЗаписейТек.Записать();
		КонецЕсли;
		
		
		Для каждого Стр Из ТаблицаЛимитов Цикл
			
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение и абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки и Стр.ЛимитКУдалению Тогда
				Продолжить;	
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Договор.Установить(Ссылка);
			НаборЗаписей.Отбор.ДатаНачалаЛимитногоКонтроля.Установить(НачалоМесяца(Стр.Месяц));
			НаборЗаписей.Отбор.ДатаОкончанияЛимитногоКонтроля.Установить(КонецМесяца(Стр.Месяц));
			
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
				НаборЗаписей.Отбор.ТипКонтроля.Установить(СтруктураПараметров.НовыйТипКонтроляЛимитов);
			Иначе
				НаборЗаписей.Отбор.ТипКонтроля.Установить(СтруктураПараметров.ТипКонтроляЛимитов);
			КонецЕсли;
			
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение и абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки  Тогда
				НаборЗаписей.Отбор.ТипКонтроля.Установить(СтруктураПараметров.НовыйТипКонтроляЛимитов);
			КонецЕсли;
			
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ДатаНачалаЛимитногоКонтроля     = НачалоМесяца(Стр.Месяц);
				НоваяЗапись.ДатаОкончанияЛимитногоКонтроля  = КонецМесяца(Стр.Месяц);
				НоваяЗапись.Договор  					    = Ссылка;
				НоваяЗапись.ТипКонтроля                     = СтруктураПараметров.ТипКонтроляЛимитов;
			Иначе
				НоваяЗапись = НаборЗаписей[0]; 
			КонецЕсли;
			
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение и абс_СтатусДоговораСтарый <> Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки Тогда
				НоваяЗапись.Сумма                    = Стр.Сумма;
				НоваяЗапись.СуммаДляКорректировки    = 0;
				НоваяЗапись.ЛимитСогласован          = Истина;
				НоваяЗапись.ЛимитКУдалению           = Стр.ЛимитКУдалению;
				НоваяЗапись.ТипКонтроля              = СтруктураПараметров.ТипКонтроляЛимитов;
			ИначеЕсли абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение и абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки Тогда
				НоваяЗапись.Сумма                    = Стр.СуммаДляКорректировки;
				НоваяЗапись.СуммаДляКорректировки    = 0;
				НоваяЗапись.ЛимитСогласован          = Истина;
				НоваяЗапись.ТипКонтроляНовый         = "";
				НоваяЗапись.ЭтоНовыйПериод           = Ложь;
				НоваяЗапись.ЛимитКУдалению           = Стр.ЛимитКУдалению;
				НоваяЗапись.ТипКонтроля              = СтруктураПараметров.ТипКонтроляЛимитов;
				
				Если  СтруктураПараметров.НовыйТипКонтроляЛимитов <> СтруктураПараметров.ТипКонтроляЛимитов Тогда
					НоваяЗапись.ТипКонтроля = СтруктураПараметров.НовыйТипКонтроляЛимитов;
				Иначе
					НоваяЗапись.ТипКонтроля = СтруктураПараметров.ТипКонтроляЛимитов;
				КонецЕсли;
				
			ИначеЕсли абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка или   абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки Тогда
				
				НоваяЗапись.Сумма                    = Стр.Сумма;
				НоваяЗапись.СуммаДляКорректировки    = Стр.СуммаДляКорректировки;
				НоваяЗапись.ЛимитСогласован 		 = Не Стр.ЭтоНовыйПериод;
				НоваяЗапись.ЛимитКУдалению           = Стр.ЛимитКУдалению;
				НоваяЗапись.ЭтоНовыйПериод           = Стр.ЭтоНовыйПериод;
				НоваяЗапись.ТипКонтроля 		  = СтруктураПараметров.ТипКонтроляЛимитов;
				
				Если СтруктураПараметров.НовыйТипКонтроляЛимитов = СтруктураПараметров.ТипКонтроляЛимитов Тогда
					НоваяЗапись.ТипКонтроляНовый      = "";
				Иначе
					НоваяЗапись.ТипКонтроляНовый      = СтруктураПараметров.НовыйТипКонтроляЛимитов;
				КонецЕсли;
				
			Иначе	
				НоваяЗапись.Сумма                    = Стр.Сумма;
				НоваяЗапись.СуммаДляКорректировки    = 0;
				НоваяЗапись.ЛимитСогласован 		 = Не Стр.ЭтоНовыйПериод;
				
			КонецЕсли;
			
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка или абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
				НоваяЗапись.ТипКонтроляНовый         = "";
				НоваяЗапись.ЛимитКУдалению           = Ложь;
				НоваяЗапись.ТипКонтроля              = СтруктураПараметров.НовыйТипКонтроляЛимитов;
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

Функция абс_ТиповаяПроверкаЭлемента() Экспорт
	
	Возврат не ОбменДанными.Загрузка и не ЭтоГруппа;
	
КонецФункции	

//Процедура ЗаписатьЛимитыПоДоговоруНарастающий(СтруктураЛимитногоКонтроля) Экспорт
//	
//	
//		Если абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.Отказ Тогда
//			
//			НаборЗаписейТек = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
//			НаборЗаписейТек.Отбор.Договор.Установить(Ссылка);
//			НаборЗаписейТек.Отбор.ТипКонтроля.Установить(Перечисления.абс_ТипКонтроляЛимитов.НарастающимИтогом);
//			НаборЗаписейТек.Прочитать();
//			Для каждого ТекЗапись Из НаборЗаписейТек Цикл
//				ТекЗапись.ТекущийТипКонтроля       = Истина;
//				ТекЗапись.ИсходныйТипКонтроля      = Истина;
//				ТекЗапись.СуммаДляКорректировки    = 0;
//				НаборЗаписейТек.Записать();
//			КонецЦикла;
//			
//			НаборЗаписейТек = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
//			НаборЗаписейТек.Отбор.Договор.Установить(Ссылка);
//			НаборЗаписейТек.Отбор.ТипКонтроля.Установить(Перечисления.абс_ТипКонтроляЛимитов.ПомесячныйКонтроль);
//			НаборЗаписейТек.Записать();
//			
//		КонецЕсли;
//		
//		Если абс_СтатусЛимита <> Перечисления.абс_СтатусыЛимитовПоДоговору.Отказ Тогда
//			
//			Если абс_СтатусЛимита <> Перечисления.абс_СтатусыЛимитовПоДоговору.Корректировка Тогда
//				НаборЗаписей = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
//				НаборЗаписей.Отбор.Договор.Установить(Ссылка);
//				НаборЗаписей.Записать();
//			КонецЕсли;
//			
//			ЭтоНовыйПериод = Ложь;
//			
//			НаборЗаписей = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.Договор.Установить(Ссылка);
//			
//			Если абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.Корректировка ИЛИ абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.УтвержденПослеКорректировки Тогда	
//				НаборЗаписей.Отбор.ДатаНачалаЛимитногоКонтроля.Установить(СтруктураЛимитногоКонтроля.ДатаНачалаЛимитногоКонтроляКор);
//				НаборЗаписей.Отбор.ДатаОкончанияЛимитногоКонтроля.Установить(СтруктураЛимитногоКонтроля.ДатаОкончанияЛимитногоКонтроляКор);
//			Иначе
//				НаборЗаписей.Отбор.ДатаНачалаЛимитногоКонтроля.Установить(СтруктураЛимитногоКонтроля.ДатаНачалаЛимитногоКонтроля);
//				НаборЗаписей.Отбор.ДатаОкончанияЛимитногоКонтроля.Установить(СтруктураЛимитногоКонтроля.ДатаОкончанияЛимитногоКонтроля);
//			КонецЕсли;
//			
//			НаборЗаписей.Отбор.ТипКонтроля.Установить(Перечисления.абс_ТипКонтроляЛимитов.НарастающимИтогом);
//			НаборЗаписей.Прочитать();
//			
//			Если НаборЗаписей.Количество() = 0 Тогда
//				НоваяЗапись = НаборЗаписей.Добавить();
//				ЭтоНовыйПериод = Истина;
//			Иначе
//				НоваяЗапись = НаборЗаписей[0]; 
//			КонецЕсли;
//			
//			Если Не НоваяЗапись.ЛимитСогласован и Не ЭтоНовыйПериод Тогда
//				ЭтоНовыйПериод = Истина;
//			КонецЕсли;
//			
//			
//			НоваяЗапись.Договор					        = Ссылка;
//			НоваяЗапись.ДатаНачалаЛимитногоКонтроля		= СтруктураЛимитногоКонтроля.ДатаНачалаЛимитногоКонтроля;
//			НоваяЗапись.ДатаОкончанияЛимитногоКонтроля  = СтруктураЛимитногоКонтроля.ДатаОкончанияЛимитногоКонтроля;
//			НоваяЗапись.ТипКонтроля						= Перечисления.абс_ТипКонтроляЛимитов.НарастающимИтогом;
//			
//			Если абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.Корректировка ИЛИ абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.УтвержденПослеКорректировки Тогда	
//				НоваяЗапись.ДатаНачалаЛимитногоКонтроля		= СтруктураЛимитногоКонтроля.ДатаНачалаЛимитногоКонтроляКор;
//				НоваяЗапись.ДатаОкончанияЛимитногоКонтроля  = СтруктураЛимитногоКонтроля.ДатаОкончанияЛимитногоКонтроляКор;
//			Иначе
//				НоваяЗапись.ДатаНачалаЛимитногоКонтроля		= СтруктураЛимитногоКонтроля.ДатаНачалаЛимитногоКонтроля;
//				НоваяЗапись.ДатаОкончанияЛимитногоКонтроля  = СтруктураЛимитногоКонтроля.ДатаОкончанияЛимитногоКонтроля;
//			КонецЕсли;
//			
//			Если абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.Подготовка Тогда
//				НоваяЗапись.Сумма      = СтруктураЛимитногоКонтроля.Сумма;
//				НоваяЗапись.ИсходныйТипКонтроля      = Истина;
//				НоваяЗапись.ТекущийТипКонтроля       = Истина;
//			ИначеЕсли абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.Корректировка Тогда
//				НоваяЗапись.Сумма     				 = СтруктураЛимитногоКонтроля.Сумма;
//				НоваяЗапись.СуммаДляКорректировки    = СтруктураЛимитногоКонтроля.СуммаКор;
//				
//				НоваяЗапись.ЛимитСогласован          = Не ЭтоНовыйПериод;
//				НоваяЗапись.ТекущийТипКонтроля       = Истина;
//				
//				НаборЗаписейТек = РегистрыСведений.абс_ЛимитыПоДоговорам.СоздатьНаборЗаписей();
//				НаборЗаписейТек.Отбор.Договор.Установить(Ссылка);
//				НаборЗаписейТек.Отбор.ТипКонтроля.Установить(Перечисления.абс_ТипКонтроляЛимитов.ПомесячныйКонтроль);
//				НаборЗаписейТек.Прочитать();
//				Для каждого ТекЗапись Из НаборЗаписейТек Цикл
//					ТекЗапись.ТекущийТипКонтроля       = Ложь;
//					НаборЗаписейТек.Записать();
//				КонецЦикла;
//				
//			ИначеЕсли абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.Утвержден Тогда
//				НоваяЗапись.Сумма     				 = СтруктураЛимитногоКонтроля.Сумма;
//				НоваяЗапись.СуммаДляКорректировки    = 0;
//				НоваяЗапись.ЛимитСогласован          = Истина;
//				НоваяЗапись.ИсходныйТипКонтроля      = Истина;
//				НоваяЗапись.ТекущийТипКонтроля       = Истина;
//			ИначеЕсли абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.УтвержденПослеКорректировки Тогда
//				НоваяЗапись.Сумма     				 = СтруктураЛимитногоКонтроля.СуммаКор;
//				НоваяЗапись.СуммаДляКорректировки    = 0;
//				НоваяЗапись.ЛимитСогласован          = Истина;
//				НоваяЗапись.ИсходныйТипКонтроля      = Истина;
//				НоваяЗапись.ТекущийТипКонтроля       = Истина;
//			КонецЕсли;
//			
//			НаборЗаписей.Записать();
//		КонецЕсли;
//	
//КонецПроцедуры

//абс Родин Лимитный контроль

Процедура ПриЗаписи(Отказ)
	
	// Если обмен данными не делаем проверок
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
        	
	Попытка
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусДоговораПоРегистру(Ссылка);
				
		Если НЕ абс_СтатусДоговора = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда
			
			// Если переводим на дополнительное согласование, то дописываем пользователя дополнительного согласования.
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование
				или абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
				абс_ПричинаИзмененияСтатуса = "Дополнительное согласование: " + абс_СотрудникДопСогласование + ". " + абс_ПричинаИзмененияСтатуса; 
			КонецЕсли;
			     
			ЗаписатьНовыйСтатус(абс_СтатусДоговора, абс_ПричинаИзмененияСтатуса);		
		КонецЕсли;
		
		//абс Родин Лимитный контроль
		//Если глЗначениеПеременной("абс_ИспользоватьКонтрольЛимитовПоДоговорам") Тогда
		//	СтатусПоРегиструЛимит = абс_БизнесПроцессы.ПолучитьСтатусДоговораЛимитПоРегистру(Ссылка);
		//	
		//	Если НЕ абс_СтатусЛимита = СтатусПоРегиструЛимит ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегиструЛимит) Тогда
		//		
		//		ЗаписатьНовыйСтатусЛимиты(абс_СтатусЛимита, абс_ПричинаИзмененияСтатусаЛимиты);		
		//		
		//	КонецЕсли;
		//КонецЕсли;
		//абс Родин Лимитный контроль
		
		Если мСменаИсполнителяПД = Истина Тогда
			
			ЗаписатьНовыйСтатус(Перечисления.абсСтатусыДоговоров.СогласованиеПДСменаОтветственного, абс_ПричинаИзмененияСтатуса);
			
			ЗаписатьНовыйСтатус(абс_СтатусДоговора, "Установлен новый ответственный ПД: " + абс_ОтветственныйПД + ".");		
			
		КонецЕсли;
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		Если НЕ СогласованиеБезБП Тогда
			
			// Запустим БП если он еще не запущен
			Если  абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
				
				БПСогласование = НайтиБПСогласование();
				
				Если Не ЗначениеЗаполнено(БПСогласование) Тогда
					абс_БизнесПроцессы.ЗапуститьБПСогласованияДоговора(Ссылка);	
				КонецЕсли;	
			КонецЕсли;
			
			//абс Родин Лимитный контроль  
			Если глЗначениеПеременной("абс_ИспользоватьКонтрольЛимитовПоДоговорам") Тогда
				//	Если  абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
				//		
				//		Если  абс_СтатусЛимита = Перечисления.абс_СтатусыЛимитовПоДоговору.Подготовка Тогда
				//			
				//			БПСогласованиеЛимитов = НайтиБПСогласованиеЛимитов();
				//			
				//			Если Не ЗначениеЗаполнено(БПСогласованиеЛимитов) Тогда
				//				абс_БизнесПроцессы.ЗапуститьБПСогласованияЛимитаДоговора(Ссылка);	
				//			КонецЕсли;	
				//		КонецЕсли;
				
				Если  абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка Тогда
					
					БПСогласованиеКорректировкаЛимитов = НайтиБПСогласованиеКорректировкаЛимитов();
					
					Если Не ЗначениеЗаполнено(БПСогласованиеКорректировкаЛимитов) Тогда
						абс_БизнесПроцессы.ЗапуститьБПСогласованияКорректировкиЛимитаДоговора(Ссылка);	
					КонецЕсли;	
				КонецЕсли;
				//		
				//	КонецЕсли;
				//	
				// Попробуем закрыть задачу согласования лимитов
				ЗадачаСогласование = ПолучитьЗадачуПоДоговоруСогласованиеЛимиты();
				
				Если НЕ ЗадачаСогласование = Неопределено Тогда
					ВыполнитьЗадачуСогласованиеЛимиты(ЗадачаСогласование);
				КонецЕсли;
				
			КонецЕсли;
			//абс Родин Лимитный контроль
			
			
			// Выберем ответственого в случае дополнительного согласования
			Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование
				или абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
				
				БПСогласование = НайтиБПСогласование();
				
				Если НЕ БПСогласование = Неопределено Тогда
					
					БПСогласованиеОбъект = БПСогласование.ПолучитьОбъект();
					
					БПСогласованиеОбъект.СотрудникДопСогласование 	= абс_СотрудникДопСогласование;
					
					Если НЕ СтатусПоРегистру = абс_СтатусДоговора Тогда
						БПСогласованиеОбъект.СтатусДопСогласования 		= СтатусПоРегистру;
					КонецЕсли;
					
					БПСогласованиеОбъект.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Попробуем закрыть задачу согласования
			ЗадачаСогласование = ПолучитьЗадачуПоДоговоруСогласование();
			
			Если НЕ ЗадачаСогласование = Неопределено Тогда
				ВыполнитьЗадачуСогласование(ЗадачаСогласование);
			КонецЕсли;
			
			// Запустим БП закрытия если он еще не запущен
			Если  абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Закрытие Тогда
				
				БПЗакрытие = НайтиБПЗакрытие();
				
				Если НЕ ЗначениеЗаполнено(БПЗакрытие) Тогда
					
					МассивРолей = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
					
					абс_БизнесПроцессы.ЗапуститьБПЗакрытияДоговора(Ссылка);			
					
				КонецЕсли;
			КонецЕсли;
			
			// Закроем задачу БП закрытия
			
			ЗадачаЗакрытие = ПолучитьЗадачуПоДоговоруЗакрытие();
			
			Если НЕ ЗадачаЗакрытие = Неопределено Тогда
				ВыполнитьЗадачуЗакрытие(ЗадачаЗакрытие);		
			КонецЕсли;
		КонецЕсли;
		
	Исключение    		
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
	Если Отказ Тогда	   		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи договора контрагента.", Отказ);
		абс_ЗавершитьЗамерПроизводительности();
	КонецЕсли;	
	//\\АБС ВСТАВКА №38173 КОНЕЦ
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоДоговору(Ссылка, "абсСогласованиеДоговоров");
	
КонецФункции

//абс Родин Лимитный контроль  
Функция НайтиБПСогласованиеЛимитов() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоДоговору(Ссылка, "абс_СогласованиеЛимитовДоговоров");
	
КонецФункции

Функция НайтиБПСогласованиеКорректировкаЛимитов() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоДоговору(Ссылка, "абс_КорректировкаЛимитовДоговоров");
	
КонецФункции

Функция ПолучитьЗадачуПоДоговоруСогласованиеЛимиты()  Экспорт
	
    ТекСтатус = Ссылка.абс_СтатусДоговора;
	БП = НайтиБПСогласованиеКорректировкаЛимитов();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_КорректировкаЛимитовДоговоров.ТочкиМаршрута.КорректировкаЛимита);
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_КорректировкаЛимитовДоговоров.ТочкиМаршрута.КорректировкаЛимитов);
	КонецЕсли;
	
	Возврат НайтиЗадачуПоДоговору(БП, СпТочек, ,Ложь);

КонецФункции

Процедура ВыполнитьЗадачуСогласованиеЛимиты(ЗадачаСогласование)  Экспорт
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
		ЗадачаОбъект.ВыполнитьЗадачу();
		Если Не ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс.ДоговорКонтрагента) Тогда
			БПОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();			
			БПОбъект.ДоговорКонтрагента = Ссылка;
			БПОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//абс Родин Лимитный контроль  

Функция НайтиБПЗакрытие() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоДоговору(Ссылка, "абсЗакрытиеДоговоров");
	
КонецФункции

Функция НайтиЗадачуПоДоговору(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В(&ТочкаМаршрута)
	                           |	И ВЫБОР
	                           |			КОГДА &ОтборПоИсполнителю
	                           |				ТОГДА абсЗадачаДоговора.Исполнитель = &Исполнитель
	                           |			ИНАЧЕ ИСТИНА
	                           |		КОНЕЦ
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
	//АБС Изменение 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов	
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель"		, Исполнитель);
	ЗапросЗадач.УстановитьПараметр("ОтборПоИсполнителю"	, Ложь);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;
	
КонецФункции

Функция ПолучитьЗадачуПоДоговоруСогласование()  Экспорт
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СпТочек = Новый Массив;  	
	ТекСтатус = Ссылка.абс_СтатусДоговора; 	
	Попытка           
		
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеОтказ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
	//Сторчевой А.Н. D2016-1222-3124 {                                   
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеТехБлоком Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		// } D2016-1222-3124 Сторчевой А.Н.
		//Сторчевой А.Н. D2016-1207-3107 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		// } Сторчевой А.Н. D2016-1207-3107
	//Сторчевой А.Н. 77150592 31.07.2017 {
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеДТПиР Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
	// } Сторчевой А.Н. 77150592 31.07.2017
	//Сторчевой А.Н. D2017-0517-3373 {
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеДСиМТО Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДТПиР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеТехническимДиректором Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДСиМТО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		//Сторчевой А.Н. 77150592 31.07.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		// } Сторчевой А.Н. 77150592 31.07.2017		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеКазначейством Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
	// } Сторчевой А.Н. D2017-0517-3373
	//Сторчевой А.Н. 77163404 23.08.2017 {
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеАД Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеКазначейством);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
	// } Сторчевой А.Н. 77163404 23.08.2017
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Уточнение Тогда
		
		//АБС ВСТАВКА №46998 НАЧАЛО «29 сентября 2014 г.», Пополитов
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		//\\АБС ВСТАВКА №46998 КОНЕЦ  
		//АБС ВСТАВКА №31836 НАЧАЛО «11 марта 2015 г.», Пополитов
  	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
  		//\\АБС ВСТАВКА №31836 КОНЕЦ    	
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеОдобрениеСДилиОСА);
		//Сторчевой А.Н. D2016-1207-3107 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДополнительноеСогласованиеБухгалтером);
		// } Сторчевой А.Н. D2016-1207-3107
		//Сторчевой А.Н. D2017-0517-3373 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДСиМТО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехническимДиректором);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеКазначейством);
		// } Сторчевой А.Н. D2017-0517-3373
		//Сторчевой А.Н. 77150592 31.07.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДТПиР);
		// } Сторчевой А.Н. 77150592 31.07.2017
		//Сторчевой А.Н. 77163404 23.08.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеАД);
		// } Сторчевой А.Н. 77163404 23.08.2017
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаКонтрагента Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП);
		
		// АБС Фролов 20110818 Добавлена возможность отправки на доп. согласование со статуса Проверки ОФК
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласованиеОФК);
		
		//АБС ВСТАВКА 40131  09.04.2014 15:25:39  Шамов
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);
		//АБС ВСТАВКА 40131 КОНЕЦ
		//Сторчевой А.Н. D2016-1222-3124 {                                   
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		// } Сторчевой А.Н.	D2016-1222-3124	
		//Проектный учет Родин
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеРуководителемБлока);
		//Сторчевой А.Н. D2017-0517-3373 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДСиМТО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехническимДиректором);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДТПиР);
		// } Сторчевой А.Н. D2017-0517-3373
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемБлока Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);
		//Проектный учет Родин
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		//АБС ВСТАВКА №6106 НАЧАЛО	
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДополнительноеСогласованиеБухгалтером);
		//АБС ВСТАВКА №31836 НАЧАЛО «11 марта 2015 г.», Пополитов
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
  		//\\АБС ВСТАВКА №31836 КОНЕЦ  		
		//Сторчевой А.Н. D2016-1207-3107 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		// } Сторчевой А.Н. D2016-1207-3107
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		//\\АБС ВСТАВКА №6106 КОНЕЦ
		//Сторчевой А.Н. D2016-1207-3107 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		// } Сторчевой А.Н. D2016-1207-3107
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		//Сторчевой А.Н. D2016-1207-3107 {
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		// } Сторчевой А.Н. D2016-1207-3107
			
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПД Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеПервымЛицом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДИБ);
		
		Если мСменаИсполнителяПД = Истина Тогда
			СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		КонецЕсли;
		//Сторчевой А.Н. D2016-1207-3107 {
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДополнительноеСогласованиеБухгалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);  
		// } Сторчевой А.Н. D2016-1207-3107
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		//++ Задача № 10549 Логинчев А.С. 21.05.2012 17:29:01
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		//-- Задача № 10549 Логинчев А.С.
		//Сторчевой А.Н. 77150592 31.07.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехническимДиректором);
		// } Сторчевой А.Н. 77150592 31.07.2017		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование Тогда
		
		// АБС Фролов 20110818 Добавлена возможность отправки на доп. согласование со статуса Проверки ОФК
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеОдобрениеСДилиОСА);
		//АБС ВСТАВКА №46998 НАЧАЛО «29 сентября 2014 г.», Пополитов
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		//\\АБС ВСТАВКА №46998 КОНЕЦ 		
		//Сторчевой А.Н. D2016-1207-3107 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДополнительноеСогласованиеБухгалтером);
		// } Сторчевой А.Н. D2016-1207-3107
		//Сторчевой А.Н. D2017-0517-3373 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДСиМТО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехническимДиректором);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеКазначейством);
		// } Сторчевой А.Н. D2017-0517-3373
		//Сторчевой А.Н. 77150592 31.07.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДТПиР);
		// } Сторчевой А.Н. 77150592 31.07.2017
		//Сторчевой А.Н. 77163404 23.08.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеАД);
		// } Сторчевой А.Н. 77163404 23.08.2017
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПервоеЛицо Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПВП Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		//Сторчевой А.Н. D2016-1207-3107 {
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		// } Сторчевой А.Н. D2016-1207-3107
		//Сторчевой А.Н. D2016-1222-3124 {                                   
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором);
		// } Сторчевой А.Н.	D2016-1222-3124	
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА Тогда	
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		//Сторчевой А.Н. D2016-1207-3107 {
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором);
		// } Сторчевой А.Н. D2016-1207-3107
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Регистрация Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеПервымЛицом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		// 20110411 Типовые соглашения о конфиденциальности переходят из статуса "Подготовка" в статус "Подписание и регистрация"
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеОдобрениеСДилиОСА);
		//Сторчевой А.Н. D2016-1207-3107 {
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором);
		// } Сторчевой А.Н. D2016-1207-3107
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.РегистрацияДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Отказ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеПервымЛицом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.РегистрацияДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДирКСП);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДополнительноеСогласованиеБухгалтером);   		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДИБ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);  
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);  
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
		
		//АБС ВСТАВКА №3685 НАЧАЛО
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласованиеОФК);
		//\\АБС ВСТАВКА №3685 КОНЕЦ
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеОдобрениеСДилиОСА);
		//Сторчевой А.Н. D2016-1222-3124 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехБлоком);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеАудитором);
		// } Сторчевой А.Н. D2016-1222-3124
		//Сторчевой А.Н. D2017-0517-3373 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДСиМТО);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеТехническимДиректором);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеКазначейством);
		// } Сторчевой А.Н. D2017-0517-3373
		//Сторчевой А.Н. 77150592 31.07.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДТПиР);
		// } Сторчевой А.Н. 77150592 31.07.2017
		//Сторчевой А.Н. 77163404 23.08.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеАД);
		// } Сторчевой А.Н. 77163404 23.08.2017
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Отмена Тогда
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента); 
		//Сторчевой А.Н. 77122555 31.05.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		// } Сторчевой А.Н. 77122555 31.05.2017
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДИБ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
				
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДЭБ Тогда
		//Сторчевой А.Н. D2017-0517-3373 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеКазначейством);
		// } Сторчевой А.Н. D2017-0517-3373
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);	
		//Сторчевой А.Н. D2016-1207-3107 {
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДополнительноеСогласованиеБухгалтером);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
	    СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		//Сторчевой А.Н. 77163404 23.08.2017 {
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеАД);
		// } Сторчевой А.Н. 77163404 23.08.2017
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеАудитором Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеУточнение);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ttk_СогласованиеПДМКР Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеРуководителемПД);
		// } Сторчевой А.Н. D2016-1207-3107
	КонецЕсли;
	
	Исключение
		//Значит по БП не все объекты поместили	
	КонецПопытки;	
	
	//АБС ИЗМЕНЕНИЕ Урал 28.01.2014: ОтборПоИсполнителю = Ложь
	Возврат НайтиЗадачуПоДоговору(БП, СпТочек, ,Ложь);
   	//\\АБС УРАЛ

КонецФункции

Функция ПолучитьЗадачуПоДоговоруЗакрытие()
	
	БП = НайтиБПЗакрытие();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекСтатус = Ссылка.абс_СтатусДоговора;

	СпТочек = Новый Массив;
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Закрыт Тогда
		СпТочек.Добавить(БизнесПроцессы.абсЗакрытиеДоговоров.ТочкиМаршрута.УтверждениеЗакрытияБухгалтерией);
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		СпТочек.Добавить(БизнесПроцессы.абсЗакрытиеДоговоров.ТочкиМаршрута.УтверждениеЗакрытияБухгалтерией);
	КонецЕсли;
			
	Возврат НайтиЗадачуПоДоговору(БП, СпТочек);

КонецФункции

Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)  Экспорт
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
		Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс.Контрагент) или Не ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс.ДоговорКонтрагента) Тогда
			
			БПОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();			
			БПОбъект.Контрагент 		= Ссылка.Владелец;
			БПОбъект.ДоговорКонтрагента = Ссылка;
			БПОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыполнитьЗадачуЗакрытие(ЗадачаЗакрытие)
	
	Если НЕ ЗадачаЗакрытие.Выполнена Тогда
		
		ЗадачаОбъект = ЗадачаЗакрытие.ПолучитьОбъект();				
		ЗадачаОбъект.ВыполнитьЗадачу();
	
	КонецЕсли;

КонецПроцедуры
// АБС ВСТАВКА СогласованиеДоговоров КОНЕЦ

// АБС ВСТАВКА Печать бланка согласования Фролов
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("БланкСогласования", "Бланк согласования");
	
	Если абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда 
		
		СтруктураМакетов.Вставить("ШаблонСоглашениеОКонфиденциальности", "Соглашение о конфиденциальности");
		СтруктураМакетов.Вставить("ШаблонConfidentialityAgreement", "Соглашение о конфиденциальности (Confidentiality agreement)");
		
	КонецЕсли;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		#Если Клиент Тогда
		Предупреждение("Бланк согласования можно распечатать только после его записи");
		#КонецЕсли
		Возврат;
	КонецЕсли; 
	
	Если ИмяМакета = "БланкСогласования" Тогда
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		#Если Клиент Тогда
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Справочник.ДоговорыКонтрагентов", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ДоговорыКонтрагентов", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		#КонецЕсли							
		Возврат;
		
	ИначеЕсли ИмяМакета = "ШаблонСоглашениеОКонфиденциальности" Тогда
		
		ПечатьСоглашения(ИмяМакета);
		
	ИначеЕсли ИмяМакета =  "ШаблонConfidentialityAgreement" Тогда
		
		ПечатьСоглашения(ИмяМакета);
		
    КонецЕсли;
	
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

Процедура ПриКопировании(ОбъектКопирования)
	
	//абс вставка Мэппинг контрагентов начало
	
	Если ЭтоГруппа = Ложь ТОгда
		
		абс_УИЛ_ДЗО = "";	
		//АБС ВСТАВКА №8693 НАЧАЛО
		абс_ОтветственныйПД = Справочники.Пользователи.ПустаяСсылка();
		//\\АБС ВСТАВКА №8693 КОНЕЦ 
		
	КонецЕсли;
	
	//абс вставка Мэппинг контрагентов конец
	
КонецПроцедуры

Функция ЗапросДанныхСправочноИтогоБезНДС() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Ссылка.Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(РС.Сумма) КАК СуммаПоОрганизации,
	               |	СУММА(РС.ПроцентОтклонения) КАК ПроцентОтклонения
	               |ИЗ
	               |	РегистрСведений.абс_СтоимостиАктивовНаПоследнююОтчетнуюДату.СрезПоследних(, Организация = &Организация) КАК РС";
				   
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	врСуммаПоОрганизации = ?(Результат.СуммаПоОрганизации=Null,0,Результат.СуммаПоОрганизации);
	врПроцентОтклонения  = ?(Результат.ПроцентОтклонения=Null,0,Результат.ПроцентОтклонения);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(врСуммаПоОрганизации,"Сумма активов по организации: "+Формат(врСуммаПоОрганизации,"ЧДЦ=2")+" руб.");
	СписокЗначений.Добавить(врПроцентОтклонения,"Допустимый % отклонения: "+Формат(врПроцентОтклонения,"ЧДЦ=2")+"%");
	
	МассивСтатусовДоговора = Новый Массив;
	МассивСтатусовДоговора.Добавить(Перечисления.абсСтатусыДоговоров.Отмена);
	СтруктураПараметров = новый Структура;
	СтруктураПараметров.Вставить("Ссылка",Ссылка);
	СтруктураПараметров.Вставить("МассивСтатусовДоговора",МассивСтатусовДоговора);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ДоговорыКонтрагентов.абс_СуммаБезНДС) КАК СуммаПоДоговору,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	               |	ДоговорыКонтрагентов.абс_ОсновнойДоговор КАК ОсновнойДоговор,
	               |	ДоговорыКонтрагентов.Ссылка КАК Договор
	               |ПОМЕСТИТЬ ПреТаблица
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	(ДоговорыКонтрагентов.Ссылка = &Ссылка
	               |			ИЛИ ДоговорыКонтрагентов.абс_ОсновнойДоговор = &Ссылка)
	               |	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	               |	И (НЕ ДоговорыКонтрагентов.абс_СтатусДоговора В (&МассивСтатусовДоговора))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	               |	ДоговорыКонтрагентов.абс_ОсновнойДоговор,
	               |	ДоговорыКонтрагентов.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	               |	СУММА(ДоговорыКонтрагентов.абс_СуммаБезНДС) КАК СуммаПоДоговору
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	(ДоговорыКонтрагентов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ПреТаблица.ОсновнойДоговор
	               |				ИЗ
	               |					ПреТаблица КАК ПреТаблица
	               |				ГДЕ
	               |					(НЕ ПреТаблица.ОсновнойДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				СГРУППИРОВАТЬ ПО
	               |								ПреТаблица.ОсновнойДоговор)
	               |			ИЛИ ДоговорыКонтрагентов.абс_ОсновнойДоговор В
	               |				(ВЫБРАТЬ
	               |					ПреТаблица.ОсновнойДоговор
	               |				ИЗ
	               |					ПреТаблица КАК ПреТаблица
	               |				ГДЕ
	               |					(НЕ ПреТаблица.ОсновнойДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	               |				СГРУППИРОВАТЬ ПО
	               |								ПреТаблица.ОсновнойДоговор))
	               |	И (НЕ ДоговорыКонтрагентов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ПреТаблица.Договор
	               |				ИЗ
	               |					ПреТаблица КАК ПреТаблица
	               |				СГРУППИРОВАТЬ ПО
	               |								ПреТаблица.Договор))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПреТаблица.ВалютаВзаиморасчетов,
	               |	СУММА(ПреТаблица.СуммаПоДоговору)
	               |ИЗ
	               |	ПреТаблица КАК ПреТаблица
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПреТаблица.ВалютаВзаиморасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПреТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаДанных.ВалютаВзаиморасчетов,
	               |	СУММА(ТаблицаДанных.СуммаПоДоговору) КАК СуммаПоДоговору
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДанных.ВалютаВзаиморасчетов";
				   
	Результат = абс_Привилегированный.ВыполнитьЗапрос(ТекстЗапроса,СтруктураПараметров).Выбрать();
	врСуммаПоДоговору = 0;
	ДатаСервера = абс_СерверныеФункции.ПолучитьДатуСервера();
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Пока Результат.Следующий() Цикл
		Если Результат.ВалютаВзаиморасчетов.Пустая() Тогда
			Продолжить;
		КонецЕсли;		
		врСуммаПоДоговору = врСуммаПоДоговору + МодульВалютногоУчета.ПересчитатьВСуммуРегл(?(Результат.СуммаПоДоговору=Null,0,Результат.СуммаПоДоговору), ВалютаРегламентированногоУчета, Результат.ВалютаВзаиморасчетов, ДатаСервера)	
	КонецЦикла;	
	Если врСуммаПоОрганизации <= 0 Тогда 
		ТекПроцентОтклонения = 0
	Иначе
		ТекПроцентОтклонения = врСуммаПоДоговору / врСуммаПоОрганизации * 100;
	КонецЕсли;
	ПревышенПорогОтклонения = ТекПроцентОтклонения > врПроцентОтклонения; 
	СписокЗначений.Добавить(врСуммаПоДоговору,"Сумма по договору (и где он как основ.): "+Формат(врСуммаПоДоговору,"ЧДЦ=2")+" руб.");
	СписокЗначений.Добавить(ТекПроцентОтклонения,"Тек. % отклонения: "+Формат(ТекПроцентОтклонения,"ЧДЦ=2")+"%");
	СписокЗначений.Добавить(ПревышенПорогОтклонения,"Превышен % отклонения: "+?(ПревышенПорогОтклонения,"Да","Нет"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СправочноИтогоБезНДС",врСуммаПоДоговору);
	Соответствие.Вставить("ПревышенПорогОтклонения",ПревышенПорогОтклонения);
	Соответствие.Вставить("СписокЗначений",СписокЗначений);
	
	Возврат Соответствие;
	
КонецФункции	

// АБС ВСТАВКА Печать бланка согласования Фролов

         
//АБС ВСТАВКА 35963 09.12.2013 Навценя

Процедура ПроверитьЗаполнениеРеквизитовТЦОПоВидуДеятельности(Отказ)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ глЗначениеПеременной("абс_КонтролироватьЗаполнениеРеквизитовТЦО") Тогда 
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА Родин 210314	
	Если Не Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ГоловнаяОрганизация и Не Организация.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.Филиал Тогда
		Возврат;
	КонецЕсли;
	//АБС ВСТАВКА Родин 210314	
	
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(абс_ВидДеятельности) Тогда 
		Возврат;
	КонецЕсли;
	
	
	// {{ТТК Лапин А. Заявка № 000034018 21.09.2015 начало
	// эту проверку делать при записи только для РЖД . Для зависимых контрагентов НЕ делать. Согласовано с Ольгой Гавриловой
	// {{Старый код:
	//	ЭтоВзаимозависимыйКонтрагент = Справочники.ДоговорыКонтрагентов.ПолучитьСвойствоКонтрагента(Владелец);
    //
	//Если СокрЛП(Владелец.ИНН) <> "7708503727" И Не ЭтоВзаимозависимыйКонтрагент  Тогда 
	//	Возврат;
	//КонецЕсли;
	// Старый код}}
    // }}Новый код:
	Если СокрЛП(Владелец.ИНН) <> "7708503727" Тогда 
		Возврат;
	КонецЕсли;
	// }}ТТК Лапин А. Заявка № 000034018 23.09.2015 окончание
	
	Если Ссылка.абс_СтатусДоговора <> Перечисления.абсСтатусыДоговоров.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПроверяемыхРеквизитов = ПолучитьСтруктуруПроверяемыхРеквизитовТЦОПоВидуДеятельности();
	
	//АБС Родин ВСТАВКА 180314 
	//Для Каждого запись из СтруктураПроверяемыхРеквизитов Цикл 
	//	Если ЭтотОбъект[запись.Ключ] <> запись.Значение Тогда 
	//		ТекстОшибки = "Для вида деятельности """ + Строка(абс_ВидДеятельности) + """ и
	//					| методики для трансфертного ценообразования """ + Строка(абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования)
	//					+ """ реквизит """ + Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты[запись.Ключ].Синоним + """"
	//					+ ?(ЗначениеЗаполнено(запись.Значение), " должен быть заполнен: """ + Строка(запись.Значение) + """.", " не заполняется."); 
	//		ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
	//	КонецЕсли;
	//КонецЦикла;
	 
	Для каждого Запись Из СтруктураПроверяемыхРеквизитов Цикл
		Если Не ЗначениеЗаполнено(ЭтотОбъект[Запись.Ключ]) Тогда
			ТекстОшибки = "Необходимо заполнить: "+ Запись.Значение; 
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
	КонецЦикла;	
	//АБС ВСТАВКА Родин 180314

	
КонецПроцедуры

Функция ПолучитьСтруктуруПроверяемыхРеквизитовТЦОПоВидуДеятельности()
	//АБС Родин ВСТАВКА 180314 
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	
	// {{ТТК Сладков А. Заявка №7753497  19.10.2016 ++
	Если не абс_ТипДоговора	= Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда
	// }}ТТК Сладков А. Заявка №7753497  19.10.2016 --
	
		СтруктураПроверяемыхРеквизитов.Вставить("абс_КодСтраныПроисхожденияПредметаСделкиОКСМ","Код страны происхождения сделки");
			СтруктураПроверяемыхРеквизитов.Вставить("абс_КодОснованияОтнесенияСделкиККонтролируемой","Код основания отнесения сделки к контролируемой");
			СтруктураПроверяемыхРеквизитов.Вставить("абс_ОсобенностиОтнесенияСделкиККонтролируемой","Особенности отнесения сделки к контролируемой");
			СтруктураПроверяемыхРеквизитов.Вставить("абс_ТипПредметаСделки", "Тип предмета сделки");
			СтруктураПроверяемыхРеквизитов.Вставить("абс_НаименованиеПредметаСделки","Наименование предмета сделки");				
			//СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиТНВЭД","Код предмета сделки ТНВЭД");
			//СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКП","Код предмета сделки ОКП");
			СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКВЭД","Код предмета сделки ОКВЭД");
			СтруктураПроверяемыхРеквизитов.Вставить("абс_КодНаименованияСделки","Код наименования сделки");				
			СтруктураПроверяемыхРеквизитов.Вставить("абс_КодСтороныСделки","Код стороны сделки");                             
			СтруктураПроверяемыхРеквизитов.Вставить("абс_КоличествоУчастниковСделки","Количество участников сделки");
			
			//СтруктураПроверяемыхРеквизитов = Новый Структура;
			
			//СтруктураПроверяемыхРеквизитов.Вставить("абс_КодСтраныПроисхожденияПредметаСделкиОКСМ", Справочники.КлассификаторСтранМира.НайтиПоКоду("643",Истина));
			//СтруктураПроверяемыхРеквизитов.Вставить("абс_КодОснованияОтнесенияСделкиККонтролируемой", Справочники.абс_КодыОснованияОтнесенияСделкиККонтролируемой.НайтиПоКоду("121",Истина));
			//СтруктураПроверяемыхРеквизитов.Вставить("абс_ОсобенностиОтнесенияСделкиККонтролируемой", Справочники.абс_ОсобенностиОтнесенияСделкиККонтролируемой.НайтиПоКоду("131",Истина));
				
			//Если абс_ВидДеятельности.Наименование = "Связь" и абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.абс_ВидДеятельности = абс_ВидДеятельности Тогда
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_ТипПредметаСделки", Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга);
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_НаименованиеПредметаСделки",Справочники.абс_ПредметыСделок.НайтиПоНаименованию("Оказание услуг связи",Истина));				
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиТНВЭД", Справочники.абс_КодыПредметаСделкиПоТНВЭД.ПустаяСсылка());
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКП",Справочники.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка());
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКВЭД", Справочники.абс_ОКВЭД.НайтиПоКоду("64.20"));
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_ОтноситсяКГруппеОднородныхСделок", Истина);
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодНаименованияСделки", Справочники.абс_КодыНаименованияСделки.НайтиПоКоду("019"));				
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодСтороныСделки", Справочники.абс_КодыСтороныСделки.НайтиПоКоду("011"));                             
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КоличествоУчастниковСделки", 2);
			//ИначеЕсли абс_ВидДеятельности.Наименование = "Эксплуатация" и абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.абс_ВидДеятельности = абс_ВидДеятельности Тогда
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_ТипПредметаСделки", Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга);
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_НаименованиеПредметаСделки", Справочники.абс_ПредметыСделок.НайтиПоНаименованию("Оказание услуг по технической эксплуатации сетей связи"));
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиТНВЭД", Справочники.абс_КодыПредметаСделкиПоТНВЭД.ПустаяСсылка());
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКП", Справочники.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка());
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКВЭД", Справочники.абс_ОКВЭД.НайтиПоКоду("64.20.3"));            
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_ОтноситсяКГруппеОднородныхСделок", Истина);
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодНаименованияСделки", Справочники.абс_КодыНаименованияСделки.НайтиПоКоду("019"));			
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодСтороныСделки", Справочники.абс_КодыСтороныСделки.НайтиПоКоду("011"));                          
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КоличествоУчастниковСделки", 2);
			//ИначеЕсли абс_ВидДеятельности.Наименование = "Строительство" и абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.абс_ВидДеятельности = абс_ВидДеятельности Тогда	   
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_ТипПредметаСделки", Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга);
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_НаименованиеПредметаСделки", Справочники.абс_ПредметыСделок.НайтиПоНаименованию("Строительство / ремонт объектов связи"));
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиТНВЭД", Справочники.абс_КодыПредметаСделкиПоТНВЭД.ПустаяСсылка());
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКП", Справочники.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка());
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодПредметаСделкиОКВЭД", Справочники.абс_ОКВЭД.НайтиПоКоду("45.1"));            
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_ОтноситсяКГруппеОднородныхСделок", Истина);
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодНаименованияСделки", Справочники.абс_КодыНаименованияСделки.НайтиПоКоду("021"));
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КодСтороныСделки", Справочники.абс_КодыСтороныСделки.НайтиПоКоду("035"));                       
			//	СтруктураПроверяемыхРеквизитов.Вставить("абс_КоличествоУчастниковСделки", 2);
			//КонецЕсли;
			//АБС Родин ВСТАВКА 180314 
			
	// {{ТТК Сладков А. Заявка №7753497  19.10.2016 ++
	КонецЕсли;
	// }}ТТК Сладков А. Заявка №7753497  19.10.2016 --
	
			
	Возврат СтруктураПроверяемыхРеквизитов;
	
КонецФункции

//АБС ВСТАВКА 35963 Навценя КОНЕЦ

//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
Процедура абс_НачатьЗамерПроизводительности(ЭлементЗаписан = Ложь) Экспорт   	
	
	Если ЭтоГруппа 
		или ОбменДанными.Загрузка 
		или ?(ЭлементЗаписан, 
				абс_СтатусДоговора = абс_СтатусДоговораСтарый, 
				абс_СтатусДоговора = Ссылка.абс_СтатусДоговора) Тогда  		
		Возврат;  		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.абс_НачатьЗамерВремени(абс_ОпределитьКлючевуюОперацию(),абс_ОпределитьДополнительныеПараметры(ЭлементЗаписан));
	
КонецПроцедуры	

Процедура абс_ЗавершитьЗамерПроизводительности(КодОшибки = 0) Экспорт
	
	Если ЭтоГруппа 
		или ОбменДанными.Загрузка Тогда  		
		Возврат;
	КонецЕсли;	
	
	СоответствиеОшибок = новый Соответствие;
	СоответствиеОшибок.Вставить(0,"Не пройден контроль записи договора контрагента.");
	СоответствиеОшибок.Вставить(1,"Ошибка при записи договора контрагента.");
	СоответствиеОшибок.Вставить(2,"Запись договора контрагента прошла успешно.");	
	
	ОценкаПроизводительностиКлиентСервер.абс_ЗакончитьЗамерВремени(абс_ОпределитьКлючевуюОперацию(),СоответствиеОшибок.Получить(КодОшибки));
	
КонецПроцедуры

Функция абс_ОпределитьКлючевуюОперацию()
		
	Возврат Перечисления.КлючевыеОперации.ИзменениеСтатусаДоговораКонтрагента;
	
КонецФункции

Функция абс_ОпределитьДополнительныеПараметры(ЭлементЗаписан)
	
	врСтарыйСтатус = ?(ЭлементЗаписан,абс_СтатусДоговораСтарый,Ссылка.абс_СтатусДоговора);
	Возврат "Старый статус «"+СокрЛП(врСтарыйСтатус)+"», новый статус «"+СокрЛП(абс_СтатусДоговора)+"»";
	
КонецФункции	
//\\АБС ВСТАВКА №38173 КОНЕЦ

// {{KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 начало
// 
Процедура ДополнитьСписокСтатусовДляОтветстенногоЛица(СписокСтатусов) Экспорт
	Если абс_БизнесПроцессы.ДоговорДоступенДляИзмененияРуководителем(ЭтотОбъект.Ссылка, глЗначениеПеременной("глТекущийПользователь")) Тогда
		НовСтатус = абс_БизнесПроцессы.ПолучитьПредыдущийСтатусДоговора(ЭтотОбъект.Ссылка);
		Если Списокстатусов.НайтиПоЗначению(НовСтатус) = Неопределено Тогда
			СписокСтатусов.Добавить(НовСтатус);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

// }}KM WARE Лазаревский К.В. Заявка №31760 05.11.2015 окончание

//Сторчевой А.Н. 77129492 19.062017 {
Функция НайтиДоходныйДоговор()Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И НЕ ДоговорыКонтрагентов.ЭтоГруппа
	               |	И ДоговорыКонтрагентов.Номер = &Номер
	               |	И ДоговорыКонтрагентов.абс_СтатусДоговора = &абс_СтатусДоговора
	               |	И ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";

	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("абс_СтатусДоговора", Перечисления.абсСтатусыДоговоров.Исполнение);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция СоздатьКопиюДоговора()Экспорт 

	Попытка
		КопияДоговора = Ссылка.Скопировать();
		КопияДоговора.УстановитьНовыйКод();
		КопияДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		КопияДоговора.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение;
		КопияДоговора.ОбменДанными.Загрузка = Истина;
		КопияДоговора.Комментарий = "создан автоматически на основании договора " + ЭтотОбъект.Код + " так как этот договор доходно-расходный";
		КопияДоговора.Записать();
		
		Если НЕ Владелец.Покупатель Тогда
			ВладелецОбъект = Владелец.ПолучитьОбъект();
			ВладелецОбъект.Покупатель = Истина;	
			ВладелецОбъект.ОбменДанными.Загрузка = Истина;
			ВладелецОбъект.Записать();
		КонецЕсли;
		
		// скопируем статусы утверждения
		НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Договор.Установить(Ссылка);
		
		НаборЗаписей.Прочитать(); 
		
		ТЗКопияНабораЗаписей = НаборЗаписей.Выгрузить();

		ТЗКопияНабораЗаписей.ЗаполнитьЗначения(КопияДоговора.Ссылка, "Договор");
		ТЗКопияНабораЗаписей.ЗаполнитьЗначения("создан автоматически на основании договора " + ЭтотОбъект.Код + " так как этот договор доходно-расходный", "Комментарий");
		
		НовыйНаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей(); 
		НовыйНаборЗаписей.Отбор.Договор.Установить(КопияДоговора.Ссылка);
		НовыйНаборЗаписей.Загрузить(ТЗКопияНабораЗаписей);

		НовыйНаборЗаписей.Записать(); 				
		
	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Отказ  = Истина;
	КонецПопытки;
	
	Возврат КопияДоговора.Ссылка;
	
КонецФункции	
	// } Сторчевой А.Н. 77129492 19.062017

Если абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование
	или абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
	мСотрудникДопСогласование = абс_СотрудникДопСогласование;
КонецЕсли;

