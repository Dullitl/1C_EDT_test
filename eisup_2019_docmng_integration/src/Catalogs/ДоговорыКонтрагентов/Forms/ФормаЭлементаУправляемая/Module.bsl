
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		
		Если    Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений
			ИЛИ Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Архив
			ИЛИ Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Закрыт
			ИЛИ Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке("В статусах 'Подготовка', 'Завершение отношений', 'Закрыт', 'Архив' контрагенту нельзя вводить договоры.", Отказ);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.абс_Ответственный = глЗначениеПеременной("глТекущийПользователь");
		
		Объект.абс_ДатаНачалаДействия 		= Неопределено;
		Объект.Номер 						= Неопределено;
		Объект.Дата 						= Неопределено;
		Объект.СрокДействия 				= Неопределено;
		Объект.абс_ДатаРегистрацииДоговора 	= Неопределено;
		
		Объект.абс_ЕстьОригиналДоговора		= Неопределено;
		
	КонецЕсли;
	
	//Заполнение переменных формы
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СписокВыбораВидаДоговора = ПолучитьСписокВыбораВидаДоговора(Объект.Владелец);
	
	ВидДоговораПрочее 			= Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	ВидДоговораСКомиссионером 	= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ВидДоговораСКомитентом 		= Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ВидДоговораСПокупателем 	= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ВидДоговораСПоставщиком 	= Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	
	ВедениеВзаиморасчетовПоДоговоруВЦелом = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	
	// АБС ВСТАВКА СогласованиеДоговоров 	
	УстановитьДоступностьСтатуса();	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка;
	КонецЕсли;	

	УстановитьРежимПросмотраЭлемента();
	
	мНомер 							= Объект.Номер;
	мДата 							= Объект.Дата;
	мабс_ДатаНачалаДействия 		= Объект.абс_ДатаНачалаДействия;
	мабс_ДатаРегистрацииДоговора	= Объект.абс_ДатаРегистрацииДоговора;
	мСрокДействия					= Объект.СрокДействия;
	
	мабс_ЕстьОригиналДоговора		= Объект.абс_ЕстьОригиналДоговора;
	
	мНаименование					= Объект.Наименование;
	
	мСтатус							= Объект.абс_СтатусДоговора;
	
	
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
	
	Если (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено) Тогда
		
		Элементы.абс_ТиповойДоговор.Видимость = Ложь;
		
	КонецЕсли;	
	
	// Установим надпись ЗЗ
	
	Если Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
		
		МожноСогласовывать = абс_БизнесПроцессыПривелегированный.МожноСогласовыватьДоговор(Объект.Ссылка, Объект.абс_ТипДоговора, Объект.абс_ТиповойДоговор, Объект.абс_БезЗакупочногоЗаказа, Объект.ВидДоговора, Ложь, Ложь, Объект.абс_АвтоматическиСоздаватьДоговораСФилиалами);
		
		Если МожноСогласовывать Тогда
			
			Элементы.ДекорацияЗЗ.Заголовок = "Можно согласовывать";
		Иначе
			Элементы.ДекорацияЗЗ.Заголовок = "Нельзя согласовывать";
		КонецЕсли;
		
	КонецЕсли;
	             			
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()

	Элементы.ВедениеВзаиморасчетов.Доступность = (Объект.ВидДоговора <> ВидДоговораПрочее
														И ЗначениеЗаполнено(Объект.ВидДоговора));

	// Установка видимости реквизита реализации на экспорт
	Если Объект.ВидДоговора <> ВидДоговораСПокупателем Тогда
		Элементы.РеализацияНаЭкспорт.Доступность = Ложь;
	Иначе
		Элементы.РеализацияНаЭкспорт.Доступность = Истина;
	КонецЕсли;
	
	//Видимость и доступность флага "Расчеты в условных единицах"
	Элементы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
	Если Объект.ВидДоговора = ВидДоговораСПоставщиком или 
		Объект.ВидДоговора = ВидДоговораСПокупателем Тогда
		Если Объект.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И НЕ Объект.УчетАгентскогоНДС тогда
			Элементы.РасчетыВУсловныхЕдиницах.Доступность = Истина;
		Конецесли;
	КонецЕсли;

	Элементы.ВестиПоДокументамРасчетовСКонтрагентом.Доступность = Объект.ВидДоговора <> ВидДоговораПрочее;
	
	// АБС ВСТАВКА СогласованиеДоговоров
	УстановитьДоступностьСтатуса();
	
	ВидимостьСОК = Ложь;
	Если Объект.абс_ТипДоговора = ПредопределенноеЗначение("Перечисление.абсТипыДоговоров.СоглашениеОКонфиденциальности") Тогда
		 ВидимостьСОК = Истина;
	КонецЕсли;	 
	
	Элементы.абс_ТипСоглашенияОКонфиденциальности.Видимость = ВидимостьСОК;

	// АБС ВСТАВКА СогласованиеДоговоров КОНЕЦ
	
	
	//АБС ВСТАВКА №000022800 НАЧАЛО
	абс_ОсновнойДоговорПроверитьДоступность()
	//\\АБС ВСТАВКА №000022800 КОНЕЦ												
	          	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура абс_ОсновнойДоговорПроверитьДоступность()
	
	//АБС ВСТАВКА №35514 НАЧАЛО												
	Элементы.абс_ДобавитьОсновнойДоговорКДоговору.Доступность = Объект.абс_ТипДоговора = Перечисления.абсТипыДоговоров.Договор
																		и (Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка или не ЗначениеЗаполнено(Объект.Ссылка));	
	Если не Объект.абс_ТипДоговора = Перечисления.абсТипыДоговоров.Договор Тогда																	
		Объект.абс_ДобавитьОсновнойДоговорКДоговору = Ложь;	
	КонецЕсли;	
	//АБС ВСТАВКА №35514 КОНЕЦ	
	
	//АБС ВСТАВКА №000022800 НАЧАЛО
	абс_ОсновнойДоговорДоступность = Объект.абс_ТипДоговора = Перечисления.абсТипыДоговоров.Приложение
													или Объект.абс_ТипДоговора = Перечисления.абсТипыДоговоров.ДополнительноеСоглашение
													или Объект.абс_ДобавитьОсновнойДоговорКДоговору;
	Если не абс_ОсновнойДоговорДоступность Тогда
		Объект.абс_ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();	
	КонецЕсли;	
	
	Элементы.абс_ОсновнойДоговор.Доступность = абс_ОсновнойДоговорДоступность;
	//\\АБС ВСТАВКА №000022800 КОНЕЦ
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораВидаДоговора(Контрагент)
	СписокВыбораВидаДоговора = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		СписокВыбораВидаДоговора = УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее();
	Иначе
		Если Контрагент.Покупатель И Контрагент.Поставщик Тогда
			СписокВыбораВидаДоговора = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ВидыДоговоровКонтрагентов");
		ИначеЕсли Контрагент.Покупатель Тогда
			СписокВыбораВидаДоговора = УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя();
		ИначеЕсли Контрагент.Поставщик Тогда
			СписокВыбораВидаДоговора = УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика();
		Иначе
			СписокВыбораВидаДоговора = УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее();
		КонецЕсли; 
	КонецЕсли;
	Возврат СписокВыбораВидаДоговора;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидаДоговора()
	
	Элементы.ВидДоговора.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка ИЗ СписокВыбораВидаДоговора Цикл
		НовыйЭлементСписка = Элементы.ВидДоговора.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Элементы.мВидДоговора.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка ИЗ СписокВыбораВидаДоговора Цикл
		НовыйЭлементСписка = Элементы.мВидДоговора.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	СписокВыбораВидаДоговора = ПолучитьСписокВыбораВидаДоговора(Объект.Владелец);
	ЗаполнитьСписокВыбораВидаДоговора();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипЦенДоговора()
	Если Объект.ВидДоговора = ВидДоговораСПокупателем ИЛИ 
		Объект.ВидДоговора = ВидДоговораСКомиссионером Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатуры");
	ИначеЕсли Объект.ВидДоговора = ВидДоговораСПоставщиком ИЛИ 
		Объект.ВидДоговора = ВидДоговораСКомитентом Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов");
	Иначе
		Возврат;
	КонецЕсли; 
	Объект.ТипЦен = ОписаниеТипов.ПривестиЗначение(Объект.ТипЦен);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//АБС ВСТАВКА №8693 НАЧАЛО
	ОчисткаРеквизитовВНовомОбъекте();
	//\\АБС ВСТАВКА №8693 КОНЕЦ
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьТипЦенДоговора();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораВидаДоговора();
	
	УстановитьДоступность();
	
КонецПроцедуры

//АБС ВСТАВКА №8693 НАЧАЛО
&НаСервере
Процедура ОчисткаРеквизитовВНовомОбъекте() 
	
	//Если не новый тогда возврат 
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда Возврат; КонецЕсли;
	
	Объект.абс_ОтветственныйПД = Справочники.Пользователи.ПустаяСсылка();   	  
		
КонецПроцедуры	
//\\

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора) ИЛИ Объект.ВидДоговора = ВидДоговораПрочее Тогда
		Объект.ВедениеВзаиморасчетов                    = ВедениеВзаиморасчетовПоДоговоруВЦелом;
		Объект.ТипЦен                                   = Неопределено;
		Объект.ВестиПоДокументамРасчетовСКонтрагентом   = Ложь;
	КонецЕсли;

	//Зачистка флага "Расчеты в условных единицах" для всех видов договоров кроме договоров в поставщиком и с покупателем
	Если НЕ (Объект.ВидДоговора = ВидДоговораСПоставщиком ИЛИ 
				Объект.ВидДоговора = ВидДоговораСПокупателем) Тогда
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;

	//Зачистка флага "Реализация на экспорт" для всех видов договоров кроме договора с покупателем
	Если Объект.ВидДоговора <> ВидДоговораСПокупателем Тогда
		Объект.РеализацияНаЭкспорт = Ложь;
	КонецЕсли;
	
	УстановитьТипЦенДоговора();
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенОчистка(Элемент, СтандартнаяОбработка)
	УстановитьТипЦенДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	Если Объект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета  Тогда
	//Зачистка флага "Расчеты в условных единицах" и "Реализация на экспорт" для валюты, совпадающей с валютой рег. учета
		Если Объект.РасчетыВУсловныхЕдиницах тогда
			Объект.РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


// АБС ВСТАВКА СогласованиеДоговоров
&НаСервере
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовДоговоров.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Договор.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ТекущаяДата();

	Запись.Договор	= Объект.Ссылка;
	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусДоговора		= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусДоговораВРегистре(ПараметрыЗаписи)
	
	СтатусПоРегистру = ПолучитьСтатусДоговораПоРегистру();
	
	Если НЕ Объект.абс_СтатусДоговора = СтатусПоРегистру Тогда
		ЗаписатьНовыйСтатус(Объект.абс_СтатусДоговора, ПараметрыЗаписи.ПричинаИзмененияСтатуса);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхРолейПользователя()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РолиИИсполнители.Роль
	                      |ИЗ
	                      |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                      |ГДЕ
	                      |	РолиИИсполнители.Исполнитель = &ТекПользователь
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РолиИИсполнители.Роль");
	Запрос.УстановитьПараметр("ТекПользователь", глЗначениеПеременной("глТекущийПользователь"));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
КонецФункции

&НаСервере
Функция ПолучитьСтатусДоговораПоРегистру() 
	
	ЗапросСтатус = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                            |	абс_ИзменениеСтатусовДоговоровСрезПоследних.СтатусДоговора,
	                            |	абс_ИзменениеСтатусовДоговоровСрезПоследних.Период КАК Период
	                            |ИЗ
	                            |	РегистрСведений.абс_ИзменениеСтатусовДоговоров.СрезПоследних(&Период, Договор = &ДоговорСсылка) КАК абс_ИзменениеСтатусовДоговоровСрезПоследних
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	Период УБЫВ");
	ЗапросСтатус.УстановитьПараметр("Период"		, Новый Граница(ТекущаяДата(), ВидГраницы.Включая));
	ЗапросСтатус.УстановитьПараметр("ДоговорСсылка"	, Объект.Ссылка);
	
	ВыборкаСтатус = ЗапросСтатус.Выполнить().Выбрать();
	
	ТекСтатус = Неопределено;
	Если ВыборкаСтатус.Следующий() Тогда
		ТекСтатус = ВыборкаСтатус.СтатусДоговора;
	КонецЕсли;
	
	Возврат ТекСтатус;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусов()
		
	СписокСтатусов = Элементы.Статус.СписокВыбора;
	
	СписокСтатусов.Очистить();

	ТекСтатус = абс_БизнесПроцессы.ПолучитьСтатусДоговораПоРегистру(Объект.Ссылка);
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
		
	// Если еще нету никакого статуса
	Если ТекСтатус = Неопределено Тогда
		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);		
		Возврат;
	КонецЕсли;

	СписокСтатусов.Добавить(ТекСтатус);
		
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
			Если НЕ Объект.абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда
				Если НЕ НайтиБПСогласование() = Неопределено Тогда
					// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов
					//Если НЕ Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
					Если НЕ Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный И 
						 НЕ Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда
					// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов КОНЕЦ
						СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаКонтрагента);				
					Иначе
						СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаДФМ);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если Объект.абс_ТипСоглашенияОКонфиденциальности = Перечисления.абс_ТипыСоглашенийОКонфиденциальности.Типовое ИЛИ 
				 	НЕ ЗначениеЗаполнено(Объект.абс_ТипСоглашенияОКонфиденциальности) Тогда
				 
					// 20110411 Типовые соглашения о конфиденциальности переходят из статуса "Подготовка" в статус "Подписание и регистрация"
					//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
					
				Иначе 
					
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДЭБ);
					
				КонецЕсли;

				
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаКонтрагента Тогда
		
		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
		СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отмена);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроверкаДФМ) = Неопределено Тогда
			Если Объект.абс_ЕстьОригиналДоговора Тогда
				//АБС ВСТАВКА №15153 НАЧАЛО
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
				//\\АБС ВСТАВКА №15153 КОНЕЦ
			Иначе				
				ОбязательноСогласованиеБУ = Истина; 			
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП);
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
				
				Если Объект.абс_ТиповойДоговор И Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда  				
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение); 				
				ИначеЕсли Объект.абс_ТиповойДоговор И Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда 				
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация); 				
				Иначе  					
					БПСогласование = НайтиБПСогласование();				
					Если НЕ БПСогласование = Неопределено Тогда
						Если ОбязательноСогласованиеБУ И НЕ БПСогласование.СогласованБухгалтером Тогда
							СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией);
						Иначе
							Если НЕ БПСогласование.СогласованБухгалтером Тогда
								СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией);
							КонецЕсли;     					
							ПределУтвержденияДВКУР = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
							Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
							Справочники.РолиИсполнителей.СогласованиеДВКУР); 	
							
							Если ЗапросДанныхСправочноИтогоБезНДС_Сервер().Получить("СправочноИтогоБезНДС")> ПределУтвержденияДВКУР Тогда
								СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
							Иначе
								СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
							КонецЕсли;
						КонецЕсли; 								
					КонецЕсли;   				
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);  					
					// АБС ИЗМЕНЕНО 59935
					// Если договор с покупателем, то должен быть вариант, либо отправлять на ПД, либо на исполнение	
					Если абс_БизнесПроцессы.ДоговорИзБиллинга(Объект.Ссылка) Тогда
						СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);	
					КонецЕсли;
					// АБС ИЗМЕНЕНО 59935 КОНЕЦ 				
				КонецЕсли;
			КонецЕсли;	
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией Тогда
		                                                            		
		Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
						
			//АБС ВСТАВКА №000020802 НАЧАЛО 
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
			//\\АБС ВСТАВКА №000020802 КОНЕЦ 			
			//АБС ВСТАВКА №6106 НАЧАЛО
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией);
			//\\АБС ВСТАВКА №6106 КОНЕЦ 			
			// Теперь бухгалтер может сделать отказ
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
			
		КонецЕсли;		
		
	//АБС ВСТАВКА №6106 НАЧАЛО
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
		
		Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
		КонецЕсли;
	//\\АБС ВСТАВКА №6106 КОНЕЦ		
		
	// АБС ИЗМЕНЕНО 20101209 СогласованиеДоговоров
	// Добавилось подразделение ДВКУР, соответственно исполнители для него и статус.
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДВКУР) = Неопределено Тогда
			
			//АБС ВСТАВКА №000020802 НАЧАЛО
			ПределУтвержденияПВП = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
				Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
				Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
				
			Если ПределУтвержденияПВП < ЗапросДанныхСправочноИтогоБезНДС_Сервер().Получить("СправочноИтогоБезНДС") Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПВП);
			Иначе
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
			КонецЕсли;
			//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
			//\\АБС ВСТАВКА №000020802 КОНЕЦ			
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительПД) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);    
		КонецЕсли;	
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеПД_ОдобрениеСДилиОСА) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);    
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПД Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеПД) = Неопределено Тогда
			
			//АБС ВСТАВКА №000020914 НАЧАЛО
			ПределУтвержденияРуководителемПД = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
														 Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
														 Справочники.РолиИсполнителей.РуководительПД);			
			//АБС ВСТАВКА №000020802 НАЧАЛО
			ПределУтвержденияДВКУР = абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
														 Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров,
														 Справочники.РолиИсполнителей.СогласованиеДВКУР);
			//АБС ИЗМЕНЕНО №000021266 НАЧАЛО											 
			врСуммаПоДоговору = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Объект.абс_СуммаБезНДС, Константы.ВалютаРегламентированногоУчета.Получить(), Объект.ВалютаВзаиморасчетов, абс_СерверныеФункции.ПолучитьДатуСервера());												 
														 
			Если ЗапросДанныхСправочноИтогоБезНДС_Сервер().Получить("СправочноИтогоБезНДС") >= ПределУтвержденияДВКУР и врСуммаПоДоговору < ПределУтвержденияРуководителемПД Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
			ИначеЕсли врСуммаПоДоговору >= ПределУтвержденияРуководителемПД Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД);
            Иначе
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
			КонецЕсли;
			//\\АБС ВСТАВКА №000020802,000021266,000020914 КОНЕЦ 
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование);
			//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ПроверкаДФМ);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
			
			// Найдем задачу по договору, посмотрим на ее ответственного
			// если у пользователя есть роль руководителя ПД или он является ответсвенным по данной задачи
			// то он может сменить исполнителя
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	абсЗадачаДоговора.Ссылка
			|ИЗ
			|	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
			|ГДЕ
			|	абсЗадачаДоговора.ОбъектЗадачи = &ТекДоговор
			|	И абсЗадачаДоговора.Исполнитель = &ТекИсполнитель
			|	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
			|	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута");
			
			Запрос.УстановитьПараметр("ТекДоговор"		, Объект.Ссылка);
			Запрос.УстановитьПараметр("ТекИсполнитель"	, мТекущийПользователь);
			Запрос.УстановитьПараметр("ТочкаМаршрута"   , БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() ИЛИ НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительПД) = Неопределено Тогда
				
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПДСменаОтветственного);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование Тогда
		
		БПСогласование = НайтиБПСогласование();
				
		Если ЗначениеЗаполнено(мТекущийПользователь) И ЗначениеЗаполнено(БПСогласование) Тогда
			Если БПСогласование.СотрудникДопСогласование = мТекущийПользователь.абс_Сотрудник ИЛИ 
				Объект.абс_СотрудникДопСогласование = мТекущийПользователь.абс_Сотрудник Тогда
				
				Если ЗначениеЗаполнено(БПСогласование.СтатусДопСогласования) Тогда
					СписокСтатусов.Добавить(БПСогласование.СтатусДопСогласования);			
				Иначе
					Если Объект.абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеПД
						и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеПД) = Неопределено Тогда 
						СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
					КонецЕсли;				
				КонецЕсли;
				Если Объект.абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР
					и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР) = Неопределено Тогда 
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР);
				КонецЕсли;				
				Если Объект.абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД
					и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД) = Неопределено Тогда 
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеРуководителемПД);
				КонецЕсли;
				Если Объект.абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА
					и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА) = Неопределено Тогда 
					СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//++ Задача № 10549 Логинчев А.С. 21.05.2012 16:45:05
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РуководительПД) = Неопределено
			и СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.СогласованиеПД) = Неопределено 
			и Объект.абс_СтатусДоговораСтарый = Перечисления.абсСтатусыДоговоров.СогласованиеПД Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
		КонецЕсли;
		//-- Задача № 10549 Логинчев А.С.		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПВП Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПервыйВицеПрезидент) = Неопределено Тогда
			Если Объект.абс_ТребуетОдобрениеСДилиОСА Тогда
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.ОдобрениеСДилиОСА);
			Иначе	
				СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
			КонецЕсли;
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПервоеЛицо Тогда
		
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеПЛ) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Регистрация);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
		КонецЕсли;			
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Регистрация Тогда
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено) Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);	
		КонецЕсли;
		
		// АБС ВСТАВКА Фролов 2996
		Если  (Объект.абс_Ответственный = мТекущийПользователь) 
			  ИЛИ  (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено) Тогда
            Если СписокСтатусов.НайтиПоЗначению(Перечисления.абсСтатусыДоговоров.Отказ) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
			КонецЕсли;
		КонецЕсли;	
		// АБС ВСТАВКА Фролов 2996 КОНЕЦ
						
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		
		Если 	(НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено) 
			ИЛИ (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПроверкаДФМ) = Неопределено) 
			ИЛИ (Объект.абс_Ответственный = глЗначениеПеременной("глТекущийПользователь"))Тогда
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Закрытие);
		КонецЕсли;
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Закрытие Тогда
		
		Если Не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеБухгалтером) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Закрыт);			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Исполнение);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДИБ Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДИБ) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеПД);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДЭБ Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДЭБ) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.СогласованиеДИБ);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
		КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДирКСП Тогда
		
		Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеДирКСП) = Неопределено) ИЛИ 
			 (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено) Тогда
			
			СписокСтатусов.Добавить(Объект.абс_СтатусДоговораДляДирКСП);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Уточнение);
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Отказ);
			
		КонецЕсли;		
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Отказ Тогда
		
		//СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);
		//АБС 110111
		МассивПользователей =Новый Массив;
		МассивСотрудников = Новый Массив;

		Если  Объект.абс_Кураторы.Количество()>0 Тогда
			Для Каждого СтрокаКуратора Из Объект.абс_Кураторы Цикл
			МассивСотрудников.Добавить(СтрокаКуратора.Куратор); 
			КонецЦикла;
			МассивПользователей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(МассивСотрудников);
			
		КонецЕсли;
		
		Если  (Объект.абс_Ответственный = глЗначениеПеременной("глТекущийПользователь")) 
			ИЛИ  (МассивПользователей.Найти(глЗначениеПеременной("глТекущийПользователь"))<>Неопределено)
			ИЛИ   (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Уточнение Тогда
		
		МассивПользователей =Новый Массив;
		МассивСотрудников = Новый Массив;

		Если  Объект.абс_Кураторы.Количество()>0 Тогда
			Для Каждого СтрокаКуратора Из Объект.абс_Кураторы Цикл
			МассивСотрудников.Добавить(СтрокаКуратора.Куратор); 
			КонецЦикла;
			МассивПользователей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(МассивСотрудников);			
		КонецЕсли;
		
		Если  (Объект.абс_Ответственный = глЗначениеПеременной("глТекущийПользователь")) 
			ИЛИ  (МассивПользователей.Найти(глЗначениеПеременной("глТекущийПользователь"))<>Неопределено)
			ИЛИ   (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) <> Неопределено) Тогда
			
			СписокСтатусов.Добавить(Перечисления.абсСтатусыДоговоров.Подготовка);
			Если НЕ Объект.абс_СтатусДоговораСтарый.Пустая() Тогда
			СписокСтатусов.Добавить(Объект.абс_СтатусДоговораСтарый);	
			КонецЕсли;
			
		КонецЕсли;		
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСтатуса()
	
	Элементы.Статус.Доступность = 
		// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов
		// Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный
		(Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный ИЛИ Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов)
		// АБС ИЗМЕНЕНО АБС-Ф 20111117 Заявка на изменение реквизитов контрагентов КОНЕЦ
		И ЗначениеЗаполнено(Объект.Ссылка);
		
	// Обновим список досупных состояний
	ЗаполнитьСписокВыбораСтатусов();
	Если ЗначениеЗаполнено(Объект.абс_СтатусДоговора) Тогда
		Элементы.мВидДоговора.Доступность = (Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка)
	Иначе
		Элементы.мВидДоговора.Доступность =Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьВопросЗапуститьБП()
	
	ТекСтатус = Объект.абс_СтатусДоговора;
	
	//Если Не Объект.Владелец.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Подготовка И НайтиБПСогласование() = Неопределено Тогда
		Возврат Новый Структура("ИмяПараметра, ТекстВопроса", "ЗапуститьБПСогласования"		
			, "Запустить бизнес-процесс согласования договора?");
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Закрытие И НайтиБПЗакрытие() = Неопределено Тогда
		Возврат Новый Структура("ИмяПараметра, ТекстВопроса", "ЗапуститьБПЗавершения"	
			, "Запустить бизнес-процесс закрытия договора?");
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	// Спрашиваем причину изменения статуса при смене статуса договора
	СпрашиватьПричину = НЕ Объект.абс_СтатусДоговора = Объект.Ссылка.абс_СтатусДоговора;
	
	// Спрашиваем причину изменения статуса при смене ответственного ПД
	Если НЕ СпрашиватьПричину Тогда
		
		СпрашиватьПричину = (Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД) И (Объект.Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД) 
			И ЗначениеЗаполнено(Объект.абс_ОтветственныйПД) И (НЕ Объект.абс_ОтветственныйПД = Объект.Ссылка.абс_ОтветственныйПД);
			
	КонецЕсли;
		
	Возврат СпрашиватьПричину;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Объект.абс_ВидДоговора) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит Предмет договора (ГК) не заполнено.", Отказ);
	КонецЕсли;
	
	// Регистрируем договор
	СтатусСсылки = ПолучитьСтатусДоговораПоСсылке();
	
	Если НЕ Объект.абс_ДоговорБезСуммы 
		И СтатусСсылки = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Подготовка") 
		И (НЕ СтатусСсылки = Объект.абс_СтатусДоговора) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.абс_СуммаБезНДС) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Сумма без НДС"" не заполнен.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.абс_СтавкаНДС) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Ставка НДС"" не заполнен.", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//АБС Вид деятельности
	Если НЕ ЗначениеЗаполнено(Объект.абс_ВидДеятельности) 
		И СтатусСсылки = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Подготовка") 
		 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Вид деятельности"" не заполнен.", Отказ);
	КонецЕсли;
	

	//\\
	
	Если   НЕ Объект.абс_СтатусДоговора = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Подготовка") 
		 И НЕ Объект.абс_СтатусДоговора = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Отказ") Тогда
		 
		Если НЕ ЗначениеЗаполнено(Объект.абс_ВидДоговора) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Вип договора"" не заполнен.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.абс_ТипДоговора) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Тип договора"" не заполнен.", Отказ);
		КонецЕсли;
		
		Если Объект.абс_ТипДоговора = ПредопределенноеЗначение("Перечисление.абсТипыДоговоров.СоглашениеОКонфиденциальности") Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.абс_ТипСоглашенияОКонфиденциальности) Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Тип соглашения о конфиденциальности"" не заполнен.", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		 
	КонецЕсли;

	
	Если СтатусСсылки = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Регистрация") 
		//ИЛИ (СтатусСсылки = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Подготовка") И Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"))) 
		И
		(НЕ СтатусСсылки = Объект.абс_СтатусДоговора) И 
		(НЕ Объект.абс_СтатусДоговора = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Отказ")) Тогда
				
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Дата договора"" не заполнен.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Номер договора"" не заполнен.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.абс_ДатаРегистрацииДоговора) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Дата регистрации догосора"" не заполнен.", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.абс_ДатаНачалаДействия) Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Дата начала действия"" не заполнен", Отказ);
		КонецЕсли;
							
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//АБС Коломиец 15204+
	Если Объект.абс_ТипДоговора = ПредопределенноеЗначение("Перечисление.абсТипыДоговоров.СоглашениеОКонфиденциальности") Тогда
		Если (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") И Объект.Ссылка.абс_СтатусДоговора = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Подготовка") 
			И Объект.абс_СтатусДоговора <> ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Подготовка"))
			ИЛИ (Объект.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") 
			И Объект.абс_СтатусДоговора = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.Исполнение")) Тогда
			Если Не Найти(НРег(Объект.Наименование), "соглашение о конфиденциальности") > 0 Тогда				
				Ответ = Вопрос("Добавить словосочетание ""Соглашение о конфиденциальности""?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Объект.Наименование = "Соглашение о конфиденциальности " + Строка(Объект.Наименование);   
					мНаименование = Объект.Наименование;
				КонецЕсли;						
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//АБС-
	
	// АБС ВСТАВКА СогласованиеДоговоров Фролов 
	
	Если Объект.абс_СтатусДоговора = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.ДополнительноеСогласование")
		или Объект.абс_СтатусДоговора = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией") Тогда
		Объект.абс_СотрудникДопСогласование = мСотрудникДопСогласование;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(Объект.Ссылка));
		
	Объект.абс_ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		ВвестиСтроку(Объект.абс_ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина);
		
		// АБС ВСТАВКА Вводим номера телефонов 
		абс_БизнесПроцессыКлиент.ВвестиВнутреннийНомерТелефона(ПолучитьДанныеПользователя());			
		
	КонецЕсли;
	
	// АБС ВСТАВКА СогласованиеДоговоров Фролов КОНЕЦ
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПользователя() 
	
	СтруктураПользователя = Новый Структура("Пользователь, ВнутреннийНомер");
	
	СтруктураПользователя.Пользователь 		= глЗначениеПеременной("глТекущийПользователь");
	СтруктураПользователя.ВнутреннийНомер 	= СтруктураПользователя.Пользователь.абс_ВнутреннийНомер;
	
	Возврат СтруктураПользователя;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Обновим статус контрагента в регистре статусов
	// Установим доступность статуса
	// Установим режим просмотра элемента
    ПослеЗаписиДоговораНаСервере(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиДоговораНаСервере(ПараметрыЗаписи)
		
	// Установим доступность статуса
	УстановитьДоступностьСтатуса();
	
	// Установим режим просмотра элемента
	УстановитьРежимПросмотраЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьБППоДоговору(ПараметрыЗаписи)
	
	ТекСтатус = Объект.абс_СтатусДоговора;
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Подготовка И ПараметрыЗаписи.ЗапуститьБПСогласования Тогда
		абс_БизнесПроцессы.ЗапуститьБПСогласованияДоговора(Объект.Ссылка);
		
	ИначеЕсли ПараметрыЗаписи.ЗапуститьБПСогласования Тогда
		Сообщить("Невозможно запустить бизнес-процесс согласования договора. Договор должен иметь статус 'Подготовка'.", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Закрытие И ПараметрыЗаписи.ЗапуститьБПЗавершения Тогда
		абс_БизнесПроцессы.ЗапуститьБПЗакрытияДоговора(Объект.Ссылка);
		
	ИначеЕсли ПараметрыЗаписи.ЗапуститьБПЗавершения Тогда
		Сообщить("Невозможно запустить бизнес-процесс завершения. Договор должен иметь статус 'Запрос на закрытие'.", СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Выберем ответственого в случае дополнительного согласования
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование
		 или ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда
		
		БПСогласование = НайтиБПСогласование();
		Если НЕ БПСогласование = Неопределено Тогда
			
			БПСогласованиеОбъект = БПСогласование.ПолучитьОбъект();
			БПСогласованиеОбъект.СотрудникДопСогласование = мСотрудникДопСогласование;
			БПСогласованиеОбъект.Записать();
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачиТТКПоДоговору()
	
	// Попробуем закрыть задачу согласования
	ЗадачаСогласование = ПолучитьЗадачуПоДоговоруСогласование();
	
	Если НЕ ЗадачаСогласование = Неопределено Тогда	
		Если НЕ ЗадачаСогласование.Выполнена Тогда
			
			ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();	
			
			ЗадачаОбъект.ВыполнитьЗадачу();
			
			ЗадачаОбъект.Записать();
			
			Если    НЕ ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс.ДоговорКонтрагента) 
				ИЛИ НЕ ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс.Контрагент) Тогда
				
				БПОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
				
				БПОбъект.Контрагент			= Объект.Ссылка.Владелец;
				БПОбъект.ДоговорКонтрагента = Объект.Ссылка;

				
				БПОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
	// Попробуем закрыть задачу завершения				
	ЗадачаЗавершение = ПолучитьЗадачуПоДоговоруЗакрытие();
	
	Если НЕ ЗадачаЗавершение = Неопределено Тогда	
		
		Если НЕ ЗадачаЗавершение.Выполнена Тогда
			
			ЗадачаОбъект = ЗадачаЗавершение.ПолучитьОбъект();	
			
			ЗадачаОбъект.ВыполнитьЗадачу();
			
			ЗадачаОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Функция ПолучитьСтатусДоговораПоСсылке()
	
	Возврат Объект.Ссылка.абс_СтатусДоговора;
	
КонецФункции

// Функции для поиска задач бизнесс процессов
&НаСервере
Функция НайтиЗадачуПоДоговору(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено)
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута В (&ТочкаМаршрута)
	                           |	И абсЗадачаДоговора.Исполнитель = &Исполнитель
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	ЗадачаСсылка = Неопределено;
	
	Если ВыборкаЗадач.Следующий() Тогда
		ЗадачаСсылка = ВыборкаЗадач.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаСсылка;
	
КонецФункции

&НаСервере
Функция ПолучитьЗадачуПоДоговоруСогласование()
		
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СпТочек = Новый Массив;
	
	ТекСтатус = Объект.Ссылка.абс_СтатусДоговора;
	
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеОтказ);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаКонтрагента Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеБухгалтерией Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПД Тогда		
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ЗаполнениеКарточкиДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеПервымЛицом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(Бизнеспроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеДополнительноеСогласование);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеДВКУР Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПервоеЛицо Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПВП Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Регистрация Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеПервымЛицом);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.РегистрацияДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Отказ Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ПроверкаКарточки);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеДоговора);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.СогласованиеПервымЛицом);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеБхугалтером);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеДВКУР);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеСогласованиеПВП);
		
	КонецЕсли;
			
	Возврат НайтиЗадачуПоДоговору(БП, СпТочек);

КонецФункции

&НаСервере
Функция ПолучитьЗадачуПоДоговоруЗакрытие()
	
	БП = НайтиБПЗакрытие();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекСтатус = Объект.Ссылка.абс_СтатусДоговора;

	СпТочек = Новый Массив;
	
	Если ТекСтатус = Перечисления.абсСтатусыДоговоров.Закрыт Тогда
		СпТочек.Добавить(БизнесПроцессы.абсЗакрытиеДоговоров.ТочкиМаршрута.УтверждениеЗакрытияБухгалтерией);
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыДоговоров.Исполнение Тогда
		СпТочек.Добавить(БизнесПроцессы.абсЗакрытиеДоговоров.ТочкиМаршрута.УтверждениеЗакрытияБухгалтерией);
	КонецЕсли;
			
	Возврат НайтиЗадачуПоДоговору(БП, СпТочек);

КонецФункции

&НаСервере
Функция НайтиБПСогласование()
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоДоговору(Объект.Ссылка, "абсСогласованиеДоговоров");
	
КонецФункции

&НаСервере
Функция НайтиБПЗакрытие()
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоДоговору(Объект.Ссылка, "абсЗакрытиеДоговоров");
	
КонецФункции

&НаСервере
Функция НайтиБизнесПроцессПоДоговору(ИмяБизнесПроцесса)
	БП = Неопределено;
	
	ЗапросБП = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                        |	абсБП.Ссылка
	                        |ИЗ
	                        |	БизнесПроцесс." + ИмяБизнесПроцесса + " КАК абсБП
	                        |ГДЕ
	                        |	абсБП.ДоговорКонтрагента = &ДоговорКонтрагента И
							|	абсБП.Завершен = ЛОЖЬ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	абсБП.Дата УБЫВ");
							
	ЗапросБП.УстановитьПараметр("ДоговорКонтрагента", Объект.Ссылка);
	
	ВыборкаБП = ЗапросБП.Выполнить().Выбрать();
	
	Если ВыборкаБП.Следующий() Тогда
		БП = ВыборкаБП.Ссылка;
	КонецЕсли;
	
	Возврат БП;
		
КонецФункции

&НаСервере
Процедура УстановитьРежимПросмотраЭлемента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	                	
	ТекСтатус = Объект.абс_СтатусДоговора;
	
	мТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_ТаблицаСтатусовБПТТК.РедактированиеДокумента КАК Редактирование,
	                      |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса
	                      |ИЗ
	                      |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                      |ГДЕ
	                      |	абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеДоговоров)
	                      |	И абс_ТаблицаСтатусовБПТТК.Статус = &ТекСтатус");
						  
	Запрос.УстановитьПараметр("ТекСтатус", Объект.Ссылка.абс_СтатусДоговора);
	
	РазрешеноРедактирование = Ложь;
	РазрешеноМенятьСтатус 	= Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивРолей = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
	
	Пока Выборка.Следующий() Цикл
		Если (НЕ МассивРолей.Найти(Выборка.ОтветственныйЗаИзменениеСтатуса) = Неопределено) И
			 (НЕ ТекСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование) Тогда
			РазрешеноМенятьСтатус = Истина
		КонецЕсли;
		
		РазрешеноРедактирование = РазрешеноРедактирование ИЛИ Выборка.Редактирование;
	КонецЦикла;
	
	// Если есть задачи текущему пользователю, то ему разрешено изменить статус
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	                      |			&ТекПользователь,
	                      |			ОбъектЗадачи = &ДоговорСсылка
	                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
						  
	Запрос.УстановитьПараметр("ТекПользователь"	, ТекПользователь);
	Запрос.УстановитьПараметр("ДоговорСсылка"	, Объект.Ссылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;	
	
	// Список статусов заполняется до установки режима просмотра документа
	//  с учетом прав и ролей пользователя
	// Поэтому проверяем возможность изменения статуса по наличию элементов в списке статусов
	Если Элементы.Статус.СписокВыбора.Количество() > 1 Тогда
		РазрешеноМенятьСтатус = Истина;
	Иначе
		РазрешеноМенятьСтатус = Ложь;
	КонецЕсли;
	
	// Установим необходимый вид просмотра элемента
	Если НЕ РазрешеноРедактирование Тогда
		
		ТолькоПросмотр = Истина;
		
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаписатьСтатус.Доступность = РазрешеноМенятьСтатус;
		
	Иначе
		ТолькоПросмотр = Ложь;
		
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаписатьСтатус.Доступность = Истина;
		
	КонецЕсли;
	
	Элементы.Статус.Доступность = РазрешеноМенятьСтатус;
	Элементы.мВидДоговора.Доступность= РазрешеноМенятьСтатус;

	// Установим доступность кнопок Записать и закрыть и Записать
	Элементы.КнопкаЗаписатьИЗакрыть.Доступность = РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус;
	Элементы.КнопкаЗаписать.Доступность 		= РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус;
	
	// Разрешим менять номер, даты договора если договор в статусе регистрации
	//  и у пользователя есть роль "Регистрация первым отделом"
	//Если (НЕ МассивРолей.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено)
	//	И абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПервоеЛицо Тогда
	
	// 20101221 устанавливаем номер, даты договоров в статусе Регистрация
	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено 
			И (Объект.Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация 
				ИЛИ Объект.Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора))		
		 ИЛИ (Объект.Ссылка.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка 
		 		И Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		
		Элементы.Дата.ТолькоПросмотр 						        		= Ложь;
		Элементы.Номер.ТолькоПросмотр										= Ложь;
		Элементы.абс_ДатаНачалаДействия.ТолькоПросмотр 						= Ложь;
		Элементы.абс_ДатаРегистрацииДоговора.ТолькоПросмотр					= Ложь;
		Элементы.СрокДействия.ТолькоПросмотр 								= Ложь;
		Элементы.абс_ЛицевойСчетБиллинга.ТолькоПросмотр    					= Ложь;
		Элементы.абс_ЕстьОригиналДоговора.Доступность						= Истина; 		
		Элементы.Наименование.ТолькоПросмотр								= Ложь;		
		Элементы.Дата.АвтоОтметкаНезаполненного 							= Истина;
		Элементы.Номер.АвтоОтметкаНезаполненного 							= Истина;
		Элементы.абс_ДатаНачалаДействия.АвтоОтметкаНезаполненного 			= Истина;
		Элементы.абс_ДатаРегистрацииДоговора.АвтоОтметкаНезаполненного 		= Истина;		
		Элементы.Наименование.АвтоОтметкаНезаполненного 					= Истина; 		
		//Элементы.ОсновныеДействияФормы.Кнопки.ЗаписатьСтатус.Доступность 	= Истина;
		
	Иначе
		
		Элементы.Дата.ТолькоПросмотр 										= Истина;
		Элементы.Номер.ТолькоПросмотр 										= Истина;
		Элементы.абс_ДатаНачалаДействия.ТолькоПросмотр 						= Истина;
		Элементы.абс_ДатаРегистрацииДоговора.ТолькоПросмотр					= Истина;
		Элементы.СрокДействия.ТолькоПросмотр 								= Истина;
		Элементы.абс_ЛицевойСчетБиллинга.ТолькоПросмотр    					= Истина;
		Элементы.Наименование.ТолькоПросмотр								= Ложь;
		Элементы.абс_ЕстьОригиналДоговора.Доступность						= Ложь; 		
		Элементы.Дата.АвтоОтметкаНезаполненного 							= Ложь;
		Элементы.Номер.АвтоВыборНезаполненного 								= Ложь;
		Элементы.абс_ДатаНачалаДействия.АвтоОтметкаНезаполненного 			= Ложь;
		Элементы.абс_ДатаРегистрацииДоговора.АвтоОтметкаНезаполненного 		= Ложь;		
		Элементы.Наименование.АвтоОтметкаНезаполненного 					= Ложь;
		
	КонецЕсли;
                  	
	//АБС ВСТАВКА №15153 НАЧАЛО
	Если мТекущийПользователь = Объект.абс_Ответственный
		И Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда   		
		Элементы.абс_ЕстьОригиналДоговора.Доступность = Истина;  		
	КонецЕсли;
	//\\АБС ВСТАВКА №15153 КОНЕЦ		
	
	//АБС ВСТАВКА №16086 НАЧАЛО	
	Если (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.РедактированиеМетодикДляТрансфертногоЦенообразования) = Неопределено 
			или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
		ИЛИ (мТекущийПользователь = Объект.абс_Ответственный 
				И (Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка
					ИЛИ Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Уточнение)) Тогда   		
		Элементы.абс_ПрименяемаяМетодикаДляТрансфертногоЦенообразования.Доступность = Истина;		
	КонецЕсли;
	//\\АБС ВСТАВКА №16086 КОНЕЦ	

	//АБС ВСТАВКА №000020914 НАЧАЛО
	Элементы.абс_ТребуетОдобрениеСДилиОСА.Доступность = (НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СогласованиеПД) = Неопределено
															или НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено)
															и Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД;
	//\\АБС ВСТАВКА №000020914 КОНЕЦ
	
	мСтатус 		= Объект.абс_СтатусДоговора;
	мВидДоговора	= Объект.ВидДоговора;
	
	Соответствие = ЗапросДанныхСправочноИтогоБезНДС_Сервер();
	абс_СправочноИтогоБезНДС = ""+Формат(Соответствие.Получить("СправочноИтогоБезНДС"),"ЧДЦ=2")+" руб.";
	Если Соответствие.Получить("ПревышенПорогОтклонения") = Истина Тогда
		Элементы.абс_СправочноИтогоБезНДС.ЦветТекста = WebЦвета.Кирпичный;
	КонецЕсли;	
	
	//АБС ВСТАВКА №36320 НАЧАЛО «5 февраля 2014 г.», Пополитов
	абс_ПроверитьВидимостьПоляНаименование();
	//\\АБС ВСТАВКА №36320 КОНЕЦ	
	
КонецПроцедуры

&НаСервере
Функция ЗапросДанныхСправочноИтогоБезНДС_Сервер()

	Возврат РеквизитФормыВЗначение("Объект").ЗапросДанныхСправочноИтогоБезНДС();	
	
КонецФункции

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Попытка
		Записать();
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Элементы.Статус.СписокВыбора.НайтиПоЗначению(мСтатус) = Неопределено Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран неверный статус договора");
		
		мСтатус = Объект.абс_СтатусДоговора;
		
		Возврат;
	КонецЕсли;
	
	СтатусСсылки = ПолучитьСтатусСсылки();
	
	Если СтатусСсылки = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.СогласованиеПД") И 
		мСтатус = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.СогласованиеПДСменаОтветственного") Тогда
		
		
		ПользователиПД = ПолучитьСписокПД();
			
		Если НЕ ПользователиПД = Неопределено Тогда
			
			НовыйСотрудникПД = ПользователиПД.ВыбратьЭлемент("Выберите нового ответственного");
			
			Если НЕ НовыйСотрудникПД = Неопределено Тогда
				Объект.абс_ОтветственныйПД = НовыйСотрудникПД.Значение;
				
				Объект.абс_СтатусДоговора = СтатусСсылки;
				мСтатус = Объект.абс_СтатусДоговора;
			Иначе
				мСтатус = Объект.абс_СтатусДоговора;
			КонецЕсли;

		КонецЕсли;
	 
	КонецЕсли;	
	
	мСотрудникДопСогласование = Объект.абс_СотрудникДопСогласование;
	
	Если (мСтатус = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.ДополнительноеСогласование") 
		// АБС ВСТАВКА Фролов 20120125 Запретил менять ответственного доп согласования.
		И НЕ СтатусСсылки = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.ДополнительноеСогласование"))
		или
		(мСтатус = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией")
		И НЕ СтатусСсылки = ПредопределенноеЗначение("Перечисление.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией")) Тогда	
		
		СотрудникиДопСогласование = ПолучитьСписокДопСогласования();
		
		Если НЕ СотрудникиДопСогласование = Неопределено Тогда
			
			СотрудникДопСогласование = СотрудникиДопСогласование.ВыбратьЭлемент("Выберите сотрудника для доп. согласования");
			
			Если НЕ СотрудникДопСогласование = Неопределено Тогда
				мСотрудникДопСогласование = СотрудникДопСогласование.Значение;
			Иначе
				мСтатус = Объект.абс_СтатусДоговора;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
		
	Если НЕ Объект.абс_СтатусДоговора = мСтатус Тогда
		Объект.абс_СтатусДоговора = мСтатус;
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователяПоСотруднику(Пользователь)
	
	Возврат абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(Пользователь);
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусСсылки()
	
	Возврат Объект.Ссылка.абс_СтатусДоговора;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокДопСогласования()
	
	Если мСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование Тогда
		
		СотрудникиДопСогласования = абс_БизнесПроцессы.ПолучитьСотрудниковРоли(
									Справочники.РолиИсполнителей.СотрудникИнициаторКомпании);
			
		Возврат СотрудникиДопСогласования;
		
	ИначеЕсли мСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласованиеБухгалтерией Тогда	
		
		СотрудникиДопСогласования = абс_БизнесПроцессы.ПолучитьСотрудниковРоли(
									Справочники.РолиИсполнителей.СотрудникИнициаторКомпании);
			
		Возврат СотрудникиДопСогласования;
	
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокПД()
	
	Если мСтатус = Перечисления.абсСтатусыДоговоров.ДополнительноеСогласование ИЛИ 
		 мСтатус = Перечисления.абсСтатусыДоговоров.СогласованиеПДСменаОтветственного Тогда
		
		СотрудникиДопСогласования = абс_БизнесПроцессы.ПолучитьПользователейРоли(
			Справочники.РолиИсполнителей.СогласованиеПД, Объект.Организация);
			
		Возврат СотрудникиДопСогласования;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура НомерПриИзменении(Элемент)

	Объект.Номер = мНомер;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = мДата;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура абс_ДатаРегистрацииДоговораПриИзменении(Элемент)
	
	Объект.абс_ДатаРегистрацииДоговора = мабс_ДатаРегистрацииДоговора;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура абс_ДатаНачалаДействияПриИзменении(Элемент)
	
	Объект.абс_ДатаНачалаДействия = мабс_ДатаНачалаДействия;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	
	Объект.СрокДействия = мСрокДействия;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетСуммНаСервере(НаименованиеПоля)
	Если НаименованиеПоля = "СуммаБезНДС" Тогда
		//считаем НДС и СНДС
		Если ЗначениеЗаполнено(Объект.абс_СтавкаНДС) Тогда
			ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Объект.абс_СтавкаНДС);
			Объект.абс_СуммаНДС = Окр(Объект.абс_СуммаБезНДС*ПроцентНДС/100,2);
			Объект.абс_СуммаСНДС = Объект.абс_СуммаБезНДС+Объект.абс_СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеПоля = "СтавкаНДС" Тогда
		//считаем НДС и СНДС
		Если ЗначениеЗаполнено(Объект.абс_СуммаБезНДС) и ЗначениеЗаполнено(Объект.абс_СтавкаНДС) Тогда
			ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Объект.абс_СтавкаНДС);
			Объект.абс_СуммаНДС = Окр(Объект.абс_СуммаБезНДС*ПроцентНДС/100,2);
			Объект.абс_СуммаСНДС = Объект.абс_СуммаБезНДС+Объект.абс_СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеПоля = "СуммаНДС" Тогда
		//считаем НДС и СНДС
		Объект.абс_СуммаСНДС = Объект.абс_СуммаБезНДС+Объект.абс_СуммаНДС;
	КонецЕсли;	
	
	Если НаименованиеПоля = "СуммаСНДС" Тогда
		Объект.абс_СуммаНДС =  УчетНДС.РассчитатьСуммуНДС(Объект.абс_СуммаСНДС,
	                                                   Истина, Истина,
	                                                   УчетНДС.ПолучитьСтавкуНДС(Объект.абс_СтавкаНДС));
													   
     	Объект.абс_СуммаБезНДС = Объект.абс_СуммаСНДС - Объект.абс_СуммаНДС; 

	КонецЕсли;
	
	
	Если НаименованиеПоля = "ЕжемесячнаяСуммаБезНДС" Тогда
		//считаем НДС и СНДС
		Если ЗначениеЗаполнено(Объект.абс_ЕжемесячнаяСтавкаНДС) Тогда
			ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Объект.абс_ЕжемесячнаяСтавкаНДС);
			Объект.абс_ЕжемесячнаяСуммаНДС = Окр(Объект.абс_ЕжемесячнаяСуммаБезНДС*ПроцентНДС/100,2);
			Объект.абс_ЕжемесячнаяСуммаСНДС = Объект.абс_ЕжемесячнаяСуммаБезНДС+Объект.абс_ЕжемесячнаяСуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеПоля = "ЕжемесячнаяСтавкаНДС" Тогда
		//считаем НДС и СНДС
		Если ЗначениеЗаполнено(Объект.абс_ЕжемесячнаяСуммаБезНДС) и ЗначениеЗаполнено(Объект.абс_ЕжемесячнаяСтавкаНДС) Тогда
			ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Объект.абс_ЕжемесячнаяСтавкаНДС);
			Объект.абс_ЕжемесячнаяСуммаНДС = Окр(Объект.абс_ЕжемесячнаяСуммаБезНДС*ПроцентНДС/100,2);
			Объект.абс_ЕжемесячнаяСуммаСНДС = Объект.абс_ЕжемесячнаяСуммаБезНДС+Объект.абс_ЕжемесячнаяСуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеПоля = "ЕжемесячнаяСуммаНДС" Тогда
		//считаем НДС и СНДС
		Объект.абс_ЕжемесячнаяСуммаСНДС = Объект.абс_ЕжемесячнаяСуммаБезНДС+Объект.абс_ЕжемесячнаяСуммаНДС;
	КонецЕсли;	
	
	Если НаименованиеПоля = "ЕжемесячнаяСуммаСНДС" Тогда
		Объект.абс_ЕжемесячнаяСуммаНДС =  УчетНДС.РассчитатьСуммуНДС(Объект.абс_ЕжемесячнаяСуммаСНДС,
	                                                   Истина, Истина,
	                                                   УчетНДС.ПолучитьСтавкуНДС(Объект.абс_ЕжемесячнаяСтавкаНДС));
													   
     	Объект.абс_ЕжемесячнаяСуммаБезНДС = Объект.абс_ЕжемесячнаяСуммаСНДС - Объект.абс_ЕжемесячнаяСуммаНДС; 

	КонецЕсли;	
	
	
КонецПроцедуры


&НаКлиенте
Процедура абс_СуммаБезНДСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ВыполнитьРасчетСуммНаСервере("СуммаБезНДС");
КонецПроцедуры

&НаКлиенте
Процедура абс_СтавкаНДСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ВыполнитьРасчетСуммНаСервере("СтавкаНДС");
КонецПроцедуры

&НаКлиенте
Процедура абс_СуммаНДСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ВыполнитьРасчетСуммНаСервере("СуммаНДС");

КонецПроцедуры

&НаКлиенте
Процедура мВидДоговораПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора) ИЛИ Объект.ВидДоговора = ВидДоговораПрочее Тогда
		Объект.ВедениеВзаиморасчетов                    = ВедениеВзаиморасчетовПоДоговоруВЦелом;
		Объект.ТипЦен                                   = Неопределено;
		Объект.ВестиПоДокументамРасчетовСКонтрагентом   = Ложь;
	КонецЕсли;

	//Зачистка флага "Расчеты в условных единицах" для всех видов договоров кроме договоров в поставщиком и с покупателем
	Если НЕ (Объект.ВидДоговора = ВидДоговораСПоставщиком ИЛИ 
				Объект.ВидДоговора = ВидДоговораСПокупателем) Тогда
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;

	//Зачистка флага "Реализация на экспорт" для всех видов договоров кроме договора с покупателем
	Если Объект.ВидДоговора <> ВидДоговораСПокупателем Тогда
		Объект.РеализацияНаЭкспорт = Ложь;
	КонецЕсли;

	УстановитьДоступность();
   	Если НЕ Объект.ВидДоговора = мВидДоговора Тогда
		Объект.ВидДоговора = мВидДоговора;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура абс_СуммаСНДСПриИзменении(Элемент)
	
	ВыполнитьРасчетСуммНаСервере("СуммаСНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура абс_ТипДоговораПриИзменении(Элемент)
		
	Если Объект.абс_ТипДоговора = ПредопределенноеЗначение("Перечисление.абсТипыДоговоров.СоглашениеОКонфиденциальности") Тогда
		
		Объект.абс_БезЗакупочногоЗаказа = Истина;
		
	Иначе
		
		Объект.абс_БезЗакупочногоЗаказа = Ложь;
		
		Объект.абс_ТипСоглашенияОКонфиденциальности = ПредопределенноеЗначение("Перечисление.абс_ТипыСоглашенийОКонфиденциальности.ПустаяСсылка");
	КонецЕсли;
		
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = мНаименование;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура абс_ЕстьОригиналДоговораПриИзменении(Элемент)
	
	Объект.абс_ЕстьОригиналДоговора = мабс_ЕстьОригиналДоговора;
	
	Модифицированность = Истина;	

КонецПроцедуры

&НаКлиенте
Процедура абс_ВидДоговораПриИзменении(Элемент)
		//АБС заявка 927
		Если ЗначениеЗаполнено(Объект.абс_ВидДоговора) Тогда
			ЗначениеПоУмолчанию = ПолучитьТипДоговора();
		Если Объект.абс_ВидДоговора =ЗначениеПоУмолчанию Тогда
			Объект.абс_ТиповойДоговор = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//АБс заявка 927

КонецПроцедуры

&НаСервере

Функция ПолучитьТипДоговора()
	Возврат  справочники.абс_ПредметДоговораГК.НайтиПоКоду("000000018");
КонецФункции

&НаКлиенте
Процедура абс_ЕжемесячнаяСуммаБезНДСПриИзменении(Элемент)
	ВыполнитьРасчетСуммНаСервере("ЕжемесячнаяСуммаБезНДС");
КонецПроцедуры

&НаКлиенте
Процедура абс_ЕжемесячнаяСтавкаНДСПриИзменении(Элемент)
	ВыполнитьРасчетСуммНаСервере("ЕжемесячнаяСтавкаНДС");
КонецПроцедуры

&НаКлиенте
Процедура абс_ЕжемесячнаяСуммаНДСПриИзменении(Элемент)
	ВыполнитьРасчетСуммНаСервере("ЕжемесячнаяСуммаНДС");
КонецПроцедуры

&НаКлиенте
Процедура абс_ЕжемесячнаяСуммаСНДСПриИзменении(Элемент)
	ВыполнитьРасчетСуммНаСервере("ЕжемесячнаяСуммаСНДС");
КонецПроцедуры

&НаКлиенте
Процедура абс_СправочноИтогоБезНДСНажатие(Элемент, СтандартнаяОбработка)
	
	Соответствие = ЗапросДанныхСправочноИтогоБезНДС_Сервер();
	абс_СправочноИтогоБезНДС = ""+Формат(Соответствие.Получить("СправочноИтогоБезНДС"),"ЧДЦ=2")+" руб.";
	Если Соответствие.Получить("ПревышенПорогОтклонения") = Истина Тогда
		Элементы.абс_СправочноИтогоБезНДС.ЦветТекста = WebЦвета.Кирпичный;
	КонецЕсли;		
	ВыбЭлемент = ВыбратьИзМеню(Соответствие.Получить("СписокЗначений"),Элемент);
	             	
КонецПроцедуры

&НаКлиенте
Процедура абс_ДобавитьОсновнойДоговорКДоговоруПриИзменении(Элемент)
	
	//АБС ВСТАВКА №35514 НАЧАЛО
	Если Объект.абс_ДобавитьОсновнойДоговорКДоговору Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Убедитесь, что у вас не дополнительное соглашение или приложение!!!";
		Сообщение.Сообщить();		
	КонецЕсли;	
	УстановитьДоступность();
	//\\АБС ВСТАВКА №35514 КОНЕЦ	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	//АБС ВСТАВКА №35872 НАЧАЛО
	ТекстСообщения = ПроверитьОрганизацию();
	Если не ТекстСообщения = "" Тогда
		мСообщить = Новый СообщениеПользователю;
        мСообщить.УстановитьДанные(Объект);
		мСообщить.Текст = ТекстСообщения;
		мСообщить.Сообщить();
	КонецЕсли;	
	//\\АБС ВСТАВКА №35872 КОНЕЦ
	
КонецПроцедуры

&НаСервере 
Функция ПроверитьОрганизацию()
	
	//АБС ВСТАВКА №35872 НАЧАЛО
	КонтрольОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(КонтрольОрганизация) и КонтрольОрганизация <> Объект.Организация и не ЗначениеЗаполнено(Объект.абс_Агент) Тогда
		Объект.абс_Агент = КонтрольОрганизация;
		Возврат "Заполнено поле «Агент» значением - "+КонтрольОрганизация;
	Иначе	
		Возврат "";
	КонецЕсли;
	//\\АБС ВСТАВКА №35872 КОНЕЦ 
	
КонецФункции

//АБС ВСТАВКА №36320 НАЧАЛО «5 февраля 2014 г.», Пополитов
&НаСервере
Процедура абс_ПроверитьВидимостьПоляНаименование()

	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	врСотрудникКомпании = не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено и мТекущийПользователь = Объект.абс_Ответственный;
    врСуперПользователь = не мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено;
	врОбщийОтдел = не мРолиПользователя.Найти(Справочники.РолиИсполнителей.ОбщийОтдел) = Неопределено;
	
	ПравоВСтатусеПодготовка = врСотрудникКомпании или врСуперПользователь;
	ПравоВСтатусеКорректировка = врОбщийОтдел или врСуперПользователь;
	
	ТолькоПросмотр = Истина;
	
	Если не ЗначениеЗаполнено(Объект.абс_ВстречныйДоговор) 
		и (не ЗначениеЗаполнено(Объект.Ссылка) или (ПравоВСтатусеПодготовка и Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка)) Тогда
		ТолькоПросмотр = Ложь;	
	КонецЕсли;	
	
	Если ПравоВСтатусеКорректировка 
		и не ЗначениеЗаполнено(Объект.абс_ВстречныйДоговор)
		и (Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация
			или Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.КорректировкаРеквизитовДоговора) Тогда
		ТолькоПросмотр = Ложь;	
	КонецЕсли;	
	
	Элементы.Наименование.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Наименование.АвтоОтметкаНезаполненного = не ТолькоПросмотр;

КонецПроцедуры	
//\\АБС ВСТАВКА №36320 КОНЕЦ 
