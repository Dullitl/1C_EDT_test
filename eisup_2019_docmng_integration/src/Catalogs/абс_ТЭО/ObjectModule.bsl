

Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	ТекПользователь = Ответственный;
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовТЭО.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ТЭО.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.ТЭО					= Ссылка;
	Запись.Пользователь 		= ТекПользователь;	
	Запись.Статус				= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
	
	ОтветственныйСотрудник = абс_БизнесПроцессы.ПолучитьСотрудникаПользователя(ТекПользователь);
	
	Если НЕ ОтветственныйСотрудник = Неопределено Тогда
		Запись.ДолжностьОтветственного	= ОтветственныйСотрудник.Должность;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//Вставка 22.01.14 Гетц
	НеИспользоватьБП = Истина;
	//Вставка 22.01.14
	
	СтатусПоРегистру = Справочники.абс_ТЭО.ПолучитьСтатусТЭО(Ссылка);
	
	Если НЕ Статус = СтатусПоРегистру и Не ЭтоГруппа Тогда
		
		ЗаписатьНовыйСтатус(Статус, ПричинаИзмененияСтатуса);
		ОбновитьЗаявкиНаПроект();
		
	КонецЕсли;
	
	Если Не НеИспользоватьБП И Не ЭтоГруппа и Не ВидТЭО = Перечисления.абс_ВидТЭО.БюджетнаяОценка  Тогда   //***** АБС. Гетц 22.01.14 - добавлено НеИспользоватьБП
		//ВСТАВКА Проектный учет 191213 Родин	
		//Бизнес-процессы
		
		БизнесПроцессЗапущен = Ложь;
		
		БПСогласование = НайтиБПСогласование();
		
		Если Статус = Перечисления.абс_СтатусСогласованияТЭО.Подготовка Тогда
			
			БизнесПроцессЗапущен = Ложь;
			// Запустим БП если он еще не запущен
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				//Если Не ВидТЭО = Перечисления.абс_ВидТЭО.БюджетнаяОценка Тогда	
					абс_БизнесПроцессы.ЗапуститьБПСогласованияТЭО(Ссылка);
				//КонецЕсли;	
			Иначе
				БизнесПроцессЗапущен = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если Статус <> Перечисления.абс_СтатусСогласованияТЭО.Подготовка Тогда
			БизнесПроцессЗапущен = Истина;
		КонецЕсли;	
		
		
		//Закрытие задач
		Если (НЕ Статус = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру)) Тогда
			Если БизнесПроцессЗапущен и БПСогласование <> Неопределено Тогда
				// Попробуем закрыть задачу согласования
				ЗадачаСогласование = ПолучитьЗадачуПоТЭО();
				
				Если НЕ ЗадачаСогласование = Неопределено Тогда
					Для Каждого Стр Из ЗадачаСогласование Цикл
						ВыполнитьЗадачуСогласование(Стр);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ВСТАВКА Проектный учет 191213 Родин	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбновитьЗаявкиНаПроект()
	
	Если Статус = Перечисления.абс_СтатусСогласованияТЭО.Согласован Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	абс_ЗаявкаНаПроект.Ссылка
		|ИЗ
		|	Документ.абс_ЗаявкаНаПроект КАК абс_ЗаявкаНаПроект
		|ГДЕ
		|	абс_ЗаявкаНаПроект.ПометкаУдаления = ЛОЖЬ
		|	И абс_ЗаявкаНаПроект.СтатусПроекта = &Статус
		|	И абс_ЗаявкаНаПроект.ТЭО = &Ссылка";
		Запрос.УстановитьПараметр("Статус", Перечисления.абс_СтатусыПроектов.СогласованиеТЭО);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ДокО = Выборка.Ссылка.ПолучитьОбъект();
			ДокО.СтатусПроекта = Перечисления.абс_СтатусыПроектов.Согласован;
			Попытка
				ДокО.Записать();
			Исключение
				ОбщегоНазначения.Сообщение(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			Документы.абс_ЗаявкаНаПроект.СформироватьНоменклатурныеГруппыИПроекты(ДокО.Ссылка);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры


//ВСТАВКА Проектный учет 191213 Родин	

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоТЭО(Ссылка);	
	
КонецФункции

Функция НайтиЗадачуПоЗаявке(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина)
	
	ОтборПоИсполнителю = Ложь;
	МассивЗадач = Новый Массив;
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		МассивЗадач.Добавить(ВыборкаЗадач.Ссылка);
	КонецЕсли;
	
	Возврат МассивЗадач;
	
КонецФункции

Функция ПолучитьЗадачуПоТЭО() Экспорт
	
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	ТекСтатус = Статус;
	
	Если ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.Подготовка Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.ЗапросОработан);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.ДействиеПриОтказе);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.СогласованиеДЭФ  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.СогласованиеДЭФ);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.РазработкаИТРТЭО);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.ЗапросИнформации  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.ПодготовкаТЭО);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.ЗапросОтработан  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.ЗапросИнформации);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.РазработкаИТРТЭО  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.ПодготовкаТЭО);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.СогласованиеИК  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.СогласованиеДЭФ);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.РазработкаИТРДП Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.СогласованиеИК);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусСогласованияТЭО.Отказ  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.СогласованиеДЭФ);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.РазработкаИТРТЭО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.СогласованиеИК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.РазработкаИТРДП);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеТЭО.ТочкиМаршрута.ПодготовкаТЭО);
	КонецЕсли;	
	
	Возврат НайтиЗадачуПоЗаявке(БП, СпТочек,,Ложь);
	
КонецФункции

Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЕсли;	
	
КонецПроцедуры

//ВСТАВКА Проектный учет 191213 Родин	

//АБС ВСТАВКА   14.01.2014 Навценя
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если (НЕ ЭтоНовый()) И (Ссылка.Статус = Перечисления.абс_СтатусСогласованияТЭО.Подготовка) Тогда 
		ПроверяемыеРеквизиты.Добавить("ВидТЭО");
	КонецЕсли;
	
КонецПроцедуры
//АБС ВСТАВКА  КОНЕЦ

