/////////////////////////////////////////////////////////////
// Навигация по разделам

//ВСТАВКА Проектный учет 20171213 Родин
Перем мТекущийПользователь;
Перем мРолиПользователя;
//ВСТАВКА Проектный учет 20171213 Родин

&НаКлиенте
Процедура ПерейтиКРазделу(ТекстКоманды)	
			
	Если Не Найти(ТекстКоманды, "Назад") = 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГлавноеМеню;
		Элементы.ЗаголовокРаздела.Заголовок = "Разделы";
	Иначе
		ЗамененныйТекст = СтрЗаменить(ТекстКоманды, "ПерейтиК", "Группа");
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы[ЗамененныйТекст];
		Элементы.ЗаголовокРаздела.Заголовок = Элементы.Страницы.ТекущаяСтраница.Заголовок;
	КонецЕсли;	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Процедуры обработчики событий элементов управления формы

&НаКлиенте
Процедура ПерейтиКРазделуНажатие(Элемент)
	ПерейтиКРазделу(Элемент.Имя);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтборы();
	
	// Статус
	ЗаполнитьСтатусНаСервере();
	мСтатус = Объект.Статус;
	ОбновитьВидимость();
	ОбновитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	//ЗаполнитьСтатусНаСервере();
	
	
	Если мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.ЗапросИнформации")  Тогда
		
		врОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");		
		
		СотрудникиДопСогласования = абс_БизнесПроцессы.ПолучитьСотрудниковРоли(
		ПредопределенноеЗначение("Справочники.РолиИсполнителей.СотрудникИнициаторКомпании"),?(ЗначениеЗаполнено(врОрганизация),врОрганизация,Неопределено));
		
		ФормаВыбораСотрудников = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора();
		
		Если ЗначениеЗаполнено(врОрганизация) Тогда
			ОтборСотрудниковПоОрганизации = ФормаВыбораСотрудников.Отбор.Организация;
			ОтборСотрудниковПоОрганизации.ВидСравнения 	= ВидСравнения.Равно;
			ОтборСотрудниковПоОрганизации.Значение 		= врОрганизация;
			ОтборСотрудниковПоОрганизации.Использование	= Истина;
		КонецЕсли;
		
		ОтборСотрудников = ФормаВыбораСотрудников.Отбор.Ссылка;
		
		ОтборСотрудников.ВидСравнения 	= ВидСравнения.ВСписке;
		ОтборСотрудников.Значение 		= СотрудникиДопСогласования;
		ОтборСотрудников.Использование	= Истина;		
		
		ФормаВыбораСотрудников.ТолькоПросмотр 		= Истина;
		ФормаВыбораСотрудников.РежимВыбора 			= Истина;
		ФормаВыбораСотрудников.МножественныйВыбор 	= Ложь;
		
		СотрудникДопСогласование = ФормаВыбораСотрудников.ОткрытьМодально();
		
		Если НЕ СотрудникДопСогласование = Неопределено Тогда
			Объект.Статус = мСтатус;
			Объект.СотрудникДопСогласование = СотрудникДопСогласование;
		Иначе
			//мСтатус = Объект.Статус;
			Возврат;
		КонецЕсли;
	Иначе
		Объект.Статус = мСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если СтатусИзменен() Тогда 
		Объект.ПричинаИзмененияСтатуса = "";
		ВвестиСтроку(Объект.ПричинаИзмененияСтатуса, "Укажите причину изменения статуса.",,Истина);
		
		//// Гущина D2016-1227-3125  2017.01.19  +++
		//Если (Объект.Ссылка.Статус=ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.Подготовка") // был в подготовке
		//	И Объект.Статус<>ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.Отказ")  // не перевели в отказ
		//	И Не ЗначениеЗаполнено(Объект.НаправлениеБизнеса))
		//	Тогда 
		//	Предупреждение("Необходимо заполнить ""Направление бизнеса"". ");
		//	Отказ= Истина;
		//КонецЕсли;	
		////  Гущина D2016-1227-3125  2017.01.19  ---
		
	// Гущина D2016-1227-3125  2017.01.19  +++ иначе: это новый и проверка на роль
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) и НЕ РольДоступна("ttk_ДобавлениеНовыхТЭО") тогда
		Предупреждение("Недостаточно прав для редактирования справочника. ");
		Отказ= Истина;
	КонецЕсли;
	
	// Гущина T#7772305  2017.02.02  +++   новое условие. Доступен для пользователей с ролью ttk_ДобавлениеНовыхТЭО. ниже ОбновитьДоступность()
	Если Не ЗначениеЗаполнено(Объект.НаправлениеБизнеса)  тогда  
		Предупреждение("Необходимо заполнить ""Направление бизнеса"". ");
		Отказ= Истина;
	КонецЕсли;	
	// Гущина T#7772305  2017.02.02  ---
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	мСтатус = Объект.Статус;
	ЗаполнитьСтатусНаСервере();
	ОбновитьВидимость();
	ОбновитьДоступность();
	ОбновитьОтборы();
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаКлиенте
Процедура УстановитьТолькоПросмотрВсемЭлементам(мТолькоПросмотр = Истина)

	Для каждого Элемент Из Элементы Цикл
		
		Если Элемент.Имя = "ДеревоЗадач" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") ИЛИ
			Элемент = Элементы.Статус ИЛИ
			Элемент = Элементы.ФормаКоманднаяПанель ИЛИ
			Элемент = Элементы.ИсторияСогласования Тогда
			Продолжить;
		КонецЕсли;	
		
		Попытка
			Элемент.ТолькоПросмотр = мТолькоПросмотр;
		Исключение
			//Элемент.Доступность    = НЕ мТолькоПросмотр;
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусНаСервере()
//ВСТАВКА Проектный учет 20171213 Родин  изменено
	Справочники.абс_ТЭО.ЗаполнитьСписокДоступныхСтатусов(Элементы.Статус.СписокВыбора, Объект.Ссылка,мРолиПользователя,мТекущийПользователь);
//ВСТАВКА Проектный учет 20171213 Родин  изменено
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимость()
	
	Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ПерейтиКПроекты.Видимость = Видимость;	
	Элементы.ПерейтиКЗаявкиНаПроект.Видимость = Видимость;	
	Элементы.ПерейтиКСогласование.Видимость = Видимость;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступность()
	
	УстановитьТолькоПросмотрВсемЭлементам(Ложь);
	Если мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.Согласован") 
		Или мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.Отказ") Тогда 
		УстановитьТолькоПросмотрВсемЭлементам();
	КонецЕсли;
	
	Если мСтатус <> ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.Подготовка") Тогда
		Элементы.ВидТЭО.ТолькоПросмотр = Истина;
		//Элементы.НаправлениеБизнеса.ТолькоПросмотр = Истина; // Гущина D2016-1227-3125  2017.01.19
	Иначе
		Элементы.ВидТЭО.ТолькоПросмотр = Ложь;
		//Элементы.НаправлениеБизнеса.ТолькоПросмотр = Ложь;   // Гущина D2016-1227-3125  2017.01.19
	КонецЕсли;
	
	// Гущина T#7772305  2017.02.02  +++   новое условие.   D2016-1227-3125  2017.01.19  пока не удаляю
	Если НЕ РольДоступна("ttk_ДобавлениеНовыхТЭО") тогда
		Элементы.НаправлениеБизнеса.ТолькоПросмотр = Истина; 
	Иначе
		Элементы.НаправлениеБизнеса.ТолькоПросмотр = Ложь; 
	КонецЕсли;
	// Гущина T#7772305  2017.02.02  ---
	
КонецПроцедуры

&НаСервере
Функция СтатусИзменен()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если Объект.Статус = Объект.Ссылка.Статус Тогда 
		Возврат Ложь;
	КонецЕсли; 
	Возврат Истина;
		
КонецФункции

&НаКлиенте
Процедура ОбновитьОтборы()
	 //ВСТАВКА Проектный учет 20171213 Родин    Допилен отбор

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеОтбора = Неопределено;
	Иначе
		ЗначениеОтбора = Объект.Ссылка;
	КонецЕсли;
	
	Проекты.Отбор.Элементы.Очистить();
	Отбор = Проекты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.видСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.правоеЗначение = ЗначениеОтбора;
	Отбор.использование = истина;
	Отбор.левоеЗначение = новый ПолеКомпоновкиДанных("абс_ТЭО");
	
	ЗаявкиНаПроект.Отбор.Элементы.Очистить();
	Отбор = ЗаявкиНаПроект.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.видСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.правоеЗначение = ЗначениеОтбора;
	Отбор.использование = истина;
	Отбор.левоеЗначение = новый ПолеКомпоновкиДанных("ТЭО");

	ИсторияСогласования.Отбор.Элементы.Очистить();
	Отбор = ИсторияСогласования.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.видСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.правоеЗначение = ЗначениеОтбора;
	Отбор.использование = истина;
	Отбор.левоеЗначение = новый ПолеКомпоновкиДанных("ТЭО");	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Статус = Перечисления.абс_СтатусСогласованияТЭО.Подготовка;
		Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаТЭО(Команда)
	
	Если мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.Согласован") 
		Или мСтатус = ПредопределенноеЗначение("Перечисление.абс_СтатусСогласованияТЭО.Отказ") Тогда 
		Возврат;
	КонецЕсли;	
	
	ПериодПланирования = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	ДП = Новый ДиалогРедактированияСтандартногоПериода();
	ДП.Период = ПериодПланирования;
	Если ДП.Редактировать() Тогда 		
		Объект.ДатаНачала = ДП.Период.ДатаНачала;
		Объект.ДатаОкончания = ДП.Период.ДатаОкончания;
		ПриИзмененииСроковПланирования();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСроковПланирования()
	
	ЗаполнитьПериоды(Объект.ПлановыеПоказатели);

КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьПериоды(ТЧ)
		
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	ТЧ.Сортировать("Период");
	
	КонецПериода 	= НачалоМесяца(Объект.ДатаОкончания);
	Период 	= НачалоМесяца(Объект.ДатаНачала);
	
	Индекс = 0;
	КоличествоСтрок    = ТЧ.Количество();
	
	Пока Индекс < КоличествоСтрок ИЛИ Период <= КонецПериода  Цикл
		
		Если Индекс = КоличествоСтрок ИЛИ ТЧ[Индекс].Период > Период Тогда
			НоваяСтрока = ТЧ.Вставить(Индекс);
			НоваяСтрока.Период = Период;
			КоличествоСтрок = КоличествоСтрок + 1;
			Период = ДобавитьМесяц(Период, 1);
			Индекс = Индекс + 1;
		ИначеЕсли ТЧ[Индекс].Период < Период ИЛИ ТЧ[Индекс].Период > КонецПериода Тогда
			ТЧ.Удалить(Индекс);
			КоличествоСтрок = КоличествоСтрок - 1;
		Иначе
			Период = ДобавитьМесяц(Период, 1);
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПланированияПриИзменении(Элемент)
	ПриИзмененииСроковПланирования();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастниковСогласованияПоКомиссии(Команда)
	ЗаполнитьУчастниковСогласования();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастниковСогласования()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КомиссияТМЦЧленыКомиссии.ЧленКомиссии КАК ОтветственноеЛицо,
	                      |	ЕСТЬNULL(МАКСИМУМ(СотрудникиОрганизаций.ТекущееПодразделениеОрганизации), ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)) КАК Подразделение
	                      |ИЗ
	                      |	Справочник.КомиссияТМЦ.ЧленыКомиссии КАК КомиссияТМЦЧленыКомиссии
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	                      |		ПО КомиссияТМЦЧленыКомиссии.ЧленКомиссии = СотрудникиОрганизаций.Физлицо
	                      |			И (СотрудникиОрганизаций.абс_СтатусСотрудника = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыСотрудников.Работает))
	                      |ГДЕ
	                      |	КомиссияТМЦЧленыКомиссии.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	КомиссияТМЦЧленыКомиссии.ЧленКомиссии");
	Запрос.УстановитьПараметр("Ссылка", Объект.Комиссия);
	Объект.ПереченьУчастниковСогласованияТЭО.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура АктуализацияПриИзменении(Элемент)
	ЗаполнитьСтатусНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
КонецПроцедуры

//абс Изменение 17.03.14 Рассылка ТЭО Родин

Процедура ОбойтиДерево(Строки,СтрокаРодитель,ПисьмоОснование)
	Для каждого Строка из Строки Цикл
		Если Строка.ЭлектронноеПисьмо = ПисьмоОснование Тогда
			СтрокаРодитель = Строка;
		КонецЕсли;
		
		ОбойтиДерево(Строка.Строки,СтрокаРодитель,ПисьмоОснование);
	КонецЦикла; 
КонецПроцедуры

Процедура ДобавитьСтрокуДерева(Письмо,ПисьмоОснование,Дерево,ПоказыватьВсеПисьма)
	
	ПользовательВладелецПисьма = Ложь;
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Если Письмо.Автор = мТекущийПользователь ИЛИ Письмо.ПолучателиСообщений.НайтиСтроки(Новый Структура("Пользователь",мТекущийПользователь)).Количество() > 0 Тогда
		ПользовательВладелецПисьма = Истина;
	КонецЕсли;
	
	Если ПоказыватьВсеПисьма  ИЛИ  (Не ПоказыватьВсеПисьма и ПользовательВладелецПисьма = Истина) Тогда
		СтрокаРодитель = Неопределено;
		Если ЗначениеЗаполнено(ПисьмоОснование) Тогда
			ОбойтиДерево(Дерево.Строки,СтрокаРодитель,ПисьмоОснование);	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаРодитель) Тогда
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		Иначе
			НоваяСтрока = Дерево.Строки.Добавить();
		КонецЕсли;
		
		НоваяСтрока.ЭлектронноеПисьмо = Письмо;
		//Если Не НоваяСтрока.ЭлектронноеПисьмо.Ответ Тогда
		//	НоваяСтрока.ИндексКартинки    = 1;
		//Иначе
		//	НоваяСтрока.ИндексКартинки    = 2;
		//КонецЕсли;
		
		НоваяСтрока.Дата             		   = НоваяСтрока.ЭлектронноеПисьмо.Дата;
		НоваяСтрока.Отправитель      	 	   = НоваяСтрока.ЭлектронноеПисьмо.Автор;
		//НоваяСтрока.Получатель      	  	   = НоваяСтрока.ЭлектронноеПисьмо.КомуПредставление;
		НоваяСтрока.Тема            	 	   = НоваяСтрока.ЭлектронноеПисьмо.Тема;
		//НоваяСтрока.ДатаОтправки     		   = НоваяСтрока.ЭлектронноеПисьмо.ДатаОтправления;
		//
		//СтруктураОтбора = Новый Структура("Объект,абс_НеРассмотрено",мТекущийПользователь,Истина);
		//
		//СтрокиКомуТЧ = НоваяСтрока.ЭлектронноеПисьмо.КомуТЧ.НайтиСтроки(СтруктураОтбора);
		//СтрокиКопииТЧ = НоваяСтрока.ЭлектронноеПисьмо.КопииТЧ.НайтиСтроки(СтруктураОтбора);
		//СтрокиСкрытыеКопииТЧ = НоваяСтрока.ЭлектронноеПисьмо.СкрытыеКопииТЧ.НайтиСтроки(СтруктураОтбора);
		//
		//Если СтрокиКомуТЧ.Количество() > 0 ИЛИ СтрокиКопииТЧ.Количество() > 0 ИЛИ СтрокиСкрытыеКопииТЧ.Количество() > 0 Тогда
		//	НоваяСтрока.НеРассмотрено     		   = Истина;
		//Иначе
		//	НоваяСтрока.НеРассмотрено     		   = Ложь;
		//КонецЕсли;
		//
		НоваяСтрока.Статус                     = НоваяСтрока.ЭлектронноеПисьмо.Статус;
		НоваяСтрока.ПользовательВладелецПисьма = ПользовательВладелецПисьма;	
		
		//Если Объект.ПолучателиСообщений.НайтиСтроки(Новый Структура("Пользователь",мТекущийПользователь)).Количество() > 0  Тогда
		//	НоваяСтрока.ПользовательПолучательПисьма = Истина;	
		//КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗадачСервер(ПоказыватьВсеПисьма)
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗадач");
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	абс_ЗадачаТЭО.Ссылка КАК Задача,
		|	абс_ЗадачаТЭО.ЗадачаОснование
		|ИЗ
		|	Документ.абс_ЗадачаТЭО КАК абс_ЗадачаТЭО
		|ГДЕ
		|	абс_ЗадачаТЭО.ТЭО = &ТЭО";

	Запрос.УстановитьПараметр("ТЭО", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДобавитьСтрокуДерева(ВыборкаДетальныеЗаписи.Задача,ВыборкаДетальныеЗаписи.ЗадачаОснование,Дерево,ПоказыватьВсеПисьма);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗадач");	

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоЗадач(Строки)
	
	Для Каждого Строка Из Строки Цикл    
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоЗадач.Развернуть(ИдентификаторСтроки);
		РазвернутьДеревоЗадач(Строка.ПолучитьЭлементы());
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРассмотрено(Строки)
	//мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	//Для Каждого Строка Из Строки Цикл    
	//	
	//	
	//	СтруктураОтбора = Новый Структура("Объект,абс_НеРассмотрено",мТекущийПользователь,Истина);
	//	
	//	СтрокиКомуТЧ = Строка.ЭлектронноеПисьмо.КомуТЧ.НайтиСтроки(СтруктураОтбора);
	//	СтрокиКопииТЧ = Строка.ЭлектронноеПисьмо.КопииТЧ.НайтиСтроки(СтруктураОтбора);
	//	СтрокиСкрытыеКопииТЧ = Строка.ЭлектронноеПисьмо.СкрытыеКопииТЧ.НайтиСтроки(СтруктураОтбора);
	//	
	//	Если СтрокиКомуТЧ.Количество() > 0 ИЛИ СтрокиКопииТЧ.Количество() > 0 ИЛИ СтрокиСкрытыеКопииТЧ.Количество() > 0 Тогда
	//		Строка.НеРассмотрено = Истина;
	//	Иначе
	//		Строка.НеРассмотрено = Ложь;
	//	КонецЕсли;
	//	
	//	ОбновитьРассмотрено(Строка.ПолучитьЭлементы());
	//КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоЗадач(Команда)
	ОбновитьДеревоЗадачСервер(ПоказыватьВсеПисьма);
	
	РазвернутьДеревоЗадач(ДеревоЗадач.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	
	ОткрытьФорму("Документ.абс_ЗадачаТЭО.Форма.ФормаДокумента",Новый Структура("ТЭО",Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если  ТекущиеДанные <> Неопределено Тогда

		ОткрытьФорму("Документ.абс_ЗадачаТЭО.Форма.ФормаДокумента",Новый Структура("ТЭО,Основание",Объект.Ссылка,ТекущиеДанные.ЭлектронноеПисьмо));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтметитьДокумент(Док,НеРассмотрено)
	ДокОбъект = Док.ПолучитьОбъект(); 
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	СтруктураОтбора = Новый Структура("Объект",мТекущийПользователь);
	СтрокиКомуТЧ         = ДокОбъект.КомуТЧ.НайтиСтроки(СтруктураОтбора);
	СтрокиКопииТЧ        = ДокОбъект.КопииТЧ.НайтиСтроки(СтруктураОтбора);
	СтрокиСкрытыеКопииТЧ = ДокОбъект.СкрытыеКопииТЧ.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиКомуТЧ.Количество() > 0 Тогда
		ДокОбъект.КомуТЧ[0].абс_НеРассмотрено     	   = Не ДокОбъект.КомуТЧ[0].абс_НеРассмотрено;
		НеРассмотрено = ДокОбъект.КомуТЧ[0].абс_НеРассмотрено;
	КонецЕсли;
	
	Если СтрокиКопииТЧ.Количество() > 0  Тогда
		ДокОбъект.КопииТЧ[0].абс_НеРассмотрено     	   = Не ДокОбъект.КомуТЧ[0].абс_НеРассмотрено;
		НеРассмотрено = ДокОбъект.КомуТЧ[0].абс_НеРассмотрено;
	КонецЕсли;
	
	Если СтрокиСкрытыеКопииТЧ.Количество() > 0 Тогда
		ДокОбъект.СкрытыеКопииТЧ[0].абс_НеРассмотрено   = Не ДокОбъект.КомуТЧ[0].абс_НеРассмотрено;
		НеРассмотрено = ДокОбъект.КомуТЧ[0].абс_НеРассмотрено;
	КонецЕсли;
	
	ДокОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКакПрочитанноеНепрочитанное(Команда)
	Отказ = Ложь;
	НеРассмотрено = Ложь;
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если  ТекущиеДанные <> Неопределено Тогда
		Док = ТекущиеДанные.ЭлектронноеПисьмо;
		ОтметитьДокумент(Док,НеРассмотрено);
		
		ТекущиеДанные.НеРассмотрено = НеРассмотрено;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Док = ТекущиеДанные.ЭлектронноеПисьмо.ПолучитьФорму(,ЭтаФорма,КлючУникальности);
		Док.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписанДокументЗадачаТЭО" Тогда	
		ОбновитьДеревоЗадачСервер(ПоказыватьВсеПисьма);
		
		РазвернутьДеревоЗадач(ДеревоЗадач.ПолучитьЭлементы());
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ГруппаЗадачи" Тогда
		ОбновитьДеревоЗадачСервер(ПоказыватьВсеПисьма);
		
		РазвернутьДеревоЗадач(ДеревоЗадач.ПолучитьЭлементы());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СменитьСпособОтображенияПисем(Команда)
	ПоказыватьВсеПисьма = Не ПоказыватьВсеПисьма;
	
	Если ПоказыватьВсеПисьма Тогда
		Элементы.ДеревоЗадач.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоЗадачСменитьСпособОтображенияПисем.Заголовок	 = "Показать свои задачи"
	Иначе
		Элементы.ДеревоЗадач.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоЗадачСменитьСпособОтображенияПисем.Заголовок	 = "Показать все задачи";
	КонецЕсли;	
	
	ОбновитьДеревоЗадачСервер(ПоказыватьВсеПисьма);
	РазвернутьДеревоЗадач(ДеревоЗадач.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	//ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	//Если  ТекущиеДанные <> Неопределено Тогда
	//	Если ТекущиеДанные.ЭлектронноеПисьмо.ОтправительОбъект =  глЗначениеПеременной("глТекущийПользователь") Тогда
	//		Элементы.ДеревоЗадач.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоЗадачОтветить.Доступность = Ложь;	
	//		Элементы.ДеревоЗадач.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоЗадачОтметитьКакПрочитанноеНепрочитанное.Доступность = Ложь;
	//	Иначе
	//		Элементы.ДеревоЗадач.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоЗадачОтветить.Доступность = Истина;
	//		Элементы.ДеревоЗадач.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоЗадачОтметитьКакПрочитанноеНепрочитанное.Доступность = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуПоШаблону(Команда)
    
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.Независимый);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Справочник.абс_ШаблоныЗадачТЭО.ФормаВыбора", ПараметрыФормыВыбора,ЭтаФорма );
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.абс_ШаблоныЗадачТЭО") Тогда
		ОткрытьФорму("Документ.абс_ЗадачаТЭО.Форма.ФормаДокумента",Новый Структура("ТЭО,Основание,ШаблонЗадачи",Объект.Ссылка,Неопределено,ВыбранноеЗначение));
	КонецЕсли;	
	
КонецПроцедуры

//абс Изменение 17.03.14 Рассылка ТЭО Родин

//АБС ВСТАВКА Навценя 10.07.2014

&НаКлиенте
Процедура ОсновнойИТР(Команда)
	
	ТекущиеДанные = Элементы.ИТР.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ОсновнойИТР = ТекущиеДанные.ИТР;
	
КонецПроцедуры

&НаКлиенте
Процедура ИТР_ИТРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИТР.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	 
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПолучитьРеквизитыИТР(ТекущиеДанные.ИТР));

КонецПроцедуры
	

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыИТР(ИТР)
		
	СтруктураРеквизитов = Новый Структура("Номер, ПланируемаяДатаОкончания, ФактическаяДатаВыдачи, Заказчик, Статус"); 
	
	Если НЕ ЗначениеЗаполнено(ИТР) Тогда 
		Возврат ИТР;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ИТР.Номер КАК НомерИТР,
	                      |	абс_ИТР.Статус,
	                      |	абс_ИТР.ПланируемаяДатаВыдачи КАК ПланируемаяДатаОкончания,
	                      |	абс_ИТР.ФактическаяДатаВыдачи
	                      |ИЗ
	                      |	Справочник.абс_ИТР КАК абс_ИТР");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов,  Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции
	


//АБС ВСТАВКА КОНЕЦ


//ВСТАВКА Проектный учет 201213 Родин
мТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
//ВСТАВКА Проектный учет 201213 Родин
