
Функция НайтиКонтрагентаВГО(СтруктураЭлемента, ГоловнойКонтрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ttk_КонтрагентыВГО.Ссылка
		|ИЗ
		|	Справочник.ttk_КонтрагентыВГО КАК ttk_КонтрагентыВГО
		|ГДЕ
		|	ttk_КонтрагентыВГО.ПометкаУдаления = ЛОЖЬ
		|	И ttk_КонтрагентыВГО.КодАСВГО = &КодАСВГО";
	Если Не ГоловнойКонтрагент Тогда
		Запрос.Текст = Запрос.Текст +
			" И ttk_КонтрагентыВГО.ИНН = &ИНН
			|	И ttk_КонтрагентыВГО.КПП = &КПП";		
		Запрос.УстановитьПараметр("ИНН", СтруктураЭлемента.ИННКонтрагента);
		Запрос.УстановитьПараметр("КПП", СтруктураЭлемента.КППКонтрагента);
		Запрос.УстановитьПараметр("КодАСВГО", СтруктураЭлемента.КодАСВГО);
	Иначе
		Запрос.УстановитьПараметр("КодАСВГО", СтруктураЭлемента.КодГоловногоКонтрагента);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить();
	Если Выборка.Пустой() Тогда
		Возврат Справочники.ttk_КонтрагентыВГО.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Выборка.Выгрузить();
	
	Возврат Результат[0].Ссылка;
	
КонецФункции

Процедура ОбновитьГоловныхКонтрагентовНаСервере(ЭлементСправочника) Экспорт
	
	Если ЭлементСправочника.КодАСВГО <> ЭлементСправочника.КодГоловногоКонтрагента Тогда
		НайденныйЭлементСправочника = НайтиКонтрагентаВГО(ЭлементСправочника, Ложь);
		Если НайденныйЭлементСправочника <> Справочники.ttk_КонтрагентыВГО.ПустаяСсылка() Тогда
			ГоловнойКонтрагент = НайтиКонтрагентаВГО(ЭлементСправочника, Истина);
			Если ГоловнойКонтрагент <> Справочники.ttk_КонтрагентыВГО.ПустаяСсылка() Тогда
				ТекущийЭлементСправочника = НайденныйЭлементСправочника.ПолучитьОбъект();
				ТекущийЭлементСправочника.ГоловнойКонтрагент = ГоловнойКонтрагент;
				ТекущийЭлементСправочника.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлементСправочникаНаСервере(ЭлементСправочника) Экспорт
	
	НайденныйЭлементСправочника = НайтиКонтрагентаВГО(ЭлементСправочника, Ложь);
	Если НайденныйЭлементСправочника = Справочники.ttk_КонтрагентыВГО.ПустаяСсылка() Тогда
		ТекущийЭлементСправочника = Справочники.ttk_КонтрагентыВГО.СоздатьЭлемент();
	Иначе 
		ТекущийЭлементСправочника = НайденныйЭлементСправочника.ПолучитьОбъект();
	КонецЕсли;
	
	ТекущийЭлементСправочника.КодАСВГО = ЭлементСправочника.КодАСВГО;
	ТекущийЭлементСправочника.Наименование = ЭлементСправочника.НаименованиеКонтрагента;
	ТекущийЭлементСправочника.НаименованиеПолное = ЭлементСправочника.НаименованиеКонтрагента;
	ТекущийЭлементСправочника.ИНН = ?((ЗначениеЗаполнено(ЭлементСправочника.ИННКонтрагента) И ЭлементСправочника.ИННКонтрагента <> "0"), ЭлементСправочника.ИННКонтрагента, "");
	ТекущийЭлементСправочника.КПП = ?((ЗначениеЗаполнено(ЭлементСправочника.КППКонтрагента) И ЭлементСправочника.КППКонтрагента <> "0"), ЭлементСправочника.КППКонтрагента, "");
	ТекущийЭлементСправочника.Статус = Перечисления.абсСтатусыКонтрагентов.Активный;
	ТекущийЭлементСправочника.ПричинаИзмененияСтатуса = "Автоматическая загрузка из файла [" + ЭлементСправочника.ФайлИмпорта + "]";
	//ТекущийЭлементСправочника.Комментарий = "Автоматическая загрузка из файла [" + ЭлементСправочника.ФайлИмпорта + "]";
	ТекущийЭлементСправочника.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	ТекущийЭлементСправочника.Записать();
	
КонецПроцедуры

Процедура ПрочитатьДанныеФайла(АдресХранилища, ИмяФайла, РасширениеФайла) Экспорт

	ИмпортируемыйФайл = Новый Файл(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла);
	Если ИмпортируемыйФайл.Существует() Тогда
		УдалитьФайлы(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла);
	КонецЕсли;
	
	ФайлИзХранилища = ПолучитьИзВременногоХранилища(Строка(АдресХранилища));
	ФайлИзХранилища.Записать(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла);
	
	ЧитаемыйФайл = Новый ТекстовыйДокумент;
	ЧитаемыйФайл.Прочитать(СокрЛП(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла), КодировкаТекста.UTF8);	
	
	Для н = 1 По ЧитаемыйФайл.КоличествоСтрок() Цикл
		Стр = ЧитаемыйФайл.ПолучитьСтроку(н);
		Стр = СтрЗаменить(Стр, """", "");
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, ";");		
		Если ЗначениеЗаполнено(СокрЛП(МассивПодстрок[0])) И СокрЛП(МассивПодстрок[0]) <> "0" Тогда
			ЭлементКонтрагента = Новый Структура;
			ЭлементКонтрагента.Вставить("КодАСВГО", СокрЛП(МассивПодстрок[0]));
			ЭлементКонтрагента.Вставить("НаименованиеКонтрагента", СокрЛП(МассивПодстрок[1]));
			ЭлементКонтрагента.Вставить("ИННКонтрагента", СокрЛП(Формат(Число(МассивПодстрок[8]), "ЧДЦ=; ЧГ=0")));
			ЭлементКонтрагента.Вставить("КППКонтрагента", СокрЛП(Формат(Число(МассивПодстрок[9]), "ЧДЦ=; ЧГ=0")));
			ЭлементКонтрагента.Вставить("КодГоловногоКонтрагента", СокрЛП(МассивПодстрок[17]));
			ЭлементКонтрагента.Вставить("ФайлИмпорта", СокрЛП(ИмяФайла + РасширениеФайла));
			Справочники.ttk_КонтрагентыВГО.СоздатьЭлементСправочникаНаСервере(ЭлементКонтрагента);
		Иначе
			Сообщить("Контрагент '" + СокрЛП(СокрЛП(МассивПодстрок[1])) + "' пропущен. Не полная информация в файле импорта [" + СокрЛП(ИмяФайла + РасширениеФайла) + "].");
		КонецЕсли;		
	КонецЦикла;	
	
	//Обновим головных контрагентов
	Для н = 1 По ЧитаемыйФайл.КоличествоСтрок() Цикл
		Стр = ЧитаемыйФайл.ПолучитьСтроку(н);
		Стр = СтрЗаменить(Стр, """", "");
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, ";");		
		Если ЗначениеЗаполнено(СокрЛП(МассивПодстрок[17])) И СокрЛП(МассивПодстрок[17]) <> "0" Тогда
			ЭлементКонтрагента = Новый Структура;
			ЭлементКонтрагента.Вставить("КодАСВГО", СокрЛП(МассивПодстрок[0]));
			ЭлементКонтрагента.Вставить("НаименованиеКонтрагента", СокрЛП(МассивПодстрок[1]));
			ЭлементКонтрагента.Вставить("ИННКонтрагента", СокрЛП(Формат(Число(МассивПодстрок[8]), "ЧДЦ=; ЧГ=0")));
			ЭлементКонтрагента.Вставить("КППКонтрагента", СокрЛП(Формат(Число(МассивПодстрок[9]), "ЧДЦ=; ЧГ=0")));
			ЭлементКонтрагента.Вставить("КодГоловногоКонтрагента", СокрЛП(МассивПодстрок[17]));
			ЭлементКонтрагента.Вставить("ФайлИмпорта", СокрЛП(ИмяФайла + РасширениеФайла));
			Справочники.ttk_КонтрагентыВГО.ОбновитьГоловныхКонтрагентовНаСервере(ЭлементКонтрагента);
		Иначе
			Сообщить("Контрагент '" + СокрЛП(СокрЛП(МассивПодстрок[1])) + "' пропущен. Не полная информация в файле импорта [" + СокрЛП(ИмяФайла + РасширениеФайла) + "].");
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПрочитатьДанныеФайлаExcel(АдресХранилища, ИмяФайла, РасширениеФайла) Экспорт

	//ИмпортируемыйФайл = Новый Файл(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла);
	//Если ИмпортируемыйФайл.Существует() Тогда
	//	УдалитьФайлы(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла);
	//КонецЕсли;
	//
	//ФайлИзХранилища = ПолучитьИзВременногоХранилища(Строка(АдресХранилища));
	//ФайлИзХранилища.Записать(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла);
	//
	//СтрокаСоединения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + СокрЛП(КаталогВременныхФайлов() + ИмяФайла + РасширениеФайла) + ";Extended Properties=""Excel 12.0 Xml;HDR=YES;IMEX=1"";";
	//Соединение = Новый COMОбъект("ADODB.Connection");
	//Соединение.ConnectionString = СтрокаСоединения;
	//Соединение.CursorLocation = 3;
	//Попытка        
	//    Соединение.Open();
	//Исключение        
	//	Сообщить(ОписаниеОшибки());
	//    Возврат;
	//КонецПопытки;
	//
	//ТекстЗапроса = "SELECT * FROM [Лист1$]";
	//
	//ТаблицаДанных = Новый COMОбъект("ADODB.Recordset");
	//ТаблицаДанных.Open(ТекстЗапроса, Соединение);
	//ТаблицаДанных.MoveFirst();
	//ТаблицаДанных.Move(5);	
	//Пока ТаблицаДанных.EOF = Ложь Цикл
	//	Если ЗначениеЗаполнено(СокрЛП(ТаблицаДанных.Fields(0).Value)) И СокрЛП(ТаблицаДанных.Fields(0).Value) <> "0" Тогда
	//		ЭлементКонтрагента = Новый Структура;
	//		ЭлементКонтрагента.Вставить("КодВАСВГО", СокрЛП(ТаблицаДанных.Fields(0).Value));
	//		ЭлементКонтрагента.Вставить("НаименованиеКонтрагента", СокрЛП(ТаблицаДанных.Fields(1).Value));
	//		ЭлементКонтрагента.Вставить("ИННКонтрагента", СокрЛП(ТаблицаДанных.Fields(8).Value));
	//		ЭлементКонтрагента.Вставить("КППКонтрагента", СокрЛП(ТаблицаДанных.Fields(9).Value));
	//		ЭлементКонтрагента.Вставить("КодГоловногоКонтрагента", СокрЛП(ТаблицаДанных.Fields(17).Value));
	//		ЭлементКонтрагента.Вставить("ФайлИмпорта", СокрЛП(ИмяФайла + РасширениеФайла));
	//		Справочники.ttk_КонтрагентыРЖД.СоздатьЭлементСправочникаНаСервере(ЭлементКонтрагента);
	//	Иначе
	//		Сообщить("Контрагент '" + СокрЛП(ТаблицаДанных.Fields(1).Value) + "' пропущен. Не полная информация в файле импорта [" + СокрЛП(ИмяФайла + РасширениеФайла) + "].");
	//	КонецЕсли;
	//	ТаблицаДанных.MoveNext();
	//КонецЦикла;
	//
	////Обновим головных контрагентов
	//ТаблицаДанных.MoveFirst();
	//ТаблицаДанных.Move(5);	
	//Пока ТаблицаДанных.EOF = Ложь Цикл
	//	Если ЗначениеЗаполнено(СокрЛП(ТаблицаДанных.Fields(17).Value)) И СокрЛП(ТаблицаДанных.Fields(17).Value) <> "0" Тогда
	//		ЭлементКонтрагента = Новый Структура;
	//		ЭлементКонтрагента.Вставить("КодВАСВГО", СокрЛП(ТаблицаДанных.Fields(0).Value));
	//		ЭлементКонтрагента.Вставить("НаименованиеКонтрагента", СокрЛП(ТаблицаДанных.Fields(1).Value));
	//		ЭлементКонтрагента.Вставить("ИННКонтрагента", СокрЛП(ТаблицаДанных.Fields(8).Value));
	//		ЭлементКонтрагента.Вставить("КППКонтрагента", СокрЛП(ТаблицаДанных.Fields(9).Value));
	//		ЭлементКонтрагента.Вставить("КодГоловногоКонтрагента", СокрЛП(ТаблицаДанных.Fields(17).Value));
	//		ЭлементКонтрагента.Вставить("ФайлИмпорта", СокрЛП(ИмяФайла + РасширениеФайла));
	//		Справочники.ttk_КонтрагентыРЖД.ОбновитьГоловныхКонтрагентовНаСервере(ЭлементКонтрагента);
	//	КонецЕсли;
	//	ТаблицаДанных.MoveNext();
	//КонецЦикла;
	
КонецПроцедуры
