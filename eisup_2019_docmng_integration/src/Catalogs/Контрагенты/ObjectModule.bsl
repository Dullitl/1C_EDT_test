Перем мОснование;

Перем мТекущийПользователь;
Перем мРолиПользователя;

Перем мЭтоНовый;                                                    

// Переменные для хранения персональных данных, считанных из ЕИСУП 
Перем мИспользоватьОбмен Экспорт;
Перем мДатаРождения Экспорт;
Перем мПол Экспорт;
Перем мСтраховойНомерПФР Экспорт;
Перем мСтруктураДокумента Экспорт;
Перем мОкато Экспорт;
Перем мНаборКонтактнойИнформации Экспорт;
Перем мМестоРождения Экспорт;

// Флаг передачи данных в ИСУЗК
Перем мДанныеПередали Экспорт;
Перем мЗаписьФизЛица Экспорт;
//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
Перем мЗамерВремениУжеЗапущенЧерезЗаявкуНаИзменение Экспорт;	
//\\АБС ВСТАВКА №38173 КОНЕЦ

// Функция подготавливает необходимые параметры и вызывает WEB-сервис передачи контрагента в ИСУЗК
Процедура ПередатьКонтрагентаВИСУЗК(СоздаватьФизЛицо = Истина, Отказ)
	
	Если Не мИспользоватьОбмен Тогда
		Возврат;
	//ИначеЕсли ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
	ИначеЕсли абс_ТипыКонтрагентов <> Справочники.абс_ТипыКонтрагентов.ФизическиеЛица Тогда
		Возврат;
	ИначеЕсли мДанныеПередали Тогда
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	СообщениеОбОшибке = "";
	
	// Подготовим данные для ВебСервиса
	
	Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
		МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(НаименованиеПолное);
	Иначе	
		МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(Наименование);
	КонецЕсли;	
	
	// Фамилия
	Фамилия = СокрЛП(МассивФИО[0]);
	Фамилия = ВРЕГ(Лев(Фамилия,1)) + НРЕГ(Сред(Фамилия,2));
	
	// Имя
	Имя = СокрЛП(МассивФИО[1]);
	Имя = ВРЕГ(Лев(Имя,1)) + НРЕГ(Сред(Имя,2));
	
	// Отчество
	Отчество = СокрЛП(МассивФИО[2]);
	Отчество = ВРЕГ(Лев(Отчество,1)) + НРЕГ(Сред(Отчество,2));
	
	СтруктураДляВебСервиса = Новый Структура;
	СтруктураДляВебСервиса.Вставить("Name", 			Наименование);
	СтруктураДляВебСервиса.Вставить("FullName", 		НаименованиеПолное);
	СтруктураДляВебСервиса.Вставить("IDContractor", 	Код);
	СтруктураДляВебСервиса.Вставить("IDPerson",   		абс_ФизЛицо.абс_КодИСУЗК);
	СтруктураДляВебСервиса.Вставить("FirstName", 		Имя);
	СтруктураДляВебСервиса.Вставить("MiddleName", 		Отчество); 
	СтруктураДляВебСервиса.Вставить("LastName", 		Фамилия);
	СтруктураДляВебСервиса.Вставить("BirthDay", 		мДатаРождения);
	СтруктураДляВебСервиса.Вставить("PFR", 				мСтраховойНомерПФР);
	СтруктураДляВебСервиса.Вставить("INN", 	            ИНН);
	СтруктураДляВебСервиса.Вставить("KPP", 	            КПП);
	СтруктураДляВебСервиса.Вставить("Buyer", 	        Покупатель);
	СтруктураДляВебСервиса.Вставить("Supplier", 	    Поставщик);
	СтруктураДляВебСервиса.Вставить("OKPO", 	        КодПоОКПО);
	СтруктураДляВебСервиса.Вставить("NonResident", 	    НеЯвляетсяРезидентом);
	СтруктураДляВебСервиса.Вставить("BirthPlace", 		мМестоРождения);
	СтруктураДляВебСервиса.Вставить("OKATO", 			мОКАТО);
	
	Если ЗначениеЗаполнено(абс_СтатусКонтрагента) Тогда
		ИндексПеречисления = Перечисления.абсСтатусыКонтрагентов.Индекс(абс_СтатусКонтрагента);
		ИмяПеречисления = Метаданные.Перечисления.абсСтатусыКонтрагентов.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
		СтруктураДляВебСервиса.Вставить("StatusName", 		ИмяПеречисления);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(мПол) Тогда
		ИндексПеречисления = Перечисления.ПолФизическихЛиц.Индекс(мПол);
		ИмяПеречисления = Метаданные.Перечисления.ПолФизическихЛиц.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
		СтруктураДляВебСервиса.Вставить("Gender", 		ИмяПеречисления);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(абс_ТипыКонтрагентов) Тогда
		СтруктураТипКонтрагентаДляВебСервиса = Новый Структура();
		СтруктураТипКонтрагентаДляВебСервиса.Вставить("Code",абс_ТипыКонтрагентов.Код); 
		Если абс_ТипыКонтрагентов.Предопределенный Тогда
			СтруктураТипКонтрагентаДляВебСервиса.Вставить("Type",Справочники.абс_ТипыКонтрагентов.ПолучитьИмяПредопределенного(абс_ТипыКонтрагентов));
		Иначе
			СтруктураТипКонтрагентаДляВебСервиса.Вставить("Type",абс_ТипыКонтрагентов.Наименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(абс_ТипыКонтрагентов.ЮрФизЛицо) Тогда
			ИндексПеречисления = Перечисления.ЮрФизЛицо.Индекс(абс_ТипыКонтрагентов.ЮрФизЛицо);
			ИмяПеречисления = Метаданные.Перечисления.ЮрФизЛицо.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
			СтруктураТипКонтрагентаДляВебСервиса.Вставить("PhysicalLegal", 	ИмяПеречисления);
		КонецЕсли;	
		СтруктураДляВебСервиса.Вставить("ContractorType",СтруктураТипКонтрагентаДляВебСервиса);
	КонецЕсли;	
		
	// история статусов
	СписокСтатусов = Новый Массив;
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	абс_ИзменениеСтатусовКонтрагентов.Период,
	|	абс_ИзменениеСтатусовКонтрагентов.СтатусКонтрагента,
	|	абс_ИзменениеСтатусовКонтрагентов.Пользователь.Наименование КАК Пользователь,
	|	абс_ИзменениеСтатусовКонтрагентов.Комментарий,
	|	абс_ИзменениеСтатусовКонтрагентов.ВнутреннийНомер
	|ИЗ
	|	РегистрСведений.абс_ИзменениеСтатусовКонтрагентов КАК абс_ИзменениеСтатусовКонтрагентов
	|ГДЕ
	|	абс_ИзменениеСтатусовКонтрагентов.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтатусаДляВебСервиса = Новый Структура();
		СтруктураСтатусаДляВебСервиса.Вставить("Data", Выборка.Период);
		//АБС ВСТАВКА №55203 НАЧАЛО «5 марта 2015 г.», Пополитов
		//Ошибка, если Выборка.СтатусКонтрагента = пусто
		//ИндексПеречисления = Перечисления.абсСтатусыКонтрагентов.Индекс(Выборка.СтатусКонтрагента);
		Если ЗначениеЗаполнено(Выборка.СтатусКонтрагента) Тогда
			ИндексПеречисления = Перечисления.абсСтатусыКонтрагентов.Индекс(Выборка.СтатусКонтрагента);	
		Иначе 
			ИндексПеречисления = 0;
		КонецЕсли;	
		//\\АБС ВСТАВКА №55203 КОНЕЦ 		
		ИмяПеречисления = Метаданные.Перечисления.абсСтатусыКонтрагентов.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
		СтруктураСтатусаДляВебСервиса.Вставить("StatusName", ИмяПеречисления);
		СтруктураСтатусаДляВебСервиса.Вставить("User", Выборка.Пользователь);
		СтруктураСтатусаДляВебСервиса.Вставить("Komment", Выборка.Комментарий);
		СтруктураСтатусаДляВебСервиса.Вставить("Phone", Выборка.ВнутреннийНомер);
		СписокСтатусов.Добавить(СтруктураСтатусаДляВебСервиса);
	КонецЦикла;	
	СтруктураДляВебСервиса.Вставить("Statuses", СписокСтатусов);
	
	// контакты
	СписокКонтактов = Новый Массив;
	Для Каждого Контакт Из мНаборКонтактнойИнформации Цикл
		Если Не ЗначениеЗаполнено(Контакт.Представление) Тогда
			продолжить;	
		КонецЕсли;	
		СтруктураАдресРегистрацииДляВебСервиса = Новый Структура();
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("PostCode", Контакт.Поле1);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("Region", Контакт.Поле2);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("Area", Контакт.Поле3);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("City", Контакт.Поле4);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("Village", Контакт.Поле5);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("Street", Контакт.Поле6);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("House", Контакт.Поле7);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("Building", Контакт.Поле8);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("Apartment", Контакт.Поле9);
		СтруктураАдресРегистрацииДляВебСервиса.Вставить("ContactPresent", Контакт.Представление);
		Если ЗначениеЗаполнено(Контакт.ТипДома) Тогда
			ИндексПеречисления = Перечисления.ТипыДомов.Индекс(Контакт.ТипДома);
			ИмяПеречисления = Метаданные.Перечисления.ТипыДомов.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
			СтруктураАдресРегистрацииДляВебСервиса.Вставить("HouseType", ИмяПеречисления);
		КонецЕсли;
		Если ЗначениеЗаполнено(Контакт.ТипКорпуса) Тогда
			ИндексПеречисления = Перечисления.ТипыКорпусов.Индекс(Контакт.ТипКорпуса);
			ИмяПеречисления = Метаданные.Перечисления.ТипыКорпусов.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
			СтруктураАдресРегистрацииДляВебСервиса.Вставить("BuildingType", ИмяПеречисления);
		КонецЕсли;
		Если ЗначениеЗаполнено(Контакт.ТипКвартиры) Тогда
			ИндексПеречисления = Перечисления.ТипыКвартир.Индекс(Контакт.ТипКвартиры);
			ИмяПеречисления = Метаданные.Перечисления.ТипыКвартир.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
			СтруктураАдресРегистрацииДляВебСервиса.Вставить("ApartmentType", ИмяПеречисления);
		КонецЕсли;
		Если ЗначениеЗаполнено(Контакт.Тип) Тогда
			ИндексПеречисления = Перечисления.ТипыКонтактнойИнформации.Индекс(Контакт.Тип);
			ИмяПеречисления = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Получить(ИндексПеречисления).Имя;
			СтруктураАдресРегистрацииДляВебСервиса.Вставить("ContactType", ИмяПеречисления);
		КонецЕсли;
		Если ЗначениеЗаполнено(Контакт.Вид) Тогда
			Если ТипЗнч(Контакт.Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Если Контакт.Вид.Предопределенный Тогда
					СтруктураАдресРегистрацииДляВебСервиса.Вставить("ContactView", Справочники.ВидыКонтактнойИнформации.ПолучитьИмяПредопределенного(Контакт.Вид));
				Иначе
					СтруктураАдресРегистрацииДляВебСервиса.Вставить("ContactView", Контакт.Вид.Наименование);	
				КонецЕсли;
			Иначе
				СтруктураАдресРегистрацииДляВебСервиса.Вставить("ContactView", Контакт.Вид);
			КонецЕсли;
		КонецЕсли;	
		СписокКонтактов.Добавить(СтруктураАдресРегистрацииДляВебСервиса);
	КонецЦикла;
	СтруктураДляВебСервиса.Вставить("Contacts", СписокКонтактов);
	
	// документ
	Если ЗначениеЗаполнено(мСтруктураДокумента.Type) 
	   И ТипЗнч(мСтруктураДокумента.Type) = Тип("СправочникСсылка.ДокументыУдостоверяющиеЛичность") Тогда
		Если мСтруктураДокумента.Type.Предопределенный Тогда
			мСтруктураДокумента.Type = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьИмяПредопределенного(мСтруктураДокумента.Type);
		Иначе	 
			мСтруктураДокумента.Type = мСтруктураДокумента.Type.Наименование;
		КонецЕсли;	 
	КонецЕсли;
	СтруктураДляВебСервиса.Вставить("Document", мСтруктураДокумента);
		
	// собственно вызов web-сервиса
	Результат = абс_WebServiceСервер.ИнициализацияWebServiceCreateUpdateContractors(СтруктураДляВебСервиса, СоздаватьФизЛицо, СообщениеОбОшибке);
	
	Если Результат.Result Тогда
		ДанныеФизЛица = Результат.PersonDataIndividual;
		Если СоздаватьФизЛицо 
		   И Не ЗначениеЗаполнено(абс_ФизЛицо) Тогда
			ИскомыйФизик = Справочники.ФизическиеЛица.НайтиПоРеквизиту("абс_КодИСУЗК", ДанныеФизЛица.IDPerson);
			Если НЕ ЗначениеЗаполнено(ИскомыйФизик) Тогда
				// создаем физика с кодом, приехавшим из ИСУЗК
				НовоеФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				НовоеФизЛицо.УстановитьНовыйКод();
				НовоеФизЛицо.Наименование = ДанныеФизЛица.Name;
				НовоеФизЛицо.абс_КодИСУЗК = ДанныеФизЛица.IDPerson;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.Наименование = &Наименование
				|	И ФизическиеЛица.ЭтоГруппа";
				
				Запрос.УстановитьПараметр("Наименование", "Прочие");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НовоеФизЛицо.Родитель = Выборка.Ссылка;
				КонецЕсли;            
				
				НовоеФизЛицо.ОбменДанными.Загрузка = Истина;
				НовоеФизЛицо.Записать();
				ИскомыйФизик = НовоеФизЛицо.Ссылка;
				// добавим ФИО в регистр
				НоваяЗапись = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
				НоваяЗапись.Период = ?(ЗначениеЗаполнено(мДатаРождения), мДатаРождения, Дата(1980, 1, 1));
				НоваяЗапись.ФизЛицо = ИскомыйФизик;
				НоваяЗапись.Фамилия = Фамилия;
				НоваяЗапись.Имя = Имя;
				НоваяЗапись.Отчество = Отчество;
				НоваяЗапись.Записать();
			КонецЕсли;	
			// заполним ссылку у контрагента
			абс_ФизЛицо = ИскомыйФизик;
			мЗаписьФизЛица = Истина;
		КонецЕсли;	
	Иначе
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось передать физ. лицо в ИСУЗК " + Результат.Error, Отказ);
	КонецЕсли;	
	
	мДанныеПередали = Истина;
	
КонецПроцедуры	

// Обработчик события ПриКопировании
//
Процедура ПриКопировании(ОбъектКопирования)

	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		ЭтотОбъект.ОсновнойДоговорКонтрагента = Неопределено;
		ЭтотОбъект.ОсновнойБанковскийСчет     = Неопределено;
	КонецЕсли;
    //АБС Вставка 00688 начало
	абс_ОсновнойКонтрагент = "";
	//АБС Вставка 00688 конец
	
	// При копировании очищаем физ. лицо
	абс_ФизЛицо = "";
	
КонецПроцедуры

// Функция возвращает результат запроса по справочнику контрагентов с заданным головным контрагентом
//
// Параметры:
//  ГоловнойКонтрагент - заданный головной контрагент
//
// Возвращаемое значение:
//  Результат - результат работы запроса
// 
Функция ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(ГоловнойКонтрагент) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Организации") Тогда
		
		Наименование           = Основание.Наименование;
		ЮрФизЛицо              = Основание.ЮрФизЛицо;
		НаименованиеПолное     = Основание.НаименованиеПолное;
		ОсновнойБанковскийСчет = Основание.ОсновнойБанковскийСчет;
		ИНН                    = Основание.ИНН;
		КПП                    = Основание.КПП;
		КодПоОКПО              = Основание.КодПоОКПО;
		мОснование             = Основание;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ)
	
// +++ввв 09.09.2016 г.	
	мПроверкаВИФНС="";
// ---ввв 09.09.2016 г.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
	абс_НачатьЗамерПроизводительности();
	//\\АБС ВСТАВКА №38173 КОНЕЦ 	
	
	// у активного контрагента заполняем поле абс_ФизЛицр
	// все проверки уже прошли, просто пролетаем это событие
	Если мЗаписьФизЛица Тогда
		мЗаписьФизЛица = Ложь;
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА НАЧАЛО №17681 согласовано с Павловым С. и Скворцовым Д.
	Если Модифицированность()
		и не глЗначениеПеременной("абс_ЗапретИзмененияКонтрагентаБезИзмененияСтатусаВыключить")
		и абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный  
		и Ссылка.абс_СтатусКонтрагента  = Перечисления.абсСтатусыКонтрагентов.Активный Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено редактирование контрагента без изменения статуса.",Отказ);
		//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
		абс_ЗавершитьЗамерПроизводительности();	
		//\\АБС ВСТАВКА №38173 КОНЕЦ
		Возврат;  
	КонецЕсли;
	//\\АБС ВСТАВКА КОНЕЦ №17681 согласовано с Павловым С. и Скворцовым Д.
		
	// АБС ВСТАВКА 3512
	// При вводе копированием не копируется реквизиты типа контрагента
	// они заполняются только при изменении типа контрагента в форме
	// перезаполняем их при записи.
	Если НЕ ЭтоГруппа Тогда
		НеЯвляетсяРезидентом 	= абс_ТипыКонтрагентов.НеЯвляетсяРезидентом;
		ЮрФизЛицо				= абс_ТипыКонтрагентов.ЮрФизЛицо; 		
		// АБС ВСТАВКА Фролов 13096
		Если НеЯвляетсяРезидентом И абс_Страна = Справочники.КлассификаторСтранМира.Россия Тогда				
			абс_Страна = Справочники.КлассификаторСтранМира.ПустаяСсылка(); 					
		ИначеЕсли НЕ НеЯвляетсяРезидентом И НЕ абс_Страна = Справочники.КлассификаторСтранМира.Россия Тогда  			
			//абс_Страна = Справочники.КлассификаторСтранМира.Россия;   			
		КонецЕсли;
		// АБС ВСТАВКА Фролов 13096 КОНЕЦ 		
	КонецЕсли;
	// АБС ВСТАВКА 3512	
	
	// Если была проверка ДЭБ, то зарегестрируем дату проверки.
	Если Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ И
		(НЕ абс_СтатусКонтрагента = Ссылка.абс_СтатусКонтрагента) Тогда
		абс_ДатаПроверкиДЭБ = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;	
		
	// Проверим основной вид деятельности контрагента
	Если ЗначениеЗаполнено(ОсновнойВидДеятельности) И ВидыДеятельности.Найти(ОсновнойВидДеятельности, "ВидДеятельности") = Неопределено Тогда
		ОсновнойВидДеятельности = Справочники.ВидыДеятельностиКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	// установим головного контрагента если он не заполнен
	Если НЕ ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
			ГоловнойКонтрагент = Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// АБС добавлено 20101126 Начало
	Если Не ЗначениеЗаполнено(Ссылка) И НЕ ЭтоГруппа Тогда
		абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка;
		Возврат;
	КонецЕсли;
	// АБС добавлено 20101126 Конец
	
	// АБС добавлено 2395 Начало
	Если не (абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка
				или Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка)
		и Родитель <> Ссылка.Родитель Тогда
		//АБС+ Тупиков 21.10.2013 добавлена проверка на полные права
		Если НЕ РольДоступна("абс_СотрудникГруппыНСИ") ИЛИ НЕ РольДоступна("ПолныеПрава") 
			// {{ТТК Сладков А. Заявка №7789534 20.03.2017 начало
			ИЛИ абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь")).Найти(Справочники.РолиИсполнителей.ПроверкаКонтрагентаДФМ)=Неопределено
			// }}ТТК Сладков А. Заявка №7789534 20.03.2017 окончание		
			Тогда   
			Сообщить("У вас нет прав на перемещение элементов объекта НСИ !", СтатусСообщения.Внимание);
			//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
			абс_ЗавершитьЗамерПроизводительности();	
			//\\АБС ВСТАВКА №38173 КОНЕЦ   			
			Отказ=истина;
		КонецЕсли;
	КонецЕсли;
	// АБС добавлено 2395 Конец
	
	// АБС ВСТАВКА Фролов 3166
	Если Не ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(абс_НаименованиеПП) Тогда
			абс_НаименованиеПП = Наименование;		
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА Фролов 3166 КОНЕЦ
	
	//АБС Вставка 00459 Бабшанов начало
	Если НЕ ЭтоГруппа Тогда
		абс_ПрошлыйСтатус = Ссылка.абс_СтатусКонтрагента;
	КонецЕсли;
	//\\АБС Вставка 00459 Бабшанов Конец
	
	//АБС ВСТАВКА 13096/12511 НАЧАЛО
	Если Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка 
		И НЕ абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка 
		И НЕ абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Архив
		И глЗначениеПеременной("абс_ПроверкаСтраныВКонтрагенте") Тогда
		
		//+++ проверка на пользователя добавлена по просьбе Павлова С.А. 11.06.2013
		
		//[16:25:37] Виктор: [10:55] Евгений Пополитов: 
        //<<< т.е. контрагенты будут переходить в следующий статус без заполненого поля "Страна", так?нужна заявка для этого изменения
		//[16:26:10] sa2002as: я никаких заявок делать не стану - есть требование вернуть как было ранее
		//[16:26:21] sa2002as: то что было сделано - самоуправство
		//[16:27:01] Виктор: контрагентов не обновляли, это изменение было очень давно сделано.
		//[16:27:21] sa2002as: вот я и спрашиваю какого хрена сделали в нарушение требований
		//[16:29:11] Виктор: по этому реквизиту у Гавриловой формируются некоторые отчеты. Если из Лотуса пойдут контрагенты без заполненного поля нужно будет объяснять Гавриловой почему так происходит. Нужна заявка.
		//[16:29:52] sa2002as: мне все равно что и где у гавриловой не формируется - чтобы формировалось ей надо сначала нормально себя вести - ее проблемы никого не касаются
		Если СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) <> "Lotus" Тогда
			Если НЕ ЗначениеЗаполнено(абс_Страна) и абс_ТипыКонтрагентов.НеЯвляетсяРезидентом Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизит ""Страна"" не заполнен.", Отказ);
			КонецЕсли;
		КонецЕсли; 
		//----
				
	КонецЕсли;	
	//\\АБС ВСТАВКА 13096/12511 КОНЕЦ
	
	// АБС ВСТАВКА Фролов 20120731
	// Овчинников: Обрезаем проблемы из ИНН/КПП
	Если не ЭтоГруппа Тогда
		ИНН = СокрЛП(ИНН);
		КПП = СокрЛП(КПП);
	КонецЕсли;
	// АБС ВСТАВКА Фролов 20120731 КОНЕЦ

	
	//Sladkov 12 12 2016 заявка 7760721 ++ 	
	Если (ЗначениеЗаполнено(Ссылка) И  ЭтоГруппа ) Тогда 
		// {{ТТК Сладков А. Заявка №7789534  17.03.2017 начало
		Если НЕ (РольДоступна("ПолныеПрава") ИЛИ  абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь")).Найти(Справочники.РолиИсполнителей.ПроверкаКонтрагентаДФМ)<>Неопределено ) Тогда
		// }}ТТК Сладков А. Заявка №7789534  17.03.2017 окончание
			Сообщить("Редактирование групп разрешено только пользователям с полными правами или пользователям с ролью Проверка Контрагента ДФМ!");
			Отказ=Истина;	
		КонецЕсли;
	
	КонецЕсли;
	//Sladkov 12 12 2016 заявка 7760721 --
	
	//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
	Если Отказ Тогда
		абс_ЗавершитьЗамерПроизводительности();
		Возврат;
	КонецЕсли;	
	//\\АБС ВСТАВКА №38173 КОНЕЦ	
// +++ввв 08.09.2016 г.
//	Если НЕ ЭтотОбъект.ЭтоГруппа И НЕ ЭтотОбъект.ЭтоНовый() Тогда
//		Если ЭтотОбъект.НеЯвляетсяРезидентом Тогда
//// Проверка нерезидента на другой статус - с Согласование ДЭБ на Налоговый контроль
//		ИначеЕсли Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка И
//				  ЭтотОбъект.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
//// Проверка производится только при смене статуса с Подготовка на Согласование ДЭБ
//			Если СтрДлина(ЭтотОбъект.ИНН)=10 Тогда
//// Проверка резидента Юр.лица
//				Если СтрДлина(ЭтотОбъект.КПП)=9 Тогда
//// Переход на проверку в ИФНС
//				Иначе
//// Ошибка в КПП
//					Отказ=Истина;
//					ttk_ОбщегоНазначения.СообщитьОбОшибке("Длина КПП юридического лица не равна 9!",Отказ);
//					ЭтотОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Подготовка;
//					абс_ЗавершитьЗамерПроизводительности();	
//					Возврат;
//				КонецЕсли;
//			ИначеЕсли СтрДлина(ЭтотОбъект.ИНН)=12 Тогда
//// Проверка резидента Физ.лица или Индивидуального предпринимателя
//				Если ЭтотОбъект.КПП="0" ИЛИ СтрДлина(ЭтотОбъект.КПП)=0 Тогда
//					ЭтотОбъект.КПП="";
//// Переход на проверку в ИФНС
//				Иначе
//// Ошибка в КПП
//					Отказ=Истина;
//					ttk_ОбщегоНазначения.СообщитьОбОшибке("КПП у Индивидуального предпринимателя или физ.лица не должно быть заполнено!",Отказ);
//					абс_ЗавершитьЗамерПроизводительности();	
//					ЭтотОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Подготовка;
//					Возврат;
//				КонецЕсли;
//			Иначе
//// Ошибка в ИНН
//				Отказ=Истина;
//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Длина ИНН контрагента не равна 10 или 12!",Отказ);
//				абс_ЗавершитьЗамерПроизводительности();	
//				ЭтотОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Подготовка;
//				Возврат;
//			КонецЕсли;
//// Проверка на сайте ИФНС
//			ЭтотОбъект.ttk_ПроверенВИФНС=0;
//			йСтатусОтвета=Перечисления.ttk_СостоянияСуществованияКонтрагента.ПустаяСсылка();	
//			йСтрОшибки=ОбщегоНазначенияСервер.ПроверкаКонтрагентаПоИННиКППнаИФНС(ЭтотОбъект.ИНН,ЭтотОбъект.КПП,
//																				 йСтатусОтвета);
//			мПроверкаВИФНС=""+йСтатусОтвета;
//			Если ЗначениеЗаполнено(йСтрОшибки) Тогда
//				Отказ=Истина;
//				ttk_ОбщегоНазначения.СообщитьОбОшибке(йСтрОшибки,Отказ);
//				абс_ЗавершитьЗамерПроизводительности();	
//				ЭтотОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Подготовка;
//				Возврат;
//			КонецЕсли;
//			Если йСтатусОтвета = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
//				ЭтотОбъект.ttk_ПроверенВИФНС=1;
//			Иначе
//				ЭтотОбъект.ttk_ПроверенВИФНС=2;
//				Если НЕ ПустаяСтрока(ЭтотОбъект.КПП) Тогда
//					йСтатусОтветаСКПП=йСтатусОтвета;
//					йСтатусОтвета=Перечисления.ttk_СостоянияСуществованияКонтрагента.ПустаяСсылка();	
//					йСтрОшибки=ОбщегоНазначенияСервер.ПроверкаКонтрагентаПоИННиКППнаИФНС(ЭтотОбъект.ИНН,"",
//																						 йСтатусОтвета);
//					Если ЗначениеЗаполнено(йСтрОшибки) Тогда
//						мПроверкаВИФНС=""+йСтатусОтвета;
//						Отказ=Истина;
//						ttk_ОбщегоНазначения.СообщитьОбОшибке(йСтрОшибки,Отказ);
//						абс_ЗавершитьЗамерПроизводительности();	
//						ЭтотОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Подготовка;
//						Возврат;
//					КонецЕсли;
//					Если йСтатусОтветаСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП И
//						 йСтатусОтвета=Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
//						мПроверкаВИФНС="Контрагент зарегистрирован в базе ФНС, но указан неверный КПП";
//					ИначеЕсли йСтатусОтветаСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП И
//							  йСтатусОтвета=Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС Тогда
//						мПроверкаВИФНС="Контрагент зарегистрирован в базе ФНС, но не имеет статус действующего";
//					ИначеЕсли йСтатусОтветаСКПП=Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС И
//							  йСтатусОтвета=Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС Тогда
//						мПроверкаВИФНС="Контрагент зарегистрирован в базе ФНС, но указан неверный КПП";
//					Иначе
//						мПроверкаВИФНС=""+йСтатусОтвета;
//					КонецЕсли;
//				КонецЕсли;
//				Отказ=Истина;
//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Введенные данные не соответствуют сведениям на сайте nalog.ru и должны быть скорректированы."+
//								Символы.ВК+Символы.ПС+"Статус ответа ИФНС: ["+Врег(мПроверкаВИФНС)+"].",Отказ);
//				абс_ЗавершитьЗамерПроизводительности();	
//				ЭтотОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.Подготовка;
//				Возврат;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
// ---ввв 08.09.2016 г.



	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) И ГоловнойКонтрагент <> Ссылка Тогда
		
		Если ЗначениеЗаполнено(ГоловнойКонтрагент.ГоловнойКонтрагент) И ГоловнойКонтрагент.ГоловнойКонтрагент <> ГоловнойКонтрагент Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Контрагент "+СокрЛП(ГоловнойКонтрагент)+" не может быть выбран головным, 
			|так как для него уже был назначен головной контрагент "+СокрЛП(ГоловнойКонтрагент.ГоловнойКонтрагент)+"!");
			Отказ = Истина;
			//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
			абс_ЗавершитьЗамерПроизводительности();	
			//\\АБС ВСТАВКА №38173 КОНЕЦ			
			Возврат;
		Иначе
			
			// надо проверить, что если указываем головного контрагента, то этот элемент уже не был установлен
			// в качестве головного у другого контрагента.
			ВыборкаПоГоловномуКонтрагенту = ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(Ссылка).Выбрать();
			Если ВыборкаПоГоловномуКонтрагенту.Количество() <> 0 Тогда
				
				СообщениеОНевозможностиЗаписи = "Контрагент "+СокрЛП(ЭтотОбъект)+" не может иметь головного контрагента!
				|Этот контрагент уже установлен головным для: ";
				Пока ВыборкаПоГоловномуКонтрагенту.Следующий() Цикл
					СообщениеОНевозможностиЗаписи = СообщениеОНевозможностиЗаписи + Символы.ПС + СокрЛП(ВыборкаПоГоловномуКонтрагенту.Контрагент);
				КонецЦикла;
				
				ttk_ОбщегоНазначения.СообщитьОбОшибке(СообщениеОНевозможностиЗаписи);
				Отказ = Истина;
				//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
				абс_ЗавершитьЗамерПроизводительности();	
				//\\АБС ВСТАВКА №38173 КОНЕЦ
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мОснование) Тогда
		НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Контрагент = Ссылка;
		ЗаписьРегистра.ВидСвязи   = Перечисления.ВидыСобственныхКонтрагентов.Организация;
		ЗаписьРегистра.Объект     = мОснование;
		НаборЗаписей.Записать(Ложь);
		мОснование = "";
	КонецЕсли;
	
	Попытка
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусКонтрагентаПоРегистру(Ссылка); 		
		Если НЕ абс_СтатусКонтрагента = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда   						
			
			
			ЗаписатьНовыйСтатус(абс_СтатусКонтрагента, абс_ПричинаИзмененияСтатуса);		
		КонецЕсли;		
		
		
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		Если  НЕ СогласованиеБезБП Тогда
			// Запустим БП если он еще не запущен
			Если абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка
//// +++ввв 29.09.2016 г.
				 //ИЛИ абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль
				 Или абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеПД
//// ---ввв 29.09.2016 г.
				 Тогда
				БПСогласование = НайтиБПСогласование(); 			
				
				Если Не ЗначениеЗаполнено(БПСогласование) Тогда
					абс_БизнесПроцессы.ЗапуститьБПСогласованияКонтрагента(Ссылка);
				КонецЕсли;	
				
			ИначеЕсли абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда  			
				
				БПСогласование 		= НайтиБПСогласование();			
				БППереутверждение 	= НайтиБППереутверждение();
				Если НЕ ЗначениеЗаполнено(БППереутверждение) И НЕ ЗначениеЗаполнено(БПСогласование) Тогда
					абс_БизнесПроцессы.ЗапуститьБППереутвержденияКонтрагента(Ссылка);
				КонецЕсли;
				
			ИначеЕсли абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СменаРеквизитов Тогда   			
				БППереутверждение = НайтиБППереутверждение();  			
				
				Если Не ЗначениеЗаполнено(БППереутверждение) Тогда	
					абс_БизнесПроцессы.ЗапуститьБПСменыРеквизитовКонтрагента(Ссылка);
				КонецЕсли;
				
			ИначеЕсли абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда			
				БПЗавершение = НайтиБПЗавершениеОтношений();   			
				Если Не ЗначениеЗаполнено(БПЗавершение) Тогда				
					абс_БизнесПроцессы.ЗапуститьБПЗавершенияКонтрагента(Ссылка);  				
				КонецЕсли;
			КонецЕсли;
			
			// Попробуем закрыть задачу согласования
			ЗадачаСогласование = ПолучитьЗадачуПоКонтрагентуСогласование(); 		
			
			Если ЗначениеЗаполнено(ЗадачаСогласование) Тогда
				Если Не ЗадачаСогласование.Выполнена Тогда  
					
					ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();
					ЗадачаОбъект.ВыполнитьЗадачу();			
				КонецЕсли;			
			КонецЕсли;
			
			// Попробуем закрыть задачу переутверждения
			ЗадачаПереутверждение = ПолучитьЗадачуПоКонтрагентуПереутверждение();
			
			Если ЗначениеЗаполнено(ЗадачаПереутверждение) Тогда
				Если Не ЗадачаПереутверждение.Выполнена Тогда 
					
					ЗадачаОбъект = ЗадачаПереутверждение.ПолучитьОбъект();	
					ЗадачаОбъект.ВыполнитьЗадачу();  
					
				КонецЕсли;
			КонецЕсли;
			
			// Попробуем закрыть задачу завершения отношений
			ЗадачаЗавершение = ПолучитьЗадачуПоКонтрагентуЗавершение();
			Если ЗначениеЗаполнено(ЗадачаЗавершение) Тогда 			
				
				Если НЕ ЗадачаЗавершение.Выполнена Тогда        	
					ЗадачаОбъект = ЗадачаЗавершение.ПолучитьОбъект();	
					ЗадачаОбъект.ВыполнитьЗадачу();
				КонецЕсли;
			КонецЕсли;				

// +++ввв 30.09.2016 г.
			Если абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ И (НЕ абс_ТипыКонтрагентов = Справочники.абс_ТипыКонтрагентов.ФизическиеЛица) Тогда
				БППереутверждение 	= НайтиБППереутверждение();
				Если ЗначениеЗаполнено(БППереутверждение) Тогда
					_БП = БППереутверждение.ПолучитьОбъект();
					_БП.Завершен = Истина;
					_БП.Записать();
				КонецЕсли;
				БПСогласование 		= НайтиБПСогласование();			
				Если ЗначениеЗаполнено(БПСогласование) Тогда
					_БП = БПСогласование.ПолучитьОбъект();
					_БП.Завершен = Истина;
					_БП.Записать();
				КонецЕсли;
				БПЗавершение = НайтиБПЗавершениеОтношений();   			
				Если ЗначениеЗаполнено(БПЗавершение) Тогда
					_БП = БПЗавершение.ПолучитьОбъект();
					_БП.Завершен = Истина;
					_БП.Записать();
				КонецЕсли;
			КонецЕсли;
// ---ввв 30.09.2016 г.
				
		КонецЕсли;	
		// АБС Изменение Родин Отключение бизнес-процессов 110314
		
	Исключение
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи контрагента: " + ОписаниеОшибки() + ".", Отказ);
		//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
		абс_ЗавершитьЗамерПроизводительности(1);	
		//\\АБС ВСТАВКА №38173 КОНЕЦ
		Возврат;
		
	КонецПопытки;
	
	// АБС Сторожук
	Если Не Отказ и абс_ТипыКонтрагентов = Справочники.абс_ТипыКонтрагентов.ФизическиеЛица Тогда
		Если абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
			Результат = Ложь;
			Перезаписать = Ложь;
			Если мНаборКонтактнойИнформации = Неопределено Тогда
				СообщениеОбОшибке = "";
				Результат = абс_ПолучитьПерсональныеДанныеФизЛицаИзИСУЗК(СообщениеОбОшибке);
				Перезаписать = Истина;
			КонецЕсли;
			Если мНаборКонтактнойИнформации <> Неопределено Или Результат Тогда
				 ПередатьКонтрагентаВИСУЗК(Ложь, Отказ);
				 Если Перезаписать Тогда
					 Записать();
					 мДанныеПередали = Ложь;
				 КонецЕсли;
			КонецЕсли;
		ИначеЕсли абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
			Результат = Ложь;
			Перезаписать = Ложь;
			Если мНаборКонтактнойИнформации = Неопределено Тогда
				СообщениеОбОшибке = "";
				Результат = абс_ПолучитьПерсональныеДанныеФизЛицаИзИСУЗК(СообщениеОбОшибке);
				Перезаписать = Истина;
			КонецЕсли;
			Если мНаборКонтактнойИнформации <> Неопределено Или Результат Тогда
				 ПередатьКонтрагентаВИСУЗК(Истина, Отказ);
				 Если Перезаписать Тогда
					 Записать();
					 мДанныеПередали = Ложь;
				 КонецЕсли;
			КонецЕсли; 			
		КонецЕсли;	
	Конецесли;	
	// АБС Сторожук
	
	//АБС ВСТАВКА 33082  25.11.2013 11:27:46  Поставка
	абс_ВыгрузкаОсновныхБанковскихСчетовПриЗаписи(Отказ);
	//АБС ВСТАВКА 33082 КОНЕЦ 
	
	//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
	Если Отказ Тогда
		абс_ЗавершитьЗамерПроизводительности();
	КонецЕсли;	
	//\\АБС ВСТАВКА №38173 КОНЕЦ	
	
КонецПроцедуры

// АБС Добавлено 20101126  Начало
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено, ДатаСтатуса = Неопределено) Экспорт
	
	Если ДатаСтатуса = Неопределено Тогда 
		ДатаСтатуса = абс_СерверныеФункции.ПолучитьДатуСервера();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовКонтрагентов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Контрагент.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ДатаСтатуса;

	Запись.Контрагент			= Ссылка;
	Запись.Пользователь 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусКонтрагента	= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатусДебиторки(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИзмененияСтатусовДебиторки.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Контрагент.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.Контрагент			= Ссылка;
	Запись.Исполнитель 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусРабот	= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
// АБС Добавлено 20101126  Конец

// АБС Добавлено 6
Функция ПроверитьИНННаКонтрольнуюСумму(Контрагент) Экспорт
		
	ИННДляПроверки = СокрЛП(Контрагент.ИНН);
	Если ИННДляПроверки = "" тогда
		Возврат Истина;
	Иначе
		попытка 
			ЧислоИНН = число(ИННДляПроверки);
		исключение	
			возврат -3; //в строке инн присутствуют не только цифры
		конецпопытки;
			
		Если (стрДлина(ИННДляПроверки) = 10) или (стрДлина(ИННДляПроверки) = 12) тогда
			
			Если ПроверитьКонтрольнуюСумму(ИННДляПроверки) = 1 тогда
				Если ((Контрагент.ЮрФизЛицо = перечисления.ЮрФизЛицо.ФизЛицо) и (стрДлина(ИННДляПроверки) = 10)) тогда
					возврат 2; //ИНН не соответствует Физ.Лицу (ИНН Юр.Лица)	
				конецесли;
				Если ((Контрагент.ЮрФизЛицо = перечисления.ЮрФизЛицо.ЮрЛицо) и (стрДлина(ИННДляПроверки) = 12)) тогда
					возврат 3; //ИНН не соответствует Юр.Лицу  (ИНН Физ.Лица)
				КонецЕсли;
				возврат 1;
			иначе
				возврат 0;
			КонецЕсли;
			
			Возврат ПроверитьКонтрольнуюСумму(ИННДляПроверки);
		Иначе
			возврат -2; //не верная длинна ИНН
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

функция ПроверитьКонтрольнуюСумму(Знач ИНН)
	
	Если (стрДлина(ИНН) = 10) тогда
		//юр.лицо
		//н10
		делимое = 2*число(сред(ИНН,1,1))+4*число(сред(ИНН,2,1))+10*число(сред(ИНН,3,1))+3*число(сред(ИНН,4,1))+5*число(сред(ИНН,5,1))+9*число(сред(ИНН,6,1))+4*число(сред(ИНН,7,1))+6*число(сред(ИНН,8,1))+8*число(сред(ИНН,9,1));
		делитель = 11;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		делимое = остатокОтДеления;
		делитель = 10;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		н10 = остатокОтДеления;
		
		Если число(сред(ИНН,10,1)) = н10 тогда
			возврат 1;
		Иначе 
			возврат 0;
		КонецЕсли;
			
	ИначеЕсли (стрДлина(ИНН) = 12) тогда
		//физлицо
		//н11
		делимое = 7*число(сред(ИНН,1,1))+2*число(сред(ИНН,2,1))+4*число(сред(ИНН,3,1))+10*число(сред(ИНН,4,1))+3*число(сред(ИНН,5,1))+5*число(сред(ИНН,6,1))+9*число(сред(ИНН,7,1))+4*число(сред(ИНН,8,1))+6*число(сред(ИНН,9,1))+8*число(сред(ИНН,10,1));
		делитель = 11;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		делимое = остатокОтДеления;
		делитель = 10;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		н11 = остатокОтДеления;
		
		//н12
		делимое = 3*число(сред(ИНН,1,1))+7*число(сред(ИНН,2,1))+2*число(сред(ИНН,3,1))+4*число(сред(ИНН,4,1))+10*число(сред(ИНН,5,1))+3*число(сред(ИНН,6,1))+5*число(сред(ИНН,7,1))+9*число(сред(ИНН,8,1))+4*число(сред(ИНН,9,1))+6*число(сред(ИНН,10,1))+8*число(сред(ИНН,11,1));
		делитель = 11;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		делимое = остатокОтДеления;
		делитель = 10;
		остатокОтДеления = делимое - цел(делимое/делитель)*делитель;
		н12 = остатокОтДеления;
		
		н1112 = н11*10 + н12;
		Если число(сред(ИНН,11,2)) = н1112 тогда
			возврат 1;
		Иначе 
			возврат 0;
		КонецЕсли;
	Иначе 
		сообщить("Неверная длина ИНН.");
	КонецЕсли;
	
КонецФункции
// АБС Добавлено 6 КОНЕЦ

// АБС Добавлено 20110602
// Функции поиска бизнесс процессов по ссылке на контрагента.
//  Используются для 
// 		1. отображения ссылки на БП в форме 
//		2. поиска задач
Функция НайтиБПСогласование() Экспорт
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоКонтрагенту(Ссылка, "абсСогласованиеКонтрагентов");
КонецФункции

Функция НайтиБППереутверждение() Экспорт
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоКонтрагенту(Ссылка, "абсПереутверждениеКонтрагентов");
КонецФункции

Функция НайтиБПЗавершениеОтношений() Экспорт
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоКонтрагенту(Ссылка, "абсЗавершениеОтношенийСКонтрагентами");
КонецФункции

// Функции для поиска задач бизнесс процессов
//  Используются для 
//		1. поиска задачи для закрытия при изменении статуса контрагента.
Функция ПолучитьЗадачуПоКонтрагентуСогласование() Экспорт
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекСтатусКонтрагента = Ссылка.абс_СтатусКонтрагента;

	СпТочек = Новый Массив;
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка Тогда
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеОтказ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.СтартИзКарточкиКонтрагента);
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеОтказ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ЗавершениеУспешноПроверенСогласован);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеНалоговыйКонтроль);
// +++ввв 09.09.2016 г.
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеПД Тогда
	//ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Тогда
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеОтказ);
// ---ввв 09.09.2016 г.
	//ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеПД Тогда		
	//	СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ЗаполнениеКонтрагента);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ЗаполнениеКонтрагента);
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеОтказ);
// +++ввв 09.09.2016 г.
//		Если Ссылка.НеЯвляетсяРезидентом Тогда
//			СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеНалоговыйКонтроль);
//		Иначе
			СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
//		КонецЕсли;
// ---ввв 09.09.2016 г.
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
		//СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеПД);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеНалоговыйКонтроль);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Архив Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.УсловиеАрихв);
	КонецЕсли;
	
	СуперПользователь = НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено;
				
	Возврат абс_БизнесПроцессы.НайтиЗадачуКонтрагента(БП, СпТочек);

КонецФункции

Функция ПолучитьЗадачуПоКонтрагентуЗавершение() Экспорт
	
	БП = НайтиБПЗавершениеОтношений();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТочкаМаршрута = Неопределено;
	
	Если Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
		
	ИначеЕсли Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ЗавершениеОтношений Тогда
		
	ИначеЕсли Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Закрыт Тогда		
		ТочкаМаршрута = БизнесПроцессы.абсЗавершениеОтношенийСКонтрагентами.ТочкиМаршрута.ДействиеСогласованиеДЭБ;
	КонецЕсли;
	
	СуперПользователь = НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено;
				
	Возврат абс_БизнесПроцессы.НайтиЗадачуКонтрагента(БП, ТочкаМаршрута, НЕ СуперПользователь);

КонецФункции

Функция ПолучитьЗадачуПоКонтрагентуПереутверждение() Экспорт
	
	БП = НайтиБППереутверждение();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СпТочек = Новый Массив;
	
	Если Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.Переутверждение);
		СпТочек.Добавить(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
	ИначеЕсли Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
	ИначеЕсли Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
		СпТочек.Добавить(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
		СпТочек.Добавить(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ИначеЕсли Ссылка.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ);
		СпТочек.Добавить(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ);
	КонецЕсли;
	
	СуперПользователь = НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено;
				
	Возврат абс_БизнесПроцессы.НайтиЗадачуКонтрагента(БП, СпТочек, НЕ СуперПользователь);
	
КонецФункции               

Процедура ЗапуститьБПСогласования(КонтрагентСсылка) Экспорт
	НачатьТранзакцию();
	
	Попытка 
		БП = БизнесПроцессы.абсСогласованиеКонтрагентов.СоздатьБизнесПроцесс();
		БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
		БП.Контрагент = Ссылка;
		БП.ПользовательИнициаторБП = глЗначениеПеременной("глТекущийПользователь");

		БП.Записать();
		
		ТочкаСтарта = Неопределено;
		
		Если Покупатель Тогда
			ТочкаСтарта = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.СтартКонтрагентИзБиллинга;
		Иначе
			ТочкаСтарта = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.СтартСозданиеНовогоКонтрагента;			
		КонецЕсли;
		
		БП.Старт(ТочкаСтарта);
				
		ЗафиксироватьТранзакцию();
		
		Сообщить("Бизнес процесс " + БП.Ссылка + " по утвержденю контрагента " + Ссылка + " запущен.");
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщить("Ошибка при старте бизнес процесса по утверждению контрагента.");
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗапуститьБПЗавершения() Экспорт
		
	БП = БизнесПроцессы.абсЗавершениеОтношенийСКонтрагентами.СоздатьБизнесПроцесс();
	БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	БП.Контрагент = Ссылка;
	БП.ПользовательИнициаторБП = глЗначениеПеременной("глТекущийПользователь");
	БП.Записать();
	
	БП.Старт(БизнесПроцессы.абсЗавершениеОтношенийСКонтрагентами.ТочкиМаршрута.СтартЗавершениеОтношений);
	
	Сообщить("Бизнес процесс " + БП.Ссылка + " завершения отношений с контрагентом " + Ссылка + " запущен.");	

КонецПроцедуры

Процедура ЗапуститьБПСменыРеквизитов() Экспорт
	
	БП = БизнесПроцессы.абсПереутверждениеКонтрагентов.СоздатьБизнесПроцесс();
	БП.Дата = абс_СерверныеФункции.ПолучитьДатуСервера();
	БП.Контрагент = Ссылка;
	БП.ПользовательИнициаторБП = глЗначениеПеременной("глТекущийПользователь");
	БП.Записать();
	
	БП.Старт(БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.СтартСменаРеквизитов);
	
	Сообщить("Бизнес процесс " + БП.Ссылка + " смены реквизитов контрагента " + Ссылка + " запущен.");

КонецПроцедуры

Функция ПроверитьМодифицированностьОбъектаПоСсылке(РеквизитыДляПроверки = "") Экспорт
	
	Если РеквизитыДляПроверки = "" Тогда
		РеквизитыДляПроверки = "Код,Наименование,НаименованиеПолное,ИНН,КПП,Покупатель,Поставщик,ЮрФизЛицо,НеЯвляетсяКонтрагентом,абс_СтатусКонтрагента,абс_ТипыКонтрагентов,абс_КодОКОНХ,абс_КураторНаименование,абс_КураторКод,абс_ПричинаИзмененияСтатуса,КодПоОКПО,абс_ОсновнойКонтрагент,";
	КонецЕсли;
	
	КонтрагентМодифицирован = Ложь;
	
	Для Каждого ТекРеквизит Из Метаданные().Реквизиты Цикл
		
		ТекИмяРеквизита = СокрЛП(ТекРеквизит.Имя);
		
		//Если Найти(РеквизитыДляПроверки, ТекИмяРеквизита + ",") > 0 Тогда
			
			Если НЕ ЭтотОбъект[ТекИмяРеквизита] = Ссылка[ТекИмяРеквизита] Тогда
				
				КонтрагентМодифицирован = Истина;
				Прервать;
			КонецЕсли;			
		//КонецЕсли;		                                                 
	КонецЦикла;
	
	Возврат КонтрагентМодифицирован;
	
КонецФункции

// АБС ВСТАВКА
Функция абс_ПолучитьПерсональныеДанныеФизЛицаИзИСУЗК(СообщениеОбОшибке) Экспорт
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат Ложь;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
 	Результат = абс_WebServiceСервер.ИнициализацияWebServiceGetContractorsData(Код, СообщениеОбОшибке);
   
    Если Результат.Result Тогда
		
		ДанныеФизЛица = Результат.PersonDataIndividual;
		
		мОкато			   = ДанныеФизЛица.OKATO;
		мДатаРождения      = ДанныеФизЛица.BirthDay;
    	мСтраховойНомерПФР = ДанныеФизЛица.PFR;
    	мПол = ?(ЗначениеЗаполнено(ДанныеФизЛица.Gender), Перечисления.ПолФизическихЛиц[ДанныеФизЛица.Gender], "");
    	Если ДанныеФизЛица.Document<>Неопределено Тогда
    		ЗаполнитьЗначенияСвойств(мСтруктураДокумента, ДанныеФизЛица.Document,, "Type");
    		Попытка
    			мСтруктураДокумента.Type = Справочники.ДокументыУдостоверяющиеЛичность[ДанныеФизЛица.Document.Type];
    		Исключение
    			мСтруктураДокумента.Type = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоНаименованию(ДанныеФизЛица.Document.Type);
    		КонецПопытки;
    		
		КонецЕсли;
		
		Если мНаборКонтактнойИнформации = Неопределено Тогда
			УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(мНаборКонтактнойИнформации, Справочники.ФизическиеЛица.ПустаяСсылка());
		КонецЕсли;

    	Если ДанныеФизЛица.Contacts<>Неопределено Тогда
    		Для Каждого Contact Из ДанныеФизЛица.Contacts Цикл
    			
    			Тип = Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка();
    			Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
    			
    			Если ЗначениеЗаполнено(Contact.ContactType) Тогда
    				Тип = Перечисления.ТипыКонтактнойИнформации[Contact.ContactType];
    			КонецЕсли;
    			Если ЗначениеЗаполнено(Contact.ContactView) Тогда
    				Попытка 
    					Вид = Справочники.ВидыКонтактнойИнформации[Contact.ContactView];
    				Исключение
    					Попытка
    						Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Contact.ContactView);
    					Исключение
    						Вид = Contact.ContactView;	
    					КонецПопытки;	
    				КонецПопытки;	
    			КонецЕсли;				
								
    			Для Каждого НоваяСтрока Из мНаборКонтактнойИнформации Цикл
    				Если НоваяСтрока.Тип = Тип И НоваяСтрока.Вид = Вид  Тогда	
    					
    					НоваяСтрока.Объект = абс_ФизЛицо;
    					НоваяСтрока.Представление = Contact.ContactPresent;
    					НоваяСтрока.Поле1 = Contact.PostCode;
    					НоваяСтрока.Поле2 = Contact.Region;
    					НоваяСтрока.Поле3 = Contact.Area;
    					НоваяСтрока.Поле4 = Contact.City;
    					НоваяСтрока.Поле5 = Contact.Village;
    					НоваяСтрока.Поле6 = Contact.Street;
    					НоваяСтрока.Поле7 = Contact.House;
    					НоваяСтрока.Поле8 = Contact.Building;
    					НоваяСтрока.Поле9 = Contact.Apartment;
    					Если ЗначениеЗаполнено(Contact.HouseType) Тогда
    						НоваяСтрока.ТипДома = Перечисления.ТипыДомов[Contact.HouseType];
    					КонецЕсли;
    					Если ЗначениеЗаполнено(Contact.BuildingType) Тогда
    						НоваяСтрока.ТипКорпуса = Перечисления.ТипыКорпусов[Contact.BuildingType];
    					КонецЕсли;
    					Если ЗначениеЗаполнено(Contact.ApartmentType) Тогда
    						НоваяСтрока.ТипКвартиры = Перечисления.ТипыКвартир[Contact.ApartmentType];
    					КонецЕсли;
    				КонецЕсли;
    			КонецЦикла;	
    		КонецЦикла;
    	КонецЕсли;
    	мМестоРождения = ДанныеФизЛица.BirthPlace; 
		
		Возврат Истина;
		
   	Иначе
     	Возврат Ложь;
   	КонецЕсли;	
	
КонецФункции
// АБС ВСТАВКА КОНЕЦ

//АБС ВСТАВКА 33082  25.11.2013 11:21:21  Поставка

// Процедура абс_ВыгрузкаОсновныхБанковскихСчетовПриЗаписи
// Проверяет изменился ли основный банковский счет у контрагента
// если изменился инициирует выгрузку банковских счетов в ИСУЗК
// Вызывается при записи контрагента
//
// Параметры:
// 	Отказ
// Возвращаемое значение:
// 	Нет
Процедура абс_ВыгрузкаОсновныхБанковскихСчетовПриЗаписи(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ глЗначениеПеременной("абс_ИспользоватьВебСервисУниверсальногоОбменаXML_ИСУЗК") Тогда
		Возврат;
	КонецЕсли;
	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
		Возврат;	
	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
	МассивБСДляВыгрузки = Новый Массив;
	
	СсылкаОсновнойБанковскийСчет = Ссылка.ОсновнойБанковскийСчет;
	
	Если СсылкаОсновнойБанковскийСчет = ОсновнойБанковскийСчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаОсновнойБанковскийСчет) Тогда
		МассивБСДляВыгрузки.Добавить(СсылкаОсновнойБанковскийСчет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
		МассивБСДляВыгрузки.Добавить(ОсновнойБанковскийСчет);
	КонецЕсли;
	
	Для Каждого БСДляВыгрузки Из МассивБСДляВыгрузки Цикл
		
		абс_СлужебныеФункции.абс_ПриЗаписиОбъектовОбменаИСУЗКПриЗаписи(БСДляВыгрузки, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры
//АБС ВСТАВКА 33082 КОНЕЦ 

//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
Процедура абс_НачатьЗамерПроизводительности(ЭлементЗаписан = Ложь) Экспорт   	
	
	Если ЭтоГруппа 
		или ОбменДанными.Загрузка
		или мЗамерВремениУжеЗапущенЧерезЗаявкуНаИзменение
		или ?(ЭлементЗаписан, 
				абс_СтатусКонтрагента = абс_ПрошлыйСтатус, 
				абс_СтатусКонтрагента = Ссылка.абс_СтатусКонтрагента) Тогда  		
		Возврат;  		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.абс_НачатьЗамерВремени(абс_ОпределитьКлючевуюОперацию(),абс_ОпределитьДополнительныеПараметры(ЭлементЗаписан));
	
КонецПроцедуры	

Процедура абс_ЗавершитьЗамерПроизводительности(КодОшибки = 0) Экспорт
	
	Если ЭтоГруппа 
		или ОбменДанными.Загрузка
		или мЗамерВремениУжеЗапущенЧерезЗаявкуНаИзменение Тогда  		
		Возврат;
	КонецЕсли;	
	
	СоответствиеОшибок = новый Соответствие;
	СоответствиеОшибок.Вставить(0,"Не пройден контроль записи контрагента.");
	СоответствиеОшибок.Вставить(1,"Ошибка при записи контрагента.");
	СоответствиеОшибок.Вставить(2,"Запись контрагента прошла успешно.");
	СоответствиеОшибок.Вставить(3,"Не удалось записать контактную информацию контрагента.");
		
	ОценкаПроизводительностиКлиентСервер.абс_ЗакончитьЗамерВремени(абс_ОпределитьКлючевуюОперацию(),СоответствиеОшибок.Получить(КодОшибки));
	
КонецПроцедуры

Функция абс_ОпределитьКлючевуюОперацию()
		
	Возврат Перечисления.КлючевыеОперации.ИзменениеСтатусаКонтрагента;
	
КонецФункции

Функция абс_ОпределитьДополнительныеПараметры(ЭлементЗаписан)
	
	врСтарыйСтатус = ?(ЭлементЗаписан,абс_ПрошлыйСтатус,Ссылка.абс_СтатусКонтрагента);
	Возврат "Старый статус «"+СокрЛП(врСтарыйСтатус)+"», новый статус «"+СокрЛП(абс_СтатусКонтрагента)+"»";
	
КонецФункции	
//\\АБС ВСТАВКА №38173 КОНЕЦ


мТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
// АБС Добавлено 20110602 КОНЕЦ

// инициализация переменных для работы Web-сервиса по обмену с ИСУЗК
мСтруктураДокумента = Новый Структура("Type,Series,Number,DateIssue,Department,DepartmentCode,DateRegistration,Date");
мСтруктураГражданства = Новый Структура();
мВоинскийУчет = Новый Структура();
мИнвалидность = Новый Структура();
мИспользоватьОбмен = НЕ глЗначениеПеременной("абс_ЗапретОбменаПДФизЛицСИСУЗК");

// используется для проверки на двойной вызов ВебСервиса, т.к. в событии ПриЗаписи происходит заполнение поля "абс_ФизЛицо"
мДанныеПередали = Ложь;
мЗаписьФизЛица = Ложь;
//АБС ВСТАВКА №38173 НАЧАЛО «29 января 2014 г.», Пополитов
мЗамерВремениУжеЗапущенЧерезЗаявкуНаИзменение = Ложь;	
//\\АБС ВСТАВКА №38173 КОНЕЦ
