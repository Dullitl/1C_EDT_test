
Процедура  ВыполнитьНачальноеЗаполнениеПредопределенныхЭлементов() Экспорт 
	
	//ОсновныеСредстваНематериальныеАктивы
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.ОсновныеСредстваНематериальныеАктивы.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	
	СпрОбъект.ТребуетсяМаппинг = Истина;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("01");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("02");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("03");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("04");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("05");
	
    НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "СпособыОтраженияРасходовПоАмортизации";
	НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "ПодразделенияОрганизаций";
	                                                      
	СпрОбъект.Записать();
	
	// ТМЦ
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.ТМЦ.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Истина;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("07");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("08");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("10");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("41");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("14");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("45");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("94");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("16");
	
    НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "Склады";
		                                                      
	СпрОбъект.Записать();
	
	// НЗП_УсловныйДоход
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.НЗП_УсловныйДоход.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("20");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("44");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("46");
	                                                      
	СпрОбъект.Записать();
	
	// ДебиторскаяКредиторскаяЗадолженность
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.ДебиторскаяКредиторскаяЗадолженность.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Истина;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("60");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("62");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("76");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("63");
	
	
    НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "ДоговорыКонтрагентов";
		                                                      
	СпрОбъект.Записать();                         

	// НДС
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.НДС.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("19");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.АВ");
		                                                      
	СпрОбъект.Записать();
	
	// ДДС
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.ДДС.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Истина;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("50");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("52");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("55");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("57");
	
    НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "БанковскиеСчета";
		                                                      
	СпрОбъект.Записать();
		
	// ФинансовыеВложения
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.ФинансовыеВложения.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("58");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("59");
			                                                      
	СпрОбъект.Записать();
	
	// КредитыЗаймы
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.КредитыЗаймы.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("66");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("67");
		                                                      
	СпрОбъект.Записать();

	// РасчетыС_Бюджетом
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.РасчетыС_Бюджетом.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("68");
	                                                     
	СпрОбъект.Записать();

	// РасчетыС_ВнебюджетнымиФондами
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.РасчетыС_ВнебюджетнымиФондами.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("69");
	                                                     
	СпрОбъект.Записать();

    // Капитал
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.Капитал.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("80");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("81");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("82");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("83");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("84");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("75");
	                                                     
	СпрОбъект.Записать();
	
	 // Капитал
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.РасчетыС_Персоналом.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("71");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("71");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("73");
		                                                     
	СпрОбъект.Записать();
	
	 // РезервыПоОтпускам
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.РезервыПоОтпускам.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		                                                     
	СпрОбъект.Записать();
	
	 // РезервыПрочие
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.РезервыПрочие.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.02");	                                                     
	СпрОбъект.Записать();
	
	// РБП
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.РБП.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Истина;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("97");
	
    НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "РасходыБудущихПериодов";
		                                                      
	СпрОбъект.Записать();
	
	// ДоходыБудущихПериодов
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.ДоходыБудущихПериодов.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Ложь;
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("98");
	                                                      
	СпрОбъект.Записать();
	
	// Забаланс
	
	СпрОбъект = Справочники.абс_ВидыОперацийПереносаДанных.Забаланс.ПолучитьОбъект();
	СпрОбъект.ПереносимыеСчета.Очистить();
	СпрОбъект.НеобходимыеМаппинги.Очистить();
	СпрОбъект.ТребуетсяМаппинг = Истина;
	
	
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("001");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("002");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("003");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("004");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("005");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("006");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("007");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("008");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("009");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("010");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("011");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("012");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("013");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("014");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("ВАЛ");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("ВАЛ.60");
	СпрОбъект.ПереносимыеСчета.Добавить().Счет =  ПланыСчетов.Хозрасчетный.НайтиПоКоду("ВАЛ.62");

	НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "Склады";
	
    НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "НематериальныеАктивы";
	
	НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "ДоговорыКонтрагентов";
	
	НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "РасходыБудущихПериодов";
	
	НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "ОсновныеСредства";
	
	НоваяСтрока = СпрОбъект.НеобходимыеМаппинги.Добавить();
	НоваяСтрока.ИмяСправочника = "РасходыБудущихПериодов";
	
	СпрОбъект.Записать(); 
КонецПроцедуры	

Процедура СоздатьОсновныеВидыОпераций() Экспорт
	
	МассивИсключаемыхСчетов = Новый Массив;
	//счета 09, 77, 80, 82 не должны переноситься
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервныйКапитал);
	
	ТабДок = ПолучитьМакет("Макет");	
	
	Для Стр = 2 По ТабДок.ВысотаТаблицы Цикл 
		НазваниеОперации = ТабДок.Область("R"+Формат(Стр, "ЧГ=")+"C1").Текст;
		ПроцедураИзДЗОвКТТК = ТабДок.Область("R"+Формат(Стр, "ЧГ=")+"C2").Текст;
		ПроцедураИзКТТКвФилиал = ТабДок.Область("R"+Формат(Стр, "ЧГ=")+"C3").Текст;
		СтрокаСчета = ТабДок.Область("R"+Формат(Стр, "ЧГ=")+"C4").Текст; 
		МассивСчетов = РазобратьСтроку(СтрокаСчета);
		Если Найти(НазваниеОперации,"08.09")>0 Тогда
			НайденныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.09");
			Если ЗначениеЗаполнено(НайденныйСчет) Тогда 
				МассивСчетов.Добавить(НайденныйСчет);
			КонецЕсли;				
		КонецЕсли;
		ДополнитьМассив(МассивИсключаемыхСчетов,МассивСчетов);
		СоздатьЭлементСправочника(НазваниеОперации,ПроцедураИзДЗОвКТТК, ПроцедураИзКТТКвФилиал, МассивСчетов);
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	               |			ТОГДА ХозрасчетныйОстатки.Счет
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ХозрасчетныйОстатки.Счет.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	               |					ТОГДА ХозрасчетныйОстатки.Счет.Родитель
	               |				ИНАЧЕ ХозрасчетныйОстатки.Счет.Родитель.Родитель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СчетБУ
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки КАК ХозрасчетныйОстатки
	               |ГДЕ
	               |	ХозрасчетныйОстатки.Организация <> &Организация
	               |	И ХозрасчетныйОстатки.Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	               |	И НЕ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&МассивСчетов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	               |			ТОГДА ХозрасчетныйОстатки.Счет
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ХозрасчетныйОстатки.Счет.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	               |					ТОГДА ХозрасчетныйОстатки.Счет.Родитель
	               |				ИНАЧЕ ХозрасчетныйОстатки.Счет.Родитель.Родитель
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоКоду("000000001"));
    Запрос.УстановитьПараметр("МассивСчетов", МассивИсключаемыхСчетов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл    	
		СчетБУ = Выборка.СчетБУ;
		НазваниеОперации = СчетБУ.Код; 
    	СоздатьЭлементСправочника(НазваниеОперации,,,СчетБУ);		
	КонецЦикла;
	
	
	ЗапросСправочники = Новый Запрос;
	ЗапросСправочники.Текст = "ВЫБРАТЬ
	               |	абс_ВидыСправочниковПереносаДанных.Ссылка
	               |ИЗ
	               |	Справочник.абс_ВидыСправочниковПереносаДанных КАК абс_ВидыСправочниковПереносаДанных
	               |ГДЕ
	               |	абс_ВидыСправочниковПереносаДанных.Предопределенный = ИСТИНА";
    РезультатСправочники = ЗапросСправочники.Выполнить();
	Если НЕ РезультатСправочники.Пустой() Тогда 
		ВыборкаСправочники = РезультатСправочники.Выбрать();
        МассивВидовСправочников = Новый Массив;
		
		Пока ВыборкаСправочники.Следующий() Цикл    	
			
			НайденнаяОбработка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Перенос "+ВыборкаСправочники.Ссылка.Наименование+" (филиализация)");	
			ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
			
			Если ВыборкаСправочники.Ссылка = Справочники.абс_ВидыСправочниковПереносаДанных.Склады Тогда
				ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
			ИначеЕсли ВыборкаСправочники.Ссылка = Справочники.абс_ВидыСправочниковПереносаДанных.ДоговорыКонтрагентов Тогда
				ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
			ИначеЕсли ВыборкаСправочники.Ссылка = Справочники.абс_ВидыСправочниковПереносаДанных.НоменклатурныеГруппы Тогда
				ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
			ИначеЕсли ВыборкаСправочники.Ссылка = Справочники.абс_ВидыСправочниковПереносаДанных.ОбъектыСтроительства Тогда
				ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
			КонецЕсли;
			
			ВидСправочникаСсылка = ВыборкаСправочники.Ссылка;
			Если ЗначениеЗаполнено(НайденнаяОбработка) ИЛИ ЗначениеЗаполнено(ВидСубконто) Тогда
				ВидСправочникаОбъект = ВыборкаСправочники.Ссылка.ПолучитьОбъект();
				ВидСправочникаОбъект.ОбработкаПереноса = НайденнаяОбработка;
				ВидСправочникаОбъект.ВидСубконто = ВидСубконто;
				ВидСправочникаОбъект.Записать();
				ВидСправочникаСсылка = ВидСправочникаОбъект.Ссылка;
			КонецЕсли;
			НазваниеОперации = "Создание справочника: " + ВидСправочникаСсылка.Наименование;
			СоздатьЭлементСправочника(НазваниеОперации,,,,ВидСправочникаСсылка);
			МассивВидовСправочников.Добавить(ВидСправочникаСсылка);
		КонецЦикла;
		НазваниеОперации = "Создание справочников (общее)";
		СоздатьЭлементСправочника(НазваниеОперации,,,,МассивВидовСправочников);
	КонецЕсли;	
	
КонецПроцедуры


Процедура СоздатьЭлементСправочника(НазваниеОперации,ПроцедураИзДЗОвКТТК="",ПроцедураИзКТТКвФилиал="",СчетБУ=Неопределено,ВидыСправочников=Неопределено,СчетНУ=Неопределено);

	ЗапросОпераций = Новый Запрос;
	ЗапросОпераций.Текст = "ВЫБРАТЬ
	                       |	абс_ВидыОперацийПереносаДанных.Ссылка
	                       |ИЗ
	                       |	Справочник.абс_ВидыОперацийПереносаДанных КАК абс_ВидыОперацийПереносаДанных
	                       |ГДЕ
	                       |	абс_ВидыОперацийПереносаДанных.Наименование = &Наименование
	                       |	И абс_ВидыОперацийПереносаДанных.ПометкаУдаления = ЛОЖЬ";
	
	ЗапросОпераций.УстановитьПараметр("Наименование", НазваниеОперации);
	РезультатОперации = ЗапросОпераций.Выполнить();
	
	Если РезультатОперации.Пустой() Тогда	
		НовыйЭлемент = Справочники.абс_ВидыОперацийПереносаДанных.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НазваниеОперации;
		НовыйЭлемент.ФормированиеДвиженийПередачаДЗОКТТК = ПроцедураИзДЗОвКТТК;
		НовыйЭлемент.ФормированиеДвиженийПриемКТТКФилиал = ПроцедураИзКТТКвФилиал;
		НовыйЭлемент.ЗабалансовыеСчета = Ложь;
		НовыйЭлемент.СозданиеСправочников = Ложь;
		Если СчетБУ<>Неопределено Тогда
			Если ТипЗнч(СчетБУ)=Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				Если СчетБУ = ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы Тогда
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков;
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования;
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.ПереводМолоднякаЖивотныхВОсновноеСтадо;
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных;
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
					
					НайденныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.10");
					Если ЗначениеЗаполнено(НайденныйСчет) Тогда 
						НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
						НоваяСтрокаБУ.Счет = НайденныйСчет;
					КонецЕсли;
					
					НайденныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.11");
					Если ЗначениеЗаполнено(НайденныйСчет) Тогда
						НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
						НоваяСтрокаБУ.Счет = НайденныйСчет;
					КонецЕсли;
					
					НайденныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.12");
					Если ЗначениеЗаполнено(НайденныйСчет) Тогда
						НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
						НоваяСтрокаБУ.Счет = НайденныйСчет;
					КонецЕсли;
					
				ИначеЕсли СчетБУ = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА Хозрасчетный.Ссылка.Родитель = &Счет76
					|			ТОГДА Хозрасчетный.Ссылка
					|		ИНАЧЕ ВЫБОР
					|				КОГДА Хозрасчетный.Ссылка.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
					|					ТОГДА Хозрасчетный.Ссылка.Родитель
					|				ИНАЧЕ Хозрасчетный.Ссылка.Родитель.Родитель
					|			КОНЕЦ
					|	КОНЕЦ КАК Счет
					|ИЗ
					|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
					|ГДЕ
					|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет76)
					|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет7601)
					|	И Хозрасчетный.Ссылка <> &Счет76
					|	И Хозрасчетный.Ссылка.Родитель.Родитель <> &Счет76
					|АВТОУПОРЯДОЧИВАНИЕ";
					
					Запрос.УстановитьПараметр("Счет76", ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
					Запрос.УстановитьПараметр("Счет7601", ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);
					
					Результат = Запрос.Выполнить();
					ТзСчета76 = Результат.Выгрузить();
					
					НовыйЭлемент.СписокСчетовБУ.Загрузить(ТзСчета76);
					
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию;									
				Иначе
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = СчетБУ;			
				КонецЕсли;
				
				Если СчетБУ.Забалансовый Тогда
					НовыйЭлемент.ЗабалансовыеСчета = Истина;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(СчетБУ)=Тип("Массив") Тогда
				Для каждого Счет из СчетБУ Цикл
					НоваяСтрокаБУ = НовыйЭлемент.СписокСчетовБУ.Добавить();
					НоваяСтрокаБУ.Счет = Счет;	
				КонецЦикла;
			КонецЕсли;	
				
			СчетаБУ = НовыйЭлемент.СписокСчетовБУ.ВыгрузитьКолонку("Счет"); 
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	СоответствиеСчетовБУиНУСрезПоследних.СчетБУ,
			                      |	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК Счет
			                      |ИЗ
			                      |	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(
			                      |			,
			                      |			СчетБУ В (&СчетаБУ)
			                      |				И СчетКоррБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
			                      |				И ВидЗатратНУ = НЕОПРЕДЕЛЕНО) КАК СоответствиеСчетовБУиНУСрезПоследних
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ.Порядок");
			Запрос.УстановитьПараметр("СчетаБУ", СчетаБУ);
			НовыйЭлемент.СписокСчетовНУ.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
		Если ВидыСправочников<>Неопределено Тогда
			Если ТипЗнч(ВидыСправочников)=Тип("СправочникСсылка.абс_ВидыСправочниковПереносаДанных") Тогда
				НоваяСтрокаБУ = НовыйЭлемент.ВидыСправочников.Добавить();
				НоваяСтрокаБУ.ВидСправочника = ВидыСправочников;	
			ИначеЕсли ТипЗнч(ВидыСправочников)=Тип("Массив") Тогда
				Для каждого ВидСправочника из ВидыСправочников Цикл
					НоваяСтрокаБУ = НовыйЭлемент.ВидыСправочников.Добавить();
					НоваяСтрокаБУ.ВидСправочника = ВидСправочника;	
				КонецЦикла;
			КонецЕсли;
			НовыйЭлемент.СозданиеСправочников = Истина;
		КонецЕсли;
		
		Если СчетНУ<>Неопределено Тогда
			Если ТипЗнч(СчетНУ)=Тип("ПланСчетовСсылка.Налоговый") Тогда
				НоваяСтрокаНУ = НовыйЭлемент.СписокСчетовНУ.Добавить();
				НоваяСтрокаНУ.Счет = СчетНУ;	
			КонецЕсли;
		КонецЕсли;
		
		Если НазваниеОперации = "01,02,03,КВ  + Регистры (Передача из ДЗО в Филиал)" Тогда
			НоваяСтрокаНУ = НовыйЭлемент.СписокСчетовНУ.Добавить();
			НоваяСтрокаНУ.Счет = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
		КонецЕсли;
		
		НовыйЭлемент.УстановитьНовыйКод();
		НовыйЭлемент.ОбменДанными.Загрузка=Истина;
		НовыйЭлемент.Записать();
	КонецЕсли;

КонецПроцедуры

Функция РазобратьСтроку(СтрокаСчета)
	
	МассивСчетов = Новый Массив;
	
	Счетчик = 1;
	Условие = СтрЧислоВхождений(СтрокаСчета,";")+1; 
	Пока Счетчик <= Условие Цикл
		
		НомерВхождения = Найти(СтрокаСчета,";");
		ДлинаСтроки = СтрДлина(СтрокаСчета);
		
		Если Счетчик = 1 ИЛИ НомерВхождения = 0 Тогда
			НачальныйНомер = 1;
		Иначе
			НачальныйНомер = НомерВхождения+1;
		КонецЕсли;
		
		Если НомерВхождения = 0 Тогда
			ЧислоСимволов = ДлинаСтроки;
		Иначе
			ЧислоСимволов = НомерВхождения-1;
		КонецЕсли;
		
		ПодСтрока = Лев(СтрокаСчета,ЧислоСимволов);   
		
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный[ПодСтрока]);
		
		СтрокаСчета = Прав(СтрокаСчета, ДлинаСтроки - НомерВхождения);		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

Процедура ДополнитьМассив(Массив,ДобавляемыйМассив)	
	Для каждого ДобавляемыйЭлемент из ДобавляемыйМассив Цикл
		Массив.Добавить(ДобавляемыйЭлемент);	
	КонецЦикла;	
КонецПроцедуры

