////////////////////////////////////////////////////////////////////////////////
// ФОРМА

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
&НаКлиенте
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(Объект.НаименованиеПолное) 
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Процедура записывает единицу хранения остатков номенклатуры.
//
&НаСервере
Процедура ПроверитьЕдиницуХраненияОстатков(ТекущийОбъект, Отказ)

	Если ЗначениеЗаполнено(ТекущийОбъект.ЕдиницаХраненияОстатков) Тогда
		Возврат;
	КонецЕсли;

	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, ТекущийОбъект.Ссылка);
	Если ВыборкаЕдиниц.Следующий() Тогда
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
	Иначе
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НайденнаяЕдиницаОбъект.Наименование            = ТекущийОбъект.БазоваяЕдиницаИзмерения.Наименование;
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ТекущийОбъект.БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = ТекущийОбъект.Ссылка;

		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось записать единицу хранения остатков: '");
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки + ОписаниеОшибки(), Отказ,,, ТекущийОбъект.Ссылка);
			Возврат;
		КонецПопытки;

		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
	КонецЕсли;

	ТекущийОбъект.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	Попытка
	
		ТекущийОбъект.Записать();	
	
	Исключение
		Отказ = Истина;
	КонецПопытки; 

КонецПроцедуры // ПроверитьЕдиницуХраненияОстатков()

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.
	Список = Новый СписокЗначений;
	Список.Добавить(Объект.Наименование);

	// Выбор из списка и обработка выбора.
	РезультатВыбора = ВыбратьИзСписка(Список, Элемент);
	Если РезультатВыбора <> Неопределено Тогда
		Объект.НаименованиеПолное = РезультатВыбора.Значение;
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизиты значениями по умолчанию.
//
&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчанию()

	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Если НЕ ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) Тогда
		Объект.БазоваяЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяЕдиницаПоКлассификатору");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
		Объект.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Если ЗначениеЗаполнено(Объект.Родитель.ВидНоменклатуры) Тогда
			Объект.ВидНоменклатуры = Объект.Родитель.ВидНоменклатуры;
		Иначе
			Объект.ВидНоменклатуры = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойВидНоменклатуры");
		КонецЕсли;
		
		Объект.Услуга   = (Объект.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
		Объект.Набор    = (Объект.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
		Объект.Комплект = (Объект.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаправлениеВыпуска) Тогда
		Объект.НаправлениеВыпуска = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеНаправлениеВыпуска");
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьРеквизитыПоУмолчанию()

// Процедура снимает флаги, имена которых переданы в структуре, если флаги установлены.
//
// Параметры:
//  СтруктураФлагов - структура с именами флагов.
//
&НаКлиенте
Процедура СнятьФлаги(СтруктураФлагов)

	// Не обращаемся напрямую к свойствам объекта, так как часть из них может быть
	// недоступна данному пользователю
	ЗаполнитьЗначенияСвойств(СтруктураФлагов, Объект);
	ТребуетсяСнятьФлаги = Новый Структура();
	Для Каждого ЗначениеФлага Из СтруктураФлагов Цикл
		Если ЗначениеФлага.Значение = Истина Тогда
			// Это флаг и его надо снять
			ТребуетсяСнятьФлаги.Вставить(ЗначениеФлага.Ключ, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, ТребуетсяСнятьФлаги);

КонецПроцедуры // СнятьФлаги()

&НаСервереБезКонтекста
Функция ПолучитьТипНоменклатурыПоВиду(ВидНоменклатуры)
	
	Возврат ВидНоменклатуры.ТипНоменклатуры;
	
КонецФункции // 

// Процедура заполняет по реквизиту формы ВидНоменлатуры другие признаки
//
&НаКлиенте
Процедура ЗаполнитьПризнакиПоВидуНоменклатуры()

	ТипНоменклатуры = ПолучитьТипНоменклатурыПоВиду(Объект.ВидНоменклатуры);
	
	Объект.Услуга   = (ТипНоменклатуры = ТипУслуга);
	Объект.Набор    = (ТипНоменклатуры = ТипНабор);
	Объект.Комплект = (ТипНоменклатуры = ТипКомплект);

	Если Объект.Услуга Или Объект.Набор Или Объект.Комплект Тогда
		СтруктураФлагов = Новый Структура;
		СтруктураФлагов.Вставить("ВестиУчетПоСериям");
		СтруктураФлагов.Вставить("ВестиПартионныйУчетПоСериям");
		СтруктураФлагов.Вставить("Весовой");
		СтруктураФлагов.Вставить("ВестиОперативныйУчетОстатковНЗП");
		СтруктураФлагов.Вставить("ВестиУчетПоСериямВНЗП");
		СтруктураФлагов.Вставить("ВестиСерийныеНомера");

		Если Объект.Услуга Или Объект.Набор Тогда
			СтруктураФлагов.Вставить("ВестиУчетПоХарактеристикам");
		КонецЕсли;

		СнятьФлаги(СтруктураФлагов);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПризнакиПоВидуНоменклатуры()

// Процедура устанавливает доступность для элементов формы.
//
&НаКлиенте
Процедура УстановитьДоступность()

	НаборКомплект    = (Объект.Набор ИЛИ Объект.Комплект);
	Товар            = НЕ (Объект.Услуга ИЛИ НаборКомплект);
	Производство     = (Объект.ВидВоспроизводства = ВидВоспроизводстваПроизводство ИЛИ Объект.ВидВоспроизводства = ВидВоспроизводстваПереработка);
	
	ДоступностьСерия = (ИспользованиеСерийНоменклатуры И Объект.ВестиУчетПоСериям И Товар);
	
	Если ИспользованиеХарактеристикНоменклатуры Тогда
		Элементы.ВестиУчетПоХарактеристикам.Доступность = (Товар ИЛИ Объект.Комплект);
	КонецЕсли; 
	
 	Если ИспользованиеСерийНоменклатуры Тогда
		Элементы.ВестиПартионныйУчетПоСериям.Доступность = Товар;
	КонецЕсли; 
	
	Если Элементы.Найти("ВестиОперативныйУчетОстатковНЗП") <> Неопределено Тогда
		// Реквизит может быть недоступен пользователю
		Элементы.ВестиОперативныйУчетОстатковНЗП.Доступность = Товар;
	КонецЕсли;
	
	Если Объект.Услуга Тогда
		ЗаполнятьЕдиницы = Ложь;
	Иначе
		ЗаполнятьЕдиницы = Неопределено; // Авто
	КонецЕсли; 
	Элементы.БазоваяЕдиницаИзмерения.АвтоОтметкаНезаполненного = ЗаполнятьЕдиницы;
	Элементы.ЕдиницаХраненияОстатков.АвтоОтметкаНезаполненного = ЗаполнятьЕдиницы;
	Элементы.ЕдиницаДляОтчетов.АвтоОтметкаНезаполненного       = ЗаполнятьЕдиницы;
	
КонецПроцедуры //
 

// Процедура, выполняющая необходимые действия при изменении вида номенклатуры.
//
&НаКлиенте
Процедура ПриИзмененииВидаНоменклатуры()

	ЗаполнитьПризнакиПоВидуНоменклатуры();
    УстановитьДоступность();
	УстановитьДоступностьСерииХарактеристики(); //АБС Коломиец
	
КонецПроцедуры // ПриИзмененииВидаНоменклатуры()

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ПриИзмененииВидаНоменклатуры();
	ЗаполнитьЗначенияСчетУчета(); //АБС Коломиец
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура УстановитьОтборЕдиницИзмерения()
	
	// В свойствах динамического списка добавлен отбор по владельцу,
	// ему задано представление "ОтборПоВладельцу",
	// элемент отбора не доступен пользователю
	Для Каждого ТекущийОтбор Из ЕдиницыИзмерения.Отбор.Элементы Цикл
		Если ТекущийОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный 
		   И ТекущийОтбор.Представление = "ОтборПоВладельцу" Тогда
		    // Элемент отбора - "Предопределенный"
			ТекущийОтбор.ПравоеЗначение = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Сообщить("Запись номенклатуры в режиме ""1С Предприятие (тонкий клиент)"" запрещена!");    //АБС Коломиец
	//Возврат;
	
	Если ТекущийОбъект.Услуга Тогда
		Если ЗначениеЗаполнено(ТекущийОбъект.БазоваяЕдиницаИзмерения) Тогда
			ПроверитьЕдиницуХраненияОстатков(ТекущийОбъект, Отказ);
		КонецЕсли;
	Иначе
		ПроверитьЕдиницуХраненияОстатков(ТекущийОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает реквизиты-константы
// реквизиты-константы используются на клиенте
//
&НаСервере
Процедура УстановитьКонстантыФормы()

	ТипУслуга = Перечисления.ТипыНоменклатуры.Услуга;
	ТипНабор = Перечисления.ТипыНоменклатуры.Набор;
	ТипКомплект = Перечисления.ТипыНоменклатуры.Комплект;
	
	ВидВоспроизводстваПроизводство = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
	ВидВоспроизводстваПереработка = Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка;
	
	ИспользованиеСерийНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользованиеСерийНоменклатуры");
	ИспользованиеХарактеристикНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользованиеХарактеристикНоменклатуры");
	
КонецПроцедуры //
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьКонстантыФормы();
	
	// Настройка списка единиц измерения
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьОтборЕдиницИзмерения();
		Элементы.ЕдиницыИзмерения.ТолькоПросмотр = Ложь;
	Иначе
		// Новый элемент
		ЗаполнитьРеквизитыПоУмолчанию();
		Элементы.ЕдиницыИзмерения.ТолькоПросмотр = Истина;
		//АБС ВСТАВКА 08.01.11
		ОБъект.абс_СтатусНоменклатуры 	= Перечисления.абс_СтатусыНоменклатуры.Подготовка;
		Объект.абс_Ответственный		= глЗначениеПеременной("глТекущийПользователь");
		//\\АБС Вставка 08.01.11
	КонецЕсли;
	
	мСтатусНоменклатуры = Объект.абс_СтатусНоменклатуры;
	
	ЗаполнитьСписокДоступныхСтатусов();
	
	УстановитьРежимПросмотраЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Настройка списка единиц измерения
	УстановитьОтборЕдиницИзмерения();
	Элементы.ЕдиницыИзмерения.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	УстановитьДоступность();
	
	//АБС Коломиец+
	ЗаполнитьЗначенияСчетУчета();
	УстановитьДоступностьСерииХарактеристики();	
	//АБС Коломиец-
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//АБС Коломиец+
	//Сообщить("Запись номенклатуры в режиме ""1С Предприятие (тонкий клиент)"" запрещена!");
	//Отказ = Истина;
	//Возврат;
	//АБС Коломиец-
	
	Объект.абс_ПричинаИзмененияСтатуса = "";
	Если СпрашиватьПричинуИзмененияСтатуса() Тогда
		ВвестиСтроку(Объект.абс_ПричинаИзмененияСтатуса, "Введите причину изменения статуса",,Истина);
	КонецЕсли;
	
    Объект.абс_СтатусНоменклатуры = мСтатусНоменклатуры;
	
	Если Объект.ВестиПартионныйУчетПоСериям Тогда
    	Объект.ВестиУчетПоСериям = Объект.ВестиПартионныйУчетПоСериям;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СпрашиватьПричинуИзмененияСтатуса()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат НЕ Объект.абс_СтатусНоменклатуры = Объект.Ссылка.абс_СтатусНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДоступныхСтатусов()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	СписокСтатусов = Элементы.Статус.СписокВыбора;
	
	СписокСтатусов.Очистить();
	
	СписокСтатусов.Добавить(Объект.абс_СтатусНоменклатуры);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтатус = абс_БизнесПроцессы.ПолучитьСтатусНоменклатурыПоРегистру(Объект.Ссылка);
	
	Если ТекСтатус = Перечисления.абс_СтатусыНоменклатуры.Подготовка Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   //АБС-Пр2 12077	
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыНоменклатуры.СогласованиеНСИ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыНоменклатуры.СогласованиеНСИ Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникГруппыНСИ) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыНоменклатуры.Использование);
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыНоменклатуры.Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыНоменклатуры.Отказ Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникИнициаторКомпании) = Неопределено Тогда   //АБС-Пр2 12077	
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыНоменклатуры.Подготовка);
		КонецЕсли;
		
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
		Если НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникГруппыНСИ) = Неопределено Тогда
			СписокСтатусов.Добавить(Перечисления.абс_СтатусыНоменклатуры.Архив);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотраЭлемента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абс_ТаблицаСтатусовБПТТК.РедактированиеДокумента КАК Редактирование,
	                      |	абс_ТаблицаСтатусовБПТТК.ОтветственныйЗаИзменениеСтатуса
	                      |ИЗ
	                      |	РегистрСведений.абс_ТаблицаСтатусовБПТТК КАК абс_ТаблицаСтатусовБПТТК
	                      |ГДЕ
	                      |	абс_ТаблицаСтатусовБПТТК.ВидБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеНоменклатуры)
	                      |	И абс_ТаблицаСтатусовБПТТК.Статус = &ТекСтатус");
						  
	Запрос.УстановитьПараметр("ТекСтатус", Объект.абс_СтатусНоменклатуры);
	
	РазрешеноРедактирование = Ложь;
	РазрешеноМенятьСтатус 	= Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ мРолиПользователя.Найти(Выборка.ОтветственныйЗаИзменениеСтатуса) = Неопределено Тогда
			РазрешеноМенятьСтатус = Истина;
			
			РазрешеноРедактирование = РазрешеноРедактирование ИЛИ Выборка.Редактирование;
		КонецЕсли;
	
	КонецЦикла;
	
	// Если есть задачи текущему пользователю, то ему разрешено изменить статус
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(
	                      |			&ТекПользователь,
	                      |			ОбъектЗадачи = &НоменклатураСсылка
	                      |				И Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю");
						  
	Запрос.УстановитьПараметр("ТекПользователь"	, ТекПользователь);
	Запрос.УстановитьПараметр("НоменклатураСсылка", Объект.Ссылка);
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;
	
	// Если статус использование и пользователь является сотрудником НСИ то он может менять статус
	Если Объект.абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.Использование И 
		НЕ мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникГруппыНСИ) = Неопределено Тогда
		
		РазрешеноМенятьСтатус = Истина;
		
	КонецЕсли;
			
	// Установим необходимый вид просмотра документа
	Если НЕ РазрешеноРедактирование Тогда
		
		ТолькоПросмотр = Истина;
		
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаписатьСтатус.Доступность = РазрешеноМенятьСтатус;
	
	КонецЕсли;
	
	РазрешеноЗаписать = РазрешеноРедактирование ИЛИ РазрешеноМенятьСтатус;
	
	Элементы.КнопкаЗаписать.Доступность 		= РазрешеноЗаписать;
	Элементы.КнопкаЗаписатьИЗакрыть.Доступность = РазрешеноЗаписать;
		
	Элементы.Статус.Доступность = РазрешеноМенятьСтатус;	
	
	мСтатусНоменклатуры = Объект.абс_СтатусНоменклатуры;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Записать();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьСписокДоступныхСтатусов();
	
	УстановитьРежимПросмотраЭлемента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ЗакрытьЗадачуИсполненияНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьЗадачуИсполненияНоменклатуры()
	
	// Если счет согласован, и открыт инициатором, то закроем задачу Согласован
	Если Объект.абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
		
		мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		
		БПСогласование = НайтиБПСогласование();
		
		Если БПСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если БПСогласование.Завершен Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ БПСогласование.ПользовательИнициаторБП = мТекущийПользователь Тогда
			Возврат;			
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	абсЗадачаДоговораЗадачиПоИсполнителю.Ссылка КАК ЗадачаСсылка
		                      |ИЗ
		                      |	Задача.абсЗадачаДоговора.ЗадачиПоИсполнителю(&Исполнитель, Выполнена = ЛОЖЬ) КАК абсЗадачаДоговораЗадачиПоИсполнителю
		                      |ГДЕ
		                      |	абсЗадачаДоговораЗадачиПоИсполнителю.БизнесПроцесс = &БПСогласование");
							  
		Запрос.УстановитьПараметр("Исполнитель"		, мТекущийПользователь);
		Запрос.УстановитьПараметр("БПСогласование"	, БПсогласование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.ЗадачаСсылка.ПолучитьОбъект();
			
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоНоменклатуре(Объект.Ссылка, "абсСогласованиеНоменклатуры");	
	
КонецФункции

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
		
	Если Элементы.Статус.СписокВыбора.НайтиПоЗначению(мСтатусНоменклатуры) = Неопределено Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Выбран неверный статус номенклатуры.");
		
		мСтатусНоменклатуры = Объект.абс_СтатусНоменклатуры;
		Возврат;
	КонецЕсли;
	
	Объект.абс_СтатусНоменклатуры = мСтатусНоменклатуры;
	
КонецПроцедуры

//АБС Коломиец+
&НаСервере
Процедура ЗаполнитьЗначенияСчетУчета()
	
	Если Не Объект.Услуга Тогда
		
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		СтруктураСчетовУчета = абс_СлужебныеФункции.ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений(Организация, Объект, Неопределено);
		СчетБУ = СтруктураСчетовУчета.СчетУчетаБУ;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) // ЭтоНовый() 
			И ЗначениеЗаполнено(СчетБУ)
			И (СтруктураСчетовУчета.ПоПартиям Или СтруктураСчетовУчета.ПоСредней) Тогда
			
			Элементы.ВестиПартионныйУчетПоСериям.Видимость = Истина; 
			//мВестиУчетПоХарактеристикам  = Истина;
			Объект.ВестиУчетПоХарактеристикам = Истина;
			Объект.ВестиУчетПоСериям  = Истина;
			Объект.ВестиПартионныйУчетПоСериям  = СтруктураСчетовУчета.ПоПартиям;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СчетБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьДоступностьСерииХарактеристики()
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено
	   И мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникГруппыНСИ) = Неопределено Тогда		
	   Элементы.ВестиУчетПоХарактеристикам.Доступность  = Ложь;
	   Элементы.ВестиПартионныйУчетПоСериям.Доступность  = Ложь;		
    КонецЕсли;	
	
КонецПроцедуры 
//АБС Коломиец-


