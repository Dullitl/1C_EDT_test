Перем мСписокВозможныхРеквизитов Экспорт;
Перем мРеквизитыКонтрольУникальности Экспорт;
Перем ПрошлыйИзмененныйРодительОбъектаДоступа;
Перем мЭтоНеНовый;
Перем мТекущийПользователь;
Перем мРолиПользователя;

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		//Для элемента требуется проверять заполнение реквизита ВидНоменклатуры
		ПроверяемыеРеквизиты.Добавить("ВидНоменклатуры");
	КонецЕсли;
	
	Если (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
		
		// Базовая единица может быть не заполнена
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("БазоваяЕдиницаИзмерения");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
		
	КонецЕсли;

	// Надо проверить владельца единицы хранения остатков.
	Если ЗначениеЗаполнено(ЕдиницаХраненияОстатков)
		И ЕдиницаХраненияОстатков.Владелец <> Ссылка Тогда
		ТекстСообщения = НСтр("ru = 'Неверно указан владелец единицы хранения остатков!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЕдиницаХраненияОстатков",, Отказ);
	КонецЕсли;
	
	// Надо проверить владельца единицы для отчетов.
	Если ЗначениеЗаполнено(ЕдиницаДляОтчетов)
		И ЕдиницаДляОтчетов.Владелец <> Ссылка Тогда
		ТекстСообщения = НСтр("ru = 'Неверно указан владелец единицы для отчетов!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЕдиницаДляОтчетов",, Отказ);
	КонецЕсли;

	Если Не ЭтоНовый() И НЕ ЭтоГруппа Тогда
		СуществуютСсылки = Неопределено;

		Если (ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга)
			И Ссылка.ЕдиницаХраненияОстатков <> ЕдиницаХраненияОстатков 
			И ПолныеПрава.Номенклатура_СуществуютСсылки(Ссылка, СуществуютСсылки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Номенклатура уже участвует в товародвижении. 
                             |Изменить единицу хранения остатков уже нельзя!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЕдиницаХраненияОстатков",, Отказ);
		КонецЕсли;

		Если ВидНоменклатуры.ТипНоменклатуры <> Ссылка.ВидНоменклатуры.ТипНоменклатуры
			И ПолныеПрава.Номенклатура_СуществуютСсылки(Ссылка, СуществуютСсылки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Номенклатура уже участвует в товародвижении. 
                             |Тип номенклатуры не может быть изменен'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВидНоменклатуры",, Отказ);
		КонецЕсли;
		
		Если Не ВестиУчетПоСериям И Ссылка.ВестиУчетПоСериям И ПолныеПрава.Номенклатура_СуществуютСсылкиНаСерииВРегистрахНакопления(Ссылка) Тогда
			ТекстСообщения = НСтр("ru = 'Номенклатура уже участвует в товародвижении. 
                             |Признак ""Вести учет по сериям"" не может быть изменен!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВестиУчетПоСериям",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Обработчик события элемента ПриКопировании.
//
Процедура ПриКопировании(ОбъектКопирования)

	
	Если Не ЭтоГруппа Тогда
		ЕдиницаХраненияОстатков = Неопределено;
		ЕдиницаДляОтчетов       = Неопределено;
		ЕдиницаИзмеренияМест    = Неопределено;
		ОсновноеИзображение     = Неопределено;
		НазначениеИспользования = Неопределено;
		Попытка
			абс_НоменклатураДЗОилиВнешнейСистемы = "";//абс мэппинг номенклатуры
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	//АБС+ 9493
	абс_КодAxapta 				=   "";
	Артикул       				=   "";
	абс_НеИспользовать 			=   Ложь;
	абс_ОсновнаяНоменклатура 	=   Справочники.Номенклатура.ПустаяСсылка();
	//АБС- 9493
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ)
	
	//Крамаренко
	Если ЭтоНовый() Тогда
		УстановитьНовыйКод("10000");		
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		//Реквизит нужен для поиска дублей
		абс_УникальноеИмя = УбратьСпецСимволы(ПолучитьСтрокуНаЛатинском(?(ЗначениеЗаполнено(НаименованиеПолное),НаименованиеПолное,Наименование)));	
	КонецЕсли;
	
	Если ЭтоГруппа И НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("абс_СотрудникНСИ")) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав для создания группы!", Отказ);
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА №000022516 НАЧАЛО
	Если не ЭтоГруппа
		и не РольДоступна("ПолныеПрава")
		и мРолиПользователя.Найти(Справочники.РолиИсполнителей.ИспользованиеНестандартныхЕИ) = Неопределено 
		и мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь) = Неопределено
		и БазоваяЕдиницаИзмерения.абс_НестандартныеЕИ Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав для записи номенклатуры с нестандартной базовой единицей!", Отказ);
		Возврат;
	КонецЕсли;
	//\\АБС ВСТАВКА №000022516 КОНЕЦ
	
	Если абс_СтатусНоменклатуры 			= Перечисления.абс_СтатусыНоменклатуры.Использование И 
		Ссылка.абс_СтатусНоменклатуры 	= Перечисления.абс_СтатусыНоменклатуры.Использование И НЕ РольДоступна("ПолныеПрава") Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		ПрошлыйИзмененныйРодительОбъектаДоступа = ?(Не ЭтоНовый() и Не Ссылка.Родитель = Родитель, Ссылка.Родитель, Неопределено);
		НастройкаПравДоступа.ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаДляОтчетов) Тогда
			ЕдиницаДляОтчетов = ЕдиницаХраненияОстатков;
		КонецЕсли;
		
		Услуга   = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
		Набор    = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
		Комплект = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект);

		Если Услуга ИЛИ Набор Тогда
			ВестиУчетПоХарактеристикам = Ложь;
		КонецЕсли;

		Если ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
			
			ВестиУчетПоСериям 				 = Ложь;
			ВестиПартионныйУчетПоСериям 	 = Ложь;
			Весовой 						 = Ложь;
			ВестиОперативныйУчетОстатковНЗП  = Ложь;
			ВестиУчетПоСериямВНЗП 			 = Ложь;
			ВестиСерийныеНомера 			 = Ложь;

			НомерГТД                         = Неопределено;
			СтранаПроисхождения              = Неопределено;
			НазначениеИспользования          = Неопределено;
			ПорядокПрисвоенияСерийногоНомера = Неопределено;
			НаправлениеВыпуска               = Неопределено;
			
		КонецЕсли;		
	КонецЕсли;
	
	//АБС Добавлено 08.01.11
	
	Если ЭтоНовый() И НЕ ЭтоГруппа Тогда
		абс_Ответственный = глЗначениеПеременной("глТекущийПользователь");		
		
		Если НЕ ЗначениеЗаполнено(абс_СтатусНоменклатуры) Тогда
			абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.Подготовка;
		КонецЕсли;
		
	КонецЕсли;	
	//\\АБС Добавлено 08.01.11
	
	
	// АБС ВСТАВКА 20110211
	// Только сотрудник НСИ может менять группу номенклатуры не в статусе Подготовка
	Если НЕ Родитель = Ссылка.Родитель Тогда
		// Изменен родитель
		
		мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
		
		Если (НЕ абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.Подготовка) И
			 (мРолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникГруппыНСИ) = Неопределено) Тогда
			 
			 ttk_ОбщегоНазначения.СообщитьОбОшибке("Только сотрудник группы НСИ может изменять группу номенклатуры.", Отказ);
			 
		КонецЕсли;	 
	КонецЕсли;
	// АБС ВСТАВКА 20110211 КОНЕЦ
	
	// АБС ВСТАВКА Фролов Заполним строку характеристик
	Если НЕ ЭтоГруппа Тогда
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Владелец");
								  
			Запрос.УстановитьПараметр("Владелец", Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			абс_СтрокаХарактеристик = "";
			
			Пока Выборка.Следующий() Цикл
				Если абс_СтрокаХарактеристик = "" Тогда
					абс_СтрокаХарактеристик = СокрЛП(Выборка.Ссылка);
					Продолжить;
				КонецЕсли;
				
				абс_СтрокаХарактеристик = абс_СтрокаХарактеристик + "; "+ СокрЛП(Выборка.Ссылка);			
			КонецЦикла;
		Иначе
			
			абс_СтрокаХарактеристик = "";
			
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА Фролов КОНЕЦ
	      
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если НЕ ОбменДанными.Загрузка Тогда
		НастройкаПравДоступа.ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка,ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ);
	КонецЕсли;	
	
	//АБС Коломиец+
	//ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	//РолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(ТекущийПользователь);
	//
	//Если РолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь)  = Неопределено
	//   И РолиПользователя.Найти(Справочники.РолиИсполнителей.СотрудникГруппыНСИ) = Неопределено Тогда		
	//	Если Не Услуга Тогда			
	//		СтруктураСчетовУчета = абс_СлужебныеФункции.ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений(Неопределено, ЭтотОбъект, Неопределено);
	//		СчетБУ = СтруктураСчетовУчета.СчетУчетаБУ;			
	//		Если ЗначениеЗаполнено(СчетБУ) Тогда
	//			Если Не ВестиУчетПоСериям Тогда
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи номенклатуры: " +
	//				" По счету номенклатуры учет ведется по сериям", Отказ);					
	//			КонецЕсли;
	//			Если Не ВестиУчетПоХарактеристикам Тогда
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи номенклатуры: " +
	//				" По счету номенклатуры учет ведется по доп.характеристикам", Отказ);					
	//			КонецЕсли;
	//			Если (СтруктураСчетовУчета.ПоПартиям И Не ВестиПартионныйУчетПоСериям) Тогда
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи номенклатуры: " +
	//				" По счету номенклатуры учет ведется по партиям", Отказ);				
	//			ИначеЕсли (СтруктураСчетовУчета.ПоСредней И ВестиПартионныйУчетПоСериям) Тогда
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи номенклатуры: " +
	//				" По счету номенклатуры не ведется учет по партиям", Отказ);		
	//			КонецЕсли;
	//		КонецЕсли;			
	//	КонецЕсли;
	//КонецЕсли;
	//АБС Коломиец-
	
	// АБС ВСТАВКА СогласованиеНоменклатуры 
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	Попытка
		СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусНоменклатурыПоРегистру(Ссылка);
		
		Если НЕ абс_СтатусНоменклатуры = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру) Тогда
			ЗаписатьНовыйСтатус(абс_СтатусНоменклатуры, абс_ПричинаИзмененияСтатуса);		
		КонецЕсли;
		
		СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
		
		Если Не СогласованиеБезБП Тогда
			// Запустим БП если он еще не запущен
			Если абс_СтатусНоменклатуры = Перечисления.абс_СтатусыНоменклатуры.СогласованиеНСИ Тогда
				БПСогласование = НайтиБПСогласование();
				
				Если Не ЗначениеЗаполнено(БПСогласование) Тогда
					абс_БизнесПроцессы.ЗапуститьБПСогласованияНоменклатуры(Ссылка);	
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
			
		//абс мэппинг номенклатуры начало
		Попытка
			абс_ПроцедурыОбмена.ЗарегистрироватьВерсиюНоменклатуры(ЭтотОбъект,Отказ);
		Исключение
		КонецПопытки;
		
		Если Не СогласованиеБезБП Тогда
			//абс мэппинг номенклатуры Конец
			
			//Попробуем закрыть задачу согласования
			ЗадачаСогласование = ПолучитьЗадачуПоНоменклатуреСогласование();
			
			Если ЗадачаСогласование = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если НЕ ЗадачаСогласование.Выполнена Тогда
				
				ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();			
				ЗадачаОбъект.ВыполнитьЗадачу();
			КонецЕсли;
		КонецЕсли;
     // АБС Изменение Родин Отключение бизнес-процессов 110314

	Исключение
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при записи номенклатуры: " + ОписаниеОшибки() + ".", Отказ);		
		Возврат;
	КонецПопытки;
	// АБС ВСТАВКА СогласованиеНоменклатуры КОНЕЦ
	КонецПроцедуры

// АБС ВСТАВКА СогласованиеНоменклатуры
Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовНоменклатуры.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();

	Запись.Номенклатура			= Ссылка;
	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусНоменклатуры	= НовыйСтатус;
	
	Запись.Комментарий 			= Комментарий;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоНоменклатуре(Ссылка, "абсСогласованиеНоменклатуры");	
	
КонецФункции

Функция ПолучитьЗадачуПоНоменклатуреСогласование() Экспорт
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	
	Статус = Ссылка.абс_СтатусНоменклатуры;
	
	Если Статус = Перечисления.абс_СтатусыНоменклатуры.Подготовка Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеНоменклатуры.ТочкиМаршрута.ДействиеОтказаноВСогласовании);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыНоменклатуры.СогласованиеНСИ Тогда
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеНоменклатуры.ТочкиМаршрута.ПовторнаяПодготовка);
		//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ИначеЕсли Статус = Перечисления.абс_СтатусыНоменклатуры.Отказ Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеНоменклатуры.ТочкиМаршрута.ДействиеУтверждениеГруппойНСИ);
		
	ИначеЕсли Статус = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеНоменклатуры.ТочкиМаршрута.ДействиеУтверждениеГруппойНСИ);

	ИначеЕсли Статус = Перечисления.абс_СтатусыНоменклатуры.Архив Тогда
		
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеНоменклатуры.ТочкиМаршрута.ДействиеНоменклатураУтверждена);
		СпТочек.Добавить(БизнесПроцессы.абсСогласованиеНоменклатуры.ТочкиМаршрута.ДействиеОтказаноВСогласовании);
	КонецЕсли;	
		
	Возврат абс_БизнесПроцессы.НайтиЗадачуЗЗ(БП, СпТочек ,, Ложь);
	
КонецФункции
// АБС ВСТАВКА СогласованиеНоменклатуры

//Все буквы переведем на латиницу
Функция ПолучитьСтрокуНаЛатинском(Знач ИсходныйТекст)
	
	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "B");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "E");
	СоответствиеСимволов.Вставить("Ж", "ZH");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "H");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "C");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "KH");
	СоответствиеСимволов.Вставить("Ц", "TS");
	СоответствиеСимволов.Вставить("Ч", "CH");
	СоответствиеСимволов.Вставить("Ш", "SH");
	СоответствиеСимволов.Вставить("Щ", "SHCH");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "YU");
	СоответствиеСимволов.Вставить("Я", "YA");
	
	ИсходныйТекст = СокрЛП(ВРег(ИсходныйТекст));
	ГотовоеЗначение = "";
	ТекущийСимвол = "";
	ТекущийГотовыйСимвол = "";
	
	Для к = 1 по СтрДлина(ИсходныйТекст) Цикл
		ТекущийСимвол = Сред(ИсходныйТекст, к, 1);
		ТекущийГотовыйСимвол = СоответствиеСимволов.Получить(ТекущийСимвол);
		Если ТекущийГотовыйСимвол = Неопределено Тогда
			ГотовоеЗначение = ГотовоеЗначение + ТекущийСимвол;
		Иначе
			ГотовоеЗначение = ГотовоеЗначение + ТекущийГотовыйСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГотовоеЗначение;
	
КонецФункции 

Функция УбратьСпецСимволы(Знач Строка)
	
	ОбрСтр = СокрЛП(Строка);
	Результат = ОбрСтр;
	Для Н = 1 по СтрДлина(ОбрСтр) Цикл
		ТекСимвол = Сред(ОбрСтр,Н,1);
		Если не ((КодСимвола(ТекСимвол) >= 48 и КодСимвола(ТекСимвол) <= 57))
			И не ((КодСимвола(ТекСимвол) >= 65 и КодСимвола(ТекСимвол) <= 90))
			И не ((КодСимвола(ТекСимвол) >= 97 и КодСимвола(ТекСимвол) <= 122))Тогда
			Результат = СтрЗаменить(Результат,ТекСимвол,"");
		КонецЕсли;
	КонецЦикла;	
	             
	Возврат Результат;
	
КонецФункции

мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);