
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидДанных	= Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	Объект 		= ДанныеЗаполнения.Объект;
	
КонецПроцедуры
	
Процедура ПередЗаписью(Отказ)
	
	Если ПометкаУдаления И НЕ Ссылка.ПометкаУдаления Тогда
		Если НЕ РольДоступна("ПолныеПрава") Тогда
		    РазрешеноУдалитьФайл = Ложь;
			
			мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"),
				?(Объект.Метаданные().Реквизиты.Найти("Организация") <> Неопределено, Объект.Организация, Неопределено));
			Если мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПравоУстановкиПометкиУдаленияВложений) <> Неопределено Тогда
				РазрешеноУдалитьФайл = Истина;
			КонецЕсли;		
			//// Проверим статус объекта файла.
			//ТипОбъекта = ТипЗнч(Объект);
			//РазрешеноУдалитьФайл = Ложь;			
			//Если ТипОбъекта = Тип("ДокументСсылка.абс_ЗакупочныйЗаказ") Тогда				
			//	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"), Объект.Организация);
			//	Если Объект.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка И мРолиПользователя.Найти(Справочники.РолиИсполнителей.ПравоУстановкиПометкиУдаленияВложений) <> Неопределено Тогда
			//		РазрешеноУдалитьФайл = Истина;
			//	КонецЕсли;							
			//ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.абс_СчетНаОплату") Тогда
			//	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"), Объект.Организация);
			//	Если Объект.СтатусСчета = Перечисления.абсСтатусыСчетов.Подготовка Тогда
			//		РазрешеноУдалитьФайл = Истина;
			//	КонецЕсли;				
			//ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
			//	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"));
			//	Если Объект.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Подготовка Тогда
			//		РазрешеноУдалитьФайл = Истина;
			//	КонецЕсли;				
			//ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			//	мРолиПользователя = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(глЗначениеПеременной("глТекущийПользователь"), Объект.Организация);
			//	Если Объект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Подготовка Тогда
			//		РазрешеноУдалитьФайл = Истина;
			//	КонецЕсли;				
			//Иначе				
			//	РазрешеноУдалитьФайл = Истина;				
			//КонецЕсли;			
			
			Если НЕ РазрешеноУдалитьФайл Тогда
				ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено удалять файлы!", Отказ);
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		абс_ИнициаторФайла = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	//SLADKOV 14 07 2017 ++
	Если Не ЗначениеЗаполнено(абс_ИнициаторФайла) Тогда		
		Отказ = Истина;
		Сообщить("Не заполнен инициатор файла");		
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(абс_ДатаПрикрепленияФайла)  Тогда
		Отказ = Истина;
		Сообщить("Не заполнена Дата файла");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда		
		Отказ = Истина;
		Сообщить("Не заполнено Имя Файла");		
	КонецЕсли;	
	//SLADKOV 14 07 2017 --
	
КонецПроцедуры

//sladkov 13 01 2017 ++
Процедура ПередУдалением(Отказ)
	
	//Перед удалением необходимо проверить есть ли ссылки на данный объект из других элементов справочника
	
	//Проверка выполняеться в любом случае, даже при обмене данными, иначе можно удалить нужные файлы
	
	ЗапросПроверкаСсылок = новый ЗАпрос;
	
	ЗапросПроверкаСсылок.Текст = "ВЫБРАТЬ
	                             |	ХранилищеДополнительнойИнформации.Ссылка,
	                             |	ХранилищеДополнительнойИнформации.Объект
	                             |ИЗ
	                             |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	                             |ГДЕ
	                             |	ХранилищеДополнительнойИнформации.ttk_СсылкаНаАналогичныйФайл = &ТекущийФайл";

	ЗапросПроверкаСсылок.УстановитьПараметр("ТекущийФайл",Ссылка);
				
	ВыборкаПроверка = ЗапросПроверкаСсылок.Выполнить().Выбрать();
	
	Если ВыборкаПроверка.Следующий() Тогда
		
		Сообщить("Есть ссылки на объект: "+ ВыборкаПроверка.Ссылка+" Документ:" +ВыборкаПроверка.Объект+ " удаление элемента запрещено!");

		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
//sladkov 13 01 2017 --
 