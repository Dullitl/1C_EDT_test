&НаКлиенте
Перем ТекущаяСтраницыНавигации;

//ВСТАВКА Проектный учет 140114 Родин
Перем мТекущийПользователь;
Перем мРолиПользователя;
//ВСТАВКА Проектный учет 140114 Родин

/////////////////////////////////////////////////////////////
// Навигация по разделам

&НаКлиенте
Процедура ПерейтиКРазделу(ТекстКоманды)
	
	Если Найти(ТекстКоманды, "Назад") = 0 Тогда
		ТекущаяСтраницыНавигации = Элементы.Страницы.ТекущаяСтраница;
	КонецЕсли;
	
	Если ТекстКоманды = "ПерейтиКОписаниеПроекта" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОписаниеПроекта;
		Элементы.ЗаголовокРаздела.Заголовок = "Описание проекта";
	ИначеЕсли ТекстКоманды = "ПерейтиКИсполнители" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаИсполнители;
		Элементы.ЗаголовокРаздела.Заголовок = "Исполнители";	
	ИначеЕсли ТекстКоманды = "ПерейтиКЗаказыПокупателя" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Группаабс_Заказы;
		Элементы.ЗаголовокРаздела.Заголовок = "Заказы покупателей";	
	ИначеЕсли ТекстКоманды = "ПерейтиКСвойстваПроекта" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСвойстваПроекта;
		Элементы.ЗаголовокРаздела.Заголовок = "Свойства проекта";	
	ИначеЕсли ТекстКоманды = "ПерейтиКВнутренниеЛимиты" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Группаабс_ВнутренниеЛимиты;
		Элементы.ЗаголовокРаздела.Заголовок = "Внутренние лимиты";	
	ИначеЕсли ТекстКоманды = "ПерейтиКПланДоходов" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПланДоходовРасходовОплат;
		Элементы.ЗаголовокРаздела.Заголовок = "План доходов";	
		РазделПланирования = ПредопределенноеЗначение("Перечисление.абс_ВидыУсловийОплатПоДоговорам.Реализация");
		ЗаполнитьДеревоПлановыхДанных(РазделПланирования);
	ИначеЕсли ТекстКоманды = "ПерейтиКПланДоходовОплаты" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПланДоходовРасходовОплат;
		Элементы.ЗаголовокРаздела.Заголовок = "План доходов (оплаты)";	
		РазделПланирования = ПредопределенноеЗначение("Перечисление.абс_ВидыУсловийОплатПоДоговорам.РеализацияДДС");
		ЗаполнитьДеревоПлановыхДанных(РазделПланирования);
	ИначеЕсли ТекстКоманды = "ПерейтиКПланРасходов" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПланДоходовРасходовОплат;
		Элементы.ЗаголовокРаздела.Заголовок = "План расходов";	
		РазделПланирования = ПредопределенноеЗначение("Перечисление.абс_ВидыУсловийОплатПоДоговорам.Поступление");
		ЗаполнитьДеревоПлановыхДанных(РазделПланирования);
	ИначеЕсли ТекстКоманды = "ПерейтиКПланРасходовОплаты" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПланДоходовРасходовОплат;
		Элементы.ЗаголовокРаздела.Заголовок = "План расходов (оплаты)";	
		РазделПланирования = ПредопределенноеЗначение("Перечисление.абс_ВидыУсловийОплатПоДоговорам.ПоступлениеДДС");
		ЗаполнитьДеревоПлановыхДанных(РазделПланирования);
	ИначеЕсли ТекстКоманды = "ОтчетХодПроекта" Тогда 		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор", Отбор);
		Форма = ПолучитьФорму("Отчет.абс_ХодПроектаСОплатами.Форма.ФормаОтчета", , ЭтаФорма);
		Форма.мСтруктураПараметров = СтруктураПараметров;
		Форма.Открыть();
	ИначеЕсли ТекстКоманды = "ОтчетПоСуммарнымПрогнознымОбязательствам" Тогда 		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор", Отбор);
		Форма = ПолучитьФорму("Отчет.абс_ОтчетПоСуммарнымПрогнознымОбязательствам.Форма.ФормаОтчета", , ЭтаФорма);
		Форма.мСтруктураПараметров = СтруктураПараметров;
		Форма.Открыть();	
	ИначеЕсли ТекстКоманды = "ОтчетВходящиеИсходящиеПлатежиПоПроектам" Тогда 		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор, СформироватьПриОткрытии", Отбор, Истина);
		ОткрытьФорму("Отчет.абс_ВходящиеИсходящиеПлатежиПоПроектам.Форма.ФормаОтчета", СтруктураПараметров, ЭтаФорма);
	ИначеЕсли ТекстКоманды = "ОтчетЗатратыПоПроектам" Тогда 		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор", Отбор);
		Форма = ПолучитьФорму("Отчет.абс_ЗатратыПоПроектам.Форма.ФормаОтчета", , ЭтаФорма);
		Форма.мСтруктураПараметров = СтруктураПараметров;
		Форма.Открыть();
	ИначеЕсли ТекстКоманды = "ОтчетСтатусПроекта" Тогда		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор, СформироватьПриОткрытии", Отбор, Истина);
		ОткрытьФорму("Отчет.абс_СтатусыПроектов.Форма.ФормаОтчетаУправляемая", СтруктураПараметров, ЭтаФорма);
	ИначеЕсли ТекстКоманды = "ПерейтиКДоговорыКонтрагентов" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДоговоры;
		Элементы.ЗаголовокРаздела.Заголовок = "Договоры контрагентов";
		ДоговорыПоПроекту.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ДоговорыПоПроекту.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
		Элементы.ГруппаДоговоры.Видимость = Истина;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ИначеЕсли ТекстКоманды = "ПерейтиЗакупочныеЗаказы" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаЗакупочныеЗаказы;
		Элементы.ЗаголовокРаздела.Заголовок = "Закупочные заказы";	
		ЗакупочныеЗаказы.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ЗакупочныеЗаказы.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
		ОплатыЗЗ.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);	
		ПоставкиЗЗ.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
		Элементы.ГруппаЗакупочныеЗаказы.Видимость = Истина;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ИначеЕсли ТекстКоманды = "ПерейтиКРеализации" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаРеализацииИПлатежи;
		Элементы.ЗаголовокРаздела.Заголовок = "Реализации и оплаты";		
		РеализацииИОплаты.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		РеализацииИОплаты.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
		Элементы.ГруппаРеализацииИПлатежи.Видимость = Истина;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ИначеЕсли ТекстКоманды = "ОтчетПоставкиИОплытПоПроекту" Тогда 		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор", Отбор);
		Форма = ПолучитьФорму("Отчет.абс_ПоставкиИОплатыПоПроекту_КВиТЗ.Форма.ФормаОтчета", , ЭтаФорма);
		Форма.мСтруктураПараметров = СтруктураПараметров;
		Форма.Открыть();
	ИначеЕсли ТекстКоманды = "ОтчетКонтрольВнутреннихЛимитов" Тогда 		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор", Отбор);
		Форма = ПолучитьФорму("Отчет.абс_КонтрольВнутреннихЛимитов.Форма.ФормаОтчета", , ЭтаФорма);
		Форма.мСтруктураПараметров = СтруктураПараметров;
		Форма.Открыть();	
	ИначеЕсли ТекстКоманды = "ПерейтиКЭтапыПроекта" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаЭтапыПроектов;
		Элементы.ЗаголовокРаздела.Заголовок = "Этапы проектов";		
		ОбновитьДанныеЭтаповКлиент();
	ИначеЕсли ТекстКоманды = "ПерейтиКОбъектыСтроительства" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОбъектыСтроительства;
		Элементы.ЗаголовокРаздела.Заголовок = "Объекты строительства";	
		ОбъектыСтроительства.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ОбъектыСтроительства.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
	ИначеЕсли ТекстКоманды = "ПерейтиКИТР" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаИТР;
		Элементы.ЗаголовокРаздела.Заголовок = "ИТР";
		ИТР.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ИТР.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
		Элементы.ГруппаИТР.Видимость = Истина;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ИначеЕсли ТекстКоманды = "ОтчетОсновныеСредства" Тогда 		
		СформироватьОтчет("абс_ОсновныеСредстваПоПроектам");
	ИначеЕсли ТекстКоманды = "ОтчетОбъектыСтроительства" Тогда 		
		СформироватьОтчет("абс_ОбъектыСтроительстваПоПроектам");
	ИначеЕсли ТекстКоманды = "ОтчетОборудованиеПоПроектам" Тогда
		СформироватьОтчет("абс_ОборудованиеПоПроектам");
	ИначеЕсли ТекстКоманды = "ОтчетРасходыПоПроектам" Тогда
		СформироватьОтчет("абс_РасходыПоПроектам");
	//АБС ВСТАВКА 45953  29.08.2014 19:24:53  Стрельцов
	ИначеЕсли ТекстКоманды = "ОтчетСебестоимостьПроекта" Тогда 		
		Отбор = Новый Структура("Проект", Объект.Ссылка);
		СтруктураПараметров = Новый Структура("Отбор", Отбор);
		Форма = ПолучитьФорму("Отчет.абс_СебестоимостьПроекта.Форма.ФормаОтчета", , ЭтаФорма);
		Форма.абс_СтруктураПараметров = СтруктураПараметров;
		Форма.Открыть();
	//\\АБС ВСТАВКА 45953 КОНЕЦ
	ИначеЕсли Не Найти(ТекстКоманды, "Назад") = 0 Тогда 
		//Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГлавноеМеню;
		Если ТекущаяСтраницыНавигации <> Неопределено И (ТипЗнч(ТекущаяСтраницыНавигации) = Тип("ГруппаФормы")) Тогда
			Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраницыНавигации;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОписаниеПроекта;		
		КонецЕсли;
		Элементы.ЗаголовокРаздела.Заголовок = "Разделы";
		ОтключитьДинамическиеСписки();
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаДоговоры.Видимость = Ложь;
		Элементы.ГруппаИТР.Видимость = Ложь;
		Элементы.ГруппаЗакупочныеЗаказы.Видимость = Ложь;
		Элементы.ГруппаРеализацииИПлатежи.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Процедуры обработчики событий элементов управления формы

&НаКлиенте
Процедура ПерейтиКРазделуПроектаНажатие(Элемент)
	ПерейтиКРазделу(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьТекстПериода();
	
	//АБС ВСТАВКА 14.01.14	Проектный учет Родин
	ЗаполнитьСтатусНаСервере();
	мСтатус = Объект.абс_Статус;
	//АБС ВСТАВКА 14.01.14	Проектный учет Родин
	
	// Установка параметров динамических списокв при открытии формы
	УстановитьПараметрыДинамическихСписков();
	ОтключитьДинамическиеСписки();
	ЗаполнитьДеревоСвойств();
	
	УстановитьВидимость();

КонецПроцедуры

//АБС ВСТАВКА 14.01.14	Проектный учет Родин
&НаСервере
Процедура ЗаполнитьСтатусНаСервере()
//ВСТАВКА Проектный учет 20171213 Родин  изменено
	Справочники.Проекты.ЗаполнитьСписокДоступныхСтатусов(Элементы.Статус.СписокВыбора, Объект.Ссылка,мРолиПользователя,мТекущийПользователь);
//ВСТАВКА Проектный учет 20171213 Родин  изменено
КонецПроцедуры
//АБС ВСТАВКА 14.01.14	Проектный учет Родин

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	//ЗаполнитьСтатусНаСервере();
	Объект.абс_Статус = мСтатус;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//АБС ВСТАВКА 14.01.14	Проектный учет Родин
	мСтатус = Объект.абс_Статус;
	ЗаполнитьСтатусНаСервере();
	//АБС ВСТАВКА 14.01.14	Проектный учет Родин
	
	УстановитьПараметрыДинамическихСписков();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПериодТекстНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПериодПроекта = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	ДП = Новый ДиалогРедактированияСтандартногоПериода();
	ДП.Период = ПериодПроекта;
	Если ДП.Редактировать() Тогда 		
		Объект.ДатаНачала = ДП.Период.ДатаНачала;
		Объект.ДатаОкончания = ДП.Период.ДатаОкончания;
	КонецЕсли;
	ОбновитьТекстПериода();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("ПериодРегистрации, Регистратор, ДоговорКонтрагента, Сумма");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущаяСтрока);
	ТекущаяСтрокаИД = ПриОкончанииРедактированияДереваДанных(СтруктураПараметров, НоваяСтрока, ОтменаРедактирования, РазделПланирования);		
	// Развернем принудительно после обновления
	КорниДерева = ДеревоПлан.ПолучитьЭлементы();
	Для Каждого СтрокаДоговор Из КорниДерева Цикл 
		Элементы.ДеревоПлан.Развернуть(СтрокаДоговор.ПолучитьИдентификатор(), Истина);	
	КонецЦикла;
	// Установим текущую строку
	Если ЗначениеЗаполнено(ТекущаяСтрокаИД) Тогда 
		Элементы.ДеревоПлан.ТекущаяСтрока = ТекущаяСтрокаИД;     
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеализацииИОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено И ЗначениеЗаполнено(ТекСтрока.Документ) Тогда 
		ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД


&НаКлиенте
Процедура ЗаполнитьЭтапыИзГруппы(Команда)
	
	ЗаполнитьЭтапыПроектов("ИзГруппы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапыИзГруппы(Команда)
	
	ЗаполнитьЭтапыПроектов("ИзГруппы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоВидуПроекта(Команда)
	
	ЗаполнитьЭтапыПроектов("ПоВидуПроекта", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВидуПроекта(Команда)
	
	ЗаполнитьЭтапыПроектов("ПоВидуПроекта");	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭтап(Команда)
	СоздатьНовыйЭтапКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭтап2(Команда)
	СоздатьНовыйЭтапКлиент2();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоЭтапов(Команда)
	ОбновитьДеревоЭтаповКлиент();
	Если ЗначениеЗаполнено(Элементы.ДеревоЭтапы.ТекущаяСтрока) Тогда 
		Элементы.ДеревоЭтапы.Развернуть(Элементы.ДеревоЭтапы.ТекущаяСтрока, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаСледующийЭтап(Команда)
	Если Объект.абс_ЭтапыПроектов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	ИндексТекущегоЭтапа = ПолучитьИндексТекущегоЭтапаСервер();
	Если ИндексТекущегоЭтапа = -1 Тогда 
		Объект.абс_ТекущийЭтап = Объект.абс_ЭтапыПроектов[0].Этап;
	ИначеЕсли Объект.абс_ЭтапыПроектов.Количество() > ИндексТекущегоЭтапа + 1 Тогда 
		Объект.абс_ТекущийЭтап = Объект.абс_ЭтапыПроектов[ИндексТекущегоЭтапа + 1].Этап;
	Иначе 
		Возврат;
	КонецЕсли;
	ОтразитьПереходНаЭтапВРегистре();
	ОбновитьДанныеЭтаповКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаПредыдущийЭтап(Команда)
	Если Объект.абс_ЭтапыПроектов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	ИндексТекущегоЭтапа = ПолучитьИндексТекущегоЭтапаСервер();
	Если ИндексТекущегоЭтапа = -1 Тогда 
		Объект.абс_ТекущийЭтап = Объект.абс_ЭтапыПроектов[0].Этап;
	ИначеЕсли ИндексТекущегоЭтапа > 0 Тогда 
		Объект.абс_ТекущийЭтап = Объект.абс_ЭтапыПроектов[ИндексТекущегоЭтапа - 1].Этап;
	Иначе 
		Возврат;
	КонецЕсли;
	ОтразитьПереходНаЭтапВРегистре();
	ОбновитьДанныеЭтаповКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЭтапов(Команда)
	Отбор = Новый Структура("Проект", Объект.Ссылка);
	СтруктураПараметров = Новый Структура("Отбор, СформироватьПриОткрытии", Отбор, Истина);
	ОткрытьФорму("РегистрСведений.абс_ДвижениеПроектовПоЭтапам.Форма.ФормаНабораЗаписей", СтруктураПараметров, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДоговоры(Команда)
	
	ПерейтиКРазделу("ПерейтиКДоговорыКонтрагентов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВсеРазделы(Команда)
	
	ПерейтиКРазделу("Назад");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиИТР(Команда)

	ПерейтиКРазделу("ПерейтиКИТР");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиЗакупочныеЗаказы(Команда)
	
	ПерейтиКРазделу("ПерейтиЗакупочныеЗаказы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиРеализацииПлатежи(Команда)
	
	ПерейтиКРазделу("ПерейтиКРеализации");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоКомиссии(Команда)
	
	ЗаполнитьИсполнителейПоКомиссииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПроектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	ЭлементыОтбора = Новый Структура("Проект, Период", Объект.Ссылка, НачалоМесяца(ТекущаяДата()));
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
	ОткрытьФормуМодально("Справочник.Проекты.Форма.ФормаЗаписиРесурсовПроекта", ПараметрыФормы);
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРесурсов(Команда)
	Отбор = Новый Структура("Проект", Объект.Ссылка);
	СтруктураПараметров = Новый Структура("Отбор, СформироватьПриОткрытии", Отбор, Истина);
	ОткрытьФорму("РегистрСведений.абс_РесурсыПоПроектамБаза.Форма.ФормаНабораЗаписей", СтруктураПараметров, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ТекстКоманды = ТекущаяСтраница.Имя;
	ОтключитьДинамическиеСписки();
	Если ТекстКоманды = "ГруппаДоговоры" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаДоговоры;
		ДоговорыПоПроекту.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ДоговорыПоПроекту.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
	ИначеЕсли ТекстКоманды = "ГруппаЗакупочныеЗаказы" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаЗакупочныеЗаказы;		
		ЗакупочныеЗаказы.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ЗакупочныеЗаказы.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
		ОплатыЗЗ.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);	
		ПоставкиЗЗ.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
	ИначеЕсли ТекстКоманды = "ГруппаЭтапыПроектов" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаЭтапыПроектов;		
		ОбновитьДанныеЭтаповКлиент();
	ИначеЕсли ТекстКоманды = "ГруппаЭтапыПроектаДерево" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаЭтапыПроектаДерево;		
		ОбновитьДеревоЭтаповКлиент();
		ОбновитьДанныеЭтаповКлиент();
	ИначеЕсли ТекстКоманды = "ГруппаОбъектыСтроительства" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОбъектыСтроительства;		
		ОбъектыСтроительства.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ОбъектыСтроительства.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
	ИначеЕсли ТекстКоманды = "ГруппаИТР" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаИТР;		
		ИТР.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
		ИТР.Параметры.УстановитьЗначениеПараметра("Формировать", Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПериодПроекта = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	ДП = Новый ДиалогРедактированияСтандартногоПериода();
	ДП.Период = ПериодПроекта;
	Если ДП.Редактировать() Тогда 		
		Объект.ДатаНачала = ДП.Период.ДатаНачала;
		Объект.ДатаОкончания = ДП.Период.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не Отказ Тогда 
		ЗаписатьДанныеЭтаповСервер();
	КонецЕсли;
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ДЕРЕВО СВОЙСТВ

&НаСервере
Процедура ЗаполнитьДеревоСвойств()

    ЗначениеВРеквизитФормы(ПланыВидовХарактеристик.абс_СвойстваПроектов.ПолучитьДеревоСвойств(Объект.Ссылка), "ДеревоСвойств");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ
		(НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Свойство)) Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементУправления = Элементы.ДеревоСвойств.ТекущийЭлемент;
	
	Если НЕ Элемент.ТекущиеДанные.ТипСтроки Тогда 
		
		//приведение типа
		ТекущийТип = Элемент.ТекущиеДанные.ТипЗначения;        //.ПривестиЗначение(Элемент.ТекущиеДанные.Значение.Значение)
		ЭлементУправления.ОграничениеТипа = ТекущийТип; 
		Элемент.ТекущиеДанные.Значение = ТекущийТип.ПривестиЗначение(Элемент.ТекущиеДанные.Значение);

		//настройка элемента управления
		ЭлементУправления.РедактированиеТекста = Истина;
		ЭлементУправления.КнопкаОчистки = Истина;
		Если (ТипЗнч(Элемент.ТекущиеДанные.Значение) = Тип("Строка")) Тогда 
			ЭлементУправления.КнопкаВыбора = Ложь;
			ЭлементУправления.КнопкаОткрытия = Ложь;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.Значение)) Тогда 
	   		ЭлементУправления.КнопкаОткрытия = Истина;
			ЭлементУправления.КнопкаВыбора = Истина;
		Иначе
			ЭлементУправления.КнопкаОткрытия = Ложь;
			ЭлементУправления.КнопкаВыбора = Истина;	
		КонецЕсли;
	//	
	//	//Назначим маску
	//	Если ЭлементыФормы.ДеревоСвойств.ТекущаяКолонка.Имя = "Значение" Тогда
	//		Если ЭлементыФормы.ДеревоСвойств.ТекущаяСтрока.Свойство = ПланыВидовХарактеристик.абс_СвойстваОС.КадастровыйНомерОбъектаНедвижимости Тогда  
	//			//АА:ВВССРРLL:КК
	//			ЭлементыФормы.ДеревоСвойств.ТекущаяКолонка.ЭлементУправления.Маска = "99:99999999:99";
	//		Иначе
	//			ЭлементыФормы.ДеревоСвойств.ТекущаяКолонка.ЭлементУправления.Маска = "";
	//		КонецЕсли;
	//	КонецЕсли;
	//		
	Иначе 		
		//для строк групп редакировать ничего нельзя
		ЭлементУправления.РедактированиеТекста = Ложь;
		ЭлементУправления.КнопкаОткрытия = Ложь;
		ЭлементУправления.КнопкаВыбора = Ложь;	
		ЭлементУправления.КнопкаОчистки = Ложь;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвойствПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ
		(НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Свойство)) Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементУправления = Элементы.ДеревоСвойств.ТекущийЭлемент;
	
	Если ЭлементУправления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элемент.ТекущиеДанные.ТипСтроки Тогда 
		ЭлементУправления.ТолькоПросмотр = Ложь;		
 	Иначе 
		ЭлементУправления.ТолькоПросмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.абс_СвойстваПроектов.ЗаписатьЗначенияСвойствПроекта(РеквизитФормыВЗначение("ДеревоСвойств"), ТекущийОбъект.Ссылка);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// ЭТАПЫ ПРОЕКТОВ

&НаКлиенте
Процедура ОбновитьДанныеЭтаповКлиент()
	ОбновитьИнфоЭтапаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнфоЭтапаКлиент()
	 ТекущийЭтапИнфо = ПолучитьИнфоЭтапаСервер();
КонецПроцедуры	

&НаСервере
Функция ПолучитьИнфоЭтапаСервер()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	абс_ДвижениеПроектовПоЭтапамСрезПоследних.Период,
	|	абс_ДвижениеПроектовПоЭтапамСрезПоследних.ЭтапПроекта,
	|	абс_ДвижениеПроектовПоЭтапамСрезПоследних.Ответственный
	|ИЗ
	|	РегистрСведений.абс_ДвижениеПроектовПоЭтапам.СрезПоследних(, Проект = &Проект) КАК абс_ДвижениеПроектовПоЭтапамСрезПоследних";
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Строка(Выборка.ЭтапПроекта) + " (" + Строка(Выборка.Ответственный) + ", " + Формат(Выборка.Период, "ДФ=dd.MM.yyyy") + ")";
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Функция ПолучитьИндексТекущегоЭтапаСервер()
	СтрокиЭтапа = Объект.абс_ЭтапыПроектов.НайтиСтроки(Новый Структура("Этап", Объект.абс_ТекущийЭтап));
	Если СтрокиЭтапа.Количество() = 0 Тогда 
		Возврат -1;
	КонецЕсли;
	ТекСтрока = СтрокиЭтапа[0];
	Возврат Объект.абс_ЭтапыПроектов.Индекс(ТекСтрока);
КонецФункции

&НаСервере
Процедура ОтразитьПереходНаЭтапВРегистре()
	НаборЗаписей = РегистрыСведений.абс_ДвижениеПроектовПоЭтапам.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
	НоваяЗапись.ЭтапПроекта = Объект.абс_ТекущийЭтап;
	НоваяЗапись.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	НоваяЗапись.Проект = Объект.Ссылка;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.Сообщение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйЭтапСервер()
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭтапКлиент()
	Форма = ПолучитьФорму("Справочник.Проекты.Форма.ФормаНовогоЭтапа");
	Форма.Проект = Объект.Ссылка;
	ДобавитьЭлемент = Форма.ОткрытьМодально();
	Если ДобавитьЭлемент = Истина Тогда 
		НоваяСтрока = Объект.абс_ЭтапыПроектов.Добавить();
		НоваяСтрока.Этап = Форма.ЭтапПроекта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭтапКлиент2(ЭтоГруппа = Ложь)
	ТекСтрока = Элементы.ДеревоЭтапы.ТекущиеДанные;
	ИмяЭтапа = "";
	Если ТекСтрока = Неопределено Тогда 
		Если ДеревоЭтапы.ПолучитьЭлементы().Количество() = 0 Тогда 
			Если ЭтоГруппа Тогда 
				ТекРодитель = ДеревоЭтапы;
				ТекРодительЭтапПроекта = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
				ИмяЭтапа = Объект.Наименование;
			Иначе 
				Сообщить("Нельзя добавлять этапы, пока не задана группа");
				Возврат;
			КонецЕсли;
		Иначе 
			ТекРодитель = ДеревоЭтапы.ПолучитьЭлементы()[0];
			ТекРодительЭтапПроекта = ТекРодитель.ЭтапПроекта;
		КонецЕсли;		
	Иначе 
		Если ТекСтрока.Картинка = 0 Тогда // это группа
			ТекРодитель = ТекСтрока;
		Иначе 
			ТекРодитель = ТекСтрока.ПолучитьРодителя();
		КонецЕсли;
		ТекРодительЭтапПроекта = ТекРодитель.ЭтапПроекта;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;	
	СтруктураПараметров.Вставить("Родитель", ТекРодительЭтапПроекта);
	СтруктураПараметров.Вставить("ЭтоГруппа", ЭтоГруппа);
	СтруктураПараметров.Вставить("Проект", Объект.Ссылка);
	СтруктураПараметров.Вставить("Имя", ИмяЭтапа);
	
	
	Форма = ПолучитьФорму("Справочник.Проекты.Форма.ФормаНовогоЭтапа");
	ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметров);
	ДобавитьЭлемент = Форма.ОткрытьМодально();
	
	Если ДобавитьЭлемент Тогда 
		НоваяСтрока = ТекРодитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ЭтапПроекта = Форма.ЭтапПроекта;
		НоваяСтрока.Картинка = ?(ЭтоГруппа, 0, 2);
		ОбновитьНумерациюЭтаповСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеЭтаповСервер()
	
	
	НовоеДерево = РеквизитФормыВЗначение("ДеревоЭтапы");
	ОбъектОбъект = РеквизитФормыВЗначение("Объект");
	ОбъектОбъект.абс_ЭтапыПроектов.Очистить();
	ЗаписатьДеревоЭтаповВТЧ(НовоеДерево.Строки, ОбъектОбъект.абс_ЭтапыПроектов);
	ЗначениеВРеквизитФормы(ОбъектОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоЭтаповВТЧ(СтрокиДерева, ТабЧасть)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл 
		Если СтрокаДерева.ЭтапПроекта.ЭтоГруппа = Ложь Тогда 
			НоваяСтрока = ТабЧасть.Добавить();
			НоваяСтрока.Этап = СтрокаДерева.ЭтапПроекта;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		КонецЕсли;
		ЗаписатьДеревоЭтаповВТЧ(СтрокаДерева.Строки, ТабЧасть)
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоЭтаповКлиент()
	ОбновитьДеревоЭтаповСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЭтаповСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ЭтапыПроектов.Ссылка КАК ЭтапПроекта,
	|	Проектыабс_ЭтапыПроектов.ДатаНачала КАК ДатаНачала,
	|	Проектыабс_ЭтапыПроектов.ДатаОкончания КАК ДатаОкончания,
	|	Проектыабс_ЭтапыПроектов.Статус,
	|	1 КАК Картинка
	|ИЗ
	|	Справочник.абс_ЭтапыПроектов КАК абс_ЭтапыПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты.абс_ЭтапыПроектов КАК Проектыабс_ЭтапыПроектов
	|		ПО (Проектыабс_ЭтапыПроектов.Этап = абс_ЭтапыПроектов.Ссылка)
	|ГДЕ
	|	абс_ЭтапыПроектов.Проект = &Проект
	|	И абс_ЭтапыПроектов.ЭтоГруппа = ЛОЖЬ
	|	И абс_ЭтапыПроектов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	абс_ЭтапыПроектов.Порядок
	|ИТОГИ
	|	МИНИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МИНИМУМ(Картинка)
	|ПО
	|	ЭтапПроекта ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	НовоеДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДополнитьДеревоЭтапов(НовоеДерево.Строки);
	ЗначениеВРеквизитФормы(НовоеДерево, "ДеревоЭтапы");
КонецПроцедуры

&НаСервере
Процедура ДополнитьДеревоЭтапов(СтрокиДерева)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл 
		СтрокаДерева.Картинка = ?(СтрокаДерева.ЭтапПроекта.ЭтоГруппа, 0, 2); 
		Если Не СтрокаДерева.ЭтапПроекта.ЭтоГруппа Тогда 
			СтрокаДерева.Строки.Очистить();
		КонецЕсли;
		ДополнитьДеревоЭтапов(СтрокаДерева.Строки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыПроектов(Отбор, Добавить = Ложь)
	
	Если Не Добавить И Объект.абс_ЭтапыПроектов.Количество() Тогда
		Ответ = Вопрос("Табличная часть ""Этапы проектов"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
			
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Отбор);
	
	Если Отбор = "ИзГруппы" Тогда
		Форма = ПолучитьФорму("Справочник.абс_ЭтапыПроектов.ФормаВыбораГруппы");
		Группа = форма.ОткрытьМодально();
		
		Если Группа = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Группа", Группа);
	Иначе
		СтруктураПараметров.Вставить("ВидПроекта", Объект.абс_ВидПроекта);
	КонецЕсли;
	
	Если Не Добавить Тогда
		Объект.абс_ЭтапыПроектов.Очистить();
	КонецЕсли;
	
	Этапы = ПолучитьЭтапыСервер(СтруктураПараметров);
	
	Для Каждого Элемент Из Этапы Цикл
		
		Если Добавить И Объект.абс_ЭтапыПроектов.НайтиСтроки(Новый Структура("Этап", Элемент)).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.абс_ЭтапыПроектов.Добавить();
		НоваяСтрока.Этап = Элемент;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезконтекста
Функция ПолучитьЭтапыСервер(СтруктураПараметров)
	
	Перем Отбор, Группа, ВидПроекта;
	
	СтруктураПараметров.Свойство("Отбор",     Отбор);
	СтруктураПараметров.Свойство("Группа",    Группа);
	СтруктураПараметров.Свойство("ВидПроекта",ВидПроекта);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	абс_ЭтапыПроектов.Ссылка
	               |ИЗ
	               |	Справочник.абс_ЭтапыПроектов КАК абс_ЭтапыПроектов
	               |ГДЕ
	               |	НЕ абс_ЭтапыПроектов.ЭтоГруппа
	               |	И абс_ЭтапыПроектов.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)" +
				   ?(Отбор = "ИзГруппы", " И абс_ЭтапыПроектов.Ссылка В ИЕРАРХИИ (&Группа)", " И абс_ЭтапыПроектов.ВидПроекта = &ВидПроекта") + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	абс_ЭтапыПроектов.Порядок";
	
	
	Запрос.Параметры.Вставить("Группа", Группа);
	Запрос.Параметры.Вставить("ВидПроекта", ВидПроекта);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

 /////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаКлиенте
Процедура ОбновитьТекстПериода()
	 Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		ПериодТекст = "<Ввести сроки проекта>";
	Иначе 
		ПериодТекст = Формат(Объект.ДатаНачала, "ДФ='""с"" dd MMMM yyyy ""г.""'") + Формат(Объект.ДатаОкончания, "ДФ='""по"" dd MMMM yyyy ""г.""'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновтиьТаблицуПланирования()
	ЗаполнитьДеревоПлановыхДанных(РазделПланирования);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПлановыхДанных(УсловиеОплаты)
	
	Запрос  = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации,
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	абс_УсловияОплатыПоДоговорамСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(абс_УсловияОплатыПоДоговорамСрезПоследних.Сумма, 0) КАК Сумма,
	|	абс_УсловияОплатыПоДоговорамСрезПоследних.ПериодРегистрации,
	|	ЕСТЬNULL(абс_УсловияОплатыПоДоговорамСрезПоследних.СуммаРегл, 0) КАК СуммаРегл,
	|	абс_УсловияОплатыПоДоговорамСрезПоследних.Регистратор
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.абс_УсловияОплатыПоДоговорам.СрезПоследних(
	|			,
	|			Проект = &Проект
	|				И ВЫБОР
	|					КОГДА &ВидУсловияДоговора <> НЕОПРЕДЕЛЕНО
	|						ТОГДА УсловиеОплаты = &ВидУсловияДоговора
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ОперативныеДанные = ЛОЖЬ) КАК абс_УсловияОплатыПоДоговорамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДоговорКонтрагента
	|ПОМЕСТИТЬ втДоговоры
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ВТПериоды.ПериодРегистрации,
	|	СУММА(ВТПериоды.Сумма) КАК Сумма,
	|	СУММА(ВТПериоды.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ ВТВсеПериоды
	|ИЗ
	|	ВТПериоды КАК ВТПериоды,
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				втДоговоры.ДоговорКонтрагента
	|			ИЗ
	|				втДоговоры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.ПериодРегистрации,
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	ВТПериоды.ПериодРегистрации,
	|	ВТПериоды.Сумма,
	|	ВТПериоды.СуммаРегл
	|ИЗ
	|	ВТПериоды КАК ВТПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВсеПериоды.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТВсеПериоды.ПериодРегистрации,
	|	ЕСТЬNULL(ВТ.СуммаРегл, 0) КАК Сумма,
	|	ЕСТЬNULL(ВТ.СуммаРегл, 0) КАК СуммаРегл,
	|	ЛОЖЬ КАК ПервыйУровень,
	|	ВТ.Регистратор
	|ИЗ
	|	ВТВсеПериоды КАК ВТВсеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	|		ПО ВТВсеПериоды.ПериодРегистрации = ВТ.ПериодРегистрации
	|			И ВТВсеПериоды.ДоговорКонтрагента = ВТ.ДоговорКонтрагента
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаРегл)
	|ПО
	|	ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидУсловияДоговора", УсловиеОплаты);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
	
	// Для условного оформления
	Для Каждого СтрокаДерева Из ДЗ.Строки Цикл 
		СтрокаДерева.ПервыйУровень = Истина;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗ, "ДеревоПлан");
	
КонецПроцедуры

&НаСервере
Функция ПриОкончанииРедактированияДереваДанных(ТекущиеДанные, НоваяСтрока, ОтменаРедактирования, УсловиеОплаты, ОперДанные = Ложь)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПериодРегистрации) Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Регистратор) И НачалоДня(ТекущиеДанные.Регистратор.Дата) = НачалоДня(ТекущаяДата()) Тогда
			
			РегистраторОбъект = ТекущиеДанные.Регистратор.ПолучитьОбъект();

		Иначе
			
			РегистраторОбъект = Документы.абс_ПлановыйГрафикОплат.СоздатьДокумент();	
			РегистраторОбъект.Год = НачалоГода(ТекущиеДанные.ПериодРегистрации);
			РегистраторОбъект.ДоговорКонтрагента = Объект.Ссылка;
			РегистраторОбъект.Дата = ТекущаяДата();
			РегистраторОбъект.Проект = Объект.Ссылка;
			РегистраторОбъект.УсловиеОплаты = УсловиеОплаты;

			РегистраторОбъект.ОперативныеДанные = ОперДанные;
			РегистраторОбъект.ДоговорКонтрагента = ТекущиеДанные.ДоговорКонтрагента;
			
			Если ТекущиеДанные.Сумма = 0 Тогда 
				РегистраторОбъект.ДвиженияПоНулевымСуммам = Истина;	
				РегистраторОбъект.Оплаты.Очистить();
				
				НоваяСтрока = РегистраторОбъект.Оплаты.Добавить();
				НоваяСтрока.ПериодРегистрации = ТекущиеДанные.ПериодРегистрации;
			Иначе
				РегистраторОбъект.ПерезаполнитьТЧПоУмолчанию(Ложь);	
			КонецЕсли;
			
		КонецЕсли;
		
		НайденнаяСтрока = РегистраторОбъект.Оплаты.Найти(ТекущиеДанные.ПериодРегистрации, "ПериодРегистрации");
		Если НайденнаяСтрока = Неопределено Тогда 
			НоваяСтрока = РегистраторОбъект.Оплаты.Добавить();
			НоваяСтрока.ПериодРегистрации = ТекущиеДанные.ПериодРегистрации;
			НайденнаяСтрока = НоваяСтрока;
		КонецЕсли;
		
		Если ТекущиеДанные.Сумма <> 0 Тогда
			НайденнаяСтрока.Сумма = ТекущиеДанные.Сумма;
		КонецЕСли;
		
		Попытка
			РегистраторОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ИнформацияОбОшибке());
		КонецПопытки;
		
		ЗаполнитьДеревоПлановыхДанных(УсловиеОплаты);
		
		// 1 Вариант получения идентификатора строки. Поиск по стеку
		СтекПоиска = Новый Массив;
		СтекПоиска.Добавить(Новый Структура("ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента));
		СтекПоиска.Добавить(Новый Структура("ПериодРегистрации", ТекущиеДанные.ПериодРегистрации));
		ИДСтроки = ПолучитьИдентификаторСтрокиПоСтекуПоиска(ДеревоПлан, СтекПоиска);
		
		// 2 Вариант получения идентификатора строки. Поиск по дереву значений
		//ПараметрыОтбора = Новый Структура;
		//ПараметрыОтбора.Вставить("ПериодРегистрации", ТекущиеДанные.ПериодРегистрации);
		//ПараметрыОтбора.Вставить("ДоговорКонтрагента",ТекущиеДанные.ДоговорКонтрагента);
		//ИДСтроки2 = ПолучитьИдентификаторСтрокиПоДереву(ПараметрыОтбора);
		
		Возврат ИДСтроки;
	КонецЕсли;
	
	Возврат 0;	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторСтрокиПоСтекуПоиска(ДеревоФормы, СтекПоиска)
	ИДСтроки = 0;
	МассивСтрок = ДеревоФормы.ПолучитьЭлементы();
	СтруктураПоиска = СтекПоиска[0];
	СтекПоиска.Удалить(0);
	Для Каждого СтрокаДерева Из МассивСтрок Цикл 
		СтрокаНайдена = Истина;
		Для Каждого ЭлементПоиска Из СтруктураПоиска Цикл 
			Если Не СтрокаДерева[ЭлементПоиска.Ключ] = ЭлементПоиска.Значение Тогда 
				СтрокаНайдена = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаНайдена Тогда 
			Если СтекПоиска.Количество() = 0 Тогда 
				Возврат СтрокаДерева.ПолучитьИдентификатор();
			Иначе 
				ИДСтроки = ПолучитьИдентификаторСтрокиПоСтекуПоиска(СтрокаДерева, СтекПоиска);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ИДСтроки;
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторСтрокиПоДереву(ПараметрыОтбора)
	
	ДЗ = РеквизитФормыВЗначение("ДеревоПлан");		
	
	НайденныеСтроки = ДЗ.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	Если НайденныеСтроки.Количество() = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	НайденнаяСтрока = НайденныеСтроки[0];
	МассивИндексов = ПолучитьМассивИндексовСтроки(ДЗ.Строки, НайденнаяСтрока, Новый Массив);
	ИДСтроки = ПолучитьИдентификаторСтрокиПоИндексам(ДеревоПлан, МассивИндексов);
	Возврат ИДСтроки;

КонецФункции

&НаСервере
Функция ПолучитьМассивИндексовСтроки(СтрокиПервогоУровня, СтрокаДерева, МассивИндексов)
	Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда 
		МассивИндексов.Добавить(СтрокаДерева.Родитель.Строки.Индекс(СтрокаДерева));
		ПолучитьМассивИндексовСтроки(СтрокиПервогоУровня, СтрокаДерева.Родитель, МассивИндексов);
	Иначе 
		МассивИндексов.Добавить(СтрокиПервогоУровня.Индекс(СтрокаДерева));
	КонецЕсли;
	Возврат МассивИндексов;
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторСтрокиПоИндексам(ДеревоФормы, МассивИндексов)	
	ИДСтроки = Неопределено;
	МассивСтрок = ДеревоФормы.ПолучитьЭлементы();
	ИндексСтроки = МассивИндексов[МассивИндексов.ВГраница()];
	МассивИндексов.Удалить(МассивИндексов.ВГраница());
	СтрокаДерева = МассивСтрок[ИндексСтроки];
	Если МассивИндексов.Количество() > 0 Тогда 
		ИДСтроки = ПолучитьИдентификаторСтрокиПоИндексам(СтрокаДерева, МассивИндексов);
	Иначе 
		Возврат СтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;	
	Возврат ИДСтроки;
КонецФункции

&НаКлиенте
Процедура ЗакупочныеЗаказыПриАктивизацииСтроки(Элемент)
	ПоставкиЗЗ.Параметры.УстановитьЗначениеПараметра("ЗакупочныйЗаказ", Элемент.ТекущаяСтрока);
	ОплатыЗЗ.Параметры.УстановитьЗначениеПараметра("ЗакупочныйЗаказ", Элемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Объект.абс_Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыПроектов.Действует") Тогда 
		УстановитьТолькоПросмотрГруппы(Элементы.ГруппаОписаниеПроекта, Истина);
	КонецЕсли;
	
	//ВСТАВКА Проектный учет 140114 Родин
	Если Объект.абс_Статус = ПредопределенноеЗначение("Перечисление.абс_СтатусыПроектов.Действует") Тогда 
		Элементы.Статус.ТолькоПросмотр = Ложь;	
	Иначе
		Элементы.Статус.ТолькоПросмотр = Истина;	
	КонецЕсли;
	//ВСТАВКА Проектный учет 140114 Родин
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотрГруппы(ГруппаЭлементов, Отметка)
	Для Каждого ЭлементОписание Из ГруппаЭлементов.ПодчиненныеЭлементы Цикл 
		Если ТипЗнч(ЭлементОписание) = Тип("ДекорацияФормы") Тогда 
			Продолжить;
		ИначеЕсли ТипЗнч(ЭлементОписание) = Тип("ГруппаФормы") Тогда 
			УстановитьТолькоПросмотрГруппы(ЭлементОписание, Отметка);
		КонецЕсли;
		ЭлементОписание.ТолькоПросмотр = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьДинамическиеСписки()
	ДоговорыПоПроекту.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	ЗакупочныеЗаказы.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	ОплатыЗЗ.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	РеализацииИОплаты.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	ПоставкиЗЗ.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	ОбъектыСтроительства.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	//АБС ВСТАВКА Проектный учет  09.12.2013 12:23:41  Глебов
	ИТР.Параметры.УстановитьЗначениеПараметра("Формировать", Ложь);
	//АБС ВСТАВКА Проектный учет КОНЕЦ 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоКомиссииНаСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КомиссияТМЦЧленыКомиссии.ЧленКомиссии КАК абс_ФизЛицо
	                      |ИЗ
	                      |	Справочник.КомиссияТМЦ.ЧленыКомиссии КАК КомиссияТМЦЧленыКомиссии
	                      |ГДЕ
	                      |	КомиссияТМЦЧленыКомиссии.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	КомиссияТМЦЧленыКомиссии.ЧленКомиссии");
	Запрос.УстановитьПараметр("Ссылка", Объект.абс_Комиссия);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если Объект.Исполнители.НайтиСтроки(Новый Структура("абс_ФизЛицо", Выборка.абс_ФизЛицо)).Количество() = 0 Тогда 
			ЗаполнитьЗначенияСвойств(Объект.Исполнители.Добавить(), Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков()
	ДоговорыПоПроекту.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
	ЗакупочныеЗаказы.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
	РеализацииИОплаты.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
	ОбъектыСтроительства.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
	РесурсыПроекта.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
	ИТР.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
	ПоставкиЗЗ.Параметры.УстановитьЗначениеПараметра("ЗакупочныйЗаказ", Неопределено);
	ОплатыЗЗ.Параметры.УстановитьЗначениеПараметра("ЗакупочныйЗаказ", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Отчет)
		
	ОтчетОбъект = Отчеты[Отчет].Создать();
	ФормаОтчета = ОтчетОбъект.ПолучитьФорму();
	
	ФормаОтчета.Открыть();
	ФормаОтчета.Обновить();  
	
	//Установка периода отчета
	Если Отчет = "абс_ОборудованиеПоПроектам" Тогда
		ФормаОтчета.УниверсальныйОтчет.ДатаНач = НачалоГода(ТекущаяДата());
		ФормаОтчета.УниверсальныйОтчет.ДатаКон = КонецГода(ТекущаяДата());
	Иначе
		ФормаОтчета.СтандартныйПериод.ДатаНачала = НачалоГода(ТекущаяДата());;
		ФормаОтчета.СтандартныйПериод.ДатаОкончания = КонецГода(ТекущаяДата());	
	
		ФормаОтчета.ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;
	КонецЕсли;
	
	//Установка Отбора по проекту
	Если Отчет = "абс_ОборудованиеПоПроектам" Тогда
		ОтборПроект = ФормаОтчета.УниверсальныйОтчет.ПостроительОтчета.Отбор.Проект;
		ОтборПроект.Использование = Истина;
		ОтборПроект.ВидСравнения  = ВидСравнения.Равно;
		ОтборПроект.Значение      = Объект.Ссылка;
	Иначе
		Отбор = ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.Отбор;
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Проект");
		ОтборПоПроекту = Ложь;
	
		Для Каждого Строка Из Отбор.Элементы  Цикл
			
			Если Строка.ЛевоеЗначение = ПолеКомпоновкиДанных Тогда
				Строка.Использование = Истина;
				Строка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Строка.ПравоеЗначение = Объект.Ссылка;
				ОтборПоПроекту = Истина;
			КонецЕсли;
		
		КонецЦикла;                                        
		
		Если Не ОтборПоПроекту Тогда  
			НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));   
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ЛевоеЗначение = ПолеКомпоновкиДанных;
			НовыйОтбор.ПравоеЗначение = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЭтапыПоШаблону(Команда)
	ФормаВыбораШаблона = ПолучитьФорму("Справочник.абс_ЭтапыПроектов.Форма.ФормаВыбораГруппы", , ЭтаФорма);
	ФормаВыбораШаблона.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.абс_ЭтапыПроектов") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		СоздатьЭтапыСервер(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьЭтапыСервер(ШаблонКорень)
	Корень = ШаблонКорень.Скопировать();
	Корень.Проект = Объект.Ссылка;
	Корень.Наименование = Объект.Наименование;
	Корень.Записать();
	
	ДеревоДляКопирования = ПолучитьДеревоДляКопирования(ШаблонКорень);
	Для Каждого СтрокаДерева Из ДеревоДляКопирования.Строки Цикл 
		ОбработатьНовуюСтруктуруЭтапов(Корень.Ссылка, СтрокаДерева.Строки, Объект.Ссылка);
	КонецЦикла;
	
	ОбновитьДеревоЭтаповСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьНовуюСтруктуруЭтапов(Родитель, Строки, Проект)
	Для Каждого ЭтапПроекта Из Строки Цикл 
		НовыйЭтап = ЭтапПроекта.Ссылка.Скопировать();
		НовыйЭтап.Родитель = Родитель;
		НовыйЭтап.Проект = Проект;
		НовыйЭтап.Записать();
		ОбработатьНовуюСтруктуруЭтапов(НовыйЭтап.Ссылка, ЭтапПроекта.Строки, Проект)
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоДляКопирования(Корень)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ЭтапыПроектов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.абс_ЭтапыПроектов КАК абс_ЭтапыПроектов
	|ГДЕ
	|	абс_ЭтапыПроектов.ПометкаУдаления = ЛОЖЬ
	|	И абс_ЭтапыПроектов.Ссылка В ИЕРАРХИИ(&Корень)
	|	И абс_ЭтапыПроектов.ЭтоГруппа = ЛОЖЬ
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Корень", Корень);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
КонецФункции

&НаКлиенте
Процедура ОбновитьНумерациюЭтапов(Команда)
	ОбновитьНумерациюЭтаповСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюЭтаповСервер()
	ДеревоФакт = ДанныеФормыВЗначение(ДеревоЭтапы, Тип("ДеревоЗначений"));
	ТекущийПорядок = "";
	Если ДеревоФакт.Строки.Количество() > 0 Тогда 
		ОбновитьНумерациюСтрок(ДеревоФакт.Строки[0].Строки, ТекущийПорядок);
	КонецЕсли;
	Объект.абс_ЭтапыПроектов.Сортировать("Этап");
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюСтрок(Строки, ТекущийПорядок)
	Сч = 1;
	Для Каждого СтрокаЭтап Из Строки Цикл 
		УстановитьПорядокЭтапа(СтрокаЭтап.ЭтапПроекта, ТекущийПорядок + ?(ЗначениеЗаполнено(ТекущийПорядок), ".", "") + Строка(Сч), СтрокаЭтап.ЭтапПроекта.Родитель, СтрокаЭтап.Родитель.ЭтапПроекта);
		ОбновитьНумерациюСтрок(СтрокаЭтап.Строки, ТекущийПорядок + ?(ЗначениеЗаполнено(ТекущийПорядок), ".", "") + Строка(Сч));
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокЭтапа(Этап, Порядок, ТекущийРодитель, НовыйРодитель)
	ЭтапО = Этап.ПолучитьОбъект();
	ЭтапО.Порядок = Порядок;
	ЭтапО.Наименование = СокрЛП(ЭтапО.Порядок + " " + ЭтапО.Имя);
	Если Не ТекущийРодитель = НовыйРодитель Тогда 
		ЭтапО.Родитель = НовыйРодитель;
	КонецЕсли;
	ЭтапО.Записать();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппуЭтапов(Команда)
	СоздатьНовыйЭтапКлиент2(Истина);
КонецПроцедуры

// АБС Вставка "Перетаскивание" этапов
&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник, Перемещение = Истина)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

	
	Если Приемник = Неопределено Тогда
		// Добавляем в корень
		НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
	Иначе
		Если Приемник.Картинка = 0 Тогда // Это группа, добавим к ней строку
			НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		Иначе // Это этап, вставим новую строку после него, но на том же уровне
			ТекущийРодитель = Приемник.ПолучитьРодителя();
			ПриемникИндекс = ТекущийРодитель.ПолучитьЭлементы().Индекс(Приемник);
			НоваяСтрока = ТекущийРодитель.ПолучитьЭлементы().Вставить(ПриемникИндекс + 1);
		КонецЕсли;
	КонецЕсли;
	
    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока, Перемещение);
    КонецЦикла;

	Если Перемещение Тогда 
		Если Источник.ПолучитьРодителя() = Неопределено Тогда
			РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
		Иначе
			Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
		КонецЕсли;
	КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Процедура ЭлементДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

    // Узел нельзя переносить в узлы подчиненные ему самому
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов

    СтандартнаяОбработка = Ложь;

    РеквизитДерево = ДеревоЭтапы;

    ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева
    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;

    Для Каждого ИДПереносимыйЭлемент Из МассивИДПереносимыхЭлементов Цикл

        ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ИДПереносимыйЭлемент);

        Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель) Тогда
            ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
            Прервать;
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЭлементДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

    СтандартнаяОбработка = Ложь;

    РеквизитДерево = ДеревоЭтапы;

    ИДПриемник = Строка;
    // Если ИДПриемник = Неопределено => Корень дерева
    Приемник = ?(ИДПриемник = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

    МассивИДИсточник = ПараметрыПеретаскивания.Значение;

    Для Каждого ИДИсточник Из МассивИДИсточник Цикл
        Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник);
        НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник, ПараметрыПеретаскивания.Действие = ПредопределенноеЗначение("ДействиеПеретаскивания.Перемещение"));
		
		Если ПараметрыПеретаскивания.Действие = ПредопределенноеЗначение("ДействиеПеретаскивания.Копирование") Тогда 
			НовыйРодитель = ?(Приемник.Картинка = 0, Приемник.ЭтапПроекта, Приемник.ПолучитьРодителя().ЭтапПроекта);
			СкопироватьЭлементСИерархией(НоваяСтрока, НовыйРодитель);
		КонецЕсли;
        
        Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда
            Элементы.ДеревоЭтапы.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
        КонецЕсли;
    КонецЦикла;

    Если НЕ Приемник = Неопределено Тогда
        Элементы.ДеревоЭтапы.Развернуть(ИДПриемник, Истина);
    КонецЕсли;

	ОбновитьНумерациюЭтаповСервер();
КонецПроцедуры

&НаКлиенте  
Процедура СкопироватьЭлементСИерархией(Ветка, НовыйРодитель)
	НовыйЭлемент = СкопироватьЭлемент(Ветка.ЭтапПроекта, НовыйРодитель);
	Если НовыйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Ветка.ЭтапПроекта = НовыйЭлемент;
	Для Каждого СтрокаДерева Из Ветка.ПолучитьЭлементы() Цикл 
		СкопироватьЭлементСИерархией(СтрокаДерева, НовыйЭлемент);
	КонецЦикла;
КонецПроцедуры	

&НаСервере  
Функция СкопироватьЭлемент(ТекущийЭтап, НовыйРодитель)
	ЭтапО = ТекущийЭтап.Скопировать();
	ЭтапО.Родитель = НовыйРодитель;
	Попытка 
		ЭтапО.Записать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат ЭтапО.Ссылка;
КонецФункции

&НаКлиенте
Процедура ПереименоватьЭтап(Команда)
	ТекСтрока = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ИмяЭтапа = ПолучитьРеквизит(ТекСтрока.ЭтапПроекта, "Имя");
	Если ВвестиСтроку(ИмяЭтапа, "Введите наименование этапа") Тогда 
		ОбновитьИмяЭтапаСервер(ТекСтрока.ЭтапПроекта, ИмяЭтапа);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИмяЭтапаСервер(ЭтапПроекта, ИмяЭтапа)
	ЭтапО = ЭтапПроекта.ПолучитьОбъект();
	ЭтапО.Имя = ИмяЭтапа;
	ЭтапО.Наименование = СокрЛП(ЭтапО.Порядок + " " + ЭтапО.Имя);
	ЭтапО.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизит(ОбъектДанных, ИмяРеквизита)
	Возврат ОбъектДанных[ИмяРеквизита];
КонецФункции

&НаКлиенте
Процедура ЭлементВниз(Команда)
	ТекСтрока = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущийРодитель = ТекСтрока.ПолучитьРодителя();
	ИндексТекущегоЭлементаКоллекции = ТекущийРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
	КоличествоЭлементовКоллекции = ТекущийРодитель.ПолучитьЭлементы().Количество();

	Если ИндексТекущегоЭлементаКоллекции < КоличествоЭлементовКоллекции - 1 Тогда
		ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ИндексТекущегоЭлементаКоллекции, 1);
	КонецЕсли;
	ОбновитьНумерациюЭтаповСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЭлементВверх(Команда)
	ТекСтрока = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекСтрока.ПолучитьРодителя();
	ИндексТекущегоЭлементаКоллекции = ТекущийРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
	Если ИндексТекущегоЭлементаКоллекции > 0 Тогда
		ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ИндексТекущегоЭлементаКоллекции, -1);
	КонецЕсли;
	ОбновитьНумерациюЭтаповСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭтапыПослеУдаления(Элемент)
	ПометитьЭтапНаУдалениеСервер();
	ОбновитьНумерациюЭтаповСервер();
КонецПроцедуры

&НаСервере
Процедура ПометитьЭтапНаУдалениеСервер()
	Этап = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Если ЗначениеЗаполнено(Этап) Тогда 
		ЭтапО = Этап.ПолучитьОбъект();
		ЭтапО.УстановитьПометкуУдаления(Истина, Истина);
		Сч = Объект.абс_ЭтапыПроектов.Количество();
		Пока Сч > 0 Цикл 
			СтрокаТЧ = Объект.абс_ЭтапыПроектов[Сч - 1];
			Если СтрокаТЧ.Этап = Этап Или СтрокаТЧ.Этап.ПринадлежитЭлементу(Этап) Тогда 
				Объект.абс_ЭтапыПроектов.Удалить(СтрокаТЧ);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭтапыПередУдалением(Элемент, Отказ)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено Тогда 
		ЭтапДляУдаления = ТекСтрока.ЭтапПроекта;
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ЭтапДляУдаления, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

//Родин проектный учет
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Запрещено добавлять новые элементы без заявки!";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
//Родин проектный учет

// АБС Вставка \\






//ВСТАВКА Проектный учет 140114 Родин
мТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
мРолиПользователя 		= абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
//ВСТАВКА Проектный учет 140114 Родин



