//==========================Процедуры для  получения отпечатка версии объекта ( начало)
Функция РазборПредставленияОбъектаXML(СтрокаXML, Ссылка)
	
	// содержит имя метаданного измененного объекта
	Перем ИмяОбъекта;
	
	// Содержит положение маркера в дереве XML.
	// Требуется для идентификации текущего элемента.
	Перем УровеньЧтения;
	
	// Содержат значения реквизитов справочников / документов
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияРеквизитов.Колонки.Добавить("НаименованиеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ТипРеквизита");
	
	ТабличныеЧасти = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	// уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части
	УровеньЧтения = 0;
	
	ТабличныеЧастиМТД = Ссылка.Метаданные().ТабличныеЧасти;
	
	ТипЗначения = "";
	
	// основной цикл разбора по XML
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			УровеньЧтения = УровеньЧтения + 1;
			Если УровеньЧтения = 1 Тогда // указатель на первом элементе XML - корень XML
				ИмяОбъекта = ЧтениеXML.Имя;
			ИначеЕсли УровеньЧтения = 2 Тогда // указатель на втором уровне - это реквизит или имя табличной части
				ИмяРеквизита = ЧтениеXML.Имя;
				Если ТабличныеЧастиМТД.Найти(ИмяРеквизита) <> Неопределено Тогда
					ИмяТабличнойЧасти = ИмяРеквизита;
					// создаем новую таблицу значений в таблице соответствий
					Если ТабличныеЧасти[ИмяТабличнойЧасти] = Неопределено Тогда
						ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Новый ТаблицаЗначений);
					КонецЕсли;
				КонецЕсли;
				НовоеЗР = ЗначенияРеквизитов.Добавить();
				НовоеЗР.НаименованиеРеквизита = ИмяРеквизита;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
							И ЧтениеXML.Имя = "xsi:type" Тогда
							НовоеЗР.ТипРеквизита = ЧтениеXML.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли (УровеньЧтения = 3) и (ЧтениеXML.Имя = "Row") Тогда // указатель на поле табличной части
				ТабличныеЧасти[ИмяТабличнойЧасти].Добавить();
			ИначеЕсли УровеньЧтения = 4 Тогда // указатель на поле табличной части
				
				ИмяПоляТЧ = ЧтениеXML.Имя; // 
				Таблица   = ТабличныеЧасти[ИмяТабличнойЧасти];
				Если Таблица.Колонки.Найти(ИмяПоляТЧ)= Неопределено Тогда
					Таблица.Колонки.Добавить(ИмяПоляТЧ);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;
			ТипЗначения = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (УровеньЧтения = 2) Тогда // значение реквизита
				НовоеЗР.ЗначениеРеквизита = ЧтениеXML.Значение;
				//ЗначенияРеквизитов[ИмяРеквизита] = ЧтениеXML.Значение;
				
			ИначеЕсли (УровеньЧтения = 4) Тогда // значение реквизита
				ПоследняяСтрока = ТабличныеЧасти[ИмяТабличнойЧасти].Получить(ТабличныеЧасти[ИмяТабличнойЧасти].Количество()-1);
				ПоследняяСтрока[ИмяПоляТЧ] = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 2-й этап: из списка реквизитов исключаем табличные части
	Для Каждого Элемент Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Удалить(ЗначенияРеквизитов.Найти(Элемент.Ключ));
	КонецЦикла;
	//ТабличныеЧастиМТД
	Для Каждого ЭлементСоответствия Из ТабличныеЧасти Цикл
		Таблица = ЭлементСоответствия.Значение;
		Если Таблица.Колонки.Количество() = 0 Тогда
			ТаблицаМТД = ТабличныеЧастиМТД.Найти(ЭлементСоответствия.Ключ);
			Если ТаблицаМТД <> Неопределено Тогда
				Для Каждого ОписаниеКолонки Из ТаблицаМТД.Реквизиты Цикл
					Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
						Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", ЗначенияРеквизитов);
	Результат.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат Результат;
	
КонецФункции
Функция РазборВерсии(НомерВерсии, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ АвторВерсии, ДатаВерсии, ВерсияОбъекта 
	|ИЗ РегистрСведений.ВерсииОбъектов
	|ГДЕ Объект = &Ссылка
	|И НомерВерсии = &НомВер";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомВер", Число(НомерВерсии));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВерсияОбъекта = Выборка.ВерсияОбъекта.Получить();
	
	Если ВерсияОбъекта = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ВерсияОбъекта.Записать(ИмяВременногоФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		
		Результат = РазборПредставленияОбъектаXML(СтрокаXML, Ссылка);
		Результат.Вставить("ИмяОбъекта", Строка(Ссылка));
		Результат.Вставить("АвторИзменения", СокрЛП(Строка(Выборка.АвторВерсии)));
		Результат.Вставить("ДатаИзменения", Выборка.ДатаВерсии);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции
Функция ПолучитьПредставлениеРеквизитаНаЯзыке(знач ИмяРеквизита)
	
	Если      ИмяРеквизита = "Number" Тогда
		Возврат НСтр("ru = 'Номер'; en='Number'");
	ИначеЕсли ИмяРеквизита = "Name" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Name'");
	ИначеЕсли ИмяРеквизита = "Code" Тогда
		Возврат НСтр("ru = 'Код'; en='Code'");
	ИначеЕсли ИмяРеквизита = "IsFolder" Тогда
		Возврат НСтр("ru = 'ЭтоГруппа'; en='Is folder'");
	ИначеЕсли ИмяРеквизита = "Description" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Description'");
	ИначеЕсли ИмяРеквизита = "Date" Тогда
		Возврат НСтр("ru = 'Дата'; en='Date'");
	ИначеЕсли ИмяРеквизита = "Posted" Тогда
		Возврат НСтр("ru = 'Проведен'; en='Posted'");
	ИначеЕсли ИмяРеквизита = "DeletionMark" Тогда
		Возврат НСтр("ru = 'ПометкаУдаления'; en='Deletion mark'");
	ИначеЕсли ИмяРеквизита = "Ref" Тогда
		Возврат НСтр("ru = 'Ссылка'; en='Ref'");
	ИначеЕсли ИмяРеквизита = "Parent" Тогда
		Возврат НСтр("ru = 'Родитель'; en='Parent'");
	Иначе
		Возврат ИмяРеквизита;
	КонецЕсли;
	
КонецФункции
Функция НайтиДокументПоGUIDиСформироватьПредставление(GUID, ИмяДокумента)
	
	Возврат Документы[ИмяДокумента].ПолучитьСсылку(GUID);
	
КонецФункции

// Получает ссылку на объект - справочник по GUID
//
Функция НайтиЭлементСправочникаПоGUIDиСформироватьПредставление(GUID, ИмяСправочника)
	
	Если Строка(GUID) = XMLСтрока(Справочники[ИмяСправочника].ПустаяСсылка()) Тогда
		Возврат  Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку(GUID);
	
КонецФункции
// Получает ссылку на объект - план обмена по GUID
//
Функция НайтиПланОбменаПоGUIDиСформироватьПредставление(GUID, ИмяПланаОбмена)
	
	Если Строка(GUID) = XMLСтрока(ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка()) Тогда
		Возврат ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ПолучитьСсылку(GUID);
	
КонецФункции

Функция НайтиПланВидовХарактеристикПоGUIDиСформироватьПредставление(GUID, ИмяПланаВидовХарактеристик)
	
	Если Строка(GUID) = XMLСтрока(ПланыВидовХарактеристик[ИмяПланаВидовХарактеристик].ПустаяСсылка()) Тогда
		Возврат ПланыВидовХарактеристик[ИмяПланаВидовХарактеристик].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПланыВидовХарактеристик[ИмяПланаВидовХарактеристик].ПолучитьСсылку(GUID);
	
КонецФункции
Функция НайтиПланСчетовПоGUIDиСформироватьПредставление(GUID, ИмяПланаСчетов)
	
	Если Строка(GUID) = XMLСтрока(ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка()) Тогда
		Возврат ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПланыСчетов[ИмяПланаСчетов].ПолучитьСсылку(GUID);
	
КонецФункции
Функция НайтиПланВидовРасчетаПоGUIDиСформироватьПредставление(GUID, ИмяПланаВидовРасчета)
	
	Если Строка(GUID) = XMLСтрока(ПланыВидовРасчета[ИмяПланаВидовРасчета].ПустаяСсылка()) Тогда
		Возврат ПланыВидовРасчета[ИмяПланаВидовРасчета].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПланыВидовРасчета[ИмяПланаВидовРасчета].ПолучитьСсылку(GUID);
	
КонецФункции
Функция НайтиБизнесПроцессПоGUIDиСформироватьПредставление(GUID, ИмяБизнесПроцесса)
	
	Если Строка(GUID) = XMLСтрока(БизнесПроцессы[ИмяБизнесПроцесса].ПустаяСсылка()) Тогда
		Возврат БизнесПроцессы[ИмяБизнесПроцесса].ПустаяСсылка();
	КонецЕсли;
	
	Возврат БизнесПроцессы[ИмяБизнесПроцесса].ПолучитьСсылку(GUID);
	
КонецФункции
Функция НайтиЗадачуПоGUIDиСформироватьПредставление(GUID, ИмяЗадачи)
	
	Если Строка(GUID) = XMLСтрока(Задачи[ИмяЗадачи].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(Задачи[ИмяЗадачи].ПолучитьСсылку(GUID));
	
КонецФункции

Функция ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения,
	Значение)
	
	Представление = Значение;
	
	Попытка
		GUID = Новый УникальныйИдентификатор (Значение);
	Исключение
		Возврат Представление;
	КонецПопытки;
	
	Если Лев(ТипЗначения, 10) = "CatalogRef" Тогда
		ИмяСправочника = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 11);
		Представление = НайтиЭлементСправочникаПоGUIDиСформироватьПредставление(
		GUID,
		ИмяСправочника);
	ИначеЕсли Лев(ТипЗначения, 11) = "DocumentRef" Тогда
		ИмяДокумента = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 12);
		Представление = НайтиДокументПоGUIDиСформироватьПредставление(
		GUID,
		ИмяДокумента);
	ИначеЕсли Лев(ТипЗначения, 29) = "ChartOfCharacteristicTypesRef" Тогда
		ИмяПланаВидаХарактеристик = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 30);
		Представление = НайтиПланВидовХарактеристикПоGUIDиСформироватьПредставление(
		GUID,
		ИмяПланаВидаХарактеристик);
	ИначеЕсли Лев(ТипЗначения, 18) = "ChartOfAccountsRef" Тогда
		ИмяПланаСчетов = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 19);
		Представление = НайтиПланСчетовПоGUIDиСформироватьПредставление(
		GUID,
		ИмяПланаСчетов);
	ИначеЕсли Лев(ТипЗначения, 26) = "ChartOfCalculationTypesRef" Тогда
		ИмяПланаВидовРасчета = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 27);
		Представление = НайтиПланВидовРасчетаПоGUIDиСформироватьПредставление(
		GUID,
		ИмяПланаВидовРасчета);
	ИначеЕсли Лев(ТипЗначения, 18) = "BusinessProcessRef" Тогда
		ИмяБизнесПроцесса = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 19);
		Представление = НайтиБизнесПроцессПоGUIDиСформироватьПредставление(
		GUID,
		ИмяБизнесПроцесса);
	ИначеЕсли Лев(ТипЗначения, 7) = "TaskRef" Тогда
		ИмяЗадачи = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 8);
		Представление = НайтиЗадачуПоGUIDиСформироватьПредставление(GUID, ИмяЗадачи);
	ИначеЕсли Лев(ТипЗначения, 15) = "ExchangePlanRef" Тогда
		ИмяПланаОбмена = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 16);
		Представление = НайтиПланОбменаПоGUIDиСформироватьПредставление(GUID, ИмяПланаОбмена);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции
Функция СформироватьПредставлениеПоОписаниюТипа(ОписаниеТипаРеквизита, РеквизитЗначение)
	
	Текст = "";
	
	Если ОписаниеТипаРеквизита.СодержитТип(Тип("Дата")) Тогда
		Текст = Сред(РеквизитЗначение,12,2) + ":" + Сред(РеквизитЗначение,15,2) + ":" + Сред(РеквизитЗначение,18,2)
		+ ", " + Сред(РеквизитЗначение,9,2) + "." + Сред(РеквизитЗначение,6,2) + "." + Лев(РеквизитЗначение, 4);
		Текст =	РеквизитЗначение;
		Возврат Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат Текст;
	КонецЕсли;
	
	Если ОписаниеТипаРеквизита.СодержитТип(Тип("Булево")) Тогда
		Если РеквизитЗначение = "true" Тогда
			Текст = "Истина";
		Иначе
			Текст = "Ложь";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат Текст;
	КонецЕсли;
	
	Попытка
		GUID = Новый УникальныйИдентификатор(РеквизитЗначение);
	Исключение
		Возврат РеквизитЗначение;
	КонецПопытки;
	
	Для Каждого Элемент Из Метаданные.Справочники Цикл
		Оп = Новый ОписаниеТипов("СправочникСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиЭлементСправочникаПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
				Возврат Текст; //АБС Вставка
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.Документы Цикл
		Оп = Новый ОписаниеТипов("ДокументСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиДокументПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
				Возврат Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.БизнесПроцессы Цикл
		Оп = Новый ОписаниеТипов("БизнесПроцессСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиБизнесПроцессПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
				Возврат Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.БизнесПроцессы Цикл
		Оп = Новый ОписаниеТипов("БизнесПроцессСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиБизнесПроцессПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
				Возврат Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.Задачи Цикл
		Оп = Новый ОписаниеТипов("ЗадачаСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиЗадачуПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
				Возврат Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.ПланыВидовХарактеристик Цикл
		Оп = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиПланВидовХарактеристикПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
				Возврат Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.ПланыВидовРасчета Цикл
		Оп = Новый ОписаниеТипов("ПланВидовРасчетаСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиПланВидовРасчетаПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
				Возврат Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.ПланыСчетов Цикл
		Оп = Новый ОписаниеТипов("ПланСчетовСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиПланСчетовПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Возврат РеквизитЗначение;
	
КонецФункции
Функция ПроверитьСсылкаНаСправочник(Ссылка)
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
Функция ПолучитьПредставлениеЗначенияПоНаименованию(Наименование, Значение, ИмяОбъекта,СсылкаНаОбъект);
	
	Если      Наименование = "Ref" Тогда
		Если ПроверитьСсылкаНаСправочник(СсылкаНаОбъект) Тогда
			ТипЗначения = "CatalogRef" + "." + ИмяОбъекта;
		Иначе
			ТипЗначения = "DocumentRef" + "." + ИмяОбъекта;
		КонецЕсли;
		Возврат ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения, Значение);
	ИначеЕсли Наименование = "Date" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "Number" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "DeletionMark" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	ИначеЕсли Наименование = "Posted" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	ИначеЕсли Наименование = "Owner" Тогда
		ТипЗначения = "CatalogRef" + "." + ИмяОбъекта;
		Возврат ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения, Значение);
	ИначеЕсли Наименование = "Code" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "Description" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "Predefined" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	ИначеЕсли Наименование = "Parent" Тогда
		ТипЗначения = "CatalogRef" + "." + ИмяОбъекта;
		Возврат ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения, Значение);
	ИначеЕсли Наименование = "IsFolder" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

//=======================================Процедуры для  получения отпечатка версии объекта ( конец)  ================================


Функция ПолучитьСТруктуруОбъектаПоВерсии(СтрокаТЗВерсия,СсылкаНаОбъект )
	СтруктураОбъекта = новый Структура;
	ВерсияОбъекта = РазборВерсии(СтрокаТЗВерсия.НомерВерсии,СсылкаНаОбъект);
	Для Каждого ЭлементРеквизит Из ВерсияОбъекта.Реквизиты Цикл
		
		НаименованиеРеквизита = ПолучитьПредставлениеРеквизитаНаЯзыке(ЭлементРеквизит.НаименованиеРеквизита);
		
		ОписаниеРеквизита = СсылкаНаОбъект.Метаданные().Реквизиты.Найти(НаименованиеРеквизита);
		
		ЗначениеРеквизита = ?(ЭлементРеквизит.ЗначениеРеквизита = Неопределено, "", ЭлементРеквизит.ЗначениеРеквизита);
		
		Если ЗначениеЗаполнено(ЭлементРеквизит.ТипРеквизита) Тогда
			ВыводимоеНаименование = НаименованиеРеквизита;
			ПредставлениеЗначения = ПривестиКПредставлениюПоТипуИЗначению(
			ЭлементРеквизит.ТипРеквизита,
			ЗначениеРеквизита);
		ИначеЕсли (ОписаниеРеквизита <> Неопределено) Тогда
			ВыводимоеНаименование = ?(ЗначениеЗаполнено(ОписаниеРеквизита.Синоним), ОписаниеРеквизита.Синоним, ОписаниеРеквизита.Имя);
			ОписаниеТипаРеквизита = ОписаниеРеквизита.Тип;
			// пытаемся найти прямое соответствие
			ПредставлениеЗначения = 
			СформироватьПредставлениеПоОписаниюТипа(ОписаниеТипаРеквизита,
			ЗначениеРеквизита);
		Иначе
			ВыводимоеНаименование = НаименованиеРеквизита;
			ПредставлениеЗначения = ПолучитьПредставлениеЗначенияПоНаименованию(ЭлементРеквизит.НаименованиеРеквизита, ЗначениеРеквизита, СсылкаНаОбъект.Метаданные().Имя,СсылкаНаОбъект);
		КонецЕсли;
		ТекНаименованиеРеквизита =  ЭлементРеквизит.НаименованиеРеквизита;
		Если  ЭлементРеквизит.НаименованиеРеквизита =  "Code" Тогда
			ТекНаименованиеРеквизита = "Код";
		ИначеЕсли   ЭлементРеквизит.НаименованиеРеквизита =  "Description" Тогда
			ТекНаименованиеРеквизита = "Наименование";
		ИначеЕсли   ЭлементРеквизит.НаименованиеРеквизита =  "IsFolder" Тогда
			ТекНаименованиеРеквизита = "ЭтоГруппа";
		ИначеЕсли   ЭлементРеквизит.НаименованиеРеквизита =  "Parent" Тогда
			ТекНаименованиеРеквизита = "Родитель";
		ИначеЕсли   ЭлементРеквизит.НаименованиеРеквизита =  "DeletionMark" Тогда
			ТекНаименованиеРеквизита = "ПометкаУдаления";
		КонецЕсли;		
		СтруктураОбъекта.Вставить(ТекНаименованиеРеквизита,ПредставлениеЗначения);
	КонецЦикла;	
	Возврат СтруктураОбъекта;
КонецФункции
//Функция ПолучитьТЗЗначенийПоОбъектуВ1С:
//ТекОбъект -  Объект по которому необходимо получить реквизиты ( Ссылка)
//ТЗСоответствий - ТЗСоответствий полученый функцией ПолучитьТЗСоответствийДляЗаписиКонтрагента
//СтрокаТЗ -(обязательно содержит колонку Объект)//Для версий  Необходима когда вытаскиваем данные по регистру ВерсииОбъектов, ( все колонки этой строкиТз СОответствуют регистру "Версии объектов"
//ПолучатьДанныеИзXMLВерсии  - Для того чтобы вытаскивать версии объектов из Хранилища значения
Функция ПолучитьТЗЗначенийПоОбъектуВ1С(ТЗСоответствий,СтрокаТЗ,ПолучатьДанныеИзXMLВерсии = Ложь)Экспорт
	Если ПолучатьДанныеИзXMLВерсии =Истина Тогда
		ВерсияОбъекта = СтрокаТЗ.версияОбъекта.Получить();
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ВерсияОбъекта.Записать(ИмяВременногоФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		
		СтруктураОбъектаПоВерсии = ПолучитьСТруктуруОбъектаПоВерсии(СтрокаТЗ,СтрокаТЗ.Объект);
		//--------------------------
		ТекОбъект = СтруктураОбъектаПоВерсии;
		Запись = СтрокаТЗ;
	Иначе
		ТекОбъект = СтрокаТЗ.Объект;	
	КонецЕсли;
	
	ТЗЗначений = Новый ТаблицаЗначений;
	ТЗЗначений.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗЗначений.Колонки.Добавить("Значение");
	
	СтруктураЗначений = Новый Структура;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		Значение = "";
		Попытка
			Выполнить(СтрокаТЗСоответствий.ПутьКДаннымВ1С);
		Исключение           
			
		КонецПопытки;
		Если   Значение <>NULL ТОгда
			Если   СтрокаТЗСоответствий.Тип = "строка" или СтрокаТЗСоответствий.Тип = "дата"  или СтрокаТЗСоответствий.Тип = "датаивремя"  Тогда
				Значение = "'"+СокрЛП(Значение)+"'";
			ИначеЕсли  СтрокаТЗСоответствий.Тип = "число"  Тогда
				Если ЗначениеЗаполнено(Значение) ТОгда
					Значение = Число(Значение);
				Иначе
					Значение = 0;	
				КонецЕсли;
			ИначеЕсли  СтрокаТЗСоответствий.Тип = "логическое" Тогда
				Значение =?(Значение ,1,0);
			КонецЕсли;
		Иначе
			Значение = "NULL";
		КонецЕсли;
		НовСТрока = ТЗЗначений.Добавить();
		НовСТрока.ПутьКДаннымВSQL 	=  СтрокаТЗСоответствий.ПутьКДаннымВSQL;
		НовСТрока.Значение 			= Значение;
		
	КонецЦикла;	
	Возврат ТЗЗначений;
КонецФункции
Функция ПолучитьТЗЗначенийПоОбъектуВ1Версия2(ТЗСоответствий,СтрокаТЗ,ПолучатьДанныеИзXMLВерсии = Истина)Экспорт
	Если ПолучатьДанныеИзXMLВерсии =Истина Тогда
		СтруктураОбъектаПоВерсии = СтрокаТЗ.ХранилищеСтруктураРеквизитов.Получить();
		
		//--------------------------
		ТекОбъект = СтруктураОбъектаПоВерсии;
		Запись = СтрокаТЗ;
	Иначе
		ТекОбъект = СтрокаТЗ.Объект;	
	КонецЕсли;
	
	ТЗЗначений = Новый ТаблицаЗначений;
	ТЗЗначений.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗЗначений.Колонки.Добавить("Значение");
	СтруктураЗначений = Новый Структура;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		Значение = "";
// +++ввв 30.09.2016 г. Если поле модуля непустое, то исполняется модуль
		Если ПустаяСтрока(СтрокаТЗСоответствий.МодульПолученияДанныхВ1С) Тогда
	    	СтрИсполнения=СтрокаТЗСоответствий.ПутьКДаннымВ1С;
		Иначе
	    	СтрИсполнения=СтрокаТЗСоответствий.МодульПолученияДанныхВ1С;
		КонецЕсли;
// +++ввв 03.10.2016 г.
		ФлагНеЗаполнен=Ложь;
// ---ввв 03.10.2016 г.
		Попытка
			Выполнить(СтрИсполнения);
		Исключение           
// +++ввв 03.10.2016 г.
			ФлагНеЗаполнен=Истина;
// ---ввв 03.10.2016 г.
		КонецПопытки;
		Если СтрокаТЗСоответствий.ОбязательноНепустой Тогда
			Если ФлагНеЗаполнен Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
// ---ввв 30.09.2016 г.
		Если Значение<>NULL ТОгда
			Если   СтрокаТЗСоответствий.Тип = "строка" или СтрокаТЗСоответствий.Тип = "дата"  или СтрокаТЗСоответствий.Тип = "датаивремя"  Тогда
				Значение = СтрЗаменить(СокрЛП(Значение),"'","""");
// +++ввв 03.10.2016 г.
				Если ПустаяСтрока(Значение) Тогда
					ФлагНеЗаполнен=Истина;
				КонецЕсли;
// ---ввв 03.10.2016 г.
				Значение = "'"+СокрЛП(Значение)+"'";
			ИначеЕсли  СтрокаТЗСоответствий.Тип = "число"  Тогда
				Если ЗначениеЗаполнено(Значение) ТОгда
					Попытка
// +++ввв 05.10.2016 г.
						//Значение = Число(Значение);
						Значение = Формат(Число(Значение),"ЧРД=.; ЧГ=0");
// ---ввв 05.10.2016 г.
					Исключение
// +++ввв 03.10.2016 г.
						ФлагНеЗаполнен=Истина;
// ---ввв 03.10.2016 г.
						Значение = 0;
					КонецПопытки;
				Иначе
// +++ввв 03.10.2016 г.
					ФлагНеЗаполнен=Истина;
// ---ввв 03.10.2016 г.
					Значение = 0;	
				КонецЕсли;
			ИначеЕсли  СтрокаТЗСоответствий.Тип = "логическое" Тогда
// +++ввв 03.10.2016 г.
				Попытка
					Значение =?(Значение ,1,0);
				Исключение
					ФлагНеЗаполнен=Истина;
				КонецПопытки;
// ---ввв 03.10.2016 г.
			КонецЕсли;
		Иначе
			Значение = "NULL";
			ФлагНеЗаполнен=Истина;
		КонецЕсли;
// +++ввв 03.10.2016 г.
		Если СтрокаТЗСоответствий.ОбязательноНепустой Тогда
			Если ФлагНеЗаполнен Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
// ---ввв 03.10.2016 г.
		НовСТрока = ТЗЗначений.Добавить();
		НовСТрока.ПутьКДаннымВSQL = СтрокаТЗСоответствий.ПутьКДаннымВSQL;
		НовСТрока.Значение 		  = Значение;
	КонецЦикла;	
	Возврат ТЗЗначений;
КонецФункции
Процедура ВыполнитьЗаписьВSQL(ТЗСоответствий,СЗРеквизитовПоиска,ТекущийОбмен,НаборЗаписейВерсииОбъектов,СтруктураПодключения,БылаОшибка)  Экспорт
	
	//-----------
	СтрокаЗапросаСозданияЗаписиВSQL = "INSERT INTO "+СтруктураПодключения.DataSource+"."+ТекущийОбмен.ИмяТаблицыSQL;
	СтрокаПараметровЗаписиSQL = "(";
	//============
	СтрокаЗапросаПерезаписиВSQL = "UPDATE "+СтруктураПодключения.DataSource+"."+ТекущийОбмен.ИмяТаблицыSQL +" SET " ;
	//===========
	ПерезаписыватьНайденные = ТекущийОбмен.ПерезаписыватьНайденные;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		СтрокаПараметровЗаписиSQL = СтрокаПараметровЗаписиSQL+"
		|"+СтрокаТЗСоответствий.ПутьКДаннымВSQL +",";
	КонецЦикла;
	//-------------
	СтрокаПараметровЗаписиSQL =Лев(СтрокаПараметровЗаписиSQL,СтрДлина(СтрокаПараметровЗаписиSQL)-1)+")";  //Убрали запятую
	СтрокаЗапросаСозданияЗаписиВSQL = СтрокаЗапросаСозданияЗаписиВSQL+СтрокаПараметровЗаписиSQL;
	//-------------
	СтрокаТЗ = НаборЗаписейВерсииОбъектов;
	//Сначала сделаем поиск есть ли такая запись, если есть то ниче делать не будем
	Нашли = НайтиЗаписьВSQL(СЗРеквизитовПоиска,СтруктураПодключения,СтрокаТЗ.Объект,СтрокаТЗ,ТекущийОбмен);
	ТЗЗначений = ПолучитьТЗЗначенийПоОбъектуВ1С(ТЗСоответствий,СтрокаТЗ,Ложь);
	Если Нашли и ПерезаписыватьНайденные  ТОгда
		ПерезаписатьВSQL(ТекущийОбмен,ТЗЗначений,СтрокаЗапросаПерезаписиВSQL,СтруктураПодключения,СЗРеквизитовПоиска,БылаОшибка);
	ИначеЕсли Нашли = Ложь ТОгда
		ДобавитьЗаписьВSQL(ТЗЗначений,СтрокаЗапросаСозданияЗаписиВSQL,СтруктураПодключения,БылаОшибка);	
	КонецЕсли;
	//т.к все ок то добавим запись
	
КонецПроцедуры
Процедура ВыполнитьОбменПоТипуОбъекта(ТекОбъект)
	
КонецПроцедуры
Функция ВыполнитьХранимуюПроцедуруSQL(ТекстЗапроса,Настройка) Экспорт
	Перем ТаблицаРезультат;
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	Попытка
		
		Rs = Cmd.Execute(); 		
		КолонкиРезультат = ТаблицаРезультат.Колонки;
		
		Для ИндексКолонки = 0 По Rs.Fields.Count - 1 Цикл
			Если КолонкиРезультат.Найти(Rs.Fields(ИндексКолонки).name) = Неопределено Тогда
				КолонкиРезультат.Добавить(Rs.Fields(ИндексКолонки).name);
			КонецЕсли;
		КонецЦикла;
		Если Rs.BOF = 0 Тогда
			Rs.MoveFirst();                 
			Пока Rs.EOF() = 0 do  
				
				ТекСтрокаРезультат = ТаблицаРезультат.Добавить();
				
				Для Каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
					ТекСтрокаРезультат[ТекКолонка.Имя] = Rs.Fields(ТекКолонка.Имя).Value;
				КонецЦикла;
				
				Rs.MoveNext();  
			КонецЦикла;
		КонецЕсли;
		Rs.Close();
	Исключение
		
	КонецПопытки;
	Возврат ТаблицаРезультат;
КонецФункции
Функция  ПолучитьПоследнююВерсиюВSQL(СтруктураПодключения)
	ТекстЗапросаSQL = СтруктураПодключения.DataSource+".dbo.Kontractors_IDC_Returner";
	
	//ТекстЗапросаSQL = "
	//|SELECT     MAX(ID_Change) AS LastVersion
	//|FROM         TRPLT_TEMP.dbo.Kontractors";
	Результат = ВыполнитьХранимуюПроцедуруSQL(ТекстЗапросаSQL,СтруктураПодключения);
	Возврат Результат;	
КонецФункции

// +++ввв 30.09.2015 

Процедура ДобавитьЗаписьВSQLПоСтрокеЗапроса(СтрокаДанных, СтруктураПодключения, Соединение=Неопределено) Экспорт
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	КонецЕсли;
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	Cmd.CommandText = СокрЛП(СтрокаДанных.ЗапросКSQL);
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	Попытка
		ЗаписьЖурналаРегистрации("Cmd.Execute()", УровеньЖурналаРегистрации.Информация, , , СокрЛП(СтрокаДанных.ЗапросКSQL));
		Rs = Cmd.Execute(); 		
	Исключение
		СтрокаДанных.Ошибка=ОписаниеОшибки();
		СтрокаДанных.ДатаВыгрузки=ТекущаяДата();
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьОбменСАргусомЧерезЖурналОбмена(ТекущийОбмен)
	Если ТекущийОбмен.ВыполнятьОбмен = Ложь ТОгда
		Возврат;
	КонецЕсли;
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	СтруктураПодключения.Вставить("Table",			СокрЛП(ТекущийОбмен.ИмяТаблицыSQL));	
	
//Проверка соединения
	Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Неопределено Тогда
		Возврат;	
	КонецЕсли;
// Для текущего обмена запросить записи журнала обмена
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ввв_ЖурналВыгрузкиВTPI.Объект,
	             |	ввв_ЖурналВыгрузкиВTPI.НастройкаВыгрузки,
	             |	ввв_ЖурналВыгрузкиВTPI.ДатаСобытия,
	             |	ВЫРАЗИТЬ(ввв_ЖурналВыгрузкиВTPI.Запрос КАК СТРОКА(1024)) КАК ЗапросКSQL
	             |ИЗ
	             |	РегистрСведений.ввв_ЖурналВыгрузкиВTPI КАК ввв_ЖурналВыгрузкиВTPI
	             |ГДЕ
	             |	ввв_ЖурналВыгрузкиВTPI.НастройкаВыгрузки = &ТекущийОбмен";
	Запрос.УстановитьПараметр("ТекущийОбмен",ТекущийОбмен.Ссылка);
	ДанныеДляЗаписи=Запрос.Выполнить().Выгрузить();
	ДанныеДляЗаписи.Колонки.Добавить("ДатаВыгрузки");
	ДанныеДляЗаписи.Колонки.Добавить("Ошибка");
	Для Каждого СтрокаДанных Из ДанныеДляЗаписи Цикл
		СтрокаДанных.Ошибка="";
		СтрокаДанных.ДатаВыгрузки=Дата(1,1,1);
		ДобавитьЗаписьВSQLПоСтрокеЗапроса(СтрокаДанных,СтруктураПодключения,Соединение);
		РСЖ=РегистрыСведений.ввв_ЖурналВыгрузкиВTPI.СоздатьНаборЗаписей();
		РСЖ.Отбор.НастройкаВыгрузки.Установить(СтрокаДанных.НастройкаВыгрузки.Ссылка);
		РСЖ.Отбор.Объект.Установить(СтрокаДанных.Объект.Ссылка);
		РСЖ.Отбор.ДатаСобытия.Установить(СтрокаДанных.ДатаСобытия);
		Если ПустаяСтрока(СтрокаДанных.Ошибка) Тогда
		Иначе
			РСЖ.Прочитать();
			Для каждого тРСЖ Из РСЖ Цикл
				тРСЖ.ДатаВыгрузки=СтрокаДанных.ДатаВыгрузки;
				тРСЖ.Ошибка=СтрокаДанных.Ошибка;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		РСЖ.Записать();
	КонецЦикла;
КонецПроцедуры
// ---ввв

Процедура ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен) Экспорт
	Если ТекущийОбмен.ВыполнятьОбмен = Ложь ТОгда
		Возврат;
	КонецЕсли;
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	СтруктураПодключения.Вставить("Table",			СокрЛП(ТекущийОбмен.ИмяТаблицыSQL));	
	
	//Проверка соединения
	Соединение = абс_ПроцедурыОбмена.ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Ложь Тогда
		Возврат;	
	КонецЕсли;
	БылаОшибка = Ложь;
	
	//ТЗПоследняяВерсияВSQL = ПолучитьПоследнююВерсиюВSQL(СтруктураПодключения);
	//Если БылаОшибка =Истина ТОгда
	//	ВОзврат;
	//КонецЕсли;
	//Если  ТЗПоследняяВерсияВSQL.Количество() = 0 ТОгда
	//	ПоследняяВерсияВSQL = 0; 	
	//Иначе
	//	 
	//	ПоследняяВерсияВSQL =ТЗПоследняяВерсияВSQL[0].LastVersion;
	//	Если Не ЗначениеЗаполнено(ПоследняяВерсияВSQL)  Тогда
	//		ПоследняяВерсияВSQL = 0;
	//	КонецЕсли;
	//КонецЕсли;
	
	//	ПоследняяВерсияВSQL = ПоследняяВерсияВSQL+1;
	
	//======Будет два цикла первый будет по контрагентам которые имеют основного контрагента, а второй у которых нет основного контрагента
	ТипОбъекта = ТекущийОбмен.ТипОбъекта;
	ТекНомер = ТекущийОбмен.Узел.НомерОтправленного;
	Выборка = ПланыОбмена.ВыбратьИзменения(ТекущийОбмен.Узел,ТекНомер);
	СЗРеквизитовПоиска = новый СписокЗначений;
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписи(ТекущийОбмен,СЗРеквизитовПоиска);
	СЗКонтрагентовБезОсновногоКонтрагента = новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		
		ТекНаборИлиОбъект = Выборка.Получить();
		//ТекНаборИлиОбъект = Справочники.Контрагенты.НайтиПоКоду("");
		
		Если   Найти(Строка(ТипЗНЧ(ТекНаборИлиОбъект)),"Справочник")>0 ТОгда
			
			ИмяСправочника   = Строка(ТипЗНЧ(ТекНаборИлиОбъект.Ссылка));
			
			Если   НАйти(ТипОбъекта,ИмяСправочника)=0 ТОгда
				Продолжить;
			КонецЕсли;
			
			Если ТекНаборИлиОбъект.абс_ОсновнойКонтрагент.Пустая() ТОгда
				СЗКонтрагентовБезОсновногоКонтрагента.Добавить(ТекНаборИлиОбъект.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ТекСтруктура = Новый Структура;
			ТекСтруктура.Вставить("Объект",ТекНаборИлиОбъект);
			ТЗЗначений = ПолучитьТЗЗначенийПоОбъектуВ1Версия2(ТЗСоответствий,ТекСтруктура,Ложь);
// +++ввв 30.09.2016 г.
//// +++ввв 12.09.2016 .
//			ПреффиксТаблицы=СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL)+"."+СокрЛП(ТекущийОбмен.ИмяТаблицыSQL)+".";
//			нСтр=ТЗЗначений.Найти(ПреффиксТаблицы+"Status","ПутьКДаннымВSQL");
//			Если нСтр<>Неопределено Тогда
//// +++ввв 28.09.2016 г.
//				//Если ЗначениеЗаполнено(ТекНаборИлиОбъект) Тогда
//				//	Если ЗначениеЗаполнено(ТекНаборИлиОбъект.абс_СтатусКонтрагента) Тогда
//				//		Если ТекНаборИлиОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Тогда
//				//			нСтр.Значение=""+Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ;
//				//		КонецЕсли;
//				//	КонецЕсли;
//				//КонецЕсли;
//				Если ЗначениеЗаполнено(ТекНаборИлиОбъект.абс_СтатусКонтрагента) Тогда
//					Если ТекНаборИлиОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Тогда
//						нСтр.Значение=""+Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ;
//					КонецЕсли;
//				КонецЕсли;
//// ---ввв 28.09.2016 г.
//			КонецЕсли;
//// ---ввв 12.09.2016 г.
// ---ввв 30.09.2016 г.
			БылаОшибка = Ложь;
			ДобавитьЗаписьВSQLЧерезХранимыеПроцедуры(ТЗЗначений,СтруктураПодключения,БылаОшибка);
			
			Если  БылаОшибка = Ложь Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел,ТекНаборИлиОбъект);
				
			Иначе
				//Сообщить("не выгружен объект: "+ТекНаборИлиОбъект);
				абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + ТекНаборИлиОбъект, "ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен)");
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	//Теперь без основных контрагентов  ========================
	
	Для Каждого СТрокаСЗ из СЗКонтрагентовБезОсновногоКонтрагента   Цикл
		
		ТекНаборИлиОбъект = СТрокаСЗ.Значение;
		//ТекНаборИлиОбъект = Справочники.Контрагенты.НайтиПоКоду("");
		
		
		Если Не ТекНаборИлиОбъект.абс_ОсновнойКонтрагент.Пустая() ТОгда
			Продолжить;
		КонецЕсли;
		
		ТекСтруктура = Новый Структура;
		ТекСтруктура.Вставить("Объект",ТекНаборИлиОбъект);
		ТЗЗначений = ПолучитьТЗЗначенийПоОбъектуВ1Версия2(ТЗСоответствий,ТекСтруктура,Ложь);
// +++ввв 30.09.2016 г.
//// +++ввв 12.09.2016 .
//		ПреффиксТаблицы=СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL)+"."+СокрЛП(ТекущийОбмен.ИмяТаблицыSQL)+".";
//		нСтр=ТЗЗначений.Найти(ПреффиксТаблицы+"Status","ПутьКДаннымВSQL");
//		Если нСтр<>Неопределено Тогда
//// +++ввв 28.09.2016 г.
//			//Если ЗначениеЗаполнено(ТекНаборИлиОбъект) Тогда
//			//	Если ЗначениеЗаполнено(ТекНаборИлиОбъект.абс_СтатусКонтрагента) Тогда
//			//		Если ТекНаборИлиОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Тогда
//			//			нСтр.Значение=""+Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ;
//			//		КонецЕсли;
//			//	КонецЕсли;
//			//КонецЕсли;
//			Если ЗначениеЗаполнено(ТекНаборИлиОбъект.абс_СтатусКонтрагента) Тогда
//				Если ТекНаборИлиОбъект.абс_СтатусКонтрагента=Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Тогда
//					нСтр.Значение=""+Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ;
//				КонецЕсли;
//			КонецЕсли;
//// ---ввв 28.09.2016 г.
//		КонецЕсли;
//// ---ввв 12.09.2016 г.
// ---ввв 30.09.2016 г.
		БылаОшибка = Ложь;
		ДобавитьЗаписьВSQLЧерезХранимыеПроцедуры(ТЗЗначений,СтруктураПодключения,БылаОшибка);
		
		Если  БылаОшибка = Ложь Тогда
			
			Попытка
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел,ТекНаборИлиОбъект);
			Исключение
				абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + ТекНаборИлиОбъект, "ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен)");
			КонецПопытки;
			
		Иначе
			//Сообщить("не выгружен объект: "+ТекНаборИлиОбъект);
			абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + ТекНаборИлиОбъект, "ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен)");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбменПоКонтрагентам(ТекущийОбмен) Экспорт
	Если ТекущийОбмен.ВыполнятьОбмен = Ложь ТОгда
		Возврат;
	КонецЕсли;
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	СтруктураПодключения.Вставить("Table",			СокрЛП(ТекущийОбмен.ИмяТаблицыSQL));	
	
	//Проверка соединения
	Соединение = абс_ПроцедурыОбмена.ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Ложь Тогда
		Возврат;	
	КонецЕсли;
	БылаОшибка = Ложь;
	
	ТЗПоследняяВерсияВSQL = ПолучитьПоследнююВерсиюВSQL(СтруктураПодключения);
	Если БылаОшибка =Истина ТОгда
		ВОзврат;
	КонецЕсли;
	Если  ТЗПоследняяВерсияВSQL.Количество() = 0 ТОгда
		ПоследняяВерсияВSQL = 0; 	
	Иначе
		
		ПоследняяВерсияВSQL =ТЗПоследняяВерсияВSQL[0].LastVersion;
		Если Не ЗначениеЗаполнено(ПоследняяВерсияВSQL)  Тогда
			ПоследняяВерсияВSQL = 0;
		КонецЕсли;
	КонецЕсли;
	СЗРеквизитовПоиска = новый СписокЗначений;
	ТЗСоответствий = ПолучитьТЗСоответствийДляЗаписи(ТекущийОбмен,СЗРеквизитовПоиска);
	//Убрать когда сделаем хранимые процедуры в SQL ---------------------------------
	СтрокаЗапросаСозданияЗаписиВSQL = "INSERT INTO "+СтруктураПодключения.DataSource+"."+ТекущийОбмен.ИмяТаблицыSQL;
	СтрокаПараметровЗаписиSQL = "(";
	//============
	СтрокаЗапросаПерезаписиВSQL = "UPDATE "+СтруктураПодключения.DataSource+"."+ТекущийОбмен.ИмяТаблицыSQL +" SET " ;
	ПерезаписыватьНайденные = ТекущийОбмен.ПерезаписыватьНайденные;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		СтрокаПараметровЗаписиSQL = СтрокаПараметровЗаписиSQL+"
		|"+СтрокаТЗСоответствий.ПутьКДаннымВSQL +",";
	КонецЦикла;
	//-------------
	СтрокаПараметровЗаписиSQL =Лев(СтрокаПараметровЗаписиSQL,СтрДлина(СтрокаПараметровЗаписиSQL)-1)+")";  //Убрали запятую
	СтрокаЗапросаСозданияЗаписиВSQL = СтрокаЗапросаСозданияЗаписиВSQL+СтрокаПараметровЗаписиSQL;
	//Убрать когда сделаем хранимые процедуры в SQL ---------------------------------
	
	
	ПерезаписыватьНайденные = ТекущийОбмен.ПерезаписыватьНайденные;
	Для Каждого СтрокаТЗСоответствий из ТЗСоответствий  Цикл
		СтрокаПараметровЗаписиSQL = СтрокаПараметровЗаписиSQL+"
		|"+СтрокаТЗСоответствий.ПутьКДаннымВSQL +",";
	КонецЦикла;
	Запрос = новый запрос;
	Запрос.УстановитьПараметр("ПоследняяВерсияВSQL",ПоследняяВерсияВSQL);
	Запрос.Текст = "ВЫБРАТЬ
	|	абс_ВерсииКонтрагентов.Период,
	|	абс_ВерсииКонтрагентов.НомерВерсии,
	|	абс_ВерсииКонтрагентов.ХранилищеСтруктураРеквизитов,
	|	абс_ВерсииКонтрагентов.Контрагент
	|ИЗ
	|	РегистрСведений.абс_ВерсииКонтрагентов КАК абс_ВерсииКонтрагентов
	|ГДЕ
	|	абс_ВерсииКонтрагентов.НомерВерсии > &ПоследняяВерсияВSQL";
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЗЗначений = ПолучитьТЗЗначенийПоОбъектуВ1Версия2(ТЗСоответствий,Выборка,Ложь);
		ДобавитьЗаписьВSQLЧерезХранимыеПроцедуры(ТЗЗначений,СтруктураПодключения,БылаОшибка);
		Если   БылаОшибка Тогда 
			Прервать;
		КонецЕсли;
		//ДобавитьЗаписьВSQL(ТЗЗначений,СтрокаЗапросаСозданияЗаписиВSQL,СтруктураПодключения,БылаОшибка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбменПоСотрудникам(ТекущийОбмен, ТекущийОбменФайлами = Неопределено) 
	
	Перем ПоследняяВерсияВSQL;
	
	ТЗSQL = ВыполнитьЗапросИВернутьТЗ(ТекущийОбмен,ПоследняяВерсияВSQL);
	ТипизироватьТЗ(ТЗSQL);
	ТЗSQL.Колонки.EmployeeNumber.Имя = "Code"; 
	
	Для Каждого СтрТЗ из ТЗSQL Цикл
		СтрТЗ.Code = СокрЛП(СтрТЗ.Code);
		
		Если НЕ ЗначениеЗаполнено(СтрТЗ.Code) Тогда
			СтрТЗ.Code = СокрЛП(СтрТЗ.TabNumber);
		КонецЕсли;
	КонецЦикла;
	
	СЗ_Code = Новый СписокЗначений;
	СЗ_Code.ЗагрузитьЗначения(ТЗSQL.ВыгрузитьКолонку("Code"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("абс_УникальныйИдентификаторСотрудника", СЗ_Code); 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.абс_КодИСУЗК,
	|	СотрудникиОрганизаций.Организация,
	|	СотрудникиОрганизаций.абс_УникальныйИдентификаторСотрудника КАК ИдентификаторСотрудника
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.абс_УникальныйИдентификаторСотрудника В(&абс_УникальныйИдентификаторСотрудника)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.абс_КодИСУЗК,
	|	СотрудникиОрганизаций.Организация,
	|	СотрудникиОрганизаций.абс_УникальныйИдентификаторСотрудника";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ",ТЗSQL);
	Запрос.Текст = "Выбрать ТЗ.*  Поместить ВТ Из &ТЗ как ТЗ";
	Запрос.Выполнить();
	
	Запрос.Текст = "Выбрать  ВТ.* Из  ВТ как ВТ Упорядочить По  ВТ.ID";	
	Выборка  = Запрос.Выполнить().Выбрать();  
	
	//ПрошлыйCode = "";
	Пока Выборка.Следующий() Цикл 
		//Если ПрошлыйCode<>Выборка.Code ТОгда
		ПрошлыйCode =  СокрЛП(Выборка.Code);
		ТекСправочник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		
		Нашли = новый Массив;
		
		СтруктураОтбора = новый Структура;
		СтруктураОтбора.Вставить("Организация"				, Справочники.Организации.НайтиПоРеквизиту("абс_КодИСУЗК",Выборка.Organization));
		СтруктураОтбора.Вставить("ИдентификаторСотрудника"	, ПрошлыйCode);
		
		Нашли = ТЗ.НайтиСтроки(СтруктураОтбора);
		//КОнецЕсли;
		
		Если Нашли.Количество() <> 0 ТОгда
			Для Каждого СТрокаТЗ из  Нашли Цикл
				ВсеОк = СоздатьПерезаполнитьСправочник("СотрудникиОрганизаций",Выборка,ПоследняяВерсияВSQL,СТрокаТЗ.Ссылка,ТЗ);
				Если ВсеОК = Ложь Тогда
					Прервать;
				конецЕсли;
			КонецЦикла;
		Иначе
			
			ВсеОк = СоздатьПерезаполнитьСправочник("СотрудникиОрганизаций",Выборка,ПоследняяВерсияВSQL,ТекСправочник,ТЗ);
			Если ВсеОК = Ложь Тогда
				Прервать;
			конецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Если ВсеОк = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТекНабор = РегистрыСведений.абс_ВерсииОбъектров.СоздатьНаборЗаписей();
	ТекНабор.Отбор.НастройкаОбмена.Установить(ТекущийОбмен);
	ТекНабор.Прочитать();
	ТекНабор.Очистить();
	НовЗапись = ТекНабор.Добавить();
	НовЗапись.НомерВерсии = ПоследняяВерсияВSQL;
	НовЗапись.НастройкаОбмена = ТекущийОбмен;
	НовЗапись.Период = ТекущаяДата();
	ТекНабор.записать(Истина);
	
	Если  ЗначениеЗаполнено(ТекущийОбменФайлами) Тогда
		
		// Получим файл		
		ТЗВерсии =  РегистрыСведений.абс_ВерсииОбъектров.СрезПоследних(,Новый Структура("НастройкаОбмена", ТекущийОбменФайлами));
		Если ТЗВерсии = Неопределено  ТОгда
			ПоследняяВерсияВSQL = 0;
		ИначеЕсли  ТЗВерсии.Количество()<> 0 Тогда
			ПоследняяВерсияВSQL = Формат(Число(ТЗВерсии[0].НомерВерсии),"ЧН=0; ЧГ=0");
		ИНаче
			ПоследняяВерсияВSQL = 0;
		КонецЕсли;
		
		СтруктураПодключения = Новый Структура;
		СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
		СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбменФайлами.ИмяСервераSQL));	
		СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбменФайлами.ИмяБазыДанныхSQL));	
		СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбменФайлами.ИмяПользователя));	
		СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбменФайлами.Пароль));
		
		Соединение = абс_ПроцедурыОбменаСервер.ВыполнитьПодключениеКSQLВернутьСоединение(СтруктураПодключения);
		Если ТипЗнч(Соединение)=Тип("Булево") И Не Соединение Тогда
			Возврат;
		КонецЕсли;
		
		Файл = Неопределено;	
		
		RecordSet = Новый COMОбъект("ADODB.RecordSet");	
		//RecordSet.CursorLocation = 3;	
		RecordSet.LockType = 2;	
		Запрос = "SELECT * FROM [EmplFoto] WHERE id_pic > " + Строка(ПоследняяВерсияВSQL) +" order by id_pic";	
		RecordSet.Open(Запрос, Соединение);	
		
		Если RecordSet.BOF = 0 Тогда
			RecordSet.MoveFirst();	
		КонецЕсли;
		
		Пока RecordSet.EOF() = 0 do  
			
			КодСотрудника = СокрЛП(RecordSet.Fields("EmployeeNumber").Value);
			КодОрганизации = СокрЛП(RecordSet.Fields("Organization").Value);
			ИмяФайла = СокрЛП(RecordSet.Fields("filename").Value);
			НомерСтроки = RecordSet.Fields("id_pic").Value;
			ФорматФайла = RecordSet.Fields("Format").Value;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.абс_УникальныйИдентификаторСотрудника = &абс_КодИСУЗК
			|	И СотрудникиОрганизаций.Организация.абс_КодИСУЗК = &абс_КодИСУЗКОрг";
			
			Запрос.УстановитьПараметр("абс_КодИСУЗК", СокрЛП(КодСотрудника));
			Запрос.УстановитьПараметр("абс_КодИСУЗКОрг", (КодОрганизации));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда			
				
				Stream = Новый COMОбъект("ADODB.Stream");	
				Stream.Type = 1;	
				Stream.Open();	
				Stream.Write(RecordSet.Fields("Data").Value);
				Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
					ИмяФайла = "Фото_"+Выборка.Ссылка+"."+?(ЗначениеЗаполнено(ФорматФайла), ФорматФайла, "jpg");
				КонецЕсли;
				фрис = КаталогВременныхФайлов() + ИмяФайла;	
				Stream.SaveToFile(фрис);	
				Stream.Close();	
				Файл = Новый ДвоичныеДанные(фрис);	
				УдалитьФайлы(фрис);
				
				Сотрудник = Выборка.Ссылка;
				
				РезультатЗаписи = абс_РаботаСФайлами.ЗаписатьФайлВоВнешнееХранилище(Сотрудник.ФизЛицо, Файл, ИмяФайла);
				
				Если ТипЗнч(РезультатЗаписи) = Тип("Структура") Тогда
					Хранилище = РезультатЗаписи.ХранилищеСсылка;
					// Start КТТК Ермолов Е.Л.  14.12.2015 Баг
					Попытка
					// Stop КТТК Ермолов Е.Л.  14.12.2015 Баг
						ФизЛицо = Сотрудник.ФизЛицо.ПолучитьОбъект();
						ФизЛицо.ОсновноеИзображение = Хранилище;
						ФизЛицо.ОбменДанными.Загрузка = Истина;
						ФизЛицо.Записать();
					Исключение
					
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;				
			ПоследняяВерсияВSQL = НомерСтроки;								
			RecordSet.MoveNext();  
		КонецЦикла;
		
		RecordSet.Close();
		
		ТекНабор = РегистрыСведений.абс_ВерсииОбъектров.СоздатьНаборЗаписей();
		ТекНабор.Отбор.НастройкаОбмена.Установить(ТекущийОбменФайлами);
		ТекНабор.Прочитать();
		ТекНабор.Очистить();
		НовЗапись = ТекНабор.Добавить();
		НовЗапись.НомерВерсии = ПоследняяВерсияВSQL;
		НовЗапись.НастройкаОбмена = ТекущийОбменФайлами;
		НовЗапись.Период = ТекущаяДата();
		ТекНабор.записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменПоПодразделениям(ТекущийОбмен)
	Перем ПоследняяВерсияВSQL;
	ТЗSQL = ВыполнитьЗапросИВернутьТЗ(ТекущийОбмен,ПоследняяВерсияВSQL);
	ТипизироватьТЗ(ТЗSQL);
	
	СЗ_Code = Новый СписокЗначений;
	СЗ_Code.ЗагрузитьЗначения(ТЗSQL.ВыгрузитьКолонку("Code"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("абс_КодИСУЗК",СЗ_Code); 
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.абс_КодИСУЗК,
	|	ПодразделенияОрганизаций.Владелец
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.абс_КодИСУЗК В(&абс_КодИСУЗК)";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ",ТЗSQL);
	Запрос.Текст = " выбрать ТЗ.*  Поместить ВТ Из &ТЗ как ТЗ";
	Запрос.Выполнить();
	
	Запрос.Текст ="Выбрать  ВТ.*
	|
	|Из  ВТ как ВТ 
	|
	|Упорядочить По  ВТ.ID";
	
	Выборка  = Запрос.Выполнить().Выбрать();  
	//ПрошлыйCode = "";
	Пока Выборка.Следующий() Цикл 
		//Если ПрошлыйCode<>Выборка.Code ТОгда
		ПрошлыйCode =  Выборка.Code;
		ТекСправочник = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Нашли = новый Массив;
		СТруктураОтбора = новый Структура;
		Организация = Справочники.Организации.НайтиПоРеквизиту("абс_КодИСУЗК", Выборка.Organization);
		СТруктураОтбора.Вставить("абс_КодИСУЗК",?(СтрДлина(ПрошлыйCode)<>9,Лев(ПрошлыйCode+"          ",9),ПрошлыйCode));
		СТруктураОтбора.Вставить("Владелец",Организация);
		Нашли = ТЗ.НайтиСтроки(СТруктураОтбора);
		//КОнецЕсли;
		
		Если Нашли.Количество() <> 0 ТОгда
			Для Каждого СТрокаТЗ из  Нашли Цикл
				ВсеОк = СоздатьПерезаполнитьСправочник("ПодразделенияОрганизаций",Выборка,ПоследняяВерсияВSQL,СТрокаТЗ.Ссылка,ТЗ);
				Если ВсеОК = Ложь Тогда
					Прервать;
				конецЕсли;
			КонецЦикла;
		Иначе
			ВсеОк = СоздатьПерезаполнитьСправочник("ПодразделенияОрганизаций",Выборка,ПоследняяВерсияВSQL,ТекСправочник,ТЗ);
			Если ВсеОК = Ложь Тогда
				Прервать;
			конецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Если ВсеОк = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Подкорректируем галочки Дирекция и Департамент
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		Подразделение = СТрокаТЗ.Ссылка;
		
		ЕстьНаверхуДепартамент = Ложь;
		Если Подразделение.абс_ЯвляетсяДирекцией Тогда
			Родитель = Подразделение.Родитель;
			Пока ЗначениеЗаполнено(Родитель) Цикл
				
				Если Родитель.абс_ЯвляетсяДепартаментом Тогда
					ЕстьНаверхуДепартамент = Истина;
					Прервать;
				КонецЕсли;
				
				Родитель = Родитель.Родитель;
			КонецЦикла;	
			
			Если НЕ ЕстьНаверхуДепартамент Тогда
				ПодразделениеОбъект = Подразделение.ПолучитьОБъект();
				ПодразделениеОбъект.абс_ЯвляетсяДепартаментом = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекНабор = РегистрыСведений.абс_ВерсииОбъектров.СоздатьНаборЗаписей();
	ТекНабор.Отбор.НастройкаОбмена.Установить(ТекущийОбмен);
	ТекНабор.Прочитать();
	ТекНабор.Очистить();
	НовЗапись = ТекНабор.Добавить();
	НовЗапись.НомерВерсии = ПоследняяВерсияВSQL;
	НовЗапись.НастройкаОбмена = ТекущийОбмен;
	НовЗапись.Период = ТекущаяДата();
	ТекНабор.записать(Истина);
	
	
КонецПроцедуры

Процедура ТипизироватьТЗ(ТЗ)
	
	КС = Новый КвалификаторыСтроки(300);
	КЧ = Новый КвалификаторыЧисла(10,0);

	ОписаниеТиповС = Новый ОписаниеТипов("Строка", , КС);
	ОписаниеТиповЧ = НОвый ОписаниеТипов("Число", , , КЧ);
	ОписаниеТиповД = Новый ОписаниеТипов("Дата");
	
	НовТЗ = Новый ТаблицаЗначений;
	Для Каждого КолонкаТЗ из ТЗ.Колонки Цикл
		Если Врег(КолонкаТЗ.Имя) = Врег("ID") Тогда 
			НовТЗ.Колонки.Добавить(КолонкаТЗ.Имя,ОписаниеТиповЧ);
		ИначеЕсли Врег(КолонкаТЗ.Имя) = Врег("DATEFIO") Или Врег(КолонкаТЗ.Имя) = Врег("STATUSDATE") Тогда 
			НовТЗ.Колонки.Добавить(КолонкаТЗ.Имя,ОписаниеТиповД);
		Иначе
			НовТЗ.Колонки.Добавить(КолонкаТЗ.Имя,ОписаниеТиповС);
		КонецЕсли;  
		
	КонецЦикла;
	
	Для Каждого СТрокаТЗ из ТЗ Цикл
		НовСТрока = НовТЗ.Добавить();
		
		Для Каждого КолонкаТЗ из ТЗ.Колонки Цикл
			ТекИмя = КолонкаТЗ.Имя;
			
			Если Врег(ТекИмя) <> Врег("ID") И Врег(ТекИмя) <> Врег("DATEFIO") И  Врег(ТекИмя) <> Врег("STATUSDATE") Тогда 
				НовСТрока[ТекИмя]  = СтрЗаменить(СокрЛП(СТрокаТЗ[ТекИмя]),Символ(160),"");
			Иначе
				НовСТрока[ТекИмя]  =  СТрокаТЗ[ТекИмя];
			КонецЕсли;  
			
		КонецЦикла;
		
	КонецЦикла;
	ТЗ =  НовТЗ.Скопировать();
	
	
КонецПроцедуры

Процедура ВыполнитьОбменПоДолжностям(ТекущийОбмен)
	Перем ПоследняяВерсияВSQL;
	ТЗSQL = ВыполнитьЗапросИВернутьТЗ(ТекущийОбмен,ПоследняяВерсияВSQL);
	ТипизироватьТЗ (ТЗSQL);
	
	СЗ_Code = Новый СписокЗначений;
	СЗ_Code.ЗагрузитьЗначения(ТЗSQL.ВыгрузитьКолонку("Code"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("абс_КодИСУЗК",СЗ_Code); 
	Запрос.Текст = "ВЫБРАТЬ
	|	ДолжностиОрганизаций.Ссылка,
	|	ДолжностиОрганизаций.абс_КодИСУЗК
	|ИЗ
	|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|ГДЕ
	|	ДолжностиОрганизаций.абс_КодИСУЗК В(&абс_КодИСУЗК)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолжностиОрганизаций.Ссылка,
	|	ДолжностиОрганизаций.абс_КодИСУЗК";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ",ТЗSQL);
	Запрос.Текст = " выбрать ТЗ.*  Поместить ВТ Из &ТЗ как ТЗ";
	Запрос.Выполнить();
	
	Запрос.Текст ="Выбрать  ВТ.*
	|
	|Из  ВТ как ВТ 
	|
	|Упорядочить По  ВТ.ID";
	
	Выборка  = Запрос.Выполнить().Выбрать();  
	//ПрошлыйCode = "";
	Пока Выборка.Следующий() Цикл 
		//Если ПрошлыйCode<>Выборка.Code ТОгда
			ПрошлыйCode =  Выборка.Code;
			ТекСправочник = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
			Нашли = новый Массив;
			СТруктураОтбора = новый Структура;
			СТруктураОтбора.Вставить("абс_КодИСУЗК",?(СтрДлина(ПрошлыйCode)<>9,Лев(ПрошлыйCode+"          ",9),ПрошлыйCode));
			Нашли = ТЗ.НайтиСтроки(СТруктураОтбора);
		//КОнецЕсли;
		
		Если Нашли.Количество() <> 0 ТОгда
			Для Каждого СТрокаТЗ из  Нашли Цикл
				ВсеОк = СоздатьПерезаполнитьСправочник("ДолжностиОрганизаций",Выборка,ПоследняяВерсияВSQL,СТрокаТЗ.Ссылка,ТЗ);
				Если ВсеОК = Ложь Тогда
					Прервать;
				конецЕсли;
			КонецЦикла;
		Иначе
			ВсеОк = СоздатьПерезаполнитьСправочник("ДолжностиОрганизаций",Выборка,ПоследняяВерсияВSQL,ТекСправочник,ТЗ);
			Если ВсеОК = Ложь Тогда
				Прервать;
			конецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Если ВсеОк = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТекНабор = РегистрыСведений.абс_ВерсииОбъектров.СоздатьНаборЗаписей();
	ТекНабор.Отбор.НастройкаОбмена.Установить(ТекущийОбмен);
	ТекНабор.Прочитать();
	ТекНабор.Очистить();
	НовЗапись = ТекНабор.Добавить();
	НовЗапись.НомерВерсии = ПоследняяВерсияВSQL;
	НовЗапись.НастройкаОбмена = ТекущийОбмен;
	НовЗапись.Период = ТекущаяДата();
	ТекНабор.записать(Истина);
	
КонецПроцедуры

// АБС Новоселов+ физ.лица
Процедура ВыполнитьОбменПоФизЛицам(ТекущийОбмен)
	Перем ПоследняяВерсияВSQL;
	ТЗSQL = ВыполнитьЗапросИВернутьТЗ(ТекущийОбмен,ПоследняяВерсияВSQL);
	ТипизироватьТЗ(ТЗSQL);
	
	СЗ_Code = Новый СписокЗначений;
	СЗ_Code.ЗагрузитьЗначения(ТЗSQL.ВыгрузитьКолонку("Code"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("абс_КодИСУЗК",СЗ_Code); 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.абс_КодИСУЗК
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.абс_КодИСУЗК В(&абс_КодИСУЗК)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.абс_КодИСУЗК";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ",ТЗSQL);
	Запрос.Текст = " выбрать ТЗ.*  Поместить ВТ Из &ТЗ как ТЗ";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"Выбрать  ВТ.*
	|
	|Из  ВТ как ВТ 
	|
	|Упорядочить По  ВТ.ID";
	
	Выборка  = Запрос.Выполнить().Выбрать(); 
	
	Для Каждого Стр Из ТЗ Цикл
		Стр.абс_КодИСУЗК = ?(СтрДлина(Стр.абс_КодИСУЗК)<>10,Лев(Стр.абс_КодИСУЗК+"          ",10),Стр.абс_КодИСУЗК);
	КонецЦикла;

	Пока Выборка.Следующий() Цикл 

		ПрошлыйCode = Выборка.Code;
		ТекСправочник = Справочники.ФизическиеЛица.ПустаяСсылка();
		Нашли = новый Массив;
		СТруктураОтбора = новый Структура;
		СТруктураОтбора.Вставить("абс_КодИСУЗК",?(СтрДлина(ПрошлыйCode)<>10,Лев(ПрошлыйCode+"          ",10),ПрошлыйCode));
		Нашли = ТЗ.НайтиСтроки(СТруктураОтбора);
		
		Если Нашли.Количество() <> 0 ТОгда
			Для Каждого СТрокаТЗ из  Нашли Цикл
				ВсеОк = СоздатьПерезаполнитьСправочник("ФизическиеЛица",Выборка,ПоследняяВерсияВSQL,СТрокаТЗ.Ссылка,ТЗ);
				Если ВсеОК = Ложь Тогда
					Прервать;
				конецЕсли;
			КонецЦикла;
		Иначе
			ВсеОк = СоздатьПерезаполнитьСправочник("ФизическиеЛица",Выборка,ПоследняяВерсияВSQL,ТекСправочник,ТЗ);
			Если ВсеОК = Ложь Тогда
				Прервать;
			конецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Если ВсеОк = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТекНабор = РегистрыСведений.абс_ВерсииОбъектров.СоздатьНаборЗаписей();
	ТекНабор.Отбор.НастройкаОбмена.Установить(ТекущийОбмен);
	ТекНабор.Прочитать();
	ТекНабор.Очистить();
	НовЗапись = ТекНабор.Добавить();
	НовЗапись.НомерВерсии = ПоследняяВерсияВSQL;
	НовЗапись.НастройкаОбмена = ТекущийОбмен;
	НовЗапись.Период = ТекущаяДата();
	ТекНабор.записать(Истина);
	
КонецПроцедуры

// Договоры
Процедура ВыполнитьОбменПоДоговорам(ТекущийОбмен)
	
    абс_WebServiceСервер.ВыполнитьОбменПоДоговорам(ТекущийОбмен);
	
КонецПроцедуры
// АБС Новоселов-

//АБС ВСТАВКА №35708 НАЧАЛО
Функция НайтиСотрудникаОрганизацииПоУИН(УИН) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УИН",СокрЛП(УИН));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	СотрудникиОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |ГДЕ
	               |	СотрудникиОрганизаций.абс_УникальныйИдентификаторСотрудника = &УИН
	               |	И (НЕ СотрудникиОрганизаций.абс_УникальныйИдентификаторСотрудника = """")";
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.Ссылка;
	
КонецФункции	
//\\АБС ВСТАВКА №35708 КОНЕЦ

Функция СоздатьПерезаполнитьСправочник (Справочник ,Выборка, ПоследняяВерсияВSQL, Ссылка, ТЗ)
	
	Если Не Ссылка.Пустая() Тогда
		СправочникОбъект = Ссылка.ПолучитьОбъект();
	Иначе
		СправочникОбъект = Справочники[Справочник].СоздатьЭлемент();
	КонецЕсли;
	
	Если Справочник = "ДолжностиОрганизаций" Тогда
		СправочникОбъект.абс_КодИСУЗК = Выборка.Code;
		СправочникОбъект.Наименование = Выборка.Name;
		
		СправочникОбъект.абс_Статус = ОпределитьСтатусНСИПоСтроке(Выборка.Status);
		
	ИначеЕсли Справочник = "СотрудникиОрганизаций" Тогда
		СправочникОбъект.абс_УникальныйИдентификаторСотрудника 	= СокрЛП(Выборка.Code);
		СправочникОбъект.абс_КодИСУЗК 							= Выборка.TabNumber;
		СправочникОбъект.Наименование 							= Выборка.FullName;
		СправочникОбъект.абс_СтатусСотрудника 					= ОпределитьСтатусСотрудникаПоСтроке(СокрЛП(Выборка.Status));
		СправочникОбъект.Актуальность 							= Не (СправочникОбъект.абс_СтатусСотрудника = Перечисления.абс_СтатусыСотрудников.Архив);
		
		Должность =  Справочники.ДолжностиОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", ?(СтрДлина(Выборка.Title)<>9,Лев(Выборка.Title+"          ",9),Выборка.Title)); 
		Организация = Справочники.Организации.НайтиПоРеквизиту("абс_КодИСУЗК",?(СтрДлина(Выборка.Organization)<>9,Лев(Выборка.Organization+"          ",9),Выборка.Organization));
		Если Не ЗначениеЗаполнено (Должность) Тогда
			
			Должность = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
			Должность.абс_КодИСУЗК = Выборка.Title;
			Должность.абс_НеИспользовать = Ложь;
			Должность.ОбменДанными.Загрузка = Истина;
			Должность.УстановитьНовыйКод();
			Должность.Записать();
			
		КонецЕсли; 
		СправочникОбъект.Должность = Должность;
		СправочникОбъект.ТекущаяДолжностьОрганизации = Должность;
		СправочникОбъект.Организация = Организация;
		СправочникОбъект.ОбособленноеПодразделение = Организация;
		СправочникОбъект.ТекущееОбособленноеПодразделение = Организация;
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", ?(СтрДлина(Выборка.DepartmentNumber)<>9,Лев(Выборка.DepartmentNumber+"          ",9),Выборка.DepartmentNumber),,Организация);
		Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			
			ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
			ПодразделениеОрганизации.абс_Используется = Истина;
			ПодразделениеОрганизации.абс_КодИСУЗК = Выборка.DepartmentNumber;
			ПодразделениеОрганизации.Владелец = Организация;
			ПодразделениеОрганизации.ОбменДанными.Загрузка = Истина;
			ПодразделениеОрганизации.УстановитьНовыйКод();
			ПодразделениеОрганизации.Записать();
			
		КонецЕсли; 
		// АБС Сторожук 2013.04.22
		Если ВРЕГ(СокрЛП(Выборка.State)) = ВРЕГ("Договор подряда") Тогда
			СправочникОбъект.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
		Иначе
			СправочникОбъект.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
		КонецЕсли;	
		// Конец АБС Сторожук
		СправочникОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СправочникОбъект.ТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
		ФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("абс_КодИСУЗК", ?(СтрДлина(Выборка.Individual)<>10,Лев(Выборка.Individual+"          ",10),Выборка.Individual));
		Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
			
			ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Наименование = &Наименование
			|	И ФизическиеЛица.ЭтоГруппа";
			
			Запрос.УстановитьПараметр("Наименование", "Прочие");
			ВыборкаРодитель = Запрос.Выполнить().Выбрать();
			Если ВыборкаРодитель.Следующий() Тогда
				ФизЛицо.Родитель = ВыборкаРодитель.Ссылка;
			КонецЕсли;     
			
			ФизЛицо.абс_КодИСУЗК = Выборка.Individual;
			ФизЛицо.Наименование = Выборка.FullName;
			ФизЛицо.абс_НеИспользуется = Ложь;
			ФизЛицо.ОбменДанными.Загрузка = Истина;
			ФизЛицо.УстановитьНовыйКод();
			//ФизЛицо.Родитель = Справочники.ФизическиеЛица.НайтиПоНаименованию(Организация.Наименование);
			ФизЛицо.Записать();
			
			// АБС Сторожук 2013.04.18
			ЗаписьРегистра = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ФизЛицо = ФизЛицо.Ссылка;
			ЗаписьРегистра.Фамилия = Выборка.LastName;
			ЗаписьРегистра.Имя = Выборка.FirstName;
			ЗаписьРегистра.Отчество = Выборка.Initials;
			ЗаписьРегистра.Период = Дата(1980,1,1);
			ЗаписьРегистра.Записать();
			// Конец АБС Сторожук
			
		ИначеЕсли СокрЛП(ФизЛицо.Наименование) <> СокрЛП(Выборка.FullName) Тогда
			
			// АБС Сторожук 2013.04.18
			ФизЛицоОбъект = ФизЛицо.ПолучитьОбъект();
			ФизЛицоОбъект.Наименование = Выборка.FullName;
			ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
			ФизЛицоОбъект.Записать();
			
			ЗаписьРегистра = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ФизЛицо = ФизЛицоОбъект.Ссылка;
			ЗаписьРегистра.Фамилия = Выборка.LastName;
			ЗаписьРегистра.Имя = Выборка.FirstName;
			ЗаписьРегистра.Отчество = Выборка.Initials;
			ЗаписьРегистра.Период = ТекущаяДата();
			ЗаписьРегистра.Записать();
			// Конец АБС Сторожук
			
		КонецЕсли; 
		
		// АБС Сторожук 2013.04.18
		СправочникОбъект.ДатаПриемаНаРаботу = Выборка.StartDate;
		СправочникОбъект.ДатаУвольнения = Выборка.EndDate;
		// Конец АБС Сторожук
		
		СправочникОбъект.ФизЛицо = ФизЛицо.Ссылка;
		
	ИначеЕсли Справочник = "ПодразделенияОрганизаций" Тогда
		СправочникОбъект.абс_КодИСУЗК = Выборка.Code;
		СправочникОбъект.Наименование = Выборка.Name;
		СправочникОбъект.абс_ДатаС = Выборка.StartDate;
		СправочникОбъект.абс_ДатаПо = Выборка.EndDate;
		СправочникОбъект.абс_КраткоеНаименование = Выборка.ShortName;
		Если ЗначениеЗаполнено(Выборка.Blok) Тогда
			СправочникОбъект.абс_Блок = Справочники.абс_Блоки.НайтиПоКоду(Выборка.Blok);
		Иначе
			СправочникОбъект.абс_Блок = Справочники.абс_Блоки.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Obosob) Тогда
			//АБС ВСТАВКА   25.12.2014 14:03:04  Хазеев
			//СправочникОбъект.абс_ОбособленноеПодразделение = Справочники.абс_ОбособленныеПодразделения.НайтиПоРеквизиту("абс_КодИСУЗК", Выборка.Obosob);
			СправочникОбъект.абс_ОбособленноеПодразделение = Справочники.абс_ОбособленныеПодразделения.НайтиПоКоду(СокрЛП(Выборка.Obosob));
			//АБС ВСТАВКА  КОНЕЦ 
		Иначе
			СправочникОбъект.абс_ОбособленноеПодразделение = Справочники.абс_ОбособленныеПодразделения.ПустаяСсылка();
		КонецЕсли;
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		Организация = ?(ЗначениеЗаполнено(СправочникОбъект.Владелец), СправочникОбъект.Владелец,Справочники.Организации.НайтиПоРеквизиту("абс_КодИСУЗК",?(СтрДлина(Выборка.Organization)<>9,Лев(Выборка.Organization+"          ",9),Выборка.Organization)));
		СправочникОбъект.Владелец = Организация;
		
		Родитель = Неопределено;
		Если ЗначениеЗаполнено(Выборка.ParentCode) Тогда
			Родитель = Справочники.ПодразделенияОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", Выборка.ParentCode,,Организация);
		КонецЕсли;
		Если Не ЗначениеЗаполнено (Родитель) и не (Выборка.ParentCode = "" или Выборка.ParentCode = NULL) Тогда
			
			Родитель = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
			Родитель.абс_КодИСУЗК = Выборка.ParentCode;
			Родитель.Владелец = Организация;
			Родитель.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.абс_ТипПодразделенияОрганизации = Перечисления.абс_ТипыПодразделенийОрганизации.ПодразделениеОрганизации;
			СправочникОбъект.абс_ОтноситсяКФинСтруктуре = Ложь;
			Родитель.абс_Используется = Истина;
			Родитель.Записать();
			
			НовСтрока					= ТЗ.Добавить();
			НовСтрока.Ссылка 			= Родитель.Ссылка;
			НовСтрока.абс_КодИСУЗК 		= Родитель.абс_КодИСУЗК;
			НовСтрока.Владелец 			= Родитель.Владелец;
			
		КонецЕсли;
		Если Родитель <> Неопределено Тогда
			СправочникОбъект.Родитель = Родитель.Ссылка;
		Иначе
			СправочникОбъект.Родитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
		//АБС_Стрельцов + Начало
		//добавлено: 22.03.2013
		//----------------------------
		Попытка
			ЦФО = Справочники.Подразделения.НайтиПоКоду(СокрЛП(Выборка.CFO));
			Если Не ЦФО.Пустая() Тогда
				СправочникОбъект.абс_ЦФО = ЦФО;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду(СокрЛП(Выборка.CFU));
			Если Не ЦФУ.Пустая() Тогда
				СправочникОбъект.абс_ЦФУ = ЦФУ;
			КонецЕсли;
		Исключение
		КонецПопытки;
		//----------------------------
		//АБС_Стрельцов - Конец
		
		СправочникОбъект.абс_ТипПодразделенияОрганизации = Перечисления.абс_ТипыПодразделенийОрганизации.ПодразделениеОрганизации;
		СправочникОбъект.абс_ОтноситсяКФинСтруктуре = Ложь;
		
		Категория = Перечисления.абс_КатегорияПодразделения.ПустаяСсылка();
		Если Выборка.Category = "Департамент" Тогда
			Категория = Перечисления.абс_КатегорияПодразделения.Департамент;
		ИначеЕсли  Выборка.Category = "Дирекция" Тогда
			Категория = Перечисления.абс_КатегорияПодразделения.Дирекция;
		ИначеЕсли  Выборка.Category = "Отдел" Тогда
			Категория = Перечисления.абс_КатегорияПодразделения.Отдел;
		ИначеЕсли  Выборка.Category = "Служба" Тогда
			Категория = Перечисления.абс_КатегорияПодразделения.Служба;
		ИначеЕсли  Выборка.Category = "Группа" Тогда
			Категория = Перечисления.абс_КатегорияПодразделения.Группа;
		КонецЕсли;
		
		СправочникОбъект.абс_КатегорияПодразделения = Категория;
		Если СправочникОбъект.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Департамент Тогда
			СправочникОбъект.абс_ЯвляетсяДепартаментом = Истина;
		ИначеЕсли  СправочникОбъект.абс_КатегорияПодразделения = Перечисления.абс_КатегорияПодразделения.Дирекция Тогда
			СправочникОбъект.абс_ЯвляетсяДирекцией = Истина;
		КонецЕсли;
		
		СправочникОбъект.абс_Статус = ОпределитьСтатусНСИПоСтроке(Выборка.Status);
		СправочникОбъект.абс_Используется = СправочникОбъект.абс_Статус = Перечисления.абс_СтатусыНСИ.Согласовано;
		
		// АБС Новоселов+	
	ИначеЕсли Справочник = "ФизическиеЛица" Тогда
		СправочникОбъект.абс_КодИСУЗК = Выборка.Code;
		СправочникОбъект.Наименование = Выборка.FullName;
		
		//[Code]
		//,[FullName]
		//,[Parent]
		//,[Organization]
		
		//,[Status]
		
		
		Если ЗначениеЗаполнено(Выборка.Parent) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ФизическиеЛица.Ссылка
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.ЭтоГруппа
			|	И ФизическиеЛица.Наименование = &Наименование");
			Запрос.УстановитьПараметр("Наименование", Выборка.Parent);
			ВыбРодителей = Запрос.Выполнить().Выбрать();
			Если ВыбРодителей.Следующий() Тогда 
				СправочникОбъект.Родитель = ВыбРодителей.Ссылка;
			//Иначе 
			//	Группа = Справочники.ФизическиеЛица.СоздатьГруппу();
			//	Группа.УстановитьНовыйКод();
			//	Группа.Наименование = Выборка.Parent;
			//	Группа.ОбменДанными.Загрузка = Истина;
			//	Группа.Записать();
			//	СправочникОбъект.Родитель = Группа.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СправочникОбъект.абс_Статус = ОпределитьСтатусНСИПоСтроке(Выборка.Status);
		
	КонецЕсли;
	
	БЫлНовый = Ложь;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	
	Если  СправочникОбъект.ЭтоНовый() ТОгда
		СправочникОбъект.УстановитьНовыйКод();
		БЫлНовый  = Истина;
	КонецЕсли;
	
	Попытка
		СправочникОбъект.Записать();
		
		// для поиска в следующий раз
		Если БЫлНовый ТОгда
			
			НовСтрока			= ТЗ.Добавить();
			НовСтрока.Ссылка 	= СправочникОбъект.Ссылка;
			НовСтрока.абс_КодИСУЗК 				= СправочникОбъект.абс_КодИСУЗК;
			Если ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
				НовСтрока.Владелец = СправочникОбъект.Владелец;
			ИначеЕсли ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.СотрудникиОрганизаций") Тогда
				НовСтрока.Организация = СправочникОбъект.Организация;
				НовСтрока.ИдентификаторСотрудника 	= СправочникОбъект.абс_УникальныйИдентификаторСотрудника;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
			// Запишем историю статусов
			
			Если ЗначениеЗаполнено(Выборка.StatusEmployee) И ЗначениеЗаполнено(Выборка.StatusHistory) Тогда
				
				Запрос = Новый Запрос;
				ЗАпрос.Текст = 
				"ВЫБРАТЬ
				|	Пользователи.Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.абс_Сотрудник.абс_КодИСУЗК = &абс_КодИСУЗК";
				
				ЗАпрос.УстановитьПараметр("абс_КодИСУЗК", Выборка.StatusEmployee);
				ВЫборкаПОльзователь = ЗАпрос.Выполнить().Выбрать();
				Если ВЫборкаПОльзователь.Следующий() Тогда
					ПользовательИзменившийСтатус = ВЫборкаПОльзователь.Ссылка;
				Иначе
					ПользовательИзменившийСтатус = Справочники.Пользователи.ПустаяСсылка();
				КонецЕсли;
				
				НоваяСтрока = РегистрыСведений.абс_ИсторияСтатусовНСИ.СоздатьМенеджерЗаписи();
				
				НоваяСтрока.ОбъектСогласования = СправочникОбъект.Ссылка;
				НоваяСтрока.Статус = Выборка.StatusHistory;
				НоваяСтрока.Период = Выборка.StatusDate;
				
				НоваяСтрока.Прочитать();
				
				Если Не НоваяСтрока.Выбран() Тогда
					НоваяСтрока.ОбъектСогласования 		= СправочникОбъект.Ссылка;
					НоваяСтрока.Период 					= Выборка.StatusDate;
					НоваяСтрока.Статус 					= ОпределитьСтатусНСИПоСтроке(Выборка.StatusHistory);
					НоваяСтрока.Пользователь 			= ПользовательИзменившийСтатус;
					НоваяСтрока.Сотрудник 				= ПользовательИзменившийСтатус.абс_Сотрудник;
					НоваяСтрока.Комментарий 			= Выборка.StatusKoment;
					
					НоваяСтрока.Записать(Ложь);
				КонецЕсли;
			КонецЕсли;
			
			// ЦФО/ЦФУ
			Если ЗначениеЗаполнено(Выборка.CFO) Или ЗначениеЗаполнено(Выборка.CFU) Тогда
				
				ДвиженияПоРегиструИсторииЦФОЦФУ(СправочникОбъект.Ссылка, ВЫборка);
				
			КонецЕсли;
			
			// Ответственные
			//АБС ВСТАВКА №35708 НАЧАЛО
			Ответственный = НайтиСотрудникаОрганизацииПоУИН(Выборка.EmpResp);//Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", Выборка.EmpResp); 
			//\\АБС ВСТАВКА №35708 КОНЕЦ
			Если ЗначениеЗаполнено(Выборка.EmpResp) И ЗначениеЗаполнено(Ответственный) Тогда
				
				НоваяЗапись = РегистрыСведений.абс_ОтветственныеЛицаПодразделений.СоздатьМенеджерЗаписи();
				НоваяЗапись.Период = Выборка.PeriodResp;
				НоваяЗапись.СтруктурнаяЕдиница = СправочникОбъект.Ссылка;
				НоваяЗапись.Организация = Справочники.Организации.НайтиПоРеквизиту("абс_КодИСУЗК", ВЫборка.OrgResp);
				НоваяЗапись.Сотрудник = Ответственный;
				НоваяЗапись.Активен = Выборка.ActualResp = "Да";
				НоваяЗапись.Ответственный = Выборка.Responsible = "Да";
				НоваяЗапись.Записать(Истина);
				
			КонецЕсли;	
			
			// Руководитель
			//АБС ВСТАВКА №35708 НАЧАЛО
			Руководитель = НайтиСотрудникаОрганизацииПоУИН(Выборка.Supervisor);//Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", Выборка.Supervisor);
			//\\АБС ВСТАВКА №35708 КОНЕЦ
			Если ЗначениеЗаполнено(Руководитель) И ЗначениеЗаполнено(Выборка.Supervisor) Тогда
				
				НоваяЗаписьРуководитель = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
				
				НоваяЗаписьРуководитель.СтруктурнаяЕдиница = СправочникОбъект.Ссылка;
				НоваяЗаписьРуководитель.Период = Выборка.PeriodSupervisor;
				НоваяЗаписьРуководитель.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
				
				НоваяЗаписьРуководитель.Прочитать();
				
				Если Не НоваяЗаписьРуководитель.Выбран() Тогда
					
					НоваяЗаписьРуководитель.СтруктурнаяЕдиница = СправочникОбъект.Ссылка;
					НоваяЗаписьРуководитель.Период = Выборка.PeriodSupervisor;
					НоваяЗаписьРуководитель.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
					НоваяЗаписьРуководитель.ФизическоеЛицо = Руководитель.Физлицо;
					НоваяЗаписьРуководитель.Должность = Справочники.ДолжностиОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", ВЫборка.AppointmentSupervisor);
					НоваяЗаписьРуководитель.Записать(Ложь);
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.СотрудникиОрганизаций") Тогда
			
			// Запишем историю статусов
			
			Если ЗначениеЗаполнено(Выборка.EmpStatus) И ЗначениеЗаполнено(Выборка.StatusHistory) Тогда
				
				Запрос = Новый Запрос;
				ЗАпрос.Текст = 
				"ВЫБРАТЬ
				|	Пользователи.Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.абс_Сотрудник.абс_КодИСУЗК = &абс_КодИСУЗК";
				
				ЗАпрос.УстановитьПараметр("абс_КодИСУЗК", Выборка.EmpStatus);
				ВЫборкаПОльзователь = ЗАпрос.Выполнить().Выбрать();
				Если ВЫборкаПОльзователь.Следующий() Тогда
					ПользовательИзменившийСтатус = ВЫборкаПОльзователь.Ссылка;
				Иначе
					ПользовательИзменившийСтатус = Справочники.Пользователи.ПустаяСсылка();
				КонецЕсли;
				
				НоваяСтрока = РегистрыСведений.абс_ИсторияСтатусовСотрудников.СоздатьМенеджерЗаписи();
				
				НоваяСтрока.Объект = СправочникОбъект.Ссылка;
				НоваяСтрока.Статус = ОпределитьСтатусСотрудникаПоСтроке(СокрЛП(Выборка.StatusHistory));
				НоваяСтрока.Период = Выборка.PeriodStatus;
				
				НоваяСтрока.Прочитать();
				
				Если Не НоваяСтрока.Выбран() Тогда
					
					НоваяСтрока.Объект 					= СправочникОбъект.Ссылка;
					НоваяСтрока.Период 					= Выборка.PeriodStatus;
					НоваяСтрока.Статус 					= ОпределитьСтатусСотрудникаПоСтроке(СокрЛП(Выборка.StatusHistory));
					НоваяСтрока.Пользователь 			= ПользовательИзменившийСтатус;
					НоваяСтрока.Сотрудник 				= ПользовательИзменившийСтатус.абс_Сотрудник;
					НоваяСтрока.Комментарий 			= Выборка.StatusKomment;
					
					НоваяСтрока.Записать(Ложь);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
			
			
			// нач  ВСТАВКА Нарыжный 03.10.2013 33061
		    Если ЗначениеЗаполнено(СправочникОбъект.Наименование) Тогда 
		    	ПроцедурыУправленияПерсоналомПолныеПрава.СинхронизироватьНаименованияСотрудников(СправочникОбъект.Ссылка);
            КонецЕсли;
		    // кон  ВСТАВКА Нарыжный 03.10.2013 33061

			
			// Запишем историю статусов
			
			//	,[StatusDate]
			//	,[StatusKoment]
			//	,[StatusEmployee]
			//	,[StatusHistory]
			
			Если ЗначениеЗаполнено(Выборка.StatusEmployee) И ЗначениеЗаполнено(Выборка.StatusHistory) Тогда
				
				Запрос = Новый Запрос;
				ЗАпрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Пользователи.Ссылка,
				|	Пользователи.абс_Сотрудник
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.абс_Сотрудник.абс_УникальныйИдентификаторСотрудника = &абс_КодИСУЗК";
				
				ЗАпрос.УстановитьПараметр("абс_КодИСУЗК", СокрЛП(Выборка.StatusEmployee));
				ВЫборкаПОльзователь = ЗАпрос.Выполнить().Выбрать();
				Если ВЫборкаПОльзователь.Следующий() Тогда
					ПользовательИзменившийСтатус = ВЫборкаПОльзователь.Ссылка;
				Иначе
					ПользовательИзменившийСтатус = Справочники.Пользователи.ПустаяСсылка();
				КонецЕсли;
				
				НоваяСтрока = РегистрыСведений.абс_ИсторияСтатусовНСИ.СоздатьМенеджерЗаписи();
				
				НоваяСтрока.ОбъектСогласования = СправочникОбъект.Ссылка;
				НоваяСтрока.Статус = ОпределитьСтатусНСИПоСтроке(СокрЛП(Выборка.StatusHistory));
				НоваяСтрока.Период = Выборка.StatusDate;
				
				НоваяСтрока.Прочитать();
				
				Если Не НоваяСтрока.Выбран() Тогда
					
					НоваяСтрока.ОбъектСогласования		= СправочникОбъект.Ссылка;
					НоваяСтрока.Период 					= Выборка.StatusDate;
					НоваяСтрока.Статус 					= ОпределитьСтатусНСИПоСтроке(СокрЛП(Выборка.StatusHistory));
					НоваяСтрока.Пользователь 			= ПользовательИзменившийСтатус;
					НоваяСтрока.Сотрудник 				= ПользовательИзменившийСтатус.абс_Сотрудник;
					НоваяСтрока.Комментарий 			= Выборка.StatusKoment;
					
					НоваяСтрока.Записать(Ложь);
				КонецЕсли;
			КонецЕсли;
			
			// Запишем ФИО 
			
			//,[Family]
			//,[Name]
			//,[Patronymic]
			//,[DateFIO]
			Если ЗначениеЗаполнено(Выборка.DateFIO) Тогда 
				
				НоваяСтрока = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
				
				НоваяСтрока.ФизЛицо = СправочникОбъект.Ссылка;
				НоваяСтрока.Период = НачалоДня(Выборка.DateFIO);
				
				НоваяСтрока.Прочитать();
				
				Если Не НоваяСтрока.Выбран() Или НоваяСтрока.Имя <> Выборка.Name Или НоваяСтрока.Фамилия <> Выборка.Family Или НоваяСтрока.Отчество <> Выборка.Patronymic Тогда
					
					НоваяСтрока.ФизЛицо					= СправочникОбъект.Ссылка;
					НоваяСтрока.Период 					= НачалоДня(Выборка.DateFIO);
					НоваяСтрока.Фамилия					= Выборка.Family;
					НоваяСтрока.Имя			 			= Выборка.Name;
					НоваяСтрока.Отчество 				= Выборка.Patronymic;
					
					НоваяСтрока.Записать(Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПоследняяВерсияВSQL =  Выборка.ID;
		Возврат Истина;
	Исключение
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки(), "ВыполнитьПодключениеКSQL(Настройка)");
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ОпределитьСтатусНСИПоСтроке(СтатусСтрока)
	
	Статус = Перечисления.абс_СтатусыНСИ.ПустаяСсылка();
	Если СтатусСтрока = "Подготовка" Тогда
		Статус = Перечисления.абс_СтатусыНСИ.Подготовка;
	ИначеЕсли СтатусСтрока = "Согласование" Тогда
		Статус = Перечисления.абс_СтатусыНСИ.СогласованиеКадровиком;
	ИначеЕсли СтатусСтрока = "Согласование НСИ" Тогда
		Статус = Перечисления.абс_СтатусыНСИ.СогласованиеНСИ;
	ИначеЕсли СтатусСтрока = "Отказ" Тогда
		Статус = Перечисления.абс_СтатусыНСИ.Отказ;
	ИначеЕсли СтатусСтрока = "Согласовано" Тогда
		Статус = Перечисления.абс_СтатусыНСИ.Согласовано;
	ИначеЕсли СтатусСтрока = "Изменение информации" Тогда
		Статус = Перечисления.абс_СтатусыНСИ.ИзменениеИнформации;
	ИначеЕсли СтатусСтрока = "Архив" Тогда
		Статус = Перечисления.абс_СтатусыНСИ.Архив;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ОпределитьСтатусСотрудникаПоСтроке(СтатусСтрока)
	
	Статус = Перечисления.абс_СтатусыСотрудников.ПустаяСсылка();
	Если СтатусСтрока = "Подготовка" Тогда
		Статус = Перечисления.абс_СтатусыСотрудников.Подготовка;
	ИначеЕсли СтатусСтрока = "Согласование" Тогда
		Статус = Перечисления.абс_СтатусыСотрудников.Согласование;
	ИначеЕсли СтатусСтрока = "Работает" Тогда
		Статус = Перечисления.абс_СтатусыСотрудников.Работает;
	ИначеЕсли СтатусСтрока = "Уволен" Тогда
		Статус = Перечисления.абс_СтатусыСотрудников.Уволен;
	ИначеЕсли СтатусСтрока = "Архив" Тогда
		Статус = Перечисления.абс_СтатусыСотрудников.Архив;
	ИначеЕсли СтатусСтрока = "Изменение информации" Тогда
		Статус = Перечисления.абс_СтатусыСотрудников.ИзменениеИнформации;
	ИначеЕсли СтатусСтрока = "Отказ" Тогда
		Статус = Перечисления.абс_СтатусыСотрудников.Отказ;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Процедура ДвиженияПоРегиструИсторииЦФОЦФУ(Ссылка, Выборка)
	
	НоваяСтрока = РегистрыСведений.абс_ИсторияЦФОЦФУпоПодразделению.СоздатьМенеджерЗаписи();
	
	НоваяСтрока.Период = Выборка.PeriodCFOCFU;
	НоваяСтрока.ПодразделениеОрганизации = Ссылка;
	НоваяСтрока.ЦФО = Справочники.Подразделения.НайтиПоКоду(Выборка.CFO);
	НоваяСтрока.ЦФУ = Справочники.абс_ЦФУ.НайтиПоКоду(Выборка.CFU);
	//АБС ВСТАВКА №35708 НАЧАЛО
	НоваяСтрока.Пользователь = НайтиСотрудникаОрганизацииПоУИН(Выборка.EmpCFOCFU);//Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("абс_КодИСУЗК", Выборка.EmpCFOCFU);
	//\\АБС ВСТАВКА №35708 КОНЕЦ
	НоваяСтрока.Записать(Истина);
	
КонецПроцедуры

Функция ВыполнитьЗапросИВернутьТЗ (ТекущийОбмен,ПоследняяВерсияВSQL) Экспорт
	
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));
	
	ТЗВерсии =  РегистрыСведений.абс_ВерсииОбъектров.СрезПоследних(,Новый Структура("НастройкаОбмена",ТекущийОбмен));
	Если ТЗВерсии = Неопределено  ТОгда
		ПоследняяВерсияВSQL = 0;
	ИначеЕсли  ТЗВерсии.Количество()<> 0 Тогда
		ПоследняяВерсияВSQL = Формат(Число(ТЗВерсии[0].НомерВерсии),"ЧН=0; ЧГ=0");
	ИНаче
		ПоследняяВерсияВSQL = 0;
	КонецЕсли;
	
	ТекстЗапроса = "Select * from "+ТекущийОбмен.ИмяТаблицыSQL+ " where ID > "+ ПоследняяВерсияВSQL;
	
	ТЗ = абс_ПроцедурыОбмена.ВыполнитьЗапросНаСервере(ТекстЗапроса,СтруктураПодключения);
	
	Возврат ТЗ;
	
КонецФункции

//АБС_Родин
Процедура ВыполнитьКомандуSQl(ИмяХранимойПроцедуры,ТаблицаПараметров,Соединение,БылаОшибка)
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	Cmd.CommandText = ИмяХранимойПроцедуры;
	Cmd.CommandType = 4;
	
	Для каждого Стр Из ТаблицаПараметров Цикл
		Попытка
			
			//АБС ВСТАВКА   08.12.2014 15:15:35  Шамов
			Если Стр.ТипЗначенияПараметра = 131
				ИЛИ Стр.ТипЗначенияПараметра = 3 Тогда
				par = Cmd.CreateParameter(Стр.ИмяПараметра,Стр.ТипЗначенияПараметра,Стр.Направление);
				par.Precision = Стр.РазмерПараметра;
				par.NumericScale = Стр.Точность;
				par.Value = Стр.ЗначениеПараметра;
				Cmd.parameters.append(par);	
			Иначе
			//АБС ВСТАВКА  КОНЕЦ
				par = Cmd.CreateParameter(Стр.ИмяПараметра,Стр.ТипЗначенияПараметра,Стр.Направление,Стр.РазмерПараметра,Стр.ЗначениеПараметра);
				Cmd.parameters.append(par);	
 			//АБС ВСТАВКА   08.12.2014 15:15:35  Шамов
			КонецЕсли;
			//АБС ВСТАВКА  КОНЕЦ

		Исключение
			сообщить(Стр.ИмяПараметра);
			сообщить(Стр.ТипЗначенияПараметра);

			
		КонецПопытки;
	
	КонецЦикла;
	
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		ЗаписьЖурналаРегистрации("Cmd.Execute()", УровеньЖурналаРегистрации.Информация, , , ИмяХранимойПроцедуры);
		Rs = Cmd.Execute(); 		
	Исключение
		абс_WebService.СообщитьОбОшибке("Запрос не выполнен: " + ОписаниеОшибки(), "Cmd.Execute()");
		БылаОшибка = Истина;
	КонецПопытки;
	
КонецПроцедуры
//АБС_Родин

//АБС_Родин
Процедура ВыполнитьОбменПользователями(ТекущийОбмен)
	БылаОшибка = Ложь;
	
	
	Если ТекущийОбмен.ВыполнятьОбмен = Ложь ТОгда
		Возврат;
	КонецЕсли;
	
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	СтруктураПодключения.Вставить("Table",			СокрЛП(ТекущийОбмен.ИмяТаблицыSQL));	
	
	//Таблица параметров хранимых процедур
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
	ТаблицаПараметров.Колонки.Добавить("ТипЗначенияПараметра");
	ТаблицаПараметров.Колонки.Добавить("Направление");
	ТаблицаПараметров.Колонки.Добавить("РазмерПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	
	//Таблица пользователей
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Код");
	ТаблицаПользователей.Колонки.Добавить("Наименование");
	ТаблицаПользователей.Колонки.Добавить("ИдентификаторПользователяИБ");
	ТаблицаПользователей.Колонки.Добавить("Ссылка");
	ТаблицаПользователей.Колонки.Добавить("КодИСУЗК");
	ТаблицаПользователей.Колонки.Добавить("ИмяВДомене");
	
	//Проверка соединения
	Соединение = абс_ПроцедурыОбмена.ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Ложь Тогда
		Возврат;	
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	
	//Получение таблицы измененых пользователей
	ТекНомер = ТекущийОбмен.Узел.НомерОтправленного;
	Выборка = ПланыОбмена.ВыбратьИзменения(ТекущийОбмен.Узел,ТекНомер);
	Пока Выборка.Следующий() Цикл
		
		ТекПользователь = Выборка.Получить();
		
		Если ТипЗнч(ТекПользователь) = Тип("СправочникОбъект.Пользователи") Тогда
			НоваяСтрока     = ТаблицаПользователей.Добавить();
			НоваяСтрока.Код                          = ТекПользователь.Код;
			НоваяСтрока.Наименование                 = ТекПользователь.Наименование;
			НоваяСтрока.ИдентификаторПользователяИБ  = ТекПользователь.ИдентификаторПользователяИБ;
			НоваяСтрока.Ссылка                       = ТекПользователь.Ссылка;
			НоваяСтрока.КодИСУЗК                     = ТекПользователь.абс_Сотрудник.абс_УникальныйИдентификаторСотрудника;  //Заменен на новый реквизит
			ПользовательИБ							 = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь.ИдентификаторПользователяИБ);
			НоваяСтрока.ИмяВДомене                   = ПользовательИБ.ПользовательОС;
		КонецЕсли;
	КонецЦикла;
	
	
	ТаблицаРолейПользователей   = абс_БизнесПроцессыУведомления.ПолучитьМассивРолейПользователейИСУЗК(ТаблицаПользователей.ВыгрузитьКолонку("Ссылка"));
	ТаблицаРолейБППользователей = абс_БизнесПроцессыУведомления.ПолучитьМассивРолейБППользователейИСУЗК(ТаблицаПользователей.ВыгрузитьКолонку("Ссылка"));
	
	ОтборПоПользователю = Новый Структура("Пользователь");
	
	
	Для Каждого Выборка Из ТаблицаПользователей Цикл
		
		ТаблицаПараметров.Очистить();
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.ИмяПараметра             = "@ID";
		НоваяСтрока.ТипЗначенияПараметра     = 129;
		НоваяСтрока.Направление              = 1;
		НоваяСтрока.РазмерПараметра          = 50;
		НоваяСтрока.ЗначениеПараметра        = СокрЛП(Строка(Выборка.ИдентификаторПользователяИБ));
		
		ВыполнитьКомандуSQl("dbo.RemoveID",ТаблицаПараметров,Соединение, БылаОшибка);
		
		ТаблицаПараметров.Очистить();
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.ИмяПараметра             = "@ID";
		НоваяСтрока.ТипЗначенияПараметра     = 129;
		НоваяСтрока.Направление              = 1;
		НоваяСтрока.РазмерПараметра          = 50;
		НоваяСтрока.ЗначениеПараметра        = СокрЛП(Строка(Выборка.ИдентификаторПользователяИБ));
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.ИмяПараметра             = "@Name";
		НоваяСтрока.ТипЗначенияПараметра     = 129;
		НоваяСтрока.Направление              = 1;
		НоваяСтрока.РазмерПараметра          = 100;
		НоваяСтрока.ЗначениеПараметра        = Выборка.Наименование;
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.ИмяПараметра             = "@KodeISUZK";
		НоваяСтрока.ТипЗначенияПараметра     = 129;
		НоваяСтрока.Направление              = 1;
		НоваяСтрока.РазмерПараметра          = 40;
		НоваяСтрока.ЗначениеПараметра        = Выборка.КодИСУЗК;
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.ИмяПараметра             = "@UserOS";
		НоваяСтрока.ТипЗначенияПараметра     = 129;
		НоваяСтрока.Направление              = 1;
		НоваяСтрока.РазмерПараметра          = 75;
		НоваяСтрока.ЗначениеПараметра        = Выборка.ИмяВДомене;
		
		
		ВыполнитьКомандуSQl("dbo.ins_User",ТаблицаПараметров,Соединение, БылаОшибка);
		
		//Выгрузка типовых ролей
		ОтборПоПользователю.Пользователь =  Выборка.Ссылка;
		МассивРолейПользователя =  ТаблицаРолейПользователей.НайтиСтроки(ОтборПоПользователю);
		
		Если МассивРолейПользователя.Количество() <> 0 Тогда
			Для каждого Стр Из МассивРолейПользователя Цикл
				
				Если Стр.ИмяРоли = "ПолныеПраваИСУЗК" Тогда
					Стр.ИмяРоли = "ПолныеПрава";
				КонецЕсли;
				
				Если Стр.ИмяРоли = "ПользовательИСУЗК" Тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаПараметров.Очистить();
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@ID";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 50;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(Строка(Выборка.ИдентификаторПользователяИБ));
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@RoleName";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 120;
				НоваяСтрока.ЗначениеПараметра        = Стр.ИмяРоли;
				
				ВыполнитьКомандуSQl("dbo.ins_Roles",ТаблицаПараметров,Соединение, БылаОшибка);
				
			КонецЦикла;
		КонецЕсли;
		
		//Выгрузка ролей по БП
		МассивРолейПользователя =  ТаблицаРолейБППользователей.НайтиСтроки(ОтборПоПользователю);
		Если МассивРолейПользователя.Количество() <> 0 Тогда
			Для каждого Стр Из МассивРолейПользователя Цикл
				
				ТаблицаПараметров.Очистить();
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@ID";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 50;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(Строка(Выборка.ИдентификаторПользователяИБ));
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@RoleName";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 120;
				НоваяСтрока.ЗначениеПараметра        = Справочники.РолиИсполнителей.ПолучитьИмяПредопределенного(Стр.ИмяРоли);
				
				ВыполнитьКомандуSQl("dbo.ins_RolesBP",ТаблицаПараметров,Соединение, БылаОшибка);
				
			КонецЦикла;
		КонецЕсли;
		
		
		Если  БылаОшибка = Ложь Тогда
			Попытка
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел,Выборка.Ссылка);
			Исключение
				абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + Выборка.Ссылка, "ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен)");
			КонецПопытки;
		Иначе
			абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + Выборка.Ссылка, "ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен)");
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры 
//АБС_Родин

//АБС Вставка Родин 250314 отправка ТЭО

Функция ПолучитьДатуВФорматеSQL()

	Возврат Формат(ТекущаяДата(), "ДФ='yyyyMMdd HH:mm:ss'");
	//Возврат 1;
КонецФункции 

Функция ПолучитьТекстСообщенияТЭО(НомерСообщения,ЗадачаТЭО)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	абс_ПерепискаТЭО.Дата,
	|	абс_ПерепискаТЭО.АвторСообщения.Наименование КАК АвторСообщения
	|ИЗ
	|	РегистрСведений.абс_ПерепискаТЭО КАК абс_ПерепискаТЭО
	|ГДЕ
	|	абс_ПерепискаТЭО.Регистратор = &Регистратор
	|	И абс_ПерепискаТЭО.НомерСообщения = &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	Запрос.УстановитьПараметр("Регистратор", ЗадачаТЭО);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат "По задаче ТЭО № "+ СокрЛП(ЗадачаТЭО.Номер) +" новое событие,"+ СокрЛП(ВыборкаДетальныеЗаписи.Дата)+", пользователь: " + СокрЛП(ВыборкаДетальныеЗаписи.АвторСообщения);
	КонецЕсли;
	
КонецФункции 

Функция ПолучитьАдресЭлектроннойПочты(Пользователь)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЕмайл
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &Вид
		|	И КонтактнаяИнформация.Объект = &Объект"
		;
		
	Запрос.УстановитьПараметр("Объект", Пользователь.ФизЛицо);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Выборка =  Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		Возврат Выборка.АдресЕмайл;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции 

Процедура ВыполнитьОбменТЭО(ТекущийОбмен,ЭлектронноеПисьмо,БылаОшибка,НомерСообщения) Экспорт

	СписокКонтакты = Новый ТаблицаЗначений;
	СписокКонтакты.Колонки.Добавить("ИмяКонтакта");
	СписокКонтакты.Колонки.Добавить("АдресЭлектроннойПочты");
	СписокКонтакты.Колонки.Добавить("id_User");
	
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	СтруктураПодключения.Вставить("Table",			СокрЛП(ТекущийОбмен.ИмяТаблицыSQL));	
	
	//Таблица параметров хранимых процедур
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
	ТаблицаПараметров.Колонки.Добавить("ТипЗначенияПараметра");
	ТаблицаПараметров.Колонки.Добавить("Направление");
	ТаблицаПараметров.Колонки.Добавить("РазмерПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	
	//Проверка соединения
	Соединение = абс_ПроцедурыОбмена.ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Ложь Тогда
		Возврат;	
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	
	//tbl_conf_notif_events
	//ТаблицаПараметров.Очистить();
	//НоваяСтрока = ТаблицаПараметров.Добавить();
	//НоваяСтрока.ИмяПараметра             = "@id_job";
	//НоваяСтрока.ТипЗначенияПараметра     = 3;
	//НоваяСтрока.Направление              = 1;
	//НоваяСтрока.РазмерПараметра          = 50;
	//НоваяСтрока.ЗначениеПараметра        = 1;
	//
	//НоваяСтрока = ТаблицаПараметров.Добавить();
	//НоваяСтрока.ИмяПараметра             = "@event_name";
	//НоваяСтрока.ТипЗначенияПараметра     = 200;
	//НоваяСтрока.Направление              = 1;
	//НоваяСтрока.РазмерПараметра          = 200;
	//НоваяСтрока.ЗначениеПараметра        = "testEvent";
	//
	//НоваяСтрока = ТаблицаПараметров.Добавить();
	//НоваяСтрока.ИмяПараметра             = "@event_description";
	//НоваяСтрока.ТипЗначенияПараметра     = 200;
	//НоваяСтрока.Направление              = 1;
	//НоваяСтрока.РазмерПараметра          = 500;
	//НоваяСтрока.ЗначениеПараметра        = "testDescr";
		
	//ВыполнитьКомандуSQl("Ins_events",ТаблицаПараметров,Соединение, БылаОшибка);
	
	//tbl_conf_notif_messages
	ТаблицаПараметров.Очистить();
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.ИмяПараметра             = "@id_event";
	НоваяСтрока.ТипЗначенияПараметра     = 3;
	НоваяСтрока.Направление              = 1;
	НоваяСтрока.РазмерПараметра          = 50;
	НоваяСтрока.ЗначениеПараметра        = 2;
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.ИмяПараметра             = "@topic";
	НоваяСтрока.ТипЗначенияПараметра     = 200;
	НоваяСтрока.Направление              = 1;
	НоваяСтрока.РазмерПараметра          = 128;
	НоваяСтрока.ЗначениеПараметра        = "Новое событие по задаче ТЭО";
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.ИмяПараметра             = "@body";
	НоваяСтрока.ТипЗначенияПараметра     = 200;
	НоваяСтрока.Направление              = 1;
	НоваяСтрока.РазмерПараметра          = 7800;
	НоваяСтрока.ЗначениеПараметра        = ПолучитьТекстСообщенияТЭО(НомерСообщения,ЭлектронноеПисьмо);
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.ИмяПараметра             = "@is_notif_successful";
	НоваяСтрока.ТипЗначенияПараметра     = 16;
	НоваяСтрока.Направление              = 1;
	НоваяСтрока.РазмерПараметра          = 50;
	НоваяСтрока.ЗначениеПараметра        = 0;
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.ИмяПараметра             = "@err";
	НоваяСтрока.ТипЗначенияПараметра     = 200;
	НоваяСтрока.Направление              = 1;
	НоваяСтрока.РазмерПараметра          = 500;
	НоваяСтрока.ЗначениеПараметра        = "";
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.ИмяПараметра             = "@id_eisup";
	НоваяСтрока.ТипЗначенияПараметра     = 200;
	НоваяСтрока.Направление              = 1;
	НоваяСтрока.РазмерПараметра          = 50;
	НоваяСтрока.ЗначениеПараметра        = СокрЛП(ЭлектронноеПисьмо.Номер) + Строка(НомерСообщения);

	
	ВыполнитьКомандуSQl("dbo.Ins_messages",ТаблицаПараметров,Соединение, БылаОшибка);
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Для каждого СтрокаТЧ Из ЭлектронноеПисьмо.ПолучателиСообщений Цикл
		
		Если СтрокаТЧ.Пользователь = мТекущийПользователь Тогда
			Продолжить;	
		КонецЕсли;
		
		////tbl_conf_notif_contacts
		//ТаблицаПараметров.Очистить();
		//НоваяСтрока = ТаблицаПараметров.Добавить();
		//НоваяСтрока.ИмяПараметра             = "@contact_name";
		//НоваяСтрока.ТипЗначенияПараметра     = 200;
		//НоваяСтрока.Направление              = 1;
		//НоваяСтрока.РазмерПараметра          = 200;
		//НоваяСтрока.ЗначениеПараметра        = СтрокаТЧ.Пользователь.Наименование;
		//
		//НоваяСтрока = ТаблицаПараметров.Добавить();
		//НоваяСтрока.ИмяПараметра             = "@e_mail";
		//НоваяСтрока.ТипЗначенияПараметра     = 200;
		//НоваяСтрока.Направление              = 1;
		//НоваяСтрока.РазмерПараметра          = 200;
		//НоваяСтрока.ЗначениеПараметра        = ПолучитьАдресЭлектроннойПочты(СтрокаТЧ.Пользователь);
		//
		//НоваяСтрока = ТаблицаПараметров.Добавить();
		//НоваяСтрока.ИмяПараметра             = "@datetime_inserted";
		//НоваяСтрока.ТипЗначенияПараметра     = 135;
		//НоваяСтрока.Направление              = 1;
		//НоваяСтрока.РазмерПараметра          = 23;
		//НоваяСтрока.ЗначениеПараметра        = null;
		//
		//НоваяСтрока = ТаблицаПараметров.Добавить();
		//НоваяСтрока.ИмяПараметра             = "@is_expired";
		//НоваяСтрока.ТипЗначенияПараметра     = 3;
		//НоваяСтрока.Направление              = 1;
		//НоваяСтрока.РазмерПараметра          = 1;
		//НоваяСтрока.ЗначениеПараметра        = 0;
		//
		//НоваяСтрока = ТаблицаПараметров.Добавить();
		//НоваяСтрока.ИмяПараметра             = "@expiration_datetime";
		//НоваяСтрока.ТипЗначенияПараметра     = 135;
		//НоваяСтрока.Направление              = 1;
		//НоваяСтрока.РазмерПараметра          = 23;
		//НоваяСтрока.ЗначениеПараметра        = null;
		//
		//НоваяСтрока = ТаблицаПараметров.Добавить();
		//НоваяСтрока.ИмяПараметра             = "@Id_User";
		//НоваяСтрока.ТипЗначенияПараметра     = 200;
		//НоваяСтрока.Направление              = 1;
		//НоваяСтрока.РазмерПараметра          = 50;
		//НоваяСтрока.ЗначениеПараметра        = СокрЛП(СтрокаТЧ.Пользователь.абс_Сотрудник.абс_УникальныйИдентификаторСотрудника);
		
		//ВыполнитьКомандуSQl("Update_Contacts",ТаблицаПараметров,Соединение, БылаОшибка);
		
		//tbl_conf_notif_messagesVsContacts
		ТаблицаПараметров.Очистить();
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.ИмяПараметра             = "@id_User";
		НоваяСтрока.ТипЗначенияПараметра     = 200;
		НоваяСтрока.Направление              = 1;
		НоваяСтрока.РазмерПараметра          = 50;
		НоваяСтрока.ЗначениеПараметра        = Строка(СтрокаТЧ.Пользователь.абс_Сотрудник.ФизЛицо.абс_КодИСУЗК);
		
		НоваяСтрока = ТаблицаПараметров.Добавить();                                    
		НоваяСтрока.ИмяПараметра             = "@id_eisup";
		НоваяСтрока.ТипЗначенияПараметра     = 200;
		НоваяСтрока.Направление              = 1;
		НоваяСтрока.РазмерПараметра          = 50;
		НоваяСтрока.ЗначениеПараметра        = СокрЛП(ЭлектронноеПисьмо.Номер) + Строка(НомерСообщения);
		
	    ВыполнитьКомандуSQl("Ins_messagesVsContacts",ТаблицаПараметров,Соединение, БылаОшибка);
		
	КонецЦикла; 
	
	
	//Если Не БылаОшибка Тогда
	//	//tbl_conf_notif_settings
	//	ТаблицаПараметров.Очистить();
	//	НоваяСтрока = ТаблицаПараметров.Добавить();
	//	НоваяСтрока.ИмяПараметра             = "@id";
	//	НоваяСтрока.ТипЗначенияПараметра     = 3;
	//	НоваяСтрока.Направление              = 1;
	//	НоваяСтрока.РазмерПараметра          = 50;
	//	НоваяСтрока.ЗначениеПараметра        = 1;
	//	
	//	НоваяСтрока = ТаблицаПараметров.Добавить();
	//	НоваяСтрока.ИмяПараметра             = "@mail_server";
	//	НоваяСтрока.ТипЗначенияПараметра     = 200;
	//	НоваяСтрока.Направление              = 1;
	//	НоваяСтрока.РазмерПараметра          = 50;
	//	НоваяСтрока.ЗначениеПараметра        = "mail.transtk.ru";
	//	
	//	НоваяСтрока = ТаблицаПараметров.Добавить();
	//	НоваяСтрока.ИмяПараметра             = "@user_name";
	//	НоваяСтрока.ТипЗначенияПараметра     = 200;
	//	НоваяСтрока.Направление              = 1;
	//	НоваяСтрока.РазмерПараметра          = 100;
	//	НоваяСтрока.ЗначениеПараметра        = "eisup@ttk.ru";
	//	
	//	НоваяСтрока = ТаблицаПараметров.Добавить();
	//	НоваяСтрока.ИмяПараметра             = "@alias";
	//	НоваяСтрока.ТипЗначенияПараметра     = 200;
	//	НоваяСтрока.Направление              = 1;
	//	НоваяСтрока.РазмерПараметра          = 100;
	//	НоваяСтрока.ЗначениеПараметра        = "EISUP";
	//	
	//	НоваяСтрока = ТаблицаПараметров.Добавить();
	//	НоваяСтрока.ИмяПараметра             = "@time_interval";
	//	НоваяСтрока.ТипЗначенияПараметра     = 20;
	//	НоваяСтрока.Направление              = 1;
	//	НоваяСтрока.РазмерПараметра          = 8;
	//	НоваяСтрока.ЗначениеПараметра        = 60000;
	//	
	//	//ВыполнитьКомандуSQl("Ins_setting",ТаблицаПараметров,Соединение, БылаОшибка);
	//	
	//КонецЕсли;
		
КонецПроцедуры
//АБС Вставка Родин 250314 отправка ТЭО

//АБС
//ТипОбъекта - Строка (к примеру "Справочник.Контрагенты") или "Документ.приходнаяНАкладная" 
//СтруктураПодключения (Provider (сервер),DataSource (имяБазыДанных),UserID(Логин),Password(пароль) 
Процедура ВыполнитьОбмен(ТекущийОбмен, ТекущийОбменФайлами = Неопределено)Экспорт 
	
// +++ввв добавление для тестирования обмена с Аргусом
	ФлагТеста=Ложь;
	Если ЗначениеЗаполнено(Константы.ввв_ФлагТестированияРазработок.Получить()) Тогда
		ФлагТеста=Константы.ввв_ФлагТестированияРазработок.Получить();
	Иначе
		ФлагТеста=Ложь;
	КонецЕсли;
	Если ФлагТеста Тогда
	Иначе
		Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
			Возврат;	
		КонецЕсли;	
	КонецЕсли;
// ---ввв	
	//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
//	Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
//		Возврат;	
//	КонецЕсли;	
	//\\АБС ВСТАВКА №40078 КОНЕЦ	
	
// +++ввв 28.09.2015
	Если Лев(ТекущийОбмен.Наименование,7)="000001." Тогда
		ВыполнитьОбменСАргусомЧерезЖурналОбмена(ТекущийОбмен);
//	Если ТекущийОбмен.ТипОбъекта = "СправочникСсылка.Контрагенты" Тогда
	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.Контрагенты" Тогда
// ---ввв
		ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен);
		Возврат;
	ИначеЕсли  ТекущийОбмен.ТипОбъекта = "СправочникСсылка.Номенклатура"  ТОгда
		абс_ОбработкаWebService =  абс_WebService.ПолучитьОбработчикWebService();
		Выполнить("абс_ОбработкаWebService.ВыполнитьОбменПоНоменклатуреЧерезПланОбмена(ТекущийОбмен)");
	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.СотрудникиОрганизаций" Тогда
		ВыполнитьОбменПоСотрудникам(ТекущийОбмен, ТекущийОбменФайлами);
	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.ПодразделенияОрганизаций" Тогда
		ВыполнитьОбменПоПодразделениям(ТекущийОбмен);
	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.ДолжностиОрганизаций" Тогда
		ВыполнитьОбменПоДолжностям(ТекущийОбмен);
	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.Пользователи" Тогда //АБС_Родин
		ВыполнитьОбменПользователями(ТекущийОбмен);
	 //АБС Новоселов+
 	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.ФизическиеЛица" Тогда
		ВыполнитьОбменПоФизЛицам(ТекущийОбмен);
 	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.ДоговорыКонтрагентов" Тогда
		ВыполнитьОбменПоДоговорам(ТекущийОбмен);
 	ИначеЕсли ТекущийОбмен.ТипОбъекта = "СправочникСсылка.Проекты" Тогда 		//АБС_Навценя
		ИнтеграцияLotus_ВыгрузитьПроекты(ТекущийОбмен);
 	ИначеЕсли ТекущийОбмен.ТипОбъекта = "ДокументСсылка.ЗаказПокупателя" Тогда 	//АБС_Навценя
		ИнтеграцияLotus_ЗагрузитьЗаказы(ТекущийОбмен);
 	ИначеЕсли ТекущийОбмен.ТипОбъекта = "Интеграция_Cognos_Справочники" Тогда 	//АБС_Навценя
		ИнтеграцияCognos_ВыгрузитьСправочники(ТекущийОбмен);
 	ИначеЕсли ТекущийОбмен.ТипОбъекта = "Интеграция_Cognos_Операции" Тогда 		//АБС_Навценя
		ИнтеграцияCognos_ВыгрузитьОперации(ТекущийОбмен);
		
	// АБС ВСТАВКА Фролов КПЭ2 20140916		
	ИначеЕсли ТекущийОбмен.ТипОбъекта = "ДокументСсылка.абс_ВводЗначенийПоказателейДляРасчетаКПЭ" Тогда	
		ВыполнитьОбменПоПоказателям(ТекущийОбмен);
	// АБС ВСТАВКА КОНЕЦ
		
	КонецЕсли;
	
КонецПРоцедуры

Функция НайтиЗаписьВSQL(СЗРеквизитовПоиска,СтруктураПодключения,ТекОбъект,СтрокаТЗ,ТекущийОбмен)
	ТекстЗапроса = 	"SELECT * FROM "+СтруктураПодключения.DataSource+"."+ТекущийОбмен.ИмяТаблицыSQL+ " Where ";
	Для Каждого СТрокаСЗ из  СЗРеквизитовПоиска Цикл
		ТекУсловиеИ = ?(СЗРеквизитовПоиска.Индекс(СТрокаСЗ) = СЗРеквизитовПоиска.Количество()-1,""," and ");
		ТекЗнач = ?(Найти(НРег(СТрокаСЗ.Представление),"запись")>0,СтрокаТЗ[Сред(СокрЛП(СТрокаСЗ.Представление),8)],ТекОбъект[СокрЛП(СТрокаСЗ.Представление)]); 
		ТекстЗапроса = ТекстЗапроса +СТрокаСЗ.Значение + " = "+ТекЗнач+ТекУсловиеИ;
	КонецЦикла;
	Таб= абс_СерверныеФункции.ЗапросВТаблицуSQL(ТекстЗапроса,СтруктураПодключения);
	Если  Таб.Количество() >0 ТОгда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
Функция ЗаписатьВерсииСправочникаВSQL(ТЗСоответствий,СЗРеквизитовПоиска,ТекущийОбмен,ТЗЗаписейНабораВерсииОбъектов,ТипОбъекта,СтруктураПодключения)   Экспорт
	Если Не ЗначениеЗаполнено(СтруктураПодключения) Тогда
		Возврат Ложь;
	КонецЕсли;
	БылаОшибка = Ложь;	
	Попытка	
		ВыполнитьЗаписьВSQL(ТЗСоответствий,СЗРеквизитовПоиска,ТекущийОбмен,ТЗЗаписейНабораВерсииОбъектов,СтруктураПодключения,БылаОшибка);	
	Исключение
		Возврат  Ложь;
	КонецПопытки;
	Возврат  Не БылаОшибка;	
	
КонецФункции
Процедура ДобавитьСтрокуТЗСоответствий(ТЗСоответствий,ПутьКДаннымВSQL,ПутьКДаннымВ1С)
	СтрокаТЗ = ТЗСоответствий.Добавить();
	СтрокаТЗ.ПутьКДаннымВSQL = ПутьКДаннымВSQL;
	СтрокаТЗ.ПутьКДаннымВ1С = ПутьКДаннымВ1С;
КонецПРоцедуры
Функция ПолучитьТЗСоответствийДляЗаписи(ТекущийОбмен,СЗРеквизитовПоиска,ФлагОбъекта=Ложь)Экспорт
	ТекИмяБазы =  СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL);
	ТекИмяТаблицы =  СокрЛП(ТекущийОбмен.ИмяТаблицыSQL);
	ТекПутьКРевизитамSQL =ТекИмяБазы+"."+ТекИмяТаблицы; 
	ТЗСоответствий = Новый ТаблицаЗначений;
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВSQL");
	ТЗСоответствий.Колонки.Добавить("ПутьКДаннымВ1С");
// +++ввв 30.09.2016 г.
	ТЗСоответствий.Колонки.Добавить("МодульПолученияДанныхВ1С");
	ТЗСоответствий.Колонки.Добавить("ОбязательноНепустой");
// ---ввв 30.09.2016 г.
	ТЗСоответствий.Колонки.Добавить("ЭтоУсловие");
	ТЗСоответствий.Колонки.Добавить("Тип");
	
	
	
	
	Для Каждого СтрокаТЧ из   ТекущийОбмен.РеквизитыДляОбмена Цикл
		Если СтрокаТЧ.ВыполнятьОбмен = Ложь ТОгда
			ПРодолжить;		
		КонецЕсли;
		НовСтрока = ТЗСоответствий.Добавить();
		Если СтрокаТЧ.ИскатьПоРеквизиту ТОгда
			СЗРеквизитовПоиска.Добавить(СтрокаТЧ.ИмяРеквизитаВSQL,СтрокаТЧ.ПутьКДаннымРеквизита);
		КонецЕсли;
		НовСтрока.ЭтоУсловие = СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием;
		НовСтрока.Тип =   НРег(СокрЛП(СтрокаТЧ.ТипРеквизитаВSQL));
		НовСтрока.ОбязательноНепустой=СтрокаТЧ.ttk_ОбязательноНепустой;
		//НовСтрока.РеквизитГруппы = СтрокаТЧ.РеквизитГруппы;
		
		//------------------------------
		
		
		НовСтрока.ПутьКДаннымВSQL = ТекПутьКРевизитамSQL+"."+СокрЛП(СтрокаТЧ.ИмяРеквизитаВSQL);
		
		Если  СтрокаТЧ.ПутьКДаннымРеквизитаСУсловием ТОгда
			//Это условие так на всяки пожарный, вдруг все таки поставили галку условие и ниче не сделали , то есть оставили в поле к примеру "Наименование" или "ТекОбъект.наименование"
			Если Лев(СтрокаТЧ.ПутьКДаннымРеквизита,1) <>"?" ТОгда
				Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
					НовСтрока.ПутьКДаннымВ1С ="Значение = "+ СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				Иначе
					НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
				КонецЕсли;
			Иначе
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		ИначеЕсли  Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),6) = "запись" ТОгда
			НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
		Иначе
			Если Лев(НРег(СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита)),9) = "текобъект" ТОгда
				НовСтрока.ПутьКДаннымВ1С ="Значение = " +СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			Иначе
				НовСтрока.ПутьКДаннымВ1С = "Значение = ТекОбъект."+СокрЛП(СтрокаТЧ.ПутьКДаннымРеквизита);
			КонецЕсли;
		КонецЕсли;
// +++ввв 30.09.2016 г.
		Если НЕ ПустаяСтрока(СтрокаТЧ.ttk_МодульПолученияДанныхРеквизита) Тогда
			НовСтрока.МодульПолученияДанныхВ1С=СокрЛП(СтрокаТЧ.ttk_МодульПолученияДанныхРеквизита);
		КонецЕсли;
// ---ввв 30.09.2016 г.
// +++ввв 30.09.2015 
		Если ФлагОбъекта Тогда
			НовСтрока.ПутьКДаннымВ1С=СтрЗаменить(НовСтрока.ПутьКДаннымВ1С,"ТекСтрока","Источник");
		КонецЕсли;
	КонецЦикла;
// ---ввв
	Возврат ТЗСоответствий;
КонецФункции
Процедура ДобавитьЗаписьВSQLЧерезХранимыеПроцедуры(ТЗЗначений,СтруктураПодключения,БылаОшибка)
	ТЗПараметры = Новый ТаблицаЗначений;
	ТЗПараметры.Колонки.Добавить("ИмяПараметра");
	ТЗПараметры.Колонки.Добавить("Параметр");
	
// +++ввв 28.09.2015 параметризация хранимой процедуры
//	ТекстрЗапроса ="Exec "+СтруктураПодключения.DataSource+".Kontraktors_ins_ALL ";
	ТекстрЗапроса ="Exec "+СтруктураПодключения.DataSource+"."+СтруктураПодключения.Table+"_ins_ALL ";
// ---ввв
	Для Каждого СтрокаТЗЗначений из ТЗЗначений  Цикл
		Если  СтрЗаменить(СтрокаТЗЗначений.ПутьКДаннымВSQL,СтруктураПодключения.DataSource+"."+СтруктураПодключения.Table+".","")= "ID_Change" Тогда
			Продолжить;
		Иначе
			ТекстрЗапроса = ТекстрЗапроса+ СтрЗаменить(СокрЛП(СтрокаТЗЗначений.Значение),Символ(160),"")+",";
		КонецЕсли;
	КонецЦикла;
	ТекстрЗапроса = Сред(ТекстрЗапроса,1,СтрДлина(ТекстрЗапроса)-1)+" ";
	ОбновитьДанныеВSQL(ТекстрЗапроса,СтруктураПодключения,БылаОшибка);	
	//Если   БылаОшибка = Ложь Тогда 
	//	ПоследняяВерсия = ПоследняяВерсия+1;
	//КонецЕсли;
КонецПРоцедуры

Процедура ДобавитьЗаписьВSQL(ТЗЗначений,СтрокаЗапросаСозданияЗаписиВSQL,СтруктураПодключения,БылаОшибка)
	//ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ТекстЗапроса = СтрокаЗапросаСозданияЗаписиВSQL +"
	|  values( ";
	Для Каждого СтрокаТЗЗначений из ТЗЗначений  Цикл
		Значение =  СтрокаТЗЗначений.Значение;
		ТекстЗапроса = ТекстЗапроса+"
		|"+Значение+",";
	КонецЦикла;
	ТекстЗапроса =Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1)+")";  //Убрали запятую
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,Символ(160),"");
	ОбновитьДанныеВSQL(ТекстЗапроса,СтруктураПодключения,БылаОшибка);	
	
КонецПРоцедуры

Функция ВыполнитьПодключениеКSQL(Настройка) Экспорт
	
	удачноеСоединение = Истина;
	Попытка
		ConnectionString="DRIVER={SQL Server};SERVER="+СокрЛП(Настройка.Provider)+";UID="+СокрЛП(Настройка.UserID)+";PWD="+СокрЛП(Настройка.Password)+";DATABASE="+СокрЛП(Настройка.DataSource)+";";
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.Open(СокрЛП(ConnectionString));
	Исключение
		абс_WebService.СообщитьОбОшибке(ОписаниеОшибки(), "ВыполнитьПодключениеКSQL(Настройка)");
		//Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
	КонецПопытки; 
	Возврат Соединение;
	
КонецФункции
Процедура ОбновитьДанныеВSQL(ТекстЗапроса,Настройка,БылаОшибка) Экспорт
	
	Перем Соединение;
	
	Если Соединение = Неопределено Тогда
		Соединение = ВыполнитьПодключениеКSQL(Настройка);
	КонецЕсли;
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	Cmd.CommandText = ТекстЗапроса;
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		ЗаписьЖурналаРегистрации("Cmd.Execute()", УровеньЖурналаРегистрации.Информация, , , ТекстЗапроса);
		Rs = Cmd.Execute(); 		
		
	Исключение
		абс_WebService.СообщитьОбОшибке("Запрос не выполнен: " + ОписаниеОшибки(), "Cmd.Execute()");
		БылаОшибка = Истина;
		
	КонецПопытки;
	
	
	
КонецПроцедуры

Процедура ПерезаписатьВSQL(ТекОбмен,ТЗЗначений,СтрокаЗапросаПерезаписиВSQL,СтруктураПодключения,СЗРеквизитовПоиска,БылаОшибка)
	ТекстЗапроса =СтрокаЗапросаПерезаписиВSQL;
	//ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	Для Каждого СтрокаТЗЗначений из ТЗЗначений  Цикл
		ТекстЗапроса = ТекстЗапроса+"
		|"+СтрокаТЗЗначений.ПутьКДаннымВSQL+" = "+СтрокаТЗЗначений.Значение+",";
	КонецЦикла;
	ТекстЗапроса =Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1)+ " WHERE ";  //Убрали запятую
	Для Каждого СтрокаСЗ из СЗРеквизитовПоиска Цикл
		ОператорИ = "";
		Если  СЗРеквизитовПоиска.Индекс(СтрокаСЗ) <> (СЗРеквизитовПоиска.Количество()-1) ТОгда
			ОператорИ = " and ";
		КонецЕсли;           
		ЗначениеДляПоиска = СокрЛП(СтруктураПодключения.DataSource)+ "."+СокрЛП(ТекОбмен.ИмяТаблицыSQL)+"."+СтрокаСЗ.Значение;
		Нашли = ТЗЗначений.Найти(ЗначениеДляПоиска,"ПутьКДаннымВSQL");
		Если  Нашли<>Неопределено ТОгда
			ТекстЗапроса =	ТекстЗапроса+" "+Нашли.ПутьКДаннымВSQL+" = "+Нашли.Значение +ОператорИ;		
		КонецЕсли;
		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,Символ(160),"");
	ОбновитьДанныеВSQL(ТекстЗапроса,СтруктураПодключения,БылаОшибка);	
	
КонецПРоцедуры

//АБС ВСТАВКА  10.04.2014  Навценя

Функция ПолучитьРегламентноеЗадание(НастройкиОбмена) Экспорт
	
	УИД_Строка = НастройкиОбмена.РегламентноеЗадание;
	УИД = Неопределено;
	
	Если ЗначениеЗаполнено(УИД_Строка) Тогда 
		Попытка
			УИД = Новый УникальныйИдентификатор(УИД_Строка);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УИД);
	
КонецФункции

Процедура СоздатьРегламентноеЗадание(НастройкиОбмена) Экспорт
	
	Если ПолучитьРегламентноеЗадание(НастройкиОбмена) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбъект = НастройкиОбмена.ПолучитьОбъект(); 
	РеглЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("абс_ОбменСSQL");
			
	РеглЗадание.Наименование = НастройкиОбъект.Наименование;
	РеглЗадание.Ключ = Строка(РеглЗадание.УникальныйИдентификатор);
	РеглЗадание.Использование = Ложь;
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(НастройкиОбъект.Код);
	МассивПараметров.Добавить("");
	
	РеглЗадание.Параметры = МассивПараметров;
	РеглЗадание.Записать();
	
	НастройкиОбъект.РегламентноеЗадание = Строка(РеглЗадание.УникальныйИдентификатор);
	НастройкиОбъект.Записать();
		
КонецПроцедуры

Процедура ИнтеграцияLotus_ПроверитьУникальностьТипаОбъекта(Ссылка, ТипОбъекта, Отказ) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
		
	Если НЕ (СокрЛП(ТипОбъекта) = "СправочникСсылка.Проекты" ИЛИ СокрЛП(ТипОбъекта) = "ДокументСсылка.ЗаказПокупателя") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	1 КАК Поле1
	                      |ИЗ
	                      |	Справочник.абс_НастройкиОбменаСSQL КАК абс_НастройкиОбменаСSQL
	                      |ГДЕ
	                      |	абс_НастройкиОбменаСSQL.ТипОбъекта = &ТипОбъекта
	                      |	И абс_НастройкиОбменаСSQL.Ссылка <> &Ссылка
	                      |	И ПОДСТРОКА(абс_НастройкиОбменаСSQL.Наименование, 1, 7) <> ""000001.""");
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Отказ = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

Функция ИнтеграцияLotus_ПолучитьУзелПроекты() Экспорт
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_НастройкиОбменаСSQL.Узел
	                      |ИЗ
	                      |	Справочник.абс_НастройкиОбменаСSQL КАК абс_НастройкиОбменаСSQL
	                      |ГДЕ
	                      |	абс_НастройкиОбменаСSQL.ТипОбъекта = ""СправочникСсылка.Проекты""
	                      |	И ПОДСТРОКА(абс_НастройкиОбменаСSQL.Наименование, 1, 7) <> ""000001.""");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда  
		Возврат Выборка.Узел;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИнтеграцияLotus_ПолучитьНастройкуОбмена(Тип) Экспорт
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_НастройкиОбменаСSQL.Ссылка
	                      |ИЗ
	                      |	Справочник.абс_НастройкиОбменаСSQL КАК абс_НастройкиОбменаСSQL
	                      |ГДЕ
	                      |	абс_НастройкиОбменаСSQL.ТипОбъекта = &Тип
	                      |	И ПОДСТРОКА(абс_НастройкиОбменаСSQL.Наименование, 1, 7) <> ""000001.""");
	Запрос.УстановитьПараметр("Тип", Тип);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда  
		Возврат Выборка.Ссылка;	
	КонецЕсли;
	
	НастройкаОбъект = Справочники.абс_НастройкиОбменаСSQL.СоздатьЭлемент();
	НастройкаОбъект.УстановитьНовыйКод("Lotus");
	НастройкаОбъект.Наименование = Тип;
	НастройкаОбъект.ВыполнятьОбмен = Истина;
	НастройкаОбъект.ТипОбъекта = Тип;
	НастройкаОбъект.Записать();
	
	Возврат НастройкаОбъект.Ссылка;
	
КонецФункции

Процедура ИнтеграцияLotus_ВыгрузитьПроекты(НастройкиОбмена)
	
	ИнтеграцияLotus = Обработки.абс_ИнтеграцияLotus.Создать();
	ИнтеграцияLotus.НастройкаОбменаПроекты = НастройкиОбмена;
	ИнтеграцияLotus.ИнициализироватьПараметры();
	ИнтеграцияLotus.ВыгрузитьПроекты();
		
КонецПроцедуры

Процедура ИнтеграцияLotus_ЗагрузитьЗаказы(НастройкиОбмена)
	
	ИнтеграцияLotus = Обработки.абс_ИнтеграцияLotus.Создать();
	ИнтеграцияLotus.НастройкаОбменаЗаказы = НастройкиОбмена;
	ИнтеграцияLotus.ИнициализироватьПараметры();
	ИнтеграцияLotus.ЗагрузитьЗаказыПокупателей();
	
КонецПроцедуры

//АБС ВСТАВКА  28.07.2014  Навценя

Процедура ИнтеграцияCognos_ВыгрузитьСправочники(НастройкиОбмена)
	
	Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
	Соединение = ВыполнитьПодключениеКSQL(Новый Структура("Provider,DataSource,UserID,Password",  
											НастройкиОбмена.ИмяСервераSQL, 
											НастройкиОбмена.ИмяБазыДанныхSQL,
											НастройкиОбмена.ИмяПользователя,
											НастройкиОбмена.Пароль, 
											НастройкиОбмена.ИмяТаблицыSQL));
											
	Если ТипЗнч(Соединение) <> Тип("COMОбъект") Тогда	
		Возврат;
	КонецЕсли;
	
	Узел = НастройкиОбмена.Узел;
	
	Если НЕ ЗначениеЗаполнено(Узел) Тогда 
		Возврат;
	КонецЕсли;
	
	АДОДБКоманда = Новый COMОбъект("ADODB.Command");
	АДОДБКоманда.ActiveConnection = Соединение;	
	
	МассивПолейУсловия = Новый Массив;
	//коды
	МассивПолейУсловия.Добавить("tax_code");
	МассивПолейУсловия.Добавить("cur_code");
	МассивПолейУсловия.Добавить("OS_code");
	МассивПолейУсловия.Добавить("TipS_code");
	МассивПолейУсловия.Добавить("contr_сode");
	МассивПолейУсловия.Добавить("project_code");
	МассивПолейУсловия.Добавить("bud_code");
	МассивПолейУсловия.Добавить("struc_code");
	МассивПолейУсловия.Добавить("org_code");
	МассивПолейУсловия.Добавить("ABF_сode");
	
	//реквизиты
	МассивПолейУсловия.Добавить("name");
	МассивПолейУсловия.Добавить("parent_code");
	МассивПолейУсловия.Добавить("Level");
	МассивПолейУсловия.Добавить("status");
	МассивПолейУсловия.Добавить("inn");
	МассивПолейУсловия.Добавить("kpp");
	МассивПолейУсловия.Добавить("fullname");
	МассивПолейУсловия.Добавить("date_use");
	МассивПолейУсловия.Добавить("use_flg");
		
	МассивРезультатов = ИнтеграцияCognos_ПолучитьРезультатЗапроса_Справочники(Узел);
	
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[0], "Taxes", 				МассивПолейУсловия, АДОДБКоманда);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[1], "Currency", 			МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Валюты);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[2], "OS_Group", 			МассивПолейУсловия, АДОДБКоманда);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[3], "Tip_Setey", 			МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.абс_ТипыСетей);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[4], "ContractorTypes", 	МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.абс_ТипыКонтрагентов);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[5], "Project", 			МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Проекты);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[6], "asb_Organization", 	МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Организации);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[8], "Budget_item", 		МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.СтатьиОборотовПоБюджетам);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[9], "Org_Structure", 		МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.ПодразделенияОрганизаций);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[10], "ABF_Group", 		МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.абс_ГруппыАБФ);
	//ЗаполнитьТаблицуСПроверкой(МассивРезультатов[11], "Fin_Structure", 		МассивПолейУсловия, АДОДБКоманда);
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Подразделения);

	ЗаполнитьТаблицу(МассивРезультатов[0], "Taxes", 			МассивПолейУсловия, АДОДБКоманда);
	ЗаполнитьТаблицу(МассивРезультатов[1], "Currency", 			МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Валюты);
	ЗаполнитьТаблицу(МассивРезультатов[2], "OS_Group", 			МассивПолейУсловия, АДОДБКоманда);
	ЗаполнитьТаблицу(МассивРезультатов[3], "Tip_Setey", 		МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.абс_ТипыСетей);
	ЗаполнитьТаблицу(МассивРезультатов[4], "ContractorTypes", 	МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.абс_ТипыКонтрагентов);
	ЗаполнитьТаблицу(МассивРезультатов[5], "Project", 			МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Проекты);
	ЗаполнитьТаблицу(МассивРезультатов[6], "asb_Organization", 	МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Организации);
	ЗаполнитьТаблицу(МассивРезультатов[8], "Budget_item", 		МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.СтатьиОборотовПоБюджетам);
	ЗаполнитьТаблицу(МассивРезультатов[9], "Org_Structure", 	МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.ПодразделенияОрганизаций);
	ЗаполнитьТаблицу(МассивРезультатов[10], "ABF_Group", 		МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.абс_ГруппыАБФ);
	ЗаполнитьТаблицу(МассивРезультатов[11], "Fin_Structure", 	МассивПолейУсловия, АДОДБКоманда);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Подразделения);
			
КонецПроцедуры

Процедура ИнтеграцияCognos_ВыгрузитьОперации(НастройкиОбмена)
	
	Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкиОбмена.ПериодВыгрузки) Тогда 
		Возврат;
	КонецЕсли;
	
	Соединение = ВыполнитьПодключениеКSQL(Новый Структура("Provider,DataSource,UserID,Password",  
											НастройкиОбмена.ИмяСервераSQL, 
											НастройкиОбмена.ИмяБазыДанныхSQL,
											НастройкиОбмена.ИмяПользователя,
											НастройкиОбмена.Пароль, 
											НастройкиОбмена.ИмяТаблицыSQL));
											
	Если ТипЗнч(Соединение) <> Тип("COMОбъект") Тогда	
		Возврат;
	КонецЕсли;
	
	АДОДБКоманда = Новый COMОбъект("ADODB.Command");
	АДОДБКоманда.ActiveConnection = Соединение;	
	
	МассивРезультатов = ИнтеграцияCognos_ПолучитьРезультатЗапроса_Операции(НастройкиОбмена.ПериодВыгрузки);	
	
	МассивПолейУсловия = Новый Массив;
	МассивПолейУсловия.Добавить("session_id");
	
	ЗаполнитьТаблицуСПроверкой(МассивРезультатов[0], "Operation_sessions", МассивПолейУсловия, АДОДБКоманда);
	ЗаполнитьТаблицу(МассивРезультатов[1], "Operation", "ID", АДОДБКоманда);
		
КонецПроцедуры

Функция ИнтеграцияCognos_ПолучитьУзел() Экспорт
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Узел ИЗ Справочник.абс_НастройкиОбменаСSQL ГДЕ ТипОбъекта = ""Интеграция_Cognos_Справочники""");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда  
		Возврат Выборка.Узел;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИнтеграцияCognos_ПолучитьРезультатЗапроса_Справочники(Узел)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтавкиНДС.Ссылка КАК tax_id,
	                      |	СтавкиНДС.Ссылка КАК tax_сode,
	                      |	ПРЕДСТАВЛЕНИЕ(СтавкиНДС.Ссылка) КАК name,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	ЛОЖЬ КАК LdFlg,
	                      |	СтавкиНДС.Ссылка КАК Code_asb
	                      |ИЗ
	                      |	Перечисление.СтавкиНДС КАК СтавкиНДС
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Валюты.Ссылка КАК cur_id,
	                      |	Валюты.Код КАК cur_сode,
	                      |	Валюты.Наименование КАК name,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	Валюты.Код КАК Code_asb
	                      |ИЗ
	                      |	Справочник.Валюты.Изменения КАК ВалютыИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	                      |		ПО ВалютыИзменения.Ссылка = Валюты.Ссылка
	                      |ГДЕ
	                      |	ВалютыИзменения.Узел = &Узел
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПРЕДСТАВЛЕНИЕ(ГруппыОС.Порядок) КАК OS_id,
	                      |	ПРЕДСТАВЛЕНИЕ(ГруппыОС.Порядок) КАК OS_сode,
	                      |	ГруппыОС.Ссылка КАК name,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	ПРЕДСТАВЛЕНИЕ(ГруппыОС.Порядок) КАК Code_asb
	                      |ИЗ
	                      |	Перечисление.ГруппыОС КАК ГруппыОС
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	абс_ТипыСетей.Ссылка КАК TipS_id,
	                      |	абс_ТипыСетей.Код КАК TipS_сode,
	                      |	абс_ТипыСетей.Наименование КАК name,
	                      |	абс_ТипыСетей.Код КАК Code_asb
	                      |ИЗ
	                      |	Справочник.абс_ТипыСетей.Изменения КАК абс_ТипыСетейИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.абс_ТипыСетей КАК абс_ТипыСетей
	                      |		ПО абс_ТипыСетейИзменения.Ссылка = абс_ТипыСетей.Ссылка
	                      |ГДЕ
	                      |	абс_ТипыСетейИзменения.Узел = &Узел
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	абс_ТипыКонтрагентов.Ссылка КАК contr_id,
	                      |	абс_ТипыКонтрагентов.Код КАК contr_сode,
	                      |	абс_ТипыКонтрагентов.Наименование КАК name,
	                      |	ЕСТЬNULL(абс_ТипыКонтрагентов.Родитель.Код, "" "") КАК parent_code,
	                      |	абс_ТипыКонтрагентов.Код КАК Code_asb,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	ЛОЖЬ КАК LdFlg,
	                      |	абс_ТипыКонтрагентов.Ссылка КАК Level
	                      |ИЗ
	                      |	Справочник.абс_ТипыКонтрагентов.Изменения КАК абс_ТипыКонтрагентовИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.абс_ТипыКонтрагентов КАК абс_ТипыКонтрагентов
	                      |		ПО абс_ТипыКонтрагентовИзменения.Ссылка = абс_ТипыКонтрагентов.Ссылка
	                      |ГДЕ
	                      |	абс_ТипыКонтрагентовИзменения.Узел = &Узел
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Проекты.Ссылка КАК project_id,
	                      |	Проекты.Код КАК project_code,
	                      |	ПОДСТРОКА(Проекты.Наименование, 0, 79) КАК name,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(Проекты.абс_Статус, ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПроектов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыПроектов.ПустаяСсылка)
	                      |			ТОГДА "" ""
	                      |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Проекты.абс_Статус)
	                      |	КОНЕЦ КАК status,
	                      |	Проекты.Родитель.Код КАК parent_code,
	                      |	Проекты.Ссылка КАК Level,
	                      |	ЛОЖЬ КАК LdFlg,
	                      |	Проекты.Код КАК Code_asb,
	                      |	&ТекущаяДата КАК TransDate
	                      |ИЗ
	                      |	Справочник.Проекты.Изменения КАК ПроектыИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	                      |		ПО ПроектыИзменения.Ссылка = Проекты.Ссылка
	                      |ГДЕ
	                      |	ПроектыИзменения.Узел = &Узел
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Организации.Ссылка КАК org_id,
	                      |	Организации.Ссылка КАК Level,
	                      |	Организации.Код КАК org_сode,
	                      |	ЛОЖЬ КАК LdFlg,
	                      |	ПОДСТРОКА(Организации.Наименование, 0, 80) КАК name,
	                      |	ЕСТЬNULL(Организации.Родитель.Код, "" "") КАК parent_id,
	                      |	Организации.КПП КАК kpp,
	                      |	ПРЕДСТАВЛЕНИЕ(Организации.абс_СтатусОрганизации) КАК status,
	                      |	ПОДСТРОКА(Организации.НаименованиеПолное, 0, 255) КАК fullname,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	Организации.ИНН КАК inn
	                      |ИЗ
	                      |	Справочник.Организации.Изменения КАК ОрганизацииИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	                      |		ПО ОрганизацииИзменения.Ссылка = Организации.Ссылка
	                      |ГДЕ
	                      |	ОрганизацииИзменения.Узел = &Узел
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СтатьиОборотовПоБюджетам.Ссылка КАК bud_id,
	                      |	СтатьиОборотовПоБюджетам.Код КАК bud_code,
	                      |	СтатьиОборотовПоБюджетам.Наименование КАК name,
	                      |	СтатьиОборотовПоБюджетам.Родитель.Код КАК parent_code,
	                      |	СтатьиОборотовПоБюджетам.Ссылка КАК Level,
	                      |	ЛОЖЬ КАК LdFlg,
	                      |	СтатьиОборотовПоБюджетам.Код КАК Code_asb,
	                      |	МАКСИМУМ(СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Справочник.СтатьиОборотовПоБюджетам.Изменения КАК СтатьиОборотовПоБюджетамИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиОборотовПоБюджетам КАК СтатьиОборотовПоБюджетам
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиОборотовПоБюджетам.абс_ПериодыИспользования КАК СтатьиОборотовПоБюджетамабс_ПериодыИспользования
	                      |			ПО (СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Ссылка = СтатьиОборотовПоБюджетам.Ссылка)
	                      |		ПО СтатьиОборотовПоБюджетамИзменения.Ссылка = СтатьиОборотовПоБюджетам.Ссылка
	                      |ГДЕ
	                      |	СтатьиОборотовПоБюджетамИзменения.Узел = &Узел
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СтатьиОборотовПоБюджетам.Ссылка,
	                      |	СтатьиОборотовПоБюджетам.Код,
	                      |	СтатьиОборотовПоБюджетам.Наименование,
	                      |	СтатьиОборотовПоБюджетам.Родитель.Код,
	                      |	СтатьиОборотовПоБюджетам.Ссылка,
	                      |	СтатьиОборотовПоБюджетам.Код
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.bud_id,
	                      |	ВТ.bud_code,
	                      |	ВТ.bud_code КАК code,
	                      |	ПОДСТРОКА(ВТ.name, 0, 80) КАК name,
	                      |	ЕСТЬNULL(ВТ.parent_code, "" "") КАК parent_code,
	                      |	ВТ.Level,
	                      |	ВТ.Code_asb,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	МАКСИМУМ(ВТ.Период) КАК date_use,
	                      |	МАКСИМУМ(СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Использование) КАК use_flg
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиОборотовПоБюджетам.абс_ПериодыИспользования КАК СтатьиОборотовПоБюджетамабс_ПериодыИспользования
	                      |		ПО ВТ.Период = СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Период
	                      |			И ВТ.bud_id = СтатьиОборотовПоБюджетамабс_ПериодыИспользования.Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.bud_id,
	                      |	ВТ.bud_code,
	                      |	ВТ.Code_asb,
	                      |	ВТ.name,
	                      |	ВТ.parent_code,
	                      |	ВТ.Level,
	                      |	ПОДСТРОКА(ВТ.name, 0, 80),
	                      |	ЕСТЬNULL(ВТ.parent_code, "" ""),
	                      |	ВТ.bud_code
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПодразделенияОрганизаций.Ссылка КАК struc_id,
	                      |	ПодразделенияОрганизаций.абс_КодИСУЗК КАК struc_code,
	                      |	ПодразделенияОрганизаций.Владелец.Код КАК org_code,
	                      |	ПодразделенияОрганизаций.Ссылка КАК Level,
	                      |	ЛОЖЬ КАК LdFlg,
	                      |	ПОДСТРОКА(ПодразделенияОрганизаций.Наименование, 0, 79) КАК name,
	                      |	ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.абс_КодИСУЗК, """") КАК parent_code,
	                      |	ПодразделенияОрганизаций.абс_КодИСУЗК КАК Code_asb,
	                      |	&ТекущаяДата КАК TransDate
	                      |ИЗ
	                      |	Справочник.ПодразделенияОрганизаций.Изменения КАК ПодразделенияОрганизацийИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	                      |		ПО ПодразделенияОрганизацийИзменения.Ссылка = ПодразделенияОрганизаций.Ссылка
	                      |ГДЕ
	                      |	ПодразделенияОрганизаций.абс_Используется
	                      |	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
	                      |	И ПодразделенияОрганизаций.абс_ДатаС <= &ТекущаяДата
	                      |	И ПодразделенияОрганизаций.абс_ДатаПо >= &ТекущаяДата
	                      |	И ПодразделенияОрганизаций.абс_КодИСУЗК <> """"
	                      |	И ПодразделенияОрганизаций.абс_Статус = ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНСИ.Согласовано)
	                      |	И ПодразделенияОрганизаций.абс_ТипПодразделенияОрганизации = ЗНАЧЕНИЕ(Перечисление.абс_ТипыПодразделенийОрганизации.ПодразделениеОрганизации)
	                      |	И ПодразделенияОрганизацийИзменения.Узел = &Узел
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПодразделенияОрганизаций.Ссылка,
	                      |	ПодразделенияОрганизаций.абс_КодИСУЗК,
	                      |	ПодразделенияОрганизаций.Владелец.Код,
	                      |	ПОДСТРОКА(ПодразделенияОрганизаций.Наименование, 0, 79),
	                      |	ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.абс_КодИСУЗК, """"),
	                      |	ПодразделенияОрганизаций.Ссылка,
	                      |	ПодразделенияОрганизаций.абс_КодИСУЗК
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	parent_code,
	                      |	struc_code
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	абс_ГруппыАБФ.Ссылка КАК ABF_id,
	                      |	абс_ГруппыАБФ.Код КАК ABF_сode,
	                      |	абс_ГруппыАБФ.Наименование КАК name,
	                      |	абс_ГруппыАБФ.Код КАК Code_asb,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	абс_ГруппыАБФ.Ссылка КАК Level,
	                      |	ЕСТЬNULL(абс_ГруппыАБФ.Родитель.Код, "" "") КАК parent_code
	                      |ИЗ
	                      |	Справочник.абс_ГруппыАБФ.Изменения КАК абс_ГруппыАБФИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.абс_ГруппыАБФ КАК абс_ГруппыАБФ
	                      |		ПО абс_ГруппыАБФИзменения.Ссылка = абс_ГруппыАБФ.Ссылка
	                      |ГДЕ
	                      |	абс_ГруппыАБФИзменения.Узел = &Узел
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Подразделения.Ссылка КАК fin_id,
	                      |	Подразделения.Ссылка КАК Level,
	                      |	Подразделения.Код КАК fin_code,
	                      |	Подразделения.Код КАК Code_asb,
	                      |	ЕСТЬNULL(Подразделения.Родитель.Код, """") КАК parent_code,
	                      |	Подразделения.абс_ЦФОИспользуется КАК use_flg,
	                      |	Подразделения.абс_ГодИспользования КАК date_use,
	                      |	Подразделения.Наименование КАК name,
	                      |	ЛОЖЬ КАК LdFlg,
	                      |	"""" КАК Log,
	                      |	&ТекущаяДата КАК TransDate
	                      |ИЗ
	                      |	Справочник.Подразделения.Изменения КАК ПодразделенияИзменения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Подразделения КАК Подразделения
	                      |		ПО ПодразделенияИзменения.Ссылка = Подразделения.Ссылка
	                      |ГДЕ
	                      |	Подразделения.абс_ТипПодразделенияОрганизации = ЗНАЧЕНИЕ(Перечисление.абс_ТипыПодразделенийОрганизации.ЦФО)
	                      |	И ПодразделенияИзменения.Узел = &Узел");
						  
	Запрос.УстановитьПараметр("ТекущаяДата", 	абс_СерверныеФункции.ПолучитьДатуСервера());
	Запрос.УстановитьПараметр("Узел", 			Узел);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция ИнтеграцияCognos_ПолучитьРезультатЗапроса_Операции(ПериодВыгрузки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	&УИД КАК session_id,
	                      |	&НачалоПериода КАК report_date,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	0 КАК LdFlg
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОборотыБюджетовОбороты.Регистратор КАК ID,
	                      |	ОборотыБюджетовОбороты.Регистратор.Номер КАК doc_num,
	                      |	ОборотыБюджетовОбороты.Период КАК Date,
	                      |	ЕСТЬNULL(ОборотыБюджетовОбороты.СтатьяОборотов.Код, "" "") КАК Budget_code,
	                      |	ЕСТЬNULL(ОборотыБюджетовОбороты.Организация.Код, "" "") КАК org_code,
	                      |	ЕСТЬNULL(ОборотыБюджетовОбороты.абс_ТипКонтрагента.Код, "" "") КАК TypeContr,
	                      |	ЕСТЬNULL(ОборотыБюджетовОбороты.Валюта.Код, "" "") КАК Curr_сode,
	                      |	ЕСТЬNULL(ОборотыБюджетовОбороты.Проект.Код, """") КАК project_code,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(ОборотыБюджетовОбороты.Сценарий.Код, """") = ""000000057""
	                      |			ТОГДА ""ТО_ОПЛ""
	                      |		КОГДА ЕСТЬNULL(ОборотыБюджетовОбороты.Сценарий.Код, """") = ""000000055""
	                      |			ТОГДА ""ТО_НАЧ""
	                      |	КОНЕЦ КАК Asb_metod,
	                      |	ОборотыБюджетовОбороты.ВалютнаяСуммаОборот КАК SummVal,
	                      |	ОборотыБюджетовОбороты.СуммаСценарияОборот КАК Summ,
	                      |	ЕСТЬNULL(ОборотыБюджетовОбороты.абс_ТипСети.Код, "" "") КАК TipS_code,
	                      |	ГОД(ОборотыБюджетовОбороты.Период) КАК Asb_year,
	                      |	МЕСЯЦ(ОборотыБюджетовОбороты.Период) КАК Asb_per,
	                      |	&ТекущаяДата КАК TransDate,
	                      |	ЕСТЬNULL(ОборотыБюджетовОбороты.ЦФО.Код, """") КАК fin_code,
	                      |	"""" КАК struc_code,
	                      |	"""" КАК Tax_сode,
	                      |	0 КАК NDS,
	                      |	ТИПЗНАЧЕНИЯ(ОборотыБюджетовОбороты.Регистратор) КАК Type,
	                      |	&УИД КАК session_id
	                      |ИЗ
	                      |	РегистрНакопления.ОборотыБюджетов.Обороты(&НачалоПериода, &КонецПериода, Запись, Сценарий.Код В (""000000057"", ""000000055"")) КАК ОборотыБюджетовОбороты");
						  
	Запрос.УстановитьПараметр("ТекущаяДата", 	абс_СерверныеФункции.ПолучитьДатуСервера());
	Запрос.УстановитьПараметр("УИД", 			Строка(Новый УникальныйИдентификатор()));
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(ПериодВыгрузки));
	Запрос.УстановитьПараметр("КонецПериода", 	Новый Граница(КонецМесяца(ПериодВыгрузки)));
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ЗаполнитьТаблицуСПроверкой(Результат, Таблица, МассивПолейУсловия, АДОДБКоманда, Узел = Неопределено)
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	
	Колонки = Результат.Колонки;
	ПоляИдентификаторы = "";
	Для каждого Колонка Из Колонки Цикл
		ПоляИдентификаторы = ПоляИдентификаторы + Колонка.Имя + ",";
	КонецЦикла;
	ПоляИдентификаторы = Лев(ПоляИдентификаторы, СтрДлина(ПоляИдентификаторы)-1);	
		
	ШаблонЗапроса = "%6 UPDATE %1 SET %2 WHERE %3 IF (@@ROWCOUNT = 0) BEGIN INSERT INTO %1 (%4) VALUES (%5) END";
	й = 0;
	
	Пока Выборка.Следующий() Цикл
		
		й = й + 1;
		ТекстОбновление = "";
		ТекстВставка = "";
		ТекстПоляУсловия = "";
		
		Для каждого Колонка Из Колонки Цикл
			Поле = ИнтеграцияCognos_ПолучитьПредставлениеПоля(Выборка[Колонка.Имя], Колонка.Имя);
			ТекстОбновление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 = %3,", ТекстОбновление, Колонка.Имя, Поле);
			ТекстВставка = ТекстВставка + Поле + ",";
			Если МассивПолейУсловия.Найти(Колонка.Имя) <> Неопределено Тогда
				Если Поле = "NULL" тогда
					ТекстПоляУсловия = ТекстПоляУсловия + " " + Колонка.Имя + " IS NULL AND";					
				Иначе
					ТекстПоляУсловия = ТекстПоляУсловия + " " + Колонка.Имя + " = "  + Поле + " AND";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		ТекстОбновление = Лев(ТекстОбновление, СтрДлина(ТекстОбновление)-1);
		ТекстВставка = Лев(ТекстВставка, СтрДлина(ТекстВставка)-1);
		ТекстПоляУсловия = Лев(ТекстПоляУсловия, СтрДлина(ТекстПоляУсловия)-3);
 		
		АДОДБКоманда.CommandText = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса,
												Таблица, ТекстОбновление, ТекстПоляУсловия, 
												ПоляИдентификаторы, ТекстВставка, АДОДБКоманда.CommandText);	
												
		Если й >= 900 Тогда 
			Попытка
				АДОДБКоманда.Execute();
			Исключение
				Сообщить(ОписаниеОшибки());
				Сообщить(АДОДБКоманда.CommandText);
			КонецПопытки;
			АДОДБКоманда.CommandText = "";
			й = 0;
		КонецЕсли;
				
	КонецЦикла;
		
	Если й > 0 Тогда 
		Попытка
			АДОДБКоманда.Execute();
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(АДОДБКоманда.CommandText);
		КонецПопытки;
		АДОДБКоманда.CommandText = "";
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьТаблицу(Результат, Таблица, МассивПолейУсловия, АДОДБКоманда, Узел = Неопределено)
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Колонки = Результат.Колонки;
	ПоляИдентификаторы = "";
	Для каждого Колонка Из Колонки Цикл
		ПоляИдентификаторы = ПоляИдентификаторы + Колонка.Имя + ",";
	КонецЦикла;
	ПоляИдентификаторы = Лев(ПоляИдентификаторы, СтрДлина(ПоляИдентификаторы)-1);	
		
	ШаблонЗапроса = "INSERT INTO %1 (%2) VALUES %3";
	ТекстЗначений = "";
	й = 0;
	
	Пока Выборка.Следующий() Цикл
		
		й = й + 1;
		ТекстВставка = "";	
		Для каждого Колонка Из Колонки Цикл
			Поле = ИнтеграцияCognos_ПолучитьПредставлениеПоля(Выборка[Колонка.Имя], Колонка.Имя);
			ТекстВставка = ТекстВставка + Поле + ",";
		КонецЦикла;
		
		ТекстЗначений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2),", ТекстЗначений, Лев(ТекстВставка, СтрДлина(ТекстВставка)-1));
		
		Если й >= 400 Тогда
			ТекстВставка = Лев(ТекстВставка, СтрДлина(ТекстВставка)-1);
			АДОДБКоманда.CommandText = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса,
									Таблица, ПоляИдентификаторы, Лев(ТекстЗначений, СтрДлина(ТекстЗначений)-1));
			Попытка
				АДОДБКоманда.Execute();
			Исключение
				//ЗаписьЖурналаРегистрации("Cognos", УровеньЖурналаРегистрации.Ошибка,,"Cognos", АДОДБКоманда.CommandText); 
				Сообщить(ОписаниеОшибки());
				Сообщить(АДОДБКоманда.CommandText);
				Прервать;
			КонецПопытки;
			АДОДБКоманда.CommandText = "";
			ТекстЗначений = "";
			й = 0;
		КонецЕсли;
				
	КонецЦикла;
		
	Если й > 0 Тогда
		АДОДБКоманда.CommandText = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса,
						Таблица, ПоляИдентификаторы, Лев(ТекстЗначений, СтрДлина(ТекстЗначений)-1));
		Попытка
			АДОДБКоманда.Execute();
		Исключение
			ЗаписьЖурналаРегистрации("Cognos", УровеньЖурналаРегистрации.Ошибка,,"Cognos", АДОДБКоманда.CommandText); 
			Сообщить(ОписаниеОшибки());
			Сообщить(АДОДБКоманда.CommandText);
		КонецПопытки;
		АДОДБКоманда.CommandText = "";
	КонецЕсли;
		
КонецПроцедуры

Процедура УдалитьЗаписиСПроверкой(Результат, Таблица, ПолеУсловие, АДОДБКоманда) Экспорт
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ЗначенияУсловия = "";	
	ШаблонЗапроса = "DELETE FROM %1 WHERE %2 IN (%3)";
	й = 0;
	
	Пока Выборка.Следующий() Цикл
		
		й = й + 1;
		ЗначенияУсловия = ЗначенияУсловия + ИнтеграцияCognos_ПолучитьПредставлениеПоля(Выборка.ID) + ",";
		 		
		Если й >= 900 Тогда
			ЗначенияУсловия = Лев(ЗначенияУсловия, СтрДлина(ЗначенияУсловия)-1);
			АДОДБКоманда.CommandText = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, 
																		Таблица, ПолеУсловие, ЗначенияУсловия);
			Попытка
				АДОДБКоманда.Execute();
			Исключение
				Сообщить(ОписаниеОшибки());
				Сообщить(АДОДБКоманда.CommandText);
			КонецПопытки;
			АДОДБКоманда.CommandText = "";
			й = 0;
		КонецЕсли;
				
	КонецЦикла;
	
	Если й > 0 Тогда
		ЗначенияУсловия = Лев(ЗначенияУсловия, СтрДлина(ЗначенияУсловия)-1);
		АДОДБКоманда.CommandText = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, 
																		Таблица, ПолеУсловие, ЗначенияУсловия);
		Попытка
			АДОДБКоманда.Execute();
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить(АДОДБКоманда.CommandText);
		КонецПопытки;
		АДОДБКоманда.CommandText = "";
	КонецЕсли;
			
КонецПроцедуры

Функция ИнтеграцияCognos_ПолучитьПредставлениеПоля(Поле, ИмяПоля = Неопределено)
	
	Если ИмяПоля = "Level" Тогда 
		Возврат Поле.Уровень();	
	КонецЕсли;
		
	Если ИмяПоля = "Asb_year" ИЛИ ИмяПоля = "Asb_per" Тогда 
		Возврат "'" + СтрЗаменить(Строка(Поле), Символы.НПП, "") + "'";	
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли (Поле = NULL ИЛИ НЕ ЗначениеЗаполнено(Поле)) И ТипЗнч(Поле) <> Тип("Строка") Тогда
		Возврат "NULL";
	ИначеЕсли ТипЗнч(Поле) = Тип("ПеречислениеСсылка.ГруппыОС") Тогда
		Возврат "'" + Лев(Строка(Поле), 79) + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		Если Поле = Перечисления.СтавкиНДС.БезНДС Тогда 
			СтавкаНДС =  "НДС_НЕТ";
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС0 Тогда 
			СтавкаНДС =  "НДС_0"; 
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС10 Тогда 
			СтавкаНДС =  "НДС_10";
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС18 Тогда 
			СтавкаНДС =  "НДС_18";
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС20 Тогда 
			СтавкаНДС =  "НДС_20";
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС10_110 Тогда 
			СтавкаНДС =  "НДС_10_100";
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС18_118 Тогда 
			СтавкаНДС =  "НДС_18_118";
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС20_120 Тогда 
			СтавкаНДС =  "НДС_20_120";
		ИначеЕсли Поле = Перечисления.СтавкиНДС.НДС4 Тогда 
			СтавкаНДС =  "НДС_4";
		КонецЕсли;
		Возврат "'" + СтавкаНДС + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + СокрЛП(ОбработатьСтроку(Поле)) + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле, 1, 0);
	ИначеЕсли ТипЗнч(Поле) = Тип("Дата") Тогда
		Возврат "'" + Формат(Поле, "ДФ='yyyyMMdd HH:mm:ss'") + "'";
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Поле)) Тогда 
		Возврат "'" + СокрЛП(Строка(Поле)) + "'";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Поле)) Тогда 
		Возврат "'" + Строка(Поле.УникальныйИдентификатор()) + "'";
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Поле)) Тогда 
		Возврат "'" + Строка(Новый УникальныйИдентификатор()) + "'";
 	ИначеЕсли ТипЗнч(Поле) = Тип("Тип") Тогда 
		Возврат "'" + Строка(Поле) + "'";
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСтроку(Знач Значение)
	
	Значение = СтрЗаменить(Значение, """", "");
	Значение = СтрЗаменить(Значение, "'", "");
	
	Возврат Значение;
	
КонецФункции

//АБС ВСТАВКА  17.02.2015  Навценя

Функция ИнтеграцияCognos_ПолучитьНастройу_ВводБюджета() Экспорт
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Справочник.абс_НастройкиОбменаСSQL ГДЕ ТипОбъекта = ""Интеграция_Cognos_ВводБюджета""");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда  
		Возврат Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИнтеграцияCognos_ПолучитьСтатусВводаБюджета(ПодключениеУстановлено = Истина) Экспорт
	
	МассивВозврата = Новый Массив;
	
	НастройкиОбмена = ИнтеграцияCognos_ПолучитьНастройу_ВводБюджета();
	Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда 
		Возврат МассивВозврата;
	КонецЕсли;
	
	Соединение = ВыполнитьПодключениеКSQL(Новый Структура("Provider,DataSource,UserID,Password",  
											НастройкиОбмена.ИмяСервераSQL, 
											НастройкиОбмена.ИмяБазыДанныхSQL,
											НастройкиОбмена.ИмяПользователя,
											НастройкиОбмена.Пароль, 
											НастройкиОбмена.ИмяТаблицыSQL));
											
	Если ТипЗнч(Соединение) <> Тип("COMОбъект") Тогда
		ПодключениеУстановлено = Ложь;										
		Возврат МассивВозврата;
	КонецЕсли;
		
	АДОДБКоманда = Новый COMОбъект("ADODB.Command");
	АДОДБКоманда.ActiveConnection = Соединение;	
	
		
	АДОДБКоманда.CommandText = "select max(NUM_LOAD) NUM_LOAD, ORGANIZATION, YEAR from dbo.BUDGET_LIMIT  
								| group by ORGANIZATION, YEAR";	
	
	Попытка
		Result = АДОДБКоманда.Execute();
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить(АДОДБКоманда.CommandText);
		ПодключениеУстановлено = Ложь;
		Возврат МассивВозврата;
	КонецПопытки;
	
	ПодключениеУстановлено = Истина;
	
	Пока НЕ Result.eof() Цикл

		СтруктураРеквизитов = Новый Структура("NUM_LOAD, ORGANIZATION, YEAR, ПериодГод, Организация",
					Result.fields.item("NUM_LOAD").value, Result.fields.item("ORGANIZATION").value, Result.fields.item("YEAR").value);
					
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ORGANIZATION) Тогда 
			СтруктураРеквизитов.Организация = Справочники.Организации.НайтиПоКоду(СтруктураРеквизитов.ORGANIZATION);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.YEAR) Тогда 
			СтруктураРеквизитов.ПериодГод = ИнтеграцияCognos_ПолучитьГод(СтруктураРеквизитов.YEAR);
		КонецЕсли;

		
		МассивВозврата.Добавить(СтруктураРеквизитов);			
		Result.MoveNext();			
						
	КонецЦикла; 
	
	Возврат МассивВозврата;
			
КонецФункции

Функция ИнтеграцияCognos_ПолучитьГод(знач YEAR)
	
	YEAR = СтрЗаменить(YEAR, "FY", "");
	
	Попытка
		//ПериодГод = Дата(2000 + Число(YEAR), 1, 1);
		ПериодГод = 2000 + Число(YEAR);
	Исключение
		//ПериодГод = Дата(1,1,1);
		ПериодГод = 0;
	КонецПопытки;
	
	Возврат ПериодГод; 
	
КонецФункции

Функция ИнтеграцияCognos_ПолучитьМесяц(знач YEAR, знач PERIOD, МассивОшибок)
	
	YEAR = СтрЗаменить(YEAR, "FY", "");
	
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить("Jan");
	МассивМесяцев.Добавить("Feb");
	МассивМесяцев.Добавить("Mar");
	МассивМесяцев.Добавить("Apr");
	МассивМесяцев.Добавить("May");
	МассивМесяцев.Добавить("Jun");
	МассивМесяцев.Добавить("Jul");
	МассивМесяцев.Добавить("Aug");
	МассивМесяцев.Добавить("Sep");
	МассивМесяцев.Добавить("Oct");
	МассивМесяцев.Добавить("Nov");
	МассивМесяцев.Добавить("Dec");
	
	Если МассивМесяцев.Найти(PERIOD) = Неопределено Тогда 
		МассивОшибок.Добавить("Не определен месяц: " + PERIOD);		
	КонецЕсли;
	
	Попытка
		ПериодГод = Дата(2000 + Число(YEAR), МассивМесяцев.Найти(PERIOD) + 1, 1);
	Исключение
		ПериодГод = Дата(1,1,1);	
	КонецПопытки;
	
	Возврат ПериодГод; 
	
КонецФункции

Функция ИнтеграцияCognos_ПолучитьСтавкуНДС(VAT, МассивОшибок)
	
	Если VAT = "НДС_НЕТ" Тогда 
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли VAT = "НДС_0" Тогда 
		Возврат  Перечисления.СтавкиНДС.НДС0; 
	ИначеЕсли VAT = "НДС_10" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли VAT = "НДС_18" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли VAT = "НДС_20" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли VAT = "НДС_10_100" Тогда 
		Возврат  Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли VAT = "НДС_18_118" Тогда 
		Возврат  Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли VAT = "НДС_20_120" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	ИначеЕсли VAT = "НДС_4" Тогда 
		Возврат Перечисления.СтавкиНДС.НДС4;
	Иначе
		МассивОшибок.Добавить("Не определена ставка НДС: " + VAT);		
	КонецЕсли;
	
	Возврат Перечисления.СтавкиНДС.ПустаяСсылка(); 
	
КонецФункции

Функция ИнтеграцияCognos_ПолучитьСценарий(METHOD, МассивОшибок = Неопределено) Экспорт
	
	Если METHOD = "ТО_НАЧ" Тогда 
		Возврат Справочники.СценарииПланирования.НайтиПоНаименованию("Начисление ПЛАН"); //000000040
	ИначеЕсли METHOD = "ТО_ЗАК" Тогда 
		Возврат Справочники.СценарииПланирования.НайтиПоНаименованию("Закупка ПЛАН"); //000000041 
	Иначе
		Если МассивОшибок <> Неопределено Тогда 
			МассивОшибок.Добавить("Не определена сценарий планирования: " + METHOD);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.СценарииПланирования.ПустаяСсылка(); 
	
КонецФункции

Процедура ИнтеграцияCognos_ЗагрузитьВводаБюджета(Организация, ПериодГод) Экспорт
		
	НастройкиОбмена = ИнтеграцияCognos_ПолучитьНастройу_ВводБюджета();
	Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
	Соединение = ВыполнитьПодключениеКSQL(Новый Структура("Provider,DataSource,UserID,Password",  
											НастройкиОбмена.ИмяСервераSQL, 
											НастройкиОбмена.ИмяБазыДанныхSQL,
											НастройкиОбмена.ИмяПользователя,
											НастройкиОбмена.Пароль, 
											НастройкиОбмена.ИмяТаблицыSQL));
											
	Если ТипЗнч(Соединение) <> Тип("COMОбъект") Тогда	
		Возврат;
	КонецЕсли;
		
	АДОДБКоманда = Новый COMОбъект("ADODB.Command");
	АДОДБКоманда.ActiveConnection = Соединение;	
	
	ПериодFY = "FY" + Формат(Дата(ПериодГод, 1,1), "ДФ=yy");
	
	ТекстЗапроса = "select * from dbo.BUDGET_LIMIT where 
					| NUM_LOAD in (select max(NUM_LOAD) from dbo.BUDGET_LIMIT where ORGANIZATION = '%1' and YEAR = '%2') 
					| and ORGANIZATION = '%1' and YEAR = '%2'";
												
	АДОДБКоманда.CommandText = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, Организация.Код, ПериодFY);	
	
	Попытка
		Result = АДОДБКоманда.Execute();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если Result.fields.count() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Для й = 0 По Result.fields.count() - 1 Цикл 
		СтруктураРеквизитов.Вставить(Result.fields(й).name);	
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета.СоздатьНаборЗаписей();
	ДатаЗагрузки = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Кэш = Новый Соответствие;
	
	Пока НЕ Result.eof() Цикл

		МассивОшибок = Новый Массив;
		Для Каждого элемент из СтруктураРеквизитов Цикл 
			СтруктураРеквизитов[элемент.Ключ] = Result.fields(элемент.Ключ).value 	
		КонецЦикла;

		строкаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(строкаНабора, СтруктураРеквизитов);
		строкаНабора.PERIOD_ = СтруктураРеквизитов.PERIOD;
		строкаНабора.Период = ДатаЗагрузки;
		строкаНабора.Организация = Организация;
		строкаНабора.ПериодГод = ПериодГод;
		строкаНабора.КлючСтроки = Новый УникальныйИдентификатор();
		
		строкаНабора.ТипКонтрагента 	= ПолучитьСсылкуСправочника("абс_ТипыКонтрагентов", строкаНабора.TYPE_CONTR, Кэш, МассивОшибок); 
		строкаНабора.Проект			 	= ПолучитьСсылкуСправочника("Проекты", строкаНабора.PROJECT, Кэш, МассивОшибок); 
		строкаНабора.БюджетнаяСтатья 	= ПолучитьСсылкуСправочника("СтатьиОборотовПоБюджетам", строкаНабора.ACCOUNT, Кэш, МассивОшибок); 
		строкаНабора.Валюта 			= ПолучитьСсылкуСправочника("Валюты", строкаНабора.CURRENCY, Кэш, МассивОшибок); 
       	строкаНабора.ЦФУ 				= ПолучитьСсылкуСправочника("абс_ЦФУ", Лев(строкаНабора.FINSTRUCTION, Найти(строкаНабора.FINSTRUCTION, "_") - 1), Кэш, МассивОшибок); 
        строкаНабора.ЦФО 				= ПолучитьСсылкуСправочника("Подразделения", Прав(строкаНабора.FINSTRUCTION, СтрДлина(строкаНабора.FINSTRUCTION) - Найти(строкаНабора.FINSTRUCTION, "_")), Кэш, МассивОшибок); 

		строкаНабора.Сумма				= строкаНабора.VALUE;
		строкаНабора.ПериодБюджета		= ИнтеграцияCognos_ПолучитьМесяц(строкаНабора.YEAR, строкаНабора.PERIOD_, МассивОшибок);
		//строкаНабора.ПериодБюджета		= ИнтеграцияCognos_ПолучитьМесяц(строкаНабора.YEAR, строкаНабора.METHOD, МассивОшибок);
		строкаНабора.СтавкаНДС			= ИнтеграцияCognos_ПолучитьСтавкуНДС(строкаНабора.VAT, МассивОшибок);
		строкаНабора.Сценарий			= ИнтеграцияCognos_ПолучитьСценарий(строкаНабора.METHOD, МассивОшибок);
		
		Для Каждого строка из МассивОшибок Цикл 
			строкаНабора.СтрокаОшибки = строкаНабора.СтрокаОшибки + строка + Символы.ПС; 		
		КонецЦикла;
		
		Result.MoveNext();			
						
	КонецЦикла;          
		
	Если НаборЗаписей.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Отбор.NUM_LOAD.Установить(НаборЗаписей[0].NUM_LOAD);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Период.Установить(ДатаЗагрузки);
	Попытка
		НаборЗаписей.Записать();
	Исключение 
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
			
КонецПроцедуры

Функция ПолучитьСсылкуСправочника(Тип, Код, Кэш = Неопределено, МассивОшибок = Неопределено)
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Если Кэш[Тип] = Неопределено Тогда 
		Кэш.Вставить(Тип, Новый Соответствие());
	КонецЕсли;
	
	ЭлементКэша = Кэш[Тип][Код];
	Если ЭлементКэша = Справочники[Тип].ПустаяСсылка() Тогда 
		Если МассивОшибок <> Неопределено Тогда 
			МассивОшибок.Добавить("Не найден элемент справочника """ + Справочники[Тип].ПустаяСсылка().Метаданные().Синоним + """ по коду: " + Код);
		КонецЕсли;
		Возврат Справочники[Тип].ПустаяСсылка(); 
	ИначеЕсли  ЗначениеЗаполнено(ЭлементКэша) Тогда 
		Возврат ЭлементКэша;
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Объект.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.Код = &Код");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов", Тип);
	Запрос.УстановитьПараметр("Код", Код);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе
		Ссылка = Справочники[Тип].ПустаяСсылка();
		Если МассивОшибок <> Неопределено Тогда 
			МассивОшибок.Добавить("Не найден элемент справочника """ + Справочники[Тип].ПустаяСсылка().Метаданные().Синоним + """ по коду: " + Код);
		КонецЕсли;
	КонецЕсли;
	
	Кэш[Тип].Вставить(Код, Ссылка); 
	Возврат Ссылка;
	
КонецФункции

//АБС ВСТАВКА  КОНЕЦ

// АБС ВСТАВКА Фролов КПЭ2 20140916
Функция ВыполнитьКомандуSQlВозвратЗначения(ИмяХранимойПроцедуры,ТаблицаПараметров,Соединение,БылаОшибка)
	
	Cmd = Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Соединение;	
	Cmd.CommandText = ИмяХранимойПроцедуры;
	Cmd.CommandType = 4;
	
	Для каждого Стр Из ТаблицаПараметров Цикл
		par = Cmd.CreateParameter(Стр.ИмяПараметра,Стр.ТипЗначенияПараметра,Стр.Направление,Стр.РазмерПараметра,Стр.ЗначениеПараметра);
		Cmd.parameters.append(par);	
	КонецЦикла;
	
	Rs = Новый COMОбъект("ADODB.RecordSet"); 
	
	Попытка
		ЗаписьЖурналаРегистрации("Cmd.Execute()", УровеньЖурналаРегистрации.Информация, , , ИмяХранимойПроцедуры);
		Rs = Cmd.Execute(); 		
	Исключение
		абс_WebService.СообщитьОбОшибке("Запрос не выполнен: " + ОписаниеОшибки(), "Cmd.Execute()");
		БылаОшибка = Истина;
	КонецПопытки;
	
	Возврат Rs;
	
КонецФункции

Функция РезультатКомандыВТаблицуSQL(Rs) Экспорт
	Перем ТаблицаРезультат;
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	КолонкиРезультат = ТаблицаРезультат.Колонки;
	
	Для ИндексКолонки = 0 По Rs.Fields.Count - 1 Цикл
		Если КолонкиРезультат.Найти(Rs.Fields(ИндексКолонки).name) = Неопределено Тогда
			
			ТипЗначенияКолонки = Неопределено;
			КвалификаторКолонки = Неопределено;
			
			Если Rs.Fields(ИндексКолонки).name = "id_doc" Тогда
				//АБС ВСТАВКА   08.12.2014 15:15:35  Шамов
				//ТипЗначенияКолонки  = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9));	
				ТипЗначенияКолонки  = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(17));	
				//АБС ВСТАВКА  КОНЕЦ
			ИначеЕсли Rs.Fields(ИндексКолонки).name = "data_doc" Тогда
				ТипЗначенияКолонки = Новый ОписаниеТипов("Дата");	
			КонецЕсли;
			
			Если ТипЗначенияКолонки <> Неопределено Тогда
				КолонкиРезультат.Добавить(Rs.Fields(ИндексКолонки).name,ТипЗначенияКолонки,);
			Иначе	
				КолонкиРезультат.Добавить(Rs.Fields(ИндексКолонки).name);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Rs.BOF = 0 Тогда
		Rs.MoveFirst();                 
		Пока Rs.EOF() = 0 do  
			
			ТекСтрокаРезультат = ТаблицаРезультат.Добавить();
			
			Для Каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
				ТекСтрокаРезультат[ТекКолонка.Имя] = Rs.Fields(ТекКолонка.Имя).Value;
			КонецЦикла;
			
			Rs.MoveNext();  
		КонецЦикла;
	КонецЕсли;	  
	
	Rs.Close();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ЗагрузитьПоказатели(ТзВводЗначенийПоказателей,ТаблицаПараметров,Соединение)
	
	Для каждого Стр Из ТзВводЗначенийПоказателей Цикл
		
		БылаОшибка = Ложь;
		
		КодПоказателя 			= СокрЛП(Стр.Rate_id);
		НаименованиеПоказателя 	= СокрЛП(Стр.Rate_name);
		КодОрганизации			= СокрЛП(Стр.Org_id);
		
		ОрганизацияПоказателя 	= Справочники.Организации.НайтиПоКоду(КодОрганизации);
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияПоказателя) Тогда
			
			СообщитьОбОшибкеОбмена("КПЭ.ЗагрузкаПоказателей", "Ошибка при загрузке показателя: <" + НаименованиеПоказателя + "> (код: " + КодПоказателя + "): " + "Не найдена организация с кодом: " + КодОрганизации + "!", БылаОшибка);
			
			Продолжить;
		КонецЕсли;
			
		ПоказательПремии = Справочники.абс_ПоказателиДляПремий.НайтиПоКоду(КодПоказателя);
		
		Если ПоказательПремии = Неопределено ИЛИ ПоказательПремии = Справочники.абс_ПоказателиДляПремий.ПустаяСсылка() Тогда
			ПоказательПремииОб = Справочники.абс_ПоказателиДляПремий.СоздатьЭлемент();
		Иначе
			ПоказательПремииОб = ПоказательПремии.ПолучитьОбъект()
		КонецЕсли;
		
		ПоказательПремииОб.Код				= КодПоказателя;
		ПоказательПремииОб.Наименование 	= НаименованиеПоказателя;
		ПоказательПремииОб.Организация  	= ОрганизацияПоказателя;
		ПоказательПремииОб.ЯвляетсяКПЭ 		= Истина;		
		
		Попытка
			ПоказательПремииОб.Записать();
		Исключение
			СообщитьОбОшибкеОбмена("КПЭ.ЗагрузкаПоказателей", "Ошибка при загрузке показателя: <" + НаименованиеПоказателя + "> (код: " + КодПоказателя + "): " + ОписаниеОшибки(), БылаОшибка);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			
			ТаблицаПараметров.Очистить();
			
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.ИмяПараметра             = "@Rate_id";
			НоваяСтрока.ТипЗначенияПараметра     = 129;
			НоваяСтрока.Направление              = 1;
			НоваяСтрока.РазмерПараметра          = 9;
			НоваяСтрока.ЗначениеПараметра        = СокрЛП(Стр.Rate_id);
			
			ВыполнитьКомандуSQl("dbo.Remove_bonus_rate",ТаблицаПараметров, Соединение, БылаОшибка);
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьПраваПоказателей(ТзВводЗначенийПоказателей,ТаблицаПараметров,Соединение)
	
	Для каждого Стр Из ТзВводЗначенийПоказателей Цикл
		БылаОшибка = Ложь;
		
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",СокрЛП(Стр.User_Id));	
		Показатель   = Справочники.абс_ПоказателиДляПремий.НайтиПоКоду(СокрЛП(Стр.Rate_id));
		
		Если Пользователь <> Справочники.Пользователи.ПустаяСсылка() И Показатель <> Справочники.абс_ПоказателиДляПремий.ПустаяСсылка() Тогда
			
			НаборЗаписей = РегистрыСведений.абс_НастройкаДоступаКПоказателямКПЭ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Отбор.Показатель.Установить(Показатель);
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗапись =  НаборЗаписей.Добавить();
				НоваяЗапись.Пользователь  = Пользователь;
				НоваяЗапись.Показатель    = Показатель;
				
				Попытка
					НаборЗаписей.Записать();
				Исключение
					БылаОшибка = Истина;
				КонецПопытки;
				
				Если Не БылаОшибка Тогда
					ТаблицаПараметров.Очистить();
					
					НоваяСтрока = ТаблицаПараметров.Добавить();
					НоваяСтрока.ИмяПараметра             = "@Rate_id";
					НоваяСтрока.ТипЗначенияПараметра     = 129;
					НоваяСтрока.Направление              = 1;
					НоваяСтрока.РазмерПараметра          = 9;
					НоваяСтрока.ЗначениеПараметра        = СокрЛП(Стр.Rate_id);
					
					ВыполнитьКомандуSQl("dbo.Remove_bonus_rate_rights",ТаблицаПараметров,Соединение, БылаОшибка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьДокументВводЗначений(ТекущийОбмен,ТаблицаПараметров,Соединение)
	
	БылаОшибка = Ложь;

	ТекНомер = ТекущийОбмен.Узел.НомерОтправленного;
	Выборка = ПланыОбмена.ВыбратьИзменения(ТекущийОбмен.Узел,ТекНомер);
	Пока Выборка.Следующий() Цикл
		
		ТекДокумент = Выборка.Получить();
		
		Если ТипЗнч(ТекДокумент) = Тип("ДокументОбъект.абс_ВводЗначенийПоказателейДляРасчетаКПЭ") Тогда
			
			//АБС ВСТАВКА   11.12.2014 17:11:58  Хазеев
			Если ТекДокумент.Статус <> Перечисления.абс_СтатусыЗагрузкиКПЭ.Согласован Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел,ТекДокумент);
				Продолжить;
			КонецЕсли;
			//АБС ВСТАВКА  КОНЕЦ
			
			ТаблицаПараметров.Очистить();
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.ИмяПараметра             = "@id_doc";
			НоваяСтрока.ТипЗначенияПараметра     = 129;
			НоваяСтрока.Направление              = 1;
			//АБС ВСТАВКА   08.12.2014 15:15:35  Шамов
			//НоваяСтрока.РазмерПараметра          = 9;
			НоваяСтрока.РазмерПараметра          = 17;
			//АБС ВСТАВКА  КОНЕЦ
			НоваяСтрока.ЗначениеПараметра        = СокрЛП(ТекДокумент.Номер);
			
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.ИмяПараметра             = "@data_doc";
			НоваяСтрока.ТипЗначенияПараметра     = 135;
			НоваяСтрока.Направление              = 1;
			НоваяСтрока.РазмерПараметра          = 23;
			НоваяСтрока.ЗначениеПараметра        = ТекДокумент.Дата;
			
			ВыполнитьКомандуSQl("dbo.Remove_document_rate",ТаблицаПараметров,Соединение, БылаОшибка);

			Для каждого Стр  Из ТекДокумент.ЗначенияПоказателей Цикл
				
				//АБС ВСТАВКА   08.12.2014 15:15:35  Шамов
				ТаблицаПараметров.Очистить();
				//АБС ВСТАВКА  КОНЕЦ
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@id_doc";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				//АБС ВСТАВКА   08.12.2014 15:15:35  Шамов
				//НоваяСтрока.РазмерПараметра          = 9;
				НоваяСтрока.РазмерПараметра          = 17;
				//АБС ВСТАВКА  КОНЕЦ
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(ТекДокумент.Номер);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@data_doc";
				НоваяСтрока.ТипЗначенияПараметра     = 135;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 23;
				НоваяСтрока.ЗначениеПараметра        = ТекДокумент.Дата;
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@organization";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 9;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(ТекДокумент.Организация.Код);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@otvetstvennuj";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 36;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(ТекДокумент.Ответственный.ИдентификаторПользователяИБ);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@vid_operacii";
				НоваяСтрока.ТипЗначенияПараметра     = 3;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 2;
				НоваяСтрока.ЗначениеПараметра        = Перечисления.абс_ВидыОперацийВводаЗначенийПоказателейДляРасчетаКПЭ.Индекс(ТекДокумент.ВидОперации);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@comment";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 100;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(ТекДокумент.Комментарий);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@status";
				НоваяСтрока.ТипЗначенияПараметра     = 3;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 2;
				НоваяСтрока.ЗначениеПараметра        = Перечисления.абс_СтатусыЗагрузкиКПЭ.Индекс(ТекДокумент.Статус);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@podpis_plan";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 10;
				НоваяСтрока.ЗначениеПараметра        = "";
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@nomer_korr";
				НоваяСтрока.ТипЗначенияПараметра     = 131;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 8;
				НоваяСтрока.Точность                 = 0;
				НоваяСтрока.ЗначениеПараметра        = ТекДокумент.НомерКорректировки;
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@vid_premii";
				НоваяСтрока.ТипЗначенияПараметра     = 3;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 2;
				НоваяСтрока.ЗначениеПараметра        = Перечисления.абс_ВидыПремий.Индекс(ТекДокумент.ВидПремии);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@period";
				НоваяСтрока.ТипЗначенияПараметра     = 135;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 23;
				НоваяСтрока.ЗначениеПараметра        = Стр.Период;
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@pokazatel";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 9;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(ТекДокумент.Показатель.Код);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@pokazatel_zn";
				НоваяСтрока.ТипЗначенияПараметра     = 131;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 15;
				НоваяСтрока.Точность                 = 4;
				НоваяСтрока.ЗначениеПараметра        = Стр.ЗначениеПоказателя;
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@vid_analitiki";
				НоваяСтрока.ТипЗначенияПараметра     = 3;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 2;
				НоваяСтрока.ЗначениеПараметра        = Перечисления.абс_ВидыАналитикиЗначенийПоказателейКПЭ.Индекс(Стр.ВидАналитикиКПЭ);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@podrazdelenie";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 9;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(Стр.Подразделение.абс_КодИСУЗК);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@doljnost";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 10;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(Стр.Должность.абс_КодИСУЗК);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@id_sotrudnik";
				НоваяСтрока.ТипЗначенияПараметра     = 129;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 40;
				НоваяСтрока.ЗначениеПараметра        = СокрЛП(Стр.Сотрудник.абс_УникальныйИдентификаторСотрудника);
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра             = "@period_year";
				НоваяСтрока.ТипЗначенияПараметра     = 135;
				НоваяСтрока.Направление              = 1;
				НоваяСтрока.РазмерПараметра          = 23;
				НоваяСтрока.ЗначениеПараметра        = ТекДокумент.ПериодРегистрации;				
				
				ВыполнитьКомандуSQl("dbo.ins_document_rate",ТаблицаПараметров,Соединение, БылаОшибка);
				
			КонецЦикла;
		КонецЕсли;
		
		Если  Не БылаОшибка Тогда
			Попытка
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекущийОбмен.Узел,ТекДокумент);
			Исключение
				абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + Строка(ТекДокумент), "ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен)");
			КонецПопытки;
		Иначе
			абс_WebService.СообщитьОбОшибке("Не выгружен объект: " + Строка(ТекДокумент), "ВыполнитьОбменПоКонтрагентамЧерезПланОбмена(ТекущийОбмен)");
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура ВыполнитьОбменПоПоказателям(ТекущийОбмен)
	
	Если ТекущийОбмен.ВыполнятьОбмен = Ложь ТОгда
		Возврат;
	КонецЕсли;
	
	//Проверка соединения
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider",		СокрЛП(ТекущийОбмен.ИмяСервераSQL));	
	СтруктураПодключения.Вставить("DataSource",		СокрЛП(ТекущийОбмен.ИмяБазыДанныхSQL));	
	СтруктураПодключения.Вставить("UserID",			СокрЛП(ТекущийОбмен.ИмяПользователя));	
	СтруктураПодключения.Вставить("Password",		СокрЛП(ТекущийОбмен.Пароль));	
	СтруктураПодключения.Вставить("Table",			СокрЛП(ТекущийОбмен.ИмяТаблицыSQL));

	//Таблица параметров хранимых процедур
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
	ТаблицаПараметров.Колонки.Добавить("ТипЗначенияПараметра");
	ТаблицаПараметров.Колонки.Добавить("Направление");
	ТаблицаПараметров.Колонки.Добавить("РазмерПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	ТаблицаПараметров.Колонки.Добавить("Точность");

	
	//Проверка соединения
	Соединение = абс_ПроцедурыОбмена.ВыполнитьПодключениеКSQL(СтруктураПодключения);
	Если Соединение  = Ложь Тогда
		Возврат;	
	КонецЕсли;
	
	Соединение = ВыполнитьПодключениеКSQL(СтруктураПодключения);
	
	//Выгрузка
	ВыгрузитьДокументВводЗначений(ТекущийОбмен,ТаблицаПараметров,Соединение);
	
	//Загрузка
	БылаОшибка = Ложь;
	ТаблицаПараметров.Очистить();
	РезультатКомандыSQL       = ВыполнитьКомандуSQlВозвратЗначения("dbo.read_bonus_rate",ТаблицаПараметров,Соединение,БылаОшибка);
	ТзВводЗначенийПоказателей = РезультатКомандыВТаблицуSQL(РезультатКомандыSQL);
	
	Если ТзВводЗначенийПоказателей.Количество() > 0 Тогда 
		ЗагрузитьПоказатели(ТзВводЗначенийПоказателей,ТаблицаПараметров,Соединение);
	КонецЕсли;
	
	ТаблицаПараметров.Очистить();
	РезультатКомандыSQL       = ВыполнитьКомандуSQlВозвратЗначения("dbo.read_bonus_rate_rights",ТаблицаПараметров,Соединение,БылаОшибка);
	ТзВводЗначенийПоказателей = РезультатКомандыВТаблицуSQL(РезультатКомандыSQL);
	
	Если ТзВводЗначенийПоказателей.Количество() > 0 Тогда 
		ЗагрузитьПраваПоказателей(ТзВводЗначенийПоказателей,ТаблицаПараметров,Соединение);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СообщитьОбОшибкеОбмена(ИмяОбмена, ТекстСообщенияОбОшибке, Отказ = Ложь)
	
	НаименованиеСобытия = "ОбменSQL." + СокрЛП(ИмяОбмена);
	
	ttk_ОбщегоНазначения.СообщитьОбОшибке(НаименованиеСобытия + ТекстСообщенияОбОшибке, Отказ);
	
	ЗаписьЖурналаРегистрации(НаименованиеСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщенияОбОшибке);
	
КонецПроцедуры

// АБС ВСТАВКА КОНЕЦ




