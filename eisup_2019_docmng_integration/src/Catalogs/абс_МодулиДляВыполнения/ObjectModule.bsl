Процедура ВыполнитьМодуль(СтруктураПараметров = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = ПолучитьСтруктуруПараметров();
	КонецЕсли;
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Выполнение модулей", УровеньЖурналаРегистрации.Информация, , , "Запущен модуль " + СокрЛП(Код) + ".");
		
	ТекстыЗапросов = Неопределено;
	
	Попытка 
		ТекстыЗапросов = ПолучитьСтруктуруТекстовЗапросов();
	Исключение
		Сообщить("Ошибка при заполнении структуры запросов:" + Символы.ПС + ОписаниеОшибки());		
	КонецПопытки;
	
	Если ВидВыполнения = Перечисления.абс_ВидыВыполненияМодулей.НаСервере Тогда
		
		абс_СерверныеФункции.ВыполнитьКодНаСервере(ТекстМодуля, СтруктураПараметров, ТекстыЗапросов, ДопПараметры);
		
	Иначе
		
		ВыполнитьКодНаКлиенте(ТекстМодуля, СтруктураПараметров, ТекстыЗапросов, ДопПараметры);
		
	КонецЕсли;
	
	ЗаполнитьТаблицуПараметров(СтруктураПараметров);
	
	ЗаписьЖурналаРегистрации("Выполнение модулей", УровеньЖурналаРегистрации.Информация, , , "Выполнен модуль " + СокрЛП(Код) + ".");
	
КонецПроцедуры

Функция ЗаполнитьТаблицуПараметров(СтруктураПараметров)
	
	Если СтруктураПараметров.Количество() > 0 Тогда
		Параметры.Очистить();
		Для Каждого Элемент Из СтруктураПараметров Цикл
			НоваяСтрока = Параметры.Добавить();	
			НоваяСтрока.ИмяПараметра = Элемент.Ключ;
			НоваяСтрока.ЗначениеПараметра = Элемент.Значение;
		КонецЦикла;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруТекстовЗапросов(Отказ = Ложь) Экспорт
	
	СтруктураТекстовЗапросов = Новый Структура;
	
	Для Каждого СтрокаЗапрос Из Запросы Цикл
		
		СтруктураТекстовЗапросов.Вставить(СтрокаЗапрос.ИмяЗапроса, СтрокаЗапрос.ТекстЗапроса);
		
	КонецЦикла;
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ПолучитьСтруктуруПараметров(Отказ = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаПараметра Из Параметры Цикл
		
		Попытка 
			
			СтруктураПараметров.Вставить(СтрокаПараметра.ИмяПараметра, СтрокаПараметра.ЗначениеПараметра);
			
		Исключение
			
			Отказ = Истина;
			Сообщить("Ошибка при установке параметра № " + СтрокаПараметра.НомерСтроки + ": " + СтрокаПараметра.ИмяПараметра + "");
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьТаблицуПараметров(Отказ = Ложь) Экспорт
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЭтоВыражение");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	
	Для Каждого СтрокаПараметраМодуля Из Параметры Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПараметров.Добавить(), СтрокаПараметраМодуля);
		
	КонецЦикла;
	
	Возврат ТаблицаПараметров;
	
КонецФункции


Процедура ВыполнитьКодНаКлиенте(ТекстМодуля, СтруктураПараметров = Неопределено, СтруктураЗапросов = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Выполнить(ТекстМодуля);
	
КонецПроцедуры
   
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЭтоГруппа и Модифицированность() Тогда
		абс_ПоследнийИзменивший = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
КонецПроцедуры

