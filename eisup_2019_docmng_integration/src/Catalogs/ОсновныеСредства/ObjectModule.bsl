Перем мДатаСведений Экспорт;
Перем абс_ВедетсяРеестрОС Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой инвентарной карточки ОС (форма ОС-6)
// Утверждена постановлением Госкомстата России от 21.01.2003 № 7
// Возвращаемое значение:
// Табличный документ - печатная форма инвентарной карточки ОС

// АБС ИЗМЕНЕНИЕ
//Функция ПечатьОС6_2003(ДатаСведений,ПечатьПоДаннымУпрУчета = Истина) 

Функция ПечатьОС6_2003(ДатаСведений,ПечатьПоДаннымУпрУчета = Истина, абс_МакетССоставомОС = Ложь) 
	//\\ АБС ИЗМЕНЕНИЕ
	
	// АБС ИЗМЕНЕНИЕ
	//Макет = ПолучитьМакет("ОС6_2003");
	Если абс_МакетССоставомОС Тогда
		Макет = ПолучитьМакет("абс_ОС6_2003");
	Иначе
		Макет = ПолучитьМакет("ОС6_2003");
	КонецЕсли;
	//\\ АБС ИЗМЕНЕНИЕ
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2  = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3     = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3    = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4     = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4    = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1   = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6  = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1   = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	ШапкаРаздела7_2   = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2   = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	ТабДок = Новый ТабличныйДокумент();
	
	НазваниеРегистраСтоимость = "СтоимостьОС";
	НазваниеРегистраСобытия   = "СобытияОС";
	НазваниеСуммыЗатрат		  = "СуммаЗатрат";	
	Организация = Неопределено;

	Если ПечатьПоДаннымУпрУчета тогда
		кВидуУчета   = "управленческому";
		cВидаУчета   = "управленческого";
		ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
		ВидУчета 	 = "Упр" ;
	Иначе
		кВидуУчета   = "бухгалтерскому";
		cВидаУчета   = "бухгалтерского";
		ВалютаПечати = глЗначениеПеременной("ВалютаРегламентированногоУчета").Наименование;
		НазваниеРегистраСтоимость = НазваниеРегистраСтоимость + "БухгалтерскийУчет";
		НазваниеРегистраСобытия   = НазваниеРегистраСобытия   + "Организаций";
		НазваниеСуммыЗатрат		  = НазваниеСуммыЗатрат +"БУ";
		ВидУчета 	 = "Бух";
		ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
		Организация    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Организация,Справочники.Организации.ПустаяСсылка());
	КонецЕсли;	
	
	СведенияОбОС = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОбОС(Ссылка,ДатаСведений,Организация,ВидУчета); 
	Если СведенияОбОС <> Неопределено тогда
		 Если Не ПечатьПоДаннымУпрУчета и НЕ ЗначениеЗаполнено(СведенияОбОС.ОсновноеСредство) Тогда
			Сообщить("На момент печати основное средство не принималось к учету в указанной организации."+Символы.ПС+
			"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
			Возврат Неопределено;
		 КонецЕсли;
    	Шапка.Параметры.Заполнить(СведенияОбОС);
		Шапка.Параметры.ДатаДок        = Лев(Строка(ДатаСведений),10);
		Шапка.Параметры.НомерДок       = Шапка.Параметры.ИнвентарныйНомер;
		Шапка.Параметры.НаименованиеОС = ? (НЕ ЗначениеЗаполнено(СведенияОбОС.НаименованиеПолное),
										    СведенияОбОС.Наименование,СведенияОбОС.НаименованиеПолное);
	Иначе
		Сообщить("На момент печати основное средство не принималось к учету."+Символы.ПС+
		"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ (Организация = Неопределено) Тогда
		Шапка.Параметры.КодПоОКПО = Организация.КодПоОКПО;
	КонецЕсли;
	
	// получим даты  и документы изменения состояний ос
	СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,ПечатьПоДаннымУпрУчета,Организация);
	ДокументПринятия = СтруктПараметров["ИмяДок"];
	ДатаПринятия     = СтруктПараметров["Дата"];
	
	СтруктПараметров   = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,Организация);
	ДатаВвода          = СтруктПараметров["Дата"];
	ДокументВвода      = СтруктПараметров["ИмяДок"];
	ДокументВводаНомер = СтруктПараметров["НомерДок"];
	
	СтруктПараметров    = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,ПечатьПоДаннымУпрУчета,Организация);
	ДатаСписания        = СтруктПараметров["Дата"];
	ДокументСписания    = СтруктПараметров["ИмяДок"];
	РегистраторСписания = СтруктПараметров["Регистратор"];
	
	//	получим дату и документ последней модернизации
	Если ПечатьПоДаннымУпрУчета тогда
		ВыборкаЗаписей = РегистрыСведений.СобытияОС.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	Иначе
		ВыборкаЗаписей = РегистрыСведений.СобытияОСОрганизаций.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	КонецЕсли;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ВыборкаЗаписей.Событие.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация Тогда
			ДатаПоследнейМодернизации     = Лев(Строка(ВыборкаЗаписей.Период),10);
			ДокументПоследнейМодернизации = ВыборкаЗаписей.НазваниеДокумента;
		КонецЕсли;
	КонецЦикла;
	
	Шапка.Параметры.ДатаВвода    = ДатаПринятия;	
	Шапка.Параметры.ДатаСписания = ДатаСписания;
	Шапка.Параметры.кВидуУчета 	 = кВидуУчета;
	Шапка.Параметры.cВидаУчета 	 = cВидаУчета;
	
	ТабДок.Вывести(Шапка);
	
	ШапкаРазделов1и2.Параметры.кВидуУчета = кВидуУчета;
	
	// Балансовая стоимость ОС на момент поступления
	ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость    = СведенияОбОС.ПервоначальнаяСтоимость;
	ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = СведенияОбОС.СрокПолезногоИспользования;
	ШапкаРазделов1и2.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов1и2);
	
	ШапкаРаздела3.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела3);
	ТабДок.Вывести(СтрокиРаздела3);
	
	// Сведения о приемке, внутренних перемещениях и выбытии	
	ШапкаРаздела4.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела4);
	
	СписокСобытийОС = Новый Массив();
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ВнутреннееПеремещение);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Списание);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Передача);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСобытийОС",  СписокСобытийОС);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Период",           ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Событие) КАК СобытиеПредставление,
	|	ВложенныйЗапрос.Событие КАК Событие,
	|	ВложенныйЗапрос.ВидСобытияОС КАК ВидСобытияОС,
	|	ВложенныйЗапрос.СобытиеОСРегистратор КАК Регистратор,
	|	ВложенныйЗапрос.НазваниеДокумента КАК НазваниеДокумента,
	|	ВложенныйЗапрос.НомерДокумента КАК НомерДокумента,
	|	ВложенныйЗапрос.СобытиеОСПериод КАК Период,
	|	ПРЕДСТАВЛЕНИЕ(МестонахождениеОС.МОЛ) КАК МОЛПредставление,
	|	ПРЕДСТАВЛЕНИЕ(МестонахождениеОС.Местонахождение) КАК МестонахождениеПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		СобытияОС.ОсновноеСредство КАК ОсновноеСредство,
	|		СобытияОС.Период КАК СобытиеОСПериод,
	|		СобытияОС.Регистратор КАК СобытиеОСРегистратор,
	|		СобытияОС.Событие КАК Событие,
	|		СобытияОС.Событие.ВидСобытияОС КАК ВидСобытияОС, 
	|		СобытияОС.НазваниеДокумента КАК НазваниеДокумента,
	|		СобытияОС.НомерДокумента КАК НомерДокумента,
	|		МАКСИМУМ(МестонахождениеОС.Период) КАК МестонахождениеОСПериод
	|	ИЗ
	|		РегистрСведений.СобытияОС" + ?(ПечатьПоДаннымУпрУчета, "", "Организаций") + " КАК СобытияОС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС" + ?(ПечатьПоДаннымУпрУчета, "", "БухгалтерскийУчет") + " КАК МестонахождениеОС
	|			ПО СобытияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|				И СобытияОС.Период >= МестонахождениеОС.Период
	|	ГДЕ
	|		СобытияОС.ОсновноеСредство = &ОсновноеСредство
	|		И СобытияОС.Период <= &Период
	|		И СобытияОС.Событие.ВидСобытияОС В(&СписокСобытийОС)
	|		" + ?(ПечатьПоДаннымУпрУчета, "", "И СобытияОС.Организация = &Организация") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СобытияОС.ОсновноеСредство,
	|		СобытияОС.Период,
	|		СобытияОС.Регистратор,
	|		СобытияОС.Событие,
	|		СобытияОС.Событие.ВидСобытияОС,
	|		СобытияОС.НазваниеДокумента,
	|		СобытияОС.НомерДокумента) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС" + ?(ПечатьПоДаннымУпрУчета, "", "БухгалтерскийУчет") + " КАК МестонахождениеОС
	|		ПО ВложенныйЗапрос.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|			И ВложенныйЗапрос.МестонахождениеОСПериод = МестонахождениеОС.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		СтрокаРаздела4.Параметры.ДатаНомерДокумента = ВыборкаЗаписей.НазваниеДокумента 
		                                            + " № " + ВыборкаЗаписей.НомерДокумента
		                                            + " от " + Формат(ВыборкаЗаписей.Период, "ДФ=dd.MM.yyyy");
		СтрокаРаздела4.Параметры.ВидОперации        = ВыборкаЗаписей.СобытиеПредставление;
		СтрокаРаздела4.Параметры.ФИОМОЛДвижения     = ВыборкаЗаписей.МОЛПредставление;
		СтрокаРаздела4.Параметры.Подразделение      = ВыборкаЗаписей.МестонахождениеПредставление;

		// Остаточная стоимость ОС на момент события
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		
		Если ВыборкаЗаписей.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание 
		 ИЛИ ВыборкаЗаписей.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача	Тогда
		 
			Запрос.УстановитьПараметр("МоментСобытия", Новый МоментВремени(ВыборкаЗаписей.Период, ВыборкаЗаписей.Регистратор));
			
			Запрос.Текст =  "
			|	ВЫБРАТЬ
			|	ЕСТЬNULL(СтоимостьОС.СтоимостьРасход, 0) - ЕСТЬNULL(СтоимостьОС.АмортизацияРасход, 0) КАК ОстаточнаяСтоимость
			|ИЗ
			|	РегистрНакопления." + НазваниеРегистраСтоимость + ".Обороты(&МоментСобытия, &МоментСобытия, , ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОС
			|";
			РезультатЗапроса = Запрос.Выполнить();
		
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = РезультатЗапроса.Выгрузить()[0].ОстаточнаяСтоимость;
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(ВыборкаЗаписей.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатковОС") Тогда
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = СведенияОбОС.ПервоначальнаяСтоимость;
				
			Иначе
				
				Запрос.УстановитьПараметр("МоментСобытия", Новый Граница(Новый МоментВремени(ВыборкаЗаписей.Период, ВыборкаЗаписей.Регистратор)));
				Запрос.Текст =  "
				|	ВЫБРАТЬ
				|	ЕСТЬNULL(СтоимостьОС.СтоимостьОстаток, 0) - ЕСТЬNULL(СтоимостьОС.АмортизацияОстаток, 0) КАК ОстаточнаяСтоимость
				|ИЗ
				|	РегистрНакопления." + НазваниеРегистраСтоимость + ".Остатки(&МоментСобытия, ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОС
				|";
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = РезультатЗапроса.Выгрузить()[0].ОстаточнаяСтоимость;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДок.Вывести(СтрокаРаздела4);
		
	КонецЦикла;	
	
	ТабДок.Вывести(ПодвалСтраницы1);
	
	// модернизация ос и ремонт
	ТаблицаМодернизаций = Новый ТаблицаЗначений;
	ТаблицаМодернизаций.Колонки.Добавить("ВидОперации");
	ТаблицаМодернизаций.Колонки.Добавить("Название");
	ТаблицаМодернизаций.Колонки.Добавить("Дата");
	ТаблицаМодернизаций.Колонки.Добавить("Номер");
	ТаблицаМодернизаций.Колонки.Добавить("Сумма");
	
	ТаблицаРемонтов = Новый ТаблицаЗначений;
	ТаблицаРемонтов.Колонки.Добавить("ВидОперации");
	ТаблицаРемонтов.Колонки.Добавить("Название");
	ТаблицаРемонтов.Колонки.Добавить("Дата");
	ТаблицаРемонтов.Колонки.Добавить("Номер");
	ТаблицаРемонтов.Колонки.Добавить("Сумма");
	
	ШапкаРазделов5и6.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов5и6);
	
	СписокМодернизаций = Новый Массив;
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
	
	СписокРемонтов = Новый Массив;
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);

	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ОсновноеСредство",    Ссылка);
	Запрос.УстановитьПараметр("УсловиеМодернизаций", СписокМодернизаций);
	Запрос.УстановитьПараметр("УсловиеРемонтов",	 СписокРемонтов);
	Запрос.УстановитьПараметр("ВидОперацииОС",       Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеМодернизаций) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратМодернизаций,
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеРемонтов) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратРемонтов,
	|	ОперацииОС.Регистратор КАК Регистратор,
	|	ОперацииОС.Период КАК Период,
	|	ОперацииОС.Событие КАК Операция,
	|	ОперацииОС.НомерДокумента КАК НомерДокумента,
	|	ОперацииОС.НазваниеДокумента КАК НазваниеДокумента
	|ИЗ
	|	РегистрСведений."+НазваниеРегистраСобытия+" КАК ОперацииОС
	|
	|ГДЕ
	|	ОперацииОС.Событие.ВидСобытияОС <> &ВидОперацииОС И
	|	ОперацииОС.ОсновноеСредство = &ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииОС.Период,
	|	ОперацииОС.Регистратор,
	|	ОперацииОС.Событие,
	|	ОперацииОС.НомерДокумента,
	|	ОперацииОС.НазваниеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	ВыборкаРегистраторов = Результат.Выбрать(СпособВыборки);
	
	// все ремонты, модернизации и т.д. произведенные документом модернизация размещаем в 5 разделе
	// до тех пор, пока не доказано обратное 
	// все действия проведенные документом модернизация
	// могут влиять на первоначальную стоимость и таким образом должны отражаться в 5 разделе
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		СуммаМодернизаций = ?(ВыборкаРегистраторов.СуммаЗатратМодернизаций = NULL, 0, ВыборкаРегистраторов.СуммаЗатратМодернизаций);
		СуммаРемонтов = ?(ВыборкаРегистраторов.СуммаЗатратРемонтов = NULL, 0, ВыборкаРегистраторов.СуммаЗатратРемонтов);
		
		Если СуммаМодернизаций+СуммаРемонтов<> 0 Тогда		
			СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
			СтрокаТаблицыМодернизаций.ВидОперации = ВыборкаРегистраторов.Операция;
			СтрокаТаблицыМодернизаций.Название    = ВыборкаРегистраторов.НазваниеДокумента;
			СтрокаТаблицыМодернизаций.Номер       = ВыборкаРегистраторов.НомерДокумента;
			СтрокаТаблицыМодернизаций.Дата        = ВыборкаРегистраторов.Период;
			СтрокаТаблицыМодернизаций.Сумма       = СуммаМодернизаций + СуммаРемонтов;
		КонецЕсли;
		//Если СуммаРемонтов <> 0 Тогда		
		//	СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
		//	СтрокаТаблицыРемонтов.ВидОперации = ВыборкаРегистраторов.Операция;
		//	СтрокаТаблицыРемонтов.Название    = ВыборкаРегистраторов.НазваниеДокумента;
		//	СтрокаТаблицыРемонтов.Номер       = ВыборкаРегистраторов.НомерДокумента;
		//	СтрокаТаблицыРемонтов.Дата        = ВыборкаРегистраторов.Период;
		//	СтрокаТаблицыРемонтов.Сумма       = СуммаРемонтов;
		//КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = Макс(ТаблицаМодернизаций.Количество(),ТаблицаРемонтов.Количество()); 
	Для СчетСтрок = 1 По КоличествоСтрок Цикл
		Если СчетСтрок <= ТаблицаМодернизаций.Количество() Тогда
			СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок-1);
			СтрокаРазделов5и6.Параметры.Модернизация          = СтрокаТаблицы.ВидОперации;
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = СтрокаТаблицы.Название;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = СтрокаТаблицы.Дата;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = СтрокаТаблицы.Номер;
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = СтрокаТаблицы.Сумма; 
		Иначе
			СтрокаРазделов5и6.Параметры.Модернизация          = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = ""; 
		КонецЕсли;
		
		//Если СчетСтрок <= ТаблицаРемонтов.Количество() Тогда
		//	СтрокаТаблицы = ТаблицаРемонтов.Получить(СчетСтрок-1);
		//	СтрокаРазделов5и6.Параметры.Ремонт          = СтрокаТаблицы.ВидОперации;
		//	СтрокаРазделов5и6.Параметры.ДокРемонта      = СтрокаТаблицы.Название;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = СтрокаТаблицы.Дата;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = СтрокаТаблицы.Номер;
		//	СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = СтрокаТаблицы.Сумма;
		//Иначе
			СтрокаРазделов5и6.Параметры.Ремонт          = "";
			СтрокаРазделов5и6.Параметры.ДокРемонта		= "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = ""; 
		//КонецЕсли;
		
		ТабДок.Вывести(СтрокаРазделов5и6);		
	КонецЦикла;
	
	ТабДок.Вывести(ШапкаРаздела7_1);
	ТабДок.Вывести(ШапкаРаздела7_2);
	// АБС ВСТАВКА
	Если абс_МакетССоставомОС Тогда
		
		// выведем информацию о составе ОС
		СтрокаРаздела7_2 = Макет.ПолучитьОбласть("СтрокаРаздела7_2");
		ПодвалРаздела7_2 = Макет.ПолучитьОбласть("ПодвалРаздела7_2");
		ЗапросСоставОС = Новый Запрос;
		ЗапросСоставОС.УстановитьПараметр("ОсновноеСредство", Ссылка);
		ЗапросСоставОС.УстановитьПараметр("МоментВремени", Новый Граница(ДатаСведений, ВидГраницы.Включая));
		ЗапросСоставОС.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(абс_СоставОСОстатки.Номенклатура.НаименованиеПолное КАК СТРОКА(500))) = """"
		|			ТОГДА абс_СоставОСОстатки.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(абс_СоставОСОстатки.Номенклатура.НаименованиеПолное КАК СТРОКА(500))
		|	КОНЕЦ КАК Номенклатура,
		|	абс_СоставОСОстатки.Номенклатура КАК НоменклатураСсылка,
		|	ПРЕДСТАВЛЕНИЕ(абс_СоставОСОстатки.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	абс_СоставОСОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыСсылка,
		|	ПРЕДСТАВЛЕНИЕ(абс_СоставОСОстатки.СерияНоменклатуры) КАК СерияНоменклатуры,
		|	абс_СоставОСОстатки.СерияНоменклатуры КАК СерияНоменклатурыСсылка,
		|	абс_СоставОСОстатки.КоличествоОстаток КАК Количество,
		|	ПРЕДСТАВЛЕНИЕ(абс_СоставОСОстатки.Номенклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрНакопления.абс_СоставОС.Остатки(&МоментВремени, ВнеоборотныйАктив = &ОсновноеСредство) КАК абс_СоставОСОстатки";
		СчСтрокРаздела7_2 = 5;
		ВыборкаСоставОС = ЗапросСоставОС.Выполнить().Выбрать();
		Пока ВыборкаСоставОС.Следующий() Цикл
			СтрокаНоменклатуры = СокрЛП(ВыборкаСоставОС.Номенклатура) + ?(ЗначениеЗаполнено(ВыборкаСоставОС.ХарактеристикаНоменклатуры), ", хар-ка: " + СокрЛП(ВыборкаСоставОС.ХарактеристикаНоменклатуры), "") +
			?(ЗначениеЗаполнено(ВыборкаСоставОС.СерияНоменклатуры), ", серия: " + СокрЛП(ВыборкаСоставОС.СерияНоменклатуры), "") + ?(ЗначениеЗаполнено(ВыборкаСоставОС.ЕдиницаИзмерения), ", " +
			СокрЛП(ВыборкаСоставОС.ЕдиницаИзмерения), "");
			СтрокаРаздела7_2.Параметры.Номенклатура = СтрокаНоменклатуры;
			СтрокаРаздела7_2.Параметры.НоменклатураСсылка = ВыборкаСоставОС.НоменклатураСсылка;
			СтрокаРаздела7_2.Параметры.Количество = Формат(ВыборкаСоставОС.Количество, "ЧДЦ=3");
			ТабДок.Вывести(СтрокаРаздела7_2);
			СчСтрокРаздела7_2 = СчСтрокРаздела7_2 - 1;
		КонецЦикла;
		
		Если СчСтрокРаздела7_2 > 0 Тогда
			СтрокаРаздела7_2.Параметры.Номенклатура = "";
			СтрокаРаздела7_2.Параметры.НоменклатураСсылка = "";
			СтрокаРаздела7_2.Параметры.Количество = "";
			Для Сч = 1 По СчСтрокРаздела7_2 Цикл
				ТабДок.Вывести(СтрокаРаздела7_2);
			КонецЦикла;
		КонецЕсли;
		
		ТабДок.Вывести(ПодвалРаздела7_2);
		
	КонецЕсли;
	//\\ АБС ВСТАВКА
	ТабДок.Вывести(ПодвалСтраницы2);
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ОС6_2003";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьОС6_2003() 

Функция ПечатьОС6_2003_v2(ДатаСведений,ПечатьПоДаннымУпрУчета = Истина, абс_МакетССоставомОС = Ложь) 
	
	//\\ АБС ИЗМЕНЕНИЕ	
	Макет = ПолучитьМакет("абс_ОС6_2003v2");
	//\\ АБС ИЗМЕНЕНИЕ
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2  = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3     = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3    = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4     = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4    = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1   = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6  = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1   = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	ШапкаРаздела7_2   = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2   = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	ТабДок = Новый ТабличныйДокумент();
	
	НазваниеРегистраСтоимость = "СтоимостьОС";
	НазваниеРегистраСобытия   = "СобытияОС";
	НазваниеСуммыЗатрат		  = "СуммаЗатрат";	
	Организация = Неопределено;

	Если ПечатьПоДаннымУпрУчета тогда
		кВидуУчета   = "управленческому";
		cВидаУчета   = "управленческого";
		ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
		ВидУчета 	 = "Упр" ;
	Иначе
		кВидуУчета   = "бухгалтерскому";
		cВидаУчета   = "бухгалтерского";
		ВалютаПечати = глЗначениеПеременной("ВалютаРегламентированногоУчета").Наименование;
		НазваниеРегистраСтоимость = НазваниеРегистраСтоимость + "БухгалтерскийУчет";
		НазваниеРегистраСобытия   = НазваниеРегистраСобытия   + "Организаций";
		НазваниеСуммыЗатрат		  = НазваниеСуммыЗатрат +"БУ";
		ВидУчета 	 = "Бух";
		ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
		Организация    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Организация,Справочники.Организации.ПустаяСсылка());
	КонецЕсли;	
	
	СведенияОбОС = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОбОС(Ссылка,ДатаСведений,Организация,ВидУчета); 
	Если СведенияОбОС <> Неопределено тогда
		 Если Не ПечатьПоДаннымУпрУчета и НЕ ЗначениеЗаполнено(СведенияОбОС.ОсновноеСредство) Тогда
			Сообщить("На момент печати основное средство не принималось к учету в указанной организации."+Символы.ПС+
			"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
			Возврат Неопределено;
		 КонецЕсли;
    	Шапка.Параметры.Заполнить(СведенияОбОС);
		Шапка.Параметры.ДатаДок        = Лев(Строка(ДатаСведений),10);
		Шапка.Параметры.НомерДок       = Шапка.Параметры.ИнвентарныйНомер;
		Шапка.Параметры.НаименованиеОС = ? (НЕ ЗначениеЗаполнено(СведенияОбОС.НаименованиеПолное),
										    СведенияОбОС.Наименование,СведенияОбОС.НаименованиеПолное);
	Иначе
		Сообщить("На момент печати основное средство не принималось к учету."+Символы.ПС+
		"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ (Организация = Неопределено) Тогда
		Шапка.Параметры.КодПоОКПО = Организация.КодПоОКПО;
	КонецЕсли;
	
	// получим даты  и документы изменения состояний ос
	СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,ПечатьПоДаннымУпрУчета,Организация);
	ДокументПринятия = СтруктПараметров["ИмяДок"];
	ДатаПринятия     = СтруктПараметров["Дата"];
	
	СтруктПараметров   = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,Организация);
	ДатаВвода          = СтруктПараметров["Дата"];
	ДокументВвода      = СтруктПараметров["ИмяДок"];
	ДокументВводаНомер = СтруктПараметров["НомерДок"];
	
	СтруктПараметров    = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,ПечатьПоДаннымУпрУчета,Организация);
	ДатаСписания        = СтруктПараметров["Дата"];
	ДокументСписания    = СтруктПараметров["ИмяДок"];
	РегистраторСписания = СтруктПараметров["Регистратор"];
	
	//	получим дату и документ последней модернизации
	Если ПечатьПоДаннымУпрУчета тогда
		ВыборкаЗаписей = РегистрыСведений.СобытияОС.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	Иначе
		ВыборкаЗаписей = РегистрыСведений.СобытияОСОрганизаций.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	КонецЕсли;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ВыборкаЗаписей.Событие.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация Тогда
			ДатаПоследнейМодернизации     = Лев(Строка(ВыборкаЗаписей.Период),10);
			ДокументПоследнейМодернизации = ВыборкаЗаписей.НазваниеДокумента;
		КонецЕсли;
	КонецЦикла;
	
	Шапка.Параметры.ДатаВвода    = ДатаПринятия;	
	Шапка.Параметры.ДатаСписания = ДатаСписания;
	Шапка.Параметры.кВидуУчета 	 = кВидуУчета;
	Шапка.Параметры.cВидаУчета 	 = cВидаУчета;
	Шапка.Параметры.абс_КодПоОКОФ_504 = абс_КодПоОКОФ_504.Код;
	ТабДок.Вывести(Шапка);
	
	ШапкаРазделов1и2.Параметры.кВидуУчета = кВидуУчета;
	
	// Балансовая стоимость ОС на момент поступления
	ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость    = СведенияОбОС.ПервоначальнаяСтоимость;
	ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = СведенияОбОС.СрокПолезногоИспользования;
	ШапкаРазделов1и2.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов1и2);
	
	ШапкаРаздела3.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела3);
	ТабДок.Вывести(СтрокиРаздела3);
	
	// Сведения о приемке, внутренних перемещениях и выбытии	
	ШапкаРаздела4.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела4);
	
	СписокСобытийОС = Новый Массив();
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ВнутреннееПеремещение);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Списание);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Передача);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСобытийОС",  СписокСобытийОС);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Период",           ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Событие) КАК СобытиеПредставление,
	|	ВложенныйЗапрос.Событие КАК Событие,
	|	ВложенныйЗапрос.ВидСобытияОС КАК ВидСобытияОС,
	|	ВложенныйЗапрос.СобытиеОСРегистратор КАК Регистратор,
	|	ВложенныйЗапрос.НазваниеДокумента КАК НазваниеДокумента,
	|	ВложенныйЗапрос.НомерДокумента КАК НомерДокумента,
	|	ВложенныйЗапрос.СобытиеОСПериод КАК Период,
	|	ПРЕДСТАВЛЕНИЕ(МестонахождениеОС.МОЛ) КАК МОЛПредставление,
	|	ПРЕДСТАВЛЕНИЕ(МестонахождениеОС.Местонахождение) КАК МестонахождениеПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		СобытияОС.ОсновноеСредство КАК ОсновноеСредство,
	|		СобытияОС.Период КАК СобытиеОСПериод,
	|		СобытияОС.Регистратор КАК СобытиеОСРегистратор,
	|		СобытияОС.Событие КАК Событие,
	|		СобытияОС.Событие.ВидСобытияОС КАК ВидСобытияОС, 
	|		СобытияОС.НазваниеДокумента КАК НазваниеДокумента,
	|		СобытияОС.НомерДокумента КАК НомерДокумента,
	|		МАКСИМУМ(МестонахождениеОС.Период) КАК МестонахождениеОСПериод
	|	ИЗ
	|		РегистрСведений.СобытияОС" + ?(ПечатьПоДаннымУпрУчета, "", "Организаций") + " КАК СобытияОС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС" + ?(ПечатьПоДаннымУпрУчета, "", "БухгалтерскийУчет") + " КАК МестонахождениеОС
	|			ПО СобытияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|				И СобытияОС.Период >= МестонахождениеОС.Период
	|	ГДЕ
	|		СобытияОС.ОсновноеСредство = &ОсновноеСредство
	|		И СобытияОС.Период <= &Период
	|		И СобытияОС.Событие.ВидСобытияОС В(&СписокСобытийОС)
	|		" + ?(ПечатьПоДаннымУпрУчета, "", "И СобытияОС.Организация = &Организация") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СобытияОС.ОсновноеСредство,
	|		СобытияОС.Период,
	|		СобытияОС.Регистратор,
	|		СобытияОС.Событие,
	|		СобытияОС.Событие.ВидСобытияОС,
	|		СобытияОС.НазваниеДокумента,
	|		СобытияОС.НомерДокумента) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС" + ?(ПечатьПоДаннымУпрУчета, "", "БухгалтерскийУчет") + " КАК МестонахождениеОС
	|		ПО ВложенныйЗапрос.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|			И ВложенныйЗапрос.МестонахождениеОСПериод = МестонахождениеОС.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		СтрокаРаздела4.Параметры.ДатаНомерДокумента = ВыборкаЗаписей.НазваниеДокумента 
		                                            + " № " + ВыборкаЗаписей.НомерДокумента
		                                            + " от " + Формат(ВыборкаЗаписей.Период, "ДФ=dd.MM.yyyy");
		СтрокаРаздела4.Параметры.ВидОперации        = ВыборкаЗаписей.СобытиеПредставление;
		СтрокаРаздела4.Параметры.ФИОМОЛДвижения     = ВыборкаЗаписей.МОЛПредставление;
		СтрокаРаздела4.Параметры.Подразделение      = ВыборкаЗаписей.МестонахождениеПредставление;

		// Остаточная стоимость ОС на момент события
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		
		Если ВыборкаЗаписей.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание 
		 ИЛИ ВыборкаЗаписей.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача	Тогда
		 
			Запрос.УстановитьПараметр("МоментСобытия", Новый МоментВремени(ВыборкаЗаписей.Период, ВыборкаЗаписей.Регистратор));
			
			Запрос.Текст =  "
			|	ВЫБРАТЬ
			|	ЕСТЬNULL(СтоимостьОС.СтоимостьРасход, 0) - ЕСТЬNULL(СтоимостьОС.АмортизацияРасход, 0) КАК ОстаточнаяСтоимость
			|ИЗ
			|	РегистрНакопления." + НазваниеРегистраСтоимость + ".Обороты(&МоментСобытия, &МоментСобытия, , ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОС
			|";
			РезультатЗапроса = Запрос.Выполнить();
		
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = РезультатЗапроса.Выгрузить()[0].ОстаточнаяСтоимость;
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(ВыборкаЗаписей.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатковОС") Тогда
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = СведенияОбОС.ПервоначальнаяСтоимость;
				
			Иначе
				
				Запрос.УстановитьПараметр("МоментСобытия", Новый Граница(Новый МоментВремени(ВыборкаЗаписей.Период, ВыборкаЗаписей.Регистратор)));
				Запрос.Текст =  "
				|	ВЫБРАТЬ
				|	ЕСТЬNULL(СтоимостьОС.СтоимостьОстаток, 0) - ЕСТЬNULL(СтоимостьОС.АмортизацияОстаток, 0) КАК ОстаточнаяСтоимость
				|ИЗ
				|	РегистрНакопления." + НазваниеРегистраСтоимость + ".Остатки(&МоментСобытия, ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОС
				|";
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = РезультатЗапроса.Выгрузить()[0].ОстаточнаяСтоимость;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДок.Вывести(СтрокаРаздела4);
		
	КонецЦикла;	
	
	ТабДок.Вывести(ПодвалСтраницы1);
	
	// модернизация ос и ремонт
	ТаблицаМодернизаций = Новый ТаблицаЗначений;
	ТаблицаМодернизаций.Колонки.Добавить("ВидОперации");
	ТаблицаМодернизаций.Колонки.Добавить("Название");
	ТаблицаМодернизаций.Колонки.Добавить("Дата");
	ТаблицаМодернизаций.Колонки.Добавить("Номер");
	ТаблицаМодернизаций.Колонки.Добавить("Сумма");
	
	ТаблицаРемонтов = Новый ТаблицаЗначений;
	ТаблицаРемонтов.Колонки.Добавить("ВидОперации");
	ТаблицаРемонтов.Колонки.Добавить("Название");
	ТаблицаРемонтов.Колонки.Добавить("Дата");
	ТаблицаРемонтов.Колонки.Добавить("Номер");
	ТаблицаРемонтов.Колонки.Добавить("Сумма");
	
	ШапкаРазделов5и6.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов5и6);
	
	СписокМодернизаций = Новый Массив;
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
	
	СписокРемонтов = Новый Массив;
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);

	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ОсновноеСредство",    Ссылка);
	Запрос.УстановитьПараметр("УсловиеМодернизаций", СписокМодернизаций);
	Запрос.УстановитьПараметр("УсловиеРемонтов",	 СписокРемонтов);
	Запрос.УстановитьПараметр("ВидОперацииОС",       Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеМодернизаций) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратМодернизаций,
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеРемонтов) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратРемонтов,
	|	ОперацииОС.Регистратор КАК Регистратор,
	|	ОперацииОС.Период КАК Период,
	|	ОперацииОС.Событие КАК Операция,
	|	ОперацииОС.НомерДокумента КАК НомерДокумента,
	|	ОперацииОС.НазваниеДокумента КАК НазваниеДокумента
	|ИЗ
	|	РегистрСведений."+НазваниеРегистраСобытия+" КАК ОперацииОС
	|
	|ГДЕ
	|	ОперацииОС.Событие.ВидСобытияОС <> &ВидОперацииОС И
	|	ОперацииОС.ОсновноеСредство = &ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииОС.Период,
	|	ОперацииОС.Регистратор,
	|	ОперацииОС.Событие,
	|	ОперацииОС.НомерДокумента,
	|	ОперацииОС.НазваниеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	ВыборкаРегистраторов = Результат.Выбрать(СпособВыборки);
	
	// все ремонты, модернизации и т.д. произведенные документом модернизация размещаем в 5 разделе
	// до тех пор, пока не доказано обратное 
	// все действия проведенные документом модернизация
	// могут влиять на первоначальную стоимость и таким образом должны отражаться в 5 разделе
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		СуммаМодернизаций = ?(ВыборкаРегистраторов.СуммаЗатратМодернизаций = NULL, 0, ВыборкаРегистраторов.СуммаЗатратМодернизаций);
		СуммаРемонтов = ?(ВыборкаРегистраторов.СуммаЗатратРемонтов = NULL, 0, ВыборкаРегистраторов.СуммаЗатратРемонтов);
		
		Если СуммаМодернизаций+СуммаРемонтов<> 0 Тогда		
			СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
			СтрокаТаблицыМодернизаций.ВидОперации = ВыборкаРегистраторов.Операция;
			СтрокаТаблицыМодернизаций.Название    = ВыборкаРегистраторов.НазваниеДокумента;
			СтрокаТаблицыМодернизаций.Номер       = ВыборкаРегистраторов.НомерДокумента;
			СтрокаТаблицыМодернизаций.Дата        = ВыборкаРегистраторов.Период;
			СтрокаТаблицыМодернизаций.Сумма       = СуммаМодернизаций + СуммаРемонтов;
		КонецЕсли;
		//Если СуммаРемонтов <> 0 Тогда		
		//	СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
		//	СтрокаТаблицыРемонтов.ВидОперации = ВыборкаРегистраторов.Операция;
		//	СтрокаТаблицыРемонтов.Название    = ВыборкаРегистраторов.НазваниеДокумента;
		//	СтрокаТаблицыРемонтов.Номер       = ВыборкаРегистраторов.НомерДокумента;
		//	СтрокаТаблицыРемонтов.Дата        = ВыборкаРегистраторов.Период;
		//	СтрокаТаблицыРемонтов.Сумма       = СуммаРемонтов;
		//КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = Макс(ТаблицаМодернизаций.Количество(),ТаблицаРемонтов.Количество()); 
	Для СчетСтрок = 1 По КоличествоСтрок Цикл
		Если СчетСтрок <= ТаблицаМодернизаций.Количество() Тогда
			СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок-1);
			СтрокаРазделов5и6.Параметры.Модернизация          = СтрокаТаблицы.ВидОперации;
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = СтрокаТаблицы.Название;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = СтрокаТаблицы.Дата;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = СтрокаТаблицы.Номер;
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = СтрокаТаблицы.Сумма; 
		Иначе
			СтрокаРазделов5и6.Параметры.Модернизация          = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = ""; 
		КонецЕсли;
		
		//Если СчетСтрок <= ТаблицаРемонтов.Количество() Тогда
		//	СтрокаТаблицы = ТаблицаРемонтов.Получить(СчетСтрок-1);
		//	СтрокаРазделов5и6.Параметры.Ремонт          = СтрокаТаблицы.ВидОперации;
		//	СтрокаРазделов5и6.Параметры.ДокРемонта      = СтрокаТаблицы.Название;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = СтрокаТаблицы.Дата;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = СтрокаТаблицы.Номер;
		//	СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = СтрокаТаблицы.Сумма;
		//Иначе
			СтрокаРазделов5и6.Параметры.Ремонт          = "";
			СтрокаРазделов5и6.Параметры.ДокРемонта		= "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = ""; 
		//КонецЕсли;
		
		ТабДок.Вывести(СтрокаРазделов5и6);		
	КонецЦикла;
	
	ТабДок.Вывести(ШапкаРаздела7_1);
	ТабДок.Вывести(ШапкаРаздела7_2);
	// АБС ВСТАВКА
	Если абс_МакетССоставомОС Тогда
		
		// выведем информацию о составе ОС
		СтрокаРаздела7_2 = Макет.ПолучитьОбласть("СтрокаРаздела7_2");
		ПодвалРаздела7_2 = Макет.ПолучитьОбласть("ПодвалРаздела7_2");
		ЗапросСоставОС = Новый Запрос;
		ЗапросСоставОС.УстановитьПараметр("ОсновноеСредство", Ссылка);
		ЗапросСоставОС.УстановитьПараметр("МоментВремени", Новый Граница(ДатаСведений, ВидГраницы.Включая));
		ЗапросСоставОС.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(абс_СоставОСОстатки.Номенклатура.НаименованиеПолное КАК СТРОКА(500))) = """"
		|			ТОГДА абс_СоставОСОстатки.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(абс_СоставОСОстатки.Номенклатура.НаименованиеПолное КАК СТРОКА(500))
		|	КОНЕЦ КАК Номенклатура,
		|	абс_СоставОСОстатки.Номенклатура КАК НоменклатураСсылка,
		|	ПРЕДСТАВЛЕНИЕ(абс_СоставОСОстатки.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	абс_СоставОСОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыСсылка,
		|	ПРЕДСТАВЛЕНИЕ(абс_СоставОСОстатки.СерияНоменклатуры) КАК СерияНоменклатуры,
		|	абс_СоставОСОстатки.СерияНоменклатуры КАК СерияНоменклатурыСсылка,
		|	абс_СоставОСОстатки.КоличествоОстаток КАК Количество,
		|	ПРЕДСТАВЛЕНИЕ(абс_СоставОСОстатки.Номенклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрНакопления.абс_СоставОС.Остатки(&МоментВремени, ВнеоборотныйАктив = &ОсновноеСредство) КАК абс_СоставОСОстатки";
		СчСтрокРаздела7_2 = 5;
		ВыборкаСоставОС = ЗапросСоставОС.Выполнить().Выбрать();
		Пока ВыборкаСоставОС.Следующий() Цикл
			СтрокаНоменклатуры = СокрЛП(ВыборкаСоставОС.Номенклатура) + ?(ЗначениеЗаполнено(ВыборкаСоставОС.ХарактеристикаНоменклатуры), ", хар-ка: " + СокрЛП(ВыборкаСоставОС.ХарактеристикаНоменклатуры), "") +
			?(ЗначениеЗаполнено(ВыборкаСоставОС.СерияНоменклатуры), ", серия: " + СокрЛП(ВыборкаСоставОС.СерияНоменклатуры), "") + ?(ЗначениеЗаполнено(ВыборкаСоставОС.ЕдиницаИзмерения), ", " +
			СокрЛП(ВыборкаСоставОС.ЕдиницаИзмерения), "");
			СтрокаРаздела7_2.Параметры.Номенклатура = СтрокаНоменклатуры;
			СтрокаРаздела7_2.Параметры.НоменклатураСсылка = ВыборкаСоставОС.НоменклатураСсылка;
			СтрокаРаздела7_2.Параметры.Количество = Формат(ВыборкаСоставОС.Количество, "ЧДЦ=3");
			ТабДок.Вывести(СтрокаРаздела7_2);
			СчСтрокРаздела7_2 = СчСтрокРаздела7_2 - 1;
		КонецЦикла;
		
		Если СчСтрокРаздела7_2 > 0 Тогда
			СтрокаРаздела7_2.Параметры.Номенклатура = "";
			СтрокаРаздела7_2.Параметры.НоменклатураСсылка = "";
			СтрокаРаздела7_2.Параметры.Количество = "";
			Для Сч = 1 По СчСтрокРаздела7_2 Цикл
				ТабДок.Вывести(СтрокаРаздела7_2);
			КонецЦикла;
		КонецЕсли;
		
		ТабДок.Вывести(ПодвалРаздела7_2);
		
	КонецЕсли;
	//\\ АБС ВСТАВКА
	ТабДок.Вывести(ПодвалСтраницы2);
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ОС6_2003";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьОС6_2003() 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать справочника. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
// Параметры:
//  НазваниеМакета - строка, название макета.
// Возвращаемое значение:
//  Нет.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ФормаЭлемента = Неопределено) Экспорт

	ДатаСведений = ?(мДатаСведений = Неопределено, КонецДня(ОбщегоНазначенияЗК.ПолучитьРабочуюДату()), мДатаСведений);
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС6_2003упр" Тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений);
	ИначеЕсли ИмяМакета = "ОС6_2003бух" Тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений, Ложь);
		// АБС ВСТАВКА
	ИначеЕсли ИмяМакета = "абс_ОС6_2003упр" Тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений, , Истина);
	ИначеЕсли ИмяМакета = "абс_ОС6_2003бух" Тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений, Ложь, Истина);
	ИначеЕсли ИмяМакета = "ОС6_2003бух_v2" Тогда
		ТабДокумент = ПечатьОС6_2003_v2(ДатаСведений, Ложь);		
		//\\ АБС ВСТАВКА
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Инвентарная карточка ОС (Форма ОС-6)", Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	// АБС ИЗМЕНЕНИЕ
	//Возврат Новый Структура("ОС6_2003упр,ОС6_2003бух","Форма ОС-6 (упр. учет)","Форма ОС-6 (бух. учет)");
	Возврат Новый Структура("ОС6_2003упр,ОС6_2003бух, абс_ОС6_2003упр, абс_ОС6_2003бух, ОС6_2003бух_v2","Форма ОС-6 (упр. учет)","Форма ОС-6 (бух. учет)", "Форма ОС-6 с составом (упр. учет)", "Форма ОС-6 с составом (бух. учет)","Форма ОС-6 (бух. учет c постановлением 504)");
	//\\ АБС ИЗМЕНЕНИЕ

КонецФункции // ПолучитьТаблицуПечатныхФорм()

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	//АБС ВСТАВКА Навценя 13.02.2014
	ЗаполнитьПрефикс();
	//АБС ВСТАВКА КОНЕЦ
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	//АБС ВСТАВКА Навценя 13.02.2014
	ЗаполнитьПрефикс();	
	абс_История.Очистить();
	
	//Крамаренко Д.М.
	//T#77137935 — Не правильно заполнен Состав ОС
	абс_СоставОС.Очистить();
	//T#77137935 — Не правильно заполнен Состав ОС
	
	//АБС ВСТАВКА КОНЕЦ
	// Start КТТК Ермолов Е.Л.  08.07.2016 Убрать группу ОС РЖД - она будет заполнятся, как вариант при трансляции проводок
	абс_ГруппаОСРЖД = Неопределено;
	// Stop КТТК Ермолов Е.Л.  08.07.2016
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	//Бобылев А.А. 18.09.2018 CHG149
	Если ЭтоНовый() Тогда
		Если ГруппаОС = Перечисления.ГруппыОС.ТранспортныеСредства И НЕ Автотранспорт Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("ОС без признака ""Автотранспорт"" не может находится в группе ""Транспортные средства""", Отказ); 	
		КонецЕсли;
	КонецЕсли;
	//Бобылев А.А. -----------------
	
	// Вставить содержимое обработчика.
	Если ЭтоНовый() Тогда
		УстановитьНовыйКод(абс_Префикс);
	КонецЕсли;
	
	//АБС Коломиец+   	
	Если ЭтоГруппа 
		И Не РольДоступна("ПолныеПрава")
		И Не РольДоступна("абс_УчетОСиНМА") Тогда 
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав", Отказ, "Запись группы: " + Строка(ЭтотОбъект)); 	
		
	КонецЕсли;
	//АБС Коломиец-
	
	Если ЭтоГруппа или ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	//ВСТАВКА №16124 НАЧАЛО
	//контроль статуса для заявки №000020339 (иначе она не будет работать)
	Если НЕ ЗначениеЗаполнено(ЦельИспользования) и Ссылка.абс_СтатусОС = Перечисления.абс_СтатусыОС.Подготовка Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Поле «цель использования» обязательно для заполнения, закладка «дополнительно»!", Отказ);	
	КонецЕсли;
	//\\ВСТАВКА №16124 КОНЕЦ

	Если Модифицированность() Тогда
		абс_ПоследнийИзменивший = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	//АБС ВСТАВКА №54543 НАЧАЛО «5 января 2015 г.», Пополитов
	Если не ЗначениеЗаполнено(Родитель) и не РольДоступна("ПолныеПрава") Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено вводить элементы в не папок!", Отказ);
	КонецЕсли;
	//\\АБС ВСТАВКА №54543 КОНЕЦ
	
	// Гущина T#7763513  2017.01.11 +++   убираю проверку заполнения, т.к. будут менять через документы. Пока не удаляю т.к. могут вернуться к заполнению в карточке
	
	////АБС ВСТАВКА Навценя 02.03.2015
	//ПроверитьЗаполнениеОбособленногоПодразделения(Отказ);
	////АБС ВСТАВКА КОНЕЦ
	
	// Гущина T#7763513  2017.01.11 ---	
	
	// Start КТТК Ермолов Е.Л.  23.12.2015 Перенесено из формы объекта
	
	//АБС_Вихорев
	Запрос = Новый Запрос("ВЫБРАТЬ РАзрешенные
	                      |	абс_ИсторияИзмененияОКОФСрезПоследних.ОКОФ
						  |ИЗ
	                      |	РегистрСведений.абс_ИсторияИзмененияОКОФ.СрезПоследних(
	                      |			,
	                      |			ОсновноеСредство = &ОС) КАК абс_ИсторияИзмененияОКОФСрезПоследних");
	Запрос.УстановитьПараметр("ОС", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() и не Выборка.Окоф = ЭтотОбъект.КодПоОКОФ Тогда // ЭлементыФормы.КодПоОКОФ.Значение тогда
		НаборЗаписей = РегистрыСведений.абс_ИсторияИзмененияОКОФ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОсновноеСредство.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.ОКОФ = ЭтотОбъект.КодПоОКОФ;
		НоваяЗапись.ОсновноеСредство = Ссылка;
		НаборЗаписей.Записать();
	ИначеЕсли Выборка.Количество() = 0 тогда
		НаборЗаписей = РегистрыСведений.абс_ИсторияИзмененияОКОФ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОсновноеСредство.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.ОКОФ = ЭтотОбъект.КодПоОКОФ; // ЭлементыФормы.КодПоОКОФ.Значение;
		НоваяЗапись.ОсновноеСредство = Ссылка;
		НаборЗаписей.Записать();
    КонецЕсли;
	//\\АБС_Вихорев
	Если ЭтотОбъект.АмортизационнаяГруппа <> Ссылка.АмортизационнаяГруппа Тогда 
		НаборЗаписей = РегистрыСведений.ттк_ИсторияИзмененияАморГруппы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОсновноеСредство.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.АмортизационаяГруппа = ЭтотОбъект.АмортизационнаяГруппа;
		НоваяЗапись.ОсновноеСредство = Ссылка;
		НаборЗаписей.Записать();
	КонецЕсли;
    // Stop КТТК Ермолов Е.Л.  23.12.2015

	//+++ Григорьев Д.В. (История состава ОС)
	Если Модифицированность() Тогда
		Дт = ТекущаяДатаСеанса();
		
		Слепок = абс_СоставОС.Выгрузить().Скопировать(); //Новый ТаблицаЗначений;
		Слепок.Колонки.Добавить("Период");
		Слепок.Колонки.Добавить("Автор");
		Слепок.Колонки.Добавить("ОсновноеСредство");
		Слепок.ЗаполнитьЗначения(Дт, "Период");
		Слепок.ЗаполнитьЗначения(глЗначениеПеременной("глТекущийПользователь"), "Автор");
		Слепок.ЗаполнитьЗначения(Ссылка, "ОсновноеСредство");
		Для Каждого Стр Из Слепок Цикл
			Если Стр.ttk_УникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
				Стр.ttk_УникальныйИдентификатор = Новый УникальныйИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		ИсторияСоставаОС = РегистрыСведений.ttk_ИсторияИзмененияСоставаОС.СоздатьНаборЗаписей();
		ИсторияСоставаОС.Отбор.Период.Установить(Дт);
		ИсторияСоставаОС.Отбор.ОсновноеСредство.Установить(Ссылка);
		ИсторияСоставаОС.Отбор.Автор.Установить(глЗначениеПеременной("глТекущийПользователь"));
		ИсторияСоставаОС.Прочитать();		
		ИсторияСоставаОС.Загрузить(Слепок);		
		ИсторияСоставаОС.Записать();		
	КонецЕсли;
	//--- Григорьев Д.В. (История состава ОС)
	
КонецПроцедуры   

Процедура ПриЗаписи(Отказ)
	
	Если ТипЗнч(абс_ВедетсяРеестрОС) = Тип("Булево") Тогда 
		Если НЕ абс_ВедетсяРеестрОС Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ПланыВидовХарактеристик.абс_СвойстваОС.ВключеноВедениеРееестраОС() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтатусПоРегистру = абс_БизнесПроцессы.ПолучитьСтатусПоОС(Ссылка);
	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	СогласованиеБезБП = глЗначениеПеременной("абс_СогласованиеБезБП");
	
	Если Не СогласованиеБезБП Тогда
		БПСогласование = НайтиБПСогласование();
		
		Если абс_СтатусОС = Перечисления.абс_СтатусыОС.Подготовка Тогда
			
			БизнесПроцессЗапущен = Ложь;
			// Запустим БП если он еще не запущен
			
			
			Если Не ЗначениеЗаполнено(БПСогласование) Тогда
				абс_БизнесПроцессы.ЗапуститьБПСогласованияОС(Ссылка);
			Иначе
				БизнесПроцессЗапущен = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если абс_СтатусОС <> Перечисления.абс_СтатусыОС.Подготовка Тогда
			БизнесПроцессЗапущен = Истина;
		КонецЕсли;	
		
		СписокСтатусовПослеСогласования = Новый Массив;
		СписокСтатусовПослеСогласования.Добавить(Перечисления.абс_СтатусыОС.Корректировка);
		СписокСтатусовПослеСогласования.Добавить(Перечисления.абс_СтатусыОС.Закрыт);
		
		//Закрытие задач
		Если (НЕ абс_СтатусОС = СтатусПоРегистру ИЛИ НЕ ЗначениеЗаполнено(СтатусПоРегистру)) и СписокСтатусовПослеСогласования.Найти(абс_СтатусОС) = Неопределено Тогда
			Если БизнесПроцессЗапущен и БПСогласование <> Неопределено Тогда
				// Попробуем закрыть задачу согласования
				ЗадачаСогласование = ПолучитьЗадачуПоОС();
				
				Если НЕ ЗадачаСогласование = Неопределено Тогда
					Для Каждого Стр Из ЗадачаСогласование Цикл
						ВыполнитьЗадачуСогласование(Стр);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	// АБС Изменение Родин Отключение бизнес-процессов 110314
	                                                               
	// Гущина T#7763513  2017.01.11 +++   переношу в общий модуль   абс_ВнеоборотныеАктивыВызовСервера т.к. менять будут документами

	////АБС ВСТАВКА 45968  25.08.2014 17:03:27  Шамов
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ РАзрешенные
	//                      |	абс_ИсторияИзмененияОбособленныхПодразделенийОС.ОбособленноеПодразделение
	//					  |ИЗ
	//                      |	РегистрСведений.абс_ИсторияИзмененияОбособленныхПодразделенийОС.СрезПоследних(
	//                      |			,
	//                      |			ОсновноеСредство = &ОС) КАК абс_ИсторияИзмененияОбособленныхПодразделенийОС");
	//Запрос.УстановитьПараметр("ОС", Ссылка);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() и Выборка.ОбособленноеПодразделение <> абс_ОбособленноеПодразделение
	//	ИЛИ Выборка.Количество() = 0 тогда
	//	НаборЗаписей = РегистрыСведений.абс_ИсторияИзмененияОбособленныхПодразделенийОС.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.ОсновноеСредство.Установить(Ссылка);
	//	НаборЗаписей.Прочитать();
	//	НоваяЗапись = НаборЗаписей.Добавить();
	//	НоваяЗапись.Период = ТекущаяДата();
	//	НоваяЗапись.ОбособленноеПодразделение = абс_ОбособленноеПодразделение;
	//	НоваяЗапись.ОсновноеСредство = Ссылка;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	////АБС ВСТАВКА 45968 КОНЕЦ 
	// Гущина T#7763513  2017.01.11 ---
	
КонецПроцедуры

//АБС_Родин
Процедура ЗаписатьСтатусВРегистр(СтрокаПричиныИзмененияСтатуса) Экспорт
		
	НаборЗаписей = РегистрыСведений.абс_ИзменениеСтатусовОС.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ОС.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период               = абс_СерверныеФункции.ПолучитьДатуСервера();
	
	Запись.ОС				    = Ссылка;
	Запись.Исполнитель	 		= глЗначениеПеременной("глТекущийПользователь");	
	Запись.СтатусОС 		    = абс_СтатусОС;
	Запись.ВнутреннийНомер      = Запись.Исполнитель.абс_ВнутреннийНомер;
	
	Запись.Комментарий 			= СтрокаПричиныИзмененияСтатуса;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиБПСогласование() Экспорт
	
	Возврат абс_БизнесПроцессы.НайтиБизнесПроцессПоОС(Ссылка);	
	
КонецФункции

Функция НайтиЗадачуПоЗаявке(БизнесПроцесс, ТочкаМаршрута, Исполнитель = Неопределено, ОтборПоИсполнителю = Истина)
	
	ОтборПоИсполнителю = Ложь;
	МассивЗадач = Новый Массив;
	
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	абсЗадачаДоговора.Дата УБЫВ");
							   
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс"		, БизнесПроцесс);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута"		, ТочкаМаршрута);
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	Если ВыборкаЗадач.Следующий() Тогда
		МассивЗадач.Добавить(ВыборкаЗадач.Ссылка);
	КонецЕсли;
	
	Возврат МассивЗадач;
	
КонецФункции

Функция ПолучитьЗадачуПоОС() Экспорт
	
	ПрочиеОС = Ложь;
	МассивГруппОСНеПрочие =  Новый Массив;
	МассивГруппОСНеПрочие.Добавить(Перечисления.ГруппыОС.ТранспортныеСредства);
	МассивГруппОСНеПрочие.Добавить(Перечисления.ГруппыОС.Здания);
	МассивГруппОСНеПрочие.Добавить(Перечисления.ГруппыОС.ЗемельныеУчастки);
	
	Если МассивГруппОСНеПрочие.Найти(ГруппаОС) = Неопределено Тогда
		ПрочиеОС = Истина;
	КонецЕсли;
	
	БП = НайтиБПСогласование();
	
	Если БП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпТочек = Новый Массив;
	ТекСтатус = абс_СтатусОС;
	
	Если ТекСтатус = Перечисления.абс_СтатусыОС.Подготовка Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыОС.СогласованиеДЗО  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыОС.СогласованиеКТТК  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыОС.Согласовано Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыОС.Корректировка  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыОС.Отказ  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыОС.Отмена  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе);
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыОС.Закрыт  Тогда
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСДЗО);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС);
		СпТочек.Добавить(БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе);
	КонецЕсли;	
	
	Возврат НайтиЗадачуПоЗаявке(БП, СпТочек,,Ложь);
	
КонецФункции

Процедура ВыполнитьЗадачуСогласование(ЗадачаСогласование)
	
	Если НЕ ЗадачаСогласование.Выполнена Тогда
		ЗадачаОбъект = ЗадачаСогласование.ПолучитьОбъект();		
		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЕсли;	
	
КонецПроцедуры

//АБС_Родин

//АБС+ 3679    

// В процедуре заполняется таблица значений табличного поля "абс_СоставОС" формы элемента 
// справочника "ОсновныеСредства" составом ОС на указанную дату. Вызывается при открытии формы.
//
// Параметры:
//			ОС - СправочникСсылка.ОсновныеСредства - основное средство, для которого получается состав
//			ДатаДанных - дата, на которую получаются данные
//
Функция ПоказатьСоставОСВФормеЭлемента(ОС, ДатаДанных, ДокументПринятияКУчетуБУ) Экспорт
	
	ДеревоСоставОС = Новый ДеревоЗначений;
	ДеревоСоставОС.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоСоставОС.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоСоставОС.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДеревоСоставОС.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ДеревоСоставОС.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	ДеревоСоставОС.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	УзелДерева1 = ДеревоСоставОС;
	УзелДерева2 = ДеревоСоставОС;
	
	Если Не ЗначениеЗаполнено(ДатаДанных) Тогда
		ДатаДанных = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ДатаДанных, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ОсновноеСредство", ОС);
	Запрос.УстановитьПараметр("ДокументПринятияКУчетуБУ", ДокументПринятияКУчетуБУ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры,
	               |	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход) КАК Количество,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход КАК Стоимость
	               |ПОМЕСТИТЬ втКомплект
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(, , Регистратор, ) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
	               |ГДЕ
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор = &ДокументПринятияКУчетуБУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКомплект.Номенклатура КАК НоменклатураКомлект,
	               |	втКомплект.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатураКомлект,
	               |	втКомплект.СерияНоменклатуры КАК СерияНоменклатураКомлект,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура КАК НоменклатураКомплектующее,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатураКомплектующее,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры КАК СерияНоменклатураКомплектующее,
	               |	СУММА(ЕСТЬNULL(втКомплект.Количество, 0)) КАК КоличествоНоменклатураКомлект,
	               |	СУММА(ЕСТЬNULL(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход, 0)) КАК КоличествоНоменклатураКомплектующее,
	               |	ЕСТЬNULL(втКомплект.Стоимость, 0) КАК СуммаНоменклатураКомлект,
	               |	ЕСТЬNULL(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход, 0) КАК СуммаНоменклатураКомплектующее
	               |ПОМЕСТИТЬ втКомплектКомплектующие
	               |ИЗ
	               |	втКомплект КАК втКомплект
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(, , Регистратор, ) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
	               |		ПО втКомплект.ДокументОприходования = ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втКомплект.ХарактеристикаНоменклатуры,
	               |	втКомплект.Номенклатура,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	               |	втКомплект.СерияНоменклатуры,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ХарактеристикаНоменклатуры,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СерияНоменклатуры,
	               |	ЕСТЬNULL(втКомплект.Стоимость, 0),
	               |	ЕСТЬNULL(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	абс_СоставОСОстатки.Номенклатура КАК Номенклатура,
	               |	абс_СоставОСОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	абс_СоставОСОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	абс_СоставОСОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	абс_СоставОСОстатки.КоличествоОстаток КАК Количество,
	               |	втКомплектКомплектующие.НоменклатураКомплектующее КАК НоменклатураКомплектующее,
	               |	втКомплектКомплектующие.ХарактеристикаНоменклатураКомплектующее КАК ХарактеристикаКомплектующее,
	               |	втКомплектКомплектующие.СерияНоменклатураКомплектующее КАК СерияКомплектующее,
	               |	втКомплектКомплектующие.НоменклатураКомплектующее.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияКомплектующее,
	               |	ЕСТЬNULL(втКомплектКомплектующие.КоличествоНоменклатураКомплектующее, 0) * абс_СоставОСОстатки.КоличествоОстаток / ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКомплектКомплектующие.КоличествоНоменклатураКомлект, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ ЕСТЬNULL(втКомплектКомплектующие.КоличествоНоменклатураКомлект, 0)
	               |	КОНЕЦ КАК КоличествоКомплектующее,
	               |	абс_СоставОСОстатки.СуммаОстаток КАК Сумма,
	               |	ЕСТЬNULL(втКомплектКомплектующие.СуммаНоменклатураКомплектующее, 0) * абс_СоставОСОстатки.СуммаОстаток / ВЫБОР
	               |		КОГДА ЕСТЬNULL(втКомплектКомплектующие.СуммаНоменклатураКомлект, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ ЕСТЬNULL(втКомплектКомплектующие.СуммаНоменклатураКомлект, 0)
	               |	КОНЕЦ КАК СуммаКомплектующее
	               |ИЗ
	               |	РегистрНакопления.абс_СоставОС.Остатки(&МоментВремени, ВнеоборотныйАктив = &ОсновноеСредство) КАК абс_СоставОСОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКомплектКомплектующие КАК втКомплектКомплектующие
	               |		ПО абс_СоставОСОстатки.Номенклатура = втКомплектКомплектующие.НоменклатураКомлект
	               |			И абс_СоставОСОстатки.ХарактеристикаНоменклатуры = втКомплектКомплектующие.ХарактеристикаНоменклатураКомлект
	               |			И абс_СоставОСОстатки.СерияНоменклатуры = втКомплектКомплектующие.СерияНоменклатураКомлект
	               |ИТОГИ
	               |	МАКСИМУМ(Количество),
	               |	МАКСИМУМ(Сумма)
	               |ПО
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	СерияНоменклатуры";
				   
	Таблица = Запрос.Выполнить();
	КолонкиРезультата = Таблица.Колонки;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если Выборка.Уровень() = 2  Тогда
				УзелДерева2 = УзелДерева1.Строки.Добавить();
				УзелДерева2.Номенклатура = Выборка.Номенклатура;
				УзелДерева2.ХарактеристикаНоменклатуры   = Выборка.ХарактеристикаНоменклатуры;
				УзелДерева2.СерияНоменклатуры = Выборка.СерияНоменклатуры;
                УзелДерева2.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				УзелДерева2.Количество = Выборка.Количество;	
				УзелДерева2.Сумма = Выборка.Сумма;
		ИначеЕсли Выборка.Уровень() = 3 И Выборка.НоменклатураКомплектующее <> Null Тогда
				НовСтр = УзелДерева2.Строки.Добавить();
				НовСтр.Номенклатура = Выборка.НоменклатураКомплектующее;
				НовСтр.ХарактеристикаНоменклатуры   = Выборка.ХарактеристикаКомплектующее;
				НовСтр.СерияНоменклатуры = Выборка.СерияКомплектующее;
                НовСтр.ЕдиницаИзмерения = Выборка.ЕдиницаИзмеренияКомплектующее;
				НовСтр.Количество = Выборка.КоличествоКомплектующее;	
				НовСтр.Сумма = Выборка.СуммаКомплектующее;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ДеревоСоставОС;
	         
КонецФункции

//АБС- 3679

//АБС ВСТАВКА Навценя 13.02.2014

Процедура ЗаполнитьПрефикс()
	
	Префикс_МСК = "МСК"; 
	ОрганизацияПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияПользователя) Тогда 
		Если глЗначениеПеременной("абс_ИспользоватьПараметрОтбораПоОрганизации") 
			И ТипЗнч(ПараметрыСеанса.абс_ПараметрОтбораПоОрганизации) = Тип("ФиксированныйМассив") Тогда 
			Если ПараметрыСеанса.абс_ПараметрОтбораПоОрганизации.Количество() > 0 Тогда 
				ОрганизацияПользователя = ПараметрыСеанса.абс_ПараметрОтбораПоОрганизации[0];	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОрганизацияПользователя) Тогда
		Если ОрганизацияПользователя.абс_СтатусОрганизации = Перечисления.абс_СтатусОрганизации.ДЗО Тогда
			абс_Префикс = ОрганизацияПользователя.Префикс;
		Иначе	
			абс_Префикс = Префикс_МСК;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОбособленногоПодразделения(Отказ)
	
	Если абс_СтатусОС = Перечисления.абс_СтатусыОС.Корректировка Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(абс_ОбособленноеПодразделение) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Поле «Обособленное подразделение» обязательно для заполнения!", Отказ);	
	КонецЕсли;

КонецПроцедуры

//АБС ВСТАВКА КОНЕЦ


