////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ПолучитьКадровыеДанныеФизлица Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует запрос по документу
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечатиТрудовогоДоговора() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("СправочникСсылка", Ссылка);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ДатаДокумента",	 ДатаДоговора);
	
	// Выберем (если есть доступ) ответственное физлицо
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Физлицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК НаименованиеФизлица,
	|	ФизическиеЛица.Комментарий
	|ПОМЕСТИТЬ ВТОтветственноеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаДокумента,
	|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветственноеЛицоОрганизации.Должность КАК ДолжностьРуководителя,
	|	ТрудовойДоговор.НомерДоговора КАК НомерДок,
	|	ТрудовойДоговор.ДатаДоговора КАК ДатаДок,
	|	ВЫРАЗИТЬ(ТрудовойДоговор.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК ПолноеНазваниеОрганизации,
	|	ЕСТЬNULL(ФИООтветственныхЛиц.Фамилия + "" "" + ФИООтветственныхЛиц.Имя + "" "" + ФИООтветственныхЛиц.Отчество, ОтветственноеЛицоОрганизации.НаименованиеФизлица) КАК ФИОРуководителя,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ТрудовойДоговор.Физлицо.Наименование) КАК ФИОРаботника,
	|	ТрудовойДоговор.ДатаОкончания КАК ДатаУвольнения,
	|	ТрудовойДоговор.ДатаНачала КАК ДатаПриема,
	|	ТрудовойДоговор.Должность.Наименование КАК Должность,
	|	ТрудовойДоговор.ЗанимаемыхСтавок,
	|	ТрудовойДоговор.ИспытательныйСрок,
	|	ТрудовойДоговор.ПодразделениеОрганизации.Наименование КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТрудовойДоговор.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			ТОГДА ""основной работе""
	|		ИНАЧЕ ""совместительству""
	|	КОНЕЦ КАК ВидЗанятости,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
	|	АдресРегистрации.Представление КАК АдресРегистрации,
	|	ТелефонДомашний.Представление КАК Телефоны,
	|	КонтактнаяИнформация.Представление КАК АдресОрганизации,
	|	ТелефонОрганизации.Представление КАК ТелефоныОрганизации,
	|	ТрудовойДоговор.Организация.Наименование КАК НазваниеОрганизации,
	|	ТрудовойДоговор.Организация.ИНН + ""/"" + ТрудовойДоговор.Организация.КПП КАК ИНН,
	|	ТрудовойДоговор.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|	ТрудовойДоговор.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	ТрудовойДоговор.ВидРасчета,
	|	ТрудовойДоговор.ТарифнаяСтавка,
	|	ТрудовойДоговор.ВалютаТарифнойСтавки.Наименование КАК ВалютаТарифнойСтавки,
	|	ТрудовойДоговор.ПерсональныеНадбавки.(
	|		Ссылка,
	|		НомерСтроки,
	|		Надбавка КАК Надбавка,
	|		Показатель1
	|	)
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК ТрудовойДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственноеЛицо КАК ОтветственноеЛицоОрганизации
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаДокумента,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						Ответственные.Физлицо
	|					ИЗ
	|						ВТОтветственноеЛицо КАК Ответственные)) КАК ФИООтветственныхЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо = &Физлицо) КАК ФИОФизЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо = &Физлицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресРегистрации
	|		ПО ТрудовойДоговор.Физлицо = АдресРегистрации.Объект
	|			И (АдресРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонДомашний
	|		ПО ТрудовойДоговор.Физлицо = ТелефонДомашний.Объект
	|			И (ТелефонДомашний.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТрудовойДоговор.Организация = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонОрганизации
	|		ПО ТрудовойДоговор.Организация = ТелефонОрганизации.Объект
	|			И (ТелефонОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|ГДЕ
	|	ТрудовойДоговор.Ссылка = &СправочникСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечати()

// Функция возвращаект сведения о надбавках позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
Функция СведенияОНадбавкахПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.ВидНадбавки КАК Надбавка,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель6,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта6
	|ИЗ
	|   РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ПодразделениеОрганизации = &Подразделение
	|				И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОНадбавкахПозицииШтатногоРасписания()

// Функция формирует уникальный номер трудового договора
// уникальность в пределах года
// 
Функция ПолучитьНомерТрудовогоДоговора() Экспорт
	
	Если Организация.Пустая() Тогда
		Возврат НомерДоговора;
	КонецЕсли;
	
	ВидыДоговоров	= Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);

	СотрудникиОрганизацийПереопределяемый.ДополнитьВидыДоговоровДляПолученияНомера(ВидыДоговоров);

	Если ВидыДоговоров.Найти(ВидДоговора) = Неопределено Тогда
		Возврат НомерДоговора;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ДатаДоговораДляЗапроса = ?(ЗначениеЗаполнено(ДатаДоговора), ДатаДоговора, ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
	
	Запрос.УстановитьПараметр("парамОрганизация",Организация);
	Запрос.УстановитьПараметр("парамНачалоГода" ,НачалоГода(НачалоДня(ДатаДоговораДляЗапроса)));
	Запрос.УстановитьПараметр("парамКонецГода"  ,КонецГода(КонецДня(ДатаДоговораДляЗапроса)));
	Запрос.УстановитьПараметр("парамВидДоговора" ,ВидДоговора);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизаций.НомерДоговора) КАК НомерДок
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &парамОрганизация
	|	И СотрудникиОрганизаций.ВидДоговора = &парамВидДоговора
	|	И СотрудникиОрганизаций.ДатаДоговора МЕЖДУ &парамНачалоГода И &парамКонецГода";
	
	Запрос.Текст = ТекстЗапроса;
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Организация.Префикс + "0000001";
	Иначе
		
		СтрокаРезультата = Запрос.Выполнить().Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерДок) Тогда
			Возврат Организация.Префикс + "0000001";
		Иначе
			Возврат ПроцедурыУправленияПерсоналом.ПолучитьСледующийНомер(СокрП(СтрокаРезультата.НомерДок));
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецФункции // ПолучитьНомерТрудовогоДоговора()

Процедура ПроверитьНомерТрудовогоДоговора(НачальнаяДатаДокумента) Экспорт
	
	//определяем разность старой и новой даты договора
	РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДатаДоговора);
	
	Если РазностьДат <> 0 Тогда
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНомерТрудовогоДоговора() 

// Функция формирует очередной табельный номер сотрудника
// уникальность в пределах организации и вида договора
// Возвращаемое значение:
//   Строка   – табельный номер
//
Функция ПолучитьОчереднойТабельныйНомер() Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		Возврат "";
	КонецЕсли;
	
	Префикс = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация",Организация);
	парамВидДоговора = Новый Массив;
	
	СотрудникиОрганизацийПереопределяемый.ЗаполнитьПараметрыВидовДоговоров(парамВидДоговора, ВидДоговора, Префикс);
	
	Запрос.УстановитьПараметр("парамВидДоговора",парамВидДоговора);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизаций.Код) КАК Код
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &парамОрганизация
	|	И СотрудникиОрганизаций.ВидДоговора В(&парамВидДоговора)
	|	И СотрудникиОрганизаций.Ссылка <> &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
	Иначе
		СтрокаРезультата = РезультатаЗапроса.Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Код) Тогда
			Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
		Иначе
			Возврат ПроцедурыУправленияПерсоналом.ПолучитьСледующийНомер(СокрП(СтрокаРезультата.Код));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьОчереднойТабельныйНомер()

#Если Клиент Тогда

// АБС ВСТАВКА 30816
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ИмяМакета = "РасчетныйЛисток" Тогда
		
		РазрешитьПечатьРасчетногоЛистка = Константы.абс_РазрешитьПечатьРасчетногоЛисткаСотрудника.Получить();
		Если Не РазрешитьПечатьРасчетногоЛистка Тогда
			Сообщить("Печать расчетного листка отключена. Обратитесь к администратору системы.");
			Возврат Неопределено;
		КонецЕсли; 		
				
		// Проверим соответствие открытого сотрудника пользователю ЕИСУП
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		Если ТекПользователь.ФизЛицо <> Физлицо Тогда
			Сообщить("Пользователю " + ТекПользователь + " запрещено печатать расчетный листок сотрудника " + Наименование);
			Возврат Неопределено;
		КонецЕсли;
		
		ФормаВыбораПериода = ПолучитьФорму("абс_ФормаВыбораПериодаДляПечатиРасчетногоЛистка");
		РезультатОткрытияФормы = ФормаВыбораПериода.ОткрытьМодально();
		
		Если РезультатОткрытияФормы = Неопределено Тогда
			Сообщить("Не выбран период отчета! Печать невозможна");
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
			НачалоПериода = РезультатОткрытияФормы.ДатаНачала;
			КонецПериода = РезультатОткрытияФормы.ДатаКонца;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НачалоПериода) Или Не ЗначениеЗаполнено(КонецПериода) Или НачалоПериода>КонецПериода Тогда
			Сообщить("Неверно указан период отчета! Печать невозможна");
			Возврат Неопределено;
		КонецЕсли;		
		
		//АБС+ Тупиков 34264
		МенеджерЗаписи = РегистрыСведений.абс_ИсторияПечатиРасчетногоЛистка.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = абс_СерверныеФункции.ПолучитьДатуСервера();
		МенеджерЗаписи.Сотрудник = Ссылка;
		МенеджерЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		МенеджерЗаписи.ИмяКомпьютера = ИмяКомпьютера();
		МенеджерЗаписи.НачалоПериодаОтбора = НачалоПериода;
		МенеджерЗаписи.КонецПериодаОтбора = КонецПериода;
		МенеджерЗаписи.Записать();
		//АБС- 34264
		
		//АБС ВСТАВКА №40078 НАЧАЛО «25 апреля 2014 г.», Пополитов
		Если не абс_СерверныеФункции.абс_ДаннаяБазаНеКопия() Тогда
			Сообщить("Произошла ошибка при печати отчета, в копии web-сервисы не работают.");
			//Возврат Неопределено;	
		КонецЕсли;	
		//\\АБС ВСТАВКА №40078 КОНЕЦ
		
		Результат = абс_WebServiceСервер.ИнициализацияWebServiceGetPaySlip(ФизЛицо.абс_КодИСУЗК, ФизЛицо.Наименование, НачалоПериода, КонецПериода);
		
		Если ЗначениеЗаполнено(Результат.Error) Или Результат.PaySlip = Неопределено Тогда
			Сообщить("Произошла ошибка при печати отчета: "+ Результат.Error);
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток_Печать";
		
		УникальныйИдентификатор	= Новый УникальныйИдентификатор();
		ИмяФайлаДанных			= КаталогВременныхФайлов() + УникальныйИдентификатор + ".mxl";
		Результат.PaySlip.Записать(ИмяФайлаДанных);	
		
		ТабДокумент.Прочитать(ИмяФайлаДанных);	
		
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ?(ИмяМакета = "ТрудовойДоговор","Трудовой договор","Трудовой договор при дистанционной работе"));
		
	КонецЕсли;	
	
	Возврат СотрудникиОрганизацийПереопределяемый.Печать(ИмяМакета, КоличествоЭкземпляров, НаПринтер, ЭтотОбъект);
	
КонецФункции
// АБС ВСТАВКА 30816 КОНЕЦ

#КонецЕсли

// Возвращает доступные варианты печати 
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	// АБС ИЗМЕНЕНИЕ 30816
	//СтруктураПечатныхФорм = СотрудникиОрганизацийПереопределяемый.ПолучитьСтруктуруПечатныхФорм(ВидДоговора);
	СтруктураПечатныхФорм = Новый Структура;
	РазрешитьПечатьРасчетногоЛистка = Константы.абс_РазрешитьПечатьРасчетногоЛисткаСотрудника.Получить();
	Если РазрешитьПечатьРасчетногоЛистка Тогда
		//СтруктураПечатныхФорм.Вставить("РасчетныйЛисток", "Расчетный листок");
	КонецЕсли;
	// АБС ИЗМЕНЕНИЕ 30816 КОНЕЦ
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "Копирование" объекта
Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ЭтоГруппа Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Наименование = "";
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			НомерДоговора = ПолучитьНомерТрудовогоДоговора();	
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - обработчик события "Заполнение" объекта
Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("СправочникСсылка.ФизическиеЛица") 
		И НЕ Основание.ЭтоГруппа Тогда
		Физлицо = Основание;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" объекта
//
//Процедура ПередЗаписью(Отказ)
//	
Процедура ПередЗаписью(Отказ)
	
	Если ПолучитьКадровыеДанныеФизлица Тогда
		СотрудникиОрганизацийПереопределяемый.МодульОбъектаПередЗаписьюДополнительно(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоГруппа И Физлицо.Пустая() Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Для сотрудника не задано физическое лицо!", Отказ);
	КонецЕсли;
	
	Если Не ЭтоГруппа И ОбособленноеПодразделение.Пустая() Тогда
		ОбособленноеПодразделение = Организация
	КонецЕсли;
	
	Если Не ЭтоГруппа И НЕ ЗначениеЗаполнено(ДатаПриемаНаРаботу) и ТекущееОбособленноеПодразделение <> ОбособленноеПодразделение Тогда
		ТекущееОбособленноеПодразделение = ОбособленноеПодразделение;
	КонецЕсли;
	
	// АБС ВСТАВКА
	Актуальность = Не (абс_СтатусСотрудника = Перечисления.абс_СтатусыСотрудников.Архив);
	// АБС ВСТАВКА КОНЕЦ
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	//АБС
	Если ОбменДанными.Загрузка ИЛИ   ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПодключения =  Новый Структура("Provider,DataSource,UserID,Password");
	СтруктураПодключения.Вставить("Provider","kttk-1c-db");	
	СтруктураПодключения.Вставить("DataSource","TransPlatformIntegration");	
	СтруктураПодключения.Вставить("UserID","abs_dbo");	
	СтруктураПодключения.Вставить("Password","yHGHivs");
	Сотрудник = ЭтотОбъект.Ссылка;
	TABNOMER = Сотрудник.Код;
	FIO =     Сотрудник.наименование;
	KODPODR = ?(ЗначениеЗаполнено(Сотрудник.ПодразделениеОрганизации),Сотрудник.ПодразделениеОрганизации.Код,"");
	NAIMEPODR =?(ЗначениеЗаполнено(Сотрудник.ПодразделениеОрганизации),Сотрудник.ПодразделениеОрганизации.Наименование,"");
	KODORG = ?(ЗначениеЗаполнено(Сотрудник.Организация),Сотрудник.Организация.Код,"");
	NAIMEORG =?(ЗначениеЗаполнено(Сотрудник.Организация),Сотрудник.Организация.Наименование,""); 
	KODTSFU =  ?(ЗначениеЗаполнено(Сотрудник.абс_ЦФУ),Сотрудник.абс_ЦФУ.Код,"");
	NAMETSFU =  ?(ЗначениеЗаполнено(Сотрудник.абс_ЦФУ),Сотрудник.абс_ЦФУ.Наименование,"");
	KODTSFO =  ?(ЗначениеЗаполнено(Сотрудник.абс_ЦФО),Сотрудник.абс_ЦФО.Код,"");
	NAMETSFO = ?(ЗначениеЗаполнено(Сотрудник.абс_ЦФО),Сотрудник.абс_ЦФО.Наименование,"");
	
	Попытка	
		ТекстЗапроса = 
		"SELECT * FROM [TransPlatformIntegration].[dbo].[SOTRUDNIKI] Where TABNOMER = "+TABNOMER;
		Таб= абс_СерверныеФункции.ЗапросВТаблицуSQL(ТекстЗапроса,СтруктураПодключения);
		Если Таб.Количество()>0 Тогда
			ТекстЗапроса = 
			"UPDATE [TransPlatformIntegration].[dbo].[SOTRUDNIKI]
			|SET  [TransPlatformIntegration].[dbo].[SOTRUDNIKI].[FIO] = '"+ FIO+"',
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[KODPODR]  = '"+KODPODR+"', 
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[NAIMEPODR] ='"+NAIMEPODR+"',
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[KODORG] ='"+KODORG+"',
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[NAIMEORG] ='"+NAIMEORG+"',
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[KODTSFU] ='"+KODTSFU+"',
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[NAMETSFU] ='"+NAMETSFU+"',
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[KODTSFO] ='"+KODTSFO+"',
			|[TransPlatformIntegration].[dbo].[SOTRUDNIKI].[NAMETSFO] ='"+NAMETSFO+"'
			| WHERE  TABNOMER = "+TABNOMER;
			
		Иначе
			ТекстЗапроса =   "INSERT INTO  [TransPlatformIntegration].[dbo].[SOTRUDNIKI]  (FIO, TABNOMER,
			|KODPODR,NAIMEPODR,KODORG,NAIMEORG,KODTSFU,NAMETSFU,KODTSFO,NAMETSFO)
			|values('"+FIO+"', '"+TABNOMER+"',
			|'"+KODPODR+"', '"+NAIMEPODR+"', '"+KODORG+"', '"+NAIMEORG+"', '"+KODTSFU+"', '"+NAMETSFU+"', '"+KODTSFO+"', '"+NAMETSFO+"')"; 
		КонецЕсли;
		абс_СерверныеФункции.ОбновитьДанныеВSQL(ТекстЗапроса,СтруктураПодключения);
	Исключение
	КонецПопытки;
	//АБС	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ПолучитьКадровыеДанныеФизлица = Истина;
