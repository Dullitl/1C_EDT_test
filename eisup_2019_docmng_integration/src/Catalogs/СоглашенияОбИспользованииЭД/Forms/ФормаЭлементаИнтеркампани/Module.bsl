//  Электронный документооборот (для Интеркаипани) нужен для фиксации юридической значимости
// совершаемых хозяйственных операций (передача/возврат товара между организациями).
// Исходя из этого, любой ЭД, сформированный в рамках Интеркампани, должен иметь ЭЦП.
// Следовательно, в соглашении об использовании ЭД, достаточно указать вид ЭД,
// что автоматически будет подразумевать необходимость подписывать его и получать
// подтверждение о подписании его другой стороной.

&НаСервере
Процедура УстановитьИдентификатор(ИсточникИдентификатора, Данные)
	
	Если ИсточникИдентификатора = "Организация" Тогда
		СтрокаЗаполнения = Строка(Данные.ИНН)+"_"+Строка(Данные.КПП);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		Объект.ИдентификаторОрганизации = СтрокаЗаполнения;
	Иначе
		СтрокаЗаполнения = Строка(Данные.ИНН)+"_"+Строка(Данные.КПП);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		Объект.ИдентификаторКонтрагента = СтрокаЗаполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьФорматыФайловДоступнымиЗначениями();
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	
	ОбъектЭлемента = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // новый
		Если Параметры.Свойство("Типовое") И Параметры.Типовое Тогда
			Объект.ЭтоТиповое = Истина;
		КонецЕсли;
		Объект.ЭтоИнтеркампани	= Истина;
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда // не копирование
			Объект.Контрагент = ЭлектронныеДокументыПереопределяемый.ПолучитьПустуюСсылку("Организации");
		КонецЕсли;
	Иначе
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		Попытка
			ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатКриптографии.Субъект);
				ФормаСертификатКонтрагентаДляШифрования = ПредставлениеСертификата;
			КонецЕсли;
			ОпределитьДоступностьСертификатовПодписей();
			ПеречитатьДанныеПоСертификатам(ДокументОбъект);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'открытие формы соглашения'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ГруппаШапкаПраво.Видимость		= НЕ Объект.ЭтоТиповое;
	Элементы.СертификатыЭЦП.Видимость 		= НЕ Объект.ЭтоТиповое И Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
	Элементы.ФормаЭД.Видимость 				= НЕ Объект.ЭтоТиповое;
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.Видимость = Ложь;
	Если Объект.ЭтоТиповое Тогда
		ТекстЗаголовка = НСтр("ru='Типовое соглашение об использовании электронных документов'");
		Для Каждого Элемент Из Элементы.ГруппаШапкаПраво.ПодчиненныеЭлементы Цикл
			Элемент.РастягиватьПоГоризонтали = Истина;
		КонецЦикла;
	Иначе
		ТекстЗаголовка = НСтр("ru='Соглашение между организациями об использовании электронных документов'");
	КонецЕсли;
	ЭтаФорма.Заголовок = ТекстЗаголовка;
	ТекущийСпособОбменаЭД = Объект.СпособОбменаЭД;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорматыФайловДоступнымиЗначениями()
	
	Для Каждого ЗначениеПеречисления Из Перечисления.ФорматыФайловОбменаЭД Цикл
		МассивСтрок = Объект.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("ФорматФайла", ЗначениеПеречисления));
		Если МассивСтрок.Количество() = 0 Тогда 
			НоваяСтрока = Объект.ФорматыФайловОбмена.Добавить();
			НоваяСтрока.ФорматФайла  = ЗначениеПеречисления;
			// значение по умолчанию для новых
			Если (ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.XML 
			  ИЛИ ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.HTML) И Объект.Ссылка.Пустая() Тогда 
				НоваяСтрока.Использовать  = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	АктуальныеВидыЭД = ЭлектронныеДокументыПереопределяемый.АктуальныеВидыЭД();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		Если ЗначениеПеречисления = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
		 ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			МассивСтрок = Объект.ВходящиеДокументы.НайтиСтроки(Новый Структура("ВходящийДокумент", ЗначениеПеречисления));
			Если МассивСтрок.Количество() = 0 Тогда 
				НоваяСтрока = Объект.ВходящиеДокументы.Добавить();
				НоваяСтрока.ВходящийДокумент = ЗначениеПеречисления;
			КонецЕсли;
			МассивСтрок = Объект.ИсходящиеДокументы.НайтиСтроки(Новый Структура("ИсходящийДокумент", ЗначениеПеречисления));
			Если МассивСтрок.Количество() = 0 Тогда 
				НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьСертификатовПодписей()
	
	Элементы.СертификатыПодписейКонтрагента.Доступность = Объект.ПроверятьСертификатыПодписей;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// процедуры и функции проверки включения функциональных опций при настройке обмена

&НаКлиенте
Процедура ОрганизацияОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда
		Если ВыбранноеЗначение <> Объект.Организация Тогда
			ТекстВопроса = НСтр("ru = 'Была изменена организация. Изменить идентификатор обмена организации?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				УстановитьИдентификатор("Организация", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;		
	Иначе
		УстановитьИдентификатор("Организация", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьЗначенияЭтаповОбменаПоНастройкам(НастройкиИсходящие = Ложь, НастройкиВходящие = Ложь)
	
	// для исходящих
	Если НастройкиИсходящие <> Ложь Тогда
		ТаблицаЭтаповИсходящие.Очистить();
		Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
			Если НастройкиИсходящие.ИспользоватьОбмен Тогда		
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Сформирован);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Подписан);	
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Отправлен);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ПолученоИзвещение);
			КонецЕсли;
		Иначе
			Если НастройкиИсходящие.ИспользоватьОбмен Тогда
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Сформирован);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// для входящих
	Если НастройкиВходящие <> Ложь Тогда
		ТаблицаЭтаповВходящие.Очистить();
		Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
			Если НастройкиВходящие.ИспользоватьОбмен Тогда
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Получен);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Подписан);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
			КонецЕсли;
		Иначе
			Если НастройкиВходящие.ИспользоватьОбмен Тогда
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Сформирован);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтруктуруПараметров(ДанныеФормыКоллекция)
	
	Если ДанныеФормыКоллекция = Неопределено Тогда
		СтруктураВозврата = Неопределено; 
	Иначе
		СтруктураВозврата = Новый Структура("ИспользоватьОбмен, ИспользоватьЭЦП, ОжидатьКвитанциюОДоставке", 
								ДанныеФормыКоллекция.Формировать, ДанныеФормыКоллекция.ИспользоватьЭЦП, ДанныеФормыКоллекция.ОжидатьКвитанциюОДоставке);
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров);
	Элемент.ТекущиеДанные.ИспользоватьЭЦП = Элемент.ТекущиеДанные.Формировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыПриИзменении(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(Ложь, СтруктураПараметров);
	Элемент.ТекущиеДанные.ИспользоватьЭЦП = Элемент.ТекущиеДанные.Формировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(Ложь, СтруктураПараметров );
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыИспользоватьЭЦППриИзменении(Элемент)
	
	Если НЕ Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП  Тогда
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыОжидатьКвитанциюОДоставкеПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке Тогда
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ВопросОЗаписиДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ДобавитьДанныеПоТабЧасти(Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные), Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВопросОЗаписиДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Фильтр = "Файлы сертификатов(*.cer)|*.cer";
	Диалог.Заголовок = НСтр("ru = 'Выберите файл сертификата для проверки подписи организации получателя'");
	
	МассивПомещенных = Новый Массив;
	Если ПоместитьФайлы( ,МассивПомещенных, Диалог) Тогда
		ИндексСтроки = Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные);
		РезультатДобавления = ДобавитьСертификатыТабличнойЧастиСервер(МассивПомещенных, ИндексСтроки);
		Если РезультатДобавления <> Неопределено Тогда
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = РезультатДобавления.Представление;
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.Отпечаток = РезультатДобавления.Отпечаток;
		Иначе
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = "";
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.Отпечаток = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСертификатыТабличнойЧастиСервер(МассивФайлов, ИндексСтроки)
	
	АдресВременногоХранилища = МассивФайлов[0].Хранение;
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Возврат ДобавитьДанныеПоТабЧасти(ИндексСтроки,  ДанныеФайла);
	
КонецФункции

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ДобавитьДанныеПоТабЧасти(Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные), Неопределено);
	
КонецПроцедуры

&НаСервере 
Функция ДобавитьДанныеПоТабЧасти(ИндексСтроки, ДвоичныеДанные)
	
	Если ИндексСтроки < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДвоичныеДанные <> Неопределено Тогда
		СертификатПодписи = Новый СертификатКриптографии(ДвоичныеДанные);	
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатПодписи.Субъект);
		Отпечаток = Base64Строка(СертификатПодписи.Отпечаток);
		
		ХранилищеЗначения  = Новый ХранилищеЗначения(ДвоичныеДанные);
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.СертификатыПодписейКонтрагента[ИндексСтроки].Сертификат = ХранилищеЗначения;
		Документ.СертификатыПодписейКонтрагента[ИндексСтроки].Отпечаток  = Отпечаток;
		Документ.Записать();
		
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ЭтаФорма.Прочитать();	
		ПеречитатьДанныеПоСертификатам(Документ);
		
		Возврат Новый Структура("Представление, Отпечаток", ПредставлениеСертификата, Отпечаток);
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

&НаСервере 
Функция ПеречитатьДанныеПоСертификатам(ДокументОбъект)
	
	Для Каждого ЭлементСтрока Из ДокументОбъект.СертификатыПодписейКонтрагента Цикл
		ДвоичныеДанныеСертификата = ЭлементСтрока.Сертификат.Получить();
		Если  ДвоичныеДанныеСертификата <> Неопределено Тогда
			Попытка
				СертификатПодписи = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатПодписи.Субъект);
				Объект.СертификатыПодписейКонтрагента[ДокументОбъект.СертификатыПодписейКонтрагента.Индекс(ЭлементСтрока)].ПредставлениеСертификатаКонтрагента = ПредставлениеСертификата;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПеречитатьДанныеПоСертификатам(ДокументОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСертификатыПодписейПриИзменении(Элемент)
	
	ОпределитьДоступностьСертификатовПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыИспользоватьОбменПриИзменении(Элемент)
	
	ЗначениеЭлемента = Элемент.Родитель.ТекущиеДанные.Формировать;
	Если НЕ ЗначениеЭлемента Тогда
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП = ЗначениеЭлемента;
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = ЗначениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыИспользоватьОбменПриИзменении(Элемент)
	
	ЗначениеЭлемента = Элемент.Родитель.ТекущиеДанные.Формировать;
	Если НЕ ЗначениеЭлемента Тогда
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП = ЗначениеЭлемента;
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = ЗначениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокумента()
	
	Документ = РеквизитФормыВЗначение("Объект");
	ПеречитатьДанныеПоСертификатам(Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПослеУдаления(Элемент)
	
	ОбновитьДанныеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	МассивСтрок = Объект.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("Использовать, ФорматФайла", 
										Истина, ПредопределенноеЗначение("Перечисление.ФорматыФайловОбменаЭД.XML")));
	Если МассивСтрок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Формат исходящего документа ""CommerceML(*.xml)"" обязателен к использованию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ФорматыФайловОбменаФорматФайла",,Отказ);
	КонецЕсли;
	
	Если НЕ Объект.ЭтоТиповое Тогда
		Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
			ТекстОшибкиАктуальности = ДанныеСоглашенияАктуальны();
			Если НЕ ПустаяСтрока(ТекстОшибкиАктуальности) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиАктуальности, ,,,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСоглашенияАктуальны()
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
	ЗапросПоСоглашениям.УстановитьПараметр("ТекущееСоглашение", Объект.Ссылка);
	ЗапросПоСоглашениям.УстановитьПараметр("Организация", 		Объект.Организация);
	ЗапросПоСоглашениям.УстановитьПараметр("Контрагент", 		Объект.Контрагент);
	ЗапросПоСоглашениям.УстановитьПараметр("Партнер", 			Объект.Партнер);
	ЗапросПоСоглашениям.Текст = "ВЫБРАТЬ
	                            |	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ТипДокумента,
	                            |	ИСТИНА КАК Входящий,
	                            |	СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Соглашение
	                            |ИЗ
	                            |	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	                            |ГДЕ
	                            |	СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ЭтоТиповое = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать = ИСТИНА
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка <> &ТекущееСоглашение
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Партнер = &Партнер
	                            |
	                            |ОБЪЕДИНИТЬ ВСЕ
	                            |
	                            |ВЫБРАТЬ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	                            |	ЛОЖЬ,
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	                            |ИЗ
	                            |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                            |ГДЕ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать = ИСТИНА
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ЭтоТиповое = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка <> &ТекущееСоглашение
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Партнер = &Партнер";
	Результат = ЗапросПоСоглашениям.Выполнить().Выгрузить();
	РезультатПроверки = УникальныДокументы(Объект.ИсходящиеДокументы, Результат) + УникальныДокументы(Объект.ВходящиеДокументы, Результат, Истина);
	
	Возврат РезультатПроверки;
КонецФункции

&НаСервере
Функция УникальныДокументы(ТабличнаяЧастьДокументов, РезультатПроверки, ПроверятьВходящиеДокументы = Ложь)
	
	ОтборСуществующихДокументов = Новый Структура("Входящий", ПроверятьВходящиеДокументы);
	ВидыДокументовДругихСоглашений = РезультатПроверки.НайтиСтроки(ОтборСуществующихДокументов);
	Если ВидыДокументовДругихСоглашений.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого ТекущийДокументСоглашения Из ТабличнаяЧастьДокументов Цикл
		Если ТекущийДокументСоглашения.Формировать Тогда
			Для Каждого ДокументВДругихСоглашениях Из ВидыДокументовДругихСоглашений Цикл
				Если ТекущийДокументСоглашения[?(ПроверятьВходящиеДокументы, "ВходящийДокумент", "ИсходящийДокумент")] = ДокументВДругихСоглашениях.ТипДокумента Тогда
					ТекстПредупреждения = НСтр("ru = 'По виду электронных документов %1 %2 
					|уже существует действующее соглашение между участниками %3 - %4:
					|%5.
					|'");
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДокументВДругихСоглашениях.ТипДокумента, 
						?(ПроверятьВходящиеДокументы, "Входящий", "Исходящий"), Объект.Организация, Объект.Контрагент, ДокументВДругихСоглашениях.Соглашение);
					
					Возврат ТекстПредупреждения;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	КонецЦикла;
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция ВопросОЗаписиДокумента()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоТиповое Тогда
		ТекстВопроса = НСтр("ru = 'Внешние сертификаты можно выбирать только в записанном соглашении.
							|Записать соглашение?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Возврат Ответ = КодВозвратаДиалога.Да И ПроверкаЗаполнения();
	
КонецФункции

&НаСервере
Функция ПроверкаЗаполнения()
	
	Возврат РеквизитФормыВЗначение("Объект").ПроверитьЗаполнение();
	
КонецФункции

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторКонтрагента) Тогда
		Если ВыбранноеЗначение <> Объект.Контрагент Тогда
			ТекстВопроса = НСтр("ru = 'Была изменена организация получатель. Изменить идентификатор получателя?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				УстановитьИдентификатор("Контрагент", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;		
	Иначе
		УстановитьИдентификатор("Контрагент", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОрганизаций(ИсключаемыйЭлемент)
	
	Масс = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка <> &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ИсключаемыйЭлемент);

	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Масс = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	Возврат Масс;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНаименование()
	
	Организация  = Объект.Организация;
	Контрагент = Объект.Контрагент;
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) 
	   И ЗначениеЗаполнено(Организация) 
	   И ЗначениеЗаполнено(Контрагент) Тогда
		Объект.Наименование = "" + Организация + " -> " + Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНадписьНаправлениеДокументов()
	
	НадписьНаправлениеДокументов = НСтр("ru='От кого: '") + Объект.Организация + НСтр("ru=', кому: '") + Объект.Контрагент;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОрганизаций(СписокВыбора, ИсключаемыйЭлемент)
	
	Масс = ПолучитьСписокОрганизаций(ИсключаемыйЭлемент);
	Если Масс.Количество() > 0 Тогда
		СписокВыбора.ЗагрузитьЗначения(Масс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораОрганизаций(Элемент.СписокВыбора, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораОрганизаций(Элемент.СписокВыбора, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительПриИзменении(Элемент)

	ЗаполнитьНаименование();
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ЗаполнитьНаименование();
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры
