
&НаСервере
Процедура УстановитьИдентификатор(ИсточникИдентификатора, Данные)
	
	Если ИсточникИдентификатора = "Организация" Тогда
		СтрокаЗаполнения = Строка(Данные.ИНН)+"_"+Строка(Данные.КПП);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		Объект.ИдентификаторОрганизации = СтрокаЗаполнения;
	Иначе
		СтрокаЗаполнения = Строка(Данные.ИНН)+"_"+Строка(Данные.КПП);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		Объект.ИдентификаторКонтрагента = СтрокаЗаполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//  Если объект - является соглашением-Интеркампани, то ничего
	// не выполняем на сервере и при переходе процедуру при открытии, откроем форму Интеркампани.
	Если Объект.ЭтоИнтеркампани Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЭлемента = РеквизитФормыВЗначение("Объект");
	
	ЗаполнитьФорматыФайловДоступнымиЗначениями();
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // новый
		Если Параметры.Свойство("Типовое") И Параметры.Типовое Тогда
			Объект.ЭтоТиповое = Истина;
		КонецЕсли;
		Объект.ЭтоИнтеркампани	= Ложь;
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда // не копирование
			Объект.Контрагент = ЭлектронныеДокументыПереопределяемый.ПолучитьПустуюСсылку("Контрагенты");
		КонецЕсли;
	Иначе
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		Попытка
			ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатКриптографии.Субъект);
				ФормаСертификатКонтрагентаДляШифрования = ПредставлениеСертификата;
			КонецЕсли;
			ОпределитьДоступностьСертификатовПодписей();
			ПеречитатьДанныеПоСертификатам(ДокументОбъект);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'открытие формы соглашения'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ГруппаШапкаПраво.Видимость		= НЕ Объект.ЭтоТиповое;
	Элементы.ТиповоеСоглашение.Видимость	= НЕ Объект.ЭтоТиповое;
	Элементы.СертификатыЭЦП.Видимость 		= НЕ Объект.ЭтоТиповое И Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
	Элементы.ФормаЭД.Видимость 				= НЕ Объект.ЭтоТиповое;
	Если Объект.ЭтоТиповое Тогда
		ТекстЗаголовка = НСтр("ru='Типовое соглашение об использовании электронных документов'");
		Для Каждого Элемент Из Элементы.ГруппаШапкаПраво.ПодчиненныеЭлементы Цикл
			Элемент.РастягиватьПоГоризонтали = Истина;
		КонецЦикла;
	Иначе
		ТекстЗаголовка = НСтр("ru='Соглашение с контрагентом об использовании электронных документов'");
	КонецЕсли;
	ЭтаФорма.Заголовок = ТекстЗаголовка;
	ТекущийСпособОбменаЭД = Объект.СпособОбменаЭД;
	ИзменитьНастройкиВидимостиДоступностиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорматыФайловДоступнымиЗначениями()
	
	Для Каждого ЗначениеПеречисления Из Перечисления.ФорматыФайловОбменаЭД Цикл
		МассивСтрок = Объект.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("ФорматФайла", ЗначениеПеречисления));
		Если МассивСтрок.Количество() = 0 Тогда 
			НоваяСтрока = Объект.ФорматыФайловОбмена.Добавить();
			НоваяСтрока.ФорматФайла  = ЗначениеПеречисления;
			// значение по умолчанию для новых
			Если ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.XML И Объект.Ссылка.Пустая() Тогда 
				НоваяСтрока.Использовать  = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	АктуальныеВидыЭД = ЭлектронныеДокументыПереопределяемый.АктуальныеВидыЭД();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		Если ЗначениеПеречисления <> Перечисления.ВидыЭД.ПроизвольныйЭД
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.СчетФактура И ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями    // Интеркампани.
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями   // Интеркампани.
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.Извещение Тогда
			МассивСтрок = Объект.ВходящиеДокументы.НайтиСтроки(Новый Структура("ВходящийДокумент", ЗначениеПеречисления));
			Если МассивСтрок.Количество() = 0 Тогда 
				НоваяСтрока = Объект.ВходящиеДокументы.Добавить();
				НоваяСтрока.ВходящийДокумент = ЗначениеПеречисления;
			КонецЕсли;
			МассивСтрок = Объект.ИсходящиеДокументы.НайтиСтроки(Новый Структура("ИсходящийДокумент", ЗначениеПеречисления));
			Если МассивСтрок.Количество() = 0 Тогда 
				НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьСертификатовПодписей()
	
	Элементы.СертификатыПодписейКонтрагента.Доступность = Объект.ПроверятьСертификатыПодписей;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// процедуры и функции обработки изменения способа обмена

&НаКлиенте
Функция ПроверитьЗаполнениеРесурсов()
	
	АдресКонтрагентаЗаполнен = ЗначениеЗаполнено(Объект.АдресРесурсаКонтрагента);
	АдресОрганизацииЗаполнен = ЗначениеЗаполнено(Объект.АдресРесурсаОрганизации);
	Возврат АдресКонтрагентаЗаполнен ИЛИ АдресОрганизацииЗаполнен;
	
КонецФункции

&НаКлиенте
Процедура СпособОбменаЭДПриИзменении(Элемент)
	
	Если ТекущийСпособОбменаЭД = Объект.СпособОбменаЭД Тогда 
		ЭтаФорма.Модифицированность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнениеРесурсов() Тогда
		ТекстВопроса = НСтр("ru = 'При изменении способа обмена адреса ресурсов будут очищены. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Объект.СпособОбменаЭД = ТекущийСпособОбменаЭД;
			ЭтаФорма.Модифицированность = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ТекущийСпособОбменаЭД = Объект.СпособОбменаЭД;
	ИзменитьНастройкиВидимостиДоступностиФормы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиВидимостиДоступностиФормы(ОчиститьРесурсыУчастников = Ложь)
	
	ИзменитьВидимостьКнопокВыбора(ОчиститьРесурсыУчастников);
	ИзменитьДоступностьКолонокТаблицы();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДоступностьКолонокТаблицы()
	
	Если ТекущийСпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
		Элементы.ВходящиеДокументыИспользоватьЭЦП.Видимость = Ложь;
		Элементы.ИсходящиеДокументыИспользоватьЭЦП.Видимость = Ложь;
		Элементы.ВходящиеДокументыОжидатьКвитанциюОДоставке.Видимость = Ложь;
		Элементы.ИсходящиеДокументыОжидатьКвитанциюОДоставке.Видимость = Ложь;
	Иначе
		Элементы.ВходящиеДокументыИспользоватьЭЦП.Видимость = Истина;
		Элементы.ИсходящиеДокументыИспользоватьЭЦП.Видимость = Истина;
		Элементы.ВходящиеДокументыОжидатьКвитанциюОДоставке.Видимость = Истина;
		Элементы.ИсходящиеДокументыОжидатьКвитанциюОДоставке.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьКнопокВыбора(ОчиститьРесурсыУчастников)
	
	Элементы.АдресРесурсаКонтрагента.КнопкаВыбора = ТекущийСпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту;
	Если ОчиститьРесурсыУчастников Тогда 
		УстановитьЗначенияПоУмолчаниюДляРесурсов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчаниюДляРесурсов()
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		Объект.АдресРесурсаОрганизации = "";
		Объект.АдресРесурсаКонтрагента = "";
	ИначеЕсли Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		Объект.АдресРесурсаКонтрагента = "";
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		                      |	УчетныеЗаписиЭлектроннойПочты.Ссылка
		                      |ИЗ
		                      |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		                      |ГДЕ
		                      |	(НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления)
		                      |	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
		                      |	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			Объект.АдресРесурсаОрганизации = Выборка.Ссылка;
		Иначе
			Объект.АдресРесурсаОрганизации = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьКаталогОбмена(ЗначениеРеквизита)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат "";
	КонецЕсли;
	
	ВыбранноеЗначение = ЗначениеРеквизита;
	РежимВыбора = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимВыбора);
	ДиалогКаталога.Каталог = ВыбранноеЗначение;
	ДиалогКаталога.Заголовок = НСтр("ru = 'Выберите каталог для обмена'");
	Если ДиалогКаталога.Выбрать() Тогда
		ВыбранноеЗначение = ДиалогКаталога.Каталог;
	КонецЕсли;
	
	Возврат ВыбранноеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборАдреса(ЗначениеРеквизита)
	
	Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
		ЗначениеРеквизита = ВыбратьКаталогОбмена(ЗначениеРеквизита);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресРесурсаОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборАдреса(Объект.АдресРесурсаОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресРесурсаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборАдреса(Объект.АдресРесурсаКонтрагента);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// процедуры и функции проверки включения функциональных опций при настройке обмена

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторКонтрагента) Тогда
		Если ВыбранноеЗначение <> Объект.Контрагент Тогда
			ТекстВопроса = НСтр("ru = 'Был изменен контрагент. Изменить идентификатор обмена контрагента?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				УстановитьИдентификатор("Контрагент", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;		
	Иначе
		УстановитьИдентификатор("Контрагент", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда
		Если ВыбранноеЗначение <> Объект.Организация Тогда
			ТекстВопроса = НСтр("ru = 'Была изменена организация. Изменить идентификатор обмена организации?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				УстановитьИдентификатор("Организация", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;		
	Иначе
		УстановитьИдентификатор("Организация", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповоеСоглашениеПриИзменении(Элемент)
	
	Если НЕ Объект.ТиповоеСоглашение.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить соглашение по типовому?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСоглашениеПоТиповому();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСоглашениеПоТиповому()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТиповоеСоглашение) Тогда
		Возврат;
	КонецЕсли;
	ДокументСоглашение = РеквизитФормыВЗначение("Объект");
	
	СписокСвойств = "Организация, СпособОбменаЭД, АдресРесурсаОрганизации, СертификатОрганизацииДляРасшифровки, ИдентификаторОрганизации, Ответственный";
	ЗаполнитьЗначенияСвойств(ДокументСоглашение, Объект.ТиповоеСоглашение.ПолучитьОбъект(), СписокСвойств ,"Родитель, Владелец, Код, Наименование");
	ЗаполнитьТабличнуюЧасть(ДокументСоглашение.ИсходящиеДокументы, 	Объект.ТиповоеСоглашение.ИсходящиеДокументы);
	ЗаполнитьТабличнуюЧасть(ДокументСоглашение.ФорматыФайловОбмена, Объект.ТиповоеСоглашение.ФорматыФайловОбмена);
	ЗаполнитьТабличнуюЧасть(ДокументСоглашение.ВходящиеДокументы, 	Объект.ТиповоеСоглашение.ВходящиеДокументы);
	
	ЗначениеВРеквизитФормы(ДокументСоглашение, "Объект");
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТабличнуюЧасть(ТЧПриемник, ТЧИсточник)
	
	ТЧПриемник.Очистить();
	Для Каждого СтрокаИсточник Из ТЧИсточник Цикл
		НоваяСтрокаПриемника = ТЧПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, СтрокаИсточник);
	КонецЦикла;
	
КонецПРоцедуры

&НаСервере 
Процедура УстановитьЗначенияЭтаповОбменаПоНастройкам(НастройкиИсходящие = Ложь, НастройкиВходящие = Ложь)
	
	// для исходящих
	Если НастройкиИсходящие <> Ложь Тогда
		ТаблицаЭтаповИсходящие.Очистить();
		Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
			Если НастройкиИсходящие.ИспользоватьОбмен Тогда		
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Сформирован);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Подписан);	
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Отправлен);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ПолученоИзвещение);
			КонецЕсли;
		Иначе
			Если НастройкиИсходящие.ИспользоватьОбмен Тогда
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Сформирован);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				Если НастройкиИсходящие.ИспользоватьЭЦП Тогда
					ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Подписан);
				КонецЕсли;
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
				ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Отправлен);
				Если НастройкиИсходящие.ОжидатьКвитанциюОДоставке Тогда
					ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				Если НастройкиИсходящие.ИспользоватьЭЦП Тогда
					ТаблицаЭтаповИсходящие.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// для входящих
	Если НастройкиВходящие <> Ложь Тогда
		ТаблицаЭтаповВходящие.Очистить();
		Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСОС Тогда
			Если НастройкиВходящие.ИспользоватьОбмен Тогда
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Получен);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Подписан);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоИзвещение);
			КонецЕсли;
		Иначе
			Если НастройкиВходящие.ИспользоватьОбмен Тогда
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Получен);
				ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Утвержден);
				Если НастройкиВходящие.ИспользоватьЭЦП Тогда
					ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.Подписан);
					ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
					ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					Если НастройкиВходящие.ОжидатьКвитанциюОДоставке Тогда
						ТаблицаЭтаповВходящие.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтруктуруПараметров(ДанныеФормыКоллекция)
	
	Если ДанныеФормыКоллекция = Неопределено Тогда
		СтруктураВозврата = Неопределено; 
	Иначе
		СтруктураВозврата = Новый Структура("ИспользоватьОбмен, ИспользоватьЭЦП, ОжидатьКвитанциюОДоставке", 
								ДанныеФормыКоллекция.Формировать, ДанныеФормыКоллекция.ИспользоватьЭЦП, ДанныеФормыКоллекция.ОжидатьКвитанциюОДоставке);
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыПриИзменении(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(Ложь, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыИспользоватьЭЦППриИзменении(Элемент)
	
	Если НЕ Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП  Тогда
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыОжидатьКвитанциюОДоставкеПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке Тогда
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ВопросОЗаписиДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ДобавитьДанныеПоТабЧасти(Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные), Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВопросОЗаписиДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Фильтр = "Файлы сертификатов(*.cer)|*.cer";
	Диалог.Заголовок = НСтр("ru = 'Выберите файл сертификата для проверки подписи контрагента'");
	
	МассивПомещенных = Новый Массив;
	Если ПоместитьФайлы( ,МассивПомещенных, Диалог) Тогда
		ИндексСтроки = Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные);
		РезультатДобавления = ДобавитьСертификатыТабличнойЧастиСервер(МассивПомещенных, ИндексСтроки);
		Если РезультатДобавления <> Неопределено Тогда
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = РезультатДобавления.Представление;
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.Отпечаток = РезультатДобавления.Отпечаток;
		Иначе
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = "";
			Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.Отпечаток = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСертификатыТабличнойЧастиСервер(МассивФайлов, ИндексСтроки)
	
	АдресВременногоХранилища = МассивФайлов[0].Хранение;
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Возврат ДобавитьДанныеПоТабЧасти(ИндексСтроки,  ДанныеФайла);
	
КонецФункции

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ДобавитьДанныеПоТабЧасти(Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные), Неопределено);
	
КонецПроцедуры

&НаСервере 
Функция ДобавитьДанныеПоТабЧасти(ИндексСтроки, ДвоичныеДанные)
	
	Если ИндексСтроки < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДвоичныеДанные <> Неопределено Тогда
		СертификатПодписи = Новый СертификатКриптографии(ДвоичныеДанные);	
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатПодписи.Субъект);
		Отпечаток = Base64Строка(СертификатПодписи.Отпечаток);
		
		ХранилищеЗначения  = Новый ХранилищеЗначения(ДвоичныеДанные);
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.СертификатыПодписейКонтрагента[ИндексСтроки].Сертификат = ХранилищеЗначения;
		Документ.СертификатыПодписейКонтрагента[ИндексСтроки].Отпечаток  = Отпечаток;
		Документ.Записать();
		
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ЭтаФорма.Прочитать();	
		ПеречитатьДанныеПоСертификатам(Документ);
		
		Возврат Новый Структура("Представление, Отпечаток", ПредставлениеСертификата, Отпечаток);
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

&НаСервере 
Функция ПеречитатьДанныеПоСертификатам(ДокументОбъект)
	
	Для Каждого ЭлементСтрока Из ДокументОбъект.СертификатыПодписейКонтрагента Цикл
		ДвоичныеДанныеСертификата = ЭлементСтрока.Сертификат.Получить();
		Если  ДвоичныеДанныеСертификата <> Неопределено Тогда
			Попытка
				СертификатПодписи = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатПодписи.Субъект);
				Объект.СертификатыПодписейКонтрагента[ДокументОбъект.СертификатыПодписейКонтрагента.Индекс(ЭлементСтрока)].ПредставлениеСертификатаКонтрагента = ПредставлениеСертификата;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПеречитатьДанныеПоСертификатам(ДокументОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСертификатыПодписейПриИзменении(Элемент)
	
	ОпределитьДоступностьСертификатовПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоТиповому(Команда)
	
	ЗаполнитьСоглашениеПоТиповому();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыИспользоватьОбменПриИзменении(Элемент)
	
	ЗначениеЭлемента = Элемент.Родитель.ТекущиеДанные.Формировать;
	Если НЕ ЗначениеЭлемента Тогда
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП = ЗначениеЭлемента;
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = ЗначениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыИспользоватьОбменПриИзменении(Элемент)
	
	ЗначениеЭлемента = Элемент.Родитель.ТекущиеДанные.Формировать;
	Если НЕ ЗначениеЭлемента Тогда
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП = ЗначениеЭлемента;
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = ЗначениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокумента()
	
	Документ = РеквизитФормыВЗначение("Объект");
	ПеречитатьДанныеПоСертификатам(Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПослеУдаления(Элемент)
	
	ОбновитьДанныеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ПоместитьВХранилище();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияОчистка(Элемент, СтандартнаяОбработка)
	
	ПоместитьВХранилище();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВопросОЗаписиДокумента() Тогда
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			Возврат;
		КонецЕсли;
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		Диалог = Новый ДиалогВыбораФайла(Режим);
		Диалог.Фильтр = "Файлы сертификатов(*.cer)|*.cer";
		Диалог.Заголовок = НСтр("ru = 'Выберите файл сертификата шифрования контрагента'");
		МассивПомещенных = Новый Массив;
		Если ПоместитьФайлы( ,МассивПомещенных, Диалог) Тогда
			ИмяСертификата = ПоместитьСертификатВСоглашениеСервер(МассивПомещенных);
			ФормаСертификатКонтрагентаДляШифрования = ИмяСертификата;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСертификатВСоглашениеСервер(МассивАдресовФайла)
	
	АдресВременногоХранилища = МассивАдресовФайла[0].Хранение;
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Возврат ПоместитьВХранилище(ДанныеФайла);
	
КонецФункции

&НаСервере
Функция ПоместитьВХранилище(ДвоичныеДанные = Неопределено)
	
	ХранилищеЗначения  = Новый ХранилищеЗначения(ДвоичныеДанные);
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
	Документ.Записать();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	ЭтаФорма.Прочитать();
	
	ПеречитатьДанныеПоСертификатам(Документ);
	Если ДвоичныеДанные <> Неопределено Тогда
		СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СертификатКриптографии.Субъект);
		Возврат ПредставлениеСертификата;
	КонецЕсли;

	Возврат ДвоичныеДанные;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	МассивСтрок = Объект.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("Использовать, ФорматФайла", 
										Истина, ПредопределенноеЗначение("Перечисление.ФорматыФайловОбменаЭД.XML")));
	Если МассивСтрок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Формат исходящего документа ""CommerceML(*.xml)"" обязателен к использованию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ФорматыФайловОбменаФорматФайла",,Отказ);
	КонецЕсли;
	
	Если НЕ Объект.ЭтоТиповое Тогда
		Если (Объект.СертификатОрганизацииДляРасшифровки.Пустая() И НЕ ПустаяСтрока(Элементы.СертификатКонтрагентаДляШифрования.ТекстРедактирования)) ИЛИ
			(НЕ Объект.СертификатОрганизацииДляРасшифровки.Пустая() И ПустаяСтрока(Элементы.СертификатКонтрагентаДляШифрования.ТекстРедактирования))Тогда
			ТекстСообщения = НСтр("ru='Для корректного шифрования необходимо указать сертификаты для организации и контрагента.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,,,Отказ);
		КонецЕсли;
		
		Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
			ТекстОшибкиАктуальности = ДанныеСоглашенияАктуальны();
			Если НЕ ПустаяСтрока(ТекстОшибкиАктуальности) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиАктуальности, ,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.АдресРесурсаОрганизации) Тогда
			ТекстСообщения = НСтр("ru='Поле ""Адрес ресурса организации"" не заполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,,,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СпособОбменаЭД) Тогда
			ТекстСообщения = НСтр("ru='Поле ""Способ обмена"" не заполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСоглашенияАктуальны()
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
	ЗапросПоСоглашениям.УстановитьПараметр("ТекущееСоглашение", Объект.Ссылка);
	ЗапросПоСоглашениям.УстановитьПараметр("Организация", 		Объект.Организация);
	ЗапросПоСоглашениям.УстановитьПараметр("Контрагент", 		Объект.Контрагент);
	ЗапросПоСоглашениям.УстановитьПараметр("Партнер", 			Объект.Партнер);
	ЗапросПоСоглашениям.Текст = "ВЫБРАТЬ
	                            |	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ТипДокумента,
	                            |	ИСТИНА КАК Входящий,
	                            |	СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Соглашение
	                            |ИЗ
	                            |	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	                            |ГДЕ
	                            |	СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ЭтоТиповое = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать = ИСТИНА
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка <> &ТекущееСоглашение
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                            |	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Партнер = &Партнер
	                            |
	                            |ОБЪЕДИНИТЬ ВСЕ
	                            |
	                            |ВЫБРАТЬ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	                            |	ЛОЖЬ,
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	                            |ИЗ
	                            |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                            |ГДЕ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать = ИСТИНА
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ЭтоТиповое = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка <> &ТекущееСоглашение
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Партнер = &Партнер";
	Результат = ЗапросПоСоглашениям.Выполнить().Выгрузить();
	РезультатПроверки = УникальныДокументы(Объект.ИсходящиеДокументы, Результат) + УникальныДокументы(Объект.ВходящиеДокументы, Результат, Истина);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция УникальныДокументы(ТабличнаяЧастьДокументов, РезультатПроверки, ПроверятьВходящиеДокументы = Ложь)
	
	ОтборСуществующихДокументов = Новый Структура("Входящий", ПроверятьВходящиеДокументы);
	ВидыДокументовДругихСоглашений = РезультатПроверки.НайтиСтроки(ОтборСуществующихДокументов);
	Если ВидыДокументовДругихСоглашений.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого ТекущийДокументСоглашения Из ТабличнаяЧастьДокументов Цикл
		Если ТекущийДокументСоглашения.Формировать Тогда
			Для Каждого ДокументВДругихСоглашениях Из ВидыДокументовДругихСоглашений Цикл
				Если ТекущийДокументСоглашения[?(ПроверятьВходящиеДокументы, "ВходящийДокумент", "ИсходящийДокумент")] = ДокументВДругихСоглашениях.ТипДокумента Тогда
					ТекстПредупреждения = НСтр("ru = 'По виду электронных документов %1 %2 
					|уже существует действующее соглашение между участниками %3 - %4:
					|%5.
					|'");
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДокументВДругихСоглашениях.ТипДокумента, 
						?(ПроверятьВходящиеДокументы, "Входящий", "Исходящий"), Объект.Организация, Объект.Контрагент, ДокументВДругихСоглашениях.Соглашение);
					
					Возврат ТекстПредупреждения;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	КонецЦикла;
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ВходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(Ложь, СтруктураПараметров );
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров(Элемент.ТекущиеДанные);
	УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ВопросОЗаписиДокумента()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоТиповое Тогда
		ТекстВопроса = НСтр("ru = 'Внешние сертификаты можно выбирать только в записанном соглашении.
							|Записать соглашение?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Возврат Ответ = КодВозвратаДиалога.Да И ПроверкаЗаполнения();
	
КонецФункции

&НаСервере
Функция ПроверкаЗаполнения()
	
	Возврат РеквизитФормыВЗначение("Объект").ПроверитьЗаполнение();
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ Объект.ЭтоТиповое Тогда
		Если (Объект.СертификатОрганизацииДляРасшифровки.Пустая() И НЕ ПустаяСтрока(Элементы.СертификатКонтрагентаДляШифрования.ТекстРедактирования)) ИЛИ
			(НЕ Объект.СертификатОрганизацииДляРасшифровки.Пустая() И ПустаяСтрока(Элементы.СертификатКонтрагентаДляШифрования.ТекстРедактирования))	Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Для корректного шифрования необходимо указать сертификаты для организации и контрагента!'");
			Предупреждение(ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ЭтоИнтеркампани Тогда
		Отказ = Истина;
		Параметр = Новый Структура("Ключ", Объект.Ссылка);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлементаИнтеркампани", Параметр);
	КонецЕсли;
	
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНадписьНаправлениеДокументов()
	
	Элементы.НадписьНаправлениеДокументовВх.Заголовок  = НСтр("ru='От кого: '") + Объект.Контрагент + НСтр("ru=', кому: '") + Объект.Организация;
	Элементы.НадписьНаправлениеДокументовИсх.Заголовок = НСтр("ru='От кого: '") + Объект.Организация + НСтр("ru=', кому: '") + Объект.Контрагент;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительПриИзменении(Элемент)
	
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры
  
&НаКлиенте
Процедура ТиповоеСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаВыбора",Новый Структура("Типовое", Истина), Элементы.ТиповоеСоглашение);
КонецПроцедуры

