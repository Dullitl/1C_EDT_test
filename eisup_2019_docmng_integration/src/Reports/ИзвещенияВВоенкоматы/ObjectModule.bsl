Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	РазбитьТабличныйДокументПоСтраницам(Результат);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	Возврат Результат;
		
КонецФункции

// Разбивает табличный документ по страницам
//
// Параметры:
//  ТабличныйДокумент - ссылка на табличный документ.
//
Процедура РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент)
	#Если Клиент Тогда
	Состояние(НСТР("ru='Разделение отчета по страницам ...  (Если вы хотите прервать вывод отчета, нажмите Ctrl+Break)'"));
	#КонецЕсли
	
	Для сч = 0 по 10 Цикл
		ОбластьКолонки                  = ТабличныйДокумент.Область(, сч+1, , сч+1);
		ОбластьКолонки.ШиринаКолонки    = 9;
		ОбластьКолонки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	КонецЦикла;
	ОбластьКолонки                  = ТабличныйДокумент.Область(, 4, , 4);
	ОбластьКолонки.ШиринаКолонки    = 9;
	ОбластьКолонки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьКолонки                  = ТабличныйДокумент.Область(, 1, , 1);
	ОбластьКолонки.ШиринаКолонки    = 4.25;
	ОбластьКолонки                  = ТабличныйДокумент.Область(, 2, , 2);
	ОбластьКолонки.ШиринаКолонки    = 12.13;
	ОбластьКолонки                  = ТабличныйДокумент.Область(, 3, , 3);
	ОбластьКолонки.ШиринаКолонки    = 9.9;
	ОбластьКолонки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст(" ИЗВЕЩЕНИЕ");
	
	Если ОбластьПервойЯчейки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
	
	НомерСтрокиКонцаРЛ     = НомерСтрокиНачалаРЛ + 62;
	
	Если ТабличныйДокумент.ВысотаТаблицы > НомерСтрокиКонцаРЛ тогда
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст(" ИЗВЕЩЕНИЕ", ОбластьСлед);
		
		Пока ОбластьПервойЯчейки <> Неопределено и ТабличныйДокумент.ВысотаТаблицы > НомерСтрокиКонцаРЛ Цикл
			НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
			НомерСтрокиКонцаРЛ  = НомерСтрокиНачалаРЛ + 62;
			ОбластьРазделителя  = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ - 5, , НомерСтрокиНачалаРЛ - 5, );
			ОбластьРазделителя.НачалоСтраницы = истина;
			ОбластьСлед         = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
			ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст(" ИЗВЕЩЕНИЕ", ОбластьСлед);
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Процедура ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата) Экспорт
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки) Экспорт
	
	
КонецПроцедуры

Процедура ПриВыводеЗаголовкаОтчета(ОбластьЗаголовок) Экспорт
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекстТекущейДаты"));
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра.Значение = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	
КонецПроцедуры

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетами.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных)
