#Если Клиент Тогда
	
Перем ИмяРегистраБухгалтерии Экспорт;

Функция СформироватьЗапрос(СтруктураПараметров) Экспорт
	Возврат абс_СформироватьЗапрос(СтруктураПараметров); 	
КонецФункции

////////////АБС ВСТАВКА//////////////////////////////////////////////////////////////////////////////////////////////////////////////
Функция абс_СформироватьЗапрос(СтруктураПараметров) Экспорт
	
	//---
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачОтчета", ДатаНач);
	
	Запрос.УстановитьПараметр("ВидУчета", ВидУчета);

	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКонОтчета", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКонОтчета", ДатаКон);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	ДатыПереноса = абс_ПолучитьДатыПереноса();
	Запрос.УстановитьПараметр("ДатаКонецДЗО", Мин(ДатыПереноса.ДатаКон,КонецДня(ДатаКон)));
	Запрос.УстановитьПараметр("ДатаНачалоДЗО", ДатыПереноса.ДатаНач);
	Запрос.УстановитьПараметр("ДЗО", абс_ДЗО);
 		
	ТекстВТОстаткиОборотыДЗО = "";
	ТекстУсловиеСоединения = "ОстаткиОбороты.Счет = ВТОстаткиОборотыДЗО.Счет 
	|";

	ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ",
	|	ОстаткиОбороты.Счет КАК Счет,
	|	ОстаткиОбороты.Счет.Код КАК СчетКод,
	|	ОстаткиОбороты.Счет.Наименование КАК СчетНаименование,
	|	ОстаткиОбороты.Счет.Представление КАК СчетПредставление,
	|	ОстаткиОбороты.Счет.Забалансовый КАК СчетЗабалансовый";
				
	//Если ПоВалютам Тогда
	//	
	//	ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ",
	//	|	ОстаткиОбороты.Валюта КАК Валюта,
	//	|	ПРЕДСТАВЛЕНИЕ(ОстаткиОбороты.Валюта) КАК ВалютаПредставление";
	//			
	//	ТекстУсловиеСоединения = ТекстУсловиеСоединения + "И ОстаткиОбороты.Валюта = ВТОстаткиОборотыДЗО.Валюта
	//	|";

	//КонецЕсли;
	
	ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОборотыДЗО;
	ТекстВыборка           = ТекстВТОстаткиОборотыДЗО;
	ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты1;
    ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2;
	
	ТекстВТОстаткиОборотыДЗО = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник КАК ДЗО" + ТекстВТОстаткиОборотыДЗО;
	ТекстВТОстаткиОбороты1 = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	&Организация КАК ДЗО" + ТекстВТОстаткиОбороты1;
	ТекстВыборка = "
		|ВЫБРАТЬ
		|	ОстаткиОбороты.ДЗО КАК ДЗО " +ТекстВыборка;
	ТекстВТОстаткиОбороты2 = "
		|ВЫБРАТЬ
	    |	ОстаткиОбороты.ДЗО КАК ДЗО" + ТекстВТОстаткиОбороты2;
		
	ТекстВТОстаткиОбороты2БезДЗО = "
		|ВЫБРАТЬ
		|	" + Сред(ТекстВТОстаткиОбороты2БезДЗО,2);
		
	УсловиеВыборки = "";
	ТекстИтогов = "";
	
	Для Каждого Показатель Из СтруктураПараметров.МассивПоказателей Цикл
		
		ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО +",
	        |	СУММА(ВЫБОР
	        |			КОГДА ОстаткиОбороты.Период < &ДатаНачОтчета
	        |				ТОГДА ОстаткиОбороты."+Показатель+"Оборот
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК "+Показатель+"НачальныйОстаток,
	        |	Сумма(ОстаткиОбороты."+Показатель+"Оборот) КАК "+Показатель+"КонечныйОстаток,
	        |	Сумма(ВЫБОР
	        |		КОГДА ОстаткиОбороты.Период >= &ДатаНачОтчета
	        |			ТОГДА ОстаткиОбороты."+Показатель+"ОборотДт
	        |		ИНАЧЕ 0
	        |	КОНЕЦ) КАК "+Показатель+"ОборотДт,
	        |	Сумма(ВЫБОР
	        |		КОГДА ОстаткиОбороты.Период >= &ДатаНачОтчета
	        |			ТОГДА ОстаткиОбороты."+Показатель+"ОборотКт
	        |		ИНАЧЕ 0
	        |	КОНЕЦ) КАК "+Показатель+"ОборотКт";
			
			ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОбороты1 + ",
			|	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"НачальныйОстаток, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"НачальныйОстаток, 0) КАК "+Показатель+"НачальныйОстаток,
	        |	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"КонечныйОстаток, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"КонечныйОстаток, 0) КАК "+Показатель+"КонечныйОстаток,
	        |	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"ОборотДт, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"ОборотДт, 0) КАК "+Показатель+"ОборотДт,
	        |	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"ОборотКт, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"ОборотКт, 0) КАК "+Показатель+"ОборотКт";	
			
			ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты2 + ",
			|	ОстаткиОбороты."+Показатель+"НачальныйОстаток,
	        |	ОстаткиОбороты."+Показатель+"КонечныйОстаток,
	        |	ОстаткиОбороты."+Показатель+"ОборотДт,
	        |	ОстаткиОбороты."+Показатель+"ОборотКт";
			
			ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2БезДЗО + ",
			|	СУММА(ОстаткиОбороты."+Показатель+"НачальныйОстаток) КАК "+Показатель+"НачальныйОстаток,
	        |	СУММА(ОстаткиОбороты."+Показатель+"КонечныйОстаток) КАК "+Показатель+"КонечныйОстаток,
	        |	СУММА(ОстаткиОбороты."+Показатель+"ОборотДт) КАК "+Показатель+"ОборотДт,
	        |	СУММА(ОстаткиОбороты."+Показатель+"ОборотКт) КАК "+Показатель+"ОборотКт";

			
			ТекстВыборка = ТекстВыборка +",
			|	ОстаткиОбороты."+Показатель+"НачальныйОстаток,
			|	ОстаткиОбороты."+Показатель+"КонечныйОстаток,
			|	ОстаткиОбороты."+Показатель+"ОборотДт,
			|	ОстаткиОбороты."+Показатель+"ОборотКт";

			УсловиеВыборки = УсловиеВыборки + "
			|	"+?(УсловиеВыборки = "","","ИЛИ")+" ОстаткиОбороты."+Показатель+"НачальныйОстаток <> 0 
			|	ИЛИ ОстаткиОбороты."+Показатель+"ОборотДт <> 0 
			|	ИЛИ ОстаткиОбороты."+Показатель+"ОборотКт <> 0";
			
			ТекстИтогов = Текститогов +",
			|	СУММА(" + Показатель + "Начальный" + "Остаток),
			|	СУММА(" + Показатель + "Конечный" + "Остаток),
            |	СУММА(" + Показатель + "ОборотДт),
			|	СУММА(" + Показатель + "ОборотКт)";

		КонецЦикла;
		
	        ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + "
	        |ПОМЕСТИТЬ ВТОстаткиОборотыДЗО
	        |	"+абс_СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(СтруктураПараметров, Истина )+"
	        |ГДЕ
	        |	ОстаткиОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров "+ ?(абс_ДЗО.Пустая(),"","И ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник = &ДЗО")+" И ОстаткиОбороты.Регистратор.абс_ОрганизацияПриемник = &Организация
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОстаткиОбороты.Счет,
	        |	ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////";
			
			ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты2 + "
			|ИЗ
	        |	ВТОстаткиОборотыДЗО КАК ОстаткиОбороты
			|;";

			ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2БезДЗО + "
			|ИЗ
	        |	ВТОстаткиОборотыДЗО КАК ОстаткиОбороты
			|СГРУППИРОВАТЬ ПО ОстаткиОбороты.Счет";
			
			ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОбороты1 + "
			|ПОМЕСТИТЬ ВТОстаткиОбороты
	        |	"+абс_СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(СтруктураПараметров)+"
	        |		ПОЛНОЕ СОЕДИНЕНИЕ ("+ТекстВТОстаткиОбороты2БезДЗО+") КАК ВТОстаткиОборотыДЗО
	        |		ПО "+ТекстУсловиеСоединения+"
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |";
			
			
			ТекстВыборка =  ТекстВыборка + "
			|ИЗ
			|	" + ?(абс_ДЗО.Пустая(),"ВТОстаткиОбороты", "ВТОстаткиОборотыДЗО") + " КАК ОстаткиОбороты
			|ГДЕ
			|	" + УсловиеВыборки;
					
	Текст = ТекстВТОстаткиОборотыДЗО + ?(абс_ДЗО.Пустая(),ТекстВТОстаткиОбороты1 + ТекстВТОстаткиОбороты2,"") + ТекстВыборка + "
	|АВТОУПОРЯДОЧИВАНИЕ
	|ИТОГИ " + Сред(ТекстИтогов, 2) + "
	|ПО
	|	ДЗО, Счет ИЕРАРХИЯ";

	//Если ПоВалютам Тогда
	//	Текст = Текст + ",
	//	|	Валюта КАК Валюта ";
	//КонецЕсли;

	Запрос.Текст = Текст;
	
	// АБС ВСТАВКА 11170
	Если абс_ВключаяПодчиненныеОрганизации Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &Организация", " В ИЕРАРХИИ (&Организация)");
		
	КонецЕсли;
	// АБС ВСТАВКА 11170 КОНЕЦ	
	
	Возврат Запрос;
	
КонецФункции


Функция абс_ПолучитьДатыПереноса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкаЗаписейРегистров.Ссылка
	               |ПОМЕСТИТЬ ВТСписокДок
	               |ИЗ
	               |	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
	               |ГДЕ
	               |	
	               |	КорректировкаЗаписейРегистров.абс_ОрганизацияПриемник = &Организация"
				   + ?(абс_ДЗО.Пустая(),"",	" И КорректировкаЗаписейРегистров.абс_ОрганизацияИсточник = &ДЗО") + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.Период), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)) КАК ДатаКон,
				   |	ЕСТЬNULL(МИНИМУМ(Хозрасчетный.Период), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНач
	               |ИЗ
	               |	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+" КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Регистратор В
	               |			(ВЫБРАТЬ
	               |				ВТСписокДок.Ссылка
	               |			ИЗ
	               |				ВТСписокДок КАК ВТСписокДок)";
	
	Запрос.Параметры.Вставить("Организация",Организация);
	Запрос.Параметры.Вставить("ДЗО",абс_ДЗО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("ДатаНач",Выборка.ДатаНач);
	Структура.Вставить("ДатаКон",Выборка.ДатаКон);

	Возврат Структура;
	
Конецфункции


Функция абс_СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(СтруктураПараметров, ДЗО = Ложь, ДопОграничениеНаСчет = "")
	
	СтрокаОграниченийПоРеквизитам = "";
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", СтруктураПараметров.СтруктураОграничений.Организация);
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "ВидУчета", СтруктураПараметров.СтруктураОграничений.ВидУчета);
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "ОтражениеВНУ", СтруктураПараметров.СтруктураОграничений.ОтражениеВНУ);
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Валюта", СтруктураПараметров.СтруктураОграничений.Валюта);
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Сценарий", СтруктураПараметров.СтруктураОграничений.Сценарий);
		
	СтрокаЧастиЗапроса = "
			|ИЗ
			|	РегистрБухгалтерии." + СтруктураПараметров.СтруктураОграничений.ИмяРегистраБухгалтерии + "."+?(ДЗО,"Обороты","ОстаткиИОбороты")+"( "
			+ ?(ДЗО, "&ДатаНачалоДЗО", "&ДатаНачОтчета") + ", "
			+ ?(ДЗО,"&ДатаКонецДЗО", "&ДатаКонОтчета") 
			+ ","
			+ ?(ДЗО,"Регистратор","")
			+?(ДЗО,", ",", , ")  
			+ ?(СтруктураПараметров.СтруктураОграничений.ИспользоватьОграниченияПоЗабалансовымСчетам = Ложь 
				ИЛИ СтруктураПараметров.СтруктураОграничений.ПоЗабалансовымСчетам = Истина, Сред(ДопОграничениеНаСчет,2)," НЕ Счет.Забалансовый "+ ДопОграничениеНаСчет) + ", "
			+ ", "
			+ СтрокаОграниченийПоРеквизитам + ") КАК ОстаткиОбороты";
			
	Возврат СтрокаЧастиЗапроса;		
	
КонецФункции

Функция абс_СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомости(ОбъектОтчета,
		Знач ПоВалютам, Знач ИспользоватьОграниченияПоЗабалансовымСчетам, Знач ПоЗабалансовымСчетам = Ложь, 
		Знач ВидУчета = Неопределено, Знач Валюта = Неопределено, Знач ОтражениеВНУ = Неопределено,
		Знач Сценарий = Неопределено, Знач ВВалютеСценария = Неопределено)
	
	Структура = Новый Структура();
	Структура.Вставить("ДатаНач", ОбъектОтчета.ДатаНач);
	Структура.Вставить("ДатаКон", ОбъектОтчета.ДатаКон);
	Попытка
		Структура.Вставить("Организация", ОбъектОтчета.Организация);
	Исключение
		Структура.Вставить("Организация", Неопределено);
	КонецПопытки;
	
	Структура.Вставить("ПоСубсчетамИСубконто", ОбъектОтчета.ПоСубсчетамИСубконто);
	Структура.Вставить("ВыводитьРазвернутоеСальдо", ОбъектОтчета.ВыводитьРазвернутоеСальдо);
	
	Структура.Вставить("ПоВалютам", ПоВалютам);
	Структура.Вставить("ИспользоватьОграниченияПоЗабалансовымСчетам", ИспользоватьОграниченияПоЗабалансовымСчетам);
	Структура.Вставить("ПоЗабалансовымСчетам", ПоЗабалансовымСчетам);
	
	Структура.Вставить("ВидУчета", ВидУчета);	
	
	Структура.Вставить("Валюта",  Валюта);
	Структура.Вставить("ОтражениеВНУ",  ОтражениеВНУ);
	
	Структура.Вставить("Сценарий",  Сценарий);
	
	Структура.Вставить("ВВалютеСценария",  ВВалютеСценария);
	
	Структура.Вставить("ИмяРегистраБухгалтерии", ОбъектОтчета.ИмяРегистраБухгалтерии);
	
	Возврат Структура; 
	
КонецФункции
               
// процедура формирует отчет оборотно сальдовой ведомости
Процедура абс_СформироватьОтчетОборотноСальдовойВедомости(ОбъектОтчета, ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0,
	Знач ПоВалютам, Знач ИспользоватьОграниченияПоЗабалансовымСчетам, Знач ПоЗабалансовымСчетам, 
	Знач ВидУчета = Неопределено, Знач Валюта = Неопределено, Знач ОтражениеВНУ = Неопределено, 
	Знач Сценарий = Неопределено, Знач ВВалютеСценария = Неопределено) Экспорт
    	
	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ОбъектОтчета.ДатаНач, ОбъектОтчета.ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;

	ДокументРезультат.Очистить();

	БухгалтерскиеОтчеты.СформироватьИВывестиЗаголовокОтчета(ОбъектОтчета, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	Макет = ПолучитьМакет("ОборотноСальдоваяВедомость");
		
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	// Используемые области макета
	ОбластьСтрокаСчет           = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаПоказателяСчет = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");

	// В этой структуре будут храниться постоянные значения, передаваемые во другие процедуры:
	// - формат, 
	// - области макета
	СтруктураПараметров = Новый Структура;
	
	// Переменная, содержащая имена показателей отчета (ресурсов) в виде массива
	МассивПоказателей = ОбъектОтчета.СформироватьМассивПоказателей();
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	
	// Области для вывода показателей
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла",Макет.ПолучитьОбласть("СтрокаПоказателя|Числа"));
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла",          Макет.ПолучитьОбласть("Строка|Числа"));
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет", Макет.ПолучитьОбласть("СтрокаПоказателя|Счет"));

	// Линии, используемые при выводе
	СтруктураПараметров.Вставить("НетЛинии",    Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));

	// Формат показателей
	СтруктураФорматовПоказателей = БухгалтерскиеОтчеты.СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ОбъектОтчета.ИмяРегистраБухгалтерии);
	СтруктураПараметров.Вставить("ФорматПоказателей", СтруктураФорматовПоказателей);
	
	СтруктураПараметровОграничений = абс_СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомости(ОбъектОтчета,
		ПоВалютам, ИспользоватьОграниченияПоЗабалансовымСчетам, ПоЗабалансовымСчетам, ВидУчета, Валюта, ОтражениеВНУ, 
		Сценарий, ВВалютеСценария);
		
	СтруктураПараметров.Вставить("СтруктураОграничений", СтруктураПараметровОграничений);
	
    СтруктураОбщийИтог = Новый Структура;
	абс_ИнициализироватьСтруктуруХраненияИтоговОборотка(МассивПоказателей, СтруктураОбщийИтог);
		
	СоотвПодчСчета = Новый Соответствие;
	
	Запрос = абс_СформироватьЗапрос(СтруктураПараметров);

	//// Рассчитаем итоги по счетам, заданным в таблице вывода итогов по счетам
	//ТаблицаРазворотаСчетов = абс_СформироватьТаблицуДанныхРазворотаСчетов(СтруктураПараметров, ОбъектОтчета.ПравилаВыводаИтогов);
	//ТаблицаРазворотаСчетов.Индексы.Добавить("Счет");
		
	// Рассчитаем итоги по счетам, заданным в таблице развернутого сальдо
	ТаблицаРазвернутогоСальдо = абс_СформироватьТаблицуДанныхРазвернутогоСальдо(СтруктураПараметров, ОбъектОтчета.ПравилаРазвернутогоСальдо); 
	ТаблицаРазвернутогоСальдо.Индексы.Добавить("Счет");

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДЗО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДЗО");
	ОбластьДЗО = Макет.ПолучитьОбласть("СтрокаДЗО");
	
	Пока ВыборкаДЗО.Следующий() Цикл
		
		ДокументРезультат.НачатьАвтогруппировкуСтрок();

		СтруктураОбщийИтогДЗО = Новый Структура;
		абс_ИнициализироватьСтруктуруХраненияИтоговОборотка(МассивПоказателей, СтруктураОбщийИтогДЗО);

		ОбластьДЗО.Параметры.ДЗО = ВыборкаДЗО.ДЗО;
		ДокументРезультат.Вывести(ОбластьДЗО,0);
		
		Выборка = ВыборкаДЗО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
		
		Пока Выборка.Следующий() Цикл
			
			Уровень = Выборка.Уровень();
			
			Если НЕ ОбъектОтчета.ПоСубсчетамИСубконто
				И Уровень > 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Пропускаем подчиненные счета разворачиваемого счета
			Если СоотвПодчСчета[Выборка.Счет] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьСтрокаСчет.Параметры.Заполнить(Выборка);
			
			// Заполнение параметров расшифровки
			абс_ЗаполнитьПараметрыРасшифровкиОборотноСальдовойВедомости(ОбъектОтчета.ДатаНач, ОбъектОтчета.ДатаКон, 
			ОбъектОтчета.ИмяРегистраБухгалтерии, ОбластьСтрокаСчет, Выборка, , , ВВалютеСценария);
			
			// выводим текущую строку отчета
			ДокументРезультат.Вывести(ОбластьСтрокаСчет, Уровень);
			
			// Определим, нужно ли выводить развернутое сальдо по счету и
			// разворачивать счет по субконто
			Если ОбъектОтчета.ВыводитьРазвернутоеСальдо Тогда
				СтрокаРазвернутогоСальдо = ТаблицаРазвернутогоСальдо.Найти(Выборка.Счет, "Счет");
			Иначе	
				СтрокаРазвернутогоСальдо = Неопределено;
			КонецЕсли;
			
			//Если ОбъектОтчета.ПоСубсчетамИСубконто Тогда
			//	СтрокаРазворотаСчета = ТаблицаРазворотаСчетов.Найти(Выборка.Счет, "Счет");
			//Иначе
			//	СтрокаРазворотаСчета = Неопределено;
			//КонецЕсли;
			СтрокаРазворотаСчета = Неопределено;
			
			абс_ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, Выборка.Счет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров);
			
			абс_ВывестиДанныеПоВалютамОборотноСальдовойВедомости(СтруктураПараметров, ОбластьСтрокаПоказателяСчет, Выборка, ДокументРезультат, СтрокаРазвернутогоСальдо, 
			СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, -1);
						
		КонецЦикла;
		
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
		// Выведем итоговую строку
		ОбластьИтогиСчет = Макет.ПолучитьОбласть("ИтогиДЗО|Счет");
		ДокументРезультат.Вывести(ОбластьИтогиСчет, 0);
		
		ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрокаДЗО|Числа");
		ОбластьИтогиЧисла       = Макет.ПолучитьОбласть("ИтогиДЗО|Числа");
		ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрокаДЗО|Счет");
		
		НомерТекущейСтрокиИтога = 0;	
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			
			Если НЕ Метаданные.РегистрыБухгалтерии[ОбъектОтчета.ИмяРегистраБухгалтерии].Ресурсы[ИмяПоказателя].Балансовый Тогда
				Продолжить;
			КонецЕсли;
			
			Если НомерТекущейСтрокиИтога > 0 Тогда
				Область = ОбластьИтогиСтрокаЧисла
			Иначе
				Область = ОбластьИтогиЧисла;
			КонецЕсли;
			
			ФорматПоказателя = "";
			СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
			
			абс_ЗаполнитьДаннымОблатьВыводаОборотка(Область, ФорматПоказателя, 
			СтруктураОбщийИтогДЗО[ИмяПоказателя + "НачальныйОстатокДт"], СтруктураОбщийИтогДЗО[ИмяПоказателя + "НачальныйОстатокКт"], 
			СтруктураОбщийИтогДЗО[ИмяПоказателя + "КонечныйОстатокДт"], СтруктураОбщийИтогДЗО[ИмяПоказателя + "КонечныйОстатокКт"], 
			СтруктураОбщийИтогДЗО[ИмяПоказателя + "ОборотДт"], СтруктураОбщийИтогДЗО[ИмяПоказателя + "ОборотКт"]);
			
			Если НомерТекущейСтрокиИтога > 0 Тогда
				ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 0);
			КонецЕсли;
			
			ДокументРезультат.Присоединить(Область);
			
			НомерТекущейСтрокиИтога = НомерТекущейСтрокиИтога + 1;
			
		КонецЦикла;
		
		ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");
   		ДокументРезультат.Вывести(ИтогиПодвал, 0);
	
	КонецЦикла;

	
	//ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	Если ВыборкаДЗО.Количество() > 1 Тогда
		// Выведем итоговую строку
		ОбластьИтогиСчет = Макет.ПолучитьОбласть("Итоги|Счет");
		ДокументРезультат.Вывести(ОбластьИтогиСчет, 0);
		
		ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
		ОбластьИтогиЧисла       = Макет.ПолучитьОбласть("Итоги|Числа");
		ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Счет");
		
		НомерТекущейСтрокиИтога = 0;	
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			
			Если НЕ Метаданные.РегистрыБухгалтерии[ОбъектОтчета.ИмяРегистраБухгалтерии].Ресурсы[ИмяПоказателя].Балансовый Тогда
				Продолжить;
			КонецЕсли;
			
			Если НомерТекущейСтрокиИтога > 0 Тогда
				Область = ОбластьИтогиСтрокаЧисла
			Иначе
				Область = ОбластьИтогиЧисла;
			КонецЕсли;
			
			ФорматПоказателя = "";
			СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
			
			абс_ЗаполнитьДаннымОблатьВыводаОборотка(Область, ФорматПоказателя, 
			СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"], СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"], 
			СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт"], СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт"], 
			СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"], СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"]);
			
			Если НомерТекущейСтрокиИтога > 0 Тогда
				ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 0);
			КонецЕсли;
			
			ДокументРезультат.Присоединить(Область);
			
			НомерТекущейСтрокиИтога = НомерТекущейСтрокиИтога + 1;
			
		КонецЦикла;
		
		ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");
	   	ДокументРезультат.Вывести(ИтогиПодвал, 0);
	
	КонецЕсли;
			
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = ОбъектОтчета.СформироватьОбщуюСтруктуруДляРасшифровки();
    СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;

    // Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Выводится по ширине листа
	ДокументРезультат.Автомасштаб   = Истина;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ОбъектОтчета.ЗаголовокОтчета(), Строка(ПараметрыСеанса.ТекущийПользователь));
	
КонецПроцедуры


// процедура инициализирует структуру в которой хранятся итоговые суммы документа
Процедура абс_ИнициализироватьСтруктуруХраненияИтоговОборотка(Знач МассивПоказателей, СтруктураОбщийИтог)
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "НачальныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "НачальныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "КонечныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "КонечныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "ОборотДт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "ОборотКт", 0);
						
	КонецЦикла;
	
КонецПроцедуры

// Формирует запросы по каждому из счетов, указанному в таблице развернутого сальдо
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Таблица запросов
//
Функция абс_СформироватьТаблицуДанныхРазвернутогоСальдо(СтруктураПараметров, ПравилаРазвернутогоСальдо)

	// Результат Каждого запроса будет укладываться в специальную таблицу
	ТаблицаРазвернутогоСальдо = Новый ТаблицаЗначений;
	ТаблицаРазвернутогоСальдо.Колонки.Добавить("Счет");
	ТаблицаРазвернутогоСальдо.Колонки.Добавить("Результат");
	
	Если НЕ СтруктураПараметров.СтруктураОграничений.ВыводитьРазвернутоеСальдо
		ИЛИ (ПравилаРазвернутогоСальдо.Количество() = 0) Тогда
		
		Возврат ТаблицаРазвернутогоСальдо;
		
	КонецЕсли;

	// Сформируем текст запроса
	Для Каждого ПравилаСчета из ПравилаРазвернутогоСальдо Цикл
		
		Если ПравилаСчета.Счет.Пустая()
			ИЛИ (НЕ ПравилаСчета.Субсчета
				И ПравилаСчета.РазворотПоСубконто.Количество() = 0) Тогда
				
			Продолжить; // неправильно заполненная строка, не обрабатываем
				
		КонецЕсли;
		
		Запрос = Новый Запрос;
	
		Запрос.УстановитьПараметр("Счет", ПравилаСчета.Счет);
		Запрос.УстановитьПараметр("ДатаНачОтчета", ДатаНач);
		Запрос.УстановитьПараметр("СчетВид",ПравилаСчета.Счет.Вид);
	
		Если ДатаКон <> '00010101000000' Тогда
			Запрос.УстановитьПараметр("ДатаКонОтчета", КонецДня(ДатаКон));
		Иначе
			Запрос.УстановитьПараметр("ДатаКонОтчета", ДатаКон);
		КонецЕсли;

		Запрос.УстановитьПараметр("Организация", Организация);
		ДатыПереноса = абс_ПолучитьДатыПереноса();
		Запрос.УстановитьПараметр("ДатаКонецДЗО", Мин(ДатыПереноса.ДатаКон,КонецДня(ДатаКон)));
		Запрос.УстановитьПараметр("ДатаНачалоДЗО", ДатыПереноса.ДатаНач);
		Запрос.УстановитьПараметр("ДЗО", абс_ДЗО);

		ТекстУсловиеСоединения = "";
		ТекстВТОстаткиОборотыДЗО = "";
	
		ТекстУсловиеСоединения = "И ОстаткиОбороты.Счет = ВТОстаткиОборотыДЗО.Счет 
			|";

		ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ",
			|	ОстаткиОбороты.Счет КАК Счет";
			
		//Если ПоВалютам Тогда
		//
		//	ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ",
		//	|	ОстаткиОбороты.Валюта КАК Валюта";
		//		
		//	ТекстУсловиеСоединения = ТекстУсловиеСоединения + "И ОстаткиОбороты.Валюта = ВТОстаткиОборотыДЗО.Валюта
		//	|";

		//КонецЕсли;

    	ТекстПоля = "";
		ТекстИтоги = "";
		ТекстПорядок = "";
		ТекстПоляГруппировки = "";	
		
		ТекстВыбранныеПоля = "";
		Если Не ПравилаСчета.Субсчета Тогда
			Для Каждого СтрокаПоСубконто Из ПравилаСчета.РазворотПоСубконто Цикл
				
				ТекстПоляГруппировки = ТекстПоляГруппировки + ", 
					|	ОстаткиОбороты." + СтрокаПоСубконто.Имя;
			
				ТекстПоля = ТекстПоля + ", 
					|	ОстаткиОбороты." + СтрокаПоСубконто.Имя + " КАК " + СтрокаПоСубконто.Имя;
					
				ТекстУсловиеСоединения = ТекстУсловиеСоединения + "И ОстаткиОбороты."+СтрокаПоСубконто.Имя+" = ВТОстаткиОборотыДЗО."+СтрокаПоСубконто.Имя+ "
					|";
					
			КонецЦикла; 
		КонецЕсли;
				
		ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ТекстПоля;
		ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОборотыДЗО;
		ТекстВыборка           = ТекстВТОстаткиОборотыДЗО;
		ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты1;
    	ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2;
	
		ТекстВТОстаткиОборотыДЗО = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|   ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник КАК ДЗО" + ТекстВТОстаткиОборотыДЗО;
		ТекстВТОстаткиОбороты1 = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    	|	&Организация КАК ДЗО" + ТекстВТОстаткиОбороты1;
		ТекстВыборка = "
			|ВЫБРАТЬ
			|	ОстаткиОбороты.ДЗО КАК ДЗО " +ТекстВыборка;
		ТекстВТОстаткиОбороты2 = "
			|ВЫБРАТЬ
		   	|	ОстаткиОбороты.ДЗО КАК ДЗО" + ТекстВТОстаткиОбороты2;
		
		ТекстВТОстаткиОбороты2БезДЗО = "
			|ВЫБРАТЬ
			|	" + Сред(ТекстВТОстаткиОбороты2БезДЗО,2);
		
		ТекстИтогов = "";
	
		Для Каждого Показатель Из СтруктураПараметров.МассивПоказателей Цикл
		
			ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО +",
	        |	СУММА(ВЫБОР
	        |			КОГДА ОстаткиОбороты.Период < &ДатаНачОтчета
	        |				ТОГДА ОстаткиОбороты."+Показатель+"Оборот
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК "+Показатель+"НачальныйОстаток,
	        |	Сумма(ОстаткиОбороты."+Показатель+"Оборот) КАК "+Показатель+"КонечныйОстаток";
			
			ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОбороты1 + ",
			|	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"НачальныйОстаток, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"НачальныйОстаток, 0) КАК "+Показатель+"НачальныйОстаток,
	        |	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"КонечныйОстаток, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"КонечныйОстаток, 0) КАК "+Показатель+"КонечныйОстаток";	
			
			ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты2 + ",
			|	ОстаткиОбороты."+Показатель+"НачальныйОстаток,
	        |	ОстаткиОбороты."+Показатель+"КонечныйОстаток";
			
			ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2БезДЗО + ",
			|	СУММА(ОстаткиОбороты."+Показатель+"НачальныйОстаток) КАК "+Показатель+"НачальныйОстаток,
	        |	СУММА(ОстаткиОбороты."+Показатель+"КонечныйОстаток) КАК "+Показатель+"КонечныйОстаток";

			ТекстВыборка = ТекстВыборка + ",
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"НачальныйОстаток >= 0
				|			ТОГДА ОстаткиОбороты."+Показатель+"НачальныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"НачальныйОстатокДт,
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"НачальныйОстаток < 0
				|			ТОГДА -ОстаткиОбороты."+Показатель+"НачальныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"НачальныйОстатокКт,
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"КонечныйОстаток >= 0
				|			ТОГДА ОстаткиОбороты."+Показатель+"КонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"КонечныйОстатокДт,
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"КонечныйОстаток < 0
				|			ТОГДА -ОстаткиОбороты."+Показатель+"КонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"КонечныйОстатокКт";
							
			ТекстИтогов = Текститогов + ",
				|	СУММА(" + Показатель + "Начальный" + "ОстатокДт),
				|	СУММА(" + Показатель + "Начальный" + "ОстатокКт),
				|	СУММА(" + Показатель + "Конечный" + "ОстатокДт),
				|	СУММА(" + Показатель + "Конечный" + "ОстатокКт)";
				
		КонецЦикла;
		
	    ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + "
	        |ПОМЕСТИТЬ ВТОстаткиОборотыДЗО
	        |"+абс_СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(СтруктураПараметров, Истина, "И Счет В ИЕРАРХИИ (&Счет)" )+"
	        |ГДЕ
	        |	ОстаткиОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров "+ ?(абс_ДЗО.Пустая(),"","И ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник = &ДЗО")+" И ОстаткиОбороты.Регистратор.абс_ОрганизацияПриемник = &Организация
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОстаткиОбороты.Счет" + ТекстПоляГруппировки+",
	        |	ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////";
			
		ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты2 + "
			|ИЗ
	        |	ВТОстаткиОборотыДЗО КАК ОстаткиОбороты
			|;";

		ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2БезДЗО + "
			|ИЗ
	        |	ВТОстаткиОборотыДЗО КАК ОстаткиОбороты
			|СГРУППИРОВАТЬ ПО ОстаткиОбороты.Счет"+ТекстПоляГруппировки;
			
		ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОбороты1 + "
			|ПОМЕСТИТЬ ВТОстаткиОбороты
	        |	"+абс_СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(СтруктураПараметров, Ложь, "И Счет В ИЕРАРХИИ (&Счет)" )+"
			|		ПОЛНОЕ СОЕДИНЕНИЕ ("+ТекстВТОстаткиОбороты2БезДЗО+") КАК ВТОстаткиОборотыДЗО
	        |		ПО "+Сред(ТекстУсловиеСоединения,2)+"
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |";

		ТекстВыборка =  ТекстВыборка + "
			|ИЗ
			|	" + ?(абс_ДЗО.Пустая(),"ВТОстаткиОбороты","ВТОстаткиОборотыДЗО") + " КАК ОстаткиОбороты";
					
		Текст = ТекстВТОстаткиОборотыДЗО + ?(абс_ДЗО.Пустая(),ТекстВТОстаткиОбороты1 + ТекстВТОстаткиОбороты2,"") + ТекстВыборка;
	
		Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2);
				
		Текст = Текст + "
		|ПО 
		|	ОстаткиОбороты.ДЗО КАК ДЗО";
	
		
		Запрос.Текст = Текст;
	
		// АБС ВСТАВКА 11170
		Если абс_ВключаяПодчиненныеОрганизации Тогда
		
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &Организация", " В ИЕРАРХИИ (&Организация)");
		
		КонецЕсли;
		// АБС ВСТАВКА 11170 КОНЕЦ	
		
		НоваяСтрока = ТаблицаРазвернутогоСальдо.Добавить();
		НоваяСтрока.Счет      = ПравилаСчета.Счет;
		НоваяСтрока.Результат = Запрос.Выполнить(); // в таблицу помещается выполненный запрос

	КонецЦикла;

	Возврат ТаблицаРазвернутогоСальдо;

КонецФункции

// Заполняет параметры расшифровки переданной области перед выводом в отчет
//
// Параметры:
//	Область - табличный документ, параметры расшифровки которого заполняются,
//	Выборка - спозиционированная выборка из результата запроса,
//	ОтборСубконто - параметр, содержащий таблицу отбора, которая будет использована
//	при построении отчета по расшифровке.
//
Процедура абс_ЗаполнитьПараметрыРасшифровкиОборотноСальдовойВедомости(Знач ДатаНач, Знач ДатаКон, Знач ИмяРегистраБухгалтерии,
	Область, Выборка, ОтборСубконто = Неопределено, ВыведенныйСчет = Неопределено, Знач ВВалютеСценария = Неопределено)
	
	// Заполение значений для расшифровки
	СчетДляРасшифровки = ?(Выборка.Счет <> NULL, Выборка.Счет, ВыведенныйСчет);
	
	// Заполнение параметров расшифровки
	ПараметрыОСВПоСчету = Новый Соответствие;
	ПараметрыОСВПоСчету.Вставить("ИмяОбъекта", "ОборотноСальдоваяВедомостьПоСчету" + ИмяРегистраБухгалтерии);
	ПараметрыОСВПоСчету.Вставить("ЗаполнитьПоУмолчанию", Истина);
	ПараметрыОСВПоСчету.Вставить("Счет", СчетДляРасшифровки);
	Если ВВалютеСценария <> Неопределено Тогда
		ПараметрыОСВПоСчету.Вставить("ВВалютеСценария", ВВалютеСценария);
	КонецЕсли;

	ПараметрыКарточкиСчета = Новый Соответствие;
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета" + ИмяРегистраБухгалтерии);
	ПараметрыКарточкиСчета.Вставить("Счет", СчетДляРасшифровки);
	
	ПараметрыАнализСчета = Новый Соответствие;
	ПараметрыАнализСчета.Вставить("ИмяОбъекта", "АнализСчета" + ИмяРегистраБухгалтерии);
	ПараметрыАнализСчета.Вставить("ЗаполнитьПоУмолчанию", Истина);
	ПараметрыАнализСчета.Вставить("Счет", СчетДляРасшифровки);
	Если ВВалютеСценария <> Неопределено Тогда
		ПараметрыАнализСчета.Вставить("ВВалютеСценария", ВВалютеСценария);
	КонецЕсли;
	
	ПараметрыОборотыСчетаМесяц = Новый Соответствие;
	ПараметрыОборотыСчетаМесяц.Вставить("ИмяОбъекта", "ОборотыСчета" + ИмяРегистраБухгалтерии);
	ПараметрыОборотыСчетаМесяц.Вставить("ЗаполнитьПоУмолчанию", Истина);
	ПараметрыОборотыСчетаМесяц.Вставить("Счет", СчетДляРасшифровки);
	ПараметрыОборотыСчетаМесяц.Вставить("Период", "МЕСЯЦ");
	ПараметрыОборотыСчетаМесяц.Вставить("ВсеПериоды",  Истина);
	Если ВВалютеСценария <> Неопределено Тогда
		ПараметрыОборотыСчетаМесяц.Вставить("ВВалютеСценария", ВВалютеСценария);
	КонецЕсли;
	
	ПараметрыОборотыСчетаДень = Новый Соответствие;
	ПараметрыОборотыСчетаДень.Вставить("ИмяОбъекта", "ОборотыСчета" + ИмяРегистраБухгалтерии);
	ПараметрыОборотыСчетаДень.Вставить("ЗаполнитьПоУмолчанию", Истина);
    ПараметрыОборотыСчетаДень.Вставить("Счет", СчетДляРасшифровки);	
	ПараметрыОборотыСчетаДень.Вставить("Период",  "ДЕНЬ");
	ПараметрыОборотыСчетаДень.Вставить("ВсеПериоды",  Ложь);
	Если ВВалютеСценария <> Неопределено Тогда
		ПараметрыОборотыСчетаДень.Вставить("ВВалютеСценария", ВВалютеСценария);
	КонецЕсли;

	СписокРасшифровки = Новый СписокЗначений;
	ИмяГруппировки = Выборка.Группировка(); 
	
	Если Лев(ИмяГруппировки, СтрДлина(ИмяГруппировки) - 1) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(ИмяГруппировки, Выборка[ИмяГруппировки]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + Выборка.СчетПредставление);
		
	ИначеЕсли ИмяГруппировки = "Счет" Тогда

		СписокРасшифровки.Добавить(ПараметрыОСВПоСчету,    "ОСВ по счету " + Выборка.СчетПредставление);
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + Выборка.СчетПредставление);
		СписокРасшифровки.Добавить(ПараметрыАнализСчета,   "Анализ счета " + Выборка.СчетПредставление);
		
		Если НЕ (Месяц(ДатаНач) = Месяц(ДатаКон) И Год(ДатаНач) = Год(ДатаКон))
			ИЛИ (ДатаНач = '00010101' И ДатаКон = '00010101') Тогда
			
			СписокРасшифровки.Добавить(ПараметрыОборотыСчетаМесяц,  "Обороты счета " + Выборка.СчетПредставление + " по месяцам");
			
		КонецЕсли;
		
		СписокРасшифровки.Добавить(ПараметрыОборотыСчетаДень,  "Обороты счета " + Выборка.СчетПредставление + " по дням");
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;
	
КонецПроцедуры

// процедура Выводит данные по валютам
Процедура абс_ВывестиДанныеПоВалютамОборотноСальдовойВедомости(СтруктураПараметров, ОбластьСтрокаПоказателяСчет, Выборка, 
	ДокументРезультат, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, Знач Отступ)
	
	// Если по валютам,
	Если СтруктураПараметров.СтруктураОграничений.ПоВалютам Тогда

		ВыборкаПоВалютам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			
		Пока ВыборкаПоВалютам.Следующий() Цикл

			ОбластьСтрокаПоказателяСчет.Параметры.Заполнить(Выборка);
			ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "Валюта " + ВыборкаПоВалютам["ВалютаПредставление"];

			// Заполнение параметров расшифровки
			абс_ЗаполнитьПараметрыРасшифровкиОборотноСальдовойВедомости(СтруктураПараметров.СтруктураОграничений.ДатаНач, 
				СтруктураПараметров.СтруктураОграничений.ДатаКон, СтруктураПараметров.СтруктураОграничений.ИмяРегистраБухгалтерии,
				ОбластьСтрокаПоказателяСчет, Выборка, , , СтруктураПараметров.СтруктураОграничений.ВВалютеСценария);

			ОбластьСтрокаПоказателяСчет.Область(1, 4).Отступ = Отступ + 1;

			ДокументРезультат.Вывести(ОбластьСтрокаПоказателяСчет, Выборка.Уровень());
				
			абс_ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, ВыборкаПоВалютам, ВыборкаПоВалютам.Счет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров);

		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

// Выводит показатели
//
// Параметры:
//	ДокументРезультат - таблица отчета
//	Макет - используемый макет
//	Результат - выборка
//	Счет - счет выборки
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//	СтрокаРазвернутогоСальдо - строка с выборкой - развернутым сальдо по счету
//	СтруктураОбщийИтог - структура, в которой накапливается общий итог.
//
Процедура абс_ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, Счет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО,СтруктураПараметров)

	ВыведеноПоказателей = 0;	
	
	ИмяГруппировки = Выборка.Группировка();
	
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл

		// Сумму в валюте выводим только по группировке Валюта
		Если ИмяПоказателя = "ВалютнаяСумма" И ИмяГруппировки <> "Валюта" Тогда
			Продолжить;			
		КонецЕсли;
		
		Если ИмяПоказателя = "НДС" И Счет.НДС = Ложь Тогда
			Продолжить;
		КонецЕсли;

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		ВыведеноПоказателей = ВыведеноПоказателей + 1;
		
		Если ВыведеноПоказателей > 1 Тогда
			// без подчеркивания вверху
			Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		Иначе
			// есть подчеркивание вверху
			Область = СтруктураПараметров.ОбластьСтрокаЧисла;
		КонецЕсли;

		ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];

		СчетВид = Выборка.Счет.Вид;
		Если СтрокаРазвернутогоСальдо = Неопределено Тогда

			Если СчетВид = ВидСчета.Активный Тогда
				НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстаток"];
				НачальныйОстатокКт = 0;
				КонечныйОстатокДт  = Выборка[ИмяПоказателя + "КонечныйОстаток"];
				КонечныйОстатокКт  = 0;
			ИначеЕсли СчетВид = Видсчета.Пассивный Тогда
				НачальныйОстатокКт = -Выборка[ИмяПоказателя + "НачальныйОстаток"];
				НачальныйОстатокДт = 0;
				КонечныйОстатокКт  = -Выборка[ИмяПоказателя + "КонечныйОстаток"];
				КонечныйОстатокДт  = 0;
			Иначе
				НачальныйОстатокДт = ?(Выборка[ИмяПоказателя + "НачальныйОстаток"]>=0,Выборка[ИмяПоказателя + "НачальныйОстаток"],0);
				НачальныйОстатокКт = ?(Выборка[ИмяПоказателя + "НачальныйОстаток"]<0,-Выборка[ИмяПоказателя + "НачальныйОстаток"],0);
				КонечныйОстатокДт  = ?(Выборка[ИмяПоказателя + "КонечныйОстаток"]>=0,Выборка[ИмяПоказателя + "КонечныйОстаток"],0);
				КонечныйОстатокКт  = ?(Выборка[ИмяПоказателя + "КонечныйОстаток"]<0,-Выборка[ИмяПоказателя + "КонечныйОстаток"],0);
            КонецЕсли;

		Иначе

			// Спозиционируемся на самом верхнем итоге
			ВыборкаОбщиеИтоги = СтрокаРазвернутогоСальдо.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаОбщиеИтоги.НайтиСледующий(Новый Структура("ДЗО",Выборка.ДЗО)) Тогда
				НачальныйОстатокДт = ВыборкаОбщиеИтоги[ИмяПоказателя + "НачальныйОстатокДт"];
				НачальныйОстатокКт = ВыборкаОбщиеИтоги[ИмяПоказателя + "НачальныйОстатокКт"];
				КонечныйОстатокДт  = ВыборкаОбщиеИтоги[ИмяПоказателя + "КонечныйОстатокДт"];
				КонечныйОстатокКт  = ВыборкаОбщиеИтоги[ИмяПоказателя + "КонечныйОстатокКт"];
			Иначе
				НачальныйОстатокДт = 0;
				НачальныйОстатокКт = 0;
				КонечныйОстатокДт  = 0;
				КонечныйОстатокКт  = 0;
			КонецЕсли;

		КонецЕсли;

		// Накопление итогов по счетам
		НужноДополнятьИтоги = (ИмяГруппировки = "Счет") И (Выборка.Уровень() = 1);
		Если СтруктураПараметров.СтруктураОграничений.ИспользоватьОграниченияПоЗабалансовымСчетам = Истина Тогда 			
			
			НужноДополнятьИтоги = НужноДополнятьИтоги И	НЕ Выборка.СчетЗабалансовый;
			
		КонецЕсли;
			
		Если НужноДополнятьИтоги Тогда

			абс_ДополнитьСтруктуруХраненияИтоговОборотка(ИмяПоказателя, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО,
				НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт,
				ОборотДт, ОборотКт);
				
		КонецЕсли;

		// заполняет данными область вывода
		абс_ЗаполнитьДаннымОблатьВыводаОборотка(Область, ФорматПоказателя, 
			НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт,
			КонечныйОстатокКт, ОборотДт, ОборотКт);
			
		Если ВыведеноПоказателей > 1 Тогда

			ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "Валютная сумма";
			Иначе
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "";
			КонецЕсли;
				
            ВыведеннаяОбласть = ДокументРезультат.Вывести(ОбластьСтрокаПоказателяСчет);
			
			ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии;
			
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
				
	КонецЦикла;

КонецПроцедуры

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги,
//	ПоследнийВыведенныйСчет - последний выведенный счет,
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура абс_ВывестиГруппировкуОборотноСальдовойВедомости(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
	СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров, 
	ОтборСубконто)

	Пока Выборка.Следующий() Цикл

		ИмяГруппировки = Выборка.Группировка();
		
		// Итоги более высокого уровня по счету - пропускаем (он уже выведен)
		Если ИмяГруппировки = "Счет" Тогда

			// При выводе субсчетов не делаем отступы
			Если СброситьСдвигУровня Тогда
				
				СброситьСдвигУровня = Ложь;
				СдвигУровня = 0;
				
			КонецЕсли;
			
			Отступ = 0;
			СдвигУровня = СдвигУровня + 1;

			// Уже выведенные счета не выводим
			Если ПоследнийВыведенныйСчет = Выборка.Счет 
				ИЛИ ПоследнийВыведенныйСчет.ПринадлежитЭлементу(Выборка.Счет) Тогда
				
				абс_ВывестиВложеннуюГруппировкуОборотноСальдовойВедомости(Выборка, ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
					СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров, ОтборСубконто);
					
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			Отступ = Макс(Выборка.Уровень()  - СдвигУровня, 0);
			СброситьСдвигУровня = Истина;
			
		КонецЕсли;
		
		ОбластьСтрокаСчет = СтруктураПараметров.ОбластьСтрокаСчет;
		ОбластьСтрокаСчет.Параметры.Заполнить(Выборка);
		
		ВыводимаяОбласть = ОбластьСтрокаСчет;

		// Заполнение параметров расшифровки
		Если ИмяГруппировки = "Счет" Тогда
			
			абс_ЗаполнитьПараметрыРасшифровкиОборотноСальдовойВедомости(СтруктураПараметров.СтруктураОграничений.ДатаНач, 
				СтруктураПараметров.СтруктураОграничений.ДатаКон, СтруктураПараметров.СтруктураОграничений.ИмяРегистраБухгалтерии,
				ОбластьСтрокаСчет, Выборка, , , СтруктураПараметров.СтруктураОграничений.ВВалютеСценария);
				
		КонецЕсли;

		Если Лев(ИмяГруппировки, СтрДлина(ИмяГруппировки) - 1) = "Субконто" тогда

			// Субконто, которых нет, равны NULL
			Если Выборка[ИмяГруппировки] = NULL Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;

			ОбластьСтрокаПоказателяСчет.Параметры.Заполнить(Выборка);

			ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки + "Представление"];
			
			ВыводимаяОбласть = ОбластьСтрокаПоказателяСчет;

			абс_ЗаполнитьПараметрыРасшифровкиОборотноСальдовойВедомости(СтруктураПараметров.СтруктураОграничений.ДатаНач, 
				СтруктураПараметров.СтруктураОграничений.ДатаКон, СтруктураПараметров.СтруктураОграничений.ИмяРегистраБухгалтерии,
				ВыводимаяОбласть, Выборка, ОтборСубконто, ПоследнийВыведенныйСчет, СтруктураПараметров.СтруктураОграничений.ВВалютеСценария);

			ВыводимаяОбласть.Область(1, 4).Отступ = Отступ;
			
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ВыводимаяОбласть.Область(1, 4).Шрифт = Новый Шрифт(ВыводимаяОбласть.Область(1, 4).Шрифт,,,,Истина);
			Иначе
				ВыводимаяОбласть.Область(1, 4).Шрифт = Новый Шрифт(ВыводимаяОбласть.Область(1, 4).Шрифт,,,,Ложь);
			КонецЕсли;

		КонецЕсли;

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень + Выборка.Уровень());
		
		абс_ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, Выборка.Счет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров);

		// вывод данных по валютам
		ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
		абс_ВывестиДанныеПоВалютамОборотноСальдовойВедомости(СтруктураПараметров, ОбластьСтрокаПоказателяСчет, Выборка, ДокументРезультат, 
			СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, Отступ);
		
		абс_ВывестиВложеннуюГруппировкуОборотноСальдовойВедомости(Выборка, ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
			СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров, ОтборСубконто);
											
	КонецЦикла;

КонецПроцедуры

// процедура выводит текущие данные оборотки в область вывода
Процедура абс_ЗаполнитьДаннымОблатьВыводаОборотка(Область, Знач ФорматПоказателя, 
	Знач НачальныйОстатокДт, Знач НачальныйОстатокКт, 
	Знач КонечныйОстатокДт, Знач КонечныйОстатокКт, 
	Знач ОборотДт, Знач ОборотКт)
	
	Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
	Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
	Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт,  ФорматПоказателя);
	Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт,  ФорматПоказателя);
	Область.Параметры.ОборотДт           = Формат(ОборотДт,           ФорматПоказателя);
	Область.Параметры.ОборотКт           = Формат(ОборотКт,           ФорматПоказателя);
	
КонецПроцедуры

//Функция возвращает можно ил использовать составной запрос для детализации по субконто
Функция абс_ОпределитьМожноИспользоватьСоставнойЗапросПоСубконто(ПравилаСчета)
	
	// Определим признак использования составного запроса
	Для Каждого СтрокаПоСубконто Из ПравилаСчета.РазворотПоСубконто Цикл
		
		ВидСубконто = абс_ВернутьСубконтоПоИмени(ПравилаСчета.Счет, СтрокаПоСубконто.Имя);
		
		Если (ВидСубконто <> Неопределено)
			 И (ВидСубконто.ВидСубконто.ТипЗначения.Типы().Количество() > 10) Тогда
			 
			Возврат Ложь;
			
		КонецЕсли;
								
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

//Функция возвращает видсубконто по имени
Функция абс_ВернутьСубконтоПоИмени(Знач Счет, Знач ИмяСубконто)
	
	// Найдем соответствующий вид субконто
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
			
		Если "Субконто" + ВидСубконто.НомерСтроки = ИмяСубконто Тогда
				
			Возврат ВидСубконто;
				
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция абс_ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию()
	
	ТипДетализацииПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
	
	Если ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Иерархия;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
	Иначе
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
КонецФункции

// процедура добавляет в итоговое хранилище сумм текущие данных
Процедура абс_ДополнитьСтруктуруХраненияИтоговОборотка(Знач ИмяПоказателя, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, 
	Знач НачальныйОстатокДт, Знач НачальныйОстатокКт, Знач КонечныйОстатокДт, Знач КонечныйОстатокКт,
	Знач ОборотДт, Знач ОборотКт)
	
	СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"] = СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"] + НачальныйОстатокДт;
	СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"] = СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"] + НачальныйОстатокКт;
	СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт"] =  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт" ] + КонечныйОстатокДт;
	СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт"] =  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт" ] + КонечныйОстатокКт;
	СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"] =           СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"]           + ОборотДт;
	СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"] =           СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"]           + ОборотКт;
	
	СтруктураОбщийИтогДЗО[ИмяПоказателя + "НачальныйОстатокДт"] = СтруктураОбщийИтогДЗО[ИмяПоказателя + "НачальныйОстатокДт"] + НачальныйОстатокДт;
	СтруктураОбщийИтогДЗО[ИмяПоказателя + "НачальныйОстатокКт"] = СтруктураОбщийИтогДЗО[ИмяПоказателя + "НачальныйОстатокКт"] + НачальныйОстатокКт;
	СтруктураОбщийИтогДЗО[ИмяПоказателя + "КонечныйОстатокДт"] =  СтруктураОбщийИтогДЗО[ИмяПоказателя + "КонечныйОстатокДт" ] + КонечныйОстатокДт;
	СтруктураОбщийИтогДЗО[ИмяПоказателя + "КонечныйОстатокКт"] =  СтруктураОбщийИтогДЗО[ИмяПоказателя + "КонечныйОстатокКт" ] + КонечныйОстатокКт;
	СтруктураОбщийИтогДЗО[ИмяПоказателя + "ОборотДт"] =           СтруктураОбщийИтогДЗО[ИмяПоказателя + "ОборотДт"]           + ОборотДт;
	СтруктураОбщийИтогДЗО[ИмяПоказателя + "ОборотКт"] =           СтруктураОбщийИтогДЗО[ИмяПоказателя + "ОборотКт"]           + ОборотКт;

КонецПроцедуры

//процедура выводит вложенную группировку
Процедура абс_ВывестиВложеннуюГруппировкуОборотноСальдовойВедомости(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
	СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров, ОтборСубконто)
	
	Если ИндексТекущейГруппировки + 1 >= МассивГруппировок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	абс_ВывестиГруппировкуОборотноСальдовойВедомости(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
						ИндексТекущейГруппировки + 1, МассивГруппировок, Уровень, 
						СдвигУровня, СброситьСдвигУровня, ПоследнийВыведенныйСчет, 
						СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураОбщийИтогДЗО, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто));
		
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНОЙ ФОРМЫ ОТЧЕТА
//

// Формирует табличный документ с заголовком отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Если Не ЗначениеЗаполнено(ВидУчета) Тогда
		ОписаниеПериода = ОписаниеПериода + " По всем видам учета.";
	Иначе
		Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
			СтрВидУчета = "налоговый учет";
		ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
			СтрВидУчета = "постоянные разницы";
		ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
			СтрВидУчета = "временные разницы";
		КонецЕсли;
			
		ОписаниеПериода = ОписаниеПериода + " Вид учета: "+СтрВидУчета+".";
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ОборотноСальдоваяВедомость");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	Возврат ЗаголовокОтчета;
	
КонецФункции // СформироватьЗаголовок()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	абс_СформироватьОтчетОборотноСальдовойВедомости(ЭтотОбъект, ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, 
		Ложь, Ложь, , ВидУчета); 
			
КонецПроцедуры // СформироватьОтчет()

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;
	
	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("ВидУчета", ВидУчета);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Возврат МассивПоказателей;
		
КонецФункции

Функция ЗаголовокОтчета() Экспорт
	Возврат "Оборотно-сальдовая ведомость (налоговый учет) (с детализацией по ДЗО)";
КонецФункции // ЗаголовокОтчета()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

ИмяРегистраБухгалтерии = "Налоговый";

БухгалтерскиеОтчеты.СоздатьКолонкиУПравилВыводаИтоговИПравилаРазвернутогоСальдо(ПравилаВыводаИтогов, ПравилаРазвернутогоСальдо, ИмяРегистраБухгалтерии);

#КонецЕсли