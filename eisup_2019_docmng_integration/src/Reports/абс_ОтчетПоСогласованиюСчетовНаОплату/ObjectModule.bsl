#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	//УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Объект КАК Объект,
	|	ВложенныйЗапрос.ВидБизнесПроцесса КАК ВидБизнесПроцесса,
	|	ВложенныйЗапрос.СтатусОбъекта КАК СтатусОбъекта,
	|	ВложенныйЗапрос.ПодразделениеИнициатора КАК ПодразделениеИнициатора,
	|	ВложенныйЗапрос.Инициатор КАК Инициатор,
	|	ВложенныйЗапрос.КолвоДнейСтатуса КАК КолвоДнейСтатуса
	|{ВЫБРАТЬ
	|	Объект.*,
	|	ВидБизнесПроцесса.*,
	|	СтатусОбъекта.*,
	|	ПодразделениеИнициатора.*,
	|	Инициатор.*,
	|	КолвоДнейСтатуса}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(ДокументыПоБПИСтатусам.Объект КАК Документ.абс_СчетНаОплату) КАК Объект,
	|		ДокументыПоБПИСтатусам.ВидБизнесПроцесса КАК ВидБизнесПроцесса,
	|		ДокументыПоБПИСтатусам.Статус КАК СтатусОбъекта,
	|		ДокументыПоБПИСтатусам.Ответственный КАК Инициатор,
	|		ДокументыПоБПИСтатусам.Ответственный.абс_Сотрудник.ПодразделениеОрганизации КАК ПодразделениеИнициатора,
	|		РАЗНОСТЬДАТ(ДокументыПоБПИСтатусам.Период, &ТекущаяДата, ДЕНЬ) КАК КолвоДнейСтатуса
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Контрагенты.Ссылка КАК Объект,
	|			ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеКонтрагентов) КАК ВидБизнесПроцесса,
	|			Контрагенты.абс_СтатусКонтрагента КАК Статус,
	|			ИсторияСтатусовКонтрагенты.Период КАК Период,
	|			Контрагенты.абс_Ответственный КАК Ответственный
	|		ИЗ
	|			Справочник.Контрагенты КАК Контрагенты
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(абс_ИзменениеСтатусовКонтрагентов.Период) КАК Период,
	|					абс_ИзменениеСтатусовКонтрагентов.Контрагент КАК Контрагент,
	|					абс_ИзменениеСтатусовКонтрагентов.СтатусКонтрагента КАК СтатусКонтрагента
	|				ИЗ
	|					РегистрСведений.абс_ИзменениеСтатусовКонтрагентов КАК абс_ИзменениеСтатусовКонтрагентов
	|				
	|				СГРУППИРОВАТЬ ПО
	|					абс_ИзменениеСтатусовКонтрагентов.Контрагент,
	|					абс_ИзменениеСтатусовКонтрагентов.СтатусКонтрагента) КАК ИсторияСтатусовКонтрагенты
	|				ПО Контрагенты.Ссылка = ИсторияСтатусовКонтрагенты.Контрагент
	|					И Контрагенты.абс_СтатусКонтрагента = ИсторияСтатусовКонтрагенты.СтатусКонтрагента
	|		ГДЕ
	|			(НЕ Контрагенты.абс_СтатусКонтрагента В (ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Подготовка), ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Активный), ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Закрыт), ЗНАЧЕНИЕ(Перечисление.абсСтатусыКонтрагентов.Архив)))
	|			И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			абс_ЗакупочныйЗаказ.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.согласованиеЗакупочныхЗаказов),
	|			абс_ЗакупочныйЗаказ.Статус,
	|			ИсторияСтатусовЗакупочныйЗаказ.Период,
	|			абс_ЗакупочныйЗаказ.Ответственный
	|		ИЗ
	|			Документ.абс_ЗакупочныйЗаказ КАК абс_ЗакупочныйЗаказ
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					абс_ИзменениеСтатусовЗакупочногоЗаказа.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
	|					абс_ИзменениеСтатусовЗакупочногоЗаказа.СтатусЗакупочногоЗаказа КАК СтатусЗакупочногоЗаказа,
	|					МАКСИМУМ(абс_ИзменениеСтатусовЗакупочногоЗаказа.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.абс_ИзменениеСтатусовЗакупочногоЗаказа КАК абс_ИзменениеСтатусовЗакупочногоЗаказа
	|				
	|				СГРУППИРОВАТЬ ПО
	|					абс_ИзменениеСтатусовЗакупочногоЗаказа.ЗакупочныйЗаказ,
	|					абс_ИзменениеСтатусовЗакупочногоЗаказа.СтатусЗакупочногоЗаказа) КАК ИсторияСтатусовЗакупочныйЗаказ
	|				ПО абс_ЗакупочныйЗаказ.Ссылка = ИсторияСтатусовЗакупочныйЗаказ.ЗакупочныйЗаказ
	|					И абс_ЗакупочныйЗаказ.Статус = ИсторияСтатусовЗакупочныйЗаказ.СтатусЗакупочногоЗаказа
	|		ГДЕ
	|			(НЕ абс_ЗакупочныйЗаказ.Статус В (ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Подготовка), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Отменен), ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Закрыт)))
	|			И абс_ЗакупочныйЗаказ.Проведен = ИСТИНА
	|			И ВЫБОР
	|					КОГДА абс_ЗакупочныйЗаказ.ТипЗакупочногоЗаказа = ЗНАЧЕНИЕ(Перечисление.абсТипЗакупочногоЗаказа.Оборудование)
	|						ТОГДА абс_ЗакупочныйЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.абсСтатусЗакупочногоЗаказа.Согласован)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			абс_СчетНаОплату.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеСчетовНаОплату),
	|			абс_СчетНаОплату.СтатусСчета,
	|			ИсторияСтатусовСчетНаОплату.Период,
	|			абс_СчетНаОплату.Ответственный
	|		ИЗ
	|			Документ.абс_СчетНаОплату КАК абс_СчетНаОплату
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					абс_ИзменениеСтатусовСчетаНаОплату.СчетНаОплату КАК СчетНаОплату,
	|					абс_ИзменениеСтатусовСчетаНаОплату.СтатусСчетаНаОплату КАК СтатусСчетаНаОплату,
	|					МАКСИМУМ(абс_ИзменениеСтатусовСчетаНаОплату.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.абс_ИзменениеСтатусовСчетаНаОплату КАК абс_ИзменениеСтатусовСчетаНаОплату
	|				
	|				СГРУППИРОВАТЬ ПО
	|					абс_ИзменениеСтатусовСчетаНаОплату.СчетНаОплату,
	|					абс_ИзменениеСтатусовСчетаНаОплату.СтатусСчетаНаОплату) КАК ИсторияСтатусовСчетНаОплату
	|				ПО абс_СчетНаОплату.Ссылка = ИсторияСтатусовСчетНаОплату.СчетНаОплату
	|					И абс_СчетНаОплату.СтатусСчета = ИсторияСтатусовСчетНаОплату.СтатусСчетаНаОплату
	|		ГДЕ
	|			(НЕ абс_СчетНаОплату.СтатусСчета В (ЗНАЧЕНИЕ(Перечисление.абсСтатусыСчетов.Подготовка)))
	|			И абс_СчетНаОплату.Проведен = ИСТИНА
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Номенклатуры.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.СогласованиеНоменклатуры),
	|			Номенклатуры.абс_СтатусНоменклатуры,
	|			ИсторияСтатусовНоменклатура.Период,
	|			Номенклатуры.абс_Ответственный
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					абс_ИзменениеСтатусовНоменклатуры.Номенклатура КАК Номенклатура,
	|					абс_ИзменениеСтатусовНоменклатуры.СтатусНоменклатуры КАК СтатусНоменклатуры,
	|					МАКСИМУМ(абс_ИзменениеСтатусовНоменклатуры.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.абс_ИзменениеСтатусовНоменклатуры КАК абс_ИзменениеСтатусовНоменклатуры
	|				
	|				СГРУППИРОВАТЬ ПО
	|					абс_ИзменениеСтатусовНоменклатуры.Номенклатура,
	|					абс_ИзменениеСтатусовНоменклатуры.СтатусНоменклатуры) КАК ИсторияСтатусовНоменклатура
	|				ПО Номенклатуры.Ссылка = ИсторияСтатусовНоменклатура.Номенклатура
	|					И Номенклатуры.абс_СтатусНоменклатуры = ИсторияСтатусовНоменклатура.СтатусНоменклатуры
	|		ГДЕ
	|			(НЕ Номенклатуры.абс_СтатусНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Подготовка), ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Архив), ЗНАЧЕНИЕ(Перечисление.абс_СтатусыНоменклатуры.Использование)))
	|			И Номенклатуры.ПометкаУдаления = ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			абс_РеклассификацияБюджета.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.абсВидыБизнеспроцессовТТК.РекласификацияБюджета),
	|			абс_РеклассификацияБюджета.Статус,
	|			ИсторияСтатусовРекласификацияБюджета.Период,
	|			абс_РеклассификацияБюджета.Ответственный
	|		ИЗ
	|			Документ.абс_РеклассификацияБюджета КАК абс_РеклассификацияБюджета
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					абс_ИзменениеСтатусовРекласификацииБюджета.РекласификацияБюджета КАК РекласификацияБюджета,
	|					абс_ИзменениеСтатусовРекласификацииБюджета.СтатусРекласификацииБюджета КАК СтатусРекласификацииБюджета,
	|					МАКСИМУМ(абс_ИзменениеСтатусовРекласификацииБюджета.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.абс_ИзменениеСтатусовРекласификацииБюджета КАК абс_ИзменениеСтатусовРекласификацииБюджета
	|				
	|				СГРУППИРОВАТЬ ПО
	|					абс_ИзменениеСтатусовРекласификацииБюджета.РекласификацияБюджета,
	|					абс_ИзменениеСтатусовРекласификацииБюджета.СтатусРекласификацииБюджета) КАК ИсторияСтатусовРекласификацияБюджета
	|				ПО абс_РеклассификацияБюджета.Ссылка = ИсторияСтатусовРекласификацияБюджета.РекласификацияБюджета
	|					И абс_РеклассификацияБюджета.Статус = ИсторияСтатусовРекласификацияБюджета.СтатусРекласификацииБюджета
	|		ГДЕ
	|			(НЕ абс_РеклассификацияБюджета.Статус В (ЗНАЧЕНИЕ(Перечисление.абс_СтатусыРекласификацииБюджета.Подготовка), ЗНАЧЕНИЕ(Перечисление.абс_СтатусыРекласификацииБюджета.Проведен)))
	|			И абс_РеклассификацияБюджета.Проведен = ИСТИНА
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			абс_ЗадачаВТехподдержку.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.абсВидыБизнесПроцессовТТК.ЗаявкиВПоддержку),
	|			абс_ЗадачаВТехподдержку.Статус,
	|			ИсторияСтатусовЗадачаВПоддержку.Период,
	|			абс_ЗадачаВТехподдержку.Инициатор
	|		ИЗ
	|			Документ.абс_ЗадачаВТехподдержку КАК абс_ЗадачаВТехподдержку
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					абс_ИзменениеСтатусовЗаявокВПоддержку.ЗаявкаВПоддержку КАК ЗаявкаВПоддержку,
	|					абс_ИзменениеСтатусовЗаявокВПоддержку.Статус КАК Статус,
	|					МАКСИМУМ(абс_ИзменениеСтатусовЗаявокВПоддержку.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.абс_ИзменениеСтатусовЗаявокВПоддержку КАК абс_ИзменениеСтатусовЗаявокВПоддержку
	|				
	|				СГРУППИРОВАТЬ ПО
	|					абс_ИзменениеСтатусовЗаявокВПоддержку.ЗаявкаВПоддержку,
	|					абс_ИзменениеСтатусовЗаявокВПоддержку.Статус) КАК ИсторияСтатусовЗадачаВПоддержку
	|				ПО абс_ЗадачаВТехподдержку.Ссылка = ИсторияСтатусовЗадачаВПоддержку.ЗаявкаВПоддержку
	|					И абс_ЗадачаВТехподдержку.Статус = ИсторияСтатусовЗадачаВПоддержку.Статус
	|		ГДЕ
	|			(НЕ абс_ЗадачаВТехподдержку.Статус В (ЗНАЧЕНИЕ(Перечисление.абс_СтатусыЗаявокВПоддержку.Подготовка), ЗНАЧЕНИЕ(Перечисление.абс_СтатусыЗаявокВПоддержку.Выполнена)))
	|			И абс_ЗадачаВТехподдержку.Проведен = ИСТИНА) КАК ДокументыПоБПИСтатусам
	|	ГДЕ
	|		РАЗНОСТЬДАТ(ДокументыПоБПИСтатусам.Период, &ТекущаяДата, ДЕНЬ) >= &ОграничениеКолвоДнейСтатуса
	|		И ДокументыПоБПИСтатусам.Объект ССЫЛКА Документ.абс_СчетНаОплату
	|		И ДокументыПоБПИСтатусам.Объект.Проведен) КАК ВложенныйЗапрос
	|{ГДЕ
	|	ВложенныйЗапрос.Объект.*,
	|	ВложенныйЗапрос.ВидБизнесПроцесса.*,
	|	ВложенныйЗапрос.СтатусОбъекта.*,
	|	ВложенныйЗапрос.ПодразделениеИнициатора.*,
	|	ВложенныйЗапрос.Инициатор.*,
	|	ВложенныйЗапрос.КолвоДнейСтатуса}
	|
	|УПОРЯДОЧИТЬ ПО
	|	КолвоДнейСтатуса УБЫВ
	|{УПОРЯДОЧИТЬ ПО
	|	Объект.*,
	|	ВидБизнесПроцесса.*,
	|	СтатусОбъекта.*,
	|	КолвоДнейСтатуса,
	|	ПодразделениеИнициатора.*,
	|	Инициатор.*}
	|ИТОГИ
	|	МАКСИМУМ(КолвоДнейСтатуса)
	|ПО
	|	ОБЩИЕ,
	|	ВидБизнесПроцесса,
	|	СтатусОбъекта,
	|	Объект,
	|	ПодразделениеИнициатора,
	|	Инициатор
	|{ИТОГИ ПО
	|	Объект.*,
	|	ВидБизнесПроцесса.*,
	|	СтатусОбъекта.*,
	|	ПодразделениеИнициатора.*,
	|	Инициатор.*,
	|	КолвоДнейСтатуса}";
	
	//// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Организация", "Организация", "Организация", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Проект", "Проект", "Проект", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Проекты);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Подразделение", "Подразделение", "Подразделение", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Поставщик", "Поставщик", "Поставщик", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Покупатель", "Покупатель", "Покупатель", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ДоговорПокупателя", "ДоговорПокупателя", "Договор покупателя", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Номенклатура", "Номенклатура", "Номенклатура", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ЗаказПокупателя", "ЗаказПокупателя", "Заказ покупателя", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ЗаказПокупателя", "ЗаказПокупателя", "Заказ покупателя", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ДокументОприходования", "ДокументОприходования", "Документ оприходования", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
		
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Объект"					, "Объект");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидБизнесПроцесса"		, "Вид бизнес-процесса");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатусОбъекта"			, "Статус счета");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Инициатор"				, "Инициатор");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПодразделениеИнициатора"	, "Подразделение инициатора");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КолвоДнейСтатуса"			, "Дней статуса");
		
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВалютнаяСумма"			, "Валютная сумма");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	//УниверсальныйОтчет.ДобавитьПоказатель("ВалютнаяСумма", "Валютная сумма", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("КолвоДнейСтатуса", "Дней статуса", Истина, "ЧЦ=5");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ВидБизнесПроцесса");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СтатусОбъекта");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПодразделениеИнициатора");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Инициатор");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Объект");
			
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("ВидБизнесПроцесса");
	УниверсальныйОтчет.ДобавитьОтбор("СтатусОбъекта");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("Инициатор"				, ТипРазмещенияИзмерений.Отдельно, 3);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ПодразделениеИнициатора"	, ТипРазмещенияИзмерений.Отдельно, 3);
		
	ОграничениеДнейСтатуса = 3;
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(НЕ ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон), ТекущаяДата(), УниверсальныйОтчет.ДатаКон), Ложь);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("НеВключатьНДСВСтоимостьПартий", ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий));
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТекущаяДата", ТекущаяДата());
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ОграничениеКолвоДнейСтатуса", ОграничениеДнейСтатуса);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли