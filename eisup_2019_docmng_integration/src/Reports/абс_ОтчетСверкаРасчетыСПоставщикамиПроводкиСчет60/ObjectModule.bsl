#Если Клиент Тогда
	
Перем мСчета60;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента,
	|	СУММА(-РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаРегВал,
	|	СУММА(-РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток) КАК СуммаРег
	|ПОМЕСТИТЬ ВТ_ВзаиморасчетыРегистр
	|ИЗ
	|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Остатки(
	|			&ТекДата,
	|			Организация = &Организация
	|				И СчетОплаты В ИЕРАРХИИ (&Сч60)) КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.Контрагент,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.ДоговорКонтрагента,
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизацииОстатки.СчетОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента,
	|	СУММА(-ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ) КАК СуммаОстатокДтВал,
	|	СУММА(-ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстатокДт
	|ПОМЕСТИТЬ ВТ_Взаиморасчеты_Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ТекДата, Счет В ИЕРАРХИИ (&Сч60), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов),
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты),
	|	ХозрасчетныйОстатки.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_ВзаиморасчетыРегистр.СчетОплаты ЕСТЬ NULL 
	|			ТОГДА ВТ_Взаиморасчеты_Проводки.Счет
	|		ИНАЧЕ ВТ_ВзаиморасчетыРегистр.СчетОплаты
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ВТ_ВзаиморасчетыРегистр.Контрагент ЕСТЬ NULL 
	|			ТОГДА ВТ_Взаиморасчеты_Проводки.Контрагент
	|		ИНАЧЕ ВТ_ВзаиморасчетыРегистр.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ВТ_Взаиморасчеты_Проводки.ДоговорКонтрагента ЕСТЬ NULL 
	|			ТОГДА ВТ_ВзаиморасчетыРегистр.ДоговорКонтрагента
	|		ИНАЧЕ ВТ_Взаиморасчеты_Проводки.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ВТ_Взаиморасчеты_Проводки.СуммаОстатокДтВал, 0) КАК СуммаОстатокДтВал,
	|	ЕСТЬNULL(ВТ_Взаиморасчеты_Проводки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
	|	ЕСТЬNULL(ВТ_ВзаиморасчетыРегистр.СуммаРегВал, 0) КАК СуммаРегВал,
	|	ЕСТЬNULL(ВТ_ВзаиморасчетыРегистр.СуммаРег, 0) КАК СуммаРег
	|ПОМЕСТИТЬ ВТ_ПроводкиРег
	|ИЗ
	|	ВТ_ВзаиморасчетыРегистр КАК ВТ_ВзаиморасчетыРегистр
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Взаиморасчеты_Проводки КАК ВТ_Взаиморасчеты_Проводки
	|		ПО ВТ_ВзаиморасчетыРегистр.Контрагент = ВТ_Взаиморасчеты_Проводки.Контрагент
	|			И ВТ_ВзаиморасчетыРегистр.ДоговорКонтрагента = ВТ_Взаиморасчеты_Проводки.ДоговорКонтрагента
	|			И ВТ_ВзаиморасчетыРегистр.СчетОплаты = ВТ_Взаиморасчеты_Проводки.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроводкиРег.Счет,
	|	ВТ_ПроводкиРег.Контрагент,
	|	ВТ_ПроводкиРег.ДоговорКонтрагента,
	|	СУММА(ВТ_ПроводкиРег.СуммаОстатокДтВал) КАК СуммаОстатокДтВал,
	|	СУММА(ВТ_ПроводкиРег.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	СУММА(ВТ_ПроводкиРег.СуммаРегВал) КАК СуммаРегВал,
	|	СУММА(ВТ_ПроводкиРег.СуммаРег) КАК СуммаРег,
	|	СУММА(ВТ_ПроводкиРег.СуммаОстатокДтВал - ВТ_ПроводкиРег.СуммаРегВал) КАК СуммаОтклоненияВал,
	|	СУММА(ВТ_ПроводкиРег.СуммаОстатокДт - ВТ_ПроводкиРег.СуммаРег) КАК СуммаОтклонения
	|{ВЫБРАТЬ
	|	Счет.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	СуммаОстатокДтВал,
	|	СуммаОстатокДт,
	|	СуммаРегВал,
	|	СуммаРег,
	|	СуммаОтклоненияВал,
	|	СуммаОтклонения}
	|ИЗ
	|	ВТ_ПроводкиРег КАК ВТ_ПроводкиРег
	|ГДЕ
	|	(ВТ_ПроводкиРег.СуммаОстатокДтВал - ВТ_ПроводкиРег.СуммаРегВал <> 0
	|			ИЛИ ВТ_ПроводкиРег.СуммаОстатокДт - ВТ_ПроводкиРег.СуммаРег <> 0)
	|{ГДЕ
	|	ВТ_ПроводкиРег.Счет.*,
	|	ВТ_ПроводкиРег.Контрагент.*,
	|	ВТ_ПроводкиРег.ДоговорКонтрагента.*,
	|	ВТ_ПроводкиРег.СуммаОстатокДтВал,
	|	ВТ_ПроводкиРег.СуммаОстатокДт,
	|	ВТ_ПроводкиРег.СуммаРегВал,
	|	ВТ_ПроводкиРег.СуммаРег,
	|	(ВТ_ПроводкиРег.СуммаОстатокДтВал - ВТ_ПроводкиРег.СуммаРегВал) КАК СуммаОтклоненияВал,
	|	(ВТ_ПроводкиРег.СуммаОстатокДт - ВТ_ПроводкиРег.СуммаРег) КАК СуммаОтклонения}
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПроводкиРег.Контрагент,
	|	ВТ_ПроводкиРег.ДоговорКонтрагента,
	|	ВТ_ПроводкиРег.Счет
	|{УПОРЯДОЧИТЬ ПО
	|	Счет.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*}
	|{ИТОГИ ПО
	|	Счет.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*}";
	
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	// Покупатель
	// ДоговорКонтрагента
	ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Контрагент", "Контрагент");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаКон", "Дата кон");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Счет", "Счет");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорПокупателя", "Договор покупателя");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаОстатокДт", "Сальдо по проводкам (" + ВалютаРегл + ")");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаРег", "Остаток по регистру (" + ВалютаРегл + ")");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаОстатокДтВал", "Сальдо по проводкам (Вал.)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаРегВал", "Остаток по регистру (Вал.)");	
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.    \
	
	ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
		
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаОстатокДтВал", "Сальдо по проводкам", Истина, "ЧЦ=15; ЧДЦ=2", "ВалютаДоговора", "Сальдо в валюте договора");	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаРегВал", "Остаток по регистру", Истина, "ЧЦ=15; ЧДЦ=2", "ВалютаДоговора", "Сальдо в валюте договора");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаОтклоненияВал", "Отклонение", Истина, "ЧЦ=15; ЧДЦ=2", "ВалютаДоговора", "Сальдо в валюте договора");
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаОстатокДт", "Сальдо по проводкам", Истина, "ЧЦ=15; ЧДЦ=2", "ВалютаРегл", "Сальдо в рублях");	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаРег", "Остаток по регистру", Истина, "ЧЦ=15; ЧДЦ=2", "ВалютаРегл", "Сальдо в рублях");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаОтклонения", "Отклонение", Истина, "ЧЦ=15; ЧДЦ=2", "ВалютаРегл", "Сальдо в рублях");

	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДатаКон");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СчетРодитель");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");

	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьОтбор("Организация");
	//УниверсальныйОтчет.ДобавитьОтбор("Подразделение");
	//УниверсальныйОтчет.ДобавитьОтбор("Поставщик");
	//УниверсальныйОтчет.ДобавитьОтбор("Покупатель");
	//УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	УниверсальныйОтчет.ДобавитьПорядок("Контрагент");
	УниверсальныйОтчет.ДобавитьПорядок("ДоговорКонтрагента");
	УниверсальныйОтчет.ДобавитьПорядок("Счет");
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
	УниверсальныйОтчет.РасширеннаяНастройка = Истина;
	
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Контрагент"					, ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Контрагент.Код"				, ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДоговорКонтрагента"			, ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДоговорКонтрагента.Код"		, ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Счет"						, ТипРазмещенияРеквизитовИзмерений.Отдельно);
		
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(НЕ ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон), ТекущаяДата(), УниверсальныйОтчет.ДатаКон), Ложь);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("НеВключатьНДСВСтоимостьПартий", ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий));
		
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Организация", Организация);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Сч60", мСчета60);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТекДата", Новый Граница(КонецДня(УниверсальныйОтчет.ДатаКон), ВидГраницы.Включая));
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

УниверсальныйОтчет.мРежимВводаПериода = 1;

мСчета60 = Новый Массив;

мСчета60.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01"));
мСчета60.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"));
мСчета60.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.21"));
мСчета60.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.22"));
мСчета60.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.31"));
мСчета60.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.32"));

#КонецЕсли