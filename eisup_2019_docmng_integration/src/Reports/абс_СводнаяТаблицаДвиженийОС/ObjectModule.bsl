#Если Клиент Тогда
Перем Таб;	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	//УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОС КАК ОС,
	|	ВложенныйЗапрос.СуммаБУ01Нач КАК СуммаБУ01Нач,
	|	ВложенныйЗапрос.СуммаБУ01Кон КАК СуммаБУ01Кон,
	|	ВложенныйЗапрос.СуммаБУ01Приход КАК СуммаБУ01Приход,
	|	ВложенныйЗапрос.СуммаБУ01Расход КАК СуммаБУ01Расход,
	|	ВложенныйЗапрос.СуммаБУ02Нач КАК СуммаБУ02Нач,
	|	ВложенныйЗапрос.СуммаБУ02Кон КАК СуммаБУ02Кон,
	|	ВложенныйЗапрос.СуммаБУ02Приход КАК СуммаБУ02Приход,
	|	ВложенныйЗапрос.СуммаБУ02Расход КАК СуммаБУ02Расход,
	|	ВложенныйЗапрос.СуммаНУ01Нач КАК СуммаНУ01Нач,
	|	ВложенныйЗапрос.СуммаНУ01Кон КАК СуммаНУ01Кон,
	|	ВложенныйЗапрос.СуммаНУ01Приход КАК СуммаНУ01Приход,
	|	ВложенныйЗапрос.СуммаНУ01Расход КАК СуммаНУ01Расход,
	|	ВложенныйЗапрос.СуммаНу02Нач КАК СуммаНу02Нач,
	|	ВложенныйЗапрос.СуммаНУ02Кон КАК СуммаНУ02Кон,
	|	ВложенныйЗапрос.СуммаНУ02Приход КАК СуммаНУ02Приход,
	|	ВложенныйЗапрос.СуммаНУ02Расход КАК СуммаНУ02Расход,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаБУ01Нач, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаБУ02Нач, 0) КАК СуммаБУОСТНач,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаБУ01Кон, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаБУ02Кон, 0) КАК СуммаБУОСТКон,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаНУ01Нач, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаНу02Нач, 0) КАК СуммаНУОСТНач,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаНУ01Кон, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаНУ02Кон, 0) КАК СуммаНУОСТКон,
	|	ВложенныйЗапрос.Срок КАК Срок,
	|	ВложенныйЗапрос.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ВложенныйЗапрос.ОставшийсяСрок КАК ОставшийсяСрок,
	|	ВложенныйЗапрос.АмортизационнаяПремияВсего КАК АмортизационнаяПремия,
	|	ВложенныйЗапрос.НормаАмортизации КАК НормаАмортизации
	|{ВЫБРАТЬ
	|	ОС.*,
	|	СуммаБУ01Нач,
	|	СуммаБУ01Кон,
	|	СуммаБУ01Приход,
	|	СуммаБУ01Расход,
	|	СуммаБУ02Нач,
	|	СуммаБУ02Кон,
	|	СуммаБУ02Приход,
	|	СуммаБУ02Расход,
	|	СуммаНУ01Нач,
	|	СуммаНУ01Кон,
	|	СуммаНУ01Приход,
	|	СуммаНУ01Расход,
	|	СуммаНу02Нач,
	|	СуммаНУ02Кон,
	|	СуммаНУ02Приход,
	|	СуммаНУ02Расход,
	|	СуммаБУОСТНач,
	|	СуммаБУОСТКон,
	|	СуммаНУОСТНач,
	|	СуммаНУОСТКон,
	|	Срок,
	|	ПервоначальнаяСтоимость,
	|	ОставшийсяСрок,
	|	АмортизационнаяПремия,
	|	НормаАмортизации}
	|ИЗ
	|	(ВЫБРАТЬ
	|		Данные01БУ.ОС КАК ОС,
	|		Данные01БУ.СуммаНач КАК СуммаБУ01Нач,
	|		Данные01БУ.СуммаКон КАК СуммаБУ01Кон,
	|		Данные01БУ.СуммаПриход КАК СуммаБУ01Приход,
	|		Данные01БУ.СуммаРасход КАК СуммаБУ01Расход,
	|		0 КАК СуммаБУ02Нач,
	|		0 КАК СуммаБУ02Кон,
	|		0 КАК СуммаБУ02Приход,
	|		0 КАК СуммаБУ02Расход,
	|		0 КАК СуммаНУ01Нач,
	|		0 КАК СуммаНУ01Кон,
	|		0 КАК СуммаНУ01Приход,
	|		0 КАК СуммаНУ01Расход,
	|		0 КАК СуммаНу02Нач,
	|		0 КАК СуммаНУ02Кон,
	|		0 КАК СуммаНУ02Приход,
	|		0 КАК СуммаНУ02Расход,
	|		ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК Срок,
	|		ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|		ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) - РАЗНОСТЬДАТ(ЕСТЬNULL(Ввод.ДатаСостояния, &ПустаяДата), &ДатаКонца, МЕСЯЦ) КАК ОставшийсяСрок,
	|		0 КАК АмортизационнаяПремия,
	|		ВЫРАЗИТЬ(100 * (12 / ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 12)) КАК ЧИСЛО(10, 2)) КАК НормаАмортизации,
	|		NULL КАК АмортизационнаяПремияВсего
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.ОсновныеСредства) КАК ОС,
	|			ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНач,
	|			ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКон,
	|			ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаПриход,
	|			ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаРасход
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет = &Счет01БУ, , ) КАК ХозрасчетныйОстаткиИОбороты) КАК Данные01БУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|			ПО Данные01БУ.ОС = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|			ПО Данные01БУ.ОС = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|				СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния
	|			ИЗ
	|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|			ГДЕ
	|				СостоянияОСОрганизаций.Состояние = &Ввод) КАК Ввод
	|			ПО Данные01БУ.ОС = Ввод.ОсновноеСредство
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Данные02БУ.ОС,
	|		0,
	|		0,
	|		0,
	|		0,
	|		Данные02БУ.СуммаНач,
	|		Данные02БУ.СуммаКон,
	|		Данные02БУ.СуммаПриход,
	|		Данные02БУ.СуммаРасход,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.ОсновныеСредства) КАК ОС,
	|			ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНач,
	|			ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКон,
	|			ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаРасход,
	|			ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаПриход
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет = &Счет02БУ, , ) КАК ХозрасчетныйОстаткиИОбороты) КАК Данные02БУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Данные01НУ.ОС,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(Данные01НУ.СуммаНач, 0),
	|		ЕСТЬNULL(Данные01НУ.СуммаКон, 0),
	|		Данные01НУ.СуммаПриход,
	|		Данные01НУ.СуммаРасход,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		АмортПремияВсего.АмортизационнаяПремия
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(НалоговыйОстаткиИОбороты.Субконто1 КАК Справочник.ОсновныеСредства) КАК ОС,
	|			НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНач,
	|			НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКон,
	|			НалоговыйОстаткиИОбороты.СуммаОборотДт КАК СуммаПриход,
	|			НалоговыйОстаткиИОбороты.СуммаОборотКт КАК СуммаРасход
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет = &СЧет01НУ, , ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)) КАК НалоговыйОстаткиИОбороты) КАК Данные01НУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВЫРАЗИТЬ(НалоговыйОборотыДтКт.СубконтоДт1 КАК Справочник.ОсновныеСредства) КАК ОС,
	|				НалоговыйОборотыДтКт.СуммаОборот КАК АмортизационнаяПремия
	|			ИЗ
	|				РегистрБухгалтерии.Налоговый.ОборотыДтКт(, &ДатаКон, , СчетДт = &СЧетКВ, , , , ВидУчетаДт = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)) КАК НалоговыйОборотыДтКт) КАК АмортПремияВсего
	|			ПО Данные01НУ.ОС = АмортПремияВсего.ОС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапрос.ОС,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВложенныйЗапрос.СуммаНач,
	|		ВложенныйЗапрос.СуммаКон,
	|		ВложенныйЗапрос.СуммаПриход,
	|		ВложенныйЗапрос.СуммаРасход,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(НалоговыйОстаткиИОбороты.Субконто1 КАК Справочник.ОсновныеСредства) КАК ОС,
	|			НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНач,
	|			НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКон,
	|			НалоговыйОстаткиИОбороты.СуммаОборотДт КАК СуммаРасход,
	|			НалоговыйОстаткиИОбороты.СуммаОборотКт КАК СуммаПриход
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет = &Счет02НУ, , ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)) КАК НалоговыйОстаткиИОбороты) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
	|{ГДЕ
	|	ВложенныйЗапрос.ОС.*,
	|	ВложенныйЗапрос.Срок,
	|	ВложенныйЗапрос.ПервоначальнаяСтоимость}
	|ИТОГИ
	|	СУММА(СуммаБУ01Нач),
	|	СУММА(СуммаБУ01Кон),
	|	СУММА(СуммаБУ01Приход),
	|	СУММА(СуммаБУ01Расход),
	|	СУММА(СуммаБУ02Нач),
	|	СУММА(СуммаБУ02Кон),
	|	СУММА(СуммаБУ02Приход),
	|	СУММА(СуммаБУ02Расход),
	|	СУММА(СуммаНУ01Нач),
	|	СУММА(СуммаНУ01Кон),
	|	СУММА(СуммаНУ01Приход),
	|	СУММА(СуммаНУ01Расход),
	|	СУММА(СуммаНу02Нач),
	|	СУММА(СуммаНУ02Кон),
	|	СУММА(СуммаНУ02Приход),
	|	СУММА(СуммаНУ02Расход),
	|	СУММА(СуммаБУОСТНач),
	|	СУММА(СуммаБУОСТКон),
	|	СУММА(СуммаНУОСТНач),
	|	СУММА(СуммаНУОСТКон),
	|	МАКСИМУМ(Срок),
	|	СУММА(ПервоначальнаяСтоимость),
	|	МАКСИМУМ(ОставшийсяСрок),
	|	СУММА(АмортизационнаяПремия),
	|	МАКСИМУМ(НормаАмортизации)
	|ПО
	|	ОБЩИЕ,
	|	ОС
	|{ИТОГИ ПО
	|	ОС.*}";



	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	
	//КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НормаАмортизации", "Норма амортизации");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОставшийсяСрок", "Оставшийся срок");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПервоначальнаяСтоимость", "Первоначальная стоимость");

	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаПоступления", "Дата приобретения");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаВвода", "Дата ввода в эксплуатацию");

	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаНач", "Сумма на начало");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Поступление", "Поступление");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВводВЭксплуатацию", "Ввод в эксплуатацию (Дт счета 01)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПрочееВыбытие", "Прочее выбытие");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПрочееПеремещение", "Прочее перемещение (счета 07, 08)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаКон", "Сумма на конец"); 
	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяНач", "GM");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьПриход", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяПриход", "GM ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьРасход", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяРасход", "GM ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьКон", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяКон", "GM ");

	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Себестоимость", "Себестоимость");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяПрибыль", "Валовая прибыль");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Эффективность", "Эффективность, %");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Рентабельность", "Рентабельность, %");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	//ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	//УниверсальныйОтчет.ДобавитьПоказатель("Количество", "Ед. хранения", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	//УниверсальныйОтчет.ДобавитьПоказатель("КоличествоБазовыхЕдиниц", "Базовых ед.", Ложь, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	//УниверсальныйОтчет.ДобавитьПоказатель("КоличествоЕдиницОтчетов", "Ед. отчетов", Ложь, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьНач", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные","Начальные данные");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяНач", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные","Начальные данные");
	////УниверсальныйОтчет.ДобавитьПоказатель("Номер", "Номер п/п", Истина, "ЧЦ=15; ЧДЦ=2", "Объект строительства","Объект строительства");
	УниверсальныйОтчет.ДобавитьПоказатель("ПервоначальнаяСтоимость", "Первоначальная стоимость", Истина, "", "Показатели","Показатели");
	УниверсальныйОтчет.ДобавитьПоказатель("Срок", "Срок эксплуатации", Истина, "", "Показатели","Показатели");
	УниверсальныйОтчет.ДобавитьПоказатель("НормаАмортизации", "Норма амортизации", Истина, "", "Показатели","Показатели");
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Нач", "Балансовая стоимость", Истина, "", "Данные на начало БУ","Данные на начало БУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Нач", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на начало БУ","Данные на начало БУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУОСТНач", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на начало БУ","Данные на начало БУ");
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Приход", "Изм. стоимости", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Расход", "Изм. стоимости(списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
    УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Приход", "Амортизация", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
    УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Расход", "Амортизация (списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Кон", "Балансовая стоимость", Истина, "", "Данные на конец БУ","Данные на конец БУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Кон", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на конец БУ","Данные на конец БУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУОСТКон", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на конец БУ","Данные на конец БУ");
	
   	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Нач", "Балансовая стоимость", Истина, "", "Данные на начало НУ","Данные на начало НУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Нач", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на начало НУ","Данные на начало НУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУОСТНач", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на начало НУ","Данные на начало НУ");
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Приход", "Изм. стоимости", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Расход", "Изм. стоимости(списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
    УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Приход", "Амортизация", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
    УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Расход", "Амортизация (списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Кон", "Балансовая стоимость", Истина, "", "Данные на конец НУ","Данные на конец НУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Кон", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУОСТКон", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	УниверсальныйОтчет.ДобавитьПоказатель("АмортизационнаяПремия", "Амортизационная премия", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("ОсновноеСредство", "Основное средство", Истина, "", "","");
	


 
	//УниверсальныйОтчет.ДобавитьПоказатель("ПрочееПеремещение", "Прочее перемещение (счета 07, 08)", Истина, "ЧЦ=15; ЧДЦ=2", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаКон", "Сумма на конец", Истина, "ЧЦ=15; ЧДЦ=2", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьРасход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения","Отрицательные изменения");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяРасход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения","Отрицательные изменения");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьКон", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные","Конечные данные");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяКон", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные","Конечные данные");
		
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалНач", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные (в валюте)","Начальные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалНач", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные (в валюте)","Начальные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалПриход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Положительные изменения (в валюте)","Положительные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалПриход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Положительные изменения (в валюте)","Положительные изменения (в валюте)");

	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалРасход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения (в валюте)","Отрицательные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалРасход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения (в валюте)","Отрицательные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалКон", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные (в валюте)","Конечные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалКон", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные (в валюте)","Конечные данные (в валюте)");
		
	
	//УниверсальныйОтчет.ДобавитьПоказатель("Себестоимость", "Себестоимость  (" + ВалютаУпр + ")", Ложь, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяПрибыль", "Валовая прибыль (" + ВалютаУпр + ")", Истина, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("Эффективность", "Эффективность, %", Ложь, "ЧЦ=15; ЧДЦ=2");
	//УниверсальныйОтчет.ДобавитьПоказатель("Рентабельность", "Рентабельность, %", Истина, "ЧЦ=15; ЧДЦ=2");

	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Покупатель");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("РМ");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");

	//МассивДанных = Новый массив;
	//МассивДанных.Добавить("PM");
	//МассивДанных.Добавить("Контрагент");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки(МассивДанных);
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьОтбор("Проект");
	//УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	//
	//УниверсальныйОтчет.ДобавитьОтбор("РМ");

	//УниверсальныйОтчет.ДобавитьОтбор("Наименование");
		//УниверсальныйОтчет.ДобавитьОтбор("Покупатель");
	//УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
ВидыСубконто = Новый Массив;
ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
ВидыСубконтоНом  = Новый Массив;
Если ВалютаУпр.Пустая() Тогда
	валютаУпр = Справочники.Валюты.НайтиПоКоду("000");
КонецЕсли;

ОбрКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(УниверсальныйОтчет.ДатаКон = Дата('00010101'),ТекущаяДата(),УниверсальныйОтчет.ДатаКон),Новый Структура("Валюта", ВалютаУпр)).Курс;
Если ЗначениеЗаполнено(ОбрКурс) Тогда
 	Курс = 1/ОбрКурс;
Иначе
	Курс =1;
КонецЕсли;
    МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
    ВидыСубконтоНом.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	//УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(НЕ ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон), ТекущаяДата(), УниверсальныйОтчет.ДатаКон), Ложь);
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("НеВключатьНДСВСтоимостьПартий", ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий));
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СЧет20", ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Нулевой", Справочники.Проекты.НайтиПоКоду("000000015"));
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВТЗ",Таб);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СЧет90_02",ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНач",УниверсальныйОтчет.ДатаНач);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКон",КонецДня(УниверсальныйОтчет.ДатаКон));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Ввод",Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01",ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет07",ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет0804",ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет02НУ",ПланыСчетов.Налоговый.АмортизацияОС_01);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01НУ",ПланыСчетов.Налоговый.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СчетКВ",ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01БУ",ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет02БУ",ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяДата",'00010101');	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивСчетов",МассивСчетов);
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
 УниверсальныйОтчет.мРежимВводаПериода = 0;

#КонецЕсли
