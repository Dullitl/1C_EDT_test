#Если Клиент Тогда
Перем Таб;	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	//УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	абс_РаспределениеПоКураторамДанныеБиллинга.Накладная,
	|	абс_РаспределениеПоКураторамДанныеБиллинга.абс_Куратор,
	|	СУММА(абс_РаспределениеПоКураторамДанныеБиллинга.PERCENT) КАК Процент
	|ПОМЕСТИТЬ ВТ_РаспределениеПоКураторам
	|ИЗ
	|	Документ.абс_РаспределениеПоКураторам.ДанныеБиллинга КАК абс_РаспределениеПоКураторамДанныеБиллинга
	|ГДЕ
	|	абс_РаспределениеПоКураторамДанныеБиллинга.Ссылка.Проведен
	|	И абс_РаспределениеПоКураторамДанныеБиллинга.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|
	|СГРУППИРОВАТЬ ПО
	|	абс_РаспределениеПоКураторамДанныеБиллинга.Накладная,
	|	абс_РаспределениеПоКураторамДанныеБиллинга.абс_Куратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РаспределениеПоКураторам.абс_Куратор КАК Куратор,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОборотыДтКт.СчетДт.Валютный
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотДт, 0) * ЕСТЬNULL(ВТ_РаспределениеПоКураторам.Процент, 0)
	|			ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) * ЕСТЬNULL(ВТ_РаспределениеПоКураторам.Процент, 0)
	|		КОНЕЦ) КАК СуммаВзаиморасчетов,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот * ЕСТЬNULL(ВТ_РаспределениеПоКураторам.Процент, 1)) КАК СуммаРег,
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_РаспределениеПоКураторам.Процент, 1)) КАК Коэфф
	|ПОМЕСТИТЬ ВТРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)), , ) КАК ХозрасчетныйОборотыДтКт
	|		ПО РеализацияТоваровУслуг.Ссылка = ХозрасчетныйОборотыДтКт.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаспределениеПоКураторам КАК ВТ_РаспределениеПоКураторам
	|		ПО РеализацияТоваровУслуг.Ссылка = ВТ_РаспределениеПоКураторам.Накладная
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И РеализацияТоваровУслуг.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|	ВТ_РаспределениеПоКураторам.абс_Куратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег
	|ПОМЕСТИТЬ ДвиженияППВПоОплате
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = &ВидДвиженияПриход
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ,
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег
	|ПОМЕСТИТЬ ДвиженияРеализацииПоЗачету
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = &ВидДвиженияРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияППВПоОплате.Документ КАК ППВДокумент,
	|	ДвиженияППВПоОплате.Регистратор КАК ППВРегистратор,
	|	ДвиженияППВПоОплате.СуммаРег КАК ППВСуммаРег,
	|	ДвиженияРеализацииПоЗачету.Регистратор КАК РеализацияРегистратор,
	|	ДвиженияРеализацииПоЗачету.Документ КАК РеализацияДокумент,
	|	ЕСТЬNULL(ДвиженияРеализацииПоЗачету.СуммаРег, 0) КАК РеализацияСуммаРег
	|ПОМЕСТИТЬ ППВиРеализация
	|ИЗ
	|	ДвиженияППВПоОплате КАК ДвиженияППВПоОплате
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияРеализацииПоЗачету КАК ДвиженияРеализацииПоЗачету
	|		ПО ДвиженияППВПоОплате.Документ = ДвиженияРеализацииПоЗачету.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи_Оплата.Документ,
	|	СУММА(Платежи_Оплата.СуммаВзаиморасчетовПриход) КАК СуммаВзаиморасчетовОплата,
	|	СУММА(Платежи_Оплата.СуммаРегПриход) КАК СуммаРегОплата
	|ПОМЕСТИТЬ ВТОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ КАК Документ,
	|		СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовПриход) КАК СуммаВзаиморасчетовПриход,
	|		СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход) КАК СуммаРегПриход
	|	ИЗ
	|		РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, СчетОплаты В (&МассивСчетов)) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
	|	ГДЕ
	|		(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегПриход > 0
	|				ИЛИ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовПриход > 0)
	|		И (НЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор В
	|					(ВЫБРАТЬ
	|						ППВиРеализация.ППВРегистратор
	|					ИЗ
	|						ППВиРеализация КАК ППВиРеализация
	|					ГДЕ
	|						ППВиРеализация.РеализацияСуммаРег = 0))
	|		И (НЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Документ) КАК Платежи_Оплата
	|
	|СГРУППИРОВАТЬ ПО
	|	Платежи_Оплата.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Платежи_ЗачетАв.Регистратор,
	|	СУММА(Платежи_ЗачетАв.СуммаВзаиморасчетовРасход),
	|	СУММА(Платежи_ЗачетАв.СуммаРегРасход)
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор КАК Регистратор,
	|		СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход) КАК СуммаРегРасход,
	|		СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовРасход) КАК СуммаВзаиморасчетовРасход
	|	ИЗ
	|		РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, СчетОплаты В (&МассивАвансовыхСчетов)) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты
	|	ГДЕ
	|		(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаРегРасход > 0
	|				ИЛИ РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.СуммаВзаиморасчетовРасход > 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОбороты.Регистратор) КАК Платежи_ЗачетАв
	|
	|СГРУППИРОВАТЬ ПО
	|	Платежи_ЗачетАв.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОплаты.Документ,
	|	СУММА(ВТОплаты.СуммаВзаиморасчетовОплата) КАК СуммаВзаиморасчетовОплата,
	|	СУММА(ВТОплаты.СуммаРегОплата) КАК СуммаРегОплата
	|ПОМЕСТИТЬ ВТОплаты_ПослеГрупп
	|ИЗ
	|	ВТОплаты КАК ВТОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОплаты.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТОплаты_ПослеГрупп.СуммаВзаиморасчетовОплата * ЕСТЬNULL(ВТРеализации.Коэфф, 1)) КАК СуммаВзаиморасчетовОплата,
	|	СУММА(ВТОплаты_ПослеГрупп.СуммаРегОплата * ЕСТЬNULL(ВТРеализации.Коэфф, 1)) КАК СуммаОплат,
	|	ВТРеализации.Реализация КАК Реализация,
	|	МАКСИМУМ(1) КАК K2,
	|	СУММА(ВТРеализации.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ВТРеализации.СуммаРег) КАК СуммаСчетов,
	|	ВТРеализации.Куратор КАК Куратор
	|{ВЫБРАТЬ
	|	СуммаВзаиморасчетовОплата,
	|	СуммаОплат,
	|	Реализация.*,
	|	K2,
	|	Куратор.*,
	|	СуммаСчетов,
	|	СуммаВзаиморасчетов}
	|ИЗ
	|	ВТРеализации КАК ВТРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОплаты_ПослеГрупп КАК ВТОплаты_ПослеГрупп
	|		ПО ВТРеализации.Реализация = ВТОплаты_ПослеГрупп.Документ
	|{ГДЕ
	|	ВТРеализации.Куратор.*,
	|	ВТРеализации.Реализация.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРеализации.Реализация,
	|	ВТРеализации.Куратор
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетовОплата),
	|	СУММА(СуммаОплат),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СУММА(СуммаСчетов), 0) <> 0
	|				ТОГДА ЕСТЬNULL(СУММА(СуммаОплат), 0) / ЕСТЬNULL(СУММА(СуммаСчетов), 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК K2,
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаСчетов)
	|ПО
	|	ОБЩИЕ,
	|	Куратор,
	|	Реализация
	|{ИТОГИ ПО
	|	Куратор.*,
	|	Реализация.*,
	|	СуммаСчетов,
	|	СуммаВзаиморасчетов,
	|	СуммаОплат,
	|	СуммаВзаиморасчетовОплата}";



	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	
	//КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НормаАмортизации", "Норма амортизации");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОставшийсяСрок", "Оставшийся срок");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПервоначальнаяСтоимость", "Первоначальная стоимость");

	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаПоступления", "Дата приобретения");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаВвода", "Дата ввода в эксплуатацию");

	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаНач", "Сумма на начало");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Поступление", "Поступление");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВводВЭксплуатацию", "Ввод в эксплуатацию (Дт счета 01)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПрочееВыбытие", "Прочее выбытие");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПрочееПеремещение", "Прочее перемещение (счета 07, 08)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаКон", "Сумма на конец"); 
	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяНач", "GM");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьПриход", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяПриход", "GM ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьРасход", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяРасход", "GM ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьКон", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяКон", "GM ");

	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Себестоимость", "Себестоимость");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяПрибыль", "Валовая прибыль");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Эффективность", "Эффективность, %");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Рентабельность", "Рентабельность, %");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	//ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	//УниверсальныйОтчет.ДобавитьПоказатель("Количество", "Ед. хранения", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	//УниверсальныйОтчет.ДобавитьПоказатель("КоличествоБазовыхЕдиниц", "Базовых ед.", Ложь, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	//УниверсальныйОтчет.ДобавитьПоказатель("КоличествоЕдиницОтчетов", "Ед. отчетов", Ложь, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьНач", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные","Начальные данные");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяНач", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные","Начальные данные");
	////УниверсальныйОтчет.ДобавитьПоказатель("Номер", "Номер п/п", Истина, "ЧЦ=15; ЧДЦ=2", "Объект строительства","Объект строительства");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетов", "Сумма счетов (вал.)", Ложь, "", "Валютные суммы","Валютные суммы");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаСчетов", "Сумма  счетов (руб.)", Истина, "", "Рублевые суммы","Рублевые суммы");

	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовОплата", "Сумма оплат (вал.)", Ложь, "", "Валютные суммы","Валютные суммы");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаОплат", "Сумма оплат (руб.)", Истина, "", "Рублевые суммы","Рублевые суммы");
    УниверсальныйОтчет.ДобавитьПоказатель("K2", "K2", Истина, "", "Отношение","Отношение");                                       
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаОплаты", "Сумма оплаты", Истина, "", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаПлатежаРегл", "Сумма оплаты (руб.)", Истина, "", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Нач", "Балансовая стоимость", Истина, "", "Данные на начало БУ","Данные на начало БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Нач", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на начало БУ","Данные на начало БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУОСТНач", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на начало БУ","Данные на начало БУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Приход", "Изм. стоимости", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Расход", "Изм. стоимости(списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Приход", "Амортизация", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Расход", "Амортизация (списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Кон", "Балансовая стоимость", Истина, "", "Данные на конец БУ","Данные на конец БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Кон", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на конец БУ","Данные на конец БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУОСТКон", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на конец БУ","Данные на конец БУ");
	//
	//   УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Нач", "Балансовая стоимость", Истина, "", "Данные на начало НУ","Данные на начало НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Нач", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на начало НУ","Данные на начало НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУОСТНач", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на начало НУ","Данные на начало НУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Приход", "Изм. стоимости", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Расход", "Изм. стоимости(списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Приход", "Амортизация", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Расход", "Амортизация (списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Кон", "Балансовая стоимость", Истина, "", "Данные на конец НУ","Данные на конец НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Кон", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУОСТКон", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("АмортизационнаяПремия", "Амортизационная премия", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	//


 
	//УниверсальныйОтчет.ДобавитьПоказатель("ПрочееПеремещение", "Прочее перемещение (счета 07, 08)", Истина, "ЧЦ=15; ЧДЦ=2", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаКон", "Сумма на конец", Истина, "ЧЦ=15; ЧДЦ=2", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьРасход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения","Отрицательные изменения");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяРасход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения","Отрицательные изменения");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьКон", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные","Конечные данные");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяКон", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные","Конечные данные");
		
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалНач", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные (в валюте)","Начальные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалНач", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные (в валюте)","Начальные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалПриход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Положительные изменения (в валюте)","Положительные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалПриход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Положительные изменения (в валюте)","Положительные изменения (в валюте)");

	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалРасход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения (в валюте)","Отрицательные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалРасход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения (в валюте)","Отрицательные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалКон", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные (в валюте)","Конечные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалКон", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные (в валюте)","Конечные данные (в валюте)");
		
	
	//УниверсальныйОтчет.ДобавитьПоказатель("Себестоимость", "Себестоимость  (" + ВалютаУпр + ")", Ложь, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяПрибыль", "Валовая прибыль (" + ВалютаУпр + ")", Истина, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("Эффективность", "Эффективность, %", Ложь, "ЧЦ=15; ЧДЦ=2");
	//УниверсальныйОтчет.ДобавитьПоказатель("Рентабельность", "Рентабельность, %", Истина, "ЧЦ=15; ЧДЦ=2");

	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("РМ");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");

	//МассивДанных = Новый массив;
	//МассивДанных.Добавить("PM");
	//МассивДанных.Добавить("Контрагент");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки(МассивДанных);
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьОтбор("Проект");
	//УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	//
	//УниверсальныйОтчет.ДобавитьОтбор("РМ");

	//УниверсальныйОтчет.ДобавитьОтбор("Наименование");
		//УниверсальныйОтчет.ДобавитьОтбор("Покупатель");
	//УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
ВидыСубконто = Новый Массив;
ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
ВидыСубконтоНом  = Новый Массив;
Если ВалютаУпр.Пустая() Тогда
	валютаУпр = Справочники.Валюты.НайтиПоКоду("000");
КонецЕсли;

ОбрКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(УниверсальныйОтчет.ДатаКон = Дата('00010101'),ТекущаяДата(),УниверсальныйОтчет.ДатаКон),Новый Структура("Валюта", ВалютаУпр)).Курс;
Если ЗначениеЗаполнено(ОбрКурс) Тогда
 	Курс = 1/ОбрКурс;
Иначе
	Курс =1;
КонецЕсли;
    МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.01.1"));
    ВидыСубконтоНом.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	МассивАвансовыхСчетов = Новый Массив;
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);
	МассивАвансовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	//
	МассивОплат = Новый Массив;
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.Отправлено);
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.ГотовКОплате);
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.ПеренесенаВГК);
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.Оплачен);
	//
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СЧет90_02",ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНач",УниверсальныйОтчет.ДатаНач);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКон",КонецДня(УниверсальныйОтчет.ДатаКон));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Ввод",Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивОплат",МассивОплат);
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	

	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01",ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет07",ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет0804",ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет02НУ",ПланыСчетов.Налоговый.АмортизацияОС_01);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01НУ",ПланыСчетов.Налоговый.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СчетКВ",ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01БУ",ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет02БУ",ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяДата",'00010101');	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивСчетов",МассивСчетов);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивАвансовыхСчетов",МассивАвансовыхСчетов);
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
 УниверсальныйОтчет.мРежимВводаПериода = 0;

#КонецЕсли
