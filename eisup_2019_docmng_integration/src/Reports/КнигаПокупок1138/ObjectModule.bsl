Перем абс_ИтогиПоВалюте;
// {{KM WARE Акулов А.И. 09.07.2015 начало
// 
Перем СчетФактураПоПлатежке;
// }}KM WARE Акулов А.И. 09.07.2015 окончание

#Если КЛИЕНТ Тогда
	
// Процедуры формирования отчета	
	
Процедура СформироватьКнигуПокупок(ЭлементыФормы) Экспорт
	
	//АБС
	абс_ИтогиПоВалюте = Новый ТаблицаЗначений;   
	абс_ИтогиПоВалюте.Колонки.Добавить("СчетФактура");
	абс_ИтогиПоВалюте.Колонки.Добавить("Валюта");
	абс_ИтогиПоВалюте.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(12,2)));
	//\\АБС
	
	мСведенияОбОрганизации = Неопределено;
    		
	ПанельРазделовКниги = ЭлементыФормы.ПанельРазделовКниги;
	ОсновнойРаздел = ПанельРазделовКниги.Страницы.ОсновнойРаздел;
	КоличествоОтображаемыхРазделов = ПанельРазделовКниги.Страницы.Количество();
	
	Для НомерСтраницы = 1 по КоличествоОтображаемыхРазделов Цикл
		Если ПанельРазделовКниги.Страницы[КоличествоОтображаемыхРазделов - НомерСтраницы] = ОсновнойРаздел Тогда
			Продолжить;
		КонецЕсли; 
		ПанельРазделовКниги.Страницы.Удалить(КоличествоОтображаемыхРазделов - НомерСтраницы);
	КонецЦикла; 

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	//АБС
	Для каждого Строка Из СписокФилиалов Цикл
		СписокОрганизаций.Добавить(Строка.Значение);	
	КонецЦикла;	
	//\\АБС
	
	ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода", КонецПериода);
	СтруктураПараметров.Вставить("СформироватьОтчетПоСтандартнойФорме", СформироватьОтчетПоСтандартнойФорме);
	СтруктураПараметров.Вставить("ОтбиратьПоКонтрагенту", ОтбиратьПоКонтрагенту);
	СтруктураПараметров.Вставить("КонтрагентДляОтбора", КонтрагентДляОтбора);
	СтруктураПараметров.Вставить("ГруппироватьПоКонтрагентам", ГруппироватьПоКонтрагентам); 
	СтруктураПараметров.Вставить("ВыводитьПокупателейПоАвансам", ВыводитьПокупателейПоАвансам);
	СтруктураПараметров.Вставить("ВыводитьТолькоДопЛисты", ВыводитьТолькоДопЛисты);
	СтруктураПараметров.Вставить("ФормироватьДополнительныеЛисты", ФормироватьДополнительныеЛисты);
	СтруктураПараметров.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДополнительныеЛистыЗаТекущийПериод", ДополнительныеЛистыЗаТекущийПериод); 
	СтруктураПараметров.Вставить("ДатаФормированияДопЛиста"); 
	СтруктураПараметров.Вставить("ЗаписьДополнительногоЛиста", Ложь);
	СтруктураПараметров.Вставить("СкрытьКолонкиПоСтавке20", СкрытьКолонкиПоСтавке20);
	СтруктураПараметров.Вставить("ЕстьЗаписиПоКолонке20");
	СтруктураПараметров.Вставить("ЗаполнениеДокумента", Ложь);
	СтруктураПараметров.Вставить("ПрефиксыРИБиОрганизации", ПрефиксыРИБиОрганизации);
	
	Если НЕ (ВыводитьТолькоДопЛисты И ФормироватьДополнительныеЛисты) Тогда
		
		СписокСчетовФактур = Неопределено;
		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;	
	    Результат = ПолучитьЗаписиКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
				
		СформироватьОсновнойРаздел(ЭлементыФормы, СтруктураПараметров, ТабличныйДокумент, Результат, СписокСчетовФактур);
		
	КонецЕсли;
		
	// Проверка наличия дополнительных листов за текущий период
	СтруктураПараметров = ПроверитьНаличиеДопЛистовКнигиПокупок(СтруктураПараметров);
	
	Если ФормироватьДополнительныеЛисты Тогда
		
		СписокСчетовФактур = Неопределено;
		
		// Получение записей дополнительных листов
		Результат = ПолучитьЗаписиДополнительныхЛистовКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
        		
		СформироватьДополнительныеЛисты(ЭлементыФормы, СтруктураПараметров, Результат, СписокСчетовФактур);
		
	КонецЕсли;
    	
КонецПроцедуры

Процедура СформироватьОсновнойРаздел(ЭлементыФормы, СтруктураПараметров, ТабличныйДокумент, Результат, СписокСчетовФактур);
	
	//АБС
	абс_ИтогиПоВалюте.Очистить();
	//\\АБС
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупок";

	ВерсияПостановленияНДС1137 = ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериода);
	// {{KM WARE Агапов Н.А. Заявка № 01.10.2015 начало
	Если ДополнительныеПоля = истина тогда
		Макет = ПолучитьМакет("КнигаПокупок735_ДопПоля");
	Иначе
		Если ВерсияПостановленияНДС1137 = 3 Тогда
			Макет = ПолучитьМакет("КнигаПокупок735");   
		Иначе
			Макет = ПолучитьМакет("КнигаПокупок1137");
		КонецЕсли;
	КонецЕсли;
	// }}KM WARE Агапов Н.А. Заявка № 01.10.2015 окончание
	СтруктураПараметров.ЕстьЗаписиПоКолонке20 = Ложь;	
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод шапки книги покупок
	
	Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;	
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.НачалоПериода = Формат(СтруктураПараметров.НачалоПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода = Формат(СтруктураПараметров.КонецПериода, "ДФ=dd.MM.yyyy");
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");;
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент " + ?(КонтрагентДляОтбора.ЭтоГруппа, "в группе ", "= ") + КонтрагентДляОтбора;
	КонецЕсли;
	ТабличныйДокумент.Вывести(Секция);
	// Вывод шапки книги покупок
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод пустой книги покупок, если данных нет
	Если Результат.Пустой() Тогда
		
		Секция = Макет.ПолучитьОбласть("Всего");
		ТабличныйДокумент.Вывести(Секция);
		
		/////////////////////////////////////////////////////////////////////////
		// Вывод подвала
		ВывестиПодвал(ТабличныйДокумент, Макет);
		// Вывод подвала
		////////////////////////////////////////////////////////////////////////
        		
		/////////////////////////////////////////////////////////////////////////
		// Удаление колонок 20% и связанного примечания
		Если ВерсияПостановленияНДС1137 < 3 
				И СтруктураПараметров.СкрытьКолонкиПоСтавке20 Тогда
			УдалитьКолонки20ПроцентовОсновнойРаздел(ТабличныйДокумент);
		КонецЕсли; 
		// Удаление колонок 20% и связанного примечания
		/////////////////////////////////////////////////////////////////////////
		
		УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
		Возврат;
		
	КонецЕсли; 
	// Вывод пустой книги покупок, если данных нет
	/////////////////////////////////////////////////////////////////////////
	
	СтруктураСекций = Новый Структура("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
	ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;
		
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
		СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
	КонецЕсли;
    	
	ИтогПоОрганизации = 0;
	
	ПреобразоватьЗаписиКнигиПокупок(СтруктураПараметров, Результат, ТабличныйДокумент, СписокСчетовФактур, ИтогПоОрганизации, ПараметрыСтроки, , СтруктураСекций);
    
	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(ИтогПоОрганизации);
	
	ТабличныйДокумент.Вывести(Секция);
	
	//АБС 
	абс_ВывестиИтогиПоТаблицеВалют(Макет,ТабличныйДокумент);
	//\\АБС
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод подвала
	ВывестиПодвал(ТабличныйДокумент, Макет);
	// Вывод подвала
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Повтор шапки таблицы на каждой строке
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("СтрокиДляПовтора");
	// Повтор шапки таблицы на каждой строке
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Удаление колонок 20% и связанного примечания
	Если ВерсияПостановленияНДС1137 <> 3 И СтруктураПараметров.СкрытьКолонкиПоСтавке20 Тогда
		Если СтруктураПараметров.ЕстьЗаписиПоКолонке20 Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("В книге продаж организации <"+Организация+"> за период "+ПредставлениеПериода(НачалоПериода, ?(КонецПериода='00010101',КонецПериода,КонецДня(КонецПериода)))+" есть записи по ставке НДС 20%!
			|Отображение соотвествующих колонок не может быть отключено.");
		Иначе
			УдалитьКолонки20ПроцентовОсновнойРаздел(ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли; 
	// Удаление колонок 20% и связанного примечания
	/////////////////////////////////////////////////////////////////////////
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

Процедура СформироватьДополнительныеЛисты(ЭлементыФормы, СтруктураПараметров, Результат, СписокСчетовФактур)
	
	Перем Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента;
	Перем ТабличныйДокумент;
    		
	Если Результат.Пустой() Тогда
	    Возврат;
	КонецЕсли; 
	
	//АБС
	абс_ИтогиПоВалюте.Очистить();
	//\\АБС
	
	НомерОтображаемогоПериода = 0;
	
	Если СтруктураПараметров.СкрытьКолонкиПоСтавке20 Тогда
	    ТаблицаОбластейДляКорректировки = Новый ТаблицаЗначений();
		ТаблицаОбластейДляКорректировки.Колонки.Добавить("Подпись20Процентов");
		ТаблицаОбластейДляКорректировки.Колонки.Добавить("КонецЛистаБезПодписи20Процентов");
	КонецЕсли; 
	
	ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.ЗаписьДополнительногоЛиста = Истина;
		
	Для Каждого ИтогПоПериодам ИЗ ДеревоЗаписей.Строки Цикл;
		
		НомерЛиста = 0;
		
		/////////////////////////////////////////////////////////////////////////
		// Добавление новой страницы панели разделов для вывода доп. листа
		НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
		НалоговыйПериод = ПредставлениеПериода(ИтогПоПериодам.НалоговыйПериод, КонецДня(ИтогПоПериодам.КонецНалоговогоПериода), "ФП = Истина");
				
		ПанельРазделовКниги = ЭлементыФормы.ПанельРазделовКниги;
		НоваяСтраница = ПанельРазделовКниги.Страницы.Добавить("ДопЛист"+НомерОтображаемогоПериода,"Доп.листы за " + НалоговыйПериод);
		ПанельРазделовКниги.ТекущаяСтраница = НоваяСтраница;
		ТабличныйДокумент = ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"),"ТД_ДопЛист"+НомерОтображаемогоПериода, Истина, ПанельРазделовКниги);
		ТабличныйДокумент.Лево = ЭлементыФормы.ТабличныйДокумент.Лево;
		ТабличныйДокумент.Верх = ЭлементыФормы.ТабличныйДокумент.Верх;
		ТабличныйДокумент.Высота = ЭлементыФормы.ТабличныйДокумент.Высота;
		ТабличныйДокумент.Ширина = ЭлементыФормы.ТабличныйДокумент.Ширина;
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупокДопЛист";
		
		ЭлементыФормы.ТабличныйДокумент.ПолучитьПривязку(ГраницаЭлементаУправления.Низ,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ТабличныйДокумент.УстановитьПривязку(ГраницаЭлементаУправления.Низ,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ЭлементыФормы.ТабличныйДокумент.ПолучитьПривязку(ГраницаЭлементаУправления.Право,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ТабличныйДокумент.УстановитьПривязку(ГраницаЭлементаУправления.Право,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
		Если СтруктураПараметров.СкрытьКолонкиПоСтавке20 Тогда
		    ТаблицаОбластейДляКорректировки.Очистить();
		КонецЕсли;
		// Добавление новой страницы панели разделов для вывода доп. листа
		/////////////////////////////////////////////////////////////////////////
		МожноСкрытьКолонкиПоСтавке20 = СтруктураПараметров.СкрытьКолонкиПоСтавке20;

		Для Каждого ИтогПоПериодамКорректировки ИЗ ИтогПоПериодам.Строки Цикл
			
			ВерсияПостановленияНДС1137 = ВерсияПостановленияНДС1137(ИтогПоПериодамКорректировки.КонецНалоговогоПериода);
			Если ВерсияПостановленияНДС1137 = 1 Тогда
				Макет = ПолучитьМакет("ДополнительныйЛистКнигиПокупок1137");
			ИначеЕсли ВерсияПостановленияНДС1137 = 2 Тогда 	
				Макет = ПолучитьМакет("ДополнительныйЛистКнигиПокупок952");
			Иначе
				Макет = ПолучитьМакет("ДополнительныйЛистКнигиПокупок735");
			КонецЕсли; 
		
			Секция 		= Макет.ПолучитьОбласть("Строка");
			СтрокаИтого = Макет.ПолучитьОбласть("Итого");
			СтрокаВсего = Макет.ПолучитьОбласть("Всего");
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
				СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
			КонецЕсли;
			
			// Формирование шапки доп. листа
			ОкончаниеПредыдущегоРаздела = ТабличныйДокумент.ВысотаТаблицы;
			НомерЛиста = НомерЛиста + 1;
			
			СтруктураПараметров.Вставить("НалоговыйПериод", ИтогПоПериодамКорректировки.НалоговыйПериод);
			СтруктураПараметров.Вставить("КонецНалоговогоПериода", КонецКвартала(ИтогПоПериодамКорректировки.КонецНалоговогоПериода));
			СтруктураПараметров.Вставить("ДатаОформления", ИтогПоПериодамКорректировки.ДатаОформления);
				
			УчетНДСКлиент.ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерЛиста);

			СтруктураПараметров.ДатаФормированияДопЛиста = ИтогПоПериодамКорректировки.ДатаОформления;
			
			ИтогЗаПериод = ПолучитьИтогиЗаПериодКнигаПокупок(СтруктураПараметров);
						
			СтрокаИтого.Параметры.Заполнить(ИтогЗаПериод);
			
			СтруктураПараметров.ЕстьЗаписиПоКолонке20 = НЕ (ИтогЗаПериод.СуммаБезНДС20 = 0 и ИтогЗаПериод.НДС20 = 0);
			ТабличныйДокумент.Вывести(СтрокаИтого);
            
			СтруктураСекций = Новый Структура("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
			ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
				СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
			КонецЕсли;
			
			ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
				СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, ТабличныйДокумент, СписокСчетовФактур, ПараметрыСтроки, , СтруктураСекций);
			
			СтрокаВсего.Параметры.Заполнить(ИтогЗаПериод);
			ТабличныйДокумент.Вывести(СтрокаВсего);
			
			//АБС 
			абс_ВывестиИтогиПоТаблицеВалют(Макет,ТабличныйДокумент);
			//\\АБС

			/////////////////////////////////////////////////////////////////////////
			// Вывод подвала
			ВывестиПодвал(ТабличныйДокумент, Макет);
			// Вывод подвала
			/////////////////////////////////////////////////////////////////////////
			
			
			Если ВерсияПостановленияНДС1137 < 3 Тогда
				МожноСкрытьКолонкиПоСтавке20 = МожноСкрытьКолонкиПоСтавке20 И НЕ СтруктураПараметров.ЕстьЗаписиПоКолонке20;

				Если МожноСкрытьКолонкиПоСтавке20 тогда
					МакетТекущегоЛиста = ТаблицаОбластейДляКорректировки.Добавить();
					МакетТекущегоЛиста.Подпись20Процентов = ТабличныйДокумент.Область("Подпись20Процентов");
					МакетТекущегоЛиста.КонецЛистаБезПодписи20Процентов = ТабличныйДокумент.Область(МакетТекущегоЛиста.Подпись20Процентов.Верх,,МакетТекущегоЛиста.Подпись20Процентов.Верх); 
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла; 
		
		Если ВерсияПостановленияНДС1137 < 3 Тогда
			Если СтруктураПараметров.СкрытьКолонкиПоСтавке20 Тогда
				Если НЕ МожноСкрытьКолонкиПоСтавке20 Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("В дополнительном листе книге покупок организации <"+Организация+"> за период "+ПредставлениеПериода(ИтогПоПериодамКорректировки.НалоговыйПериод, КонецДня(ИтогПоПериодамКорректировки.КонецНалоговогоПериода))+" есть записи по ставке НДС 20%!
					|Отображение соотвествующих колонок не может быть отключено.");
				Иначе
					Для каждого ОбластиДляКорректировки Из ТаблицаОбластейДляКорректировки Цикл
						ТабличныйДокумент.УдалитьОбласть(ОбластиДляКорректировки.Подпись20Процентов);
						
						ОбластиДляКорректировки.КонецЛистаБезПодписи20Процентов.КонецСтраницы = Истина;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЦикла; 	
					
					Область20Процентов = ТабличныйДокумент.Область("Заголовок20Процентов");
					ЛеваяКолонка = Область20Процентов.Лево;
					ПраваяКолонка = Область20Процентов.Право;
					ОбластьКУдалению = ТабличныйДокумент.Область(,ЛеваяКолонка,,ПраваяКолонка);
					ТабличныйДокумент.УдалитьОбласть(ОбластьКУдалению,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//АБС
Процедура абс_ЗаполнитьТаблицуВалют(ПараметрыЗаполнения,ЗаписьКниги,СоставСтроки)
	         	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта) 
		и абс_ИтогиПоВалюте.Найти(ПараметрыЗаполнения.СчетФактураДокумент,"СчетФактура") = Неопределено Тогда
		СтрокаПоВалюте = абс_ИтогиПоВалюте.Добавить();
		СтрокаПоВалюте.СчетФактура = ПараметрыЗаполнения.СчетФактура;
		СтрокаПоВалюте.Валюта = СоставСтроки.Валюта;
		СтрокаПоВалюте.Сумма = ЗаписьКниги.ВсегоПокупок;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура абс_ВывестиИтогиПоТаблицеВалют(Макет,ТабличныйДокумент)
		
	Если ЗначениеЗаполнено(абс_ИтогиПоВалюте) Тогда
		абс_ИтогиПоВалюте.Свернуть("Валюта","Сумма"); 		
		СекцияВалюта = Макет.ПолучитьОбласть("Валюта");
		Для Каждого СтрокаВалют Из абс_ИтогиПоВалюте Цикл
			СекцияВалюта.Параметры.Заполнить(СтрокаВалют);  		
			ТабличныйДокумент.Вывести(СекцияВалюта);	
		КонецЦикла;
		абс_ИтогиПоВалюте.Очистить();
	КонецЕсли;	                     	
	
КонецПроцедуры	
//\\АБС

// Процедуры печати

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ КНИГ И ЖУРНАЛОВ

// Книга покупок, дополнительные листы книги покупок

Процедура ПреобразоватьЗаписиКнигиПокупок(
		СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт	
	
	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
	
	СтруктураПараметров.ЗаписьДополнительногоЛиста = Ложь;
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = УчетНДС.ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
	   	
	Счетчик = 0; // Счетчик строк книги покупок

	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			//Для Каждого ИтогПоНалоговыйПериод Из ИтогПоКонтрагенту.Строки Цикл
			//	Для Каждого ИтогПоДокументу Из ИтогПоНалоговыйПериод.Строки Цикл
			//		Для Каждого ИтогПоИсправлению Из ИтогПоДокументу.Строки Цикл
			//			Для Каждого ЗаписьКниги Из ИтогПоИсправлению.Строки Цикл

			Для Каждого ИтогПоДокументу Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого ИтогПоИсправлению Из ИтогПоДокументу.Строки Цикл
					Для Каждого ЗаписьКниги Из ИтогПоИсправлению.Строки Цикл
						
						Если ЗаписьКниги.СводныйКорректировочный Тогда
							Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл
								Счетчик = Счетчик + 1;
								ПараметрыСтроки.Ном = Счетчик;
								
								ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
								
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЦикла;
						Иначе	
							Счетчик = Счетчик + 1;
							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						КонецЕсли;
						
					КонецЦикла; 
				КонецЦикла; 
				//КонецЦикла; 
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		//Для Каждого ИтогПоНалоговыйПериод Из ИтогПоОрганизации.Строки Цикл
		//	Для каждого ИтогПоДокументу Из ИтогПоНалоговыйПериод.Строки Цикл
		//		Для Каждого ИтогПоИсправлению Из ИтогПоДокументу.Строки Цикл
		//			Для каждого ЗаписьКниги Из ИтогПоИсправлению.Строки Цикл
		Для Каждого ИтогПоДокументу Из ИтогПоОрганизации.Строки Цикл
			Для Каждого ИтогПоИсправлению Из ИтогПоДокументу.Строки Цикл
				Для Каждого ЗаписьКниги Из ИтогПоИсправлению.Строки Цикл
					
					Если ЗаписьКниги.СводныйКорректировочный Тогда
						Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл
							Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;	
							
							Счетчик = Счетчик + 1;
							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
						КонецЦикла;
					Иначе
						Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
							ПараметрыСтроки = ТаблицаДокумента.Добавить();
						КонецЕсли;	
						
						Счетчик = Счетчик + 1;
						ПараметрыСтроки.Ном = Счетчик;
						
						ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
							ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						КонецЕсли;
					КонецЕсли;	
					
				КонецЦикла; 	
			КонецЦикла; 	
			//КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

//АБС ВСТАВКА №000028978 НАЧАЛО «9 декабря 2014 г.», Пополитов
//Процедура обновлена для отчёта книга покупок/продаж
Процедура Удалить_ЗаполнитьСтрокуКнигиПокупок(
		ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)

	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество()>0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	КонецЕсли;
	
	ПараметрыСтроки.ВсегоПокупок 	  = ЗаписьКниги.ВсегоПокупок;
	ПараметрыСтроки.СуммаБезНДС18 	  = ЗаписьКниги.СуммаБезНДС18;
	ПараметрыСтроки.НДС18 			  = ЗаписьКниги.НДС18;
	ПараметрыСтроки.СуммаБезНДС10 	  = ЗаписьКниги.СуммаБезНДС10;
	ПараметрыСтроки.НДС10 			  = ЗаписьКниги.НДС10;
	ПараметрыСтроки.НДС0 			  = ЗаписьКниги.НДС0;
	ПараметрыСтроки.СуммаБезНДС20 	  = ЗаписьКниги.СуммаБезНДС20;
	ПараметрыСтроки.НДС20 			  = ЗаписьКниги.НДС20;
	ПараметрыСтроки.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		СтруктураПараметров.ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 
	
	ДатаНомер = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров);
	ПараметрыСтроки.ДатаНомер = ДатаНомер;
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;	
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	
	СуммаСНДС = 0;
	
	Если ЭтоДетальнаяЗапись Тогда
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокументРасшифровка;
		
	Иначе
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
				Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy");
					СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыСтроки.СчетФактура = СтрокаЗаписи.СчетФактураДокументРасшифровка;
			
		КонецЦикла;
	КонецЕсли;
	
	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДополнительнойИнформации.СуммаСНДС) Тогда
				СуммаСНДС = СуммаСНДС + СтрокаДополнительнойИнформации.СуммаСНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;		
																   
	ПараметрыСтроки.ДатаОплаты = ТекстОплаты;
	ПараметрыСтроки.ДатаОприходования = ТекстДатаОприходования;
	ПараметрыСтроки.НомерГТД = ТекстНомерГТД;

КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПокупок(
		ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)

	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество()>0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	КонецЕсли;
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	//АБС ИЗМЕНЕНИЕ   05.03.2015 14:03:00  Шамов
	//СоставСтроки.Вставить("КодОперации", 	 	ПараметрыЗаполнения.КодВидаОперации);
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.КодВидаОперации) Тогда
		СоставСтроки.Вставить("КодОперации", 	 	ПараметрыЗаполнения.КодВидаОперации);
	Иначе
		СоставСтроки.Вставить("КодОперации", 	 	"02");
	КонецЕсли;
	//АБС ИЗМЕНЕНИЕ  КОНЕЦ 	
	СоставСтроки.Вставить("Продавец", 	 	 	ПараметрыЗаполнения.Продавец);
	СоставСтроки.Вставить("ПродавецИНН", 	 	ПараметрыЗаполнения.ПродавецИНН);
	СоставСтроки.Вставить("ПродавецКПП", 	 	ПараметрыЗаполнения.ПродавецКПП);
	СоставСтроки.Вставить("ПродавецРазделитель", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" , ""));
	
	// {{KM WARE Агапов Н.А. Заявка № 25.09.2015 начало
	//Если ЗначениеЗаполнено(ПараметрыЗаполнения.Продавец) и ПараметрыЗаполнения.абс_ПриобретеноСубагентом  
		СоставСтроки.Вставить("Посредник",		 	ПараметрыЗаполнения.Посредник);
		СоставСтроки.Вставить("ПосредникИНН_КПП","" + ПараметрыЗаполнения.ПосредникИНН + 
			?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПосредникКПП), "/" + ПараметрыЗаполнения.ПосредникКПП, ""));
	// }}KM WARE Агапов Н.А. Заявка № 25.09.2015 окончание	
		
	СоставСтроки.Вставить("Валюта", 			 ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПокупок", 	 	ЗаписьКниги.ВсегоПокупок);
	СоставСтроки.Вставить("СуммаБезНДС20", 	  	ЗаписьКниги.СуммаБезНДС20);
	СоставСтроки.Вставить("НДС20", 			  	ЗаписьКниги.НДС20);
	СоставСтроки.Вставить("СуммаБезНДС18", 	 	ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18", 	 		 	ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10", 	 	ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10", 	 		 	ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0", 	 		 	ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("НДС", 	 		 	ЗаписьКниги.НДС);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", 	ЗаписьКниги.СуммаСовсемБезНДС);
	СоставСтроки.Вставить("ДатаНомер", 			ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров));
	СоставСтроки.Вставить("НомерДата", 			ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров,Истина));
	// {{KM WARE Акулов А.И. 09.07.2015 начало
	// 
	Если СчетФактураПоПлатежке <> 0 Тогда
		Если СчетФактураПоПлатежке.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
			СоставСтроки.Вставить("КодОперации", 	 	"22");
        КонецЕсли;
	КонецЕсли;
	// }}KM WARE Акулов А.И. 09.07.2015 окончание	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		СтруктураПараметров.ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;	
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();  
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	ТекстНомерГТД = "";
	ТекстСтранаНомерГТД = "";
	
	СуммаСНДС = 0;
	
	Если ЭтоДетальнаяЗапись Тогда
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		абс_ОпределитьНомерДатуДокументаОплаты(ЗаписьКниги, ЭтоДетальнаяЗапись);
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокументРасшифровка;
		// {{KM WARE Акулов А.И. 08.07.2015 начало
		//
		Если НЕ ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда 
			ДокументНужный = ПараметрыСтроки.СчетФактура;
			Если ТипЗнч(ДокументНужный) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
				НомерДатаОплаты = "" + ДокументНужный.НомерВходящегоДокумента + ";" + Формат(ДокументНужный.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// }}KM WARE Акулов А.И. 08.07.2015 окончание
	Иначе
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			абс_ОпределитьНомерДатуДокументаОплаты(ЗаписьКниги, ЭтоДетальнаяЗапись);
			Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыСтроки.СчетФактура = СтрокаЗаписи.СчетФактураДокументРасшифровка;
			// {{KM WARE Акулов А.И. 08.07.2015 начало
			//
			Если НЕ ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда 
				ДокументНужный = ПараметрыСтроки.СчетФактура;
				Если ТипЗнч(ДокументНужный) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
					НомерДатаОплаты = "" + ДокументНужный.НомерВходящегоДокумента + ";" + Формат(ДокументНужный.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
					Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
						ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
						СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// }}KM WARE Акулов А.И. 08.07.2015 окончание
		КонецЦикла;
		
	КонецЕсли;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
		
	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстСтранаНомерГТД = ТекстСтранаНомерГТД + ?(ТекстСтранаНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТД);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДополнительнойИнформации.СуммаСНДС) Тогда
				СуммаСНДС = СуммаСНДС + СтрокаДополнительнойИнформации.СуммаСНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;		
	
	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты);
	СоставСтроки.Вставить("НомерГТД",  ТекстСтранаНомерГТД);
	СоставСтроки.Вставить("НомерГТД_", ТекстНомерГТД);
	
	//АБС
	абс_ЗаполнитьТаблицуВалют(ПараметрыЗаполнения,ЗаписьКниги,СоставСтроки);
	//\\АБС
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);

КонецПроцедуры
//\\АБС ВСТАВКА №000028978 КОНЕЦ

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = УчетНДС.ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
	
	Счетчик = 0;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для Каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для каждого ИтогПоИсправлениям Из ЗаписьПоСФ.Строки Цикл
					Для каждого ЗаписьКниги Из ИтогПоИсправлениям.Строки Цикл
						
						Счетчик = Счетчик + 1;
						ПараметрыСтроки.Ном = Счетчик;
						
						ЗаполнитьСтрокуДополнительногоЛистаКнигаПокупок(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
							СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
						ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
						ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого ИтогПоИсправлениям Из ЗаписьПоСФ.Строки Цикл
				Для каждого ЗаписьКниги Из ИтогПоИсправлениям.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;	
					
					Счетчик = Счетчик + 1;
					ПараметрыСтроки.Ном = Счетчик;
					
					ЗаполнитьСтрокуДополнительногоЛистаКнигаПокупок(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
						СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
											
					Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
	                					
					ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
					ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
					ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры	

Процедура Удалить_ЗаполнитьСтрокуДополнительногоЛистаКнигаПокупок(
		ПараметрыСтроки, ЗаписьКниги, ЕстьЗаписиПоКолонке20, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)
		
	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ЗаписьКниги.Строки[0]);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗаписьКниги.Строки[0]);
	КонецЕсли;	
			
	СтрокаДополнительнойИнформации = Неопределено;
	ДатаНомер = ОпределитьДатуИНомерСФ(ЗаписьКниги.Строки[0], СтруктураПараметров);
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ЗаписьКниги.Строки[0]);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ЗаписьКниги.Строки[0]);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ЗаписьКниги.Строки[0]);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	
        	
	ПараметрыСтроки.ВсегоПокупок 	  = ЗаписьКниги.ВсегоПокупок;
	ПараметрыСтроки.СуммаБезНДС18 	  = ЗаписьКниги.СуммаБезНДС18;
	ПараметрыСтроки.НДС18 			  = ЗаписьКниги.НДС18;
	ПараметрыСтроки.СуммаБезНДС10 	  = ЗаписьКниги.СуммаБезНДС10;
	ПараметрыСтроки.НДС10 			  = ЗаписьКниги.НДС10;
	ПараметрыСтроки.НДС0 			  = ЗаписьКниги.НДС0;
	ПараметрыСтроки.СуммаБезНДС20 	  = ЗаписьКниги.СуммаБезНДС20;
	ПараметрыСтроки.НДС20 			  = ЗаписьКниги.НДС20;
	ПараметрыСтроки.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;
	
	Если ЗначениеЗаполнено(ЗаписьКниги.Строки[0].СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.Строки[0].СчетФактураДокумент;
	КонецЕсли;

	Если НЕ ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 

	ПараметрыСтроки.ДатаНомер = ДатаНомер;
	ПараметрыСтроки.НомерГТД = ?(СтрокаДополнительнойИнформации = Неопределено, "", СтрокаДополнительнойИнформации.ГТДиСтрана);

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", "," + Символы.ПС) + Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
			
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ";") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		

	ПараметрыСтроки.ДатаОплаты = ТекстОплаты;
	ПараметрыСтроки.ДатаОприходования = ТекстДатаОприходования;
	ПараметрыСтроки.НомерГТД = ТекстНомерГТД;
						
КонецПроцедуры

Процедура ЗаполнитьСтрокуДополнительногоЛистаКнигаПокупок(
		ПараметрыСтроки, ЗаписьКниги, ЕстьЗаписиПоКолонке20, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)
		
	ПараметрыЗаполнения = ЗаписьКниги.Строки[0];		
		
	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	КонецЕсли;	
			
	СтрокаДополнительнойИнформации = Неопределено;
	ДатаНомер = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров);
	НомерДата = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров, Истина);
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	
        	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	//АБС ИЗМЕНЕНИЕ   05.03.2015 14:03:00  Шамов
	//СоставСтроки.Вставить("КодОперации", 	 	ПараметрыЗаполнения.КодВидаОперации);
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.КодВидаОперации) Тогда
		СоставСтроки.Вставить("КодОперации", 	 	ПараметрыЗаполнения.КодВидаОперации);
	Иначе
		СоставСтроки.Вставить("КодОперации", 	 	"02");
	КонецЕсли;
	//АБС ИЗМЕНЕНИЕ  КОНЕЦ 	
	СоставСтроки.Вставить("Продавец", 	 	 	ПараметрыЗаполнения.Продавец);
	СоставСтроки.Вставить("ПродавецИНН", 	 	ПараметрыЗаполнения.ПродавецИНН);
	СоставСтроки.Вставить("ПродавецКПП", 	 	ПараметрыЗаполнения.ПродавецКПП);
	СоставСтроки.Вставить("ПродавецРазделитель", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" , ""));
	СоставСтроки.Вставить("Валюта", 			 ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПокупок", 	 	ЗаписьКниги.ВсегоПокупок);
	СоставСтроки.Вставить("СуммаБезНДС18", 	 	ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18", 	 		 	ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10", 	 	ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10", 	 		 	ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0", 	 		 	ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("НДС", 	 		 	ЗаписьКниги.НДС);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", 	ЗаписьКниги.СуммаСовсемБезНДС);
	СоставСтроки.Вставить("ДатаНомер", 			ДатаНомер);
	СоставСтроки.Вставить("НомерДата", 			НомерДата);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ПараметрыЗаполнения.СчетФактураДокумент;
	КонецЕсли;

	Если НЕ ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 
    
	ТекстОплаты = "";
	ТекстОплатыСНомером = "";
	ТекстСтранаНомерГТД = "";
	ТекстНомерГТД = "";
	
	СписокДатОплат = Новый СписокЗначений();
	СписокНомеровИДатОплат = Новый СписокЗначений();	
			
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
			КонецЕсли;			
		КонецЕсли;		
		
	КонецЦикла;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);	

	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
			
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстСтранаНомерГТД = ТекстСтранаНомерГТД + ?(ТекстСтранаНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ";") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		

	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты);
	СоставСтроки.Вставить("НомерГТД",  ТекстСтранаНомерГТД);
	СоставСтроки.Вставить("НомерГТД_", ТекстНомерГТД);
	
	//АБС
	абс_ЗаполнитьТаблицуВалют(ПараметрыЗаполнения,ЗаписьКниги,СоставСтроки);
	//\\АБС
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
						
КонецПроцедуры

Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста) Экспорт
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");	
		ТабличныйДокумент.Вывести(Секция);	
	КонецЕсли;	
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
		
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент " + ?(СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа, "в группе ", "= ") + СтруктураПараметров.КонтрагентДляОтбора;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

// Книга продаж, дополнительные листы книги продаж

Процедура ПреобразоватьЗаписиКнигиПродаж(
		СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт	
		
	ЕстьЗаписиПоКолонке20 = Ложь;
		
	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
		
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур);
		
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = СтруктураСекций.СекцияКонтрагент;
		СекцияВсегоКонтрагент = СтруктураСекций.СекцияВсегоКонтрагент;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл 
			СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабличныйДокумент.Вывести(СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для Каждого НалоговыеПериоды Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого ПорядокОтражения Из НалоговыеПериоды.Строки Цикл
					Для Каждого СтрокаПоПорядокОтражения Из ПорядокОтражения.Строки Цикл
						Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
							Для Каждого ЗаписьКниги  Из ИтогПоДокументу.Строки Цикл
								
								Если ЗаписьКниги.СводныйКорректировочный Тогда
									Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
										ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная);
										ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									КонецЦикла;
								Иначе
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги);
									ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								КонецЕсли;
								
							КонецЦикла; 
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
		КонецЦикла;
		
	Иначе
		
		Для Каждого НалоговыеПериоды Из ИтогПоОрганизации.Строки Цикл
			Для Каждого ПорядокОтражения Из НалоговыеПериоды.Строки Цикл
				Для Каждого СтрокаПоПорядокОтражения Из ПорядокОтражения.Строки Цикл
					Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
						Для Каждого ЗаписьКниги Из ИтогПоДокументу.Строки Цикл
							
							Если ЗаписьКниги.Строки.Количество() > 1 И ЗаписьКниги.Покупатель = "Розничная продажа" 
								ИЛИ ЗаписьКниги.СводныйКорректировочный Тогда
								
								Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
									Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
										ПараметрыСтроки = ТаблицаДокумента.Добавить();
									КонецЕсли;
									
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная);
									
									Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
										ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									КонецЕсли;
									
								КонецЦикла;
							Иначе
								Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги);
								
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;

		
КонецПроцедуры

//АБС ВСТАВКА №000028978 НАЧАЛО «9 декабря 2014 г.», Пополитов
//Процедура обновлена для отчёта книга покупок/продаж
Процедура Удалить_ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, Секция, ЗаписьКниги)
	
	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество()>0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Секция) = Тип("ТабличныйДокумент") Тогда
		Секция.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(Секция, ПараметрыЗаполнения);
	КонецЕсли;	

	Секция.ВсегоПродаж	 	  = ЗаписьКниги.ВсегоПродаж;
	Секция.СуммаБезНДС18 	  = ЗаписьКниги.СуммаБезНДС18;
	Секция.НДС18 			  = ЗаписьКниги.НДС18;
	Секция.СуммаБезНДС10 	  = ЗаписьКниги.СуммаБезНДС10;
	Секция.НДС10 			  = ЗаписьКниги.НДС10;
	Секция.НДС0 			  = ЗаписьКниги.НДС0;
	Секция.СуммаБезНДС20 	  = ЗаписьКниги.СуммаБезНДС20;
	Секция.НДС20 			  = ЗаписьКниги.НДС20;
	Секция.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;

	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Секция.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		Секция.СчетФактура = ЗаписьКниги.Строки[0].СчетФактура;
	КонецЕсли;
		
	Если ЭтоДетальнаяЗапись И ЗаписьКниги.Строки.Количество() = 0 Тогда
		РасшифровкаДанныхПокупателя = ЗаписьКниги;
	Иначе
		РасшифровкаДанныхПокупателя = ПараметрыЗаполнения;
	КонецЕсли;
	
	Секция.Покупатель		= РасшифровкаДанныхПокупателя.Покупатель;
	Секция.ПокупательИНН	= РасшифровкаДанныхПокупателя.ПокупательИНН;
	Секция.ПокупательКПП	= РасшифровкаДанныхПокупателя.ПокупательКПП;
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.СчетФактура) Тогда
		СтрокаДополнительнойИнформации = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(РасшифровкаДанныхПокупателя.СчетФактура.УникальныйИдентификатор())];
		Если Не СтрокаДополнительнойИнформации = Неопределено 
			И Не СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
			СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли; 
	Иначе
		СтрокаДополнительнойИнформации = Неопределено;
	КонецЕсли;
	
	ЗаполнениеДатыИНомераСФ(РасшифровкаДанныхПокупателя, СтруктураПараметров, Секция);
	
	ТекстОплаты = "";
	СписокДатОплат = Новый списокЗначений();
	Если ЭтоДетальнаяЗапись Тогда 
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим наличие дополнительных дат оплат	
	Если НЕ СтрокаДополнительнойИнформации = Неопределено 
		 И ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
		 Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
			 Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				 ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
				 СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
			 КонецЕсли;
		 КонецЦикла;
	 КонецЕсли; 

	Секция.ДатаОплаты = ТекстОплаты;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, Секция, ЗаписьКниги, НомерСтроки = Неопределено)
	
	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество()>0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Секция) = Тип("ТабличныйДокумент") Тогда
		Секция.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(Секция, ПараметрыЗаполнения);
	КонецЕсли;	

	Секция.ВсегоПродаж	 	  = ЗаписьКниги.ВсегоПродаж;
	Секция.СуммаБезНДС18 	  = ЗаписьКниги.СуммаБезНДС18;
	Секция.НДС18 			  = ЗаписьКниги.НДС18;
	Секция.СуммаБезНДС10 	  = ЗаписьКниги.СуммаБезНДС10;
	Секция.НДС10 			  = ЗаписьКниги.НДС10;
	Секция.НДС0 			  = ЗаписьКниги.НДС0;
	Секция.СуммаСовсемБезНДС  = ЗаписьКниги.СуммаСовсемБезНДС;

	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Секция.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		Секция.СчетФактура = ЗаписьКниги.Строки[0].СчетФактура;
	КонецЕсли;
		
	Если ЭтоДетальнаяЗапись И ЗаписьКниги.Строки.Количество() = 0 Тогда
		РасшифровкаДанныхПокупателя = ЗаписьКниги;
	Иначе
		РасшифровкаДанныхПокупателя = ПараметрыЗаполнения;
	КонецЕсли;
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("Ном", 			 НомерСтроки);
	СоставСтроки.Вставить("КодОперации", 	 РасшифровкаДанныхПокупателя.КодВидаОперации);
	СоставСтроки.Вставить("Покупатель", 	 РасшифровкаДанныхПокупателя.Покупатель);
	СоставСтроки.Вставить("ПокупательИНН", 	 РасшифровкаДанныхПокупателя.ПокупательИНН);
	СоставСтроки.Вставить("ПокупательКПП", 	 РасшифровкаДанныхПокупателя.ПокупательКПП);
	СоставСтроки.Вставить("ПокупательРазделитель", ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПокупательКПП), "/" , ""));
	СоставСтроки.Вставить("Посредник",		 РасшифровкаДанныхПокупателя.Посредник);
	СоставСтроки.Вставить("ПосредникИНН_КПП","" + РасшифровкаДанныхПокупателя.ПосредникИНН + 
		?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПосредникКПП), "/" + РасшифровкаДанныхПокупателя.ПосредникКПП, ""));
	СоставСтроки.Вставить("Валюта", 			   ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта),
		"" + РасшифровкаДанныхПокупателя.Валюта + ", " + РасшифровкаДанныхПокупателя.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте",    ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта),
		РасшифровкаДанныхПокупателя.ВсегоПродажВВалюте, ""));
	СоставСтроки.Вставить("ДатаНомер", 	 	 ОпределитьДатуИНомерСФ(РасшифровкаДанныхПокупателя, СтруктураПараметров));
	СоставСтроки.Вставить("НомерДата", 	 	 ОпределитьДатуИНомерСФ(РасшифровкаДанныхПокупателя, СтруктураПараметров,Истина));
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.СчетФактура) Тогда
		СтрокаДополнительнойИнформации = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(РасшифровкаДанныхПокупателя.СчетФактура.УникальныйИдентификатор())];
		Если НЕ СтрокаДополнительнойИнформации = Неопределено 
			И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
			СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли; 
	Иначе
		СтрокаДополнительнойИнформации = Неопределено;
	КонецЕсли;
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);	
	Секция.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	Секция.НомерДатаКорректировки = НомерДатаКорректировки;	
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	Секция.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;
		
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	Если ЭтоДетальнаяЗапись Тогда 
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
				КонецЕсли;			
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты", 	 ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);
	
КонецПроцедуры
//\\АБС ВСТАВКА №000028978 КОНЕЦ

Функция ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур, ЗаписьДополнительногоЛиста = Ложь)
	
	// Определить частичные оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДСОборот + НДСЗаписиКнигиПродаж.НДСОборот) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты))) КАК НДСЗаписиКнигиПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СписокСчетовФактур",  СписокСчетовФактур);
	
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;
	
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор()), СтрокаИнформации);
		КонецЕсли; 
	КонецЦикла; 
	
	// дополняем информацию датами оплаты,
	// отраженными в регистре записей книг отдельно от сумм

	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");

	Запрос = Новый Запрос;
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:	
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	//|	НДСЗаписиКнигиПродаж.ДатаОплаты
	//|ИЗ
	//|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	//|ГДЕ
	//|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	//|	И ВЫБОР
	//|			КОГДА &ЗаписьДополнительногоЛиста
	//|					И &ДополнительныеЛистыЗаТекущийПериод
	//|				ТОГДА НДСЗаписиКнигиПродаж.Период >= &НачалоПериода
	//|						И (НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	//|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	//|		КОНЕЦ
	//|	И НДСЗаписиКнигиПродаж.СчетФактура В(&СписокСчетовФактур)
	//|	И НДСЗаписиКнигиПродаж.СуммаБезНДС = 0
	//|	И НДСЗаписиКнигиПродаж.НДС = 0
	//|	И НЕ ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	//|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	//|ИТОГИ ПО
	//|	СчетФактура";
	// }}Новый код:
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И ВЫБОР
	|			КОГДА &ЗаписьДополнительногоЛиста
	|					И &ДополнительныеЛистыЗаТекущийПериод
	|				ТОГДА НДСЗаписиКнигиПродаж.Период >= &НачалоПериода
	|						И (НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И НДСЗаписиКнигиПродаж.СчетФактура В(&СписокСчетовФактур)
	|	И НДСЗаписиКнигиПродаж.СуммаБезНДС = 0
	|	И НДСЗаписиКнигиПродаж.НДС = 0
	|	И НЕ ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	|ИТОГИ ПО
	|	СчетФактура";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", ЗаписьДополнительногоЛиста);
	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиИнформацииСФ = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
		Если СтрокиИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
		Иначе
			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
		КонецЕсли; 
		
		Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
			СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
		КонецЦикла; 
	КонецЦикла; 

	Возврат ДополнительнаяИнформацияПоСФ;
	
КонецФункции // ПолучитьДополнительнуюИнформациюПоСФ()

Процедура ЗаполнениеДатыИНомераСФ(ЗаписьКниги, СтруктураПараметров, Секция)
		
	ДатаНомер = ОпределитьДатуИНомерСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);		
	Секция.ДатаНомер = ДатаНомер;
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);	
	Секция.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);
	Секция.НомерДатаКорректировки = НомерДатаКорректировки;	
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);
	Секция.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	
		
КонецПроцедуры

Функция ОпределитьДатуИНомерСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
		
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат "";
	КонецЕсли;	

	Если ЗначениеЗаполнено(ЗаписьКниги.ДатаСчетаФактуры) И ЗначениеЗаполнено(ЗаписьКниги.НомерСчетаФактуры) Тогда
		Если ЗаписьКниги.ОбрабатыватьНомерДокумента 
			ИЛИ ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда			
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ";" + ПолучитьНомерНаПечать(
				Новый Структура("Дата, Номер, Организация", ЗаписьКниги.ДатаСчетаФактуры, ЗаписьКниги.НомерСчетаФактуры, СтруктураПараметров.Организация), СтруктураПараметров.ПрефиксыРИБиОрганизации);
		Иначе
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ";" + СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
		КонецЕсли;
	Иначе
		
		ДатаНомер = "";
		
		Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ";" + ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактура, СтруктураПараметров.ПрефиксыРИБиОрганизации);
		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ";" + ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактураДокумент, СтруктураПараметров.ПрефиксыРИБиОрганизации);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ДатаНомер;
		
КонецФункции

Функция ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерКорректировки + ";" + Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)

	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправления) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправления) Тогда
		НомерДата = "" + СокрЛП(ЗаписьКниги.НомерИсправления) + ";" + Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy") ;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправленияКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправленияКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерИсправленияКорректировки  + ";" + Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур, Истина);
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
					Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
						
						ЗаполнитьСтрокуДополнительногоЛистаКнигаПродаж(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
							СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
						ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;  
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе	
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
				Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;
					
					ЗаполнитьСтрокуДополнительногоЛистаКнигаПродаж(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
							СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
					Если Не СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
					
					ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
					ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;	
	
КонецПроцедуры

//АБС ВСТАВКА №000028978 НАЧАЛО «9 декабря 2014 г.», Пополитов
//Процедуры обновлены для отчёта книга покупок/продаж
Процедура Удалить_ЗаполнитьСтрокуДополнительногоЛистаКнигаПродаж(
		ПараметрыСтроки, ЗаписьКниги, ЕстьЗаписиПоКолонке20, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)
	
	СтрокаДополнительнойИнформации = Неопределено;
	ДатаНомер = ОпределитьДатуИНомерСФ(ЗаписьКниги.Строки[0], СтруктураПараметров);
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ЗаписьКниги.Строки[0]);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ЗаписьКниги.Строки[0]);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ЗаписьКниги.Строки[0]);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	

	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ЗаписьКниги.Строки[0]);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗаписьКниги.Строки[0]);
	КонецЕсли;	
	
	ПараметрыСтроки.ВсегоПродаж 	   = ЗаписьКниги.ВсегоПродаж;
	ПараметрыСтроки.СуммаБезНДС18 	   = ЗаписьКниги.СуммаБезНДС18;
	ПараметрыСтроки.НДС18 			   = ЗаписьКниги.НДС18;
	ПараметрыСтроки.СуммаБезНДС10 	   = ЗаписьКниги.СуммаБезНДС10;
	ПараметрыСтроки.НДС10 			   = ЗаписьКниги.НДС10;
	ПараметрыСтроки.НДС0 			   = ЗаписьКниги.НДС0;
	ПараметрыСтроки.СуммаБезНДС20 	   = ЗаписьКниги.СуммаБезНДС20;
	ПараметрыСтроки.НДС20 			   = ЗаписьКниги.НДС20;
	ПараметрыСтроки.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;
	
	Если ЗначениеЗаполнено(ЗаписьКниги.Строки[0].СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.Строки[0].СчетФактураДокумент;
	КонецЕсли;

	Если НЕ ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 

	ПараметрыСтроки.ДатаНомер = ДатаНомер;

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
			
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		

	ПараметрыСтроки.ДатаОплаты = ТекстОплаты;
						
КонецПроцедуры

Процедура ЗаполнитьСтрокуДополнительногоЛистаКнигаПродаж(
		ПараметрыСтроки, ЗаписьКниги, ЕстьЗаписиПоКолонке20, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров, НомерСтроки = Неопределено)
	
	СтрокаДополнительнойИнформации = Неопределено;
	ПараметрыЗаполнения = ЗаписьКниги.Строки[0];	
	
	ДатаНомер = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров);
	НомерДата = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров, Истина);
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	

	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	КонецЕсли;	
	
	ПараметрыСтроки.ВсегоПродаж 	   = ЗаписьКниги.ВсегоПродаж;
	ПараметрыСтроки.СуммаБезНДС18 	   = ЗаписьКниги.СуммаБезНДС18;
	ПараметрыСтроки.НДС18 			   = ЗаписьКниги.НДС18;
	ПараметрыСтроки.СуммаБезНДС10 	   = ЗаписьКниги.СуммаБезНДС10;
	ПараметрыСтроки.НДС10 			   = ЗаписьКниги.НДС10;
	ПараметрыСтроки.НДС0 			   = ЗаписьКниги.НДС0;
	ПараметрыСтроки.СуммаБезНДС20 	   = ЗаписьКниги.СуммаБезНДС20;
	ПараметрыСтроки.НДС20 			   = ЗаписьКниги.НДС20;
	ПараметрыСтроки.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("Ном", 			 НомерСтроки);
	СоставСтроки.Вставить("КодОперации", 	 ПараметрыЗаполнения.КодВидаОперации);
	СоставСтроки.Вставить("Покупатель", 	 ПараметрыЗаполнения.Покупатель);
	СоставСтроки.Вставить("ПокупательИНН", 	 ПараметрыЗаполнения.ПокупательИНН);
	СоставСтроки.Вставить("ПокупательКПП", 	 ПараметрыЗаполнения.ПокупательКПП);
	СоставСтроки.Вставить("ПокупательРазделитель", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПокупательКПП), "/" , ""));
	СоставСтроки.Вставить("Валюта", 			   ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте",    ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		ПараметрыЗаполнения.ВсегоПродажВВалюте, ""));
	СоставСтроки.Вставить("ДатаНомер",		 ДатаНомер);
	СоставСтроки.Вставить("НомерДата",		 НомерДата);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ПараметрыЗаполнения.СчетФактураДокумент;
	КонецЕсли;

	Если НЕ ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 

	ПараметрыСтроки.ДатаНомер = ДатаНомер;

	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();	
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;

	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
			
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		

	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты", 	 ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
						
КонецПроцедуры

// Журнал учета счетов-фактур

Процедура Удалить_ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур, СтруктураПараметров) Экспорт
	
	ТекстБезНДС	= "без НДС";
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур);
	
	ПараметрыСтроки.ДатаПередачиПолучения	=
		Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy");
		
	ПараметрыСтроки.ДатаСчетаФактуры	=
		Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
		
	ПараметрыСтроки.ДатаКорректировочногоСчетаФактуры	=
		Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy");
		
	ПараметрыСтроки.ДатаИсправления	=
		Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy");
	
	ПараметрыСтроки.КонтрагентИННКПП = СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП);
	
	Если ЗаписьЖурналаУчетаСчетовФактур.Контрагент = ЗаписьЖурналаУчетаСчетовФактур.Организация Тогда
		ПараметрыСтроки.КонтрагентНаименование = СтруктураПараметров.НаименованиеОрганизацииДляПечатныхФорм;
	КонецЕсли;
	
	ПараметрыСтроки.Валюта = СокрП(ЗаписьЖурналаУчетаСчетовФактур.НаименованиеВалюты) + ", " + ЗаписьЖурналаУчетаСчетовФактур.КодВалюты;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.СчетФактураБезНДС Тогда
		
		Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
			ПараметрыСтроки.СуммаНДСРазницаУменьшение	= ТекстБезНДС;
			ПараметрыСтроки.СуммаНДСРазницаУвеличение	= ТекстБезНДС;
		Иначе
			ПараметрыСтроки.СуммаНДС	= ТекстБезНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим незаполненные значения в графах в соответствии с Постановлением 1137
	
	Если ЗаписьЖурналаУчетаСчетовФактур.СчетФактураНеВыставляется Тогда
		ПараметрыСтроки.ДатаПередачиПолучения = "";
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
		
		ПараметрыСтроки.СуммаДокумента	= "";
		ПараметрыСтроки.СуммаНДС		= "";
		
	Иначе
		
		ПараметрыСтроки.НомерКорректировочногоСчетаФактуры	= "";
		ПараметрыСтроки.ДатаКорректировочногоСчетаФактуры	= "";
		
		ПараметрыСтроки.СуммаДокументаРазницаУменьшение	= "";
		ПараметрыСтроки.СуммаДокументаРазницаУвеличение	= "";
		ПараметрыСтроки.СуммаНДСРазницаУменьшение	= "";
		ПараметрыСтроки.СуммаНДСРазницаУвеличение	= "";
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур, СтруктураПараметров) Экспорт
	
	ТекстБезНДС	= "без НДС";
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур);
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("ДатаПередачиПолучения",	?(ЗаписьЖурналаУчетаСчетовФактур.СчетФактураНеВыставляется, 
		"", ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения));
	СоставСтроки.Вставить("КодОперации", 	 		ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации);
	СоставСтроки.Вставить("НомерСчетаФактуры", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
	СоставСтроки.Вставить("ДатаСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДата", 	 			"" + ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры 
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерИсправления", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
	СоставСтроки.Вставить("ДатаИсправления", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправления", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", 	ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
	СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаКорректировки",	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));	
	СоставСтроки.Вставить("ДатаПередачиПолучения",	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("КонтрагентИННКПП",		СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
	СоставСтроки.Вставить("Валюта",					СокрП(ЗаписьЖурналаУчетаСчетовФактур.НаименованиеВалюты) 
		+ ", " + ЗаписьЖурналаУчетаСчетовФактур.КодВалюты);	
	СоставСтроки.Вставить("СубкомиссионерИНН_КПП", 	СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.СубкомиссионерИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.СубкомиссионерИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.СубкомиссионерИНН));
	СоставСтроки.Вставить("КомитентИНН_КПП", 		СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП));	
	СоставСтроки.Вставить("НомерДатаСчетаФактурыКомитента",	СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента),";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактурыКомитента, "ДФ=dd.MM.yyyy"));	
		
	Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
		
		СоставСтроки.Вставить("СуммаДокумента", "");
		СоставСтроки.Вставить("СуммаНДС", "");
		
	Иначе
		
		СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", "");
		СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", "");
		
		СоставСтроки.Вставить("СуммаДокументаРазницаУменьшение", "");
		СоставСтроки.Вставить("СуммаДокументаРазницаУвеличение", "");
		СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", "");
		СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", "");
		
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.Контрагент = ЗаписьЖурналаУчетаСчетовФактур.Организация Тогда
		СоставСтроки.Вставить("КонтрагентНаименование", СтруктураПараметров.НаименованиеОрганизацииДляПечатныхФорм);
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.СчетФактураБезНДС Тогда
		
		Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
			СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", ТекстБезНДС);
			СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", ТекстБезНДС);
		Иначе
			СоставСтроки.Вставить("СуммаНДС", ТекстБезНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
	
КонецПроцедуры

// Вспомогательные процедуры

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает дату и номер счета-фактуры
// Определяет строку доп. информации, присваивает значение переменной СтрокаДополнительнойИнформации
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, СтруктураПараметров, НомерВпереди = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат "";
	КонецЕсли;
	
	ДатаСФ 	= "";
	НомерСФ = "";	
	
	Если ЗначениеЗаполнено(ЗаписьКниги.ДатаСчетаФактуры) И ЗначениеЗаполнено(ЗаписьКниги.НомерСчетаФактуры) Тогда
		
		//ЗаписьКниги.СчетФактураДокумент
		
		//Если ЗаписьКниги.ОбрабатыватьНомерДокумента И (НЕ ЗаписьКниги.НаАванс) Тогда
		//	
		//	ДатаСФ = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
		//	НомерСФ = ПолучитьНомерНаПечать(
		//			Новый Структура("Дата, Номер, Организация", ЗаписьКниги.ДатаСчетаФактуры, ЗаписьКниги.НомерСчетаФактуры, СтруктураПараметров.Организация), 
		//			СтруктураПараметров.ПрефиксыРИБиОрганизации);	
		//			
		//	//абс_ДобавитьРегион(СтруктураПараметров,ЗаписьКниги,НомерСФ);		
		//			
		//Иначе
		//	
			ДатаСФ = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
			
			//абс_ДобавитьРегион(СтруктураПараметров,ЗаписьКниги,НомерСФ);	
			
		//КонецЕсли;
		
	Иначе

		Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДатаСФ = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			//НомерСФ = ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактура, СтруктураПараметров.ПрефиксыРИБиОрганизации);
			НомерСФ = СокрЛП(ЗаписьКниги.СчетФактура.Номер);


		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДатаСФ = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
			//НомерСФ = ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактураДокумент, СтруктураПараметров.ПрефиксыРИБиОрганизации);
			НомерСФ = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
	
		Иначе
			
			ДатаСФ = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			//НомерСФ = ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактура, СтруктураПараметров.ПрефиксыРИБиОрганизации);
			НомерСФ = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
	
		КонецЕсли;
		
		//абс_ДобавитьРегион(СтруктураПараметров,ЗаписьКниги,НомерСФ);
		
	КонецЕсли;
	// {{KM WARE Акулов А.И. 09.07.2015 начало
	// 
	Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		Платежка = ЗаписьКниги.СчетФактура.абс_ДокументОснование;
		СчетФактураПоПлатежке = kwr_ОпределитьСчетФактуруИсходнуюПоПлатежке(Платежка);
		Если СчетФактураПоПлатежке <> 0 Тогда
			ДатаСФ = "" + Формат(СчетФактураПоПлатежке.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(СчетФактураПоПлатежке.Номер);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		Платежка = ЗаписьКниги.СчетФактураДокумент.абс_ДокументОснование;
		СчетФактураПоПлатежке = kwr_ОпределитьСчетФактуруИсходнуюПоПлатежке(Платежка);
		Если СчетФактураПоПлатежке <> 0 Тогда
			ДатаСФ = "" + Формат(СчетФактураПоПлатежке.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(СчетФактураПоПлатежке.Номер);
		КонецЕсли;
// {{KM WARE Семенов И.С. 16.07.2015 Заявка №  начало
// а чистить глобальные переменные кто будет ?! ;)
// {{KM WARE Акулов А.И. 17.07.2015 начало
// а если платежка вообще не заполнена, то не должно очищаться дата и номе, иначе у обычных сч-ф номер и дата очищает
// {{Старый код:
	//иначе
	//	Платежка = 0;
	//	СчетФактураПоПлатежке = 0;
	//	ДатаСФ = "";
	//	НомерСФ = "";
// }}Новый код:
   ИначеЕсли ЗначениеЗаполнено(Платежка) Тогда
		Платежка = 0;
		СчетФактураПоПлатежке = 0;
		ДатаСФ = "";
		НомерСФ = "";

// }}KM WARE Акулов А.И. 17.07.2015 окончание		
// }}KM WARE Семенов И.С. 16.07.2015 окончание
	КонецЕсли;
	// }}KM WARE Акулов А.И. 09.07.2015 окончание
	Если НомерВпереди Тогда		
		Возврат "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), ";", "") + ДатаСФ;		
	Иначе		
		Возврат "" + ДатаСФ + ?(ЗначениеЗаполнено(ДатаСФ), ";", "") + НомерСФ;		
	КонецЕсли;	
		
КонецФункции
//\\АБС ВСТАВКА №000028978 КОНЕЦ

// Функция определяем по переданной платежке счет-фактуру на аванс
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Счет-фактура   - ссылка на документ вида Счет-фактура выданный
//
// {{KM WARE Акулов А.И. 09.07.2015 начало
Функция kwr_ОпределитьСчетФактуруИсходнуюПоПлатежке(Платежка)

	Запрос = Новый Запрос;
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СчетФактураВыданный.Ссылка
	//|ИЗ
	//|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	//|ГДЕ
	//|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	//|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
	// }}Новый код:
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	Запрос.УстановитьПараметр("ДокументОснование", Платежка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() <> 0 Тогда
		Возврат РезультатЗапроса.Получить(0).Ссылка;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	
КонецФункции // kwr_ОпределитьСчетФактуруИсходнуюПоПлатежке() }}KM WARE Акулов А.И. 09.07.2015 окончание

Процедура абс_ДобавитьРегион(СтруктураПараметров,ЗаписьКниги,НомерСФ)
	
	Попытка
		ОрганизацияСсылка = СтруктураПараметров.Организация;
	Исключение
		ОрганизацияСсылка = Неопределено;
	КонецПопытки;
	Если ОрганизацияСсылка <> Неопределено Тогда
		//определение по типам
		мТипыНумерацииРегионов = Новый Массив;
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.РасходныйКассовыйОрдер"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.СчетФактураВыданный"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.Абс_АктПриёмкиВыполненныхРабот"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.Абс_АктПриёмкиВыполненныхРабот"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.абс_АВИЗО"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.абс_АВИЗО"));  				
		Если мТипыНумерацииРегионов.Найти(ТипЗнч(ЗаписьКниги.СчетФактураДокумент)) <> Неопределено Тогда
			КодРегиона = ОрганизацияСсылка.абс_КодРегиона;
			Если ЗначениеЗаполнено(КодРегиона)
				И (Найти(СокрЛП(НомерСФ), "/" + СокрЛП(КодРегиона) + "/") = 0 
				и Найти(НомерСФ, СокрЛП(КодРегиона) + "/") = 0) 
				Тогда
				//дополним нулями до 5 символов
				Пока СтрДлина(НомерСФ) < 5 Цикл
					НомерСФ = "0" + НомерСФ;
				КонецЦикла;
				//добавим префикс региона
				НомерСФ = СокрЛП(КодРегиона) + "/" + НомерСФ;
			КонецЕсли;
		КонецЕсли;   				
	КонецЕсли; 	
	
КонецПроцедуры	

// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Документ - (ДокументСсылка), документ, чей номер надо получить для печати.
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
Функция ПолучитьНомерНаПечать(Документ, МассивПрефиксов = Неопределено) Экспорт

	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;

	Номер   = СокрЛП(Документ.Номер);
	Префикс = "";
	Если МассивПрефиксов = Неопределено Тогда
		
		Организация = Неопределено;
		
		Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса")
			ИЛИ ТипЗнч(Документ) = Тип("Структура") Тогда

			Организация = Документ.Организация;
			
		Иначе

			МетаданныеДокумента = Документ.Метаданные();

			Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда

				Организация = Документ.Организация;

			КонецЕсли;

		КонецЕсли;
		
		МассивПрефиксовДляОбхода = СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		//++АБС Заявка № 8641 Логинчев А.С.
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") ИЛИ ТипЗнч(Документ) = Тип("Структура") И Документ.Свойство("Грузополучатель") Тогда
			МассивПрефиксовДляОбхода.Добавить("B");
		КонецЕсли;
		//--АБС Заявка № 8641 Логинчев А.С.
		//АБС ВСТАВКА 36163  27.11.2014 16:13:07  Шамов
		//для счетов фактур по реализациям-УПД
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") ИЛИ ТипЗнч(Документ) = Тип("Структура") И Документ.Свойство("Грузополучатель") Тогда
			МассивПрефиксовДляОбхода.Добавить("У");
		КонецЕсли;
		//АБС ВСТАВКА 36163 КОНЕЦ 
	Иначе
		
		МассивПрефиксовДляОбхода = МассивПрефиксов;
		
		жПрефикс = Номер;
		НовыйПрефикс = "";
		НеПравильныеСимволы = "1234567890-";
		Для Сч = 1 по СтрДлина(жПрефикс) Цикл
			ТекСимв = Сред(жПрефикс, Сч, 1);
			Если Найти(НеПравильныеСимволы,ТекСимв) = 0 Тогда
				НовыйПрефикс = НовыйПрефикс + ТекСимв;	
			КонецЕсли;	
		КонецЦикла;	
		Если ЗначениеЗаполнено(НовыйПрефикс) и МассивПрефиксовДляОбхода.Найти(НовыйПрефикс) = Неопределено Тогда
			МассивПрефиксовДляОбхода.Добавить(НовыйПрефикс);	
		КонецЕсли;			
		
	КонецЕсли;
	
	Для Каждого ТекущийПрефикс ИЗ МассивПрефиксовДляОбхода Цикл
		
		// удаление префикса из номера документа
		Если Найти(Номер, ТекущийПрефикс)=1 Тогда 
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;
	
	//АБС ВСТАВКА 49521  27.11.2014 9:21:51  Шамов
	Попытка
		ОрганизацияСсылка = Документ.Организация;
	Исключение
		ОрганизацияСсылка = Неопределено;
	КонецПопытки;
	Если ОрганизацияСсылка <> Неопределено Тогда
		//определение по типам
		мТипыНумерацииРегионов = Новый Массив;
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.РасходныйКассовыйОрдер"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.СчетФактураВыданный"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.Абс_АктПриёмкиВыполненныхРабот"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.Абс_АктПриёмкиВыполненныхРабот"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументСсылка.абс_АВИЗО"));
		мТипыНумерацииРегионов.Добавить(Тип("ДокументОбъект.абс_АВИЗО"));
		//определение по косвенным признакам
		бОбрабатыватьКод = ЛОЖЬ;
		Если 
			(ТипЗнч(Документ) = Тип("Структура") ИЛИ ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса"))
				Тогда
			УИД = Новый УникальныйИдентификатор;
			СтруктураПроверки = Новый Структура("Выдать, ПоДокументу, Получатель, Грузополучатель", УИД, УИД);
			ЗаполнитьЗначенияСвойств(СтруктураПроверки, Документ);
			бОбрабатыватьКод = (СтруктураПроверки.Грузополучатель <> УИД)
				ИЛИ (СтруктураПроверки.Получатель <> УИД)
				ИЛИ (СтруктураПроверки.Выдать <> УИД И СтруктураПроверки.ПоДокументу <> УИД);				
		КонецЕсли;
		
		Если мТипыНумерацииРегионов.Найти(ТипЗнч(Документ)) <> Неопределено
			ИЛИ бОбрабатыватьКод Тогда
			КодРегиона = ОрганизацияСсылка.абс_КодРегиона;
			//если назначен код региона
			//и он есть в начальном номере
			//и его нет в номере на печать
			Если ЗначениеЗаполнено(КодРегиона)
				И (Найти(СокрЛП(Документ.Номер), "/" + СокрЛП(КодРегиона) + "/") = 0 
					и Найти(Номер, СокрЛП(КодРегиона) + "/") = 0) 
				Тогда
				//дополним нулями до 5 символов
				Пока СтрДлина(Номер) < 5 Цикл
					Номер = "0" + Номер;
				КонецЦикла;
				//добавим префикс региона
				Номер = СокрЛП(КодРегиона) + "/" + Номер;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	//АБС ВСТАВКА  КОНЕЦ

	Возврат Номер;

КонецФункции // ПолучитьНомерНаПечать()

Функция СформироватьМассивПрефиксовДляРИБИОрганизации(Организация) Экспорт
	
	МассивПрефиксов = ПолучитьМассивПрефиксовРИБ();	
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Префикс = СокрЛП(Организация.Префикс);
		
		Если Префикс <> "" Тогда
			МассивПрефиксов.Добавить(Префикс);
		КонецЕсли;
		
	КонецЕсли;
	
	//АБС ВСТАВКА 46015  24.09.2014 13:57:58  Шамов
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Префикс = СокрЛП(Организация.абс_КодРегиона);
		
		Если Префикс <> "" Тогда
			МассивПрефиксов.Добавить("/" + Префикс + "/");
		КонецЕсли;
		
	КонецЕсли;
	//АБС ВСТАВКА 46015 КОНЕЦ
	
	Если МассивПрефиксов.Количество() = 0 Тогда
		МассивПрефиксов.Добавить("");
	КонецЕсли;
	
	Возврат МассивПрефиксов;
	
КонецФункции

Функция ПолучитьМассивПрефиксовРИБ()
	
	МассивПрефиксов = Новый Массив();
	
	Запрос = Новый Запрос();
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = "ВЫБРАТЬ Различные
	//			   |	ПрефиксыИнформационныхБаз.Префикс КАК Префикс
	//			   |ИЗ
	//			   |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз";
	// }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Различные
	               |	ПрефиксыИнформационныхБаз.Префикс КАК Префикс
	               |ИЗ
	               |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		
		Если Не ПустаяСтрока(ВыборкаУзлов.Префикс) Тогда
			
			МассивПрефиксов.Добавить(ВыборкаУзлов.Префикс);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат МассивПрефиксов;
	
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры корректировочного
Функция ОпределитьНомерИДатуКорректировочногоСФ(ЗаписьКниги)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерКорректировки + ";" + Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры исправленного
Функция ОпределитьНомерИДатуИсправленногоСФ(ЗаписьКниги)

	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправления) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправления) Тогда
		НомерДата = "" + СокрЛП(ЗаписьКниги.НомерИсправления) + ";" + Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy") ;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры корректировочного исправленного
Функция ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ЗаписьКниги)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправленияКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправленияКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерИсправленияКорректировки  + ";" + Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Процедура УдалитьКолонки20ПроцентовОсновнойРаздел(ТабличныйДокумент)
	
	Область20Процентов = ТабличныйДокумент.Область("Заголовок20Процентов");
	ЛеваяКолонка = Область20Процентов.Лево;
	ПраваяКолонка = Область20Процентов.Право;
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(,ЛеваяКолонка,,ПраваяКолонка),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("Подпись20Процентов"));
	
КонецПроцедуры // УдалитьКолонки20ПроцентовОсновнойРаздел()

Процедура ВывестиПодвал(ТабличныйДокумент, Макет)
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("ФИОРук");
	СписокПоказателей.Добавить("ФИО");
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей);
	СведенияОЮрФизЛице  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата());
	СведенияОбОрганизации.Вставить("Свидетельство", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство,"));
		
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяРук = СведенияОбОрганизации.ФИОРук;
	Секция.Параметры.ИмяОрг = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), СведенияОбОрганизации.ФИО, "");
	Секция.Параметры.Свидетельство = СведенияОбОрганизации.Свидетельство;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

//////////////Учет НДС
// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;

	КонецЕсли;

	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенности(Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоТаможенныйНДС = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", ЭтоУслуга = Неопределено, СтруктураШапкиДокумента = Неопределено, СпособСтроительства = Неопределено, ВидыЦенностейПоСчетамУчета = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();

	ДатаДокумента = ?(СтруктураШапкиДокумента = Неопределено, '00010101', СтруктураШапкиДокумента.Дата);
	Если ЭтоТаможенныйНДС Тогда
		Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
			ВидыЦенностейПоСчетамУчета = Новый Соответствие;
		КонецЕсли;
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОС"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОС", ДатаДокумента);
			ВидыЦенностейПоСчетамУчета.Вставить("ОС", СчетаУчетаЦенностей);
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
		КонецЦикла;
		Если СтруктураШапкиДокумента.Дата >= '20060101' 
			И Не СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) = Неопределено Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи;
		КонецЕсли;
		
	ИначеЕсли ЭтоАгентскийНДС Тогда
		// Это агентский НДС - для него применяется специальный вид ценности
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		ИначеЕсли ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(СчетУчета) Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	ИначеЕсли ЭтоДопРасходы Тогда
		// Это всегда услуги
		Если СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) тогда
			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕслИ;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда	
		ВидЦенности = ?(ВидыЦенностейПоСчетамУчета = Неопределено, Неопределено, ВидыЦенностейПоСчетамУчета[СчетУчета]);
		Если ВидЦенности = Неопределено Тогда
			Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
				ВидыЦенностейПоСчетамУчета = Новый Соответствие;
			КонецЕсли;
			СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["Материалы"];
			Если СчетаУчетаЦенностей = Неопределено Тогда
				СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("Материалы");
				ВидыЦенностейПоСчетамУчета.Вставить("Материалы", СчетаУчетаЦенностей);
			КонецЕсли;
			Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
				ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.Материалы);
			КонецЦикла;
			Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
			Иначе
				СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОС"];
				Если СчетаУчетаЦенностей = Неопределено Тогда
					СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОС", ДатаДокумента);
					ВидыЦенностейПоСчетамУчета.Вставить("ОС", СчетаУчетаЦенностей);
				КонецЕсли;
				Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
					ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.ОС);
				КонецЦикла;
				Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
					ВидЦенности = Перечисления.ВидыЦенностей.ОС;
				Иначе
					СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["Оборудование"];
					Если СчетаУчетаЦенностей = Неопределено Тогда
						СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("Оборудование", ДатаДокумента);
						ВидыЦенностейПоСчетамУчета.Вставить("Оборудование", СчетаУчетаЦенностей);
					КонецЕсли;
					Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
						ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.ОС);
					КонецЦикла;
					Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
						ВидЦенности = Перечисления.ВидыЦенностей.ОС;
					Иначе
						СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["НМА"];
						Если СчетаУчетаЦенностей = Неопределено Тогда
							СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("НМА");
							ВидыЦенностейПоСчетамУчета.Вставить("НМА", СчетаУчетаЦенностей);
						КонецЕсли;
						Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
							ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности.Значение, Перечисления.ВидыЦенностей.НМА);
						КонецЦикла;
						Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
							ВидЦенности = Перечисления.ВидыЦенностей.НМА;
						Иначе
							Если ЭтоУслуга = Неопределено Или ЭтоУслуга = Null Тогда
								ЭтоУслуга = Объект.Услуга;
							КонецЕсли;
							Если ЭтоУслуга Тогда
								ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;	
							Иначе
								ВидЦенности = Перечисления.ВидыЦенностей.Товары;	
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОсновныеСредства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтатьиЗатрат") тогда	
		Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
			ВидыЦенностейПоСчетамУчета = Новый Соответствие;
		КонецЕсли;
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОбъектыСтроительства"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОбъектыСтроительства");
			ВидыЦенностейПоСчетамУчета.Вставить("ОбъектыСтроительства", СчетаУчетаЦенностей);
		КонецЕсли;
		Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
			Если СпособСтроительства = Перечисления.СпособыСтроительства.Хозспособ Тогда
				//Такая ситуация возникает при приобретении услуг, включаемых в затраты по строительству 
				// не от строительной организации (не от подрядчика) (например, это услуги по охране объекта строительства).
				// Необходимо учитывать данные услуги как "Прочие работы и услуги".
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе	
				ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
			Если Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
		Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
			ВидыЦенностейПоСчетамУчета = Новый Соответствие;
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			  ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности, ВидЦенности);
		КонецЦикла;
		
	Иначе	
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		
	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенности()

// Функция определяет объект учета (ценность) в строке табличной части.
// Сама табличная часть задается в параметре ТаблицаЗначений. В результате 
// анализа этой табличной части определяется из какой именно колонки нужно 
// взять объект учета.
Функция ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений)

	Ценность = "";

	Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.Номенклатура;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОбъектСтроительства") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.ОбъектСтроительства;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.НематериальныйАктив;

	КонецЕсли;

	Возврат Ценность;

КонецФункции // ОпределитьЦенностьИзСтрокиТабличнойЧасти()

// Функция определяет вид ценнности по переданным в нее субконто счета учета.
// 
Функция ПолучитьЦенностьПоСубконто(Субконто1, Субконто2, Субконто3)

	ВидЦенности = Неопределено;

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);

	Для каждого Субконто Из МассивСубконто Цикл

		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЦенности = Субконто;
			
		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЦенности = Субконто;
			
		КонецЕсли; 

		// Если вид ценности определен, то прекращаем поиск
		Если ВидЦенности <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ВидЦенности;

КонецФункции // ПолучитьЦенностьПоСубконто()

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если МетаданныеОснования.Реквизиты.Найти("ИспользоватьДокументРасчетовКакСчетФактуру") <> Неопределено
			И МетаданныеОснования.Реквизиты.Найти("РасчетныйДокумент") <> Неопределено 
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если Не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
					И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
					Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
						Возврат Неопределено;
					КонецЕсли;
					МетаданныеОснования = ДокументСсылка.Метаданные();					
				Иначе
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
					МетаданныеОснования = ДокументСсылка.Метаданные();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ПОМЕСТИТЬ ВрмТбл
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Если ТипЗнч(ИсключитьИзВыборкиСФ) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка В (&ИсключитьИзВыборкиСФ)
				|";
		Иначе
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка = &ИсключитьИзВыборкиСФ
				|";
		КонецЕсли;
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;
			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";
			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату" 
						И ВидДокумента = "СчетФактураВыданный" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";
			Иначе
				
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") 
					ИЛИ ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ + " В (&"+ЭлементОтбора.Ключ + ")";
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ +" = &"+ЭлементОтбора.Ключ;
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ";";
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:	
	//Запрос.Текст = Запрос.Текст + "
	//|ВЫБРАТЬ Ссылка
	//| ИЗ ВрмТбл
	//|УПОРЯДОЧИТЬ ПО
	//|	Ссылка.ПометкаУдаления,
	//|	Ссылка.Проведен УБЫВ,
	//|	Ссылка.Дата";
	// }}Новый код:
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка
	| ИЗ ВрмТбл
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.ПометкаУдаления,
	|	Ссылка.Проведен УБЫВ,
	|	Ссылка.Дата";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропрционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РаспределитьСуммуПоСтолбцу()

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра

Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений) Экспорт

	ВидыЦенностейПоСчетамУчета = Неопределено;
	
	ЕстьКолонкаУслуга 				= ТаблицаЗначений.Колонки.Найти("Услуга") <> Неопределено;
	ЕстьКолонкаСчетУчетаБУ 			= ТаблицаЗначений.Колонки.Найти("СчетУчетаБУ") <> Неопределено;
	ЕстьКолонкаСчетУчета 			= ТаблицаЗначений.Колонки.Найти("СчетУчета") <> Неопределено;
	ЕстьКолонкаСчетЗатрат 			= ТаблицаЗначений.Колонки.Найти("СчетЗатрат") <> Неопределено;
	ЕстьКолонкаСубконто1 			= ТаблицаЗначений.Колонки.Найти("Субконто1") <> Неопределено;
	ЕстьКолонкаНоменклатура 		= ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено;
	ЕстьКолонкаОсновноеСредство 	= ТаблицаЗначений.Колонки.Найти("ОсновноеСредство") <> Неопределено;
	ЕстьКолонкаНематериальныйАктив 	= ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено;
	ЕстьСпособСтроительства 		= ТаблицаЗначений.Колонки.Найти("СпособСтроительства") <> Неопределено;
	ЕстьСчетУчетаНДС 				= ТаблицаЗначений.Колонки.Найти("СчетУчетаНДС") <> Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СчетУчетаЦенности = "";
        СпособСтроительства = ?(ЕстьСпособСтроительства, СтрокаТаблицы.СпособСтроительства, Неопределено);

		Если ЕстьКолонкаСчетУчетаБУ Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчетаБУ;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);

		ИначеЕсли ЕстьКолонкаСчетЗатрат И ЕстьКолонкаСубконто1 Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетЗатрат;
			Ценность          = ПолучитьЦенностьПоСубконто(СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3);
			
			Если Не ЕстьСпособСтроительства Тогда
				// Особая обработка для затрат на строительство если способ строительства не указан явно в таблице
				Если ТипЗнч(Ценность) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					Для НомерСубконто =1 По 3 Цикл
						Если ТипЗнч(СтрокаТаблицы["Субконто"+НомерСубконто]) = Тип("ПеречислениеСсылка.СпособыСтроительства")  Тогда
							СпособСтроительства = СтрокаТаблицы["Субконто"+НомерСубконто];
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли ЕстьКолонкаСчетУчета Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчета;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ЕстьКолонкаНоменклатура Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ЕстьКолонкаОсновноеСредство Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.ОсновноеСредство;

		ИначеЕсли ЕстьКолонкаНематериальныйАктив Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.НематериальныйАктив;
			
		КонецЕсли;

		ЭтоДопРасходы         = (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов");
		ЭтоТаможенныйНДС	  = (СтруктураШапкиДокумента.ВидДокумента = "ГТДИмпорт");
		УчетАгентскогоНДС     = Ложь;
		ВидАгентскогоДоговора = "";

		Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") и ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) тогда
			УчетАгентскогоНДС = СтруктураШапкиДокумента.УчетАгентскогоНДС;
		КонецЕсли;
		Если СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора") тогда
			ВидАгентскогоДоговора = СтруктураШапкиДокумента.ВидАгентскогоДоговора;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, СчетУчетаЦенности, ЭтоДопРасходы, ЭтоТаможенныйНДС, УчетАгентскогоНДС, ВидАгентскогоДоговора, ?(ЕстьКолонкаУслуга, СтрокаТаблицы.Услуга, Неопределено), СтруктураШапкиДокумента, СпособСтроительства, ВидыЦенностейПоСчетамУчета);
		СтрокаТаблицы.СчетУчетаЦенности = СчетУчетаЦенности;
		СтрокаТаблицы.Ценность          = Ценность;
		
		Если ЕстьСчетУчетаНДС Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				Если СтруктураШапкиДокумента.Свойство("СчетУчетаНДС") Тогда
					СтрокаТаблицы.СчетУчетаНДС = СтруктураШапкиДокумента.СчетУчетаНДС;
	            Иначе
					СтрокаТаблицы.СчетУчетаНДС = ОпределитьСчетУчетаНДС(СтрокаТаблицы.ВидЦенности);
				КонецЕсли;
			КонецЕсли;
        КонецЕсли;
			
	КонецЦикла

КонецПроцедуры // ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура УстановкаПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", ПометкаНаУдаление = Истина) Экспорт

	// Произошло изменение пометки на удаление
	//Попытаемся найти счет-фактуру
	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ПометкаУдаления <> ПометкаНаУдаление Тогда

		// Есть счет-фактура, нужно установить для него пометку удаления
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.УстановитьПометкуУдаления(ПометкаНаУдаление);
		Если ПометкаНаУдаление Тогда
			ОбщегоНазначения.Сообщение("Документ <" + СчетФактураОбъект + "> помечен на удаление.")
		Иначе
			ОбщегоНазначения.Сообщение("У документа <" + СчетФактураОбъект + "> снята пометка на удаление.")
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с проведением
// счета-фактуры при проведении или отмене проведения документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПроведенияУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Неопределено) Экспорт

	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если ЗначениеЗаполнено(СчетФактура)
		И СчетФактура <> ДокументОбъект.Ссылка 
		И (ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") ИЛИ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		
		Если ДокументОбъект.Проведен И НЕ СчетФактура.Проведен Тогда
			// Есть счет-фактура не проведен, нужно провести (счет-фактура не проведен
			Если НЕ СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести документ <" + СчетФактураОбъект + ">", Отказ, , СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли НЕ ДокументОбъект.Проведен И СчетФактура.Проведен Тогда
			// Есть счет-фактура проведен, нужно отменить проведение
			Если НЕ СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не удалось отменить проведение документа <" + СчетФактураОбъект + ">", Отказ, , СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СинхронизацияПроведенияУСчетаФактуры()

Функция ПолучитьРеквизитыСчетаФактурыВыданного(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДокументОснование", ДокументОснование);
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ	
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетФактураВыданный.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|				И СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|				И СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	СчетФактураВыданный.Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсправления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.НомерИсходногоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.ДатаИсходногоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	(СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка = &ДокументОснование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Проведен УБЫВ,
	|	СчетФактураВыданный.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыСчетаФактуры = Новый Структура("СчетФактура, ПометкаУдаления, Проведен, НомерСчетаФактуры, ДатаСчетаФактуры, 
			|Исправление, НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента,
			|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		Если РеквизитыСчетаФактуры.НомерСчетаФактуры = НЕОПРЕДЕЛЕНО Тогда
			РеквизитыСчетаФактуры.НомерСчетаФактуры = ПолучитьНомерНаПечать(РеквизитыСчетаФактуры.СчетФактура); 
		КонецЕсли;
		Возврат РеквизитыСчетаФактуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьРеквизитыСчетаФактурыПолученного(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	СчетФактураПолученный.Ссылка КАК СчетФактура,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактуры,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
	|	СчетФактураПолученный.Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Исправление
	|			ТОГДА СчетФактураПолученный.НомерИсправления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Исправление
	|			ТОГДА СчетФактураПолученный.ДатаИсправления
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.НомерИсходногоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.ДатаИсходногоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсправленияИсходногоДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсправленияИсходногоДокумента
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|ГДЕ
	|	(СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование
	|			ИЛИ СчетФактураПолученныйДокументыОснования.Ссылка = &ДокументОснование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.ПометкаУдаления,
	|	СчетФактураПолученный.Проведен УБЫВ,
	|	СчетФактураПолученный.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыСчетаФактуры = Новый Структура("СчетФактура, НомерСчетаФактуры, ДатаСчетаФактуры, 
			|Исправление, НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента,
			|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		Возврат РеквизитыСчетаФактуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Для переданного в качестве параметра счета-факутры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основнии.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт

	Результат = Новый Структура("Организация, Контрагент, Договор, СуммаДокумента, ВалютаДокумента, 
		|СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение, СуммаНДСДокумента, СчетФактураБезНДС, НомерСчетаФактурыПродавца, 
		|БланкСтрогойОтчетности, РеквизитыОснований");
		
	Результат.СуммаДокумента 		= 0;
	Результат.СуммаНДСДокумента 	= 0;
	Результат.СуммаУвеличение 		= 0;
	Результат.СуммаНДСУвеличение 	= 0;
	Результат.СуммаУменьшение 		= 0;
	Результат.СуммаНДСУменьшение 	= 0;
	Результат.СчетФактураБезНДС 	= 0;
	
	РеквизитыОснований = Новый ТаблицаЗначений;
	РеквизитыОснований.Колонки.Добавить("ДокументОснование");
	РеквизитыОснований.Колонки.Добавить("НомерИсходногоДокумента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	РеквизитыОснований.Колонки.Добавить("ДатаИсходногоДокумента", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РеквизитыОснований.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	РеквизитыОснований.Колонки.Добавить("НомерИсправленияИсходногоДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	РеквизитыОснований.Колонки.Добавить("ДатаИсправленияИсходногоДокумента", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РеквизитыОснований.Колонки.Добавить("СуммаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	Результат.РеквизитыОснований = РеквизитыОснований;
	
	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли; 
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЭтоПолученныйСФ = Истина;
		Если СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
			И СчетФактура.ДокументыОснования.Количество() > 0
			И ТипЗнч(СчетФактура.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			// Реквизиты заново не определяются, получаются из счета-фактуры
			Результат.Вставить("Организация"	, СчетФактура.Организация);
			Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
			Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
			Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
			Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
			Возврат;
		КонецЕсли;			
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		И (СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация"	, СчетФактура.Организация);
		Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
		Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
		Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
		Возврат;
	КонецЕслИ;
	
	ДокументыОснования = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если не ЗначениеЗаполнено(Основание) Тогда
			Продолжить;			
		КонецЕсли; 

		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли; 
		
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	Если ТипыОснований.Количество() = 0 Тогда
		// ТЧ оснований не заполнена, параметры определить нельзя
		Возврат;
	КонецЕсли;
	
	Корректировка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		ТипДокументаОснования	= ТипОснования.Ключ;
		ДокументыОснования		= ТипОснования.Значение;
	    ТекстЗапроса = "";
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
			ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			Корректировка = Истина;
		КонецЕсли;
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеВНО", ДокументыОснования);

			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка.Организация КАК Организация,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента КАК Договор,
			|	СУММА(ВводНачальныхОстатковНДСДанныеПоСФ.СуммаБезНДС + ВводНачальныхОстатковНДСДанныеПоСФ.НДС) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
			|ИЗ
			|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
			|ГДЕ
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка В(&ДокументОснованиеВНО)
			|	И ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента,
			|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка.Организация";
		
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеАО", ДокументыОснования);
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
			|	АвансовыйОтчетПрочее.Поставщик КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	СУММА(ВЫБОР
			|			КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС
			|				ТОГДА АвансовыйОтчетПрочее.Сумма
			|			ИНАЧЕ АвансовыйОтчетПрочее.Сумма + АвансовыйОтчетПрочее.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(АвансовыйОтчетПрочее.СуммаНДС) КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	АвансовыйОтчетПрочее.БланкСтрогойОтчетности КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			|ГДЕ
			|	АвансовыйОтчетПрочее.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетПрочее.ПредъявленСФ
			|	И АвансовыйОтчетПрочее.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетПрочее.Поставщик,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.Организация,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	АвансовыйОтчетПрочее.БланкСтрогойОтчетности
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	АвансовыйОтчетТовары.Поставщик,
			|	НЕОПРЕДЕЛЕНО,
			|	СУММА(ВЫБОР
			|			КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС
			|				ТОГДА АвансовыйОтчетТовары.Сумма
			|			ИНАЧЕ АвансовыйОтчетТовары.Сумма + АвансовыйОтчетТовары.СуммаНДС
			|		КОНЕЦ),
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	СУММА(АвансовыйОтчетТовары.СуммаНДС),
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетТовары.СчетФактура = &ТекущийДокумент
			|	И АвансовыйОтчетТовары.ПредъявленСФ
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетТовары.Поставщик,
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	ВЫБОР
			|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";
		
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
			ТекстЗапроса =
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ РАЗЛИЧНЫЕ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
			|	ОтчетКомиссионераОПродажах.Ссылка.Организация КАК Организация,
			|	ОтчетКомиссионераОПродажах.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ОтчетКомиссионераОПродажах.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
			|ПОМЕСТИТЬ ВТ_ОтчетКомиссионераОПродажах
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажах
			|ГДЕ
			|	ОтчетКомиссионераОПродажах.Ссылка В(&ДокументыОснования)
			|	И ОтчетКомиссионераОПродажах.ВыставленСФ
			|	И ОтчетКомиссионераОПродажах.СчетФактура = &ТекущийДокумент
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//|ВЫБРАТЬ
			// }}Новый код:
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВЫБОР
			|			КОГДА ОтчетКомиссионераОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС
			|ПОМЕСТИТЬ ВТ_Суммы
			|ИЗ
			|	ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|		ПО ВТ_ОтчетКомиссионераОПродажах.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.КлючСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//|ВЫБРАТЬ
			// }}Новый код:
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	ВТ_ОтчетКомиссионераОПродажах.Организация КАК Организация,
			|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Контрагент,
			|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК Дата,
			|	ВЫБОР
			|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Покупатель = ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			|	КОНЕЦ КАК Договор,
			|	СУММА(ВТ_Суммы.Сумма + ВЫБОР
			|			КОГДА ВТ_ОтчетКомиссионераОПродажах.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ВТ_Суммы.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	СУММА(ВТ_Суммы.СуммаНДС) КАК СуммаНДСДокумента,
			|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(ВТ_Суммы.ЕстьНДС) КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
			|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ВТ_ОтчетКомиссионераОПродажах.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
			|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_Суммы.КлючСтроки
			|ГДЕ
			|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента,
			|	ОтчетКомиссионераОПродажахПокупатели.Покупатель,
			|	ВТ_ОтчетКомиссионераОПродажах.Организация,
			|	ВЫБОР
			|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Покупатель = ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
			|	КОНЕЦ,
			|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_КорректировкаПоступления", ДокументыОснования);
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
			
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕНННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	КорректировкаПоступленияТовары.Ссылка КАК Документ,
			|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
			|	КорректировкаПоступленияТовары.Ссылка.Контрагент КАК Контрагент,
			|	КорректировкаПоступленияТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУменьшение,
			|	КорректировкаПоступленияТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаПоступленияТовары.Сумма
			|					ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаПоступленияТовары.СуммаНДС
			|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
			|	КОНЕЦ КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ПОМЕСТИТЬ КорректировкаПоступления
			|ИЗ
			|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
			|ГДЕ
			|	КорректировкаПоступленияТовары.Ссылка В(&ДокументОснование_КорректировкаПоступления)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаПоступленияУслуги.Ссылка,
			|	КорректировкаПоступленияУслуги.Ссылка.Организация,
			|	КорректировкаПоступленияУслуги.Ссылка.Контрагент,
			|	КорректировкаПоступленияУслуги.Ссылка.ДоговорКонтрагента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - (КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	КорректировкаПоступленияУслуги.Ссылка.ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаПоступленияУслуги.Сумма
			|					ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаПоступленияУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС - (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаПоступленияУслуги.СуммаНДС
			|		ИНАЧЕ КорректировкаПоступленияУслуги.СуммаНДС - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КорректировкаПоступленияУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
			|ГДЕ
			|	КорректировкаПоступленияУслуги.Ссылка В(&ДокументОснование_КорректировкаПоступления)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//|ВЫБРАТЬ
			// }}Новый код:
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	КорректировкаПоступления.Документ,
			|	КорректировкаПоступления.Организация,
			|	КорректировкаПоступления.Контрагент,
			|	КорректировкаПоступления.Договор,
			|	КорректировкаПоступления.ВалютаДокумента,
			|	СУММА(КорректировкаПоступления.СуммаУвеличение) КАК СуммаУвеличение,
			|	СУММА(КорректировкаПоступления.СуммаУменьшение) КАК СуммаУменьшение,
			|	СУММА(КорректировкаПоступления.СуммаНДСУвеличение) КАК СуммаНДСУвеличение,
			|	СУММА(КорректировкаПоступления.СуммаНДСУменьшение) КАК СуммаНДСУменьшение,
			|	СУММА(КорректировкаПоступления.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(КорректировкаПоступления.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(КорректировкаПоступления.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	КорректировкаПоступления КАК КорректировкаПоступления
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаПоступления.Организация,
			|	КорректировкаПоступления.Контрагент,
			|	КорректировкаПоступления.Договор,
			|	КорректировкаПоступления.Документ,
			|	КорректировкаПоступления.ВалютаДокумента
			|ИТОГИ
			|	СУММА(СуммаУвеличение),
			|	СУММА(СуммаУменьшение),
			|	СУММА(СуммаНДСУвеличение),
			|	СУММА(СуммаНДСУменьшение),
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДСДокумента),
			|	СУММА(ЕстьНДС)
			|ПО
			|	ОБЩИЕ";
			
			Если СчетФактура.Исправление Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_КорректировкаРеализации", ДокументыОснования);
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
			
			ТекстЗапроса =
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	КорректировкаРеализацииТовары.Ссылка КАК Документ,
			|	КорректировкаРеализацииТовары.Ссылка.Организация КАК Организация,
			|	КорректировкаРеализацииТовары.Ссылка.Контрагент КАК Контрагент,
			|	КорректировкаРеализацииТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			|	КорректировкаРеализацииТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУвеличение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаНДСУменьшение,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаРеализацииТовары.Сумма
			|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС - (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаРеализацииТовары.СуммаНДС
			|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
			|	КОНЕЦ КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ПОМЕСТИТЬ КорректировкаРеализации
			|ИЗ
			|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|ГДЕ
			|	КорректировкаРеализацииТовары.Ссылка В(&ДокументОснование_КорректировкаРеализации)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаРеализацииУслуги.Ссылка,
			|	КорректировкаРеализацииУслуги.Ссылка.Организация,
			|	КорректировкаРеализацииУслуги.Ссылка.Контрагент,
			|	КорректировкаРеализацииУслуги.Ссылка.ДоговорКонтрагента,
			|	КорректировкаРеализацииУслуги.Ссылка.ВалютаДокумента,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения > 0
			|								ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) > 0
			|							ТОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА ВЫБОР
			|							КОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения < 0
			|								ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ ВЫБОР
			|						КОГДА КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) < 0
			|							ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения > 0
			|					ТОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения < 0
			|					ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА ВЫБОР
			|					КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|						ТОГДА КорректировкаРеализацииУслуги.Сумма
			|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС
			|					ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения
			|				ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС - (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НЕ &КорректировочныйСчетФактура
			|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДС
			|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаНДС - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
			|ГДЕ
			|	КорректировкаРеализацииУслуги.Ссылка В(&ДокументОснование_КорректировкаРеализации)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//|ВЫБРАТЬ
			// }}Новый код:
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	КорректировкаРеализации.Документ,
			|	КорректировкаРеализации.Организация,
			|	КорректировкаРеализации.Контрагент,
			|	КорректировкаРеализации.Договор,
			|	КорректировкаРеализации.ВалютаДокумента,
			|	СУММА(КорректировкаРеализации.СуммаУвеличение) КАК СуммаУвеличение,
			|	СУММА(КорректировкаРеализации.СуммаУменьшение) КАК СуммаУменьшение,
			|	СУММА(КорректировкаРеализации.СуммаНДСУвеличение) КАК СуммаНДСУвеличение,
			|	СУММА(КорректировкаРеализации.СуммаНДСУменьшение) КАК СуммаНДСУменьшение,
			|	СУММА(КорректировкаРеализации.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(КорректировкаРеализации.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(КорректировкаРеализации.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	КорректировкаРеализации КАК КорректировкаРеализации
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализации.Организация,
			|	КорректировкаРеализации.Контрагент,
			|	КорректировкаРеализации.Договор,
			|	КорректировкаРеализации.Документ,
			|	КорректировкаРеализации.ВалютаДокумента
			|ИТОГИ
			|	СУММА(СуммаУвеличение),
			|	СУММА(СуммаУменьшение),
			|	СУММА(СуммаНДСУвеличение),
			|	СУММА(СуммаНДСУменьшение),
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДСДокумента),
			|	СУММА(ЕстьНДС)
			|ПО
			|	ОБЩИЕ";
			
			Если СчетФактура.Исправление Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") тогда 
			
			Запрос.УстановитьПараметр("ДокументОснование_НачислениеНДСпоСМРхозспособом", ДокументыОснования);
		
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	СУММА(НачислениеНДСпоСМРхозспособом.СуммаБезНДС + НачислениеНДСпоСМРхозспособом.НДС) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	СУММА(НачислениеНДСпоСМРхозспособом.НДС) КАК СуммаНДСДокумента,
			|	1 КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособом
			|ГДЕ
			|	НачислениеНДСпоСМРхозспособом.Ссылка В(&ДокументОснование_НачислениеНДСпоСМРхозспособом)
			|
			|СГРУППИРОВАТЬ ПО
			|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_ПринятиеКУчетуОС", ДокументыОснования);
		
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	НДСНачисленныйОбороты.Организация КАК Организация,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	НДСНачисленныйОбороты.НДСПриход КАК СуммаНДСДокумента,
			|	1 КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	РегистрНакопления.НДСНачисленный.Обороты(
			|			,
			|			,
			|			Период,
			|			СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
			|				И СчетФактура В (&ДокументОснование_ПринятиеКУчетуОС)) КАК НДСНачисленныйОбороты";

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.МодернизацияОС") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_МодернизацияОС", ДокументыОснования);
		
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	НДСНачисленныйОбороты.Организация КАК Организация,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	НДСНачисленныйОбороты.НДСПриход КАК СуммаНДСДокумента,
			|	1 КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	РегистрНакопления.НДСНачисленный.Обороты(
			|			,
			|			,
			|			Период,
			|			СчетФактура ССЫЛКА Документ.МодернизацияОС
			|				И СчетФактура В (&ДокументОснование_МодернизацияОС)) КАК НДСНачисленныйОбороты";
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_РеализацияОтгруженныхТоваров", ДокументыОснования);
		
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	РеализацияОтгруженныхТоваров.Организация,
			|	РеализацияОтгруженныхТоваров.Контрагент,
			|	РеализацияОтгруженныхТоваров.ДоговорКонтрагента КАК Договор,
			|	РеализацияОтгруженныхТоваров.СуммаДокумента КАК СуммаДокумента,
			|	РеализацияОтгруженныхТоваров.ДокументОтгрузки.ВалютаДокумента КАК ВалютаДокумента,
			|	РеализацияОтгруженныхТоваров.ДокументОтгрузки КАК ДокументОтгрузки
			|ПОМЕСТИТЬ ВТ_РеализацияОтгруженныхТоваров
			|ИЗ
			|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
			|ГДЕ
			|	РеализацияОтгруженныхТоваров.Ссылка В(&ДокументОснование_РеализацияОтгруженныхТоваров)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументОтгрузки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//|ВЫБРАТЬ
			// }}Новый код:
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
			|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК СуммаДокумента,
			|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС
			|ПОМЕСТИТЬ ВТ_Суммы
			|ИЗ
			|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = РеализацияТоваровУслугТовары.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПередачаОСОС.Ссылка,
			|	СУММА(ПередачаОСОС.Сумма),
			|	СУММА(ПередачаОСОС.СуммаНДС),
			|	СУММА(ВЫБОР
			|			КОГДА ПередачаОСОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ)
			|ИЗ
			|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПередачаОСОС
			|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = ПередачаОСОС.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПередачаОСОС.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//|ВЫБРАТЬ
			// }}Новый код:
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	ВТ_РеализацияОтгруженныхТоваров.Организация,
			|	ВТ_РеализацияОтгруженныхТоваров.Контрагент,
			|	ВТ_РеализацияОтгруженныхТоваров.Договор,
			|	ВТ_РеализацияОтгруженныхТоваров.ВалютаДокумента,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности,
			|	СУММА(ВТ_Суммы.СуммаДокумента) КАК СуммаДокумента,
			|	СУММА(ВТ_Суммы.СуммаНДСДокумента) КАК СуммаНДСДокумента,
			|	СУММА(ВТ_Суммы.ЕстьНДС) КАК ЕстьНДС
			|ИЗ
			|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
			|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = ВТ_Суммы.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_РеализацияОтгруженныхТоваров.Организация,
			|	ВТ_РеализацияОтгруженныхТоваров.Контрагент,
			|	ВТ_РеализацияОтгруженныхТоваров.Договор,
			|	ВТ_РеализацияОтгруженныхТоваров.ВалютаДокумента";
		
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			Запрос.УстановитьПараметр("ДокументОснование_ПоступлениеДопРасходов", ДокументыОснования);
				
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	Таблица.Ссылка.Организация КАК Организация,
			|	Таблица.Ссылка.Контрагент КАК Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента КАК Договор,
			|	СУММА(Таблица.Сумма + ВЫБОР
			|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ Таблица.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
			|	СУММА(Таблица.СуммаНДС) КАК СуммаНДСДокумента,
			|	СУММА(ВЫБОР
			|			КОГДА Таблица.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ.ПоступлениеДопРасходов.Товары КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	Таблица.Ссылка,
			|	Таблица.Ссылка.Организация,
			|	Таблица.Ссылка.Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента,
			|	Таблица.Ссылка.ВалютаДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка.Организация,
			|	Таблица.Ссылка.Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента,
			|	СУММА(Таблица.Сумма + ВЫБОР
			|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ Таблица.СуммаНДС
			|		КОНЕЦ),
			|	Таблица.Ссылка.ВалютаДокумента,
			|	СУММА(Таблица.СуммаНДС),
			|	СУММА(ВЫБОР
			|			КОГДА Таблица.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ),
			|	ЛОЖЬ
			|ИЗ
			|	Документ.ПоступлениеДопРасходов.Оборудование КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	Таблица.Ссылка,
			|	Таблица.Ссылка.Организация,
			|	Таблица.Ссылка.Контрагент,
			|	Таблица.Ссылка.ДоговорКонтрагента,
			|	Таблица.Ссылка.ВалютаДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоступлениеДопРасходов.Организация,
			|	ПоступлениеДопРасходов.Контрагент,
			|	ПоступлениеДопРасходов.ДоговорКонтрагента,
			|	СУММА(ПоступлениеДопРасходов.Сумма + ВЫБОР
			|			КОГДА ПоступлениеДопРасходов.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ПоступлениеДопРасходов.СуммаНДС
			|		КОНЕЦ),
			|	ПоступлениеДопРасходов.ВалютаДокумента,
			|	СУММА(ПоступлениеДопРасходов.СуммаНДС),
			|	СУММА(ВЫБОР
			|			КОГДА ПоступлениеДопРасходов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ),
			|	ЛОЖЬ
			|ИЗ
			|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
			|ГДЕ
			|	ПоступлениеДопРасходов.Ссылка В(&ДокументОснование_ПоступлениеДопРасходов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеДопРасходов.Организация,
			|	ПоступлениеДопРасходов.Контрагент,
			|	ПоступлениеДопРасходов.ДоговорКонтрагента,
			|	ПоступлениеДопРасходов.ВалютаДокумента";
				
		Иначе
			
			ТекстЗапроса = ПолучитьТекстЗапросаОпределенияПараметровСФ(ДокументыОснования, ЭтоПолученныйСФ, Запрос.Параметры);
			
		КонецЕсли;
				
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ТекстЗапроса;
		КонецЕсли;
 		
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
	    Возврат;
	Иначе
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПерваяСтрока      = Истина;
		РазныеОрганизации = Ложь;
		РазныеКонтрагенты = Ложь;
		РазныеДоговоры    = Ложь;
		РазныеВалюты      = Ложь;
		Пока Выборка.Следующий() Цикл
			
			ЭтоКорректировочный = Ложь;
			
			Если Корректировка Тогда
				
				Если ЭтоПолученныйСФ Тогда
					ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				Иначе
					ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;						
				КонецЕсли;
				
				Результат.СуммаУвеличение		= Результат.СуммаУвеличение + Выборка.СуммаУвеличение;
				Результат.СуммаУменьшение		= Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
				Результат.СуммаНДСУвеличение	= Результат.СуммаНДСУвеличение + Выборка.СуммаНДСУвеличение;
				Результат.СуммаНДСУменьшение	= Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
				Результат.СуммаДокумента 		= Результат.СуммаДокумента + Выборка.СуммаДокумента;
				Результат.СуммаНДСДокумента 	= Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
				
				ВыборкаДокументы = Выборка.Выбрать();
				Пока ВыборкаДокументы.Следующий() Цикл
					
					Если ПерваяСтрока Тогда
						СтрокаРеквизитов = "Организация,Контрагент,ВалютаДокумента,Договор";
						ЗаполнитьЗначенияСвойств(Результат, ВыборкаДокументы, СтрокаРеквизитов);
						Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
						ПерваяСтрока = Ложь;
					КонецЕсли;
					
					РазныеОрганизации	= РазныеОрганизации ИЛИ Результат.Организация <> ВыборкаДокументы.Организация;
					РазныеКонтрагенты	= РазныеКонтрагенты ИЛИ Результат.Контрагент <> ВыборкаДокументы.Контрагент;
					РазныеВалюты		= РазныеВалюты ИЛИ Результат.ВалютаДокумента <> ВыборкаДокументы.ВалютаДокумента;
					РазныеДоговоры		= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.Договор <> ВыборкаДокументы.Договор);
					
					Если Результат.СчетФактураБезНДС Тогда
						Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
					КонецЕсли;
					
					Если ЭтоКорректировочный Тогда
						
						СтрокаСРеквизитами = РеквизитыОснований.Добавить();
						
						СтрокаСРеквизитами.ДокументОснование 	= ВыборкаДокументы.Документ;
						СтрокаСРеквизитами.СуммаУвеличение 		= ВыборкаДокументы.СуммаУвеличение;
						СтрокаСРеквизитами.СуммаУменьшение 		= ВыборкаДокументы.СуммаУменьшение;
						СтрокаСРеквизитами.СуммаНДСУвеличение	= ВыборкаДокументы.СуммаНДСУвеличение;
						СтрокаСРеквизитами.СуммаНДСУменьшение 	= ВыборкаДокументы.СуммаНДСУменьшение;
						
						Если ЭтоПолученныйСФ Тогда
							
							ДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДокументы.Документ, "ДокументПоступления");	
							
							Если СчетФактура.Исправление Тогда 
								ИсходныйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(ВыборкаДокументы.Документ);
								Если ТипЗнч(ИсходныйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
									ИсходныйДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокументПоступления, "ДокументПоступления");
								КонецЕсли; 
							Иначе
								ИсходныйДокументПоступления = ДокументПоступления;
							КонецЕсли;
							
							РеквизитыИсходногоСчетаФактуры = ПолучитьРеквизитыСчетаФактурыПолученного(ИсходныйДокументПоступления);
							
							Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
								
								СтрокаСРеквизитами.НомерИсходногоДокумента 				  = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
								СтрокаСРеквизитами.ДатаИсходногоДокумента  				  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
								СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
								СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
								СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
								
							КонецЕсли;
							
						Иначе
							
							ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДокументы.Документ, "ДокументРеализации");	
							
							Если СчетФактура.Исправление Тогда 
								ИсходныйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ВыборкаДокументы.Документ);
								Если ТипЗнч(ИсходныйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
									ИсходныйДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокументРеализации, "ДокументРеализации");
								КонецЕсли; 
							Иначе
								ИсходныйДокументРеализации = ДокументРеализации;	
							КонецЕсли;
							
							РеквизитыИсходногоСчетаФактуры = ПолучитьРеквизитыСчетаФактурыВыданного(ИсходныйДокументРеализации);
							
							Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
								
								СтрокаСРеквизитами.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
								СтрокаСРеквизитами.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
								СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
								СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
								СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
								
							КонецЕсли;
 					
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					ЗаполнитьЗначенияСвойств(Результат, Выборка);
					Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
				Иначе
					РазныеОрганизации = РазныеОрганизации ИЛИ Результат.Организация <> Выборка.Организация;
					РазныеКонтрагенты = РазныеКонтрагенты ИЛИ Результат.Контрагент <> Выборка.Контрагент;
					РазныеВалюты      = РазныеВалюты ИЛИ Результат.ВалютаДокумента <> Выборка.ВалютаДокумента;
					РазныеДоговоры    = ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.Договор <> Выборка.Договор);
					
					Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
					Результат.СуммаНДСДокумента = Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
					
					Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
						ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
						
						Результат.СуммаУвеличение    = Результат.СуммаУвеличение    + Выборка.СуммаУвеличение;
						Результат.СуммаУменьшение    = Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
						Результат.СуммаНДСУвеличение = Результат.СуммаНДСУвеличение    + Выборка.СуммаНДСУвеличение;
						Результат.СуммаНДСУменьшение = Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
					Иначе
						Результат.СуммаУвеличение 	 = 0;
						Результат.СуммаУменьшение 	 = 0;					
						Результат.СуммаНДСУвеличение = 0;
						Результат.СуммаНДСУменьшение = 0;					
					КонецЕсли;
					
					Если Результат.СчетФактураБезНДС Тогда
						Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазныеОрганизации ИЛИ РазныеКонтрагенты ИЛИ РазныеВалюты Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:"+
				?(РазныеОрганизации,Символы.ПС+" - не совпадает организация","")+
				?(РазныеКонтрагенты,Символы.ПС+" - не совпадает контрагент","")+
				?(РазныеДоговоры,Символы.ПС+" - не совпадает договор","")+
				?(РазныеВалюты,Символы.ПС+" - не совпадает валюта документа","")+
				Символы.ПС+"Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.", Ложь, Строка(СчетФактура), СтатусСообщения.Внимание); 
			Если РазныеОрганизации Тогда
				 Результат.Организация = Неопределено;
			КонецЕсли; 				
			Если РазныеКонтрагенты Тогда
				 Результат.Контрагент = Неопределено;
			КонецЕсли; 				
			Если РазныеВалюты Тогда
				 Результат.ВалютаДокумента = Неопределено;
			КонецЕсли; 				
			Если РазныеДоговоры Тогда
				 Результат.Договор = Неопределено;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПолучитьПараметрыСчетаФактуры()

Функция ПолучитьТекстЗапросаОпределенияПараметровСФ(ДокументыОснования, ЭтоПолученныйСФ, ПараметрыЗапроса, ИмяВременнойТаблицы = "") Экспорт
	
	ИгнорироватьТЧ = Новый Массив;
	ИгнорироватьТЧ.Добавить("ВозвратнаяТара");
	ИгнорироватьТЧ.Добавить("ВыданныеАвансы");
	ИгнорироватьТЧ.Добавить("ДенежныеСредства");
	ИгнорироватьТЧ.Добавить("ПрочиеЗатраты");
	ИгнорироватьТЧ.Добавить("РаспределениеПрочихЗатрат");
	ИгнорироватьТЧ.Добавить("ИспользованныеМатериалы");
	
	МетаданныеДокумента = ДокументыОснования[0].Метаданные();
	ТипДокументаОснования = ТипЗнч(ДокументыОснования[0]);
	
	ИмяОбъекта = МетаданныеДокумента.Имя;
	ПараметрыЗапроса.Вставить("ДокументОснование_" + ИмяОбъекта, ДокументыОснования);
	
	ПостфиксСумм = "";
	Множитель = 1;
	ИмяРеквизитаСтавкаНДС = "СтавкаНДС";
	
	Если ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И ЭтоПолученныйСФ Тогда
			
		ПостфиксСумм = "Вознаграждения";
		ИмяРеквизитаСтавкаНДС = "Ссылка.СтавкаНДСВознаграждения";
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И НЕ ЭтоПолученныйСФ
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ Тогда
			
		Множитель = - 1;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Множитель_" + ИмяОбъекта, Множитель);
	
	ТекстЗапроса = "";
	
	ТекстСекцииПоместить = "";
	
	Для каждого МетаданныеТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ИгнорироватьТЧ.Найти(МетаданныеТЧ.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеТЧ.Реквизиты.Найти("Сумма") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСуммаВключаетНДС = МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Если НЕ ПустаяСтрока(ИмяВременнойТаблицы) Тогда
				ТекстСекцииПоместить = "
				|ПОМЕСТИТЬ
				|	" + ИмяВременнойТаблицы + "
				|";
			КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			ТекстСекцииПоместить = "";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
		// {{KM WARE Акулов А.И. 14.07.2015 начало
		// не достаточно прав
		// {{Старый код:
		//"ВЫБРАТЬ
		// }}Новый код:
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// }}KM WARE Акулов А.И. 14.07.2015 окончание
		|	Таблица.Ссылка.Организация КАК Организация,
		|	Таблица.Ссылка.Контрагент КАК Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента КАК Договор,
		|	СУММА(Таблица.Сумма" + ПостфиксСумм + ?(ЕстьСуммаВключаетНДС, " + ВЫБОР
		|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|				ТОГДА 0
		|			ИНАЧЕ Таблица.СуммаНДС" + ПостфиксСумм + "
		|		КОНЕЦ", "") + ") * &Множитель_" + ИмяОбъекта + " КАК СуммаДокумента,
		|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	СУММА(Таблица.СуммаНДС" + ПостфиксСумм + ") * &Множитель_" + ИмяОбъекта + " КАК СуммаНДСДокумента,
		|	СУММА(ВЫБОР
		|			КОГДА Таблица." + ИмяРеквизитаСтавкаНДС + " = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК ЕстьНДС,
		|	ЛОЖЬ КАК БланкСтрогойОтчетности" + ТекстСекцииПоместить + "
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + "." + МетаданныеТЧ.Имя + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Ссылка.Организация,
		|	Таблица.Ссылка.Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента,
		|	Таблица.Ссылка.ВалютаДокумента";
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда // в документе не оказалось табличных частей
		
		Если МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
			
			ТекстЗапроса = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	ДокОснование.Организация КАК Организация,
			|	ДокОснование.Контрагент КАК Контрагент,
			|	ДокОснование.ДоговорКонтрагента КАК Договор,
			|	СУММА(ДокОснование.Сумма + ВЫБОР
			|			КОГДА ДокОснование.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ДокОснование.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	ДокОснование.СуммаНДС КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ." + МетаданныеДокумента.Имя + " КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&ДокументОснование_" + МетаданныеДокумента.Имя + ")
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокОснование.Ссылка,
			|	ДокОснование.ДоговорКонтрагента,
			|	ДокОснование.СуммаНДС,
			|	ДокОснование.Организация,
			|	ДокОснование.Контрагент,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";
			
			
		Иначе
			
			Если (ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
				или ((ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) И ЭтоПолученныйСФ) Тогда
				ИдРеквСумма = "СуммаВознаграждения";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И не ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			Иначе
				ИдРеквСумма = "СуммаДокумента";
			КонецЕсли;
			
			ИмяОбъекта = МетаданныеДокумента.Имя;
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//ТекстЗапроса = "ВЫБРАТЬ
			// }}Новый код:
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	" + ИмяОбъекта + ".Организация,
			|	" + ИмяОбъекта + ".Контрагент,
			|	" + ИмяОбъекта + ".ДоговорКонтрагента как Договор,
			|	" + ИмяОбъекта + "." + ИдРеквСумма + " Как СуммаДокумента,
			|	" + ИмяОбъекта + ".ВалютаДокумента Как ВалютаДокумента,
			|	0 Как СуммаНДСДокумента,
			|	1 Как ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК " + ИмяОбъекта + "
			
			|ГДЕ
			|	" + ИмяОбъекта + ".Ссылка в (&ДокументОснование_"+ИмяОбъекта+")";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура проверяет соответствие реквизитов счета-фактуры и документа-основания.
// В случае несоответствия реквизиты счета-фактуры перезаполняются и выдается сообщение пользователю.
//
// Параметры:
//		- ДокОбъект - документ-основание
//		- Сообщать  - флаг, если истина, то выводить сообщение пользователю, по умолчанию = Истина
//
// Возврат:
//		- Истина, если различий не найдено, Ложь в противном случае
//
Функция ПроверитьСоответствиеРеквизитовСчетаФактуры(ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина, НайденныйСФ = Неопределено) Экспорт
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		// {{KM WARE Акулов А.И. 14.07.2015 начало
		// не достаточно прав
		// {{Старый код:
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		// }}Новый код:
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		// }}KM WARE Акулов А.И. 14.07.2015 окончание
		|	Таб.СчетФактура КАК СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)";
		Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
		СчетаФактуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
		
		Если СчетаФактуры.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		
		СчетаФактуры = Новый Массив;
		Если НайденныйСФ = Неопределено Тогда
			СчетФактура = НайтиПодчиненныйСчетФактуру( ДокОбъект.Ссылка, ВидДокумента);
			НайденныйСФ = СчетФактура;
		Иначе
			СчетФактура = НайденныйСФ;
		КонецЕсли;
		
		Если СчетФактура = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		СчетаФактуры.Добавить(СчетФактура);
		
	КонецЕсли;
	
	Для каждого СчетФактура Из СчетаФактуры Цикл
		
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетФактура.ПометкаУдаления Тогда
			
			ttk_ОбщегоНазначения.СообщитьОбОшибке(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ ""%1"" помечен на удаление. Реквизиты документа автоматически не перезаполнены'"),
					СчетФактура),
					Ложь,
					"",
					СтатусСообщения.Внимание);
					
			Продолжить;
			
		КонецЕсли;
		
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();		
		
		Попытка
			СчетФактураОбъект.Заблокировать();
			Если СчетФактураОбъект.ПроверитьЗаполнение() Тогда				
				
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("СообщитьОбИзмененииРеквизитов", Истина);			
				Если ПолучитьВерсиюПостановления(СчетФактураОбъект.Дата) = 2 Тогда
					Если ДокОбъект.Проведен Тогда
						Если СчетФактура.Проведен 
							ИЛИ ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
							СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Иначе	
							СчетФактураОбъект.Записать();
						КонецЕсли;
					Иначе
						Если СчетФактура.Проведен Тогда
							СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Иначе	
							СчетФактураОбъект.Записать();
						КонецЕсли;
					КонецЕсли;
				Иначе
					СчетФактураОбъект.Записать();
				КонецЕсли;
			
			Иначе
				ttk_ОбщегоНазначения.СообщитьОбОшибке(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
						СчетФактура),
					Ложь,
					"",
					СтатусСообщения.Внимание);
			КонецЕсли;
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
					СчетФактура),
				Ложь,
				"",
				СтатусСообщения.Внимание);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСНачисленный в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС) Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));
	
	ВидыНачисленияРеализация = Новый СписокЗначений;
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:	
	//Запрос.Текст = "ВЫБРАТЬ
	// }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	               |	НДСНачисленныйОбороты.ВидНачисления,
	               |	СУММА(НДСНачисленныйОбороты.СуммаБезНДСПриход) КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Обороты(
	               |		НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
	               |		КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
	               |		,
	               |		Организация = &Организация
	               |		    И (СчетФактура.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ))
	               |		    И ВидНачисления В (&ВидыНачисленияРеализация)) КАК НДСНачисленныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленныйОбороты.ВидНачисления";
			
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		Если СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС Тогда
		    ВыручкаНДС = ВыручкаНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС Тогда	
			ВыручкаБезНДС = ВыручкаБезНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД Тогда	
			ВыручкаЕНВД = ВыручкаЕНВД + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0 Тогда	
			ВыручкаНДС0 = ВыручкаНДС0 + СтрокаРезультата.СуммаБезНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьВыручкуДляНДС()

// Функция определяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
// ФильтроватьКорректировкуРеализации - Булево - Признак отбора счетов-фактур
//                        Истина - Отбирать все счета-фактуры, кроме тех, у которых основание "Корректировка реализации"
//                        Ложь   - Отбирать все счета-фактуры, в т.ч. и те, у которых основание "Корректировка реализации"
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
//                                  фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактурПолученных(
		НачПериода = Неопределено,
		КонПериода = Неопределено,
		Организация,
		Фильтр = Неопределено,
		ВсеКромеФильтра = Ложь,
		НаличиеСчетаФактуры = Неопределено,
		СчетФактураПроведен = Неопределено,
		ДатаСФНеБолее = Неопределено,
		ФильтроватьКорректировкуРеализации = Ложь) Экспорт

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",  	НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  	?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Фильтр",      	Фильтр);
	
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";
	ИначеЕсли (ЗначениеЗаполнено(НачПериода)) И (НЕ ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата >= &НачПериода
		                 |";
	ИначеЕсли (НЕ ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата <= &КонПериода
		                 |";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(НЕ ЗначениеЗаполнено(Организация), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(НЕ ЗначениеЗаполнено(Фильтр), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА СчетФактураВыданный.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Проведен
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее), "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА СчетФактураВыданный.Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Дата
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Дата, СчетФактураВыданный.Дата)
					|	КОНЕЦ <= &ДатаСФНеБолее ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса + ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА " + ?(ФильтроватьКорректировкуРеализации, "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
					|			ИЛИ ", "") + "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.УчетАгентскогоНДС
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.НалоговыйАгентПоОплате
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ";
	
	// Дополняем условие запроса ключевым словом "ГДЕ"
	УсловиеЗапроса = ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);
	
	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Проведен,
	|	СчетФактураПолученный.Ссылка КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ВТ_СчетФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|	
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Ссылка.Дата КАК Дата,
	|	СчетФактураПолученный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Ссылка.Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.Проведен,
	|	ВозвратТоваровОтПокупателя.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера <> """"
	|	И ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера <> ДАТАВРЕМЯ(1, 1, 1)
	|" + ?(ЗначениеЗаполнено(Организация), "И ВозвратТоваровОтПокупателя.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Проведен,
	|	СчетФактураВыданный.Ссылка КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ВТ_СчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Ссылка.Дата КАК Дата,
	|	СчетФактураВыданный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураВыданный.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Ссылка.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента
	|
	|ПОМЕСТИТЬ ВТ_НДСПредъявленныйОбороты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, , Период, 
	|				Организация = &Организация //ДляЗамены
	|		) КАК НДСПредъявленныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Проведен
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Дата
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Дата, СчетФактураВыданный.Дата)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	ВТ_НДСПредъявленныйОбороты КАК НДСПредъявленныйОбороты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактурыПолученные КАК СчетФактураПолученный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|";
	
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация //ДляЗамены",Условие_Основание);
	
	Если ЗначениеЗаполнено(КонПериода) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,", Период","&КонПериода, Период");
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
									|УПОРЯДОЧИТЬ ПО
									|	СчетФактураДата";
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции // ОпределитьНаличиеСчетовФактурПолученных()

Функция ПроводитьПоРазделуУчетаНДС(ДатаДокумента) Экспорт
	
	//ДатаНачалаУчетаНДС = Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить();
	
	//Возврат ДатаНачалаУчетаНДС < ДатаДокумента;
	
	Возврат Истина;
	
КонецФункции

Функция РасчетНДСвРубляхПоСтавкеДокумента(ДатаДокумента) Экспорт
	
	ДатаРасчетаПоСтавкеНДС = Константы.ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС.Получить();
	
	Возврат ?(ЗначениеЗаполнено(ДатаРасчетаПоСтавкеНДС), ДатаРасчетаПоСтавкеНДС<= ДатаДокумента,Ложь);
	
КонецФункции

// Определяет дату начала налогового периода для НДС по учетной политике
Функция ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли НЕ УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат ?(Дата >= '20080101', НачалоКвартала(Дата), НачалоМесяца(Дата));
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
		Результат = НачалоКвартала(Дата);
	Иначе
		Результат = НачалоМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет дату окончания налогового периода для НДС по учетной политике
Функция ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
			Отказ = Истина;
		КонецЕсли;	
	ИначеЕсли не УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат ?(Дата >= '20080101', КонецКвартала(Дата), КонецМесяца(Дата));
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
		Результат = КонецКвартала(Дата);
	Иначе
		Результат = КонецМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрименяетсяОсвобождениеОтУплатыНДС(Организация, Период)

	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Период, Организация);
	
	Если ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		Возврат УчетнаяПолитикаНУ.ПрименяетсяОсвобождениеОтУплатыНДС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

Функция ДляСчетаФактурыНеТребуетсяКонтрагент(СчетФактура) Экспорт
	
	Возврат ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом");
			
КонецФункции

/////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ

//Преименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ttk_ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ttk_ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры

Функция ВидыЦенностейНалоговыйАгент() Экспорт
	
	ВидыЦенностей_НА = Новый СписокЗначений;
	ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Возврат ВидыЦенностей_НА;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
//Преобразование промежуточных таблиц для НДС

// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "") Экспорт
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныйхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныйхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции

//////////////////////////////////////////////////////////////////////////
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС

// Формирует список счетов учета косвенных расходов
Функция ОпределитьСчетаУчетаКосвенныхРасходов() Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводствоНеОблагаемоеЕНВД);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводстваНеОблагаемоеЕНВД);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходыРаспределяемые);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходыРаспределяемые);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращения);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращенияНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращенияРаспределяемые);
	
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходыНеОблагаемыеЕНВД);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходыРаспределяемые);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|	ПО
	|		Хозрасчетный.Ссылка = СчетаУчетаПоДеятельностиЕНВД.Счет
	|	
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И Не Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И (СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|	   ИЛИ СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению)
	|";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

// Формирует список счетов учета ценностей
// ОС - основных средств
// НМА - нематериальных активов
// ВНА - внеоборотных активов
// ОбъектыСтроительства - объектов строительства
// Материалы - материалов
//
Функция ОпределитьСчетаУчетаЦенностей(ОбъектыУчета = "", ДатаОбъекта = '00010101')

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе 
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	Если ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;  
	Если ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "Материалы" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

Функция ВидыЦенностиНалоговыйАгентПоступление() Экспорт
	
	ВидыЦенностей = Новый Массив;
	ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	Возврат ВидыЦенностей;
	
КонецФункции

Функция НалоговыйАгентЗаСчетСобственныхСредств(ВидЦенностиВидДоговора) Экспорт
	
	Если ТипЗнч(ВидЦенностиВидДоговора) = Тип("ПеречислениеСсылка.ВидыЦенностей") Тогда
		Если ВидЦенностиВидДоговора = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если ВидЦенностиВидДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручки,Отказ, Заголовок, ЭтоВозврат = Ложь, ЭтоВозвратОтПокупателя = Ложь, СтруктураПараметров, ЭтоКорректировкаРеализации = Ложь) Экспорт
	
	ВидДокумента = "";
	СтруктураШапкиДокумента.Свойство("ВидДокумента", ВидДокумента);
	ВестиСуммовойУчетПоСкладамБУ = УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	
	ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	
	ПартионныйУчетБУ = ((СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
					Или СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО)
					И (Не УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)));
	
	ТаблицаСписанияНДСПоСтрокам = РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС 
		И Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик
		Тогда
		
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("СерияНоменклатуры_Базовая");
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ХарактеристикаНоменклатуры_Базовая");
		
		ТаблицаВыручки.Колонки.Добавить("СерияНоменклатуры_Базовая");
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("СерияНоменклатуры"), "СерияНоменклатуры_Базовая");
		ТаблицаВыручки.Колонки.Добавить("ХарактеристикаНоменклатуры_Базовая");
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"), "ХарактеристикаНоменклатуры_Базовая");
		
	КонецЕсли;
	
	Если ЭтоВозврат 
		И Не ЭтоВозвратОтПокупателя Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	
	Для Каждого Колонка Из ТаблицаВыручки.Колонки Цикл
		Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения); 
		КонецЕсли; 
	КонецЦикла;
		
	ТаблицаВыручки.Колонки.Добавить("НДСВСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Если СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров") Тогда
		ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВСтоимостиТоваров, "НДСВСтоимостиТоваров")	
	КонецЕсли; 
	
	ЕстьСтавкаНДС = ТаблицаВыручки.Колонки.Найти("СтавкаНДС") <> Неопределено И Не СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров");
	ЕстьСкладВТЧ = ТаблицаВыручки.Колонки.Найти("Склад") <> Неопределено;
	
	//////////////////////////////////////////////////////////////////////////////////
	// Определяем партии к списанию по регистру по ключевым наборам реквизитов.
	ТаблицаВыручки.Колонки.Добавить("СписыватьПоПартиямНДС", Новый ОписаниеТипов("Булево"));
	ВыданоСообщениеБезНДС = Ложь;
	ВыданоСообщение0 = Ложь;
	
	Для каждого СтрокаСписания Из ТаблицаВыручки Цикл
		
		Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
			// Не ведется партионный учет если организация применяет УСН
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСписания.СчетУчетаБУ) Тогда
			// Не указан счет учета ТМЦ, такое возможно только для услуг.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли СтрокаСписания.СчетУчетаБУ.Забалансовый Тогда
			// Для товаров, учтываемых на забалансовых счетах учет НДС не ведется.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСписания.Количество) Тогда
			// Строки с пустым количеством игнорируем
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учтены в регистре, все надо списывать.
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;
			
		ИначеЕсли ОпределитьСчетаУчетаОСиНМА("ОС").НайтиПоЗначению(СтрокаСписания.СчетУчетаБУ) <> Неопределено Тогда
			// Оставляем строки только по ОС. По ним партионный учет ведется всегда!
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;
			
		ИначеЕсли ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)	Тогда
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		Иначе 
			
			Если ЕстьСтавкаНДС Тогда
				
				Если СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС 
					И Не ВыданоСообщениеБезНДС Тогда
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("При реализации без НДС, НДС по приобретенным ценностям необходимо включать в стоимость реализуемой партии товаров (ст. 170 НК РФ).
					|Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!", ВыданоСообщениеБезНДС , Заголовок, СтатусСообщения.Информация);
					
				ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					И Не ВыданоСообщение0 Тогда
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("При реализации с НДС 0%, вычет НДС по приобретенным ценностям возможен только после подтверждения ставки НДС 0% (п.3 ст. 172 НК РФ).
					|До этого момента вычет должен быть заблокирован.
					|Для автоматической блокировки вычета НДС в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!", ВыданоСообщение0, Заголовок, СтатусСообщения.Информация);
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
				Или СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости 
				И Не ВыданоСообщениеБезНДС Тогда
				
				Если ВидДокумента = "СписаниеТоваров" тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("При списании ТМЦ в результате инвентаризации на счет 94 <Недостачи и потери от порчи ценностей>,
					|НДС по приобретенным ценностям необходимо включать в стоимость списываемой партии товаров.
					|Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!", ВыданоСообщениеБезНДС, Заголовок, СтатусСообщения.Информация);
				Иначе
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Для автоматического контроля включения НДС в стоимость (исключения из стоимости) в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС , Заголовок, СтатусСообщения.Информация);
				КонецЕсли; 
				
			КонецЕсли;
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		КонецЕсли;
		
		Если СтрокаСписания.СписыватьПоПартиямНДС 
			И ЕстьСтавкаНДС Тогда
			
			Если ЭтоВозврат Тогда 
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;	 
			ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
			ИначеЕсли ЗначениеЗаполнено(СтрокаСписания.СтавкаНДС) Тогда
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЕстьСкладВТЧ тогда
			Если Не ЗначениеЗаполнено(СтрокаСписания.Склад)  Тогда
				СтрокаСписания.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла; 

	КолвоЭлементовКоллекции = ТаблицаВыручки.Количество(); 
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		ЭлементКоллекции = ТаблицаВыручки[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
		Если Не ЭлементКоллекции.СписыватьПоПартиямНДС Тогда 
			ТаблицаВыручки.Удалить(ЭлементКоллекции); 
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ТаблицаВыручки.Количество() = 0 Тогда
		//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
		Возврат ТаблицаСписанияНДСПоСтрокам;
	КонецЕсли; 

	Если ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено Тогда
	    ТаблицаВыручки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Если ТаблицаВыручки.Колонки.Найти("КоличествоПоступление") = Неопределено Тогда
	    ТаблицаВыручки.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаВыручки.ЗаполнитьЗначения(0, "КоличествоПоступление");		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Не ЭтоВозвратОтПокупателя Тогда
		
		Запрос.Текст = 
		// {{KM WARE Акулов А.И. 14.07.2015 начало
		// не достаточно прав
		// {{Старый код:
		//"ВЫБРАТЬ
		// }}Новый код:
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// }}KM WARE Акулов А.И. 14.07.2015 окончание
		|	НДСПартииТоваровОстатки.Склад КАК Склад,
		|	НДСПартииТоваровОстатки.СчетУчета КАК СчетУчета,
		|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
		|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	НДСПартииТоваровОстатки.Партия.Дата КАК ДатаПартии,
		|	НДСПартииТоваровОстатки.Партия КАК Партия,
		|	НДСПартииТоваровОстатки.Заказ КАК Заказ,
		|	НДСПартииТоваровОстатки.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.КоличествоОстаток,
		|	НДСПартииТоваровОстатки.СтоимостьОстаток,
		|	НДСПартииТоваровОстатки.НДСОстаток,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваровОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС,
		|	НДСПартииТоваровОстатки.СтавкаНДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(
		|			&МоментСписания,
		|			Организация = &Организация
		|				И СчетУчета В (&СписокСчетовУчета)
		|				И Номенклатура В (&СписокНоменклатуры)
		|				И Склад В (&СписокСкладов)) КАК НДСПартииТоваровОстатки
		|ГДЕ
		|	(НЕ НДСПартииТоваровОстатки.СтоимостьОстаток < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии,
		|	ДатаСФ";
		
		СписокСкладов = Новый Массив;
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" 
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
		ИначеЕсли ВестиСуммовойУчетПоСкладамБУ Тогда
			СписокСкладов = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("Склад"));
		КонецЕсли; 
		
		СписокСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
												
		Если ПартионныйУчетБУ Тогда 	
			Запрос.УстановитьПараметр("ОтборПоПартиямБУ", ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("Партия")));
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Номенклатура В (&СписокНоменклатуры)","Номенклатура В (&СписокНоменклатуры) " +символы.ПС+
													"И Партия В (&ОтборПоПартиямБУ)");
		КонецЕсли;

	Иначе // ЭтоВозвратОтПокупателя
		
		СписокДокументовРеализации = ТаблицаВыручки.ВыгрузитьКолонку("ДокументПартии");
		// Возврат может осуществляться как с указанием документа реализации, так и с указанием документа поступления
		// Необходимо разделить возвраты на две группы
		СписокДокументовПартии	   = ТаблицаВыручки.ВыгрузитьКолонку("Партия");
		
		Для ИндексЭлемента = 0 По СписокДокументовРеализации.Количество() - 1 Цикл
			Если СписокДокументовРеализации[ИндексЭлемента] = СписокДокументовПартии[ИндексЭлемента] Тогда
				 СписокДокументовРеализации[ИндексЭлемента] = Неопределено;
			Иначе
				 СписокДокументовПартии[ИндексЭлемента] = Неопределено;
			КонецЕсли; 
		КонецЦикла; 
		
		СписокДокументовРеализации	= ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовРеализации, Истина);
		СписокДокументовПартии 		= ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПартии, Истина);
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") 
			И СтруктураПараметров.Свойство("ДеревоРасходныхОрдеров") Тогда
			
			// Дополним список документов реализации расходными ордерами, которые могли отразить непосредственное списание партии
			КоличествоДокументовРеализации = СписокДокументовРеализации.Количество();
			Для ИндексЭлемента = 0 по КоличествоДокументовРеализации - 1 Цикл
				
				ДокументРеализации = СписокДокументовРеализации[ИндексЭлемента];
				СтрокаРегистратора = СтруктураПараметров.ДеревоРасходныхОрдеров.Строки.Найти(ДокументРеализации, "Регистратор");
				
				Если Не СтрокаРегистратора = Неопределено 
					И СтрокаРегистратора.Строки.Количество() <> 0 Тогда
					
					МассивОрдеров = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокаРегистратора.Строки.ВыгрузитьКолонку("РасходныйОрдерНаТовары"));
					Для Каждого Ордер Из МассивОрдеров Цикл
						СписокДокументовРеализации.Добавить(Ордер);
					КонецЦикла; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
		Если СписокДокументовРеализации.Количество() = 0 
			И СписокДокументовПартии.Количество() = 0 Тогда
			//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
			Возврат ТаблицаСписанияНДСПоСтрокам;
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("СписокДокументовРеализации", СписокДокументовРеализации);
		
		Если СписокДокументовРеализации.Количество()>0 Тогда
		
			ТекстЗапросаПоДокументамРеализации = 
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	НДСПартииТоваров.Склад КАК Склад,
			|	НДСПартииТоваров.СчетУчета КАК СчетУчета,
			|	НДСПартииТоваров.Номенклатура КАК Номенклатура,
			|	НДСПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	НДСПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
			|	НДСПартииТоваров.Партия.Дата КАК ДатаПартии,
			|	НДСПартииТоваров.Партия КАК Партия,
			|	НДСПартииТоваров.Заказ КАК Заказ,
			|	НДСПартииТоваров.СчетФактура.Дата КАК ДатаСФ,
			|	НДСПартииТоваров.СчетФактура КАК СчетФактура,
			|	НДСПартииТоваров.НДСВключенВСтоимость,
			|	НДСПартииТоваров.Количество КАК КоличествоОстаток,
			|	НДСПартииТоваров.Стоимость КАК СтоимостьОстаток,
			|	ВЫБОР
			|		КОГДА НДСПартииТоваров.Количество > 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьКоличество,
			|	НДСПартииТоваров.ВидЦенности,
			|	НДСПартииТоваров.СчетУчетаНДС,
			|	НДСПартииТоваров.СтавкаНДС,
			|	НДСПартииТоваров.НДС КАК НДСОстаток
			|ИЗ
			|	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваров
			|ГДЕ
			|	НДСПартииТоваров.Регистратор В(&СписокДокументовРеализации)
			|	И НДСПартииТоваров.Номенклатура В(&СписокНоменклатуры)
			|	И НДСПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
			Если ПартионныйУчетБУ Тогда 	
				Запрос.УстановитьПараметр("ОтборПоПартиямБУ", ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("Партия")));
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"Номенклатура В (&СписокНоменклатуры)","Номенклатура В (&СписокНоменклатуры) " +символы.ПС+
														"И Партия В (&ОтборПоПартиямБУ)");
			КонецЕсли;
			
		Иначе
			ТекстЗапросаПоДокументамРеализации = "";
		КонецЕсли; 
		
		Если СписокДокументовПартии.Количество()>0 Тогда
			Запрос.УстановитьПараметр("СписокДокументовПартии",		СписокДокументовПартии);
			ТекстЗапросаПоДокументамПоступления =
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//"ВЫБРАТЬ
			// }}Новый код:
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			|	НДСПартииТоваров.Склад КАК Склад,
			|	НДСПартииТоваров.СчетУчета КАК СчетУчета,
			|	НДСПартииТоваров.Номенклатура КАК Номенклатура,
			|	НДСПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	НДСПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
			|	НДСПартииТоваров.Партия.Дата КАК ДатаПартии,
			|	НДСПартииТоваров.Партия КАК Партия,
			|	НДСПартииТоваров.Заказ КАК Заказ,
			|	НДСПартииТоваров.СчетФактура.Дата КАК ДатаСФ,
			|	НДСПартииТоваров.СчетФактура КАК СчетФактура,
			|	НДСПартииТоваров.НДСВключенВСтоимость,
			|	НДСПартииТоваров.КоличествоРасход КАК КоличествоОстаток,
			|	НДСПартииТоваров.СтоимостьРасход КАК СтоимостьОстаток,
			|	ВЫБОР
			|		КОГДА НДСПартииТоваров.КоличествоРасход > 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьКоличество,
			|	НДСПартииТоваров.ВидЦенности,
			|	НДСПартииТоваров.СчетУчетаНДС,
			|	НДСПартииТоваров.СтавкаНДС,
			|	НДСПартииТоваров.НДСРасход КАК НДСОстаток
			|ИЗ
			|	РегистрНакопления.НДСПартииТоваров.Обороты(
			|		,
			|		&МоментСписания,
			|		Регистратор,
			|		Организация = &Организация
			|		    И Номенклатура В (&СписокНоменклатуры)
			|		    И Партия В (&СписокДокументовПартии)) КАК НДСПартииТоваров
			|ГДЕ
			|	(НЕ НДСПартииТоваров.Регистратор В (&СписокДокументовРеализации))
			|	И (НДСПартииТоваров.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			|			ИЛИ НДСПартииТоваров.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах)";
		КонецЕсли; 
		
		Запрос.Текст = ТекстЗапросаПоДокументамРеализации 
					+?(ПустаяСтрока(ТекстЗапросаПоДокументамРеализации) или ПустаяСтрока(ТекстЗапросаПоДокументамПоступления),""," Объединить Все ") 
					+ ТекстЗапросаПоДокументамПоступления 
					+"
					|УПОРЯДОЧИТЬ ПО
					|	ДатаПартии УБЫВ,
					|	ДатаСФ УБЫВ";
	КонецЕсли; 
				
	МоментСписания = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	Если СтруктураШапкиДокумента.Свойство("ВидПередачи") И СтруктураПараметров.Свойство("Регистратор") 
		И СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру  Тогда
		МоментВремениСписания = Новый МоментВремени(СтруктураШапкиДокумента.Ссылка.Дата, СтруктураПараметров.Регистратор); 
		МоментСписания 	   	  = Новый Граница(МоментВремениСписания, ВидГраницы.Исключая);  
	КонецЕсли;

	Запрос.УстановитьПараметр("МоментСписания", 		МоментСписания);
	Запрос.УстановитьПараметр("Организация", 			СтруктураШапкидокумента.Организация);
	
	Запрос.УстановитьПараметр("СписокСчетовУчета", 		ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("СчетУчетаБУ")));
	Запрос.УстановитьПараметр("СписокНоменклатуры", 	ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Номенклатура")));
	
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	СортироватьПоУказанномуДокументуПриВозврате = ЭтоВозврат и не ЭтоВозвратОтПокупателя;

	Если СортироватьПоУказанномуДокументуПриВозврате Тогда
		ТаблицаПартий.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", новый описаниеТипов("Булево"));
	КонецЕсли; 
	
	ОбособленныйУчетТоваровПоЗаказамПокупателейВСтроке = ТаблицаВыручки.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей") <> Неопределено;
	ЕстьКолонка_ЗаказПартии =  ТаблицаВыручки.Колонки.Найти("ЗаказПартии") <> Неопределено;
	
	ТаблицаВыручки.Колонки.Добавить("НДСЭтоЕНВД", Новый ОписаниеТипов("Булево"));
	ЕстьКолонкаСчетДоходовБУ = ТаблицаВыручки.Колонки.Найти("СчетДоходовБУ") <> Неопределено;
	ЕстьСчетДоходовБУ 		 = СтруктураШапкиДокумента.Свойство("СчетДоходовБУ");
		
	Для каждого СтрокаКСписанию Из ТаблицаВыручки Цикл
		
		Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И ЕстьКолонкаСчетДоходовБУ Тогда
			СтрокаКСписанию.НДСЭтоЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаКСписанию.СчетДоходовБУ);
		ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И ЕстьСчетДоходовБУ Тогда
			СтрокаКСписанию.НДСЭтоЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетДоходовБУ);
		Иначе
			СтрокаКСписанию.НДСЭтоЕНВД = Ложь;
		КонецЕсли;
				
		//Установим отбор таблицы запроса
		Если ЭтоВозвратОтПокупателя Тогда
			Отбор = Новый Структура("Номенклатура, ЕстьКоличество", СтрокаКСписанию.Номенклатура, Истина);
		Иначе
			Отбор = Новый Структура("СчетУчета, Номенклатура, ЕстьКоличество", СтрокаКСписанию.СчетУчетаБУ, СтрокаКСписанию.Номенклатура, Истина);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
		ИначеЕсли УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) и Не ЭтоВозвратОтПокупателя Тогда
			Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКСписанию.Партия) Тогда
			Отбор.Вставить("Партия", СтрокаКСписанию.Партия);
		КонецЕсли;
		
		Если ЭтоВозвратОтПокупателя тогда
			// Заказ не анализируется
		ИначеЕсли не ЕстьКолонка_ЗаказПартии тогда
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаКСписанию.ЗаказПартии) тогда
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		ИначеЕсли не ТипЗнч(СтрокаКСписанию.ЗаказПартии) = Тип("ДокументСсылка.ЗаказПокупателя") тогда 
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		ИначеЕсли ОбособленныйУчетТоваровПоЗаказамПокупателейВСтроке И ?(СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено, Ложь, СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей) Тогда 
			Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
		ИначеЕсли СтрокаКСписанию.ЗаказПартии.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
		Иначе 
			Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", ?(СтрокаКСписанию.ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.ХарактеристикаНоменклатуры));
			Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ВидДокумента <> "ОтчетКомиссионераОПродажах" Тогда //товары у комиссонера не учитываются по сериям
				Отбор.Вставить("СерияНоменклатуры", ?(СтрокаКСписанию.СерияНоменклатуры = Неопределено, Справочники.СерииНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.СерияНоменклатуры));
			КонецЕсли;
		КонецЕсли;
		
		ОтборТаблицыПартийПоКлючу = ТаблицаПартий.НайтиСтроки(Отбор);
		СписатьПоКлючу = СтрокаКСписанию.Количество;
		
		// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
		ТаблицаОстатки  = Новый ТаблицаЗначений;
		// Добавим колонку с индексом
		ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
			ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
		КонецЦикла;
		Индекс = 0;
		Для Каждого СтрокаТЧ Из ОтборТаблицыПартийПоКлючу Цикл
			НоваяСтрока = ТаблицаОстатки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ); 
			НоваяСтрока.ИндексНайденнойСтроки = Индекс;
			Если СортироватьПоУказанномуДокументуПриВозврате Тогда
				НоваяСтрока.ПартияСовпадаетСУказаннымДокументомДляВозврата = ( ЗначениеЗаполнено(СтрокаКСписанию.ДокументПартии) и НоваяСтрока.Партия = СтрокаКСписанию.ДокументПартии);
			КонецЕсли; 
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		НаправлениеСортировкиДляНДС = ?(СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость, "Убыв", "Возр");
		НаправлениеСортировкиПартий = ?(ЭтоВозврат,"убыв","Возр");
		ТаблицаОстатки.Сортировать(?(СортироватьПоУказанномуДокументуПриВозврате,"ПартияСовпадаетСУказаннымДокументомДляВозврата Убыв, ","")+"ДатаПартии "+НаправлениеСортировкиПартий+", Партия "+НаправлениеСортировкиПартий+", ДатаСФ "+НаправлениеСортировкиПартий+", СчетФактура "+НаправлениеСортировкиПартий+", НДСВключенВСтоимость "+НаправлениеСортировкиДляНДС);
		
		ТаблицаСписанияПоСтроке = Новый ТаблицаЗначений;
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Партия");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДСВключенВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ВидЦенности");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетУчетаНДС");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СтавкаНДС");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетФактура");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Склад");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ХарактеристикаНоменклатуры");
		Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
			ТаблицаСписанияПоСтроке.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый описаниеТипов("Булево"));
		КонецЕсли; 
		
		Для каждого СтрокаТаблицыПартийНДС Из ТаблицаОстатки Цикл
			
			Если НЕ СтрокаТаблицыПартийНДС.ЕстьКоличество Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицыПартийНДС.КоличествоОстаток=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТаблицыСписания 						= ТаблицаСписанияПоСтроке.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания,СтрокаТаблицыПартийНДС);
			
			СтрокаТаблицыСписания.Количество 			= Мин(СписатьПоКлючу, СтрокаТаблицыПартийНДС.КоличествоОстаток);
			СтрокаТаблицыСписания.Стоимость 			= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.СтоимостьОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.НДС 					= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.НДСОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.КоличествоПоступление	= ?(СтрокаКСписанию.Количество = 0, 0, СтрокаКСписанию.КоличествоПоступление * СтрокаТаблицыСписания.Количество / СтрокаКСписанию.Количество) ;
			
			Если ЭтоВозвратОтПокупателя и не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
			    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
			//Иначе
			//	СтрокаТаблицыСписания.Склад					= СтрокаТаблицыПартийНДС.Склад;	
			КонецЕсли; 
			Если Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			ИначеЕсли Не СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
				СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) И
				(СтрокаТаблицыПартийНДС.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Или СтрокаКСписанию.НДСЭтоЕНВД) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
			Иначе
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			КонецЕсли;
			
			СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
			
			Если ЕстьСтавкаНДС  и не ЭтоВозврат Тогда
				Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
				КонецЕсли;
			КонецЕсли;
						
			СписатьПоКлючу = СписатьПоКлючу - СтрокаТаблицыСписания.Количество;
			
			СтрокаТаблицыПартийНДС.КоличествоОстаток = СтрокаТаблицыПартийНДС.КоличествоОстаток - СтрокаТаблицыСписания.Количество;
			СтрокаТаблицыПартийНДС.СтоимостьОстаток = СтрокаТаблицыПартийНДС.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
			СтрокаТаблицыПартийНДС.НДСОстаток = СтрокаТаблицыПартийНДС.НДСОстаток - СтрокаТаблицыСписания.НДС;
			
			Если СписатьПоКлючу<=0 Тогда
				прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		//Распределение доп. расходов
		ПартииКСписнию = ТаблицаСписанияПоСтроке.Скопировать();
		ПартииКСписнию.Свернуть("Партия", "Количество, Стоимость");
		
		Для Каждого Партия Из ПартииКСписнию Цикл
			//Установим отбор таблицы запроса
			Если ЭтоВозвратОтПокупателя Тогда
				Отбор = Новый Структура("Номенклатура, Партия", СтрокаКСписанию.Номенклатура, Партия.Партия);
            Иначе
				Отбор = Новый Структура("СчетУчета, Номенклатура, Партия", СтрокаКСписанию.СчетУчетаБУ, СтрокаКСписанию.Номенклатура, Партия.Партия);
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
			ИначеЕсли УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
				Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
			КонецЕсли;
		
			Если ЭтоВозвратОтПокупателя тогда
				// Заказ не анализируется
			ИначеЕсли не ЕстьКолонка_ЗаказПартии тогда
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаКСписанию.ЗаказПартии) тогда
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			ИначеЕсли не ТипЗнч(СтрокаКСписанию.ЗаказПартии) = Тип("ДокументСсылка.ЗаказПокупателя") тогда 
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			ИначеЕсли ОбособленныйУчетТоваровПоЗаказамПокупателейВСтроке И ?(СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено, Ложь, СтрокаКСписанию.ОбособленныйУчетТоваровПоЗаказамПокупателей) Тогда 
				Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
			ИначеЕсли СтрокаКСписанию.ЗаказПартии.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
				Отбор.Вставить("Заказ", СтрокаКСписанию.ЗаказПартии);
			Иначе 
				Отбор.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
			КонецЕсли; 
			
			Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				Отбор.Вставить("ХарактеристикаНоменклатуры", ?(СтрокаКСписанию.ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.ХарактеристикаНоменклатуры));
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ВидДокумента <> "ОтчетКомиссионераОПродажах" Тогда //товары у комиссонера не учитываются по сериям
					Отбор.Вставить("СерияНоменклатуры", ?(СтрокаКСписанию.СерияНоменклатуры = Неопределено, Справочники.СерииНоменклатуры.ПустаяСсылка(), СтрокаКСписанию.СерияНоменклатуры));
				КонецЕсли;
			КонецЕсли;

			ОтборДляДопРасходов = ТаблицаПартий.НайтиСтроки(Отбор);
			
			//Определим коэффициент доп. расходов
			СуммаПоПартии = 0;
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				Если СтрокаПартии.ЕстьКоличество Тогда
					СуммаПоПартии = СуммаПоПартии + СтрокаПартии.СтоимостьОстаток;
				ИначеЕсли СортироватьПоУказанномуДокументуПриВозврате Тогда
					СтрокаПартии.ПартияСовпадаетСУказаннымДокументомДляВозврата = ( ЗначениеЗаполнено(СтрокаКСписанию.ДокументПартии) и СтрокаПартии.Партия = СтрокаКСписанию.ДокументПартии);
				КонецЕсли;
			КонецЦикла;
			
			// Если в партии нулевая сумма, то списание доп. расходов производим пропорционально количеству.
			Если СуммаПоПартии = 0 Тогда
				КоличествоПоПартии = 0;
				Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
					Если СтрокаПартии.ЕстьКоличество Тогда
						КоличествоПоПартии = КоличествоПоПартии + СтрокаПартии.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Проверим наличие доп расходов
			Если СуммаПоПартии = 0 И КоличествоПоПартии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаПоПартии <> 0 Тогда
				К = Партия.Стоимость / СуммаПоПартии;
			Иначе
				К = Партия.Количество / КоличествоПоПартии;
			КонецЕсли;
			
			//Спишем доп. расходы
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				
				Если СтрокаПартии.ЕстьКоличество ИЛИ Окр(СтрокаПартии.СтоимостьОстаток*К,2,1) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыСписания = ТаблицаСписанияПоСтроке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания, СтрокаПартии);
				
				СтрокаТаблицыСписания.Стоимость = СтрокаПартии.СтоимостьОстаток * К;
				СтрокаТаблицыСписания.НДС = СтрокаПартии.НДСОстаток * К;
					
				Если ЭтоВозвратОтПокупателя и не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
				    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
				//Иначе
				//	СтрокаТаблицыСписания.Склад					= СтрокаПартии.Склад;	
				КонецЕсли; 
				Если Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
					СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
				ИначеЕсли Не СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
					СтрокаТаблицыСписания.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
				
			
				Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаПартии.НДСВключенВСтоимость) 
					И (СтрокаПартии.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Или СтрокаКСписанию.НДСЭтоЕНВД) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаПартии.НДСВключенВСтоимость) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
				Иначе
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				КонецЕсли;
				
				СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
				
				Если ЕстьСтавкаНДС и не ЭтоВозврат Тогда
					Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
					КонецЕсли;
				КонецЕсли;
			    				
				СтрокаПартии.СтоимостьОстаток = СтрокаПартии.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
				СтрокаПартии.НДСОстаток = СтрокаПартии.НДСОстаток - СтрокаТаблицыСписания.НДС;
				
			КонецЦикла;
			
		КонецЦикла;
		
		//Перенесем данные в итоговую таблицу движений
		Для Каждого СтрокаСписания ИЗ ТаблицаСписанияПоСтроке Цикл
			
			СтрокаТаблицыСписанияНДС = ТаблицаСписанияНДСПоСтрокам.Добавить();
			
			Для Каждого Кол Из ТаблицаСписанияНДСПоСтрокам.Колонки Цикл
				Если НЕ ТаблицаСписанияПоСтроке.Колонки.Найти(Кол.Имя) = Неопределено Тогда
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаСписания[Кол.Имя];
				ИначеЕсли НЕ ТаблицаВыручки.Колонки.Найти(Кол.Имя) = Неопределено Тогда 
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаКСписанию[Кол.Имя];
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыСписанияНДС["СчетУчета"] = СтрокаТаблицыСписанияНДС["СчетУчетаБУ"];
		КонецЦикла;
		
		// Таблицу значений перенесем в найденные строки
		Для Каждого СтрокаТЧ Из ТаблицаОстатки Цикл
			ЗаполнитьЗначенияСвойств(ОтборТаблицыПартийПоКлючу[СтрокаТЧ.ИндексНайденнойСтроки],СтрокаТЧ);
		КонецЦикла;
		
		Если СписатьПоКлючу>0 тогда
			ТекстСообщения = "Для целей учета НДС не списано " + Формат(СписатьПоКлючу, "ЧЦ=15; ЧДЦ=3") + " товара " + СтрокаКСписанию.Номенклатура;
			Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда 
				Если ЗначениеЗаполнено(СтрокаКСписанию.ХарактеристикаНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", х-ка: " + СтрокаКСписанию.ХарактеристикаНоменклатуры;
				КонецЕсли;
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаКСписанию.СерияНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", серия: " + СтрокаКСписанию.СерияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + ", счет учета " + СтрокаКСписанию.СчетУчетаБУ +?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Склад),"",", склад "+строка(СтрокаКСписанию.Склад))+?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Партия),""," (партия <"+строка(СтрокаКСписанию.Партия)+">)");
			Если ВидДокумента = "ПоступлениеИзПереработки" Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Возможно, для изготовления продукции использовались полуфабрикаты или продукция собственного производства";
			КонецЕсли;
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация"); 
	Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти("QuieryId") = Неопределено Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("QuieryId");
	КонецЕсли; 
	
	Если ЭтоВозвратОтПокупателя Тогда
		ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(Неопределено,"Заказ"); 
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);
	QuieryId = 0;
	
	Для каждого СтрокаСписания Из ТаблицаСписанияНДСПоСтрокам Цикл
		QuieryId = QuieryId + 1;
		СтрокаСписания.QuieryId = QuieryId;
		
		Если ЭтоКорректировкаРеализации Тогда
			Продолжить;	
		КонецЕсли;
		
		// Для ускорения поиска добавим строку в соответствие
		МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		Если МассивСтрокПоКоду = Неопределено Тогда
			СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаСписания.КодОперацииПартииТоваров, Новый Массив);
			МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		КонецЕсли;
		МассивСтрокПоКоду.Добавить(СтрокаСписания);
		
	КонецЦикла;
	
	Возврат ТаблицаСписанияНДСПоСтрокам;
	
КонецФункции

//Определяет применяется ли упрощенный учет НДС
//
Функция ПолучитьУПУпрощенныйУчетНДС(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт

	Возврат Ложь;
	//Если Не ЗначениеЗаполнено(Организация) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(Дата) Тогда
	//	Дата = ТекущаяДата();
	//КонецЕсли;

	//Если УчетнаяПолитика <> Неопределено
	//	и УчетнаяПолитика.Количество() > 0
	//	И УчетнаяПолитика.Организация = Организация
	//	И УчетнаяПолитика.Период = НачалоМесяца(Дата)
	//	И УчетнаяПолитика.Свойство("УпрощенныйУчетНДС") Тогда
	//	Возврат УчетнаяПолитика.УпрощенныйУчетНДС;
	//КонецЕсли;
	//
	//ОшибкаВПолучении = Ложь;
	//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация,,Ложь);
	//	
	//Возврат ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УпрощенныйУчетНДС);

КонецФункции

Функция ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("ПорядокРегистрацииСчетовФактурНаАванс") Тогда
		Возврат УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс;
	КонецЕсли;
	
	ОшибкаВПолучении = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация, "Нал" ,Ложь);
		
	Возврат ?(ОшибкаВПолучении, Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы, УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс);

КонецФункции

//Определяет налоговый период по НДС
//
Функция ПолучитьУПНДСНалоговыйПериод(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат ?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал);
	КонецЕсли;
	
	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("НДСНалоговыйПериод") Тогда
		Возврат УчетнаяПолитика.НДСНалоговыйПериод;
	КонецЕсли;
	
	УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		
	Возврат ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), 
				?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал),
				УчетнаяПолитика.НДСНалоговыйПериод);

КонецФункции

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ

// Параметр ДляКнигиПродаж устанавливается в случае, когда для документа могут быть получены данные как 
// для книги покупок, так и для книги продаж
Функция ПолучитьТаблицуДокументаНДС(ДокументСсылка, Ошибка = Ложь, ДляКнигиПродаж = Ложь) Экспорт
	
	ТипОснования = ТипЗнч(ДокументСсылка);
	
	// По ссылке нужно получить объект
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОснования)	Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ТипОснования = ТипЗнч(ДокументСсылка.Ссылка);
		ДокументОбъект = ДокументСсылка;
	КонецЕсли;
	Попытка
		Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Возврат ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
			Возврат ПолучитьТаблицуПоступлениеТоваровУслугВНТТ(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			Возврат ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
			Возврат ПолучитьТаблицуОтражениеПоступленияТоваровИУслугНДС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Возврат ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
			Возврат ПолучитьТаблицуПоступлениеНМА(ДокументОбъект, Ошибка);
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		//	Возврат ПолучитьТаблицуПоступлениеИзПереработки(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Возврат ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			Возврат ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
			Возврат ПолучитьТаблицуНачислениеНДСпоСМРхозспособом(ДокументОбъект, Ошибка, ДляКнигиПродаж);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Возврат ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Возврат ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			Возврат ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			Возврат ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
			Возврат ПолучитьТаблицуПередачаОС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
			Возврат ПолучитьТаблицуПередачаНМА(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Возврат ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			Возврат ПолучитьТаблицуОтражениеРеализацииТоваровИУслугНДС(ДокументОбъект, Ошибка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Возврат ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, Неопределено);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоОборудованию, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоУслугам, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоОбъектамСтроительства, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли);
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	ТаблицаПоТоварамРубли.Колонки.Удалить("НДСВал");
	
	Возврат ТаблицаПоТоварамРубли.Скопировать(Новый Структура("Содержание", "НДС"));
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоОборудованию, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеНМА(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоНМА;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА);
	
	Возврат ТаблицаПоНМА;
	
КонецФункции

Функция ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Истина);
	
	ТаблицаПоВсемДокументам = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаПоДокументамОснованиям Цикл
		Если ТаблицаПоВсемДокументам = Неопределено Тогда
			ТаблицаПоВсемДокументам = СтрокаТаблицы.ТаблицаДанных;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаТаблицы.ТаблицаДанных, ТаблицаПоВсемДокументам);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоВсемДокументам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументу;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	Если ДляКнигиПродаж Тогда
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументу, Неопределено, Неопределено);
	Иначе
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Неопределено, ТаблицаПоДокументу, Неопределено);
	КонецЕсли;
	
	Возврат ТаблицаПоДокументу;
	
КонецФункции

Функция ПолучитьТаблицуНачислениеНДСпоСМРхозспособом(ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоСМРхозспособом;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСМРхозспособом);
	
	Возврат ТаблицаПоСМРхозспособом;
	
КонецФункции

Функция ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоУслугам, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	Возврат ТаблицаПоУслугам;
	
КонецФункции

Функция ПолучитьТаблицуПередачаОС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ТаблицаПоТоварам.Колонки.ОсновноеСредство.Имя = "Номенклатура";
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПередачаНМА(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ТаблицаПоТоварам.Колонки.НематериальныйАктив.Имя = "Номенклатура";
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка)
	
	Перем ТаблицаПоДокументамОснованиям, ТаблицаПоДокументуОснования;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
	
		Для Каждого СтрокаТаблицы Из ДокументОбъект.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				ДокументОснованиеОбъект = СтрокаТаблицы.ДокументОснование.ПолучитьОбъект();
				ТаблицаПоДокументуОснования = ПолучитьТаблицуДокументаНДС(ДокументОснованиеОбъект, Ошибка);
				Если ТаблицаПоДокументуОснования <> Неопределено Тогда
					Если ТаблицаПоДокументамОснованиям = Неопределено Тогда
						ТаблицаПоДокументамОснованиям = ТаблицаПоДокументуОснования.Скопировать();
					Иначе	
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоДокументуОснования, ТаблицаПоДокументамОснованиям);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Возврат ТаблицаПоДокументамОснованиям;
		
	КонецЕсли;
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ВидЦенности");
	ТаблицаДокумента.Колонки.Добавить("СчетФактура");
	ТаблицаДокумента.Колонки.Добавить("Сумма");
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокумента.Колонки.Добавить("НДС");
	ТаблицаДокумента.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаДокумента.Колонки.Добавить("Событие");
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	НоваяСтрока.ВидЦенности = ?(ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс, Перечисления.ВидыЦенностей.АвансыПолученные,
																										Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	НоваяСтрока.СчетФактура = ДокументОбъект.ДокументОснование;
	НоваяСтрока.Сумма = ДокументОбъект.Сумма;
	НоваяСтрока.СтавкаНДС = ДокументОбъект.СтавкаНДС;
	НоваяСтрока.НДС = ДокументОбъект.СуммаНДС;	
	НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;	
	НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

//	Возвращает КПП контрагента, укзанного в реквизите ИмяРеквизитаОтправителяПолучателя,
//	в том случае, если контрагент является подразделением контрагента документа
//
//	ИмяРеквизитаОтправителяПолучателя <Строка>	- "Грузоотправитель" или "Грузополучатель",
//												в зависимости от типа документа
//
Функция ПолучитьКПППодразделенияКонтрагента(ДокументСсылка, ИмяРеквизитаОтправителяПолучателя) Экспорт
	Перем КПП;
	
	КПП	= "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат КПП;
	КонецЕсли;
	
	МетаданныеДокумента	= ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") = Неопределено 
		ИЛИ МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизитаОтправителяПолучателя) = Неопределено Тогда
		// В документе нет Грузоотправителя/Грузополучателя
		Возврат КПП;
	КонецЕсли;
	
	ТекстЗапроса = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель.КПП, """") КАК КПП
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка
	|	И РеализацияТоваровУслуг.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И РеализацияТоваровУслуг.Грузополучатель <> РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ГоловнойКонтрагент = РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ОбособленноеПодразделение";
	
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", МетаданныеДокумента.Имя);
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "Грузополучатель", ИмяРеквизитаОтправителяПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КПП	= Выборка.КПП;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС
////////////////////////////////////////////////////////////////////////////////

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено 
			И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СуммаНДС") <> Неопределено
		  	И ДокументОбъект.УчитыватьНДС
		   	И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаПлатежнымиКартами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ОплатаБанковскимиКредитами" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ПродажиПоДисконтнымКартам" Тогда
				Продолжить;
			КонецЕсли;
			Если МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("Сумма") <> Неопределено Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
				   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
				   И МетаданныеДокумента.ТабличныеЧасти[ТЧОбъекта.Имя].Реквизиты.Найти("СуммаНДС") <> Неопределено
				   И ДокументОбъект.УчитыватьНДС
				   И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если МетаданныеДокумента.Реквизиты.Найти("Сумма") <> Неопределено Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			   И МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено
			   И ДокументОбъект.УчитыватьНДС
			   И Не ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

// Получает версию постановления в зависимости от переданной даты
//
Функция ПолучитьВерсиюПостановления(Дата) Экспорт
	
	НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();
	
	Если ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		И Дата >= НачалоПримененияИсправленныхСчетовФактур Тогда
		Возврат 2; // Дата начала применения исправленных счетов-фактур задана и меньше или равна переданной даты
	Иначе
		Возврат 1; // Дата начала применения исправленных счетов-фактур не задана или задана, но больше, чем переданная дата 
	КонецЕсли;	
		
КонецФункции		

// Получает признак применения постановления Правительства РФ от 24.10.2013 г. № 952
Функция ПрименяетсяПостановление952(Дата) Экспорт

	Возврат Дата >= '20131106'; // Постановление вступает в силу с 6 ноября 2013 года

КонецФункции

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо ПТУ либо корректировку ПТУ)
// либо первоначальный документ ПТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументПоступления(ДокПоступления, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокПоступления) 
		И ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")
		И (ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументПоступления(ДокПоступления.ДокументПоступления, Исходный);
		
	Иначе
		Возврат ДокПоступления;
	КонецЕсли;	
	
КонецФункции	

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо РТУ либо корректировку РТУ)
// либо первоначальный документ РТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (ДокРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументРеализации, Исходный);
		
	Иначе
		Возврат ДокРеализации;
	КонецЕсли;	
	
КонецФункции

// Процедура формирует список выбора кодов видов операций
//
// Параметры
//  ЧастьЖурнала  - Перечисления.ЧастиЖурналаУчетаСчетовФактур - в зависимости от значения параметра 
//                 формируется список выбора
//  СписокВыбора  - СписокЗначений - формируемый список кодов видов операций
//
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - полученные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы выданные");
		СписокВыбора.Добавить("03", "03 - возврат от покупателя");
		СписокВыбора.Добавить("04", "04 - полученные товары, работы, услуги от комитента");
		СписокВыбора.Добавить("05", "05 - авансы выданные комитенту");
		СписокВыбора.Добавить("10", "10 - полученные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - полученные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы выданные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
        		
	ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - реализованные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы полученные");
		СписокВыбора.Добавить("03", "03 - возврат поставщику");
		СписокВыбора.Добавить("04", "04 - реализованные товары, работы, услуги комитента");
		СписокВыбора.Добавить("05", "05 - авансы полученные за товары, работы, услуги комитента");
		СписокВыбора.Добавить("06", "06 - налоговый агент, статья 161 НК");
		СписокВыбора.Добавить("07", "07 - списание за счет прибыли, пп.2 п.1 статьи 146 НК");
		СписокВыбора.Добавить("08", "08 - строительно-монтажные работы, пп.3 п.1 статьи 146 НК");
		СписокВыбора.Добавить("09", "09 - суммы, связанные с расчетами по оплате, статья 162 НК");
		СписокВыбора.Добавить("10", "10 - переданные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
            		
	КонецЕсли;	
		      
КонецПроцедуры	

// Определяет наличие соглашения с контрагентом, на электронный обмен документами
//
Функция НаличиеСоглашенияОбменаЭД(СсылкаНаВладельца) Экспорт
	
	//Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД")
	//	ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Возврат Ложь;
	//КонецЕсли;	
	
	//ПараметрыЭД = Новый Структура("ВидЭд,НаправлениеЭД,Организация,Контрагент");
	//
	//ЗаполнитьЗначенияСвойств(ПараметрыЭД, СсылкаНаВладельца);
	//
	//ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.СчетФактура;
	//ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	//
	//Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДействующееСоглашение(ПараметрыЭД);
	
КонецФункции

// Возвращает порядок корректировки НДС (по проекту Федерального Закона N 79859-6)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок корректировки НДФЛ
// Возвращаемое значение:
//  Число   - 	версия постановления, 
//				1 - корректировка НДС выполняется по периоду отгрузки 
//              2 - корректировка НДС выполняется по периоду соглашения об изменении условий договора
//
Функция ПолучитьПорядокКорректировкиНДС(Дата) Экспорт 

	НачалоПримененияПравила = '20130701';
	
	Если Дата >= НачалоПримененияПравила Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции

// Возвращает порядок округления НДС (Федеральный Закон N 248-ФЗ)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок округления НДС
// Возвращаемое значение:
//  Булево - 	признак применения
//				1 	- сумма НДС исчисляется с копейками
//				2 	- сумма НДС исчисляется в полных рублях
//
Функция ПолучитьПорядокОкругленияНДС(Дата) Экспорт

	НачалоПримененияОкругления = '20140101';
	
	Если Дата < НачалоПримененияОкругления Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции // ПолучитьПорядокОкругленияНДС()

// Возвращает признак применения Федерального Закона 134-ФЗ
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить признак применения 134-ФЗ
// Возвращаемое значение:
//  Булево - 	признак применения
//				Истина 	- ФЗ-134 применяется
//				Ложь 	- ФЗ-134 не применяется
//
Функция ВедетсяУчетНДСПоФЗ134(Дата) Экспорт

	НачалоПримененияФЗ134 = '20140101';
	
	Если Дата < НачалоПримененияФЗ134 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция ВедетсяУчетНДСПоФЗ81(Дата) Экспорт

	НачалоПримененияФЗ81 = '20140701';
	
	Если Дата < НачалоПримененияФЗ81 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ81()

// Возвращает версию постановления Правительства РФ от 26.12.2011 г. № 1137
//
// Параметры
// 	Период  - 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить версию постановления
// Возвращаемое значение:
//  Число   - 	версия постановления,
//				0 - до начала применения постановления № 1137
//				1 - исходная версия постановления Правительства РФ от 26.12.2011 г. № 1137
//              2 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 952
//              3 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 735
//
Функция ВерсияПостановленияНДС1137(Период) Экспорт
	
	Если Период >= '20141001' Тогда 		// Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат 3;
	ИначеЕсли Период >= '20131106' Тогда 	// Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат 2;
	Иначе
		Возврат 1;                          // Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ КНИГ И ЖУРНАЛОВ

// Книга покупок, дополнительные листы книги покупок

Процедура УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПокупателейПоАвансам", СтруктураПараметров.ВыводитьПокупателейПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета",		Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПравилаПостановления735", ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериода) = 3);		
	Запрос.УстановитьПараметр("УчитыватьНеПроведенныеПлатежи", УчитыватьНеПроведенныеПлатежи);
	//АБС
	Запрос.УстановитьПараметр("ВалютаРегУчетаКод","643");		
	Запрос.УстановитьПараметр("ВалютаРегУчетаНаименованиеПолное", "Российский рубль");
	//\\АБС

	Если СтруктураПараметров.ЗаполнениеДокумента И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		// Параметры для заполнения документа "Дополнительный лист книги покупок
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	КонецЕсли;	
    	
	СтавкиНДС20 = Новый Массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);

	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС20", СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0", СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	 
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);

	ВидыЦенностей_АвансыПолученные = Новый Массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыВыданные", Перечисления.ВидыЦенностей.АвансыВыданные);
	
	ВидыЦенностей_СуммовыеРазницы = Новый Массив;
	ВидыЦенностей_СуммовыеРазницы.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммовыеРазницы", ВидыЦенностей_СуммовыеРазницы);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);	
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностиНалоговыйАгентПоступление());
	
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	
	ТипыДокументовИсправлений	= Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.Измерения.ИсправленныйСчетФактура.Тип;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ТипыДокументовИсправлений.СодержитТип(Тип("ДокументСсылка." + МетаданныеДокумента.Имя)) Тогда
			МассивДокументовИсправлений.Добавить(Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", МассивДокументовИсправлений);
	
КонецПроцедуры

// Получает записи книги покупок за период
//
Функция ПолучитьЗаписиКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
		
	// Создаем запрос по счетам-фактурам
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
	// {{KM WARE Агапов Н.А. Заявка № 01.10.2015 начало
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаписиКнигиПокупок.Период КАК Период,
	|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПокупок.Поставщик КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.ИНН
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.КПП
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0)) КАК ВсегоПокупок,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС20)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(НДСЗаписиКнигиПокупок.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|					И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Продавец,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|							ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаПринятияНаУчет,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы))
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|						И НЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ КАК ДокументОснованиеСчетаФактуры,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации,
// {{KM WARE Агапов Н.А. Заявка № 01.10.2015 начало	
	|	НДСЗаписиКнигиПокупок.СчетФактура.Ответственный КАК ОтветственныйЗаДокументы,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	НДСЗаписиКнигиПокупок.СчетФактура.абс_ОтветственныйБухгалтер КАК ОтветственныйБухгалтер,
	|	НДСЗаписиКнигиПокупок.СчетУчетаНДС КАК СчетУчета,
	|	НДСЗаписиКнигиПокупок.СчетФактура.абс_СтатьяПрочихДоходовРасходов КАК Видценности
// }}KM WARE Агапов Н.А. Заявка № 01.10.2015 окончание	
	|ПОМЕСТИТЬ ЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
	|	И НЕ НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.Активность
	|	И ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА НДСЗаписиКнигиПокупок.Поставщик = &КонтрагентДляОтбора
	|			ИНАЧЕ &ОтбиратьПоКонтрагенту = ЛОЖЬ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупок.Период,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ,
	|	ЕСТЬNULL(НДСЗаписиКнигиПокупок.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы))
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|						И НЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.ИНН
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.КПП
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|					И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.Поставщик,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|							ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации,
// {{KM WARE Агапов Н.А. Заявка № 01.10.2015 начало	
	|	НДСЗаписиКнигиПокупок.СчетФактура.Ответственный,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента.Номер,
	|	НДСЗаписиКнигиПокупок.СчетФактура.абс_ОтветственныйБухгалтер,
	|	НДСЗаписиКнигиПокупок.СчетУчетаНДС,
	|	НДСЗаписиКнигиПокупок.СчетФактура.абс_СтатьяПрочихДоходовРасходов
	|
// }}KM WARE Агапов Н.А. Заявка № 01.10.2015 окончание	
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";

	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	НДСЗаписиКнигиПокупок.Период КАК Период,
	//|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|							И &ВыводитьПокупателейПоАвансам
	//|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	//|	КОНЕЦ КАК Контрагент,
	//|	НДСЗаписиКнигиПокупок.Поставщик КАК КонтрагентПоСчетуФактуре,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|							И &ВыводитьПокупателейПоАвансам
	//|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.ИНН
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
	//|	КОНЕЦ КАК ПродавецИНН,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|							И &ВыводитьПокупателейПоАвансам
	//|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.КПП
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
	//|	КОНЕЦ КАК ПродавецКПП,
	//|	ВЫБОР
	//|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	//|	КОНЕЦ КАК СчетФактура,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	//|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|				КОНЕЦ
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	//|	КОНЕЦ КАК ДатаОплаты,
	//|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	//|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0)) КАК ВсегоПокупок,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС20)
	//|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК СуммаБезНДС20,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС20)
	//|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК НДС20,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	//|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК СуммаБезНДС18,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	//|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК НДС18,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	//|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК СуммаБезНДС10,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	//|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК НДС10,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаНДС0
	//|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК НДС0,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаБезНДС
	//|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	//|	ЕСТЬNULL(НДСЗаписиКнигиПокупок.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	//|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	//|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|					И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	//|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	//|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	//|				КОНЕЦ
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
	//|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
	//|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
	//|			КОНЕЦ
	//|	КОНЕЦ КАК Продавец,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	//|			ТОГДА """"
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	//|					ТОГДА ВЫБОР
	//|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	//|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	//|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	//|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	//|							ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|						КОНЕЦ
	//|				ИНАЧЕ ВЫБОР
	//|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	//|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	//|					КОНЕЦ
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ДатаОприходования,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	//|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|				ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ДатаПринятияНаУчет,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК НаАванс,
	//|	ВЫБОР
	//|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы))
	//|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	//|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	//|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	//|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|	КОНЕЦ КАК СтавкаНДС_Аванс,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	//|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	//|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	//|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ДоговорАванса,
	//|	ВЫБОР
	//|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	//|						И НЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	//|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ДокументОснованиеСчетаФактуры,
	//|	ВЫБОР
	//|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	//|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	//|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	//|			ТОГДА ИСТИНА
	//|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	//|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК Исправление,
	//|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	//|	КОНЕЦ КАК ДатаСобытия,
	//|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
	//|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	//|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	//|	НДСЗаписиКнигиПокупок.КодВидаОперации
	//|
	//|ПОМЕСТИТЬ ЗаписиКнигиПокупок
	//|ИЗ
	//|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	//|ГДЕ
	//|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	//|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
	//|	И НЕ НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	//|	И НДСЗаписиКнигиПокупок.Активность
	// // {{KM WARE Акулов А.И. 26.06.2015 начало
	// // отбор по контрагенту
	//|   И ВЫБОР
	//|		КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	//|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик = &КонтрагентДляОтбора
	//|		ИНАЧЕ &ОтбиратьПоКонтрагенту = ЛОЖЬ
	//|	КОНЕЦ
	// // }}KM WARE Акулов А.И. 26.06.2015 окончание
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НДСЗаписиКнигиПокупок.Период,
	//|	НДСЗаписиКнигиПокупок.Организация,
	//|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	//|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|				КОНЕЦ
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	//|	КОНЕЦ,
	//|	ЕСТЬNULL(НДСЗаписиКнигиПокупок.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы))
	//|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	//|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	//|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	//|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	//|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	//|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	//|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	//|	ВЫБОР
	//|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	//|						И НЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	//|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	//|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	//|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	//|			ТОГДА ИСТИНА
	//|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	//|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|							И &ВыводитьПокупателейПоАвансам
	//|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|							И &ВыводитьПокупателейПоАвансам
	//|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.ИНН
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|							И &ВыводитьПокупателейПоАвансам
	//|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	//|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.КПП
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	//|			ТОГДА ВЫБОР
	//|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	//|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	//|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	//|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	//|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	//|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|					И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	//|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	//|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	//|				КОНЕЦ
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
	//|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
	//|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ),
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	//|	КОНЕЦ,
	//|	НДСЗаписиКнигиПокупок.Поставщик,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	//|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|				ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	//|			ТОГДА """"
	//|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	//|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	//|					ТОГДА ВЫБОР
	//|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	//|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	//|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	//|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	//|							ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|						КОНЕЦ
	//|				ИНАЧЕ ВЫБОР
	//|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	//|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	//|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	//|					КОНЕЦ
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	//|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	//|	НДСЗаписиКнигиПокупок.КодВидаОперации
	//|ИНДЕКСИРОВАТЬ ПО
	//|	СчетФактура";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:	
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание	
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос);
	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.Период, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|				И ПОДСТРОКА(ЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).Наименование, 1, 250)
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250)
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).Наименование
	|				ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Продавец,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПокупок.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецКПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецКПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЗаписиКнигиПокупок.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, -ЗаписиКнигиПокупок.ВсегоПокупок)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, ЗаписиКнигиПокупок.ВсегоПокупок)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПокупок.ВсегоПокупок
	|	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПокупок.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокументРасшифровка,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	// {{KM WARE Агапов Н.А. Заявка № 01.10.2015 начало
	|	ЗаписиКнигиПокупок.ОтветственныйЗаДокументы КАК ОтветственныйЗаДокументы,
	|	ЗаписиКнигиПокупок.ОтветственныйБухгалтер КАК ОтветственныйБухгалтер,
	|	ЗаписиКнигиПокупок.НомерДоговора КАК НомерДоговора,
	|	ЗаписиКнигиПокупок.Видценности КАК Видценности,
	|	ЗаписиКнигиПокупок.СчетУчета КАК СчетУчета,
	// }}KM WARE Агапов Н.А. Заявка № 01.10.2015 окончание
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ЗаписиКнигиПокупок.Исправление КАК Исправление,
	|	ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры КАК ДокументОснованиеСчетаФактуры,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПокупок.КодВидаОперации, """") = """"
	|			ТОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ВЫБОР
	|						КОГДА ЗаписиКнигиПокупок.НаАванс
	|							ТОГДА ""02""
	|						ИНАЧЕ ""01""
	|					КОНЕЦ)
	|		ИНАЧЕ ЗаписиКнигиПокупок.КодВидаОперации
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.НДС КАК НДС,
// {{KM WARE Семенов И.С. 16.07.2015,17.07 Заявка №  начало
// код 23 берем дату и номер оплаты из документа "формирования книги покупок" почти всегда, даже если там авансовый отчет
	|	выбор когда (ЗаписиКнигиПокупок.КодВидаОперации=""23"") и ЗаписиКнигиПокупок.НомерДокументаОплаты ="""" тогда
	|ЗаписиКнигиПокупок.ДокументОплаты.Номер иначе
	|ЗаписиКнигиПокупок.НомерДокументаОплаты 
	|конец
	|КАК НомерДокументаОплаты,
	|	выбор когда (ЗаписиКнигиПокупок.КодВидаОперации=""23"") и ЗаписиКнигиПокупок.НомерДокументаОплаты ="""" тогда
	|ЗаписиКнигиПокупок.ДокументОплаты.Дата иначе
	|	ЗаписиКнигиПокупок.ДатаДокументаОплаты 
	|конец
// }}KM WARE Семенов И.С. 16.07.2015 окончание
	|КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.Посредник,
	|	ТаблицаСчетаФактурыДокументы.ПосредникИНН,
	|	ТаблицаСчетаФактурыДокументы.ПосредникКПП
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса
	// {{KM WARE Акулов А.И. 26.06.2015 начало
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	//|				ТОГДА ВЫБОР
	//|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	//|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	//|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	//|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	//|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	//|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	//|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	//|						ИНАЧЕ ЗаписиКнигиПокупок.Контрагент = &КонтрагентДляОтбора
	//|					КОНЕЦ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	//|
	// }}KM WARE Акулов А.И. 26.06.2015 окончание
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСчетаФактуры,
	|	НомерСчетаФактуры
	|ИТОГИ
	|	МАКСИМУМ(Продавец),
	|	МАКСИМУМ(Контрагент),
	|	МИНИМУМ(ДатаОплаты),
	|	МИНИМУМ(ДатаОприходования),
	|	МИНИМУМ(ДатаПринятияНаУчет),
	|	МАКСИМУМ(НаАванс),
	// {{KM WARE Акулов А.И. 07.07.2015 начало
	// 
	// {{Старый код:
	//|	ВЫБОР
	//|		КОГДА &ПравилаПостановления735
	//|			ТОГДА МАКСИМУМ(ВсегоПокупок)
	//|		ИНАЧЕ СУММА(ВсегоПокупок)
	//|	КОНЕЦ КАК ВсегоПокупок,
	// }}Новый код:
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА СУММА(ВсегоПокупок)
	|		ИНАЧЕ СУММА(ВсегоПокупок)
	|	КОНЕЦ КАК ВсегоПокупок,
	// }}KM WARE Акулов А.И. 07.07.2015 окончание
	|	СУММА(СуммаБезНДС20),
	|	СУММА(НДС20),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	СУММА(НДС),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	ОБЩИЕ,
	|	СчетФактураДокумент,
	|	ИсправленныйСчетФактура,
	|	Исправление";
				   
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	ОБЩИЕ,", "ПО
	               |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;
		
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьЗаписиКнигиПокупок()

// Получает записи дополнительных листов за период
//
Функция ПолучитьЗаписиДополнительныхЛистовКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПокупок.Поставщик КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаСобытия
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|			ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0)) КАК ВсегоПокупок,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС20)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	|	НДСЗаписиКнигиПокупок.СчетФактура.Дата КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|					И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Продавец,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|							ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорАванса,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	НДСЗаписиКнигиПокупок.Период КАК ДатаОформления,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|						И НЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ КАК ДокументОснованиеСчетаФактуры,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты
	|ПОМЕСТИТЬ ЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста = ИСТИНА
	|	И НДСЗаписиКнигиПокупок.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.Событие,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.СчетФактура.Дата,
	|	НДСЗаписиКнигиПокупок.Период,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаСобытия
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|			ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|		КОНЕЦ, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|							ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ),
	|	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ),
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|						И НЕ НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|					И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.Поставщик,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты";	 
	 
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период МЕЖДУ &НачалоПериода И &КонецПериода", "Период >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПериода 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод <= &КонецПериода");
								
	ИначеЕсли СтруктураПараметров.ЗаполнениеДокумента Тогда
								
		// Учитывается как корректируемый период, так и дата оформления дополнительного листа
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоНалоговогоПериода 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод <= &КонецНалоговогоПериода");
										
	КонецЕсли;
		
	Запрос.Выполнить();
	
	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос);
	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.НалоговыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.Продавец
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПокупок.Продавец
	|	КОНЕЦ КАК Продавец,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПокупок.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецКПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецКПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, -ЗаписиКнигиПокупок.ВсегоПокупок)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, ЗаписиКнигиПокупок.ВсегоПокупок)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПокупок.ВсегоПокупок
	|	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПокупок.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.ДатаОформления, ДЕНЬ) КАК ДатаОформления,
	|	ЗаписиКнигиПокупок.КонецНалоговогоПериода КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""02"") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.НДС КАК НДС,
	|	ЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|							ТОГДА ЗаписиКнигиПокупок.Контрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПокупок.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаОприходования,
	|	ДатаОформления,
	|	СчетФактураДата,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(Продавец),
	|	МИНИМУМ(СчетФактураДата),
	|	МИНИМУМ(ДатаОприходования),
	|	МАКСИМУМ(НаАванс),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(ВсегоПокупок)
	|		ИНАЧЕ СУММА(ВсегоПокупок)
	|	КОНЕЦ КАК ВсегоПокупок,	
	|	СУММА(ВсегоПокупок),
	|	СУММА(СуммаБезНДС20),
	|	СУММА(НДС20),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	СУММА(НДС),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	ИсправленныйСчетФактура";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления,", "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;	
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции

// Получает страну происхождения и номер ГТД по списку счетов-фактур в виде, отражаемом в книге покупок
//
Функция ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт

	// Определить частичные оплаты
	// Определяем полную сумму по СФ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	СУММА(НДСПредъявленныйОбороты.СуммаБезНДСПриход + НДСПредъявленныйОбороты.НДСПриход) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И (НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты)))) КАК НДСПредъявленныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;
	
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
			СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор()), СтрокаИнформации);
		КонецЕсли; 
	КонецЦикла; 
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТДиСтрана", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТД", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));	
	
	// Дополнение по ГТД и стране происхождения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Ссылка КАК СчетФактура,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	СУММА(1) КАК КоличествоЭлементов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	ТаблицаТоваров.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.Ссылка.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.Ссылка.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.СчетФактура В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	1
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|ИТОГИ
	|	СУММА(КоличествоЭлементов)
	|ПО
	|	СчетФактура,
	|	СтранаПроисхождения";
	
	Запрос.УстановитьПараметр("СписокСФ", СписокСчетовФактур);
	
	ГТДпоСФ =  Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ГТДпоСФ.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиИнформацииСФ = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
		Если СтрокиИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			
			СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
			
			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
		Иначе
			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
		КонецЕсли; 
		
		СтрокаИнформации = "";
		СтрокаИнформацииГТД = "";
		Для Каждого СтрокаСтраныПроисхождения Из СтрокаСФ.Строки Цикл
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", Символы.ПС) + СокрЛП(СтрокаСтраныПроисхождения.СтранаПроисхождения);
			ГТДРез = "";
			Для каждого СтрокаНомерГТД Из СтрокаСтраныПроисхождения.Строки Цикл
				ГТДРез = ГТДРез + ?(ГТДРез = "","",", ") + СокрЛП(СтрокаНомерГТД.НомерГТД)
			КонецЦикла; 
			
			СтрокаИнформации = СтрокаИнформации + ?(СтрокаИнформации = "","",?(ГТДРез = "","",";")) + ГТДРез;
			СтрокаИнформацииГТД = СтрокаИнформацииГТД + ?(СтрокаИнформацииГТД = "","",?(ГТДРез = "","",";")) + ГТДРез;			
		КонецЦикла; 
		
		Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
			СтрокаИнформацииСФ.ГТДиСтрана = СтрокаИнформации;
			СтрокаИнформацииСФ.ГТД		  = СтрокаИнформацииГТД;			
		КонецЦикла; 
		
	КонецЦикла; 
	
	// дополняем информацию датами оплаты,
    // отраженными в регистре записей книг отдельно от сумм
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание	
	|	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Организация В (&Организация)
	|	И ВЫБОР
	|			КОГДА &ЗаписьДополнительногоЛиста
	|					И &ДополнительныеЛистыЗаТекущийПериод
	|				ТОГДА НДСЗаписиКнигиПокупок.Период >= &НачалоПериода
	|						И (НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ИНАЧЕ НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И НДСЗаписиКнигиПокупок.СчетФактура В(&СписокСчетовФактур)
	|	И НДСЗаписиКнигиПокупок.СуммаБезНДС = 0
	|	И НДСЗаписиКнигиПокупок.НДС = 0
	|	И (НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", СтруктураПараметров.ЗаписьДополнительногоЛиста);
	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиИнформацииСФ = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
		Если СтрокиИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
		Иначе
			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
		КонецЕсли; 
		
		Для каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
			СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат СоответствиеСтрокиДопИнформацииПоСчетуФактуре;
	
КонецФункции // ПолучитьДополнительнуюИнформациюПоСФ()

// Получает итоги книги покупок за период
//
// Параметры
//  Организация    – <СправочникСсылка.Организации> - организация по которой строится книга 
//  НачалоПериода  – <Дата> – дата начала периода
//  НачалоПериода  – <Дата> – дата окончания периода
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – Таблица значений
//
Функция ПолучитьИтогиЗаПериодКнигаПокупок(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.ВсегоПокупок), 0) КАК ВсегоПокупок,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС20), 0) КАК СуммаБезНДС20,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС20), 0) КАК НДС20,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС18), 0) КАК НДС18,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС10), 0) КАК НДС10,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС0), 0) КАК НДС0,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС), 0) КАК НДС
	 |ИЗ
	  |	(ВЫБРАТЬ
	 |		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ВсегоПокупок,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаБезНДС20,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС20,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаБезНДС18,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС18,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаБезНДС10,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС10,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС0,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаСовсемБезНДС,
	 |		НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК НДС
	 |	ИЗ
	 |		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&КонецПериода,
	 |			Период,
	 |			Организация В (&Организация)
	 |			    И НЕ ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	 |	
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |ВЫБРАТЬ
	 |		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |	ИЗ
	 |		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&МоментФормированияДопЛиста,
	 |			Период,
	 |			Организация В (&Организация)
	 |			    И ЗаписьДополнительногоЛиста
	 |			    И КорректируемыйПериод >= &НачалоПериода
	 |			    И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты) КАК ИтогиКнигиПокупок";
	 
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация"	, СтруктураПараметров.СписокОрганизаций);

	СтавкиНДС20 = Новый Массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);

	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС20", СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0", СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	 
	ВидыЦенностей_Авансы = Новый Массив;
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Авансы", ВидыЦенностей_Авансы);
			
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПокупок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));		
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос)
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ТЧПокупатели.СчетФактура
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ТЧПокупатели
	|ГДЕ
	|	ТЧПокупатели.Ссылка.Проведен
	|	И НЕ ТЧПокупатели.Ссылка.ПометкаУдаления
	|	И ТЧПокупатели.Ссылка.Организация В(&Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТЧПокупатели.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	СчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокументРасшифровка,
	|	СчетаФактурыДокументы.Ссылка КАК Ссылка,
	|	СчетаФактурыДокументы.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетаФактурыДокументы.Исправление КАК Исправление,
	|	СчетаФактурыДокументы.НомерСтроки,
	|	СчетаФактурыДокументы.СводныйКорректировочный
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументыПредварительная
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.Исправление
	|						И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка
	|				ИНАЧЕ СчетФактураПолученный.ДокументОснование
	|			КОНЕЦ КАК СчетФактура,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|			КОНЕЦ КАК НомерСчетаФактуры,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|			КОНЕЦ КАК ДатаСчетаФактуры,
	|			СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК НаАванс,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК СтавкаНДСАванса,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	//АБС
	|					ИЛИ СчетФактураПолученный.Ссылка.Дата < ДатаВремя(2014,1,1)
	//\\АБС
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК ДоговорАванса, 	 
	|			СчетФактураПолученный.Ссылка КАК Ссылка,
	|			СчетФактураПолученный.Ссылка.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|			СчетФактураПолученный.Ссылка.Исправление КАК Исправление,
	//АБС
	//|			СчетФактураПолученный.Ссылка.Контрагент КАК Контрагент,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.абс_Продавец <> ЗНАЧЕНИЕ(Справочник.абс_Продавец.ПустаяСсылка)
	|					ТОГДА СчетФактураПолученный.Ссылка.абс_Продавец
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.Контрагент
	|			КОНЕЦ КАК Контрагент,
	//\\АБС
	|			ЛОЖЬ КАК ЭтоСчетФактураВыданныйПокупателюПоОтчетуКомиссионера,
	|			СчетФактураПолученный.НомерСтроки КАК НомерСтроки,
	|			СчетФактураПолученный.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	//АБС
	//|			СчетФактураПолученный.Ссылка.Проведен 
	|			ВЫБОР
	|				КОГДА &УчитыватьНеПроведенныеПлатежи = ИСТИНА
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.Проведен
	|			КОНЕЦ
	//\\АБС
	|			И НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|			И СчетФактураПолученный.Ссылка.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.Исправление
	|						И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НалоговыйАгент))
	|					ТОГДА СчетФактураВыданный.Ссылка
	|				ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|			КОНЕЦ,
	|			СчетФактураВыданный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаСуммовуюРазницу)
	|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|						ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НалоговыйАгент)
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			СчетФактураВыданный.Ссылка,
	|			СчетФактураВыданный.Ссылка.ВидСчетаФактуры,
	|			СчетФактураВыданный.Ссылка.Исправление,
	//АБС
	//|			СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.абс_Продавец <> ЗНАЧЕНИЕ(Справочник.абс_Продавец.ПустаяСсылка)
	|					ТОГДА СчетФактураВыданный.Ссылка.абс_Продавец
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Контрагент
	|			КОНЕЦ КАК Контрагент,
	//\\АБС
	|			ВЫБОР
	|				КОГДА НЕ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера.СчетФактура ЕСТЬ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			СчетФактураВыданный.НомерСтроки,
	|			СчетФактураВыданный.Ссылка.СводныйКорректировочный
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера КАК ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера
	|				ПО СчетФактураВыданный.Ссылка = ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера.СчетФактура
	|		ГДЕ
	//АБС
	//|			СчетФактураВыданный.Ссылка.Проведен  
	|			ВЫБОР
	|				КОГДА &УчитыватьНеПроведенныеПлатежи = ИСТИНА
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Проведен
	|			КОНЕЦ	
	//\\АБС
	|			И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			ГТДИмпорт.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|			ЛОЖЬ,
	|			ГТДИмпорт.Контрагент,
	|			ЛОЖЬ,
	|			0,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И НЕ ГТДИмпорт.ПометкаУдаления
	|			И ГТДИмпорт.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера,
	|			ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера,
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|			ЛОЖЬ,
	|			ВозвратТоваровОтПокупателя.Контрагент,
	|			ЛОЖЬ,
	|			0,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ГДЕ
	|			ВозвратТоваровОтПокупателя.Проведен
	|			И НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления
	|			И ВозвратТоваровОтПокупателя.Организация В(&Организация)
	|			И ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера <> """"
	|			И ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера <> ДАТАВРЕМЯ(1, 1, 1)) КАК СчетаФактурыДокументы
	|		ПО (ЗаписиКнигиПокупок.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|				ИЛИ ЗаписиКнигиПокупок.ДокументОплаты = СчетаФактурыДокументы.СчетФактура)
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = СчетаФактурыДокументы.Контрагент
	|			И ЗаписиКнигиПокупок.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (НЕ ЗаписиКнигиПокупок.НаАванс
	|				ИЛИ СчетаФактурыДокументы.НаАванс
	|					И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса)
	|ГДЕ	
	| НЕ(ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				И СчетаФактурыДокументы.ЭтоСчетФактураВыданныйПокупателюПоОтчетуКомиссионера)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент КАК СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	МАКСИМУМ(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный
	|ПОМЕСТИТЬ ВТ_ОбъединениеСФ
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСчетаФактурыДокументы.СчетФактура,
	|	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактураДокументКонтрагент,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДатаСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСчетаФактуры,
	|	ВТ_ОбъединениеСФ.СчетФактураДокумент,
	|	ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СтавкаНДСАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокументРасшифровка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.Ссылка КАК Ссылка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСтроки,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СводныйКорректировочный,
	//АБС
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура.абс_Продавец <> ЗНАЧЕНИЕ(Справочник.абс_Продавец.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполненПродавец
	//\\АБС
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументыПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъединениеСФ КАК ВТ_ОбъединениеСФ
	|		ПО ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса = ВТ_ОбъединениеСФ.ДоговорАванса
	|			И ТаблицаСчетаФактурыДокументыПредварительная.ВидСчетаФактуры = ВТ_ОбъединениеСФ.ВидСчетаФактуры
	|			И ТаблицаСчетаФактурыДокументыПредварительная.Исправление = ВТ_ОбъединениеСФ.Исправление
	|			И ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокумент.Контрагент = ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент
	|			И ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура = ВТ_ОбъединениеСФ.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировки,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПродавецДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.ИНН
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ИНН
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ИННПродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.КПП
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.КППКонтрагента
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КПППродавцаДляПечати,
	|	ЖурналУчетаСчетовФактур.НомерСтроки,
	// {{KM WARE Агапов Н.А. Заявка № 24.09.2015 начало
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.Контрагент
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Посредник,
	// }}KM WARE Агапов Н.А. Заявка № 24.09.2015 окончание
	|	ЖурналУчетаСчетовФактур.НомерСтроки,
	|	ЖурналУчетаСчетовФактур.Валюта,
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК ВсегоПокупокВВалюте,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	//АБС 
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЖурналУчетаСчетовФактур.СчетФактура.абс_Продавец <> ЗНАЧЕНИЕ(Справочник.абс_Продавец.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполненПродавец
	//\\АБС 
	|ПОМЕСТИТЬ ВТ_РегистрацияСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|			ИЗ
	|				ВТ_ТаблицаСчетаФактурыДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.НомерСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ВТ_ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка КАК СчетФактураДокументРасшифровка,
	|	ВТ_РегистрацияСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировки,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РегистрацияСчетовФактур.СчетФактура ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента, 
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент КАК КонтрагентПоСчетуФактуре, 
	|	ВТ_РегистрацияСчетовФактур.ВсегоПокупокВВалюте КАК ВсегоПокупокВВалюте,
	//|	ВТ_РегистрацияСчетовФактур.Валюта,
	//|	ВТ_РегистрацияСчетовФактур.ВалютаНаименованиеПолное,   	
	//|	ВТ_РегистрацияСчетовФактур.ВалютаКод,	
	//АБС  
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) = ИСТИНА
	|			ТОГДА &ВалютаРегУчета
	|		ИНАЧЕ ВТ_РегистрацияСчетовФактур.Валюта
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) = ИСТИНА
	|			ТОГДА &ВалютаРегУчетаНаименованиеПолное
	|		ИНАЧЕ ВТ_РегистрацияСчетовФактур.ВалютаНаименованиеПолное
	|	КОНЕЦ КАК ВалютаНаименованиеПолное,	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) = ИСТИНА
	|			ТОГДА &ВалютаРегУчетаКод
	|		ИНАЧЕ ВТ_РегистрацияСчетовФактур.ВалютаКод
	|	КОНЕЦ КАК ВалютаКод,	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ЗаполненПродавец,ВТ_ТаблицаСчетаФактурыДокументы.ЗаполненПродавец) = Истина
	|			ТОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.абс_Продавец, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.абс_Продавец)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ПродавецДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент)
	|	КОНЕЦ КАК ПродавецДляПечати,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ЗаполненПродавец,ВТ_ТаблицаСчетаФактурыДокументы.ЗаполненПродавец) = Истина
	|			ТОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.абс_Продавец.ИНН, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.абс_Продавец.ИНН)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура.Контрагент.ИНН, ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ИННПродавцаДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент.ИНН))
	|	КОНЕЦ КАК ИННПродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ЗаполненПродавец,ВТ_ТаблицаСчетаФактурыДокументы.ЗаполненПродавец) = Истина
	|			ТОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.абс_Продавец.КПП, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.абс_Продавец.КПП)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура.Контрагент.КПП, ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.КПППродавцаДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент.КПП))
	|	КОНЕЦ КАК КПППродавцаДляПечати,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.КодВидаОперации, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации) КАК КодВидаОперации,
	// {{KM WARE Агапов Н.А. Заявка № 24.09.2015 начало
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ЗаполненПродавец,ВТ_ТаблицаСчетаФактурыДокументы.ЗаполненПродавец) = Истина
	|			ТОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.Контрагент, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Посредник,
	// }}KM WARE Агапов Н.А. Заявка № 24.09.2015 окончание
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ЗаполненПродавец,ВТ_ТаблицаСчетаФактурыДокументы.ЗаполненПродавец) = Истина
	|			ТОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.Контрагент.ИНН, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.ИНН)
	|	КОНЕЦ КАК ПосредникИНН,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ЗаполненПродавец,ВТ_ТаблицаСчетаФактурыДокументы.ЗаполненПродавец) = Истина
	|			ТОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура.Контрагент.КПП, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.КПП)
	|	КОНЕЦ КАК ПосредникКПП
	//\\АБС
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ВТ_ТаблицаСчетаФактурыДокументы КАК ВТ_ТаблицаСчетаФактурыДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацияСчетовФактур КАК ВТ_РегистрацияСчетовФактур
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ВТ_РегистрацияСчетовФактур.СчетФактура
	|			И ВТ_ТаблицаСчетаФактурыДокументы.НомерСтроки = ВТ_РегистрацияСчетовФактур.НомерСтроки";
	
	Запрос.Выполнить();
КонецПроцедуры

// Возвращает структуру с полями "ТекущийПериод" и "КорректируемыйПериод",
// принимающие значение булевого типа - требуется ли формировать доп. листы
Функция ПроверитьНаличиеДопЛистовКнигиПокупок(СтруктураПараметров) Экспорт
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДопЛисты,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупокОбороты.Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&НачалоПериода
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И КорректируемыйПериод >= &НачалоПериода
	|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.Период";
				   
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаСообщения = "";
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод ИЛИ НЕ СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.КорректируемыйПериод Тогда
			Сообщить("В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
					|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
					|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период""", СтатусСообщения.Информация);
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И НЕ СтруктураПараметров.ТекущийПериод Тогда
			Сообщить("В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
					|Построение дополнительных листов за текущий налоговый период не требуется", СтатусСообщения.Информация);
			Возврат СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод ИЛИ НЕ СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.ТекущийПериод Тогда
			Сообщить("В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
					|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
					|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за текущий период""!", СтатусСообщения.Информация);
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И НЕ СтруктураПараметров.КорректируемыйПериод Тогда
			Сообщить("В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
					|Построение дополнительных листов за корректируемый налоговый период не требуется", СтатусСообщения.Информация);
			Возврат СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
    	
	Возврат СтруктураПараметров;
	
КонецФункции

// Книга продаж, дополнительные листы книги продаж

Функция ПроверитьНаличиеДопЛистовКнигиПродаж(СтруктураПараметров) Экспорт
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьДопЛисты,
		|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	2,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	&НачалоПериода,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА
		|				И КорректируемыйПериод >= &НачалоПериода
		|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация"	, СтруктураПараметров.СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Или Не СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.КорректируемыйПериод Тогда
			Сообщить("В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
			|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
			|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период""", СтатусСообщения.Информация);
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.ТекущийПериод Тогда
			Сообщить("В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
			|Построение дополнительных листов за текущий налоговый период не требуется", СтатусСообщения.Информация);
			Возврат СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Или Не СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.ТекущийПериод Тогда
			Сообщить("В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
			|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
			|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за текущий период""!", СтатусСообщения.Информация);
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.КорректируемыйПериод Тогда
			Сообщить("В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
			|Построение дополнительных листов за корректируемый налоговый период не требуется", СтатусСообщения.Информация);
			Возврат СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции

Функция ПолучитьЗаписиДополнительныхЛистовКнигиПродаж(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	// Создаем общий запрос                                       
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);
    	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание	
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорАванса,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК Период,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = ИСТИНА
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И (НДСЗаписиКнигиПродаж.СтавкаНДС <> &СтавкаБезНДС
	|			ИЛИ &ОтражатьРеализацииБезНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты";
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период МЕЖДУ &НачалоПериода И &КонецПериода", "Период >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПериода 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецПериода");
	ИначеЕсли СтруктураПараметров.ЗаполнениеДокумента Тогда
								
		// Учитывается как корректируемый период, так и дата оформления дополнительного листа
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоНалоговогоПериода 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецНалоговогоПериода");
	КонецЕсли;
		
	Запрос.Выполнить();
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:	
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	//|ИЗ
	//|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	// }}Новый код:
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.СчетФактура.Дата КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.ИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.ИНН
	|	КОНЕЦ КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.КПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.КПП
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|			ТОГДА ""Розничная продажа""
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).Наименование, 1, 250)
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПродаж.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.Период КАК ДатаОформления,
	|	ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""02"") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактураДокумент
	|				ИНАЧЕ ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			КОНЕЦ)
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА Приоритеты.СчетФактураДокумент = ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|				ИНАЧЕ Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			КОНЕЦ)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|							ТОГДА ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДата,
	|	СторнирующаяЗаписьДопЛиста УБЫВ,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(ВсегоПродаж)
	|		ИНАЧЕ СУММА(ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС20),
	|	СУММА(НДС20),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактура,
	|	ДоговорАванса,
	|	СторнирующаяЗаписьДопЛиста";
		
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления,", "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос)
	     	
	// Счета-фактуры выданные, составленные от имени продавца, возникают у комиссионера, в книге не отражаются.
	// Т.к. у счетов-фактур, составленых от имени продавца, и выданных комитенту на вознаграждение один и тот же 
	// документ - основание (отчет комитенту), то необходимо отбирать только счета-фактуры на вознаграждение, 
	// чтобы не задвоились записи при соединении регистра НДС и списка документов.
	//
	// Счета-фактуры полученные, составленные от имени продавца, отражаются в базе комитента и
	// на основании их комитент принимает НДС к вычету, поэтому для счетов-фактур полученных отбор по
	// флагу "Составлен от имени продавца" не должен выполняться.
	// 
	// Счета-фактуры (полученные и выданные) на аванс в базе комиссионера, составленные от имени продавца, 
	// не формируют движения по регистрам НДС, поэтому задвоение данных при соединении регистров с ними не возникает.
	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорАванса,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.Приоритет,
	|	СчетаФактурыДокументы.Ссылка КАК Ссылка,
	|	СчетаФактурыДокументы.НомерСтроки,
	|	СчетаФактурыДокументы.СводныйКорректировочный,
	|	ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактура,
	|			ОтчетОРозничныхПродажах.Номер КАК НомерСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Дата КАК ДатаСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактураДокумент,
	|			ЛОЖЬ КАК НаАванс,
	|			ЛОЖЬ КАК НаСуммовуюРазницу,
	|			НЕОПРЕДЕЛЕНО КАК СтавкаНДСАванса,
	|			НЕОПРЕДЕЛЕНО КАК ДоговорАванса,
	|			1 КАК Приоритет,
	|			NULL КАК Ссылка,
	|			NULL КАК Контрагент,
	|			0 КАК НомерСтроки,
	|			ЛОЖЬ КАК СводныйКорректировочный
	|		ИЗ
	|			Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ГДЕ
	|			ОтчетОРозничныхПродажах.Проведен
	|			И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|			И ОтчетОРозничныхПродажах.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ПриходныйКассовыйОрдер.Номер,
	|			ПриходныйКассовыйОрдер.Дата,
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ЛОЖЬ,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			2,
	|			NULL,
	|			NULL,
	|			0,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ГДЕ
	|			ПриходныйКассовыйОрдер.Проведен
	|			И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
	|			И ПриходныйКассовыйОрдер.ВидОперации = &ПКО_РозничнаяВыручка
	|			И ПриходныйКассовыйОрдер.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|						ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НалоговыйАгент))
	|						И СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаРеализацию)
	|						И СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|					ТОГДА ВЫБОР
	|							КОГДА СчетФактураВыданный.Ссылка.Контрагент = СчетФактураВыданный.ДокументОснование.Контрагент
	|								ТОГДА СчетФактураВыданный.ДокументОснование
	|							ИНАЧЕ СчетФактураВыданный.Ссылка
	|						КОНЕЦ
	|				ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|			КОНЕЦ,
	|			СчетФактураВыданный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаСуммовуюРазницу)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаСуммовуюРазницу)
	|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА НЕ(СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаРеализацию)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаСуммовуюРазницу)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный))
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			3,
	|			СчетФактураВыданный.Ссылка,
	|			СчетФактураВыданный.Ссылка.Контрагент,
	|			СчетФактураВыданный.НомерСтроки,
	|			СчетФактураВыданный.Ссылка.СводныйКорректировочный
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	//|			СчетФактураВыданный.Ссылка.Проведен И 
	|			НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|						И СчетФактураПолученный.Ссылка.Исправление
	|					ТОГДА СчетФактураПолученный.Ссылка
	|				ИНАЧЕ СчетФактураПолученный.ДокументОснование
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.Ссылка.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.Ссылка.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|			КОНЕЦ,
	|			СчетФактураПолученный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ЛОЖЬ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			5,
	|			СчетФактураПолученный.Ссылка,
	|			СчетФактураПолученный.Ссылка.Контрагент,
	|			СчетФактураПолученный.НомерСтроки,
	|			СчетФактураПолученный.Ссылка.СводныйКорректировочный
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	//|			СчетФактураПолученный.Ссылка.Проведен И 
	|			НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|			И СчетФактураПолученный.Ссылка.Организация В(&Организация)
	|			И НЕ СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.ОтчетКомитентуОПродажах
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			6,
	|			NULL,
	|			ГТДИмпорт.Контрагент,
	|			0,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И НЕ ГТДИмпорт.ПометкаУдаления
	|			И ГТДИмпорт.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
    |		ВЫБРАТЬ
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера,
	|			ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера,
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ЛОЖЬ,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			7,
	|			NULL,
	|			ВозвратТоваровОтПокупателя.Контрагент,
	|			0,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ГДЕ
	|			ВозвратТоваровОтПокупателя.Проведен
	|			И НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления
	|			И ВозвратТоваровОтПокупателя.Организация В(&Организация)
	|			И ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера <> """"
	|			И ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера <> ДАТАВРЕМЯ(1, 1, 1)) КАК СчетаФактурыДокументы
	|		ПО ЗаписиКнигиПродаж.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = ЕСТЬNULL(СчетаФактурыДокументы.Контрагент, ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировки,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПродавецДляПечати,	
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ИНН
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ИННПродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.КППКонтрагента
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КПППродавцаДляПечати,
	|	ЖурналУчетаСчетовФактур.ИндексСтроки,
	|	ЖурналУчетаСчетовФактур.НомерСтроки,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Валюта <> &ВалютаРегУчета
	|			ТОГДА ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Валюта <> &ВалютаРегУчета
	|			ТОГДА ЖурналУчетаСчетовФактур.Валюта.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактур.Посредник.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ЖурналУчетаСчетовФактур.Посредник.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактур.Посредник.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Посредник,
	|	ЖурналУчетаСчетовФактур.Посредник.ИНН КАК ПосредникИНН,
	|	ЖурналУчетаСчетовФактур.Посредник.КПП КАК ПосредникКПП,
	|	ЖурналУчетаСчетовФактур.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_РегистрацияСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаСчетаФактурыДокументы.Ссылка
	|			ИЗ
	|				ВТ_ТаблицаСчетаФактурыДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.НомерСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактурыСортировка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправления, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправления
	|		ИНАЧЕ ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры)
	|	КОНЕЦ КАК ДатаСчетаФактурыСортировка,	
	|	ВТ_ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.Приоритет КАК Приоритет,
	|	ВТ_РегистрацияСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировки,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РегистрацияСчетовФактур.СчетФактура ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ВТ_РегистрацияСчетовФактур.ПродавецДляПечати,	
	|	ВТ_РегистрацияСчетовФактур.ИННПродавцаДляПечати КАК ИННПродавцаДляПечати,
	|	ВТ_РегистрацияСчетовФактур.КПППродавцаДляПечати КАК КПППродавцаДляПечати,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ВТ_ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре,
	|	ВТ_РегистрацияСчетовФактур.КодВидаОперации,
	|	ВТ_РегистрацияСчетовФактур.ВалютаКод,
	|	ВТ_РегистрацияСчетовФактур.ВсегоПродажВВалюте,
	|	ВТ_РегистрацияСчетовФактур.Посредник,
	|	ВТ_РегистрацияСчетовФактур.ПосредникИНН,
	|	ВТ_РегистрацияСчетовФактур.ПосредникКПП,
	|	ВТ_РегистрацияСчетовФактур.Валюта,
	|	ВТ_РегистрацияСчетовФактур.ВалютаНаименование
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ВТ_ТаблицаСчетаФактурыДокументы КАК ВТ_ТаблицаСчетаФактурыДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацияСчетовФактур КАК ВТ_РегистрацияСчетовФактур
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ВТ_РегистрацияСчетовФактур.СчетФактура
	|			И ВТ_ТаблицаСчетаФактурыДокументы.НомерСтроки = ВТ_РегистрацияСчетовФактур.НомерСтроки";
	
	Запрос.Выполнить();
			
КонецПроцедуры

Функция ПолучитьЗаписиКнигиПродаж(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);

	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	НДСЗаписиКнигиПродаж.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	НДСЗаписиКнигиПродаж.СчетФактура.Дата,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НЕ НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И (НДСЗаписиКнигиПродаж.СтавкаНДС <> &СтавкаБезНДС
	|			ИЛИ &ОтражатьРеализацииБезНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.СчетФактура.Дата,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты";
		
	Запрос.Выполнить();
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	//|ИЗ
	//|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	// }}Новый код:
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос);

	// Создаем общий запрос                                    
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.Период, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактураДата, ДЕНЬ) КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактурыСортировка,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка ЕСТЬ NULL 
	|					ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|							ТОГДА ВЫБОР
	|									КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|											ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|										ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|									ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|								КОНЕЦ
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|						ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|					КОНЕЦ
	|			КОНЕЦ, ДЕНЬ), НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактурыСортировка,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.ИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.ИНН
	|	КОНЕЦ КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.КПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.КПП
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|			ТОГДА ""Розничная продажа""
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|				И ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).Наименование, 1, 250)
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250)
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).Наименование
	|				ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,

	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПродаж.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ)
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""02"") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.Посредник,
	|	ТаблицаСчетаФактурыДокументы.ПосредникИНН,
	|	ТаблицаСчетаФактурыДокументы.ПосредникКПП
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса,
	|			ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК Приоритеты
	|		ПО ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаСчетаФактурыСортировка,
	|	НомерСчетаФактурыСортировка,
	|	Исправление
	|ИТОГИ
	|	МИНИМУМ(НомерСчетаФактурыСортировка),
	|	МИНИМУМ(ДатаСчетаФактурыСортировка),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(ВсегоПродаж)
	|		ИНАЧЕ СУММА(ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС20),
	|	СУММА(НДС20),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	ОБЩИЕ,
	|	НалоговыйПериод,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	Исправление";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	ОБЩИЕ,", "ПО
	               |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И
		СтруктураПараметров.ОтбиратьПоКонтрагенту И
		СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода"	, СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПродавцовПоАвансам", СтруктураПараметров.ВыводитьПродавцовПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета",		Константы.ВалютаРегламентированногоУчета.Получить());
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураПараметров.КонецПериода, Ложь, СтруктураПараметров.Организация,"регл");
	ПрименяетсяОсвобождениеОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ПравилаПостановления735", 
		ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериода) = 3);
	ОтражатьРеализацииБезНДС = СтруктураПараметров.КонецПериода < '20141001' ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ОтражатьРеализацииБезНДС", ОтражатьРеализацииБезНДС);	
	
	Если СтруктураПараметров.ЗаполнениеДокумента И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		// Параметры для заполнения документа "Дополнительный лист книги покупок
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	КонецЕсли;	
	
	СтавкиНДС20 = Новый Массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"	, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_СуммоваяРазница = Новый Массив;
	ВидыЦенностей_СуммоваяРазница.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммовыеРазницы"	, ВидыЦенностей_СуммоваяРазница);
	
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	
	ТипыДокументовИсправлений	= Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.Измерения.ИсправленныйСчетФактура.Тип;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ТипыДокументовИсправлений.СодержитТип(Тип("ДокументСсылка." + МетаданныеДокумента.Имя)) Тогда
			МассивДокументовИсправлений.Добавить(Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", МассивДокументовИсправлений);
	
	Запрос.УстановитьПараметр("ПКО_РозничнаяВыручка", Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка);

КонецПроцедуры

Функция ПолучитьИтогиЗаПериодКнигаПродаж(СтруктураПараметров) Экспорт
	
	// Создаем общий запрос                                       
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.ВсегоПродаж), 0) КАК ВсегоПродаж,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС20), 0) КАК СуммаБезНДС20,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС20), 0) КАК НДС20,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ВсегоПродаж,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС20,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС20,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|			    И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)) КАК НДСЗаписиКнигиПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&МоментФормированияДопЛиста,
	|			Период,
	|			Организация В (&Организация)
	|			    И (ЗаписьДополнительногоЛиста = ИСТИНА
	|			        И КорректируемыйПериод >= &НачалоПериода
	|			        И КорректируемыйПериод <= &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК ЗаписиКнигиПродаж";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста),ВидГраницы.Исключая));
	
	СтавкиНДС20 = новый массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"		, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);
	
	ВидыЦенностей_Аванс = новый массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	// Для итогов авансы можно учитывать вместе с выделенными суммовыми разницами - методика отражения в книге одинаковая
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПродаж", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

// Журнал учета счетов-фактур

Функция ПолучитьЗаписиЖурналаСчетовФактур(СтруктураПараметров) Экспорт
	
	Перем СформироватьОтчетПоСтандартнойФорме;
	Перем ГруппироватьПоКонтрагентам;
	Перем ОтбиратьПоКонтрагенту;
	Перем КонтрагентДляОтбора;
	Перем МассивКонтрагентовДляОтбора;
	
	Если НЕ СтруктураПараметров.Свойство("СформироватьОтчетПоСтандартнойФорме", СформироватьОтчетПоСтандартнойФорме) Тогда
		СформироватьОтчетПоСтандартнойФорме	= Истина;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ГруппироватьПоКонтрагентам", ГруппироватьПоКонтрагентам) Тогда
		ГруппироватьПоКонтрагентам	= Ложь;
	КонецЕсли;
	ГруппироватьПоКонтрагентам = НЕ СформироватьОтчетПоСтандартнойФорме И ГруппироватьПоКонтрагентам;
	
	Если НЕ СтруктураПараметров.Свойство("ОтбиратьПоКонтрагенту", ОтбиратьПоКонтрагенту) Тогда
		ОтбиратьПоКонтрагенту	= Ложь;
	КонецЕсли;
	ОтбиратьПоКонтрагенту = НЕ СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту 
		И СтруктураПараметров.Свойство("КонтрагентДляОтбора", КонтрагентДляОтбора);

	// сформируем отбор по контрагенту с учетом его обособленных подразделений
	Если ОтбиратьПоКонтрагенту Тогда
		
		// Массив контрагентов и их обособленных подразделений
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", КонтрагентДляОтбора);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = Контрагенты.ГоловнойКонтрагент
		|	И Контрагенты.Ссылка В ИЕРАРХИИ(&Контрагент)
		|	И НЕ Контрагенты.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОбособленноеПодразделение
		|	И Контрагенты.ГоловнойКонтрагент В ИЕРАРХИИ(&Контрагент)
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Результат	= Запрос.Выполнить();
		МассивКонтрагентовДляОтбора	= Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",		СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Квартал",			НачалоКвартала(СтруктураПараметров.Период));
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентовДляОтбора); 
	Запрос.УстановитьПараметр("ПравилаПостановления735", 
			ВерсияПостановленияНДС1137(СтруктураПараметров.Период) = 3);		
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.НаименованиеПолное КАК Комитент,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры КАК НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры КАК ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.ИНН КАК КомитентИНН,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.КПП КАК КомитентКПП,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|ПОМЕСТИТЬ ВТ_СчетаФактурыОтКомитента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			,
	|			ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|				И СчетФактураВыданныйПокупателю <> ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	| ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаОперации,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Валюта,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Валюта.НаименованиеПолное КАК НаименованиеВалюты,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Валюта.Код КАК КодВалюты,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуре, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК СуммаПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДС, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение
	|	КОНЕЦ КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение
	|	КОНЕЦ КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение
	|	КОНЕЦ КАК СуммаНДСРазницаУменьшение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение
	|	КОНЕЦ КАК СуммаНДСРазницаУвеличение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ПоСтавкеБезНДС, ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС
	|	КОНЕЦ КАК ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураНеВыставляется,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА """"
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.КППКонтрагента
	|	КОНЕЦ КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаСделки,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.ИНН,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.КПП,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.Комитент, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.НаименованиеПолное
	|	КОНЕЦ КАК Комитент,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентИНН, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.ИНН
	|	КОНЕЦ КАК КомитентИНН,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентКПП, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.КПП
	|	КОНЕЦ КАК КомитентКПП,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.НомерСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|	КОНЕЦ КАК НомерСчетаФактурыКомитента,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ДатаСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуреИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС КАК СуммаНДСИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличениеИтоговая
	|ПОМЕСТИТЬ ВТ_ЖурналУчетаСчетовФактурСрезПоследних
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			&Квартал,
	|			Период = &Квартал
	|				И Организация = &Организация) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
	|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
	|ГДЕ
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ЖурналУчетаСчетовФактур.Организация,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент.ОбособленноеПодразделение
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) ПОДОБНО """"
	|						ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.НаименованиеПолное, 1, 250) ПОДОБНО """"
	|					ТОГДА ЖурналУчетаСчетовФактур.Контрагент.Наименование
	|				ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК КонтрагентНаименование,
	|	ЖурналУчетаСчетовФактур.Контрагент.ИНН КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КППКонтрагента ПОДОБНО """"
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.КПП
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.КППКонтрагента
	|	КОНЕЦ КАК КонтрагентКПП,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта,
	|	ЖурналУчетаСчетовФактур.НаименованиеВалюты,
	|	ЖурналУчетаСчетовФактур.КодВалюты,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.Субкомиссионер,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.СубкомиссионерИНН,
	|	ЖурналУчетаСчетовФактур.СубкомиссионерКПП,
	|	ЖурналУчетаСчетовФактур.Комитент,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактур.СуммаНДС,
	|	ЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая
	|ПОМЕСТИТЬ ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Контрагент В(&МассивКонтрагентов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЖурналУчетаСчетовФактур.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ЖурналУчетаСчетовФактур.Организация КАК Организация,
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактураДокумент,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения КАК ДатаПередачиПолучения,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.КонтрагентИНН КАК КонтрагентИНН,
	|	ЖурналУчетаСчетовФактур.КонтрагентКПП КАК КонтрагентКПП,
	|	ЖурналУчетаСчетовФактур.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ЖурналУчетаСчетовФактур.НаименованиеВалюты КАК НаименованиеВалюты,
	|	ЖурналУчетаСчетовФактур.КодВалюты КАК КодВалюты,


	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации КАК КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаДокументаРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаДокументаРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС КАК СчетФактураБезНДС,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения КАК КодСпособаВыставления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.Корректировочный)
	|			ТОГДА ИСТИНА
	|		КОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураПолученный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).Номер КАК СчетФактураВыданныйНомер,
	|	ЖурналУчетаСчетовФактур.Субкомиссионер,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.СубкомиссионерИНН,
	|	ЖурналУчетаСчетовФактур.СубкомиссионерКПП,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре КАК СуммаДокумента,
	|	ЖурналУчетаСчетовФактур.Комитент,
	|	ЖурналУчетаСчетовФактур.СуммаНДС,
	|	ЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая
	|ПОМЕСТИТЬ ЗаписиРегистраЖурналУчетаСчетовФактур
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам КАК ЖурналУчетаСчетовФактур
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЧастьЖурнала"; 
	
	Если НЕ ОтбиратьПоКонтрагенту Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЖурналУчетаСчетовФактур.Контрагент В(&МассивКонтрагентов)", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	// Выданные счета-фактуры сортируем по дате передачи и далее по номеру с учетом префиксов,
	// чтобы обеспечить правильную сортировку для номеров разной значности.
	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Организация,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураДокумент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Контрагент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НаименованиеВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокумента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураБезНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодСпособаВыставления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СубкомиссионерИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СубкомиссионерКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Комитент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая,
	|   ВЫБОР 
	|		КОГДА НЕ &ПравилаПостановления735 И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура 
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправления
	|   КОНЕЦ КАК НомерИсправления,
	|   ВЫБОР 
	|		КОГДА НЕ &ПравилаПостановления735 И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура 
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправления
	|   КОНЕЦ КАК ДатаИсправления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЕСТЬNULL(СчетФактураВыданныйНомер, ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры) КАК НомерСчетаФактурыДляСортировки
	|ИЗ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	НомерСчетаФактурыДляСортировки
	|ИТОГИ
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаДокументаРазницаУменьшение),
	|	СУММА(СуммаДокументаРазницаУвеличение),
	|	СУММА(СуммаНДСРазницаУменьшение),
	|	СУММА(СуммаНДСРазницаУвеличение),
	|	МАКСИМУМ(СуммаПоСчетуФактуреИтоговая),
	|	МАКСИМУМ(СуммаНДСИтоговая),
	|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУменьшениеИтоговая),
	|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУвеличениеИтоговая),
	|	МАКСИМУМ(СуммаНДСРазницаУменьшениеИтоговая),
	|	МАКСИМУМ(СуммаНДСРазницаУвеличениеИтоговая),
	|	МАКСИМУМ(КонтрагентНаименование)
	|ПО
	|	СчетФактураДокумент";
	
	Если ГруппироватьПоКонтрагентам Тогда
		
		ЗаменяемыйСтандартныйТекст = "ПО
		|	СчетФактураДокумент";
		
		НовыйТекст = "ПО
		|	Контрагент,
		|	СчетФактураДокумент";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйСтандартныйТекст, НовыйТекст);
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
			|КонтрагентНаименование, ");

	КонецЕсли;	
			
	ВыставленныеСчетаФактуры = Запрос.Выполнить();
	
	// Полученные счета-фактуры сортируем по дате получения, наименованию контрагента,
	// номер счета-фактуры контрагента
	                                  
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Организация,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураДокумент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения КАК ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НаименованиеВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокумента КАК СуммаДокумента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураБезНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодСпособаВыставления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|   ВЫБОР 
	|		КОГДА НЕ &ПравилаПостановления735 И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура 
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправления
	|   КОНЕЦ КАК НомерИсправления,
	|   ВЫБОР 
	|		КОГДА НЕ &ПравилаПостановления735 И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура 
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправления
	|   КОНЕЦ КАК ДатаИсправления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Субкомиссионер,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СубкомиссионерИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СубкомиссионерКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Комитент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая
	|ИЗ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПередачиПолучения,
	|	КонтрагентНаименование,
	|	НомерСчетаФактуры";
	
	Если ГруппироватьПоКонтрагентам Тогда
		Запрос.Текст = Запрос.Текст + "
			|ИТОГИ
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДС),
			|	МАКСИМУМ(СуммаПоСчетуФактуреИтоговая),
			|	МАКСИМУМ(СуммаНДСИтоговая),
			|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУменьшениеИтоговая),
			|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУвеличениеИтоговая),
			|	МАКСИМУМ(СуммаНДСРазницаУменьшениеИтоговая),
			|	МАКСИМУМ(СуммаНДСРазницаУвеличениеИтоговая),
			|	МАКСИМУМ(КонтрагентНаименование)
			|ПО
			|	Контрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
			|КонтрагентНаименование, ");
	КонецЕсли;
	
	ПолученныеСчетаФактуры = Запрос.Выполнить();

	Возврат Новый Структура("ВыставленныеСчетаФактуры, ПолученныеСчетаФактуры", ВыставленныеСчетаФактуры, ПолученныеСчетаФактуры);

КонецФункции

Функция ПолучитьКодПоСКНП(Период, Реорганизация = Ложь) Экспорт 
	
	Мес = Цел((Месяц(Период)-1)/3);
	
	Если Реорганизация Тогда
		Если Мес = 0 Тогда
			Возврат "51";
		ИначеЕсли Мес = 1 Тогда 
			Возврат "54";
		ИначеЕсли Мес = 2 Тогда 
			Возврат "55";
		ИначеЕсли Мес = 3 Тогда 
			Возврат "56";
		КонецЕсли;
	Иначе
		Если Мес = 0 Тогда
			Возврат "21";
		ИначеЕсли Мес = 1 Тогда 
			Возврат "22";
		ИначеЕсли Мес = 2 Тогда 
			Возврат "23";
		ИначеЕсли Мес = 3 Тогда 
			Возврат "24";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирование книг и журнала

Процедура СформироватьДокументыОтчетности(СтруктураПараметров, Отказ = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.НалоговыйПериод) Тогда 
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не указан период составления документов.");
		Возврат;
	КонецЕсли;
	
	СписокДокументов = ПолучитьСписокДокументовОтчетности(СтруктураПараметров);
		
	Для каждого СтрокаСписка Из СписокДокументов Цикл
		СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Отказ);
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Отказ)

	Если НЕ ЗначениеЗаполнено(СтрокаСписка.Документ) Тогда
		
		ДокументОбъект	= Документы[СтрокаСписка.Имя].СоздатьДокумент();
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ДокументОбъект.Организация		= СтруктураПараметров.Организация;
		ДокументОбъект.Дата				= СтрокаСписка.Дата;
		ДокументОбъект.НалоговыйПериод	= СтрокаСписка.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП 	= ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
		
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.Последним);
		
	Иначе
		ДокументОбъект	= СтрокаСписка.Документ.ПолучитьОбъект();
		ДокументОбъект.Дата				= СтрокаСписка.Дата;
		ДокументОбъект.НалоговыйПериод	= СтрокаСписка.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП 	= ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьДокумент();
	
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	
	Попытка
	
		Если НЕ ЭтоНовый
			И (СтрокаСписка.Тип = Тип("ДокументСсылка.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде")
				ИЛИ СтрокаСписка.Тип = Тип("ДокументСсылка.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"))
			И ДокументОбъект.ТабличнаяЧасть.Количество() = 0 Тогда
			
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Иначе
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
		КонецЕсли;
			
	Исключение
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке(?(ЭтоНовый, "Не создан документ ", "Не перезаполнен документ ") + ДокументОбъект.Метаданные().Синоним
			+ ": " + ОписаниеОшибки());
			
		Отказ = Истина;	
		
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьСписокДокументовОтчетности(СтруктураПараметров)
	
	Перем ФормироватьКнигуПокупок, ФормироватьКнигуПродаж;
	Перем ФормироватьЖурналУчетаСчетовФактур;
	Перем ФормироватьДопЛистыКнигиПокупок, ФормироватьДопЛистыКнигиПродаж;
	Перем СписокДокументов;
	
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПокупок", ФормироватьКнигуПокупок) Тогда
		ФормироватьКнигуПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПродаж", ФормироватьКнигуПродаж) Тогда
		ФормироватьКнигуПродаж = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьЖурналУчетаСчетовФактур", ФормироватьЖурналУчетаСчетовФактур) Тогда
		ФормироватьЖурналУчетаСчетовФактур = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПокупок", ФормироватьДопЛистыКнигиПокупок) Тогда
		ФормироватьДопЛистыКнигиПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПродаж", ФормироватьДопЛистыКнигиПродаж) Тогда
		ФормироватьДопЛистыКнигиПродаж = Ложь;
	КонецЕсли;
	
	СписокДокументов	= Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Имя",				ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	СписокДокументов.Колонки.Добавить("Тип",				Новый ОписаниеТипов("Тип"));
	СписокДокументов.Колонки.Добавить("Документ",			Документы.ТипВсеСсылки());
	СписокДокументов.Колонки.Добавить("Дата",				ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	СписокДокументов.Колонки.Добавить("Номер",				ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(30));
	СписокДокументов.Колонки.Добавить("НалоговыйПериод",	ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	СписокДокументов.Колонки.Добавить("СтатусЭД",			Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭД"));
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	
	НачалоПериода	= НачалоКвартала(СтруктураПараметров.НалоговыйПериод);
	КонецПериода	= КонецКвартала(СтруктураПараметров.НалоговыйПериод);
	
	НачалоПримененияПостановления1137 = '20120401';
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137",  НачалоПримененияПостановления1137);
	Запрос.УстановитьПараметр("ФормироватьКнигуПокупок",			ФормироватьКнигуПокупок);
	Запрос.УстановитьПараметр("ФормироватьКнигуПродаж",				ФормироватьКнигуПродаж);
	Запрос.УстановитьПараметр("ФормироватьЖурналУчетаСчетовФактур",	ФормироватьЖурналУчетаСчетовФактур);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПокупок",	ФормироватьДопЛистыКнигиПокупок);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПродаж",		ФормироватьДопЛистыКнигиПродаж);
	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПокупок.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупок
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.ПериодСоставления = &НачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПродаж.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродаж
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.ПериодСоставления = &НачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	""КнигаПокупокДляПередачиВЭлектронномВиде"" КАК Имя,
	|	ТИП(Документ.КнигаПокупокДляПередачиВЭлектронномВиде) КАК Тип,
	|	КнигаПокупок.Ссылка КАК Документ,
	|	КнигаПокупок.Дата КАК Дата,
	|	КнигаПокупок.НалоговыйПериод КАК НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован) КАК СтатусЭД
	|ИЗ
	|	Документ.КнигаПокупокДляПередачиВЭлектронномВиде КАК КнигаПокупок
	|ГДЕ
	|	&ФормироватьКнигуПокупок
	|	И КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПокупок.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КнигаПродажДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.КнигаПродажДляПередачиВЭлектронномВиде),
	|	КнигаПродаж.Ссылка,
	|	КнигаПродаж.Дата,
	|	КнигаПродаж.НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|ИЗ
	|	Документ.КнигаПродажДляПередачиВЭлектронномВиде КАК КнигаПродаж
	|ГДЕ
	|	&ФормироватьКнигуПродаж
	|	И КнигаПродаж.Организация = &Организация
	|	И КнигаПродаж.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПродаж.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде),
	|	ЖурналУчетаСчетовФактур.Ссылка,
	|	ЖурналУчетаСчетовФактур.Дата,
	|	ЖурналУчетаСчетовФактур.НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	&ФормироватьЖурналУчетаСчетовФактур
	|	И ЖурналУчетаСчетовФактур.Организация = &Организация
	|	И ЖурналУчетаСчетовФактур.НалоговыйПериод = &НачалоПериода
	|	И НЕ ЖурналУчетаСчетовФактур.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде),
	|	ВТ_ДополнительныеЛистыКнигиПокупок.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок.НалоговыйПериод
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупок КАК ВТ_НДСЗаписиКнигиПокупок
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупок КАК ВТ_ДополнительныеЛистыКнигиПокупок
	|		ПО ВТ_НДСЗаписиКнигиПокупок.День = ВТ_ДополнительныеЛистыКнигиПокупок.День
	|			И ВТ_НДСЗаписиКнигиПокупок.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупок.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ТИП(Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде),
	|	ВТ_ДополнительныеЛистыКнигиПродаж.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж.НалоговыйПериод
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродаж КАК ВТ_НДСЗаписиКнигиПродаж
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродаж КАК ВТ_ДополнительныеЛистыКнигиПродаж
	|		ПО ВТ_НДСЗаписиКнигиПродаж.День = ВТ_ДополнительныеЛистыКнигиПродаж.День
	|			И ВТ_НДСЗаписиКнигиПродаж.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродаж.НалоговыйПериод";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СписокДокументов = Результат.Выгрузить();
	КонецЕсли;
	
	СписокДокументов.Индексы.Добавить("Тип");
	
	Если ФормироватьКнигуПокупок
		И СписокДокументов.Найти(Тип("ДокументСсылка.КнигаПокупокДляПередачиВЭлектронномВиде"), "Тип") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(0);
		НоваяСтрока.Имя				= "КнигаПокупокДляПередачиВЭлектронномВиде";
		НоваяСтрока.Тип				= Тип("ДокументСсылка.КнигаПокупокДляПередачиВЭлектронномВиде");
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьКнигуПродаж
		И СписокДокументов.Найти(Тип("ДокументСсылка.КнигаПродажДляПередачиВЭлектронномВиде"), "Тип") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(1);
		НоваяСтрока.Имя				= "КнигаПродажДляПередачиВЭлектронномВиде";
		НоваяСтрока.Тип				= Тип("ДокументСсылка.КнигаПродажДляПередачиВЭлектронномВиде");
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьЖурналУчетаСчетовФактур
		И СписокДокументов.Найти(Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде"), "Тип") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(2);
		НоваяСтрока.Имя				= "ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде";
		НоваяСтрока.Тип				= Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде");
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Возврат	СписокДокументов;

КонецФункции

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ
//////////////////////////////////////////////////////////////////////////

Процедура СнятиеРезерваНДСПартииПоЗаказамПокупателя(ТаблицаПартий,СтруктураПараметров)
		
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		
		// Количество по строке больше 0
		Если СтрокаПартии.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Добавим новую строку
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		
		// Свойства
		Движение.Период 				= СтруктураПараметров.Период;
		Движение.Регистратор 			= СтруктураПараметров.Регистратор;
		Движение.Активность 			= Истина;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		ЗаполнитьЗначенияСвойств(Движение,СтрокаПартии);
		
		Строка = Движение;
		
		// Добавим новую строку
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение,Строка);
		Движение.Заказ  				= Неопределено;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС

// Доподняет структуру шапки документа параметрами ПартионныйУчетНДСвРазрезеСкладов и
// ПартионныйУчетНДСвРазрезеСерийИХарактеристик
//
Процедура ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, УчетнаяПолитика = Неопределено)
	
	Если УчетнаяПолитика = Неопределено Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСкладов") Тогда
		Если УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСкладов") Тогда
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСкладов", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов);
		Иначе
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСкладов", Ложь);
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик") Тогда
		Если УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик") Тогда
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик);
		Иначе
			СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик", Ложь);
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("БухгалтерскийУчетСпособОценкиМПЗ") Тогда
		Если УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("БухгалтерскийУчетСпособОценкиМПЗ") Тогда
			СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик);
		Иначе
			СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ", Перечисления.СпособыОценки.ПоСредней);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры, Организация = Неопределено)
	
	Отказ = Ложь;
	
	СтруктураШапкиДокумента = ПолучитьСтруктуруШапкиДокументаПоСсылке(СтруктураПараметров.Регистратор);
		
	Если Не СтруктураШапкиДокумента.УчитыватьНДС тогда
		Возврат;
	КонецЕсли;
	
	Если Организация <> Неопределено тогда
		СтруктураШапкиДокумента.Вставить("Организация",Организация);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСтрокДокументов(СтруктураШапкиДокумента.Ссылка);
		УправлениеЗапасамиПартионныйУчет.ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Ложь, Истина, Истина);
		
	ИначеЕсли ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.ПриходныйОрдерНаТовары") тогда
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСписанияРасходнымОрдером(ТаблицаСписания[0], СтруктураПараметров);
		
		Если ТаблицаСписания = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС,НачислятьНДСПоОтгрузке");
	ttk_ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Если не указаны параметры учетной политики - движения по НДС не выполняем
	Если Отказ тогда
		Возврат;
	КонецЕсли;
		
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если НЕ СтруктураШапкиДокумента.СложныйУчетНДС тогда 
		СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров",Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
	КонецЕсли;
	
	ЭтоВозврат = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" 
				   или СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ";
				   
	ЭтоВозвратОтПокупателя = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя";
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	  И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураПараметров.Период) Тогда
		ТаблицаПартий = ПолучитьТаблицуПартийПоДокументу(СтруктураПараметров, ТаблицаСписания);
	Иначе
		ТаблицаПартий = ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров);
	КонецЕсли;	
	
	Если ТаблицаПартий.Количество()= 0 тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ttk_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	// Если вызов из партионного учета и проводиться не Закрытие заказов покупателя
	Если СтруктураПараметров.Свойство("ТаблицаСписанныхПартий") И Организация = Неопределено Тогда
		
		Если ЭтоВозврат тогда
			ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
			//При списании по ордеру таблица списанных партий не наследует суммовые реквизиты реализаци, необходимые для начисления НДС
			//В начале текущей процедуры недостающие данные были загружены в ТаблицаСписания
			РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);
		Иначе
			РаспределеннаяТаблицаСписания = ПреобразоватьТаблицуСписанныхПартийДляНДС(СтруктураПараметров);
		КонецЕсли;
		
		Если ЭтоВозвратОтПокупателя тогда
		    УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, РаспределеннаяТаблицаСписания, Отказ, Заголовок);
			Возврат;
		КонецЕсли;	
	Иначе	
	
		// Особые случаи списания партий НДС
		Если ЭтоВозврат тогда
		
			ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок);
			Возврат;
		ИначеЕсли ЭтоВозвратОтПокупателя тогда
			
			ЗапросРасходныхОрдеров = Новый Запрос;
			// {{KM WARE Акулов А.И. 14.07.2015 начало
			// не достаточно прав
			// {{Старый код:
			//ЗапросРасходныхОрдеров.Текст = 
			//"ВЫБРАТЬ Подзапрос.Регистратор 		КАК Регистратор,
			//|Подзапрос.РасходныйОрдерНаТовары 	КАК РасходныйОрдерНаТовары
			//|ИЗ(
			//|	ВЫБРАТЬ 
			//|   	ПартииТоваровНаСкладах.ДокументДвижения КАК Регистратор,
			//|		ВЫБОР
			//|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
			//|				ТОГДА ПартииТоваровНаСкладах.Регистратор
			//|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			//|		КОНЕЦ КАК РасходныйОрдерНаТовары
			//|   ИЗ
			//|     РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
			//|   ГДЕ 
			//|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
			//|	И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
			//|   И ПартииТоваровНаСкладах.ДокументДвижения В (&МассивРегистраторов)
			//|   И ПартииТоваровНаСкладах.Период < &Период
			//|	ОБЪЕДИНИТЬ ВСЕ
			//|	ВЫБРАТЬ
			//|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
			//|		ВЫБОР
			//|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
			//|				ТОГДА ПартииТоваровНаСкладах.Регистратор
			//|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			//|		КОНЕЦ КАК РасходныйОрдерНаТовары
			//|   ИЗ
			//|     РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
			//|   ГДЕ 
			//|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
			//|	И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
			//|   И ПартииТоваровНаСкладах.Регистратор В (&МассивРегистраторов)
			//|   И ПартииТоваровНаСкладах.Период < &Период
			//|) КАК Подзапрос
			//|СГРУППИРОВАТЬ ПО
			//|Подзапрос.Регистратор,
			//|Подзапрос.РасходныйОрдерНаТовары
			//|ИТОГИ ПО Регистратор";
			// }}Новый код:
			ЗапросРасходныхОрдеров.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ Подзапрос.Регистратор 		КАК Регистратор,
			|Подзапрос.РасходныйОрдерНаТовары 	КАК РасходныйОрдерНаТовары
			|ИЗ(
			|	ВЫБРАТЬ 
			|   	ПартииТоваровНаСкладах.ДокументДвижения КАК Регистратор,
			|		ВЫБОР
			|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
			|				ТОГДА ПартииТоваровНаСкладах.Регистратор
			|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			|		КОНЕЦ КАК РасходныйОрдерНаТовары
			|   ИЗ
			|     РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
			|   ГДЕ 
			|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
			|	И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
            |   И ПартииТоваровНаСкладах.ДокументДвижения В (&МассивРегистраторов)
			|   И ПартииТоваровНаСкладах.Период < &Период
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
			|		ВЫБОР
			|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
			|				ТОГДА ПартииТоваровНаСкладах.Регистратор
			|			ИНАЧЕ НЕОПРЕДЕЛЕНО
			|		КОНЕЦ КАК РасходныйОрдерНаТовары
            |   ИЗ
			|     РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
			|   ГДЕ 
			|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
			|	И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
            |   И ПартииТоваровНаСкладах.Регистратор В (&МассивРегистраторов)
			|   И ПартииТоваровНаСкладах.Период < &Период
			|) КАК Подзапрос
			|СГРУППИРОВАТЬ ПО
			|Подзапрос.Регистратор,
			|Подзапрос.РасходныйОрдерНаТовары
			|ИТОГИ ПО Регистратор";
			// }}KM WARE Акулов А.И. 14.07.2015 окончание
			МассивРеализация = Новый Массив;
			КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
			МассивРеализация.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
			МассивРеализация.Добавить(КодыОпераций.Реализация);
			МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
			МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
			
			ЗапросРасходныхОрдеров.УстановитьПараметр("КодыСписание",МассивРеализация);
			
			МассивРегистраторов = ТаблицаСписания.ВыгрузитьКолонку("ДокументПередачи");
			ЗапросРасходныхОрдеров.УстановитьПараметр("МассивРегистраторов",МассивРегистраторов);
			// Возврат не может быть раньше реализации
			ЗапросРасходныхОрдеров.УстановитьПараметр("Период",СтруктураПараметров.Период);
			ЗапросРасходныхОрдеров.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
			
			ДеревоРасходныхОрдеров = ЗапросРасходныхОрдеров.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураПараметров.Вставить("ДеревоРасходныхОрдеров",ДеревоРасходныхОрдеров);
			
			РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);
			УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, РаспределеннаяТаблицаСписания, Отказ, Заголовок);
			Возврат;
		// Закрытие заказов покупателя
		ИначеЕсли Организация <> Неопределено тогда
			МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.СчетУчета);
			ТаблицаПартий.Колонки.Добавить("СчетУчетаБУ");
			ТаблицаПартий.ЗагрузитьКолонку(МассивСчетов,ТаблицаПартий.Колонки.СчетУчетаБУ);
			
			ТаблицаПартий.Колонки.Добавить("Партия");
			МассивПартий = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.ДокументОприходования);
			ТаблицаПартий.ЗагрузитьКолонку(МассивПартий,ТаблицаПартий.Колонки.Партия);
			
			ТаблицаПартий.Колонки.Добавить("ЗаказПартии");
			МассивЗаказов = ТаблицаПартий.ВыгрузитьКолонку(ТаблицаПартий.Колонки.Заказ);
			ТаблицаПартий.ЗагрузитьКолонку(МассивЗаказов,ТаблицаПартий.Колонки.ЗаказПартии);
			
			ТаблицаПартий.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
			Для Каждого ТекСтрокаПартии Из ТаблицаПартий Цикл
				Если (ЗначениеЗаполнено(ТекСтрокаПартии.ЗаказПартии)) И (ТипЗНЧ(ТекСтрокаПартии.ЗаказПартии) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда 
					ТекСтрокаПартии.ОбособленныйУчетТоваровПоЗаказамПокупателей = ТекСтрокаПартии.ЗаказПартии.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
				КонецЕсли;
			КонецЦикла;	
			
			ТаблицаПартий.Колонки.КодОперации.Имя = "КодОперацииПартииТоваров";
			ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПартий,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя,СтруктураПараметров);
			СнятиеРезерваНДСПартииПоЗаказамПокупателя(ТаблицаНДСПартииСписания, СтруктураПараметров);
			Возврат;
		КонецЕсли;
		РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);
	КонецЕсли; 
	
	Для каждого СтрокаРаспределеннойТаблицы из РаспределеннаяТаблицаСписания Цикл
		ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И (СтрокаРаспределеннойТаблицы.Комиссионный 
							   И СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС);
		Если ОтражатьНДСКомитента Тогда 
			СтрокаРаспределеннойТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьДвиженияНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров);
	
	ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ);
	
	СчетаУчетаОС = ОпределитьСчетаУчетаОСиНМА("ОС");
	УчетНДСПоОСиНМА = Ложь;
	Для Каждого СчетУчетаОС Из СчетаУчетаОС Цикл
		Если РаспределеннаяТаблицаСписания.Найти(СчетУчетаОС.Значение, "СчетУчетаБУ") <> Неопределено Тогда
			УчетНДСПоОСиНМА = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС
		Или УчетНДСПоОСиНМА Тогда
		
		// Получим таблицу НДС партий
		ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя, СтруктураПараметров);
		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
			Возврат;
		КонецЕсли;
		
		ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
		
		МассивОрганизаций = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Организация");
		
		МассивОрганизаций = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций,Истина,Истина);
		
		МассивПартий = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Партия");
		МассивПартий = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);
		
		СтруктураПараметров.Вставить("НоменклатурныеГруппыДляРеализацииБезНДСиНДС0", ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0(СтруктураПараметров.Период, МассивОрганизаций, СтруктураПараметров));
		
		ВыполнитьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);
		
		ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
		
		ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);

		ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваровКомплектацияВыпуск(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);
		
		ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, СтруктураПараметров, Отказ);
		
		ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);

		ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
		
		ВыполнитьДвиженияПоРегистрамНДССписаниеРасходовпоВНА(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);
		
	КонецЕсли;
		
КонецПроцедуры//СформироватьДвиженияПоНДС

// Процедура - вход для движений по НДС
// Параметры 
// СтруктураПараметров - структура, хранящая основные параметры модуля УправлениеЗапасамиПартионныйУчет 
// ТаблицаСписания - 	 таблица значений содержащая информацию о том что и в каком количестве нужно списывать,
// 						 обычно получается из регистра "СписанныеТовары"
Процедура ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания) Экспорт
	
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	
	МассивНоменклатуры = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	Если ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") тогда
		МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку(ТаблицаСписания.Колонки.Организация);
		МассивОрганизаций = ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций,Истина,Истина);
		Для каждого Организация из МассивОрганизаций цикл
			СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры, Организация);
		КонецЦикла;
	Иначе
		СформироватьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры//ВыполнитьДвиженияПоНДС

Процедура ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, ИмяНабораДвижений, ИмяТаблицыПриемника)
	Перем НаборДвижений;
	
	Если НЕ СтруктураПараметров.Свойство(ИмяНабораДвижений, НаборДвижений) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений.Прочитать();
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаДвижений Цикл
		Если СтрокаТаблицыИсточника.СписаниеПартий Тогда
			СтрокаТаблицыПриемника = СтруктураПараметров[ИмяТаблицыПриемника].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВТаблицуЗначенийСписанныеПартии()

// Добавляет в таблицу списанных товаров, данные по комиссии
//
// Параметры:
//  ОтчетКомиссионера       - документ-ссылка Отчет комиссионера о продажах.
//  ТаблицаСписанныхТоваров - выходная таблица значений, куда добавляются строки.
//
Процедура ДополнитьСписанныеТоварыДаннымиПоКомиссии(ОтчетКомиссионера, ТаблицаСписанныхТоваров) Экспорт
	
	Если ТипЗнч(ОтчетКомиссионера) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗнч(ТаблицаСписанныхТоваров) <> Тип("ТаблицаЗначений")
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("ВыставленСФ") <> Неопределено
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСписанныеТовары = "";
	Для каждого Колонка Из ТаблицаСписанныхТоваров.Колонки Цикл
		Если Колонка.Имя = "МоментВремени" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСписанныеТовары = ТекстСписанныеТовары + ",
		|	СписанныеТовары." + Колонка.Имя + " КАК " + Колонка.Имя;
	КонецЦикла;
	
	ТаблицаСписанныхТоваров.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("Покупатель",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("ДатаСФ",      Новый ОписаниеТипов("Дата"));
	ТаблицаСписанныхТоваров.Колонки.Добавить("ВыставленСФ", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ" + Сред(ТекстСписанныеТовары, 2) + "
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Сред(ТекстСписанныеТовары, 2) + "
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	&ТаблицаСписанныхТоваров КАК СписанныеТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки" + ТекстСписанныеТовары + "
	|ПОМЕСТИТЬ ВТ_КлючСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписанныеТовары КАК СписанныеТовары
	|		ПО ОтчетКомиссионераОПродажахТовары.НомерСтроки = СписанныеТовары.НомерСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК ДатаСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.ВыставленСФ КАК ВыставленСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура" + СтрЗаменить(ТекстСписанныеТовары, "СписанныеТовары.", "ВТ_КлючСтроки.") + "
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючСтроки КАК ВТ_КлючСтроки
	|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_КлючСтроки.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",                  ОтчетКомиссионера);
	Запрос.УстановитьПараметр("ТаблицаСписанныхТоваров", ТаблицаСписанныхТоваров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСписанныхТоваров.Очистить();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаСписанныхТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по переданным ТМЦ на объект строительства или НМА - движения по регистру НДСпоОСиНМА для
	// последующего учета НДС.
	// НДС по переданным ТМЦ на объект строительства
	
	ДанныеДляОбработки = ТаблицаНДСПартииСписания.СкопироватьКолонки();
	
	ИспользоватьРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Для Каждого Строка из ТаблицаНДСПартииСписания Цикл
		
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.КорСчетБУ, Строка.СтатьяЗатрат);
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы 
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
		   Или ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
		   Или (ИспользоватьРА И ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы)
		   Тогда
		   
				НоваяСтрока = ДанныеДляОбработки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;

	КонецЦикла;
	
	СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);

КонецПроцедуры

// НДС по партиям - отразить поступление на склад-получатель
//
Процедура ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = "ВозвратОтКомиссионера, ВозвратОтПереработчика, ВозвратОтПокупателя, ВыпускПоОперацииСтоимость, ВыпускПродукцииФиксНаСклад,
			 |Комплектация, КорректировкаСерийИХарактеристик, ПередачаВПереработку, ПередачаНаКомиссию, ПеремещениеМеждуСкладами,
			 |РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ, ВключениеАктиваВСоставМПЗ";
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	ВыполнятьПоступление = Ложь;

	Если СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг" тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			И СтруктураШапкиДокумента.СложныйУчетНДС
			Тогда
			ВыполнятьПоступление = Истина;
		КонецЕсли;
	Иначе
		ВыполнятьПоступление = Истина;
	КонецЕсли;
	
	Если ВыполнятьПоступление тогда
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.СкопироватьКолонки();
		
		КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
		
		Если ДанныеДляОбработки.Колонки.Найти("ЗаказСписания") <> Неопределено Тогда
			ДанныеДляОбработки.Колонки.ЗаказСписания.Имя = "ЗаказПокупателя";
		КонецЕсли;
		
		ЕстьХарактеристикаНоменклатурыНовая = ДанныеДляОбработки.Колонки.Найти("ХарактеристикаНоменклатурыНовая") <> Неопределено;
		ЕстьСерияНоменклатурыНовая = ДанныеДляОбработки.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;
		ЕстьНоменклатураНовая = ДанныеДляОбработки.Колонки.Найти("НоменклатураНовая") <> Неопределено;
		ЕстьДокументОприходованияНовый = ДанныеДляОбработки.Колонки.Найти("ДокументОприходованияНовый") <> Неопределено;
		ЕстьЗаказПокупателя = ДанныеДляОбработки.Колонки.Найти("ЗаказПокупателя") <> Неопределено;
		
		Для Каждого СтрокаТаблицы ИЗ ДанныеДляОбработки Цикл
			// Для того, чтобы правильно отразить поступление партий НДС нужно изменить таблицу ТаблицаНДСПартииСписания
			Если ЗначениеЗаполнено(СтрокаТаблицы.СкладПолучатель) тогда
				СтрокаТаблицы.Склад = СтрокаТаблицы.СкладПолучатель;
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатурыНовая) 
				Или СтрокаТаблицы.ИзменитьХарактеристику) тогда
				СтрокаТаблицы.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьСерияНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицы.СерияНоменклатурыНовая) 
				или СтрокаТаблицы.ИзменитьСерию) тогда
				СтрокаТаблицы.СерияНоменклатуры = СтрокаТаблицы.СерияНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьНоменклатураНовая И ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураНовая) тогда
				СтрокаТаблицы.Номенклатура = СтрокаТаблицы.НоменклатураНовая;
			КонецЕсли;
			Если ЕстьДокументОприходованияНовый И ЗначениеЗаполнено(СтрокаТаблицы.ДокументОприходованияНовый) Тогда
				СтрокаТаблицы.Партия = СтрокаТаблицы.ДокументОприходованияНовый;
			КонецЕсли; 
			
			// Утановка признака ОбособленныйУчетТоваровПоЗаказамПокупателей для движений поступления при резервировании товаров
			Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") 
				и (
				СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ] <> Неопределено 
				или СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров.Комплектация] <> Неопределено
				)
				Тогда
				СоответствиеЗаказов = Новый Соответствие();
				Если СтрокаТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
					или СтрокаТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Комплектация
					тогда
					Если Не ЕстьЗаказПокупателя Или Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
						//Это снятие резерва
						СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
					Иначе	
						ОбособленныйУчетТоваровПоЗаказамПокупателей = СоответствиеЗаказов[СтрокаТаблицы.ЗаказПокупателя];
					
						Если ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено Тогда
								
							СтруктураЗаказа = Новый Структура("ДоговорКонтрагента");
							УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаТаблицы.ЗаказПокупателя, СтруктураЗаказа);
								
							СтруктураДоговора = Новый Структура("ОбособленныйУчетТоваровПоЗаказамПокупателей");
							УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураЗаказа.ДоговорКонтрагента, СтруктураДоговора);
								
							СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей;
								
						Иначе
							СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		// Добавим колонки для обработки заказа покупателя.
		Если ТаблицаДвиженийПартии.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей")= Неопределено Тогда
			ТаблицаДвиженийПартии.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");
		КонецЕсли;
			
		Если ТаблицаДвиженийПартии.Колонки.Найти("ЗаказПокупателя")= Неопределено Тогда
			ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляОбработки, ТаблицаДвиженийПартии);
		
		ТаблицаДвиженийПартии.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
		Для К = 0 По ТаблицаДвиженийПартии.Количество() - 1 Цикл
			СтрокаТаблицы = ТаблицаДвиженийПартии[К];
			Если Не СтрокаТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ Тогда
				СтрокаТаблицы.СчетУчета = ДанныеДляОбработки[К].КорСчетСписанияБУ;
			КонецЕсли;
			СтрокаТаблицы.Услуга = Ложь;
		КонецЦикла;
		ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС" тогда
			
			КолСтрок = ТаблицаДвиженийПартии.Количество();
			Для ОбратныйИндекс = 1 По КолСтрок Цикл 
				Строка = ТаблицаДвиженийПартии[КолСтрок - ОбратныйИндекс]; 
				Если Строка.Количество = 0 Тогда 
					ТаблицаДвиженийПартии.Удалить(Строка); 
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Регистратор,"Партия");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(0,"Стоимость");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(0,"НДС");
		КонецЕсли;
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);

		// Устанавливаем флаги модификации
		СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
									ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
	КонецЕсли;
	
КонецПроцедуры//ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров

Процедура ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ)
	
	СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";
	
	ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, РаспределеннаяТаблицаСписания);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ, СчетОтнесенияНДС(СтруктураШапкиДокумента));
 
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	
	СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";
	
	Если СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг" 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности  Тогда
		
		СтрокаКодовОпераций = СтрокаКодовОпераций + ", ПередачаНаКомиссию";
	КонецЕсли;
	
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	Если Не ДанныеДляОбработки = Неопределено тогда
		КолНДСПредъявленныйРеализация0 = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество();
		КолНДСХозрасчетный  = СтруктураПараметров.ДвиженияХозрасчетный.Количество();
		
		ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Заголовок);
		
		СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0  = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0 
						ИЛИ (КолНДСПредъявленныйРеализация0 <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество());
		
		СтруктураПараметров.ИзмененыДвиженияХозрасчетный = СтруктураПараметров.ИзмененыДвиженияХозрасчетный
								ИЛИ (КолНДСХозрасчетный <> СтруктураПараметров.ДвиженияХозрасчетный.Количество());
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет списание НДС и включение в стоимость - исключение НДС из стоимости
//
Процедура ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
	// Включение НДС в стоимость может происходить только для строк с перечисленными ниже кодами операций
	СтрокаКодовОпераций = "Комплектация, ПередачаНаКомиссию, ПеремещениеМеждуСкладами, Реализация, ВключениеАктиваВСоставМПЗ,
						  |РеализацияРозница, РеализацияКомиссия, СписаниеНаБрак, СписаниеНаВложенияВоВнеоборотныеАктивы,
						  |СписаниеНаЗатраты, СписаниеНаСтроительствоОбъектовОС, СписаниеПартийВПроизводствоОперативно,
						  |СписаниеПартийПереданныхВПроизводство, СписаниеПоИнвентаризации";

	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
	КолНДСВключенныйВСтоимость = СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество();
	КолНДСПредъявленный = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество();
	КолНДСХозрасчетный  = СтруктураПараметров.ДвиженияХозрасчетный.Количество();
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		КолНДСНалоговый  = СтруктураПараметров.ДвиженияНалоговый.Количество();
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() > 0 Тогда
			
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
			
		// очистим предыдущие движения 
		Если НЕ СтруктураПараметров.Свойство("ТолькоДвиженияНДС") Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ДвиженияРегистра = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
				ДвиженияРегистра.Очистить();
				ДвиженияРегистра.Отбор.Регистратор.Установить(СтруктураПараметров.Регистратор);
				ДвиженияРегистра.Прочитать();
				Инд=0;
				Пока Инд < ДвиженияРегистра.Количество() Цикл
					Если ДвиженияРегистра[Инд].СписаниеПартийНДС Тогда
						ДвиженияРегистра.Удалить(Инд);
					Иначе
						Инд=Инд+1;
					КонецЕсли;
				КонецЦикла;
				ДвиженияРегистра.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
			
		// Включение НДС в стоимость
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Истина, СтруктураПараметров, Заголовок);
		// Исключение НДС из стоимости
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Ложь, СтруктураПараметров, Заголовок);
			
		Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
		КонецЕсли;
			
	Иначе
		
		// партии у которых не произошло включение - исключение НДС из стоимости
		СтрокаКодовОпераций = "КорректировкаСерийИхарактеристик, РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ,
							  |ВозвратОтКомиссионера, ВозвратОтПереработчика,
							  |ВыпускПоОперацииСтоимость, ВыпускПродукцииФиксНаСклад, ПередачаВПереработку,
							  |ПередачаМатериаловВЭксплуатацию, ПередачаОборудованияВМонтаж, ПринятиеКУчетуОС, ПринятиеКУчетуОССоСписаниемНаЗатраты";

		ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
		
	КонецЕсли;
	
	ТаблицаНДСПартииСписания = ДанныеДляОбработки;
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);
	
	// НДС по партиям - отразить непосредственое списание.
	КолСтрокНДС = ТаблицаНДСПартииСписания.Количество();
	
	СтрокаПоступленияКомплектации = Неопределено;
	
	ЕстьХарактеристикаНоменклатурыНовая = ТаблицаНДСПартииСписания.Колонки.Найти("ХарактеристикаНоменклатурыНовая") <> Неопределено;
	ЕстьСерияНоменклатурыНовая 			= ТаблицаНДСПартииСписания.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;
	ЕстьНоменклатураНовая 				= ТаблицаНДСПартииСписания.Колонки.Найти("НоменклатураНовая") <> Неопределено;
	ЕстьДокументОприходованияНовый 		= ДанныеДляОбработки.Колонки.Найти("ДокументОприходованияНовый") <> Неопределено;
		
	Для ИндексТекСтроки = 0 По КолСтрокНДС-1 Цикл
		
		СтрокаТаблицыНДСПартииСписания = ТаблицаНДСПартииСписания[ИндексТекСтроки];
		
		// Для ускорения поиска добавим строку в соответствие
		Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") Тогда
			МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			Если МассивСтрокПоКоду = Неопределено Тогда
				СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров, Новый Массив);
				МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			КонецЕсли;
			МассивСтрокПоКоду.Добавить(СтрокаТаблицыНДСПартииСписания);
		КонецЕсли;
		
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицыНДСПартииСписания);
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		// Если это комплектация - поступление партий НДС выполняется особым способом
		Если СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров = КодыОпераций.Комплектация Тогда
			
			// Для того, чтобы правильно отразить поступление партий НДС нужно изменить таблицу ТаблицаНДСПартииСписания
			Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СкладПолучатель) Тогда
				СтрокаТаблицыНДСПартииСписания.Склад = СтрокаТаблицыНДСПартииСписания.СкладПолучатель;
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая) 
				ИЛИ СтрокаТаблицыНДСПартииСписания.ИзменитьХарактеристику) Тогда
				СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатуры = СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьСерияНоменклатурыНовая И (ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая) 
				ИЛИ СтрокаТаблицыНДСПартииСписания.ИзменитьСерию) Тогда
				СтрокаТаблицыНДСПартииСписания.СерияНоменклатуры = СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая;
			КонецЕсли;
			Если ЕстьНоменклатураНовая И ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.НоменклатураНовая) Тогда
				СтрокаТаблицыНДСПартииСписания.Номенклатура = СтрокаТаблицыНДСПартииСписания.НоменклатураНовая;
			КонецЕсли;
			Если ЕстьДокументОприходованияНовый И ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.ДокументОприходованияНовый) Тогда
				СтрокаТаблицыНДСПартииСписания.Партия = СтрокаТаблицыНДСПартииСписания.ДокументОприходованияНовый;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Разборка 
				И СтрокаТаблицыНДСПартииСписания.Количество <> 0 Тогда
					//Строка поступления для каждой комплектующей своя
			    	СтрокаПоступленияКомплектации = Неопределено;
			КонецЕсли; 
			
			Если СтрокаПоступленияКомплектации = Неопределено Тогда
				СтрокаПоступленияКомплектации = ТаблицаНДСПартииСписания.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоступленияКомплектации,СтрокаТаблицыНДСПартииСписания);
				СтрокаПоступленияКомплектации.НДС = 0;
				СтрокаПоступленияКомплектации.Стоимость = 0;
				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				 И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
				   	СтрокаПоступленияКомплектации.Количество = СтруктураШапкиДокумента.Количество;
				ИначеЕсли СтрокаТаблицыНДСПартииСписания.Количество <> 0 Тогда
					СтрокаПоступленияКомплектации.Количество = СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;
				КонецЕсли;
				СтрокаПоступленияКомплектации.СчетФактура = Неопределено;
				СтрокаПоступленияКомплектации.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
				СтрокаПоступленияКомплектации.СтавкаНДС   = Перечисления.СтавкиНДС.БезНДС;
				
				// Для ускорения поиска добавим строку в соответствие
				Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") Тогда
					МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаПоступленияКомплектации.КодОперацииПартииТоваров];
					Если МассивСтрокПоКоду = Неопределено Тогда
						СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаПоступленияКомплектации.КодОперацииПартииТоваров, Новый Массив);
						МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаПоступленияКомплектации.КодОперацииПартииТоваров];
					КонецЕсли;
					МассивСтрокПоКоду.Добавить(СтрокаПоступленияКомплектации);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
				//Строка с полным количеством поступления уже создна. Дополнение количества не требуется 
			Иначе
				Если СтрокаТаблицыНДСПартииСписания.Количество <> 0 Тогда
					СтрокаПоступленияКомплектации.Количество = СтрокаПоступленияКомплектации.Количество + 
															   СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыНДСПартииСписания.Количество = 0;
			
		КонецЕсли;//Если СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров = КодыОпераций.Комплектация Тогда 

	КонецЦикла;//	Для каждого СтрокаТаблицыНДСПартииСписания из ТаблицаНДСПартииСписания цикл

	СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
								ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость = СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость
								ИЛИ (КолНДСВключенныйВСтоимость <> СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный
								ИЛИ (КолНДСПредъявленный <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество());
										
	СтруктураПараметров.ИзмененыДвиженияХозрасчетный = СтруктураПараметров.ИзмененыДвиженияХозрасчетный
								ИЛИ (КолНДСХозрасчетный <> СтруктураПараметров.ДвиженияХозрасчетный.Количество());
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПараметров.ИзмененыДвиженияНалоговый = СтруктураПараметров.ИзмененыДвиженияНалоговый
								ИЛИ (КолНДСНалоговый <> СтруктураПараметров.ДвиженияНалоговый.Количество());
	КонецЕсли;

КонецПроцедуры //ВыполнитьДвиженияСписанияНДС

Функция ПолучитьТаблицуПоступлениеТоваровУслугВНТТ(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоУслугам, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтражениеПоступленияТоваровИУслугНДС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтражениеРеализацииТоваровИУслугНДС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров)
	
	ВидыЦенностейПоСчетамУчета = Неопределено;
	
	СоответствиеЗаказов = Новый Соответствие;
	
	КопияТаблицыСписания = ТаблицаСписания.Скопировать();
	
	КопияТаблицыСписания.Колонки.Удалить(КопияТаблицыСписания.Колонки.Подразделение);
	
	РаспределеннаяТаблица = КопияТаблицыСписания.СкопироватьКолонки();
	
	// Дополнительные колонки, используемые подсистемой НДС
	СтрокаНазванийКолонок = "Ценность, СчетУчетаЦенности, ВидЦенности, ДоговорПоставщика, Комиссионный, Партия,
							|КорСчетСписанияБУ, КорСчетСписанияНУ,
							|КорСубконтоСписанияНУ1, КорСубконтоСписанияНУ2, КорСубконтоСписанияНУ3,
							|КорСубконтоСписанияБУ1, КорСубконтоСписанияБУ2, КорСубконтоСписанияБУ3,
							|НДС, СуммаБезНДС,
							|ДокументОприходования,
							|НомерКорСтроки, ПостояннаяРазница, ВременнаяРазница,
							|ДоговорКомиссии, СчетРасчетовСКомитентом, ОбособленныйУчетТоваровПоЗаказамПокупателей,
							|Подразделение";

	// Ключ - название колонки
	// Значение - описание типа для добавляемой колонки
	СтруктураКолонокРаспределеннойТаблицы = Новый Структура(СтрокаНазванийКолонок);
	СтруктураКолонокРаспределеннойТаблицы.Вставить("УчетАгентскогоНДС", Новый описаниеТипов("Булево"));
	
	Для Каждого Элемент из СтруктураКолонокРаспределеннойТаблицы цикл
		Если РаспределеннаяТаблица.Колонки.Найти(Элемент.Ключ) = Неопределено тогда
			Если Элемент.Значение = Неопределено Тогда
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ);
			Иначе
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ,Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Для каждого СтрокаТаблицыСписания из КопияТаблицыСписания цикл
		
		Если Не СтрокаТаблицыСписания.ОтражатьВБухгалтерскомУчете тогда
			Продолжить;
		КонецЕсли;
		
		РегистрУчета = "НаСкладах";
		
		МассивСтрокПартий = УправлениеЗапасамиПартионныйУчет.ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаТаблицыСписания, РегистрУчета);
		Для Каждого СтрокаПартии из МассивСтрокПартий цикл
		
			Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Приход 
			   И  Не СтрокаПартии.КодОперации = КодыОпераций.ВозвратОтПокупателя тогда
				Продолжить;
			КонецЕсли;
			
			//// НДС по таре не учитывается
			Если СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ПередачаТарыКонтрагенту 
			   Или СтрокаТаблицыСписания.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара
				тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПартии.Количество <= 0 тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыСписания.Количество <= 0 тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ УправлениеЗапасамиПартионныйУчет.ПроверитьПартиюНаСкладеБух(СтрокаПартии, СтрокаТаблицыСписания, СтруктураПараметров) тогда
				Продолжить;
			КонецЕсли;
			
			
			Если СтрокаТаблицыСписания.Количество > СтрокаПартии.Количество тогда
				КоэффСписания = СтрокаПартии.Количество/СтрокаТаблицыСписания.Количество;
				КоличествоСписать = СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
				КоличествоСписать = СтрокаТаблицыСписания.Количество;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы = РаспределеннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределеннойТаблицы, СтрокаТаблицыСписания);
			
			СтрокаРаспределеннойТаблицы.НДС   = Окр(СтрокаТаблицыСписания.СуммаНДС * КоэффСписания,2,1);
			
			СуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.СуммаЗадолженностиБУ * КоэффСписания,2,1);
			СтрокаРаспределеннойТаблицы.СуммаБезНДС = СуммаЗадолженностиБУ - СтрокаРаспределеннойТаблицы.НДС;
			СтрокаТаблицыСписания.СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ - СуммаЗадолженностиБУ;
			
			СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ* КоэффСписания,2,1);
			СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ* КоэффСписания,2,1);
			
			СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ - СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ;
			СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ = СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ- СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ;
			
			СтрокаТаблицыСписания.СуммаНДС = СтрокаТаблицыСписания.СуммаНДС - СтрокаРаспределеннойТаблицы.НДС;
			СтрокаТаблицыСписания.Количество = СтрокаТаблицыСписания.Количество - КоличествоСписать;
				
			СтрокаРаспределеннойТаблицы.Количество = КоличествоСписать;
			СтрокаРаспределеннойТаблицы.КоличествоПоступление = Окр(СтрокаТаблицыСписания.КоличествоПоступление * КоэффСписания,3,1);
			СтрокаРаспределеннойТаблицы.Партия = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.ДокументОприходования = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = СтрокаПартии.КодОперации;
			
			Если СтрокаПартии.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
				СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
			КонецЕсли;
			
			СтрокаПартии.Количество = СтрокаПартии.Количество - КоличествоСписать;
			СтрокаТаблицыСписания.КоличествоПоступление = СтрокаТаблицыСписания.КоличествоПоступление - СтрокаРаспределеннойТаблицы.КоличествоПоступление;
			
			СтрокаРаспределеннойТаблицы.Ценность = СтрокаРаспределеннойТаблицы.Номенклатура;
			СтрокаРаспределеннойТаблицы.СчетУчетаЦенности = СтрокаПартии.СчетУчета;
			СтрокаРаспределеннойТаблицы.СчетУчетаБУ		  = СтрокаПартии.СчетУчета;
			
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ1 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ1;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ2 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ2;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ3 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ3;
			
			КорСубконто1 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ1;
			КорСубконто2 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ2;
			КорСубконто3 = СтрокаРаспределеннойТаблицы.КорСубконтоБУ3;
			
			Если ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоНУ1) тогда
				КорСубконто1 = СтрокаРаспределеннойТаблицы.КорСубконтоНУ1;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоНУ2) тогда
				КорСубконто2 = СтрокаРаспределеннойТаблицы.КорСубконтоНУ2;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоНУ3) тогда
				КорСубконто3 = СтрокаРаспределеннойТаблицы.КорСубконтоНУ3;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ1 = КорСубконто1;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2 = КорСубконто2;
			СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ3 = КорСубконто3;
			
			СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ = СтрокаРаспределеннойТаблицы.КорСчетБУ;
			Если НЕ ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ) тогда
				СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ = СтрокаРаспределеннойТаблицы.СчетУчетаБУ;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.КорСчетСписанияНУ = СтрокаРаспределеннойТаблицы.КорСчетНУ;
			
			// Серия в документе может отличаться от серии в партии
			// Например заказ покупателя с пустой серией может списывать партии с непустой серией
			СтрокаРаспределеннойТаблицы.СерияНоменклатуры = СтрокаПартии.СерияНоменклатуры;
			
			СтрокаРаспределеннойТаблицы.Комиссионный  = УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаРаспределеннойТаблицы.СчетУчетаБУ);
			
			Если СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.Комплектация или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ПеремещениеМеждуСкладами или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.Реализация или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РезервированиеПодЗаказ или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ПередачаНаКомиссию или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтКомиссионера или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ПереоценкаПринятыхНаКомиссию или
			   СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.КорректировкаСерийИХарактеристик
			   
			   тогда
				Если СтрокаРаспределеннойТаблицы.Комиссионный тогда
					СтруктураРеквизитовДокумента = Новый Структура("Контрагент,ДоговорКонтрагента");
					Если ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) Тогда
					
						УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.ДокументОприходования, СтруктураРеквизитовДокумента);
						СтрокаРаспределеннойТаблицы.ДоговорКомиссии = СтруктураРеквизитовДокумента.ДоговорКонтрагента;
						СтруктураРеквизитовДоговора = Новый Структура("УчетАгентскогоНДС");
						УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураРеквизитовДокумента.ДоговорКонтрагента, СтруктураРеквизитовДоговора);

						СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = СтруктураРеквизитовДоговора.УчетАгентскогоНДС;
						СчетаРасчетов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(СтрокаПартии.Организация, СтруктураРеквизитовДокумента.Контрагент, 
																			СтруктураРеквизитовДокумента.ДоговорКонтрагента);
																			
						СтрокаРаспределеннойТаблицы.СчетРасчетовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
					Иначе
						СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = Ложь;
						СтрокаРаспределеннойТаблицы.Комиссионный = Ложь;
					КонецЕсли; 
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы.ВидЦенности	= ОпределитьВидЦенности(СтрокаРаспределеннойТаблицы.Номенклатура, СтрокаРаспределеннойТаблицы.СчетУчетаБУ,,,,,,,,ВидыЦенностейПоСчетамУчета);
			
			Если СтрокаПартии.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка() тогда
				ОбособленныйУчетТоваровПоЗаказамПокупателей = СоответствиеЗаказов[СтрокаПартии.Заказ];
				
				Если ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено Тогда
					
					СтруктураЗаказа = Новый Структура("ДоговорКонтрагента");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.Заказ, СтруктураЗаказа);
					
					СтруктураДоговора = Новый Структура("ОбособленныйУчетТоваровПоЗаказамПокупателей");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураЗаказа.ДоговорКонтрагента, СтруктураДоговора);
					
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей;
					СоответствиеЗаказов.Вставить(СтрокаПартии.Заказ, СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей);
					
				Иначе
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
				КонецЕсли;
			Иначе
				СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
			КонецЕсли;
			
			// В НДС Подразделение = ПодразделениеОрганизации
			СтрокаРаспределеннойТаблицы.Подразделение = СтрокаРаспределеннойТаблицы.ПодразделениеОрганизации;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат РаспределеннаяТаблица;
	
КонецФункции//РаспределитьПартииПоТаблицеСписания

// Функция возвращает значение реквизита произвольного объекта ссылочного типа
// Предназначена для получения реквизитов недоступных пользователю объектов
Функция ПолучитьРеквизитОбъекта(Ссылка, ИмяРеквизита)
	
	ОбъектМетаданные = Ссылка.Метаданные();
	ИмяТаблицы = ОбъектМетаданные.ПолноеИмя();
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ИмяРеквизита + " КАК " + ИмяРеквизита + " ИЗ " + ИмяТаблицы + "
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка[ИмяРеквизита];
	Иначе
		РеквизитМетаданные = ОбъектМетаданные.Реквизиты.Найти(ИмяРеквизита);
		Возврат РеквизитМетаданные.Тип.ПривестиЗначение();
	КонецЕсли;
		
КонецФункции //ПолучитьРеквизитОбъекта()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП

Функция ПолучитьСтруктуруШапкиДокументаПоСсылке(Знач Ссылка) Экспорт

	Перем СтруктураКорректировкиЗаказа;
	Перем СтруктураКорректировкиОрдера;
	
	МетаданныеДокумента = Ссылка.Метаданные();

	Если МетаданныеДокумента.Имя = "РасходныйОрдерНаТовары" Тогда

		СтруктураКорректировкиОрдера = Новый Структура("ДокументПередачи, Дата");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиОрдера);
		МетаданныеДокумента = СтруктураКорректировкиОрдера.ДокументПередачи.Метаданные();
		Ссылка = СтруктураКорректировкиОрдера.ДокументПередачи;
		
	ИначеЕсли МетаданныеДокумента.Имя = "ПриходныйОрдерНаТовары" Тогда

		СтруктураКорректировкиОрдера = Новый Структура("ДокументПеремещения, Дата");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиОрдера);
		МетаданныеДокумента = СтруктураКорректировкиОрдера.ДокументПеремещения.Метаданные();
		Ссылка = СтруктураКорректировкиОрдера.ДокументПеремещения;
		
	ИначеЕсли МетаданныеДокумента.Имя = "КорректировкаЗаказаПокупателя" 
		ИЛИ МетаданныеДокумента.Имя = "ИзменениеЗаказаПокупателя" Тогда
		
		СтруктураКорректировкиЗаказа = Новый Структура("ЗаказПокупателя, Ссылка, Дата, Номер");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиЗаказа);
		МетаданныеДокумента = СтруктураКорректировкиЗаказа.ЗаказПокупателя.Метаданные();
		Ссылка = СтруктураКорректировкиЗаказа.ЗаказПокупателя;

	КонецЕсли;

	СтруктураШапкиДокумента = Новый Структура;

	СтруктураШапкиДокумента.Вставить("Ссылка");
	СтруктураШапкиДокумента.Вставить("Дата");
	СтруктураШапкиДокумента.Вставить("Номер");

	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя);
	КонецЦикла;

	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка, СтруктураШапкиДокумента);
	
	Если МетаданныеДокумента.Имя = "ОтчетКомиссионераОПродажах" Тогда
		СтруктураРеквизитовПокупатели = Новый Структура("Покупатели");
		РезультатЗапросаПокупатели = ПолучитьРеквизитОбъекта(Ссылка, "Покупатели");
		Если НЕ РезультатЗапросаПокупатели.Пустой() Тогда
			ТЧПокупатели = РезультатЗапросаПокупатели.Выгрузить();
			СтруктураШапкиДокумента.Вставить("КомиссияПоПокупателям", НЕ(ТЧПокупатели.Количество() = 1 И ТЧПокупатели[0].Покупатель = СтруктураШапкиДокумента.Контрагент));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураКорректировкиЗаказа <> Неопределено тогда
		
		СтруктураШапкиДокумента.Вставить("Ссылка" , СтруктураКорректировкиЗаказа.Ссылка);
		СтруктураШапкиДокумента.Вставить("Дата"   , СтруктураКорректировкиЗаказа.Дата);
		СтруктураШапкиДокумента.Вставить("Номер"  , СтруктураКорректировкиЗаказа.Номер);
		
	ИначеЕсли СтруктураКорректировкиОрдера <> Неопределено тогда

		СтруктураШапкиДокумента.Вставить("Дата"   , СтруктураКорректировкиОрдера.Дата);
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") тогда

		СтруктураДоговора = Новый Структура ("ВидДоговора,
											 |УчетАгентскогоНДС, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");

		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураДоговора);
		СтруктураШапкиДокумента.Вставить("ВидДоговора", СтруктураДоговора.ВидДоговора);
		СтруктураШапкиДокумента.Вставить("УчетАгентскогоНДС", СтруктураДоговора.УчетАгентскогоНДС);
		СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов", СтруктураДоговора.ВалютаВзаиморасчетов);
		СтруктураШапкиДокумента.Вставить("РасчетыВУсловныхЕдиницах", СтруктураДоговора.РасчетыВУсловныхЕдиницах);
		
	Иначе

		СтруктураШапкиДокумента.Вставить("ВидДоговора", Неопределено);

	КонецЕсли;

	
	Если НЕ СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда

		СтруктураШапкиДокумента.Вставить("УчитыватьНДС", Истина);

	КонецЕсли;

	
	Если НЕ СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") Тогда

		СтруктураШапкиДокумента.Вставить("НДСВключенВСтоимость", Истина);

	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") Тогда

		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);

	КонецЕсли;

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);	
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	
	СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(СтруктураШапкиДокумента.Свойство("Организация"), НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата),Ложь));
	
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") И СтруктураШапкиДокумента.Свойство("Организация") Тогда

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

			Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда

				Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
				Иначе
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
					СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
				КонецЕсли;

				СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",    Ложь);

			Иначе
				СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
				СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);

			КонецЕсли;

		Иначе
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);

		КонецЕсли;
	
	КонецЕсли;
	
	ВидПоступления = Неопределено;
	Если СтруктураШапкиДокумента.Свойство("ВидПоступления",ВидПоступления) тогда
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
			СтруктураСклада = Новый Структура("СкладОрдер");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураСклада);
			
			СтруктураСкладаОрдера = Новый Структура("Склад");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураСклада.СкладОрдер,СтруктураСкладаОрдера);
			
			СтруктураШапкиДокумента.Вставить("СкладПриходногоОрдера",СтруктураСкладаОрдера.Склад);
		КонецЕсли;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПраваСобственности", Ложь);
	ВидОперации = неопределено;
	Если СтруктураШапкиДокумента.Свойство("ВидОперации",ВидОперации) тогда
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПраваСобственности", истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции
 
Функция ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаПартийНДС, СтруктураПараметров)
	
	Перем СоответствиеКодовОперацийСтрокамНДСПартий;
	
	Результат = Новый ТаблицаЗначений;
		
	Для каждого Колонка ИЗ ТаблицаПартийНДС.Колонки Цикл
			
		Результат.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий",СоответствиеКодовОперацийСтрокамНДСПартий) тогда

		СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);
			
		Для каждого Элемент из СтруктураКодовОпераций Цикл
			МассивСтрокПоКодуОперации = СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]];
			Если МассивСтрокПоКодуОперации <> Неопределено Тогда
				Для Каждого СтрокаТаблицы ИЗ МассивСтрокПоКодуОперации Цикл
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Результат;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции //ОтобратьСтрокиПоКодамОпераций

Функция ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, ТаблицаЗначений)
	
	СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);
	
	ВидСравненияКодаОперации = ВидСравнения.ВСписке;
		
	СписокОтбора = Новый СписокЗначений;
	Для каждого Элемент из СтруктураКодовОпераций Цикл
		СписокОтбора.Добавить(Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]);
	КонецЦикла;
	
	ПостроительТаблицаПартийНДС = Новый ПостроительЗапроса();
	ПостроительТаблицаПартийНДС.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
	Отбор = ПостроительТаблицаПартийНДС.Отбор;
	ЭлементОтбора = Отбор.Добавить("КодОперацииПартииТоваров");
	ЭлементОтбора.ВидСравнения = ВидСравненияКодаОперации;
	ЭлементОтбора.Значение = СписокОтбора;
	ЭлементОтбора.Использование = Истина;
		
	ПостроительТаблицаПартийНДС.Выполнить();
		
	Если ПостроительТаблицаПартийНДС.Результат.Пустой() тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПостроительТаблицаПартийНДС.Результат.Выгрузить();
	
КонецФункции //ОтобратьСтрокиПостроителемЗапроса

Функция ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров)
	
	// Партии могут списываться из регистров ПартииТоваровНаСкладахБухгалтерскийУчет и ПартииТоваровПереданныеБухгалтерскийУчет
	// Отберем из соответствующих таблиц партии с видом движения "расход"
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	ТаблицаПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.СкопироватьКолонки();
	ТаблицаПартий.Колонки.Добавить("РегистрУчета");
	Для каждого СтрокаПартииНаСкладах из СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух Цикл
		Если СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Расход 
		   ИЛИ (СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Приход 
		   И   СтрокаПартииНаСкладах.КодОперации = КодыОпераций.ВозвратОтПокупателя) тогда
			CтрокаПартии = ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииНаСкладах);
			Если СтрокаПартииНаСкладах.КодОперации = КодыОпераций.ВозвратОтПокупателяТекущийМесяц тогда
				// Возврат текущего месяца учитывается как сторно реализации
				CтрокаПартии.Количество = - CтрокаПартии.Количество;
				CтрокаПартии.Стоимость  = - CтрокаПартии.Стоимость;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаПартииПереданные из СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух Цикл
		Если СтрокаПартииПереданные.ВидДвижения = ВидДвиженияНакопления.Расход тогда
			CтрокаПартии = ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииПереданные);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаПартий;
	
КонецФункции

// Функция определяет счет учета НДС по виду ценности
Функция ОпределитьСчетУчетаНДС(ВидЦенности)
	
	Если Не ЗначениеЗаполнено(ВидЦенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидЦенности = Перечисления.ВидыЦенностей.Материалы
		Или ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Оборудование 
		Или ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи
		Или ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НМА Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	КонецЕсли;
	
КонецФункции

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Функция СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Ложь) Экспорт
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = "ВЫБРАТЬ Док.ПометкаУдаления
	//				|	ИЗ 
	//				|   	Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док
	//				|   ГДЕ Док.Ссылка = &ДокументСсылка";
    // }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.ПометкаУдаления
	                |	ИЗ 
	                |   	Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док
	                |   ГДЕ Док.Ссылка = &ДокументСсылка";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить();
	
	Если ДокументОбъект.ПометкаУдаления <> ?(Результат.Количество() > 0, Результат[0].ПометкаУдаления,ложь) Тогда

		// Произошло изменение пометки на удаление
		// Попытаемся найти счет-фактуру
		СтруктураОтбора = Новый Структура("ПометкаУдаления", Не ДокументОбъект.ПометкаУдаления);
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, СтруктураОтбора, ДокументОбъект.Ссылка);

		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если ЗначениеЗаполнено(СчетФактура) И Не СчетФактура = ДокументОбъект.Ссылка Тогда
			Попытка
				// Есть счет-фактура, нужно установить для него пометку удаления
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Если ДокументОбъект.ПометкаУдаления Тогда
					// Если в счете-фаткуре несколько оснований, счет-фактура не помечается на удаление,
					// а очищается ссылка на текущее основание.
					МетаданныеДокумента = СчетФактураОбъект.Метаданные();
					
					Если МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыОснования") <> Неопределено
						И СчетФактураОбъект.ДокументыОснования.Количество() > СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка)).Количество() Тогда
						СтрокиКУдалению = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка));
						Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
							СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
						КонецЦикла;
						СчетФактураОбъект.ДокументОснование = СчетФактураОбъект.ДокументыОснования[0].ДокументОснование;
						СчетФактураОбъект.Записать();
						ОбщегоНазначения.Сообщение("Из документа «" + СчетФактура + "» удалена ссылка на «"+ДокументОбъект+"».");
						Возврат СчетФактура;
					КонецЕсли; 
				КонецЕсли; 
				
				СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
				Если ДокументОбъект.ПометкаУдаления Тогда
					ОбщегоНазначения.Сообщение("Документ «" + СчетФактура + "» помечен на удаление.")
				Иначе
					ОбщегоНазначения.Сообщение("У документа «" + СчетФактура + "» снята пометка на удаление.")
				КонецЕсли;
				Возврат СчетФактура;
			Исключение
				Отказ = Истина;
				Возврат Неопределено;
			КонецПопытки;
				
		КонецЕсли;

	КонецЕсли;

КонецФункции // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

Функция ДляСчетаФактурыНеТребуетсяОплата(СчетФактура) Экспорт
	
	Возврат ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") 
		Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
		Или Не Метаданные.РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Измерения.Документ.Тип.СодержитТип(ТипЗнч(СчетФактура));
		
КонецФункции

Функция ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Экспорт
	
	ВедетсяУчетНДСПоФЗ134 = СтруктураШапкиДокумента.Свойство("ВедетсяУчетНДСПоФЗ134") 
		И СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134
		И СтруктураШапкиДокумента.Свойство("Ссылка")
		И (		ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПередачаНМА")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПередачаОС")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	
	Если (СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН")
		И СтруктураШапкиДокумента.ОрганизацияПрименяетУСН)
		И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат Ложь;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете")
		И Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат Ложь;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("УчитыватьНДС") 
		И Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат Ложь
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, ДополнитьПараметрамиПартионногоУчета = Ложь) Экспорт
	
	УчетнаяПолитика = Неопределено;
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
		
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), 
																		Ложь, УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная));
		КонецЕсли;
	
		Если Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), 
																Ложь, УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не СтруктураШапкиДокумента.Свойство("ИспользуетсяРасширеннаяАналитикаУчета") Тогда
		СтруктураШапкиДокумента.Вставить("ИспользуетсяРасширеннаяАналитикаУчета", УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата));
	КонецЕсли;
	
	Если ДополнитьПараметрамиПартионногоУчета Тогда
		ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, УчетнаяПолитика)	
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьСложныйУчетНДСПоНоменклатурнойГруппе(Организация, Дата, НоменклатурнаяГруппа) Экспорт
	
	Отбор = Новый Структура("Организация, НоменклатурнаяГруппа", Организация, НоменклатурнаяГруппа);
	ДанныеПоНоменклатурнойГруппе = РегистрыСведений.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.ПолучитьПоследнее(Дата, Отбор);
	Возврат ДанныеПоНоменклатурнойГруппе.СложныйУчетНДС;
	
КонецФункции

Функция СчетОтнесенияНДС(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах" Тогда 
		Возврат ПланыСчетов.Хозрасчетный.НДС;
	ИначеЕсли СтруктураШапкиДокумента.Дата < '20060101'
		И СтруктураШапкиДокумента.Свойство("МоментОпределенияНалоговойБазыНДС") 
		И СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
		Возврат ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ОтгрузкаБезПереходаПравСобственности")
		И СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		Возврат ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.НДС;
	КонецЕсли;

КонецФункции

// Формирует список счетов учета производственных расходов.
//
Функция ОпределитьСчетаУчетаПроизводственныхРасходов() Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос;
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	Хозрасчетный.Ссылка
	//			   |ИЗ
	//			   |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	//			   |ГДЕ
	//			   |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)";
	// }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Хозрасчетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции // ОпределитьСчетаУчетаПроизводственныхРасходов()
 
// Формирует список счетов ОС, НМА и объектов строительства
Функция ОпределитьСчетаУчетаОСиНМА(ОбъектыУчета = "", ДатаОбъекта = '00010101') Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	
	Если ОбъектыУчета = "Оборудование" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе 
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектыУчета = "ОС" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	
	Если ОбъектыУчета ="НМА" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Хозрасчетный.Ссылка
	//	|ИЗ
	//	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	//	|ГДЕ
	//	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	//	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	// }}Новый код:
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

// Процедура вызывается из модулей документов списания
Процедура СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ)

	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если (УчетнаяПолитикаНУ.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная) тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.СложныйУчетНДС Тогда 
		
		СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();
		
		ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.ТаблицаДвиженийНДСКосвенныеРасходы;
		
		Для Каждого СтрокаДок Из ТаблицаДвиженийПартий Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				// Обрабатываем только записи с заполненными счетами-фактурами
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДок.СуммаБезНДС = 0 и СтрокаДок.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если (СтруктураШапкиДокумента.ВидДокумента = "КомплектацияНоменклатуры") 
			  И ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции)
			  ИЛИ (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика)) Тогда
				Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
					СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
				Иначе
					СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяЗатрат;
				КонецЕсли;
			Иначе	
				Если Не СтруктураШапкиДокумента.Свойство("СтатьяЗатрат") Тогда
					Если ТаблицаДвиженийПартий.Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
						СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
					Иначе
						ВидыСубконтоСчетаЗатрат = СтруктураШапкиДокумента.СчетЗатрат.ВидыСубконто;
						Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
							Если Не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено)
								И ТипЗнч(СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
								СтатьяЗатрат = СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто];
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяЗатрат;
				КонецЕсли; 
			КонецЕсли;	
			// Если счет учета не соответствует счету учета косвенных расходов, то движения делать не нужно
			Если Не (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаДок.КорСчетБУ) = Неопределено) Тогда
				Если ЗначениеЗаполнено(СтатьяЗатрат)
					Тогда // Необходимо включить запись в состав косвенных расходов для последующего распределения
					
					СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиженияКР,СтрокаДок); 
					
					СтрокаДвиженияКР.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
					СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
					СтрокаДвиженияКР.СтатьяЗатрат 	= СтатьяЗатрат;
					СтрокаДвиженияКР.Заказ 			= СтрокаДок.ЗаказСписания;
					СтрокаДвиженияКР.СчетЗатрат 	= СтрокаДок.КорСчетСписанияБУ;
					
					СтрокаДвиженияКР.Затрата               = СтрокаДок.Номенклатура;
					СтрокаДвиженияКР.ХарактеристикаЗатраты = СтрокаДок.ХарактеристикаНоменклатуры;
					СтрокаДвиженияКР.СерияЗатраты          = СтрокаДок.СерияНоменклатуры;
					
					ВидыСубконтоСчетаЗатрат = СтрокаДок.КорСчетСписанияБУ.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено) тогда
							СтрокаДвиженияКР["Субконто"+НомерСубконто] = СтрокаДок["КорСубконтоСписанияБУ"+НомерСубконто];
						КонецЕсли; 
					КонецЦикла;
					
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтрокаДвиженияКР.СчетЗатратНУ = СтрокаДок.КорСчетСписанияНУ;
						
						ВидыСубконтоСчетаЗатрат = СтрокаДок.КорСчетСписанияНУ.ВидыСубконто;
						Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
							Если Не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено) тогда
								СтрокаДвиженияКР["СубконтоНУ"+НомерСубконто] = СтрокаДок["КорСубконтоСписанияБУ"+НомерСубконто];
							КонецЕсли; 
						КонецЦикла;
					КонецЕсли;
					
					СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.Стоимость - СтрокаДок.НДС;
					СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
					
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДвижений_НДСКосвенныеРасходы.Количество() > 0 тогда
			ТаблицаДвижений_НДСКосвенныеРасходы.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.Вставить("ИзмененыДвиженияНДСКосвенныеРасходы", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы()

Процедура РаспределитьРасходыПоВНАнаСпособыОтраженияРасходовПоАмортизации(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ)
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		или не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС")
		Тогда
		УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ЗначениеЗаполнено(УчетнаяПолитика) И (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)));
		СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ЗначениеЗаполнено(УчетнаяПолитика) И УчетнаяПолитика.СложныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если не СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаСпособОтраженияРасходов = не ДанныеДляОбработки.Колонки.Найти("СпособОтраженияРасходов") = Неопределено;
	ЕстьКолонкаНазначениеИспользования = не ДанныеДляОбработки.Колонки.Найти("НазначениеИспользования") = Неопределено;
	
	Если не (ЕстьКолонкаСпособОтраженияРасходов ИЛИ ЕстьКолонкаНазначениеИспользования) Тогда
		// Отсутствует базис распределения
		Возврат;
	КонецЕсли;
	
	// Отражение списанных партий в составе косвенных расходов
	ТаблицаНДСПартииСписания = ДанныеДляОбработки.СкопироватьКолонки();
	
	БазисРаспределенияПоСпособуОтражения = Новый Соответствие;
	СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();
	СчетаУчетаПроизводственныхРасходов = ОпределитьСчетаУчетаПроизводственныхРасходов();
	СтрокиКУдалению = Новый Массив();
	
	ТаблицаНДСПартииСписания.Колонки.Добавить("ТаблицаРаспределенияРасходов");

	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписания.СчетФактура) тогда
			Продолжить;
		ИначеЕсли ?(ЕстьКолонкаСпособОтраженияРасходов, Не ЗначениеЗаполнено(СтрокаСписания.СпособОтраженияРасходов),
			Не ЗначениеЗаполнено(СтрокаСписания.НазначениеИспользования))
			тогда
			Продолжить;
		ИначеЕсли СтрокаСписания.Стоимость = 0 и СтрокаСписания.НДС = 0 тогда
			Продолжить;
		КонецЕсли;
		
		СпособОтражения = ?(ЕстьКолонкаСпособОтраженияРасходов, СтрокаСписания.СпособОтраженияРасходов,
										СтрокаСписания.НазначениеИспользования.СпособОтраженияРасходов);
		
		Если БазисРаспределенияПоСпособуОтражения[СпособОтражения] = Неопределено тогда 
			БазисСпособаОтражения = СпособОтражения.Способы.Выгрузить();
			БазисСпособаОтражения.Колонки.Добавить("ОтражатьВСоставеКР", Новый ОписаниеТипов("Булево"));
			БазисСпособаОтражения.Колонки.Добавить("ОтражатьВСоставеПР", Новый ОписаниеТипов("Булево"));
			
			Для каждого СтрокаСпособаОтражения Из БазисСпособаОтражения Цикл
				Если СтрокаСпособаОтражения.Коэффициент = 0 тогда
					Продолжить;
				ИначеЕсли (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) = Неопределено) Тогда
					Продолжить;
				Иначе
					
					НоменклатурнаяГруппа = Неопределено;
					СложныйУчетНДСПоНоменклатурнойГруппе = Ложь;
					Если СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) <> Неопределено Тогда
						НоменклатурнаяГруппа = СтрокаСпособаОтражения.НоменклатурнаяГруппа;
						СложныйУчетНДСПоНоменклатурнойГруппе = ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтруктураШапкиДокумента.Организация, НоменклатурнаяГруппа, СтруктураПараметров);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСпособаОтражения.СтатьяЗатрат) 
					   И (СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) = Неопределено
						  ИЛИ СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) <> Неопределено
							  И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа)) Тогда
			 			// Движения по регистру НДС косвенные расходы
						СтрокаСпособаОтражения.ОтражатьВСоставеКР = Истина;
					ИначеЕсли ЗначениеЗаполнено(СтрокаСпособаОтражения.СтатьяЗатрат) 
						И (СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) <> Неопределено)
						И СложныйУчетНДСПоНоменклатурнойГруппе Тогда
			 			// Движения по регистру НДС незавершенное производство
						СтрокаСпособаОтражения.ОтражатьВСоставеПР = Истина;
					КонецЕсли;

				КонецЕсли; 
			КонецЦикла; 
			
			Если БазисСпособаОтражения.Найти(Истина,"ОтражатьВСоставеКР") = Неопределено Тогда
				БазисРаспределенияПоСпособуОтражения.Вставить(СпособОтражения, Ложь);
			Иначе
				БазисРаспределенияПоСпособуОтражения.Вставить(СпособОтражения, БазисСпособаОтражения);
			КонецЕсли; 
		
		КонецЕсли;
		
		Если БазисРаспределенияПоСпособуОтражения[СпособОтражения] = Ложь тогда
			//Строка не отражается в составе КР
			Продолжить;
		Иначе
			СтрокаКРаспределению = ТаблицаНДСПартииСписания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКРаспределению, СтрокаСписания);
			СтрокаКРаспределению.ТаблицаРаспределенияРасходов = БазисРаспределенияПоСпособуОтражения[СпособОтражения].Скопировать();
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаНДСПартииСписания.Количество()=0 Тогда
		// Дальнейшая отработка не требуется
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	СписокРаспределяемыхКолонок = Новый Структура("Стоимость, НДС","Коэффициент","Коэффициент");
	СписокИсключаемыхКолонок = новый Структура("QuieryId,Активность"+
										",ДействияНДСПокупки_ВключитьВСтоимость,ДействияНДСПокупки_ИсключитьИзСтоимости,ДействияНДСПокупки_ПредположениеСтавки0"+
										",ДоговорКонтрагента,ДоговорПоставщика,ДокументОприходования,Количество,Комиссионный"+
										",МоментВремени,Период,Регистратор,СодержаниеПроводки,СписанныеПартииВР,СписанныеПартииПР,СписыватьПоУказаннойСтоимости,СпособОтраженияРасходов,СпособПогашенияСтоимости,Ссылка"+
										",НомерСтроки,Партия, ВидДвижения, СуммаБезНДС");
										

	Для каждого КолонкаРаспределения Из БазисСпособаОтражения.Колонки Цикл
		Если не ТаблицаНДСПартииСписания.Колонки.Найти(КолонкаРаспределения.Имя) = Неопределено Тогда
			ТаблицаНДСПартииСписания.Колонки.Удалить(ТаблицаНДСПартииСписания.Колонки.Найти(КолонкаРаспределения.Имя));
		КонецЕсли; 
	КонецЦикла; 
		
	ТаблицаРасходовКРаспределению = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаНДСПартииСписания, "ТаблицаРаспределенияРасходов",СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
	ТаблицаРасходовКРаспределению.Колонки.Удалить(ТаблицаРасходовКРаспределению.Колонки.Подразделение);
	ТаблицаРасходовКРаспределению.Колонки.ПодразделениеОрганизации.Имя = "Подразделение";
	
	Если ТаблицаРасходовКРаспределению.Колонки.Найти("СуммаБезНДС") = Неопределено Тогда
		ТаблицаРасходовКРаспределению.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли; 
	СтрокиКосвенныхРасходов = ТаблицаРасходовКРаспределению.НайтиСтроки(Новый Структура("ОтражатьВСоставеКР", Истина));
	ТаблицаКосвенныхРасходов = РегистрыНакопления.НДСКосвенныеРасходы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Для каждого СтрокаКосвенныхРасходов Из СтрокиКосвенныхРасходов Цикл
		СтрокаКосвенныхРасходов.СуммаБезНДС = СтрокаКосвенныхРасходов.Стоимость - СтрокаКосвенныхРасходов.НДС;
		ЗаполнитьЗначенияСвойств(ТаблицаКосвенныхРасходов.Добавить(),СтрокаКосвенныхРасходов);
	КонецЦикла; 

	Если ТаблицаКосвенныхРасходов.Количество()>0 Тогда
		СформироватьДвиженияНДСКосвенныеРасходы(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаКосвенныхРасходов, Отказ,СчетаУчетаКосвенныхРасходов,СчетаУчетаПроизводственныхРасходов);
	КонецЕсли;
	
	СтрокиПроизводственныхРасходов = ТаблицаРасходовКРаспределению.НайтиСтроки(Новый Структура("ОтражатьВСоставеПР", Истина));
	ТаблицаПроизводственныхРасходов = ТаблицаРасходовКРаспределению.СкопироватьКолонки();
	
	Для каждого СтрокаПроизводственныхРасходов Из СтрокиПроизводственныхРасходов Цикл
		СтрокаПроизводственныхРасходов.СуммаБезНДС = СтрокаПроизводственныхРасходов.Стоимость - СтрокаПроизводственныхРасходов.НДС;
		ЗаполнитьЗначенияСвойств(ТаблицаПроизводственныхРасходов.Добавить(),СтрокаПроизводственныхРасходов);
	КонецЦикла; 

	Если ТаблицаПроизводственныхРасходов.Количество()>0 Тогда
		СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПроизводственныхРасходов, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходы(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ,СчетаУчетаКосвенныхРасходов = Неопределено,СчетаУчетаПроизводственныхРасходов = Неопределено)
	
	Если ДанныеДляОбработки.Колонки.Найти("СтатьяЗатрат") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если не ЗначениеЗаполнено(СчетаУчетаКосвенныхРасходов) Тогда
		СчетаУчетаКосвенныхРасходов				= ОпределитьСчетаУчетаКосвенныхРасходов();
	КонецЕсли; 
	Если не ЗначениеЗаполнено(СчетаУчетаПроизводственныхРасходов) Тогда
		СчетаУчетаПроизводственныхРасходов		= ОпределитьСчетаУчетаПроизводственныхРасходов();
	КонецЕсли; 
	
	ЕстьКолонкаНоменклатурнаяГруппа = не ДанныеДляОбработки.Колонки.Найти("НоменклатурнаяГруппа") = Неопределено;
	
	Для каждого СтрокаДокумента из ДанныеДляОбработки Цикл

		Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяЗатрат) 
		   И (СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДокумента.СчетЗатрат) = Неопределено
			  ИЛИ СчетаУчетаПроизводственныхРасходов.НайтиПоЗначению(СтрокаДокумента.СчетЗатрат) <> Неопределено
				  И НЕ ?(ЕстьКолонкаНоменклатурнаяГруппа, ЗначениеЗаполнено(СтрокаДокумента.НоменклатурнаяГруппа), Ложь)) Тогда
			
			Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСКосвенныеРасходы", СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,СтрокаДокумента);
			
			Движение.Активность            = Истина;
			Движение.ВидДвижения           = ВидДвиженияНакопления.Приход;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры//СформироватьДвиженияНДСКосвенныеРасходы()

//////////////////////////////////////////////////////////////////////////
// НДС РЕАЛИЗАЦИИ

// Начисляет НДС при реализации по бухгалтерскому учету
//
// Параметры:
//	Нет.
//
Процедура НачислитьНДСРеализации(НДС, СтрокаДокумента, СтруктураПараметров) Экспорт
	
	// При нулевом НДС проводки не формируем.
	Если НДС=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
		ТаблицаДвижений_Хозрасчетный		= СтруктураПараметров.ДвиженияХозрасчетный;
	Иначе
		ТаблицаДвижений_Хозрасчетный		= СтруктураПараметров.Хозрасчетный;
	КонецЕсли;
	
	ВтораяПроводка = ТаблицаДвижений_Хозрасчетный.Добавить();
	ВтораяПроводка.Период        = СтруктураПараметров.Период;
	ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
	ВтораяПроводка.Активность    = Истина;
	ВтораяПроводка.Содержание = "Реализация";
	ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
	
	// Счет расходов по НДС - могут быть бва варианта субсчет 91 и субсчет 90
	Если БухгалтерскийУчет.ЭтоСубсчет(СтрокаДокумента.КорСчетБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) тогда
		ВтораяПроводка.СчетДт = СтрокаДокумента.КорСчетБУ;
		Если ТипЗнч(СтрокаДокумента.КорСубконтоБУ2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 1, СтрокаДокумента.КорСубконтоБУ2);
		КонецЕсли;
	Иначе
		ВтораяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДокумента.КорСубконтоБУ2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 1, СтрокаДокумента.КорСубконтоБУ2);
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 2, СтрокаДокумента.СтавкаНДС);
	
	МоментыОпределенияНалоговойБазыНДС = УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("МоментОпределенияНалоговойБазыНДС", "Бух", СтруктураПараметров);			
	
	// Отчет о розничных продажах должен формировать проводку по отнесению НДС на счет 68 непосредственно,
	// вне зависимости от момента определения налоговой базы для НДС, указанного в учетной политике, так 
	// как при реализации в розницу выручка, отраженная в отчете о розничных продажах сразу считается оплаченной
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РеализацияРозница
	   ИЛИ МоментыОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке
	   Тогда
			ВтораяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			ВтораяПроводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	Иначе
			ВтораяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
			ВтораяПроводка.СубконтоКт.Контрагенты = СтрокаДокумента.КорСубконтоЗадолженностиБУ1;
			ВтораяПроводка.СубконтоКт.СФВыданные  = СтруктураПараметров.Регистратор;
	КонецЕсли;
	
	ВтораяПроводка.Сумма = НДС;
	
КонецПроцедуры // НачислитьНДСРеализации()

////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации

Процедура ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаСписания, СтруктураПараметров, Заголовок) Экспорт

	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Возврат;
	КонецЕсли;
	
	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	ОписаниеИсточника_ТаблицаСписания = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Отбор.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Значение = Истина;
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Использование = Истина;
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Отражение предположения 0% по данному набору не требуется
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НДСПредъявленныйОбороты.Поставщик,
	//|	НДСПредъявленныйОбороты.СчетФактура
	//|ИЗ
	//|	РегистрНакопления.НДСПредъявленный.Обороты(
	//|		,
	//|		,
	//|		,
	//|		Организация = &Организация
	//|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	//|ГДЕ
	//|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	// }}Новый код:
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	ДанныеДляОбработки.Колонки.Добавить("Поставщик");
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
		КонецЕсли; 
	КонецЦикла;
	
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ДокументОтгрузки") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДокументОтгрузки");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОтгрузки");

	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	// Отразить в регистре НДСПредъявленныйРеализация0
	
	Если ДанныеДляОбработки.Колонки.Найти("Состояние") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("Состояние");
	КонецЕсли;
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	
	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
			Если ЗначениеЗаполнено(СтрокаСписания.ДокументПередачи) Тогда
				СтрокаСписания.ДокументОтгрузки = СтрокаСписания.ДокументПередачи;
			КонецЕсли; 
		КонецЕсли; 
		Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленныйРеализация0",СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение,СтрокаСписания);
	КонецЦикла; //Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
	
	////////////////////////////////////////////////////////
	// Движения по НДС партии и по регистру бухгалтерии

	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента, СтрокаСписания, СтруктураПараметров.ДвиженияХозрасчетный, Заголовок);
	КонецЦикла; //Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
	// Движения по НДС партии и по регистру бухгалтерии
	////////////////////////////////////////////////////////
	
КонецПроцедуры // ОтразитьПредположениеСтавки0()

Процедура СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента,СтрокаДвижения, НаборДвиженийХозрасчетный,Заголовок)
	Если НЕ ЗначениеЗаполнено(СтрокаДвижения.НДС) тогда
		//Формирование проводки не требуется
		Возврат;
	ИначеЕсли (НЕ ЗначениеЗаполнено(СтрокаДвижения.СчетУчетаНДС))
	 Тогда
		// Недостаточно данных для формирования проводки по данной строке
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не хватает данных для формирования проводки по отнесению НДС на счет учета НДС по товарам реализованным по ставке 0% (экспорт).",, Заголовок,СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// отразим факт включения НДС в стоимость соотвествующей проводкой 
	СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();
	
	// проводка, отражающая включение НДС в стоимость
	СтрокаДвиженияПроводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; 
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Поставщик);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ДокументыРеализации", СтрокаДвижения.ДокументОтгрузки);

	СтрокаДвиженияПроводка.СчетКт = СтрокаДвижения.СчетУчетаНДС; // 19.хх
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);

	СтрокаДвиженияПроводка.Содержание = "В связи с применением НДС 0% по реализации";
	СтрокаДвиженияПроводка.Сумма        = СтрокаДвижения.НДС;

	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
	СтрокаДвиженияПроводка.Организация  = СтрокаДвижения.Организация;
	СтрокаДвиженияПроводка.НомерЖурнала = "НДС";
	СтрокаДвиженияПроводка.НДСПродукции = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
//  ДВИЖЕНИЯ ПО НДС ПРИ ИСПОЛЕНИИ КОМИССИОНЕРОМ ОБЯЗАННОСТЕЙ НАЛОГОВОГО АГЕНТА

Процедура ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, ТаблицаВыручки, Движения)
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
			ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС;
			Если ОтражатьНДСКомитента Тогда
				
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Если ТипЗнч(Движения) = Тип("Структура") тогда
					Проводка = Движения.ДвиженияХозрасчетный.Добавить();
				Иначе	
					Проводка = Движения.Хозрасчетный.Добавить();
				КонецЕсли;

				Проводка.Период 		= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание 	= "Начислен НДС в качестве налогового агента";

				Проводка.СчетДт			= СтрокаТаблицы.СчетРасчетовСКомитентом;
				Если ТаблицаВыручки.Колонки.Найти("Комитент") <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.Комитент);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.ДоговорКомиссии.Владелец);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтрокаТаблицы.ДоговорКомиссии);
				
				Проводка.СчетКт			= ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
									
				Проводка.Сумма			= СтрокаТаблицы.НДС;
				
				Если СтрокаТаблицы.СчетРасчетовСКомитентом.Валютный Тогда
					ВалютаРасчетовСКомитентом = СтрокаТаблицы.ДоговорКомиссии.ВалютаВзаиморасчетов;
					Проводка.ВалютаДт        = ВалютаРасчетовСКомитентом;
					Если ВалютаРасчетовСКомитентом = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда
						Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ;
					Иначе
						ВалютаРасчетовСКомитентом_КурсКратность = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРасчетовСКомитентом, СтруктураШапкиДокумента.Дата);
						Проводка.ВалютнаяСуммаДт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС,
																			СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																			ВалютаРасчетовСКомитентом,
																			1,ВалютаРасчетовСКомитентом_КурсКратность.Курс, 
																			1,ВалютаРасчетовСКомитентом_КурсКратность.Кратность);
					КонецЕсли; 
				КонецЕсли;
									
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЯ ДВИЖЕНИЙ СВЯЗАННЫХ С ОБЪЕКТАМИ СТРОИТЕЛЬСТВА, ОС И НМА

Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ)

	УчетнаяПолитикаНУ = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если (УчетнаяПолитикаНУ.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная) тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСпоОСиНМА	= Движения.ТаблицаДвиженийНДСпоОСиНМА;

	ТаблицаДвижений_НДСпоОСиНМА.Колонки.СуммаБезНДС.Имя = "Стоимость";
	
	ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');
	Если ОсобыеУсловияБлокировкиВычета2006 Тогда
		ВидыЦенностей_ВычетБлокируется = новый СписокЗначений();
		ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ОС);
		ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.Оборудование);
		ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	КонецЕсли; 
	
	Для каждого СтрокаТаблицыДвиженияПартий из ТаблицаДвиженийПартий Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДвиженияПартий.СчетФактура) Тогда
			// Обрабатываем только записи с заполненными счетами-фактурами
			Продолжить;
		КонецЕсли;
		
		Если не ТаблицаДвиженийПартий.Колонки.Найти("ОбъектСтроительства")=Неопределено 
			и ЗначениеЗаполнено(СтрокаТаблицыДвиженияПартий.ОбъектСтроительства)
			Тогда
			ОбъектОСиНМА = СтрокаТаблицыДвиженияПартий.ОбъектСтроительства;
			Состояние 	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
			Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
       Иначе
			ВидыСубконтоСчетаЗатрат = СтрокаТаблицыДвиженияПартий.КорСчетСписанияБУ.ВидыСубконто;
			Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
				Если Не (СтрокаТаблицыДвиженияПартий["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено) Тогда
					Если (ТипЗнч(СтрокаТаблицыДвиженияПартий["КорСубконтоСписанияБУ" + НомерСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства")) Тогда
						ОбъектОСиНМА = СтрокаТаблицыДвиженияПартий["КорСубконтоСписанияБУ" + НомерСубконто];
						Состояние 	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
						Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
						Прервать;
					ИначеЕсли (ТипЗнч(СтрокаТаблицыДвиженияПартий["КорСубконтоСписанияБУ" + НомерСубконто]) = Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
						ОбъектОСиНМА = СтрокаТаблицыДвиженияПартий["КорСубконтоСписанияБУ" + НомерСубконто];
						Состояние 	= Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
						Событие		= Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию;
						Прервать;
					КонецЕсли;	
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		Если ОбъектОСиНМА = Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Объект строительства не указан!");
		ИначеЕсли ОбъектОСиНМА = Справочники.НематериальныеАктивы.ПустаяСсылка() Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Объект НМА не указан!");
		ИначеЕсли ОбъектОСиНМА = Неопределено Тогда
			//В структуре шапки нет объекта строительства или НМА
			Продолжить;
		КонецЕсли;	
		
		
		
		СтрокаТаблицыДвижений_НДСпоОСиНМА = ТаблицаДвижений_НДСпоОСиНМА.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДвижений_НДСпоОСиНМА,СтрокаТаблицыДвиженияПартий);
		
		// Колонка Стоимость у нас будет фактически колонкой СуммаБезНДС рег. НДСпоОСиНМА
		СтрокаТаблицыДвижений_НДСпоОСиНМА.Стоимость = СтрокаТаблицыДвижений_НДСпоОСиНМА.Стоимость - СтрокаТаблицыДвижений_НДСпоОСиНМА.НДС;
		
		Если ОсобыеУсловияБлокировкиВычета2006 Тогда
			СтрокаТаблицыДвижений_НДСпоОСиНМА.НеВлияетНаВычет = (ВидыЦенностей_ВычетБлокируется.НайтиПоЗначению(СтрокаТаблицыДвижений_НДСпоОСиНМА.ВидЦенности) = неопределено);
		КонецЕсли; 
		
		СтрокаТаблицыДвижений_НДСпоОСиНМА.Объект = ОбъектОСиНМА;
		СтрокаТаблицыДвижений_НДСпоОСиНМА.Состояние = Состояние;
		СтрокаТаблицыДвижений_НДСпоОСиНМА.Событие = Событие;
		
	КонецЦикла;
	
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Стоимость.Имя = "СуммаБезНДС";

	Если ТаблицаДвижений_НДСпоОСиНМА.Количество() > 0 тогда
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Движения.Период,"Период");
		Движения.Вставить("ИзмененыДвиженияНДСпоОСиНМА", Истина);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// НДС ПРОИЗВОДСТВА

Процедура СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ)
	
	Если Не УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда
	
		ТаблицаНДСКосвенныеРасходы = ДанныеДляОбработки.СкопироватьКолонки();
	
		Для каждого СтрокаДокумента из ДанныеДляОбработки Цикл

			Если ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтрокаДокумента.Организация, СтрокаДокумента.НоменклатурнаяГруппа, СтруктураПараметров) Тогда
				
				Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНезавершенноеПроизводство", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,СтрокаДокумента);
				
				Движение.Активность            = Истина;
				Движение.ВидДвижения           = ВидДвиженияНакопления.Приход;
				Движение.СчетУчета             = СтрокаДокумента.КорСчетБУ;
				Движение.Затрата               = СтрокаДокумента.Номенклатура;
				Движение.ХарактеристикаЗатраты = СтрокаДокумента.ХарактеристикаНоменклатуры;
				Движение.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;
				
				СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
				УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаДокумента.Номенклатура, СтруктураРеквизитов);
		
				Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
					Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
					Движение.Заказ = СтрокаДокумента.ЗаказСписания;
				ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
					Движение.Заказ = СтрокаДокумента.Заказ;
				Иначе
					Движение.Заказ = Неопределено;
				КонецЕсли;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента.НоменклатурнаяГруппа) тогда
				НоваяСтрока = ТаблицаНДСКосвенныеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
			КонецЕсли;

		КонецЦикла;
		
	Иначе
		
		ТаблицаНДСКосвенныеРасходы = ДанныеДляОбработки.Скопировать();

	КонецЕсли;
	
	Если ТаблицаНДСКосвенныеРасходы.Количество() > 0 тогда
		// Списываем на косвенные расходы
		СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСКосвенныеРасходы, СтруктураПараметров, Отказ);	
	КонецЕсли;

КонецПроцедуры//СформироватьДвиженияНДСНезавершенноеПроизводство()

// Возвращает признак принадлежности номенклатурной группы к реализации по ставке 0% и без НДС
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(Организация, НоменклатурнаяГруппа, СтруктураПараметров) Экспорт
	
	Возврат СтруктураПараметров.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.НайтиСтроки(Новый Структура("НоменклатурнаяГруппа, Организация", НоменклатурнаяГруппа, Организация)).Количество()>0;
	
КонецФункции // ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтрокаДокумента.НоменклатурнаяГруппа, СтруктураПараметров)

// Возвращает номенклатурные группы для реализации по ставке 0% и без НДС 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0(ДатаКон, МассивОрганизаций, СтруктураПараметров) Экспорт
	
	Инд=0;
	Если ТипЗнч(МассивОрганизаций) = Тип("Массив") Тогда
		Пока Инд<МассивОрганизаций.Количество() Цикл
			Если УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров)=Ложь Тогда
				МассивОрганизаций.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.Организация,
	//|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.НоменклатурнаяГруппа
	//|ИЗ
	//|	РегистрСведений.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.СрезПоследних(&ДатаКон, Организация В (&МассивОрганизаций)) КАК НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних
	//|
	//|ГДЕ
	//|	(НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.СложныйУчетНДС = ИСТИНА)");
	// }}Новый код:
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.Организация,
	|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.НоменклатурнаяГруппа
	|ИЗ
	|	РегистрСведений.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.СрезПоследних(&ДатаКон, Организация В (&МассивОрганизаций)) КАК НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних
	|
	|ГДЕ
	|	(НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.СложныйУчетНДС = ИСТИНА)");
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0()

//////////////////////////////////////////////////////////////////////////
// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

Процедура ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаВозвратов, Отказ, Заголовок)

	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ОрганизацияПрименяетУСН
		И НЕ (СтруктураШапкиДокумента.Свойство("ВедетсяУчетНДСПоФЗ134") И СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	ИначеЕсли ТаблицаВозвратов.Количество()=0 Тогда
		// Возврат товаров не осуществлялся
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ВидОперации") и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Это не наши ценности (были даны в переработку), следовательно НДС по ним учитывать не нужно
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДС;
	
	
	ТаблицаПоПартиямБУ = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаВозвратов, СтруктураШапкиДокумента, СтруктураПараметров);
	
	ТаблицаПоПартиямБУ.Колонки.Добавить("НомерСтрокиТаблицыПоПартиямБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	НомерСтроки = 0;
	Для каждого СтрокаПартииБУ Из ТаблицаПоПартиямБУ Цикл
		НомерСтроки = НомерСтроки +1;
		СтрокаПартииБУ.НомерСтрокиТаблицыПоПартиямБУ = НомерСтроки;
	КонецЦикла; 
	
	//////////////////////////////////////////////////////////////////////////
	// Попытка списания товаров по партионному учету НДС
		
	/////////////////////////////////////////////////////////////////////////////////
	
	//При учете "По средней" или если партионный учет по БУ не ведется - партия может быть незаполнена.
	Если ТаблицаПоПартиямБУ.Колонки.Найти("Партия") = Неопределено Тогда
		ТаблицаПоПартиямБУ.Колонки.Добавить("Партия");
	КонецЕсли; 
	
	ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПоПартиямБУ.Скопировать(), Отказ, Заголовок, Истина, Ложь, СтруктураПараметров);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственое списание.
	Если не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии найдены (хотя бы частично). Отразим в партионном учете НДС.
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
		СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров", Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Период,"Период");
		
		// Делаем не расход, а сторно прихода по регистру.
		Для каждого СтрокаПартии Из ТаблицаДвиженийПартии Цикл
			СтрокаПартии.Стоимость	= - СтрокаПартии.Стоимость;
			СтрокаПартии.НДС		= - СтрокаПартии.НДС;
			СтрокаПартии.Количество	= - СтрокаПартии.Количество;
		КонецЦикла; 
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по ОС - ТМЦ могли принадлежать к будущим ОС,
		// в этом случае при возврате необходимо снять блокировку с вычета.
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров, Отказ);
		// НДС по ОС
		/////////////////////////////////////////////////////////////////////////////////
		
	КонецЕсли; 
	// НДС по партиям - отразить непосредственое списание.
	///////////////////////////
	СуммаНДСПоСтрокам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоПартиямБУ,Новый структура("НомерСтрокиТаблицыПоПартиямБУ, НДС,СуммаБезНДС"));
	
	ТаблицаПроводокПоНДС = Новый ТаблицаЗначений();
	ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтрокиТаблицыПоПартиямБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПроводокПоНДС.Колонки.Добавить("СчетФактура");
	ТаблицаПроводокПоНДС.Колонки.Добавить("Поставщик", Новый ОписаниеТИпов("СправочникСсылка.Контрагенты"));
	ТаблицаПроводокПоНДС.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаПроводокПоНДС.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПроводокПоНДС.Колонки.Добавить("НДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// Попытка списания товаров по партионному учету НДС
	//////////////////////////////////////////////////////////////////////////
	
	СокращеннаяТаблицаСФВозвратов = ТаблицаНДСПартииСписания.Скопировать();
	СокращеннаяТаблицаСФВозвратов.Свернуть("НомерСтрокиДокумента, НомерСтрокиТаблицыПоПартиямБУ, СчетФактура,Номенклатура,ВидЦенности, СтавкаНДС, НДСВключенВСтоимость,СчетУчетаНДС, ДокументПартии, ПартияСовпадаетСУказаннымДокументомДляВозврата","Количество,Стоимость, НДС,КорВалютнаяСуммаНДСЗадолженностиБУ");
	СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Определение поставщика по счету-фактуре
	Если СокращеннаяТаблицаСФВозвратов.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",       ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СокращеннаяТаблицаСФВозвратов.ВыгрузитьКолонку("СчетФактура"),Истина));
		Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
		// {{KM WARE Акулов А.И. 14.07.2015 начало
		// не достаточно прав
		// {{Старый код:
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	НДСПредъявленныйОбороты.Поставщик,
		//|	НДСПредъявленныйОбороты.СчетФактура
		//|ИЗ
		//|	РегистрНакопления.НДСПредъявленный.Обороты(
		//|		,
		//|		,
		//|		,
		//|		Организация = &Организация
		//|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
		//|ГДЕ
		//|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
		// }}Новый код:
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НДСПредъявленныйОбороты.Поставщик,
		|	НДСПредъявленныйОбороты.СчетФактура
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Обороты(
		|		,
		|		,
		|		,
		|		Организация = &Организация
		|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
		|ГДЕ
		|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
		// }}KM WARE Акулов А.И. 14.07.2015 окончание
		КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
		СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		Для каждого СтрокаОбрабатываемая  Из СокращеннаяТаблицаСФВозвратов Цикл
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
			
			СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
			Если не СтрокаКонтрагента = Неопределено Тогда
			    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	ОтразитьВКнигеПродаж =  (СтруктураШапкиДокумента.Дата>='20060530');

	Если ОтразитьВКнигеПродаж Тогда
		Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
		Иначе
			ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаВозврата Из ТаблицаПоПартиямБУ Цикл
		
		Если ОтразитьВКнигеПродаж И СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			Если СтрокаВозврата.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			ИначеЕсли СтрокаВозврата.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			КонецЕсли;
		КонецЕсли;
		
		УказанДокументВозврата = ЗначениеЗаполнено(СтрокаВозврата.ДокументПартии) И Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат;
		
		ОтработанНДСпоСтроке = СуммаНДСПоСтрокам.Найти(СтрокаВозврата.НомерСтрокиТаблицыПоПартиямБУ,"НомерСтрокиТаблицыПоПартиямБУ");
		
		СтрокиПартийВозврата = СокращеннаяТаблицаСФВозвратов.НайтиСтроки(Новый Структура("НомерСтрокиТаблицыПоПартиямБУ",СтрокаВозврата.НомерСтрокиТаблицыПоПартиямБУ));
		
		Если ОтразитьВКнигеПродаж Тогда
		    Если СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			    // НДС был включен в стоимость а не отражен в книге покупок.
				// Формирование записи в книге продаж не требуется, так как НДС в книге покупок не отражался)
			Иначе
				//Отработка по регистру НДС начисленный возврата поставщику

				СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
				СтрокаДвижения.Период 		= СтруктураПараметров.Период;
				СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
				СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижения.ВидНачисления = ВидНачисления;
				
				СтрокаДвижения.СуммаБезНДС	= СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС			= СтрокаВозврата.НДС;
				СтрокаДвижения.Событие		= ?(Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат, 
				                                Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС,
												Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
				// Если возврат отражается как начисления, проводки формируются по таблице начисления
				Если СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
					ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
					ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаВозврата);
					ПроводкаНДСПоСтроке.НДС 		= СтрокаВозврата.НДС;
					ПроводкаНДСПоСтроке.НДСВал 		= СтрокаВозврата.КорВалютнаяСуммаНДСЗадолженностиБУ;
				КонецЕсли;
					
			КонецЕсли; 
		ИначеЕсли ?(УказанДокументВозврата,Истина, не СтруктураШапкиДокумента.НДСВключенВСтоимость) Тогда
		// Сторнирование поступления НДС по регистру "НДС предъявленный"
			СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
		
			СтрокаДвижения.Период 		= СтруктураПараметров.Период;
			СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
			СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
			СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
			СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
				
			СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		КонецЕсли; 
		
	    Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			Для каждого СтрокаПартииВозврата Из СтрокиПартийВозврата Цикл
				
				Если СтрокаПартииВозврата.ПартияСовпадаетСУказаннымДокументомДляВозврата Тогда
					Если не СтрокаПартииВозврата.Количество = 0 тогда
						// По партиеобразующему движению
						Если СтрокаПартииВозврата.НДСвключенВСтоимость Тогда
							Если ОтразитьВКнигеПродаж Тогда
								Если не СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
									//Отмена отражение возврата поставщику в регистре "НДС начисленный"
									//по строке списаной партии
									СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
									СтрокаДвижения.Период 		= СтруктураПараметров.Период;
									СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
									СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
									СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
									СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
									СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
									СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
									СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
										
									СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
									СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
									СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
									СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
								 КонецЕсли;
								
							Иначе
								// Сторно расхода по регистру "НДС предъявленный", произведенного при включении НДС в стоимость
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
								СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
								// Сторнирование записи по регистру "НДС включенный в стоимость" записи, введенной ранее
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
								СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
							КонецЕсли;
								
							// Формирование проводки по НДС не требуется, был включен в стоимость ранее
							ОтработанНДСпоСтроке.НДС = ОтработанНДСпоСтроке.НДС - СтрокаПартииВозврата.НДС;
							ОтработанНДСпоСтроке.СуммаБезНДС = ОтработанНДСпоСтроке.СуммаБезНДС - СтрокаПартииВозврата.СуммаБезНДС;
							
						Иначе
							// Формирование проводки требуется, НДС считаем отработанным
							ОтработанНДСпоСтроке.НДС = ОтработанНДСпоСтроке.НДС - СтрокаПартииВозврата.НДС;
							ОтработанНДСпоСтроке.СуммаБезНДС = ОтработанНДСпоСтроке.СуммаБезНДС - СтрокаПартииВозврата.СуммаБезНДС;
							
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							
							Если ОтразитьВКнигеПродаж и СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
								//Отражение возврата поставщику в регистре "НДС начисленный"
								//Не отражался ранее так как предполагалось, что НДС включен в стоимость 
								// (не отражен в книге покупок) и не требует отражения в книге продаж
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
								СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
								СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
								СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
										
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
							 КонецЕсли;
							
						КонецЕсли;
					Иначе 
						// По доп. расходам
						Если не СтрокаПартииВозврата.НДСвключенВСтоимость Тогда
							// Если по доп. расходам не производилось включение НДС в стоимость ранее, необходимо сделать это сейчас,
							// так как ценности не используются и не будут использоваться в дальнейшем для деятельности с НДС.
							
							Если Не ОтразитьВКнигеПродаж Тогда
								// Расход по регистру "НДС предъявленный" (включении НДС в стоимость)
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
								ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
								ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
								
								// Формирование записи по регистру "НДС включенный в стоимость"
								СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
								СтрокаДвижения.Период 		= СтруктураПараметров.Период;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				иначе //не Если СтрокаПартииВозврата.ПартияСовпадаетСУказаннымДокументомДляВозврата
					
					// Спсываем другую партию. Включение в стоимость по флагу документа "НДС включен в стоимость"
					Если не СтрокаПартииВозврата.НДСвключенВСтоимость = СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						ЗнакОперации = ?(СтруктураШапкиДокумента.НДСвключенВСтоимость,1,-1);// 1 включение; -1 исключение
						
						// Движение по регистру "НДС предъявленный"
						Если Не ОтразитьВКнигеПродаж Тогда
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
							СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
							
							СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
							
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * СтрокаПартииВозврата.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * СтрокаПартииВозврата.НДС;
							
							СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
							Если не ЗнакОперации = 1 Тогда
								ПроводкаНДСПоСтроке.НДС 		= ЗнакОперации * СтрокаПартииВозврата.НДС;
							КонецЕсли; 
							
						
							// Формирование записи по регистру "НДС включенный в стоимость"
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
							СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * СтрокаПартииВозврата.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * СтрокаПартииВозврата.НДС;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			
			Если не ОтработанНДСпоСтроке.НДС =0 или не ОтработанНДСпоСтроке.СуммаБезНДС = 0 тогда
				// Не вся сумма НДС по строке отработана
				Если УказанДокументВозврата Тогда
					Если СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						// Необходимо отменить включение НДС в стоимость по указанному документу
						// Формирование проводки не требуется
						ЗнакОперации = -1;// 1 включение; -1 исключение
						
						Если Не ОтразитьВКнигеПродаж Тогда
							// Движение по регистру "НДС предъявленный"
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСПредъявленный", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаВозврата.ДокументПартии;
							СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
							
							СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
							
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * ОтработанНДСпоСтроке.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * ОтработанНДСпоСтроке.НДС;
							
							СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							// Формирование записи по регистру "НДС включенный в стоимость"
							СтрокаДвижения = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСВключенныйВСтоимость", СтруктураПараметров);
							СтрокаДвижения.Период 		= СтруктураПараметров.Период;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаВозврата.ДокументПартии;
							СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * ОтработанНДСпоСтроке.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * ОтработанНДСпоСтроке.НДС;
						КонецЕсли;
					Иначе
						Если не ОтработанНДСпоСтроке.НДС = 0 Тогда
							// Требуется проводка по отнесению НДС на счет расчетов по претензиям
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаВозврата);
							
							ПроводкаНДСПоСтроке.СчетФактура	= СтрокаВозврата.ДокументПартии;
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							ПроводкаНДСПоСтроке.НДС 		= ОтработанНДСпоСтроке.НДС;
						КонецЕсли; 
					КонецЕсли; 
				Иначе //не Если УказанДокументВозврата Тогда
					Если СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						// НДС был включен в стоимость, но формирование сторнирующих записей по регситрам не требуется,
						// так как не был документ для списания, а по возврату записей в регистре НДС включенный в стоимость нет
						// Формирование проводки не требуется
					Иначе
						Если не ОтработанНДСпоСтроке.НДС = 0 Тогда
							// Требуется проводка по отнесению НДС на счет расчетов по претензиям
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаВозврата);
							
							ПроводкаНДСПоСтроке.СчетФактура	= СтруктураШапкиДокумента.Ссылка;
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							ПроводкаНДСПоСтроке.НДС 		= ОтработанНДСпоСтроке.НДС;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			// Сторнируем начисление агентского НДС.
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
				 
				СтрокаДвижений_НДСНачисленный = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("НДСНачисленный", СтруктураПараметров);
				
				СтрокаДвижений_НДСНачисленный.Период 		= СтруктураПараметров.Период;
				СтрокаДвижений_НДСНачисленный.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижений_НДСНачисленный.Покупатель	= СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений_НДСНачисленный.СчетФактура	= ?(УказанДокументВозврата, СтрокаВозврата.ДокументПартии, СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
				
				СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижений_НДСНачисленный.НДС			= (-1)* СтрокаВозврата.НДС;
				
				СтрокаДвижений_НДСНачисленный.Событие 		= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
				СтрокаДвижений_НДСНачисленный.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
				
				СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
				
				СтрокаДвижений_НДСНачисленный.СчетУчетаНДС	= СчетНДС;
				
				// Формирование проводки по сторнированию начисления НДС при исп. обязанностей налогового агента
				Проводка =  СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
				
				Проводка.Период = СтруктураПараметров.Период;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма = СтрокаВозврата.НДС;
				Проводка.СписаниеПартий = Истина;
				Проводка.НДСПродукции = Истина;
				Проводка.Содержание = "Сторнирован НДС, начисленный в качестве налогового агента";
				
				Проводка.СчетДт = СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
					
				Если Проводка.СчетКт.Валютный Тогда
					Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
						СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
					КонецЕсли; 
					
					Проводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаВозврата.КорВалютнаяСуммаНДСЗадолженностиБУ;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ОтразитьВКнигеПродаж и СтруктураПараметров.ТаблицаДвиженийНДСНачисленный.Количество()>1 Тогда
		ТаблицаДвижений_НДСНачисленный = СтруктураПараметров.ТаблицаДвиженийНДСНачисленный;
		// Сворачивание записей регистра "НДС Начисленный"
		СуммовыеКолонки = "СуммаБезНДС, НДС";
		ГруппировочныеКолонки = "";
		Для каждого Колонка Из ТаблицаДвижений_НДСНачисленный.Колонки Цикл
			Если Колонка.Имя = "СуммаБезНДС" или Колонка.Имя = "НДС" Тогда
				Продолжить;
			Иначе
				ГруппировочныеКолонки = ГруппировочныеКолонки + Колонка.Имя+ ",";
			КонецЕсли; 
		КонецЦикла;
		ГруппировочныеКолонки = Лев(ГруппировочныеКолонки, СтрДлина(ГруппировочныеКолонки)-1);
			
		ТаблицаДвижений_НДСНачисленный.Свернуть(ГруппировочныеКолонки,СуммовыеКолонки); 
			
		// Удаление записей с пустыми суммами
		СтрокиКУдалению =  ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС",0,0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли; 

	//Формирование проводок по отнесению НДС на счет расчетов по претензиям
	НомерСтрокиТаблицыПоПартиямБУ = 0;
	Коэффициент = 0;
	
	Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ТаблицаПроводокПоНДС.Свернуть("НомерСтрокиДокумента, НомерСтрокиТаблицыПоПартиямБУ, Поставщик, СчетФактура, СчетУчетаНДС","НДС, НДСВал");
	Иначе
		ТаблицаПроводокПоНДС.Свернуть("НомерСтрокиДокумента","НДС, НДСВал");
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТаблицаПроводокПоНДС Цикл
	    Если СтрокаТЧ.НДС =0 Тогда
			Продолжить;
		КонецЕсли; 
		Проводка =  СтруктураПараметров.ДвиженияХозрасчетный.Добавить();

		Проводка.Период = СтруктураПараметров.Период;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание = "Возврат поставщику";
		Проводка.СписаниеПартий = Истина;
		Проводка.НДСПродукции = Истина;
		Проводка.Сумма = СтрокаТЧ.НДС;

		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
		Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда

			Если Проводка.СчетДт.Валютный Тогда
				Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
					СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
				КонецЕсли; 
				Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
				Иначе
					Если не НомерСтрокиТаблицыПоПартиямБУ = СтрокаТЧ.НомерСтрокиТаблицыПоПартиямБУ Тогда
						НомерСтрокиТаблицыПоПартиямБУ = СтрокаТЧ.НомерСтрокиТаблицыПоПартиямБУ;
						СтрокаТаблицыПоПартиямБУ = ТаблицаПоПартиямБУ.Найти(НомерСтрокиТаблицыПоПартиямБУ,"НомерСтрокиТаблицыПоПартиямБУ");
						Если не СтрокаТаблицыПоПартиямБУ.НДС = 0 Тогда
							Коэффициент = ?(СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаНДСЗадолженностиБУ =0,1,СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаНДСЗадолженностиБУ/СтрокаТаблицыПоПартиямБУ.НДС);
						Иначе
							Коэффициент = ?(СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаЗадолженностиБУ =0 или СтрокаТаблицыПоПартиямБУ.СуммаЗадолженностиБУ = 0,1,СтрокаТаблицыПоПартиямБУ.КорВалютнаяСуммаЗадолженностиБУ/СтрокаТаблицыПоПартиямБУ.СуммаЗадолженностиБУ);
						КонецЕсли; 
					КонецЕсли; 
					Проводка.ВалютнаяСуммаДт = Окр(Проводка.Сумма*Коэффициент,2);
				КонецЕсли; 
				
				СтрокаТЧ.НДСВал = Проводка.ВалютнаяСуммаДт;
			КонецЕсли;
				
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",     СтрокаТЧ.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФПолученные",    СтрокаТЧ.СчетФактура);
			
		Иначе
			Если Проводка.СчетДт.Валютный Тогда
				Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
					СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
				КонецЕсли;
				
				Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
				Иначе
					Проводка.ВалютнаяСуммаДт = СтрокаТЧ.НДСВал;
				КонецЕсли; 
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвратНДС = ТаблицаПроводокПоНДС.Итог("НДС");
	ВозвратНДСВал = ТаблицаПроводокПоНДС.Итог("НДСВал");
	
	СтруктураПараметров.Вставить("ВозвратНДС",   ВозвратНДС);
	СтруктураПараметров.Вставить("ВозвратНДСВал",ВозвратНДСВал);
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС И Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
		//ПроводкаНДСПоСтроке.НомерСтрокиТаблицыПоПартиямБУ = СтрокаВозврата.НомерСтрокиТаблицыПоПартиямБУ;
		//ПроводкаНДСПоСтроке.СчетФактура	= СтрокаВозврата.ДокументПартии;
		//ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
		ПроводкаНДСПоСтроке.НДС 		= (-1) * ТаблицаПоПартиямБУ.Итог("НДС");
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям.Валютный Тогда
			ПроводкаНДСПоСтроке.НДСВал 		= (-1) * ТаблицаПоПартиямБУ.Итог("КорВалютнаяСуммаНДСЗадолженностиБУ");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ ПЕРЕДАЧИ В УЧЕТ НДС

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок, СписаниеОС = Ложь) Экспорт
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	//**************************************************
	// Возможно получение информации из шапки документа
	СтруктураКолонок.Вставить("Организация");
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("ОтражатьВБухгалтерскомУчете");
	СтруктураКолонок.Вставить("ОтражатьВНалоговомУчете");
	// Возможно получение информации из шапки документа
	//**************************************************
	
	СтруктураКолонок.Вставить("Движение"); // Часть информации о проведении получается из параметров движения списанной партии
	СтруктураКолонок.Вставить("НомерСтрокиДокумента"); 
	//СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("ВидЦенности");// ? Вид ценности, определенный в документе для начисления
	СтруктураКолонок.Вставить("Склад");
	СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("КорСчетБУ");
	СтруктураКолонок.Вставить("СчетДоходовБУ");
	
	СтруктураКолонок.Вставить("СуммаЗадолженностиБУ");
	СтруктураКолонок.Вставить("КорВалютнаяСуммаНДСЗадолженностиБУ");// Возврат поставщику, НА Комитент
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СтавкаНДС");
	
	СтруктураКолонок.Вставить("СтатьяЗатрат"); 
	
	// Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("СтатьяЗатратНДС");
	СтруктураКолонок.Вставить("НазначениеИспользования"); // Для передачи материалов в экспл.
	СтруктураКолонок.Вставить("СчетРасходовБУ"); // Возврат от покупателя
	СтруктураКолонок.Вставить("НоменклатурнаяГруппа");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("НомерКорСтроки");
	
	
	СтруктураКолонок.Вставить("ВидТабличнойЧасти");// Для анализа отражения в НДС
	СтруктураКолонок.Вставить("КодОперацииПартииТоваров");// Для анализа отражения в НДС
	
	СтруктураКолонок.Вставить("ДокументОприходования");
	
	// Колонки по набору условий
	
	//***************************************************
	// Возврат поставщику
	Если НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = НЕОПРЕДЕЛЕНО Тогда
	
		//СтруктураКолонок.Вставить("НомерСтроки"); // Возврат поставщику = НомерСтрокиТаблицыПоПартиямБУ
		СтруктураКолонок.Вставить("КорВалютнаяСуммаЗадолженностиБУ");
		СтруктураКолонок.Вставить("СчетУчетаНДС");
		//СтруктураКолонок.Вставить("ДокументПартии");
		СтруктураКолонок.Вставить("КорСчетЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ1");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ2");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ3");
		
	КонецЕсли;
	// Возврат поставщику
	//***************************************************
	
	
	//***************************************************
	// Возврат от пукумателя
	Если НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = НЕОПРЕДЕЛЕНО Тогда
		СтруктураКолонок.Вставить("СубконтоБУ");
		СтруктураКолонок.Вставить("КорСубконтоБУ2");
	КонецЕсли;	
	// Возврат от пукумателя
	//***************************************************
	
	//***************************************************
	// Сложный учет НДС
	СтруктураКолонок.Вставить("Партия");
	СтруктураКолонок.Вставить("ДокументПартии");
	СтруктураКолонок.Вставить("ДокументПередачи");
	СтруктураКолонок.Вставить("ВестиПартионныйУчетПоСериям"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("СерияНоменклатуры"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("ЗаказПартии"); // Для парт.учета и ОС (если не ведется сложный учет НДС)
	СтруктураКолонок.Вставить("ОбъектСтроительства"); // Для передачи оборудования в монтаж
	
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		СтруктураКолонок.Вставить("СчетФактура");
		СтруктураКолонок.Вставить("Покупатель");
		СтруктураКолонок.Вставить("ДатаСФ");
		СтруктураКолонок.Вставить("ВыставленСФ");
	КонецЕсли;
	
	Если УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = истина 
	  Или (Не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПринятиеКУчетуОС) = Неопределено) 
	  Или СписаниеОС
	  Тогда
		
		//СтруктураКолонок.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей"); // Для парт.учета 
		
		//***************************************************
		// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
		СтруктураКолонок.Вставить("ЗаказСписания"); // Для парт.учета
		
		//СтруктураКолонок.Вставить("КорСчетБУ");
		СтруктураКолонок.Вставить("КорСубконтоБУ1");
		СтруктураКолонок.Вставить("КорСубконтоБУ2");
		СтруктураКолонок.Вставить("КорСубконтоБУ3");
		
		СтруктураКолонок.Вставить("СчетУчетаНУ");
		СтруктураКолонок.Вставить("КорСчетНУ");
		СтруктураКолонок.Вставить("КорСубконтоНУ1");
		СтруктураКолонок.Вставить("КорСубконтоНУ2");
		СтруктураКолонок.Вставить("КорСубконтоНУ3");
		СтруктураКолонок.Вставить("ПостояннаяРазница");
		СтруктураКолонок.Вставить("ВременнаяРазница");
		
		// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
		//***************************************************
		
		//*****************************
		// Для последующего поступления
		Если НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтКомиссионера) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПереработчика) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПоОперацииСтоимость) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПродукцииФиксНаСклад) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Комплектация) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.КорректировкаСерийИХарактеристик) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаВПереработку) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаНаКомиссию) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПеремещениеМеждуСкладами) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РезервированиеПодЗаказ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СнятиеРезерваПодЗаказ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВключениеАктиваВСоставМПЗ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СписаниеПоОрдеру) = неопределено
			Тогда
			////СтруктураКолонок.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателейПоступление"); // Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ИзменитьСклад");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("СкладПолучатель");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("КоличествоПоступление");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("СтоимостьПоступление");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("НоменклатураНовая");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ИзменитьСерию");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ИзменитьХарактеристику");// Для парт.учета . Поступление
			СтруктураКолонок.Вставить("СерияНоменклатурыНовая"); // Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ХарактеристикаНоменклатурыНовая"); // Для парт.учета . Поступление
			СтруктураКолонок.Вставить("ДокументОприходованияНовый");
			СтруктураКолонок.Вставить("Качество");// Включение НДС в стоимость/Исключение из стоимости . Поступление
			СтруктураКолонок.Вставить("КачествоНовое");// Включение НДС в стоимость/Исключение из стоимости . Поступление

		КонецЕсли; 
		// Для последующего поступления
		//*****************************
	КонецЕсли; 
	// Сложный учет НДС
	//***************************************************
	
КонецПроцедуры

Функция ПолучитьТаблицуПартийПоДокументу(СтруктураПараметров, ТаблицаСписания)
	
	// Партии могут списываться из регистров ПартииТоваровНаСкладахБухгалтерскийУчет и ПартииТоваровПереданныеБухгалтерскийУчет
	// Отберем из соответствующих таблиц партии с видом движения "расход"
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	ТаблицаПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.СкопироватьКолонки();
	ТаблицаПартий.Колонки.Добавить("РегистрУчета");
	Для каждого СтрокаПартииНаСкладах из ТаблицаСписания Цикл
		CтрокаПартии = ТаблицаПартий.Добавить();
		ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииНаСкладах);
		
		CтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		CтрокаПартии.КодОперации = СтрокаПартииНаСкладах.КодОперацииПартииТоваров;
		CтрокаПартии.СчетУчета =  СтрокаПартииНаСкладах.СчетУчетаБУ;
		
		CтрокаПартии.КорСубконто1 =  СтрокаПартииНаСкладах.КорСубконтоБУ1;
		CтрокаПартии.КорСубконто2 =  СтрокаПартииНаСкладах.КорСубконтоБУ2;
		CтрокаПартии.КорСубконто3 =  СтрокаПартииНаСкладах.КорСубконтоБУ3;
	КонецЦикла;
	
	Возврат ТаблицаПартий;
	
КонецФункции

Функция ПреобразоватьТаблицуСписанныхПартийДляНДС(СтруктураПараметров)
	
	Перем ВидыЦенностейПоСчетамУчета;
	
	СоответствиеЗаказов = Новый Соответствие;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	СписокИспользуемыхОпераций = Новый СписокЗначений;
	СписокИспользуемыхОпераций.ЗагрузитьЗначения(ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтруктураПараметров.ТаблицаСписанныхПартий.ВыгрузитьКолонку("КодОперацииПартииТоваров"),Истина, Истина));
	
	ЕстьСложныйУчетНДС = (УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = Истина);
		
	СписаниеОС = Ложь;
	Если Не ЕстьСложныйУчетНДС Тогда
		Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
			Если СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке
			Или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
			Или СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
			Или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств) Тогда
				СписаниеОС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Определение состава колонок 
	БазоваяСтруктураКолонок = Новый Структура;
	ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(СтруктураПараметров, СписокИспользуемыхОпераций, БазоваяСтруктураКолонок, СписаниеОС);
	
	ЕстьВозвратПоставщику	= (НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = Неопределено);
	
	ЕстьПоступлениеПоРезультатамСписания = (ЕстьСложныйУчетНДС Или СписаниеОС) И
	(НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтКомиссионера) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПереработчика) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПоОперацииСтоимость) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПродукцииФиксНаСклад) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Комплектация) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.КорректировкаСерийИХарактеристик) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаВПереработку) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаНаКомиссию) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПеремещениеМеждуСкладами) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РезервированиеПодЗаказ) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СнятиеРезерваПодЗаказ) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВключениеАктиваВСоставМПЗ) = неопределено);
	
	
	РаспределеннаяТаблица = СтруктураПараметров.ТаблицаСписанныхПартий.Скопировать(,ttk_ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(БазоваяСтруктураКолонок));
	
	Если ЕстьСложныйУчетНДС Тогда
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ1.Имя = "КорСубконтоСписанияБУ1";
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ2.Имя = "КорСубконтоСписанияБУ2";
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ3.Имя = "КорСубконтоСписанияБУ3";
		
		РаспределеннаяТаблица.Колонки.КорСубконтоНУ1.Имя = "КорСубконтоСписанияНУ1";
		РаспределеннаяТаблица.Колонки.КорСубконтоНУ2.Имя = "КорСубконтоСписанияНУ2";
		РаспределеннаяТаблица.Колонки.КорСубконтоНУ3.Имя = "КорСубконтоСписанияНУ3";
		
	ИначеЕсли НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено Тогда
		РаспределеннаяТаблица.Колонки.КорСубконтоБУ2.Имя = "КорСубконтоСписанияБУ2";
	КонецЕсли;
	
	РаспределеннаяТаблица.Колонки.СуммаНДС.Имя = "НДС";
	РаспределеннаяТаблица.Колонки.СуммаЗадолженностиБУ.Имя = "СуммаБезНДС";
	
	// Ключ - название колонки
	// Значение - описание типа для добавляемой колонки
	СтруктураКолонокРаспределеннойТаблицы = Новый Структура();
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("КорСчетСписанияБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("КорСчетСписанияНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаЦенности", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ПринятыеСчетУчетаБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ПринятыеСчетУчетаНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Ценность");
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Комиссионный", Новый описаниеТипов("Булево"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("УчетАгентскогоНДС", Новый описаниеТипов("Булево"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ДоговорКомиссии", Новый описаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетРасчетовСКомитентом", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ВидЦенности", Новый описаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Партия", РаспределеннаяТаблица.Колонки.ДокументОприходования.ТипЗначения);
	СтруктураКолонокРаспределеннойТаблицы.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Новый описаниеТипов("Булево"));
	СтруктураКолонокРаспределеннойТаблицы.Вставить("Подразделение",Новый описаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	СтруктураКолонокРаспределеннойТаблицы.Вставить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	Для Каждого Элемент из СтруктураКолонокРаспределеннойТаблицы цикл
		Если РаспределеннаяТаблица.Колонки.Найти(Элемент.Ключ) = Неопределено тогда
			Если Элемент.Значение = Неопределено Тогда
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ);
			Иначе
				РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ,Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("ДокументОприходования"),"Партия");
	РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("КорСчетБУ"),"КорСчетСписанияБУ");
	РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("Номенклатура"),"Ценность");
	Если ЕстьСложныйУчетНДС Тогда
		РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("ПодразделениеОрганизации"),"Подразделение");
		РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("КорСчетНУ"),"КорСчетСписанияНУ");
	КонецЕсли;
	
	СтруктураПоискаНУ = Новый Структура("НомерСтрокиДокумента, ДокументОприходования, ОтражатьВНалоговомУчете", , , Истина);
	СтрокаПартии = Новый Структура("ВидДвижения, Количество, КоличествоПоступление, СчетУчета, СерияНоменклатуры, Заказ, ДокументОприходования, КодОперации, Организация", , 0, 0);
	
	МассивСтрокКУдалению = Новый Массив();
	Для каждого СтрокаТаблицыСписания из РаспределеннаяТаблица цикл
		
		Если Не СтрокаТаблицыСписания.ОтражатьВБухгалтерскомУчете тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			Продолжить;
		КонецЕсли;
		
		РегистрУчета = "НаСкладах";
		
		ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаТаблицыСписания.Движение);
		
		Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Приход 
			И  Не СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			//ТаблицаСписанныхПартий, ошибочная ситуация: ВидДвижения = ВидДвиженияНакопления.Приход
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Расход 
  		  И  СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя тогда
			// Возврат текущего месяца учитывается как сторно реализации
			СтрокаПартии.Количество = - СтрокаПартии.Количество;
		КонецЕсли;		
		
		// НДС по таре не учитывается
		Если СтрокаТаблицыСписания.КодОперацииПартииТоваров = КодыОпераций.ПередачаТарыКонтрагенту 
		   Или СтрокаТаблицыСписания.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара
			тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыСписания.Количество <= 0 тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыСписания);
			//ТаблицаСписанныхПартий, ошибочная ситуация: СтрокаТаблицыСписания.Количество <= 0
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыСписания.Количество > СтрокаПартии.Количество тогда
			КоэффСписания = СтрокаПартии.Количество/СтрокаТаблицыСписания.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		СтрокаРаспределеннойТаблицы = СтрокаТаблицыСписания;
		
		СтрокаРаспределеннойТаблицы.СчетУчетаЦенности = СтрокаПартии.СчетУчета;
		СтрокаРаспределеннойТаблицы.СчетУчетаБУ		  = СтрокаПартии.СчетУчета;
		СтрокаРаспределеннойТаблицы.ВидЦенности	= ОпределитьВидЦенности(СтрокаРаспределеннойТаблицы.Номенклатура,СтрокаРаспределеннойТаблицы.СчетУчетаБУ,,,,,,,,ВидыЦенностейПоСчетамУчета);
		
		СтрокаРаспределеннойТаблицы.НДС = Окр(СтрокаТаблицыСписания.НДС * КоэффСписания,2,1);
		СтрокаРаспределеннойТаблицы.СуммаБезНДС = Окр(СтрокаТаблицыСписания.СуммаБезНДС * КоэффСписания,2,1) - СтрокаРаспределеннойТаблицы.НДС;
		
		// Возврат поставщику, НА Комитент
		СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаНДСЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаНДСЗадолженностиБУ* КоэффСписания,2,1);
		//***************************************************
		// Возврат поставщику
		Если ЕстьВозвратПоставщику Тогда
			СтрокаРаспределеннойТаблицы.КорВалютнаяСуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ* КоэффСписания,2,1);
		КонецЕсли;	
		// Возврат поставщику
		//***************************************************
		
		//***************************************************
		// Сложный учет НДС
		Если ЕстьСложныйУчетНДС Тогда
			// Серия в документе может отличаться от серии в партии
			// Например заказ покупателя с пустой серией может списывать партии с непустой серией
			СтрокаРаспределеннойТаблицы.СерияНоменклатуры = СтрокаПартии.СерияНоменклатуры;
			
			//***************************************************
			// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
			Если не ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ1) тогда
				СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ1 = СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ1;
			КонецЕсли;
			Если не ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2) тогда
				СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2 = СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ2;
			КонецЕсли;
			Если не ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2) тогда
				СтрокаРаспределеннойТаблицы.КорСубконтоСписанияНУ2 = СтрокаРаспределеннойТаблицы.КорСубконтоСписанияБУ2;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ) тогда
				СтрокаРаспределеннойТаблицы.КорСчетСписанияБУ = СтрокаРаспределеннойТаблицы.СчетУчетаБУ;
			КонецЕсли;
			
			Если СтрокаПартии.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка() тогда
				ОбособленныйУчетТоваровПоЗаказамПокупателей = СоответствиеЗаказов[СтрокаПартии.Заказ];
				
				Если ОбособленныйУчетТоваровПоЗаказамПокупателей = Неопределено Тогда
					
					СтруктураЗаказа = Новый Структура("ДоговорКонтрагента");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.Заказ, СтруктураЗаказа);
					
					СтруктураДоговора = Новый Структура("ОбособленныйУчетТоваровПоЗаказамПокупателей");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураЗаказа.ДоговорКонтрагента, СтруктураДоговора);
					
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей;
					СоответствиеЗаказов.Вставить(СтрокаПартии.Заказ, СтруктураДоговора.ОбособленныйУчетТоваровПоЗаказамПокупателей);
					
				Иначе
					СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
				КонецЕсли;
			Иначе
				СтрокаРаспределеннойТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
			КонецЕсли;
			// Включение НДС в стоимость/Исключение из стоимости
			//***************************************************
			
			//*****************************
			// Для последующего поступления
			Если ЕстьПоступлениеПоРезультатамСписания Тогда
				Если СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
					СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
				КонецЕсли;
			КонецЕсли; 
			// Для последующего поступления
			//*****************************
		КонецЕсли; 
		// Сложный учет НДС
		//***************************************************
		
		СтрокаРаспределеннойТаблицы.Количество = СтрокаПартии.Количество;
		СтрокаРаспределеннойТаблицы.КоличествоПоступление = СтрокаПартии.КоличествоПоступление;
		
		СтрокаРаспределеннойТаблицы.Комиссионный  = УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаРаспределеннойТаблицы.СчетУчетаБУ);
		
		Если СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.Реализация
			ИЛИ СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия
			ИЛИ СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница
			ИЛИ СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = КодыОпераций.ВозвратОтПокупателя
			Тогда
			
			Если СтрокаРаспределеннойТаблицы.Комиссионный тогда
				СтруктураРеквизитовДокумента = Новый Структура("Контрагент,ДоговорКонтрагента");
				Если ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) Тогда
					
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтрокаПартии.ДокументОприходования, СтруктураРеквизитовДокумента);
					СтрокаРаспределеннойТаблицы.ДоговорКомиссии = СтруктураРеквизитовДокумента.ДоговорКонтрагента;
					СтруктураРеквизитовДоговора = Новый Структура("УчетАгентскогоНДС");
					УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураРеквизитовДокумента.ДоговорКонтрагента, СтруктураРеквизитовДоговора);
					
					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = СтруктураРеквизитовДоговора.УчетАгентскогоНДС;
					СчетаРасчетов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(СтрокаТаблицыСписания.Организация, СтруктураРеквизитовДокумента.Контрагент, 
					СтруктураРеквизитовДокумента.ДоговорКонтрагента);
					
					СтрокаРаспределеннойТаблицы.СчетРасчетовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
				Иначе
					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = Ложь;
					СтрокаРаспределеннойТаблицы.Комиссионный = Ложь;
				КонецЕсли; 
				
			КонецЕсли;
		КонецЕсли;
		
		//Поиск соответствующей строки списания, отражаемой в налоговом учете
		Если Не СтрокаТаблицыСписания.ОтражатьВНалоговомУчете Тогда
			СтруктураПоискаНУ.НомерСтрокиДокумента = СтрокаТаблицыСписания.НомерСтрокиДокумента;
			СтруктураПоискаНУ.ДокументОприходования = СтрокаТаблицыСписания.ДокументОприходования;
			Если РаспределеннаяТаблица.НайтиСтроки(СтруктураПоискаНУ).Количество() <> 0 Тогда
				СтрокаРаспределеннойТаблицы.ОтражатьВНалоговомУчете = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		РаспределеннаяТаблица.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат РаспределеннаяТаблица;
	
КонецФункции // ()

// СЛУЖЕБНЫЕ ФУНКЦИИ
/////////////////////

// Процедура используется для проведения документов по регистрам подсистемы НДС
// Вызывается из обработки "Проведение документов по регистрам НДС" и из 
// документа "Расчет НДС по продукции"
Процедура ДвижениеНДСпоТаблицеДокументов(ТаблицаДокументов,ФормироватьПроводки = Истина) Экспорт
	
	Для Каждого Строка из ТаблицаДокументов Цикл
		
		ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСтрокДокументов(Строка.Регистратор);
		ДополнитьСписанныеТоварыДаннымиПоКомиссии(Строка.Регистратор, ТаблицаСписания);
		Если ТаблицаСписания.Количество()>0 Тогда
			
			#Если Клиент Тогда
				Состояние("Проведение по НДС документа " + ТаблицаСписания[0].Регистратор);
			#КонецЕсли
			
			СтруктураПараметров = Новый Структура;
			
			// Приведение таблицы списания к требуемому виду
			УправлениеЗапасамиПартионныйУчет.ПодготовитьТаблицуСписания(СтруктураПараметров,ТаблицаСписания, Ложь, Истина, Истина);
			
			МоментКон = Новый МоментВремени(ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор);
			
			СтруктураПараметров.Вставить("УчетнаяПолитика", УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(МоментКон,,,,,ТаблицаСписания[0].Организация));
			
			СтруктураПараметров.Вставить("ТолькоДвиженияНДС");
			
			Организация = ТаблицаСписания[0].Организация;
			
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		Ложь);
			СтруктураПараметров.Вставить("ТолькоВключениеНДСВСтоимостьНУ", 			Истина);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	Ложь);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	Ложь);
			
			// Движения - наборы записей по регистрам
			УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Регистратор);
			
			// Подготовка наборов записей
			УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина, Ложь);
			
			//Сохраним партионные регистры БУ
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияПартииТоваровНаСкладахБух", 			"ТаблицаДвиженийПартииТоваровНаСкладахБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияПартииТоваровПереданныеБух", 		"ТаблицаДвиженийПартииТоваровПереданныеБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияПартииМатериаловВЭксплуатацииБух", 	"ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух");
			
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияНезавершенноеПроизводствоБух", 		"ТаблицаДвиженийНезавершенноеПроизводствоБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияБракВПроизводствеБух", 				"ТаблицаДвиженийБракВПроизводствеБух");
			ЗагрузитьВТаблицуЗначенийСписанныеПартии(СтруктураПараметров, "ДвиженияЗатратыБух", 						"ТаблицаДвиженийЗатратыБух");
			
			СтруктураПараметров.ИзмененыДвиженияСтоимостьОСБух = Ложь;
			
			ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания);
			
			Если НЕ ФормироватьПроводки Тогда
				СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", Ложь);
				СтруктураПараметров.Вставить("ИзмененыДвиженияНалоговый", 	 Ложь);
			КонецЕсли;
			
			УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС

//
//
Процедура ВыполнитьДвиженияНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров)

	Строка = "Комплектация,Реализация,РеализацияКомиссия,РеализацияРозница";
	
	ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(Строка, РаспределеннаяТаблицаСписания);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров);

КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
	// в этом случае необходимо снять блокировку с вычета.
	// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
	
	Строка = "СписаниеНаВложенияВоВнеоборотныеАктивы, СписаниеНаСтроительствоОбъектовОС";
			
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	СформироватьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);

КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, СтруктураПараметров, Отказ)
	
	// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
	// в этом случае необходимо снять блокировку с вычета.
	// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
	
	Строка = "ВозвратОтКомиссионера, ВозвратОтПереработчика, ВозвратПоставщику, ВыпускПоОперацииСтоимость, ВыпускПродукцииФиксНаСклад, ВключениеНДСВСтоимость,
			| Комплектация, ПередачаВПереработку, ПередачаМатериаловВЭксплуатацию, ПередачаНаКомиссию, ПередачаОборудованияВМонтаж, 
			| ПеремещениеМеждуСкладами, ПринятиеКУчетуОС, ПринятиеКУчетуОССоСписаниемНаЗатраты, Реализация, РеализацияКомиссия,
			| РеализацияРозница, СписаниеНаБрак, СписаниеНаВложенияВоВнеоборотныеАктивы, СписаниеНаЗатраты, СписаниеНаСтроительствоОбъектовОС,
			| СписаниеПартийВПроизводствоОперативно, СписаниеПартийПереданныхВПроизводство, СписаниеПоИнвентаризации, ВключениеАктиваВСоставМПЗ";
			
	СтруктураКодовОпераций = Новый Структура(Строка);
	СписокОтбора = Новый СписокЗначений;
	
	Для каждого Элемент из СтруктураКодовОпераций Цикл
		СписокОтбора.Добавить(Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]);
	КонецЦикла;
	
	ДанныеДляОбработки = Новый ТаблицаЗначений;
		
	Для каждого Колонка из СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки Цикл
			
		ДанныеДляОбработки.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
	КонецЦикла;
	
	Для каждого Строка из СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров Цикл
		Если СписокОтбора.НайтиПоЗначению(Строка.КодОперацииПартииТоваров)<> Неопределено тогда
			 НоваяСтрока = ДанныеДляОбработки.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		КонецЕсли;
	КонецЦикла;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);

КонецПроцедуры

Процедура ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваровКомплектацияВыпуск(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	Если Не СтруктураШапкиДокумента.ВидДокумента = "КомплектацияНоменклатуры" 
		Или Не (СтруктураШапкиДокумента.Свойство("ВидОперации") 
				И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.СкопироватьКолонки();
		
	КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
	
	ЕстьСерияНоменклатурыНовая = ТаблицаНДСПартииСписания.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;
	
	Для Каждого СтрокаВыборки Из ТаблицаНДСПартииСписания Цикл
	
		НоваяСтрока = ТаблицаДвиженийПартии.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчета;
		
		НоваяСтрока.Номенклатура = СтрокаВыборки.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаВыборки.ХарактеристикаНоменклатуры;
		
		Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик
		   И СтрокаВыборки.ВестиПартионныйУчетПоСериям
		   И ЕстьСерияНоменклатурыНовая
		Тогда
			НоваяСтрока.СерияНоменклатуры = СтрокаВыборки.СерияНоменклатурыНовая;
		Иначе
			НоваяСтрока.СерияНоменклатуры = Неопределено;
		КонецЕсли;
		
		НоваяСтрока.Партия = СтрокаВыборки.Регистратор;
		
		НоваяСтрока.Заказ = Неопределено;
		
		НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		
		НоваяСтрока.Количество = СтрокаВыборки.Количество;
		НоваяСтрока.Стоимость = 0;
		
		НоваяСтрока.СписаниеПартий = Истина;
		
	КонецЦикла;	
	
	// Добавим колонки для обработки заказа покупателя.
	ТаблицаДвиженийПартии.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");
			
	ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");
	
	ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
		
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);

	// Устанавливаем флаги модификации
	СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
								ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());
									
КонецПроцедуры//ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров

Процедура ВыполнитьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)
	
	Если ?(СтруктураШапкиДокумента.Свойство("СложныйУчетНДС"),НЕ СтруктураШапкиДокумента.СложныйУчетНДС,
		НЕ (УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = Истина))
		Тогда
		
		Возврат;
	КонецЕсли; 
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;//При использовании расширенной аналитики движения по регистру НДСНезавершенноеПроизводство не формируются
	КонецЕсли;	
	
	ДанныеДляОбработки = Новый ТаблицаЗначений;
	
	ИспользоватьРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Для каждого Колонка ИЗ ТаблицаНДСПартииСписания.Колонки Цикл
			
		ДанныеДляОбработки.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
	КонецЦикла;
	
		Для Каждого Строка из ТаблицаНДСПартииСписания Цикл
			
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.КорСчетБУ, Строка.СтатьяЗатрат);
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					НоваяСтрока = ДанныеДляОбработки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЕсли;

		КонецЦикла;
	
	// Получили движения, для которых может произойти списание на незавершенное производство
	СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ);

КонецПроцедуры//ВыполнитьДвиженияНДСНезавершенноеПроизводство

Процедура ВыполнитьДвиженияПоРегистрамНДССписаниеРасходовпоВНА(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ)
	
	СтрокаКодовОпераций = "ПередачаМатериаловВЭксплуатацию";//, ПринятиеКУчетуОС, ПринятиеКУчетуОССоСписаниемНаЗатраты";
	
	ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, РаспределеннаяТаблицаСписания);
	
	Если ДанныеДляОбработки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕслИ;
		
	РаспределитьРасходыПоВНАнаСпособыОтраженияРасходовПоАмортизации(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ);
	
КонецПроцедуры

// Определяет дату документов из колонки таблицы значений с именем, переданным в параметре КолонкаДокумента
// и записывает ее в колонку с именем, переданным в параметре КолонкаСДатой.
// Колонки с такими именами должны существовать.
//
Процедура ЗаполнитьДатуДокументовВТаблице(Таблица, КолонкаДокумента, КолонкаСДатой) Экспорт

	КэшПоТипам = Новый Соответствие;

	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Для каждого КлючИЗначение Из КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
        // {{KM WARE Акулов А.И. 14.07.2015 начало
		// не достаточно прав
		// {{Старый код:
		//Запрос.Текст = Запрос.Текст 
		//+ ?(Запрос.Текст = "", "",
		//" 
		//|ОБЪЕДИНИТЬ ВСЕ")
		//+ "
		//|	ВЫБРАТЬ
		//|		Док.Ссылка КАК Ссылка,
		//|		Док.Дата КАК Дата
		//|	ИЗ Документ." + ИмяМетаданных + " КАК Док
		//|	ГДЕ Док.Ссылка В (&ДокументыТипа_" + ИмяМетаданных + ")";
		// }}Новый код:
		Запрос.Текст = Запрос.Текст 
		+ ?(Запрос.Текст = "", "",
		" 
		|ОБЪЕДИНИТЬ ВСЕ")
		+ "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		Док.Ссылка КАК Ссылка,
		|		Док.Дата КАК Дата
		|	ИЗ Документ." + ИмяМетаданных + " КАК Док
		|	ГДЕ Док.Ссылка В (&ДокументыТипа_" + ИмяМетаданных + ")";
		// }}KM WARE Акулов А.И. 14.07.2015 окончание
		ttk_ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_" + ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
    Таблица.Индексы.Добавить(КолонкаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка[КолонкаСДатой] = Выборка.Дата;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обновления ИБ

// Документы виды КорректировочныйСчетФактура... более не используется
// производится замена их на документы КорректировкаПоступления/КорректировкаРеализации
// с регистрацией счетов-фактур
//
Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	СчетДоходов              = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
	СчетРасходов             = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
	
	// Обработка корректировочных счетов-фактур выданных
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	УдалитьКорректировочныйСчетФактураВыданный.Ссылка,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура КАК ДокументРеализации,
	|	УдалитьКорректировочныйСчетФактураВыданный.Номер КАК НомерСчетаФактуры,
	|	УдалитьКорректировочныйСчетФактураВыданный.Дата КАК Дата,
	|	УдалитьКорректировочныйСчетФактураВыданный.Организация КАК Организация,
	|	УдалитьКорректировочныйСчетФактураВыданный.Контрагент КАК Контрагент,
	|	УдалитьКорректировочныйСчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	УдалитьКорректировочныйСчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура.Номер КАК НомерИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура.Дата КАК ДатаИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.ТоварыИУслуги.(
	|		Номенклатура КАК Номенклатура,
	|		КоличествоДоИзменения КАК КоличествоДоИзменения,
	|		КоличествоПослеИзменения КАК Количество,
	|		ЦенаДоИзменения КАК ЦенаДоИзменения,
	|		ЦенаПослеИзменения КАК Цена,
	|		СтоимостьБезНДСДоИзменения КАК СуммаДоИзменения,
	|		СтоимостьБезНДСПослеИзменения КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|		СуммаНДСПослеИзменения КАК СуммаНДС,
	|		ЕСТЬNULL(УдалитьКорректировочныйСчетФактураВыданный.ТоварыИУслуги.Номенклатура.Услуга, ЛОЖЬ) КАК Услуга,
	|		НаименованиеНоменклатуры КАК Содержание,
	|		ВидЦенности КАК ВидЦенности
	|	)
	|ИЗ
	|	Документ.УдалитьКорректировочныйСчетФактураВыданный КАК УдалитьКорректировочныйСчетФактураВыданный
	|ГДЕ
	|	УдалитьКорректировочныйСчетФактураВыданный.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйДокументКорректировки = Документы.КорректировкаРеализации.СоздатьДокумент();
		НовыйДокументКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		
		ЗаполнитьЗначенияСвойств(НовыйДокументКорректировки, Выборка);		
		
		ВыборкаТоварыИУслуги = Выборка.ТоварыИУслуги.Выбрать();
		Пока ВыборкаТоварыИУслуги.Следующий() Цикл
			
			Если ВыборкаТоварыИУслуги.Услуга Тогда
				НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();	
			Иначе
				НоваяСтрока = НовыйДокументКорректировки.Товары.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыИУслуги);
			
			Если НЕ ВыборкаТоварыИУслуги.Услуга Тогда
				СчетУчетаНДС = "";
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетУчетаБУ, СчетУчетаНДС, ВыборкаТоварыИУслуги.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			КонецЕсли;			
			
			НоваяСтрока.СчетРасходовБУ             = СчетРасходов;
			НоваяСтрока.СчетДоходовБУ              = СчетДоходов;			
			
		КонецЦикла;
		
		НовыйДокументКорректировки.КорректироватьБУиНУ = Ложь;
		НовыйДокументКорректировки.Комментарий         = "## Создан на основании: " + Выборка.Ссылка + " ##";
		
	    Попытка
    	    НовыйДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			
			// Создаем счет-фактуру		
			СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();			
			СчетФактура.Заполнить(НовыйДокументКорректировки.Ссылка); 
			СчетФактура.ОпределениеПараметровСчетаФактуры();
			СчетФактура.Контрагент                  = Выборка.Контрагент;
			СчетФактура.ДоговорКонтрагента          = Выборка.ДоговорКонтрагента;
			СчетФактура.Номер                       = Выборка.НомерСчетаФактуры;
			СчетФактура.Дата                        = Выборка.Дата;
			СчетФактура.ВидСчетаФактуры				= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			СчетФактура.НомерИсходногоДокумента     = Выборка.НомерИсходногоДокумента;
			СчетФактура.ДатаИсходногоДокумента      = Выборка.ДатаИсходногоДокумента;
			СчетФактура.Комментарий                 = "## Создан на основании: " + Выборка.Ссылка + " ##";
			
			СчетФактура.ДатаНомерДокументовОплаты.Добавить();
						
			Попытка
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);				
			Исключение
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
	// Обработка корректировочных счетов-фактур полученных
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	УдалитьКорректировочныйСчетФактураПолученный.Ссылка,
	|	УдалитьКорректировочныйСчетФактураПолученный.Дата КАК Дата,
	|	УдалитьКорректировочныйСчетФактураПолученный.Организация КАК Организация,
	|	УдалитьКорректировочныйСчетФактураПолученный.Контрагент КАК Контрагент,
	|	УдалитьКорректировочныйСчетФактураПолученный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура КАК ДокументПоступления,
	|	УдалитьКорректировочныйСчетФактураПолученный.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ВалютаДокумента КАК ВалютаДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура.ДатаВходящегоДокумента КАК ДатаИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура.НомерВходящегоДокумента КАК НомерИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.(
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.Сумма - УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.СуммаНДС КАК Сумма,
	|		ВидЦенности КАК ВидЦенности
	|	),
	|	УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.(
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.Сумма - УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.СуммаНДС КАК Сумма,
	|		ВидЦенности КАК ВидЦенности
	|	)
	|ИЗ
	|	Документ.УдалитьКорректировочныйСчетФактураПолученный КАК УдалитьКорректировочныйСчетФактураПолученный
	|ГДЕ
	|	УдалитьКорректировочныйСчетФактураПолученный.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйДокументКорректировки = Документы.КорректировкаПоступления.СоздатьДокумент();
		НовыйДокументКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		НовыйДокументКорректировки.ВосстановитьНДС = Истина;
		НовыйДокументКорректировки.УчитыватьНДС    = Истина;
		
		ЗаполнитьЗначенияСвойств(НовыйДокументКорректировки, Выборка);		
		
		ВыборкаВосстановлениеНДС = Выборка.ВосстановлениеНДС.Выбрать();
		Пока ВыборкаВосстановлениеНДС.Следующий() Цикл			
			Если ВыборкаВосстановлениеНДС.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
				НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();			
				НоваяСтрока.СтавкаНДС           = ВыборкаВосстановлениеНДС.СтавкаНДС;
				НоваяСтрока.СуммаДоИзменения    = ВыборкаВосстановлениеНДС.Сумма;
				НоваяСтрока.СуммаНДСДоИзменения = ВыборкаВосстановлениеНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;			
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетЗатрат, НоваяСтрока.СчетУчетаНДС, ВыборкаВосстановлениеНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			Иначе
				НоваяСтрока = НовыйДокументКорректировки.Товары.Добавить();			
				НоваяСтрока.СтавкаНДС           = ВыборкаВосстановлениеНДС.СтавкаНДС;
				НоваяСтрока.СуммаДоИзменения    = ВыборкаВосстановлениеНДС.Сумма;
				НоваяСтрока.СуммаНДСДоИзменения = ВыборкаВосстановлениеНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;			
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетУчетаБУ, НоваяСтрока.СчетУчетаНДС, ВыборкаВосстановлениеНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаВычетНДС = Выборка.ВычетНДС.Выбрать();
		Пока ВыборкаВычетНДС.Следующий() Цикл			
			Если ВыборкаВычетНДС.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
				НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();			
				НоваяСтрока.СтавкаНДС = ВыборкаВычетНДС.СтавкаНДС;
				НоваяСтрока.Сумма     = ВыборкаВычетНДС.Сумма;
				НоваяСтрока.СуммаНДС  = ВыборкаВычетНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетЗатрат, НоваяСтрока.СчетУчетаНДС, ВыборкаВычетНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			Иначе
				НоваяСтрока = НовыйДокументКорректировки.Товары.Добавить();			
				НоваяСтрока.СтавкаНДС = ВыборкаВычетНДС.СтавкаНДС;
				НоваяСтрока.Сумма     = ВыборкаВычетНДС.Сумма;
				НоваяСтрока.СуммаНДС  = ВыборкаВычетНДС.СуммаНДС;
				НоваяСтрока.ЕстьВДокументеПоступления = Истина;
				ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетУчетаБУ, НоваяСтрока.СчетУчетаНДС, ВыборкаВычетНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);
			КонецЕсли;
		КонецЦикла;
		
		НовыйДокументКорректировки.корректироватьБУиНУ = Ложь;
		НовыйДокументКорректировки.Комментарий         = "## Создан на основании: " + Выборка.Ссылка + " ##";
		
	    Попытка
    	    НовыйДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			
			// Создаем счет-фактуру		
			СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();			
			СчетФактура.Заполнить(НовыйДокументКорректировки.Ссылка);
			СчетФактура.ОпределениеПараметровСчетаФактуры();
			СчетФактура.Контрагент                  = Выборка.Контрагент;
			СчетФактура.ДоговорКонтрагента          = Выборка.ДоговорКонтрагента;
			СчетФактура.НомерВходящегоДокумента     = Выборка.НомерВходящегоДокумента;
			СчетФактура.ДатаВходящегоДокумента      = Выборка.ДатаВходящегоДокумента;
			СчетФактура.Дата                        = Выборка.Дата;
			СчетФактура.ВидСчетаФактуры             = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			СчетФактура.НомерИсходногоДокумента     = Выборка.НомерИсходногоДокумента;
			СчетФактура.ДатаИсходногоДокумента      = Выборка.ДатаИсходногоДокумента;
			СчетФактура.Комментарий                 = "## Создан на основании: " + Выборка.Ссылка + " ##";
			
			Попытка
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);				
			Исключение
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		Исключение
			ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПолучитьСчетУчетаПоВидуЦенности(СчетУчета, СчетУчетаНДС, ВидЦенности, ДоговорКонтрагента, ВалютаРегламентированногоУчета)
		
	Если ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные Тогда
		ИмяСчета = "РасчетыПоАвансамВыданным";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные Тогда
		ИмяСчета = "РасчетыПоАвансамПолученным";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
		ИмяСчета = "РасчетыПоАвансамПолученным";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ВнутреннееПотребление Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Возврат Тогда
		ИмяСчета = "РасчетыПоПретензиям";
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "УЕ";
		ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ИмяСчета = ИмяСчета + "Вал";
		КонецЕсли;
		СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ИмуществоСУчетомНДС Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Материалы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НМА Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Оборудование Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;

	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПосредническиеУслуги Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.ТоварыУслугиКомитентов Тогда
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	Иначе
		СчетУчета    =  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	  	СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	КонецЕсли;
		
КонецПроцедуры

// У счетов-фактур полученных добавлен реквизит ВидСчетаФактуры
// 
Процедура УстановитьВидСчетаФактурыПолученного() Экспорт
	
	#Если Клиент Тогда
	//Обновление документов "Счет-фактура полученный" установка вида счета-фактуры
	Состояние("Выполняется обновление документов ""Счет-фактура полученный""");
	#КонецЕсли
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СчетФактураПолученный.Ссылка
	//|ИЗ
	//|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	//|ГДЕ
	//|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.ПустаяСсылка)";
	// }}Новый код:
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.ПустаяСсылка)";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СчетФактура = Выборка.Ссылка.ПолучитьОбъект();
						
			Если СчетФактура.УдалитьНаАванс Тогда
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
			Иначе
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
			
			Попытка
				СчетФактура.ОбменДанными.Загрузка = Истина;
				СчетФактура.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли

	
КонецПроцедуры

// Процедура производит установку даты применения Постановления 1137 в значение 01.04.2012
//
Процедура УстановитьДатуПримененияПостановления1137() Экспорт 
	
	НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();
	
	Если НЕ ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		ИЛИ НачалоПримененияИсправленныхСчетовФактур > '20120401' Тогда
		
		Константы.НачалоПримененияИсправленныхСчетовФактур.Установить('20120401');
		
	КонецЕсли;
		
КонецПроцедуры

// В документ добавлена новая т.ч. Покупатели, в неё необходимо добавить одну строку.
// В колонку Покупатель пишем контрагента-комиссионера из шапки
//
Процедура ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах() Экспорт
	
	#Если Клиент Тогда
	//Обновление документов "Отчет комиссионера о продажах", добавление строки в табличную часть Покупатели
	Состояние("Выполняется обновление документов ""Отчет комиссионера о продажах""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|ПОМЕСТИТЬ ВТ_ОтчетыКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтчетКомиссионераОПродажах.Покупатели.НомерСтроки) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК ОтчетКомиссионера,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Проведен
	|			ТОГДА 2
	|		КОГДА СчетФактураВыданный.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_СчетФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ПО СчетФактураВыданный.ДокументОснование = ВТ_ОтчетыКомиссионера.Ссылка
	|			И (СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаРеализацию))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВТ_СчетФактуры.ОтчетКомиссионера КАК ОтчетКомиссионера,
	|	МАКСИМУМ(ВТ_СчетФактуры.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СчетФактуры.ОтчетКомиссионера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК Ссылка,
	|	ВТ_ОтчетыКомиссионера.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ВТ_СчетФактуры.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВыставленСФ,
	|	ВТ_СчетФактуры.Дата КАК ДатаСФ,
	|	ВТ_СчетФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ВТ_Приоритет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|			ПО ВТ_Приоритет.ОтчетКомиссионера = ВТ_СчетФактуры.ОтчетКомиссионера
	|				И ВТ_Приоритет.Приоритет = ВТ_СчетФактуры.Приоритет
	|		ПО ВТ_ОтчетыКомиссионера.Ссылка = ВТ_Приоритет.ОтчетКомиссионера";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтчетКомиссионера = Выборка.Ссылка.ПолучитьОбъект();
			СтрокаТЧ = ОтчетКомиссионера.Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
						
			Попытка
				ОтчетКомиссионера.ОбменДанными.Загрузка = Истина;
				ОтчетКомиссионера.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// Процедура формирует формирует движения счетов фактру выаднных по РН НДСЗаписиКнигиПродаж
// 
//
// Параметры:
//  нет
//
Процедура СформироватьДвиженияСчетовФактурПоДокументамОплаты() Экспорт
	
	Если НЕ глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
		И НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
	Состояние("Выполняется обновление документов ""Счет-фактура выданный""");
	#КонецЕсли	
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка
	//|ИЗ
	//|	Документ.СчетФактураВыданный.ДатаНомерДокументовОплаты КАК СчетФактураВыданныйДатаНомерДокументовОплаты
	//|ГДЕ
	//|	СчетФактураВыданныйДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	//|	И СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка.Проведен
	//|	И СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 10, 1)";
	// }}Новый код:
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДатаНомерДокументовОплаты КАК СчетФактураВыданныйДатаНомерДокументовОплаты
	|ГДЕ
	|	СчетФактураВыданныйДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка.Проведен
	|	И СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 10, 1)";
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияНДСНомераДокументовОплаты(Выборка.Ссылка, Неопределено);
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ И ПОДГОТОВКА ДАННЫХ ДЛЯ ПЕЧАТИ

Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт

	Дата 		 = ДанныеДляПечати.ДатаСчетФактуры; 
	ЭтоПечатьУПД = ДанныеДляПечати.Свойство("СтатусУПД");
		
	БезПереходаПраваСобственности = Ложь;
	Если ЭтоПечатьУПД И (ДанныеДляПечати.СтатусУПД = 2) Тогда
		Если ДанныеДляПечати.Свойство("ПередачаНаРеализациюПоКомиссии") 
			И ДанныеДляПечати.ПередачаНаРеализациюПоКомиссии Тогда
			БезПереходаПраваСобственности = Истина;
		КонецЕсли;
		
		Если ДанныеДляПечати.Свойство("ДокументОснование") 
			И ТипЗнч(ДанныеДляПечати.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
			БезПереходаПраваСобственности = Истина;
		КонецЕсли;
	КонецЕсли;
		
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если ЭтоПечатьУПД Тогда
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = Строка(ДанныеДляПечати.НомерИсправления);
			ОбластьМакета.Параметры.ДатаИсправления  = Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		Иначе
			ОбластьМакета.Параметры.НомерИсправления = "--";
			ОбластьМакета.Параметры.ДатаИсправления  = "--";
		КонецЕсли;
	Иначе
		
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = "Исправление №" + Строка(ДанныеДляПечати.НомерИсправления) 
				+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		Иначе 	
			ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
		КонецЕсли;
	КонецЕсли;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "--";
		ОбластьМакета.Параметры.АдресПоставщика 		= "--";
		ОбластьМакета.Параметры.ИННпоставщика 			= "--";
		
	Иначе
	
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ?(ЭтоПечатьУПД, "", "Продавец: ") 
			+ ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			
		ОбластьМакета.Параметры.АдресПоставщика = ?(ЭтоПечатьУПД, "", "Адрес: ") 
			+ ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		
		Если (ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
			И ДанныеДляПечати.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
			
			ОбластьМакета.Параметры.ИННпоставщика = ?(ЭтоПечатьУПД, "", "ИНН/КПП продавца: ") + "--";
			
		Иначе
			
			ИндексПодразделения = 0;
			Если НЕ (ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2) Тогда
				// В УПД в статусе 2 не выводится индекс обособленного подразделения
				Если ЗначениеЗаполнено(ДанныеДляПечати.Организация.ГоловнаяОрганизация) Тогда
					ИндексПодразделения = ДанныеДляПечати.Организация.ЦифровойИндексОбособленногоПодразделения;
				КонецЕсли;
			КонецЕсли;
			Если ИндексПодразделения <> 0 Тогда
				ДанныеДляПечати.Номер = ДанныеДляПечати.Номер + "/" + ИндексПодразделения;
			КонецЕсли;		
			
			КПП = ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
			Если ЗначениеЗаполнено(КПП) Тогда
				КПП = "/" + КПП;
			КонецЕсли;
			ОбластьМакета.Параметры.ИННпоставщика = ?(ЭтоПечатьУПД, "", "ИНН/КПП продавца: ")
				+ ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЭтоПечатьУПД Тогда
		НомерНаПечатьСтрокой 	= ПолучитьНомерНаПечать(ДанныеДляПечати);
		ДатаНаПечатьСтрокой 	= Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
       	ОбластьМакета.Параметры.Номер = НомерНаПечатьСтрокой;
		ОбластьМакета.Параметры.Дата  =	ДатаНаПечатьСтрокой;
		ЗаголовокДляПечати = "Универсальный передаточный документ № " + НомерНаПечатьСтрокой + " от " +  ДатаНаПечатьСтрокой;
	Иначе
		ЗаголовокДляПечати = ttk_ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура") + " г.";
		ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	КонецЕсли;
	
	ТолькоУслуги = Истина;
	Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга)
			ИЛИ ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			ТолькоУслуги = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		
	Иначе
		
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		Иначе
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			    ?(БезПереходаПраваСобственности, ДанныеДляПечати.Поставщик, 
				?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель)), Дата);
			СведенияОГрузополучателе  =  ?(БезПереходаПраваСобственности, СведенияОПокупателе, 
				УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата));
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ")
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
				"--", 
				?(ДанныеДляПечати.Грузоотправитель = "он же", 
					ДанныеДляПечати.Грузоотправитель, 
					ОписаниеОрганизации(
						СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
			
			Если ДанныеДляПечати.Свойство("АдресДоставки") 
				И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
				ПредставлениеГрузополучателя = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					ДанныеДляПечати.АдресДоставки,
					ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
			Иначе
				ПредставлениеГрузополучателя = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					"--",
					ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
				
		КонецЕсли;
	
	КонецЕсли;

	СтрокаПоДокументу = "";
	Если ДанныеДляПечати.Свойство("ТаблицаДатОплат") Тогда
		Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			
			Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
				И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПоДокументу = СтрокаПоДокументу
				+ ?(ПустаяСтрока(СтрокаПоДокументу), ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № "),", ")
				+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
				+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
			
		КонецЦикла; 
	КонецЕсли;
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "-- от --";
		Иначе
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "   от";
		КонецЕсли; 
	КонецЕсли; 
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
		// В УПД в статусе 2 ставятся прочерки показатели, установленные в качестве обязательных исключительно для счета-фактуры: 
		// - «К платежно-расчетному документу» (строка 7); 
		СтрокаПоДокументу = "--";
	КонецЕсли;
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "--";
		ОбластьМакета.Параметры.АдресПокупателя 		= "--";
		ОбластьМакета.Параметры.ИННПокупателя 			= "--";
		
	Иначе
	
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ?(ЭтоПечатьУПД, "", "Покупатель: ") 
			+ ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя = ?(ЭтоПечатьУПД, "", "Адрес: ")
			+ ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
		
		Если ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
			КПП = ДанныеДляПечати.КППКонтрагента;
		ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
			КПП = ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
		Иначе
			КПП = ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИННПокупателя = ?(ЭтоПечатьУПД, "", "ИНН/КПП покупателя: ")
			+ ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
			
	КонецЕсли;
		
	ОбластьМакета.Параметры.Валюта = ?(ЭтоПечатьУПД, "", "Валюта: наименование, код ")
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
			ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, "");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Если ЭтоПечатьУПД Тогда
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварАртикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварКод";
		Иначе
			ВыводитьКоды 	= Ложь;
			КолонкаТоварКод	= "";
		КонецЕсли;
	Иначе
		ВыводитьКоды 	= Ложь;
		КолонкаТоварКод	= "";
	КонецЕсли;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию И 
			(Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Если (НЕ Строчка.СуммаВключаетНДС) ИЛИ Строчка.Цена = 0 Тогда
				Строчка.Цена = Окр(Строчка.СуммаСНДС / Строчка.Количество, 2);
			КонецЕсли;
		Иначе
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
		Строчка.ТоварКод = ?(ВыводитьКоды, Строчка[КолонкаТоварКод], "");
		
	КонецЦикла;
		
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ТоварКод, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
		|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС, НомерСтроки");
	
	// Выводим строки таблицы
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	Если ЭтоПечатьУПД Тогда
		ОбластьМакетаПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	Иначе
		ОбластьМакетаПодвалНакладной = Новый ТабличныйДокумент;
	КонецЕсли;
	КоличествоСтраниц = 1;
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Строчка.НомерСтроки = НомерСтроки;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		Иначе
			Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент 
				ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
				ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			Иначе
				ОбластьМакета.Параметры.Стоимость = 0;
			КонецЕсли;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		КонецЕсли;	
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		Если ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			И ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			Иначе
				ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
				ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
				ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			ОбластьМакета.Параметры.Стоимость  = "--";
			ОбластьМакета.Параметры.Акциз      = "--";
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
			
			// Ставим прочерки в графах, которые установленные в качестве обязательных исключительно для счета-фактуры
			//- «В том числе сумма акциза» (графа 6); 
			//- «Налоговая ставка» (графа 7);
			//- «Цифровой код страны происхождения товара» (графа 10);
			//- «Краткое наименование страны происхождения товара» (графа 10а);
			//- «Номер таможенной декларации» (графа 11). 
			
			ОбластьМакета.Параметры.Акциз 		= "--";
			ОбластьМакета.Параметры.СтавкаНДС 	= "--";
			ОбластьМакета.Параметры.СуммаНДС 	= ?(Строчка.СуммаНДС <> 0 , Строчка.СуммаНДС, "--");
			ОбластьМакета.Параметры.СтранаПроисхожденияКод 	= "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны 	= "--";
			ОбластьМакета.Параметры.ПредставлениеГТД 		= "--";
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Если ЭтоПечатьУПД Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
			КонецЕсли;
		КонецЕсли;
		
		#Если Сервер ИЛИ ВнешнееСоединение Тогда
			РезультатПроверкиВывода = ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
		#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
			РезультатПроверкиВывода = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
		#КонецЕсли
						
		Если НЕ РезультатПроверкиВывода Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначения.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	ДанныеДляПечати.Вставить("КоличествоЛистов", КоличествоЛистов);

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаБезНДС");
	КонецЕсли;
	
	ИтогоСуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
	    ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ?(ИтогоСуммаНДС <> 0, ИтогоСуммаНДС, "--");
	ИначеЕсли ДанныеДляПечати.СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ВыборкаСтрокТовары.Итог("СуммаСНДС");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
							
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ОбластьМакетаПодвал.Параметры.Свидетельство = ОписаниеОрганизации(
			СведенияОПокупателе, "Свидетельство,");
	Иначе
		ОбластьМакетаПодвал.Параметры.Свидетельство = ОписаниеОрганизации(
			СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
 	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";
	
КонецПроцедуры

Процедура СобратьДанныеДляПечатиСчетФактурыВыданного(Ссылка, ДанныеДляПечати, УчетнаяПолитика) Экспорт
	
	Корректировочный = Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	Если Ссылка.СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрДокОснования Из Ссылка.ДокументыОснования Цикл
		// Получить экземпляр документа на печать
		
		Если НЕ ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиСчетФактурыВыданногоПоДокументу(СтрДокОснования.ДокументОснование, Ссылка, УчетнаяПолитика);
		
		// Заполнение данных для печати
		Если ДанныеДляПечати = Неопределено Тогда
			ДанныеДляПечати = ЭкземплярДанныхДляПечати;
		Иначе
			
			Для каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
				
				Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
					СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
					НоваяТабЧасть  = СтрДанных.Значение;
					
					Для каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
						СтрокаТабЧасти = СтараяТабЧасть.Добавить();
						Для каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
							Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
								СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли НЕ ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
					// Если данный параметр для печати шапки документа еще не  определен - то определяем его
					ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;	
		
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Корректировочный Тогда
	
		ТаблицаДатОплат = Ссылка.ДатаНомерДокументовОплаты.Выгрузить();
		ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаОплат Из ТаблицаДатОплат Цикл
			Если Не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
				И ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
				СтрокиКУдалению.Добавить(СтрокаОплат);
			КонецЕсли; 
		КонецЦикла; 
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДатОплат.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
		ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
		
	КонецЕсли;
	
	Если Корректировочный И ДанныеДляПечати <> Неопределено Тогда
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		+"НаименованиеТовара,"
		+"Серия,"
		+"Характеристика,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
	КонецЕсли; 	

КонецПроцедуры

Функция СобратьДанныеДляПечатиСчетФактурыВыданногоПоДокументу(ДокументОснование, Ссылка, УчетнаяПолитика)
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Корректировочный = Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	ЭкземплярДанныхДляПечати = Неопределено;
	ТипОснования = ТипЗнч(ДокументОснование);
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансиСуммовуюРазницу(Ссылка);
	ИначеЕсли Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеСФНалоговогоАгента(Ссылка);
	ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомитентуОПродажах(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияУслугПоПереработке(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомиссионераОПродажах(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоАкту(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеОС(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоПринятиеКУчетуОС(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.МодернизацияОС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоМодернизацияОС(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеНМАОрганизаций(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокументОснование, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") 
		И ТипЗнч(ДокументОснование.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокументОснование.ДокументОтгрузки, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") 
		И ТипЗнч(ДокументОснование.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеОС(ДокументОснование.ДокументОтгрузки, Ссылка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если Корректировочный Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДокументОснование, Ссылка);
		Иначе
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиИсправленияСчетаФактуры(ДокументОснование, Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭкземплярДанныхДляПечати = Неопределено Тогда
		Возврат ЭкземплярДанныхДляПечати;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.Руководитель) Тогда
		Если ЭкземплярДанныхДляПечати.Свойство("ФИОРуководителя") Тогда 
			ЭкземплярДанныхДляПечати.ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(Ссылка.Руководитель, , , , Ссылка.Дата);
		ИначеЕсли ЭкземплярДанныхДляПечати.Свойство("ФИОПБОЮЛ") Тогда
			ЭкземплярДанныхДляПечати.ФИОПБОЮЛ = ОбщегоНазначения.ФамилияИнициалыФизЛица(Ссылка.Руководитель, , , , Ссылка.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.ГлавныйБухгалтер) И ЭкземплярДанныхДляПечати.Свойство("ФИОГлавногоБухгалтера") Тогда
		ЭкземплярДанныхДляПечати.ФИОГлавногоБухгалтера = ОбщегоНазначения.ФамилияИнициалыФизЛица(Ссылка.ГлавныйБухгалтер);
	КонецЕсли;
	
	// Пересчет из уе в рубли
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		И Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
		И Не ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета Тогда
		
		ВерсияПостановления = ПолучитьВерсиюПостановления(Ссылка.Дата);
		Если ВерсияПостановления = 2 Тогда
			ФормироватьСчетФактуруПоУЕвРублях = Истина;
		Иначе
			Если УчетнаяПолитика = Неопределено тогда
				УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Ссылка.Дата, Ссылка.Организация);
			КонецЕсли;
			ФормироватьСчетФактуруПоУЕвРублях = ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ФормироватьСчетФактуруПоУЕвРублях")
			И УчетнаяПолитика.ФормироватьСчетФактуруПоУЕвРублях;
		КонецЕсли;
		
		Если ФормироватьСчетФактуруПоУЕвРублях Тогда
			ПерезаполнитьСуммыПоУЕвРублях(ЭкземплярДанныхДляПечати, ДокументОснование, Ссылка);
			ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭкземплярДанныхДляПечати; 
	
КонецФункции

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Покупатель,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА СтавкаНДСВознаграждения = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ВалютаДокумента         				  КАК Валюта,
	|	УслугаПоВознаграждению 					  КАК Товар,
	|	УслугаПоВознаграждению.НаименованиеПолное КАК ТоварНаименование,
	|	УслугаПоВознаграждению.Код 				  КАК ТоварКод,
	|	УслугаПоВознаграждению.Артикул 			  КАК ТоварАртикул,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      	Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            	Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             	Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         	Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          	Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        	Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", 	);
	ДанныеДляПечати.Вставить("Подразделение",    	Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       	Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  	);
	ДанныеДляПечати.Вставить("Сумма",            	Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           	Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     	Истина);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	(Шапка.ЕстьНДС = 0));
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.Товар);
		Строчка.ТоварНаименование   = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.ТоварНаименование);
		Строчка.ТоварКод            = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "", Шапка.ТоварКод);
		Строчка.ТоварАртикул        = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "", Шапка.ТоварАртикул);
		Строчка.СтранаПроисхождения = "";
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.ЕдиницаИзмеренияКод = "";
		Строчка.СтавкаНДС			= Шапка.СтавкаНДС;
		СуммаДляПечати    			= ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаВключаетНДС 	= Истина;
		Строчка.СуммаНДС  			= РассчитатьСуммуНДС(СуммаДляПечати, Истина, Истина, ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.Сумма     			= СуммаДляПечати;
		Строчка.Цена      			= СуммаДляПечати;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ДанныеДляПечати.Вставить("ФИОКладовщика", 			Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", 	Руководители.РуководительДолжность);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
 	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ОтчетКомиссионераОПродажахПокупатели.КлючСтроки,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель
	|ПОМЕСТИТЬ ВТДанныеОПокупателе
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &ДокументОснование
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВТДанныеОПокупателе.Покупатель КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВТДанныеОПокупателе.Покупатель
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетКомиссионераОПродажах.Подразделение КАК Подразделение,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах,
	|	ВТДанныеОПокупателе КАК ВТДанныеОПокупателе
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Код КАК ТоварКод,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения,
	|	ОтчетКомиссионераОПродажахТовары.Цена,
	|	ОтчетКомиссионераОПродажахТовары.Количество,
	|	ОтчетКомиссионераОПродажахТовары.Сумма,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ОтчетКомиссионераОПродажахТовары.СуммаНДС,
	|	ОтчетКомиссионераОПродажахТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры КАК Серия,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ОтчетКомиссионераОПродажахТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТДанныеОПокупателе КАК ДанныеОПокупателе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ДанныеОПокупателе.КлючСтроки = ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаШапка = Результат[1].Выгрузить();
	Шапка = ТаблицаШапка[0];
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		ВыборкаСтрокТовары = Результат[2].Выбрать();
	КонецЕсли;
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС",	СчетФактураБезНДС);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	Дата 							  КАК ДатаДокумента,
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение                     КАК Подразделение,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС,
	|	АдресДоставки 					  КАК АдресДоставки,
	|	РеализацияТоваровУслуг.ОтпускРазрешил 					КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел 					КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу 			КАК ЗаРуководителяПоПриказу
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:	
	//Запрос.Текст = "ВЫБРАТЬ
	// }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	               |	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
				   |	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
				   |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварАртикул,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	               |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	               |	РеализацияТоваровУслугТовары.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслугТовары.ПроцентАвтоматическихСкидок <> 0
	               |				ИЛИ РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки <> 0
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияТоваровУслугТовары.Цена
	               |	КОНЕЦ КАК Цена,
	               |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	               |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	               |	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры КАК Серия,
	               |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
				   |	ВЫБОР
				   |		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
				   |			ТОГДА 0
				   |		ИНАЧЕ 1
				   |	КОНЕЦ КАК ЕстьНДС,
				   |	1 КАК НомерТЧ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугУслуги.Номенклатура,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000)),
	   			   |	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК ТоварКод,
				   |	РеализацияТоваровУслугУслуги.Номенклатура.Артикул КАК ТоварАртикул,
	               |	"""",
	               |	"""",
	               |	NULL,
	               |	NULL,
	               |	"""",
	               |	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	               |	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслугУслуги.ПроцентАвтоматическихСкидок <> 0
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
	               |	КОНЕЦ,
	               |	РеализацияТоваровУслугУслуги.СтавкаНДС,
	               |	РеализацияТоваровУслугУслуги.СуммаНДС,
	               |	РеализацияТоваровУслугУслуги.Сумма,
				   |	NULL,
				   |	NULL,
				   |	РеализацияТоваровУслугУслуги.НомерСтроки,
				   |	ВЫБОР
				   |		КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
				   |			ТОГДА 0
				   |		ИНАЧЕ 1
				   |	КОНЕЦ КАК ЕстьНДС,
				   |	2
				   |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерТЧ,
	               |	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("АдресДоставки",	 УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Шапка.АдресДоставки));

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	ЕстьТовары 		  = Ложь;
	ЕстьУслуги 		  = Ложь;
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 1);
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 2);
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЕстьТовары И ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтпускПроизвел);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	ИначеЕсли ЕстьУслуги Тогда
		Если ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 			Шапка.ОтпускРазрешил);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		Шапка.ДатаДокумента);
			ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Шапка.ЗаРуководителяПоПриказу)
		Иначе	
			ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  	Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);
	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	|	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	|	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	|	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	1 КАК НомерТЧ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуОборудование.Номенклатура,
	|	ВозвратТоваровПоставщикуОборудование.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуОборудование.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуОборудование.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.СтранаПроисхождения.Наименование,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.НомерГТД,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры.НомерГТД.Представление,
	|	ВозвратТоваровПоставщикуОборудование.ЕдиницаИзмерения.Представление,
	|	ВозвратТоваровПоставщикуОборудование.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код,
	|	ВозвратТоваровПоставщикуОборудование.Количество,
	|	ВозвратТоваровПоставщикуОборудование.Цена,
	|	ВозвратТоваровПоставщикуОборудование.СтавкаНДС,
	|	ВозвратТоваровПоставщикуОборудование.СуммаНДС,
	|	ВозвратТоваровПоставщикуОборудование.Сумма,
	|	ВозвратТоваровПоставщикуОборудование.ХарактеристикаНоменклатуры,
	|	ВозвратТоваровПоставщикуОборудование.СерияНоменклатуры,
	|	ВозвратТоваровПоставщикуОборудование.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуОборудование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	2
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Оборудование КАК ВозвратТоваровПоставщикуОборудование
	|ГДЕ
	|	ВозвратТоваровПоставщикуОборудование.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;
 	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщику()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);
	
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	""он же"" КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	|	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	|	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	|	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 	  Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияУслугПоПереработке(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	РеализацияУслугПоПереработке.Дата КАК ДатаДокумента,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.Организация КАК Поставщик,
	|	РеализацияУслугПоПереработке.Подразделение КАК Подразделение,
	|	РеализацияУслугПоПереработке.Контрагент КАК Покупатель,
	|	РеализацияУслугПоПереработке.СуммаДокумента КАК Сумма,
	|	РеализацияУслугПоПереработке.ВалютаДокумента КАК Валюта,
	|	РеализацияУслугПоПереработке.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.Исполнитель КАК Исполнитель,
	|	РеализацияУслугПоПереработке.ИсполнительПоПриказу КАК ИсполнительПоПриказу
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	РеализацияУслугПоПереработке.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	РеализацияУслугПоПереработке.Номенклатура.Код КАК ТоварКод,
	|	РеализацияУслугПоПереработке.Номенклатура.Артикул КАК ТоварАртикул,
	|	NULL КАК СтранаПроисхождения,
	|	"""" КАК СтранаПроисхожденияКод,
	|	"""" КАК ПредставлениеСтраны,
	|	РеализацияУслугПоПереработке.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработке.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	NULL КАК НомерГТД,
	|	NULL КАК ПредставлениеГТД,
	|	РеализацияУслугПоПереработке.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА РеализацияУслугПоПереработке.ПроцентСкидкиНаценки <> 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияУслугПоПереработке.Цена
	|	КОНЕЦ КАК Цена,
	|	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияУслугПоПереработке.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	РеализацияУслугПоПереработке.СуммаНДС КАК СуммаНДС,
	|	РеализацияУслугПоПереработке.Сумма КАК Сумма,
	|	РеализацияУслугПоПереработке.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияУслугПоПереработке.СерияНоменклатуры КАК Серия,
	|	РеализацияУслугПоПереработке.НомерСтроки КАК НомерСтроки,
	|	1 КАК НомерТЧ
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Продукция КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Содержание КАК СТРОКА(1000)),
	|	РеализацияУслугПоПереработке.Номенклатура.Код,
	|	РеализацияУслугПоПереработке.Номенклатура.Артикул,
	|	NULL,
	|	"""",
	|	"""",
	|	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	NULL,
	|	"""",
	|	РеализацияУслугПоПереработке.Количество,
	|	РеализацияУслугПоПереработке.Цена,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияУслугПоПереработке.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	РеализацияУслугПоПереработке.СуммаНДС,
	|	РеализацияУслугПоПереработке.Сумма,
	|	NULL,
	|	NULL,
	|	РеализацияУслугПоПереработке.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.Исполнитель) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.Исполнитель);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Шапка.ИсполнительПоПриказу)
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияУслугПоПереработке()

Функция СобратьДанныеПоАкту(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	ТекстЗапроса =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	АктОбОказанииПроизводственныхУслуг.Дата КАК ДатаДокумента,
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	АктОбОказанииПроизводственныхУслуг.Организация КАК Поставщик,
	|	АктОбОказанииПроизводственныхУслуг.Подразделение КАК Подразделение,
	|	АктОбОказанииПроизводственныхУслуг.Контрагент КАК Покупатель,
	|	АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК Сумма,
	|	АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК Валюта,
	|	АктОбОказанииПроизводственныхУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АктОбОказанииПроизводственныхУслуг.Исполнитель КАК Исполнитель,
	|	АктОбОказанииПроизводственныхУслуг.ИсполнительПоПриказу КАК ИсполнительПоПриказу
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка,
	|	АктОбОказанииПроизводственныхУслуг.НомерСтроки КАК НомерСтроки,
	|	АктОбОказанииПроизводственныхУслуг.Количество,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура КАК Товар,
	|	АктОбОказанииПроизводственныхУслуг.ВесовойКоэффициент,
	|	ВЫБОР
	|		КОГДА АктОбОказанииПроизводственныхУслуг.ПроцентСкидкиНаценки <> 0
	|			ТОГДА 0
	|		ИНАЧЕ АктОбОказанииПроизводственныхУслуг.Цена
	|	КОНЕЦ КАК Цена,
	|	АктОбОказанииПроизводственныхУслуг.Сумма,
	|	АктОбОказанииПроизводственныхУслуг.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА АктОбОказанииПроизводственныхУслуг.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаНДС,
	|	АктОбОказанииПроизводственныхУслуг.ЕдиницаИзмерения,
	|	АктОбОказанииПроизводственныхУслуг.Коэффициент,
	|	АктОбОказанииПроизводственныхУслуг.НоменклатурнаяГруппа,
	|	&СтрокаВыборкиПоляСодержания,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.Код КАК ТоварКод,
	|	АктОбОказанииПроизводственныхУслуг.Номенклатура.Артикул КАК ТоварАртикул,
	|	"""" КАК СтранаПроисхождения,
	|	"""" КАК СтранаПроисхожденияКод,
	|	"""" КАК ПредставлениеСтраны
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("", "ТоварНаименование");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаВыборкиПоляСодержания,", СтрокаВыборкиПоляСодержания + ",");
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Шапка = РезультатыЗапроса[0].Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = РезультатыЗапроса[1].Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС = Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС",	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.Исполнитель) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.Исполнитель);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Шапка.ИсполнительПоПриказу)
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции

// Функция собирает данные по документу основанию ПередачаОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеОС(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
    Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = "
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	Организация,
	|	Организация КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение КАК Подразделение,
	|	Контрагент  КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента   КАК Сумма,
	|	ВалютаДокумента  КАК Валюта,
	|	УчитыватьНДС     КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|
	|ГДЕ
	|	ПередачаОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ТаблицаОС.ОсновноеСредство КАК Товар,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаОС.ОсновноеСредство.Код КАК ТоварКод,
	|	"""" КАК ТоварАртикул,
	|	ТаблицаОС.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ТаблицаОС.СуммаНДС КАК СуммаНДС,
	|	ТаблицаОС.Сумма КАК Сумма,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";    	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	СчетФактураБезНДС 	= (ВыборкаСтрокТовары.Количество() > 0);
                                                        
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.Количество          = 1;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС); 

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ПринятиеКУчетуОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПринятиеКУчетуОС(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидСвязиОрг", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Запрос.Текст = "
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ПринятиеКУчетуОС.Организация,
	|	ПринятиеКУчетуОС.Организация              КАК Поставщик,
	|	ПринятиеКУчетуОС.Организация              КАК Грузоотправитель,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК Подразделение,
	|	СобственныеКонтрагенты.Контрагент         КАК Покупатель,
	|	СобственныеКонтрагенты.Контрагент         КАК Грузополучатель,
	|	ПринятиеКУчетуОС.СтоимостьБУХоз           КАК СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета  КАК ВалютаДокумента,
	|	ИСТИНА                                    КАК УчитыватьНДС,
	|	ЛОЖЬ                                      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|		ПО 
	|			ПринятиеКУчетуОС.Организация = СобственныеКонтрагенты.Объект
	|			И СобственныеКонтрагенты.ВидСвязи = &ВидСвязиОрг,
	|	Константы КАК Константы
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &ДокументОснование
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = "ВЫБРАТЬ
	// }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	               |	СУММА(НДСНачисленный.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(НДСНачисленный.НДС) КАК НДС,
	               |	НДСНачисленный.СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	               |ГДЕ
	               |	НДСНачисленный.Регистратор = &ДокументОснование
	               |	И НДСНачисленный.ВидЦенности = &ВидЦенностиСМРхозспособом
	               |	И НДСНачисленный.ВидНачисления = &ВидНачисленияКуплате
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленный.СтавкаНДС";
	Запрос.УстановитьПараметр("ВидЦенностиСМРхозспособом", Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидНачисленияКуплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
				   
	ЗапросОС = Новый Запрос;
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//ЗапросОС.Текст = "ВЫБРАТЬ
	// }}Новый код:
	ЗапросОС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(1000)) КАК ОбъектНаименование,
	                 |	СУММА(НДСпоОСиНМА.СуммаБезНДС + НДСпоОСиНМА.НДС) КАК Сумма
	                 |ИЗ
	                 |	РегистрНакопления.НДСпоОСиНМА КАК НДСпоОСиНМА
	                 |ГДЕ
	                 |	НДСпоОСиНМА.Регистратор = &ДокументОснование
	                 |	И НДСпоОСиНМА.ВидДвижения = &ВидДвиженияПриход
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(1000))";
	ЗапросОС.УстановитьПараметр("ДокументОснование", ДокОснование);
	ЗапросОС.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
					 
	
	РезультатЗапросаТовары = Запрос.Выполнить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       ?(НЕ ЗначениеЗаполнено(Шапка.Покупатель), Шапка.Организация, Шапка.Покупатель));
	ДанныеДляПечати.Вставить("Грузополучатель",  ?(НЕ ЗначениеЗаполнено(Шапка.Грузополучатель), Шапка.Организация, Шапка.Грузополучатель));
	ДанныеДляПечати.Вставить("Сумма",            Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	ТаблицаПоОС = ЗапросОС.Выполнить().Выгрузить();
	
	Если ТаблицаПоОС.Количество() = 0 Тогда
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	КолонкаРаспределения = ТаблицаПоОС.ВыгрузитьКолонку("Сумма");
	
	ВыборкаСтрокТовары = РезультатЗапросаТовары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		КолонкаСуммаБезНДС = 	ttk_ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.СуммаБезНДС, КолонкаРаспределения);
		КолонкаНДС = 			ttk_ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.НДС, КолонкаРаспределения);
		
		Если КолонкаСуммаБезНДС =  Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для К = 0 По КолонкаСуммаБезНДС.Количество() - 1 Цикл
			Строчка = Товары.Добавить();
			Строчка.Товар               = ТаблицаПоОС[К].Объект;
			Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления: " + ?(ПустаяСтрока(ТаблицаПоОС[К].ОбъектНаименование), ТаблицаПоОС[К].Объект, СокрЛП(ТаблицаПоОС[К].ОбъектНаименование));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
			Строчка.Сумма               = КолонкаСуммаБезНДС[К];
			Если КолонкаНДС <> Неопределено Тогда
				Строчка.СуммаНДС            = КолонкаНДС[К];
			КонецЕсли;
			Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		КонецЦикла;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПринятиеКУчетуОС()

// Функция собирает данные по документу основанию МодернизацияОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоМодернизацияОС(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидСвязиОрг", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Запрос.Текст = "
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	МодернизацияОС.Организация,
	|	МодернизацияОС.Организация              	КАК Поставщик,
	|	СобственныеКонтрагенты.Контрагент	   		КАК Покупатель,
	|	МодернизацияОС.СтоимостьБУХоз           	КАК СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета	КАК ВалютаДокумента,
	|	ИСТИНА                                   	КАК УчитыватьНДС,
	|	ЛОЖЬ                                      	КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|		ПО 
	|			МодернизацияОС.Организация = СобственныеКонтрагенты.Объект
	|			И СобственныеКонтрагенты.ВидСвязи = &ВидСвязиОрг,
	|	Константы КАК Константы
	|ГДЕ
	|	МодернизацияОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НДСНачисленный.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(НДСНачисленный.НДС) КАК НДС,
	               |	НДСНачисленный.СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	               |ГДЕ
	               |	НДСНачисленный.Регистратор = &ДокументОснование
	               |	И НДСНачисленный.ВидЦенности = &ВидЦенностиСМРхозспособом
	               |	И НДСНачисленный.ВидНачисления = &ВидНачисленияКуплате
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленный.СтавкаНДС";
	Запрос.УстановитьПараметр("ВидЦенностиСМРхозспособом", Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидНачисленияКуплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
				   
	ЗапросОС = Новый Запрос;
	ЗапросОС.Текст = "ВЫБРАТЬ
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(1000)) КАК ОбъектНаименование,
	                 |	СУММА(НДСпоОСиНМА.СуммаБезНДС + НДСпоОСиНМА.НДС) КАК Сумма
	                 |ИЗ
	                 |	РегистрНакопления.НДСпоОСиНМА КАК НДСпоОСиНМА
	                 |ГДЕ
	                 |	НДСпоОСиНМА.Регистратор = &ДокументОснование
	                 |	И НДСпоОСиНМА.ВидДвижения = &ВидДвиженияПриход
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(1000))";
	ЗапросОС.УстановитьПараметр("ДокументОснование", ДокОснование);
	ЗапросОС.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
					 
	
	РезультатЗапросаТовары = Запрос.Выполнить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    "");
	ДанныеДляПечати.Вставить("Покупатель",       ?(НЕ ЗначениеЗаполнено(Шапка.Покупатель), Шапка.Организация, Шапка.Покупатель));
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	ТаблицаПоОС = ЗапросОС.Выполнить().Выгрузить();
	
	Если ТаблицаПоОС.Количество() = 0 Тогда
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	КолонкаРаспределения = ТаблицаПоОС.ВыгрузитьКолонку("Сумма");
	
	ВыборкаСтрокТовары = РезультатЗапросаТовары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		КолонкаСуммаБезНДС = 	ttk_ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.СуммаБезНДС, КолонкаРаспределения);
		КолонкаНДС = 			ttk_ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.НДС, КолонкаРаспределения);
		
		Если КолонкаСуммаБезНДС =  Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для К = 0 По КолонкаСуммаБезНДС.Количество() - 1 Цикл
			Строчка = Товары.Добавить();
			Строчка.Товар               = ТаблицаПоОС[К].Объект;
			Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления: " + ?(ПустаяСтрока(ТаблицаПоОС[К].ОбъектНаименование), ТаблицаПоОС[К].Объект, СокрЛП(ТаблицаПоОС[К].ОбъектНаименование));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
			Строчка.Сумма               = КолонкаСуммаБезНДС[К];
			Если КолонкаНДС <> Неопределено Тогда
				Строчка.СуммаНДС            = КолонкаНДС[К];
			КонецЕсли;
			Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		КонецЦикла;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоМодернизацияОС()

// Функция собирает данные по документу основанию НачислениеНДСпоСМРхозспособом и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидСвязиОрг", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Запрос.Текст = "
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	НачислениеНДСпоСМРхозспособом.Организация,
	|	НачислениеНДСпоСМРхозспособом.Организация              	КАК Поставщик,
	|	СобственныеКонтрагенты.Контрагент	   		КАК Покупатель,
	|	Константы.ВалютаРегламентированногоУчета	КАК ВалютаДокумента,
	|	ИСТИНА                                   	КАК УчитыватьНДС,
	|	ЛОЖЬ                                      	КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|		ПО 
	|			НачислениеНДСпоСМРхозспособом.Организация = СобственныеКонтрагенты.Объект
	|			И СобственныеКонтрагенты.ВидСвязи = &ВидСвязиОрг,
	|	Константы КАК Константы
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособом.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.ОбъектСтроительства КАК Товар,
	|	ВЫРАЗИТЬ(НачислениеНДСпоСМРхозспособомСМРхозспособом.ОбъектСтроительства.Наименование КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.СуммаБезНДС КАК Сумма,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.СтавкаНДС,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.НДС КАК СуммаНДС,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособомСМРхозспособом
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапросаТовары = Запрос.Выполнить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    "");
	ДанныеДляПечати.Вставить("Покупатель",       ?(НЕ ЗначениеЗаполнено(Шапка.Покупатель), Шапка.Организация, Шапка.Покупатель));
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	ВыборкаСтрокТовары = РезультатЗапросаТовары.Выбрать();
	
	Если ВыборкаСтрокТовары.Количество() = 0 Тогда
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления: " + ВыборкаСтрокТовары.ТоварНаименование;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоМодернизацияОС()

// Функция собирает данные по документу основанию ПередачаНМАОрганизаций и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеНМАОрганизаций(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
    // {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = "ВЫБРАТЬ
	// }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
				   |	ПередачаНМА.Организация,
	               |	ПередачаНМА.Организация КАК Поставщик,
	               |	ПередачаНМА.Контрагент КАК Покупатель,
	               |	ПередачаНМА.СуммаДокумента КАК СуммаДокумента,
	               |	ПередачаНМА.ВалютаДокумента КАК Валюта,
	               |	ПередачаНМА.УчитыватьНДС КАК УчитыватьНДС,
				   |	ПередачаНМА.СуммаВключаетНДС КАК СуммаВключаетНДС,
				   |	ПередачаНМА.НематериальныйАктив КАК Товар,
				   |	ВЫРАЗИТЬ(ПередачаНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
				   |	ПередачаНМА.НематериальныйАктив.Код КАК ТоварКод,
				   |	ПередачаНМА.СтавкаНДС КАК СтавкаНДС,
				   |	ВЫБОР
				   |		КОГДА ПередачаНМА.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
				   |			ТОГДА 0
				   |		ИНАЧЕ 1
				   |	КОНЕЦ КАК ЕстьНДС,
				   |	ПередачаНМА.СуммаНДС КАК СуммаНДС,
				   |	ПередачаНМА.Сумма КАК Сумма
				   |ИЗ
				   |	Документ.ПередачаНМА КАК ПередачаНМА
				   |ГДЕ
				   |	ПередачаНМА.Ссылка = &ДокументОснование";
				   
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      	Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            	Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             	Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         	Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          	Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        	Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", 	Неопределено);
	ДанныеДляПечати.Вставить("Подразделение",    	"");
	ДанныеДляПечати.Вставить("Покупатель",       	Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  	Неопределено);
	ДанныеДляПечати.Вставить("Сумма",            	Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           	Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     	Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	(Шапка.ЕстьНДС = 0)); 

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.Товар;
	Строчка.ТоварНаименование   = Шапка.ТоварНаименование;
	Строчка.ТоварКод   			= Шапка.ТоварКод;
	Строчка.ТоварАртикул   		= "";
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
	Строчка.Цена                = Шапка.Сумма;
	Строчка.Сумма               = Шапка.Сумма;
	Строчка.СуммаНДС            = Шапка.СуммаНДС;
	Строчка.СтавкаНДС           = Шапка.СтавкаНДС;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование, Ссылка)


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
    // {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//Запрос.Текст = "ВЫБРАТЬ
	// }}Новый код:
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание	
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения, &ПустаяСтранаПроисхождения) КАК СтранаПроисхождения,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения.Код, """") КАК СтранаПроисхожденияКод,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения.Наименование, """") КАК ПредставлениеСтраны,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.НомерГТД, &ПустойНомерГТД) КАК НомерГТД,
	|	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.НомерГТД.Представление, """") КАК ПредставлениеГТД,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма,
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
						
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           Константы.ВалютаРегламентированногоУчета.Получить());
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()

Функция СобратьДанныеСФнаАвансИСуммовуюРазницу(Ссылка)
	
	Если Не (Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		или Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		или Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) 
		Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(Ссылка.Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = ?(Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
							ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, мНадписьПредоплата, "Суммы, связанные с расчетами по оплате (ст. 162 НК РФ)");
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		Запрос.Текст = 
		// {{KM WARE Акулов А.И. 14.07.2015 начало
		// не достаточно прав
		// {{Старый код:
		//"ВЫБРАТЬ
		// }}Новый код:
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// }}KM WARE Акулов А.И. 14.07.2015 окончание
		|	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
		|	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	СчетФактураВыданныйАвансы.Номенклатура,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		
			Строчка = Товары.Добавить();
			Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, НадписьНаименование);
			Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), НадписьНаименование));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СуммаВключаетНДС    = Истина;
			Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС  = СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма     = СтрокаТаблицы.Сумма;
		
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар               = НадписьНаименование;
		Строчка.ТоварНаименование   = НадписьНаименование;
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СуммаВключаетНДС	= Истина;

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

Функция СобратьДанныеСФНалоговогоАгента(Ссылка)
	
	Если Не Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Покупатель,
	|	СчетФактураВыданный.Контрагент КАК Поставщик,
	|	СчетФактураВыданный.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

				   
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		Запрос.Текст = 
		// {{KM WARE Акулов А.И. 14.07.2015 начало
		// не достаточно прав
		// {{Старый код:
		//"ВЫБРАТЬ
		// }}Новый код:
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// }}KM WARE Акулов А.И. 14.07.2015 окончание
		|	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	СчетФактураВыданныйАвансы.Номенклатура.Код КАК ТоварКод,
		|	СчетФактураВыданныйАвансы.Номенклатура.Артикул КАК ТоварАртикул,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
		|	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	СчетФактураВыданныйАвансы.Номенклатура,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)),
		|	СчетФактураВыданныйАвансы.Номенклатура.Код,
		|	СчетФактураВыданныйАвансы.Номенклатура.Артикул
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Строчка = Товары.Добавить();
			Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, Шапка.ВидАгентскогоДоговора);
			Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), Шапка.ВидАгентскогоДоговора));
			Строчка.ТоварКод          = СтрокаТаблицы.ТоварКод;
			Строчка.ТоварАртикул      = СтрокаТаблицы.ТоварАртикул;
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СтавкаНДС 			= СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС  			= СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма     			= СтрокаТаблицы.Сумма;
			Строчка.СуммаВключаетНДС	= Истина;
			
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар               = Шапка.ВидАгентскогоДоговора;
		Строчка.ТоварНаименование   = Шапка.ВидАгентскогоДоговора;
		Строчка.ТоварКод            = "";
		Строчка.ТоварАртикул        = "";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;
 		Строчка.СуммаВключаетНДС	= Истина;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

Функция СобратьДанныеДляПечатиИсправленияСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,		
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
	|	ТаблицаПоТоварам.Цена КАК Цена,
	|	ТаблицаПоТоварам.Сумма КАК Сумма,
	|	ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоТоварам.ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.Номенклатура,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Товар,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Товар.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаТовары.Товар.Код КАК ТоварКод,
	|	ТаблицаТовары.Товар.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаТовары.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Характеристика,
	|	""Товары"" КАК ВидПоступления
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
	|	ТаблицаПоУслугам.Номенклатура.Код,
	|	ТаблицаПоУслугам.Номенклатура.Артикул,
	|	""Россия"",
	|	NULL,
	|	""Россия"",
	|	"""",
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаПоУслугам.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	""Услуги""
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК ТаблицаПоУслугам
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ДокументОснование
	|	И ТаблицаПоУслугам.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПоступления,
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    	
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	Если ЗначениеЗаполнено(Поставщик.ГоловнаяОрганизация) Тогда 
		Грузоотправитель = Поставщик;
		Поставщик = Поставщик.ГоловнаяОрганизация;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("Структура") Тогда
		РеквизитыСФ = Ссылка;
	Иначе
		РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата, Организация, НомерИсходногоДокумента, ДатаИсходногоДокумента");
	КонецЕсли;
    	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            РеквизитыСФ.НомерИсходногоДокумента);
	ДанныеДляПечати.Вставить("Дата",             РеквизитыСФ.ДатаИсходногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, РеквизитыСФ.Дата);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();

	ЕстьТовары 		  = Ложь;
	ЕстьУслуги		  = Ложь;
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.ВидПоступления = "Товары");
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.ВидПоступления = "Услуги");
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	Если НЕ ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ТипДокументаРеализации = ТипЗнч(Шапка.ДокументРеализации);
	Если ТипДокументаРеализации = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ДокументРеализации, "ОтпускПроизвел, ОтпускРазрешил, ЗаРуководителяПоПриказу");
		Если ЕстьТовары И ЗначениеЗаполнено(РеквизитыШапки.ОтпускПроизвел) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 				РеквизитыШапки.ОтпускПроизвел);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			РеквизитыСФ.Дата);
			ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
		ИначеЕсли ЕстьУслуги Тогда
			Если ЗначениеЗаполнено(РеквизитыШапки.ОтпускРазрешил) Тогда
				ДанныеДляПечати.Вставить("КладовщикДляУПД", 			РеквизитыШапки.ОтпускРазрешил);
				ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		РеквизитыСФ.Дата);
				ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", РеквизитыШапки.ЗаРуководителяПоПриказу)
			Иначе	
				ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
				ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипДокументаРеализации = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипДокументаРеализации = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ДокументРеализации, "Исполнитель, ИсполнительПоПриказу");
		Если ЗначениеЗаполнено(РеквизитыШапки.Исполнитель) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 				РеквизитыШапки.Исполнитель);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			РеквизитыСФ.Дата);
			ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	РеквизитыШапки.ИсполнительПоПриказу)
		КонецЕсли;
	КонецЕсли;

	Возврат ДанныеДляПечати;
		
КонецФункции	

Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//|ВЫБРАТЬ
	// }}Новый код:
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Грузополучатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.Грузоотправитель,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Если ЗначениеЗаполнено(Поставщик.ГоловнаяОрганизация) Тогда 
		Поставщик = Поставщик.ГоловнаяОрганизация;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Организация",       Шапка.Организация);
	ДанныеДляПечати.Вставить("Поставщик",         Поставщик);
	ДанныеДляПечати.Вставить("Валюта",			  Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",        Шапка.Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",  Шапка.СуммаВключаетНДС);
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Исправление");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, РеквизитыСФ.Дата);
	
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
		
	Запрос.Текст = 
	// {{KM WARE Акулов А.И. 14.07.2015 начало
	// не достаточно прав
	// {{Старый код:
	//"ВЫБРАТЬ
	// }}Новый код:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }}KM WARE Акулов А.И. 14.07.2015 окончание
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовара,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры КАК Серия,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоПослеИзменения,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) / КорректировкаРеализацииТовары.Количество
	|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма / КорректировкаРеализацииТовары.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаПослеИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения) / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	1 КАК НомерТЧ
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииТовары.Количество <> КорректировкаРеализацииТовары.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Сумма <> КорректировкаРеализацииТовары.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДС <> КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Цена <> КорректировкаРеализацииТовары.ЦенаДоИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Содержание КАК СТРОКА(1000)),
	|	NULL,
	|	NULL,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) / КорректировкаРеализацииУслуги.Количество
	|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма / КорректировкаРеализацииУслуги.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	2
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииУслуги.Количество <> КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Сумма <> КорректировкаРеализацииУслуги.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.СуммаНДС <> КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Цена <> КорректировкаРеализацииУслуги.ЦенаДоИзменения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	Если РеквизитыСФ.Исправление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоИзменения", "ДоКорректировки");
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "ДоКорректировки", "ДоИзменения");
	КонецЦикла;
	
	Для каждого Строчка Из ТаблицаРезультата Цикл
		Строчка.НаименованиеТовара = СокрЛП(Строчка.НаименованиеТовара) + ПредставлениеСерий(Строчка);
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;

КонецФункции	

// Процедура пересчитывает ДанныеДляПечати.ТабличнаяЧасть в рубли для договоров в у.е.
// Вызывается из процедуры «Печать»
Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование, Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("Структура") Тогда
     	СтруктураШапкиДокумента = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");
		ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, Ссылка);
	Иначе
		СтруктураШапкиДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Организация, Контрагент, ДоговорКонтрагента");
	КонецЕсли;
	
	СуммаВзаиморасчетов = УчетНДСФормированиеДвижений.ПолучитьСуммуВзаиморасчетов(Ссылка, ТекущееОснование, СтруктураШапкиДокумента);
	
	РасчетСуммыНДСПоСтавке = РасчетНДСвРубляхПоСтавкеДокумента(ДанныеДляПечати.Дата);
	
	СтрокиСчетаФактуры = ДанныеДляПечати.ТабличнаяЧасть;
	СтрокиСчетаФактуры.Колонки.Добавить("СуммаБезНДС");
	МассивРаспределения = Новый Массив;
	Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
		СуммаСНДС = СтрокаСчетаФактуры.Сумма + ?(СтрокаСчетаФактуры.СуммаВключаетНДС, 0, СтрокаСчетаФактуры.СуммаНДС);
		СуммаБезНДС = СуммаСНДС - СтрокаСчетаФактуры.СуммаНДС;

		МассивРаспределения.Добавить(СуммаСНДС);
		СтрокаСчетаФактуры.СуммаБезНДС = СуммаБезНДС;
		
	КонецЦикла;
	
	СтрокиСчетаФактуры.Колонки.Добавить("СуммаРублевая");
	РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, СтрокиСчетаФактуры, "СуммаРублевая");
	
	Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
		Если РасчетСуммыНДСПоСтавке Тогда
			//Выделение суммы НДС, Расчет суммы без НДС
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
			
			СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
			СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
			
		Иначе
			МассивРаспределения.Очистить();
			МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаНДС);
			МассивРаспределенныхСумм = ttk_ОбщегоНазначения.РаспределитьПропорционально(СтрокаСчетаФактуры.СуммаРублевая, МассивРаспределения);
			Если МассивРаспределенныхСумм <> Неопределено Тогда
				СтрокаСчетаФактуры.Сумма = МассивРаспределенныхСумм[0];
				СтрокаСчетаФактуры.СуммаНДС = МассивРаспределенныхСумм[1];
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаСчетаФактуры.СуммаВключаетНДС Тогда
			СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма+СтрокаСчетаФактуры.СуммаНДС;
		КонецЕсли;

	КонецЦикла;
	СтрокиСчетаФактуры.Колонки.Удалить(СтрокиСчетаФактуры.Колонки.СуммаБезНДС);
	СтрокиСчетаФактуры.ЗаполнитьЗначения(0, "Цена");
	
КонецПроцедуры

// Функция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати() Экспорт 

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("Характеристика");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("ТоварКод");
	Товары.Колонки.Добавить("ТоварАртикул");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");
    Товары.Колонки.Добавить("НомерСтроки");
	
	Возврат Товары;

КонецФункции

Процедура ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт
	
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, ДанныеДляПечати.Дата);
		
	КПП = ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП 	 = "/" + КПП;
	КонецЕсли;
	ИННпоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
	ИННпоставщика = ?(ПустаяСтрока(ИННпоставщика), "", "ИНН") + ?(ПустаяСтрока(ИННпоставщика) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")
 		+ ИННпоставщика + КПП;
	
	СведенияОПокупателе   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, ДанныеДляПечати.Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДляПечати.Свойство("КППКонтрагента") И ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
	
	ИННПокупателя = ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	ИННПокупателя = ?(ПустаяСтрока(ИННПокупателя), "", "ИНН") + ?(ПустаяСтрока(ИННПокупателя) ИЛИ ПустаяСтрока(КПП), " " , "/КПП ")
		+ ИННПокупателя + ?(ПустаяСтрока(КПП), "" , "/") + КПП;
		
	Если ЗначениеЗаполнено(ДанныеДляПечати.ДатаОтгрузкиПередачи) Тогда
		
		ШаблонДатыОтгрузкиПередачи = Формат(ДанныеДляПечати.ДатаОтгрузкиПередачи, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
		
		ДлинаДаты = 32;
		ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
		ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
		
		ДатаОтгрузкиПередачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
			СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
			СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
			"года");
	Иначе
		ДатаОтгрузкиПередачи = "«      »                    20     года";
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = ДатаОтгрузкиПередачи;
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННпоставщика), "" , ", ") + ИННпоставщика;
	ОбластьМакета.Параметры.ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННПокупателя), "" , ", ") + ИННПокупателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры    

// Процедура формирует параметры для печати универсального передаточного документа: 
// ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
Процедура СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати) Экспорт
	
	// Если в данных печати уже заполнены ФИО и должность кладовщика - ничего формировать не нужно
	Если ДанныеДляПечати.Свойство("ФИОКладовщика") И ЗначениеЗаполнено(ДанныеДляПечати.ФИОКладовщика) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеДляПечати.Свойство("КладовщикДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("ДатаДокументаДляУПД")
		ИЛИ НЕ ДанныеДляПечати.Свойство("ЗаКладовщикаПоПриказуДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("Организация") Тогда
		ДанныеДляПечати.Вставить("ФИОКладовщика", 		"");
		ДанныеДляПечати.Вставить("ДолжностьКладовщика", "");
	 	Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПечати.КладовщикДляУПД) Тогда
		#Если Сервер ИЛИ ВнешнееСоединение Тогда
			ФамилияИмяОтчествоФизЛица = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД);
		#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
			ФамилияИмяОтчествоФизЛица = ФормированиеПечатныхФорм.ФамилияИмяОтчество(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД);
		#КонецЕсли
		ФамилияИмяОтчествоКладовщика  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИОКладовщика         		  = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);
		ФИОКладовщика = ФИОКладовщика  + ?(ЗначениеЗаполнено(ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД), " " + ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД, "");
		
		ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД, ДанныеДляПечати.Организация);
		ДолжностьКладовщика       	  = ПодразделениеДолжностьФизЛица.Должность;
	Иначе
		ФИОКладовщика		          = "";
		ДолжностьКладовщика 		  = "";
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ФИОКладовщика", 		ФИОКладовщика);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", ДолжностьКладовщика);
	
КонецПроцедуры

Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина)
	
	#Если Сервер ИЛИ ВнешнееСоединение Тогда
		Возврат ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
		Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);		
	#КонецЕсли
	
КонецФункции

Функция ПредставлениеСерий(Выборка)
	
	#Если Сервер ИЛИ ВнешнееСоединение Тогда
		Возврат ФормированиеПечатныхФормСервер.ПредставлениеСерий(Выборка);
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда	
		Возврат ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка);		
	#КонецЕсли
	
КонецФункции	

Функция ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента)
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	ДанныеСчетаФактуры = Новый Структура;
	ДанныеСчетаФактуры.Вставить("Номер", 			  ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("Дата", 			  ДанныеДокумента.Дата);
	ДанныеСчетаФактуры.Вставить("Организация", 		  ДанныеДокумента.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент", 		  ДанныеДокумента.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры", 	  Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ДанныеСчетаФактуры.Вставить("Руководитель", 	  ДанныеДокумента.Руководитель);
	ДанныеСчетаФактуры.Вставить("ГлавныйБухгалтер",   ДанныеДокумента.ГлавныйБухгалтер);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	
	ДанныеСчетаФактуры.Вставить("НомерИсходногоДокумента", 			ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("ДатаИсходногоДокумента", 			ДанныеДокумента.Дата);  
	ДанныеСчетаФактуры.Вставить("НомерПлатежноРасчетногоДокумента", "");
	ДанныеСчетаФактуры.Вставить("ДатаПлатежноРасчетногоДокумента", 	"");

	ДанныеДляПечати = СобратьДанныеДляПечатиСчетФактурыВыданногоПоДокументу(ДанныеДокумента.ДокументСсылка, ДанныеСчетаФактуры, УчетнаяПолитика);
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",			ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		ДанныеСчетаФактуры.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		Ложь);
	ДанныеДляПечати.Вставить("НомерИсправления", 		"");
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		ДанныеСчетаФактуры.ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		"");
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	Если НЕ ДанныеДляПечати.Свойство("СчетФактураБезНДС") Тогда
		ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	Ложь);
	КонецЕсли;
	Если ДанныеДокумента.Свойство("ПередачаНаРеализациюПоКомиссии") И ДанныеДокумента.ПередачаНаРеализациюПоКомиссии Тогда
		ДанныеДляПечати.Вставить("ПередачаНаРеализациюПоКомиссии", ДанныеДокумента.ПередачаНаРеализациюПоКомиссии);
		Если ДанныеДляПечати.Грузоотправитель = "он же" Тогда
			ДанныеДляПечати.Грузоотправитель = ДанныеДляПечати.Поставщик;
		КонецЕсли;
	КонецЕсли;

	Основание = Строка(ДанныеДокумента.ДоговорКонтрагента); 
	Если ДанныеДокумента.Свойство("Доверенность") И ЗначениеЗаполнено(ДанныеДокумента.Доверенность) Тогда
		ДанныеДляПечати.Вставить("Основание", Основание + ?(ПустаяСтрока(Основание), "", "; ") + ДанныеДокумента.Доверенность);
	Иначе
		ДанныеДляПечати.Вставить("Основание", Основание);	
	КонецЕсли;
	
	СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
	Иначе
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.Дата);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("СтатусУПД", 			 2);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, ТабДокумент = Неопределено, СтруктураОтбораСчетаФактуры = Неопределено) Экспорт
	
	Если ДанныеДокумента.Дата < '20130101' Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного документа возможно только с 01 января 2013 года!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Если СтруктураОтбораСчетаФактуры = Неопределено Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.ДокументСсылка, "СчетФактураВыданный");
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДанныеДокумента.ДокументСсылка, "СчетФактураВыданный", СтруктураОтбораСчетаФактуры);
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		// Устанавливаем параметры печати и колонтитулы
		ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху 			= 12;
		ТабДокумент.ПолеСлева  			= 0;
		ТабДокумент.ПолеСнизу  			= 0;
		ТабДокумент.ПолеСправа 			= 0;
		ТабДокумент.АвтоМасштаб 		= Истина;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) ИЛИ СчетФактураТребуется Тогда
		
		// УПД печатается из документа счет-фактура
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По документу ""%1"" не выписан счет-фактура или он помечен на удаление!'"), ДанныеДокумента.ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СчетФактура, "Дата, ВидСчетаФактуры, Исправление,НомерИсправления,
			|СчетФактураБезНДС, КППКонтрагента");
		ДанныеДокумента.Вставить("Ссылка", 					СчетФактура); 
		ДанныеДокумента.Вставить("Дата", 					РеквизитыСФ.Дата);
		ДанныеДокумента.Вставить("ВидСчетаФактуры", 		РеквизитыСФ.ВидСчетаФактуры);
		ДанныеДокумента.Вставить("Исправление", 	 		РеквизитыСФ.Исправление);
		ДанныеДокумента.Вставить("НомерИсправления", 		РеквизитыСФ.НомерИсправления);
		ДанныеДокумента.Вставить("СчетФактураБезНДС", 		РеквизитыСФ.СчетФактураБезНДС);
		ДанныеДокумента.Вставить("КППКонтрагента", 	 		РеквизитыСФ.КППКонтрагента);
		
		ДанныеДляПечати = Документы.СчетФактураВыданный.ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента);
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
			ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
		КонецЕсли;
		
		Документы.СчетФактураВыданный.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент);

		Возврат ТабДокумент;
		
	КонецЕсли;
	
	// УПД печатается по статусу 2
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");

	ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);

	ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура абс_ОпределитьНомерДатуДокументаОплаты(ЗаписьКниги, ЭтоДетальнаяЗапись)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда 
		Возврат;
	КонецЕсли;
	
	Если (НЕ ЗаписьКниги.НаАванс) И (ЗаписьКниги.КодВидаОперации  <> "06") Тогда  //"06" - налоговый агент 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.НомерПлатежноРасчетногоДокумента;
		ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактураДокумент.ДатаПлатежноРасчетногоДокумента;
		Если НЕ ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда 
			Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
				ЗаписьКниги.НомерДокументаОплаты = ЗаписьКниги.СчетФактура.Номер;
				ЗаписьКниги.ДатаДокументаОплаты = ЗаписьКниги.СчетФактура.Дата;					
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры


//////////////
#КонецЕсли                                                       

// {{KM WARE Семенов И.С. 13.07.2015 Заявка № 33672 начало
// 
СчетФактураПоПлатежке=0;
// }}KM WARE Семенов И.С. 13.07.2015 окончание
