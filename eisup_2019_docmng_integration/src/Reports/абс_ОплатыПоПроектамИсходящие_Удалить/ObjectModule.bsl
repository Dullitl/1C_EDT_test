#Если Клиент Тогда
Перем Таб;	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	//УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	абс_ЗакупочныеЗаказыПоПроектамСрезПоследних.ЗакупочныйЗаказ,
	|	абс_ЗакупочныеЗаказыПоПроектамСрезПоследних.Проект
	|ПОМЕСТИТЬ ВТ_ЗЗ
	|ИЗ
	|	РегистрСведений.абс_ЗакупочныеЗаказыПоПроектам.СрезПоследних(, ) КАК абс_ЗакупочныеЗаказыПоПроектамСрезПоследних
	|ГДЕ
	|	абс_ЗакупочныеЗаказыПоПроектамСрезПоследних.ЗакупочныйЗаказ.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ЗЗ.Проект,
	|	абс_СчетНаОплатуОплаты.Контрагент,
	|	ВТ_ЗЗ.ЗакупочныйЗаказ,
	|	абс_СчетНаОплатуОплаты.Ссылка КАК СчетНаОплату,
	|	абс_СчетНаОплатуОплаты.ДоговорКонтрагента,
	|	абс_СчетНаОплатуОплаты.ЦФО,
	|	абс_СчетНаОплатуОплаты.ЦФУ,
	|	абс_СчетНаОплатуОплаты.БюджетнаяСтатья,
	|	абс_СчетНаОплатуОплаты.КВ,
	|	абс_СчетНаОплатуОплаты.ТипРасхода,
	|	абс_СчетНаОплатуОплаты.Ссылка.НазначениеПлатежа,
	|	абс_СчетНаОплатуОплаты.Ссылка.ДатаВходящегоСчета,
	|	абс_СчетНаОплатуОплаты.Ссылка.НомерВходящегоСчета
	|ПОМЕСТИТЬ ВТ_ЗЗ_Счета
	|ИЗ
	|	ВТ_ЗЗ КАК ВТ_ЗЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|		ПО ВТ_ЗЗ.ЗакупочныйЗаказ = абс_СчетНаОплатуОплаты.Ссылка.ЗакупочныйЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеСредствОплаты.Оплата.Контрагент КАК Контрагент,
	|	ЗаявкаНаРасходованиеСредствОплаты.Оплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.НомерВходящегоСчета КАК НомерВхСчета,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДатаВходящегоСчета КАК ДатаВхСчета,
	|	ЗаявкаНаРасходованиеСредствОплаты.Оплата.Валюта КАК Валюта,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЦФО КАК ЦФО,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЦФУ КАК ЦФУ,
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение.Номер КАК НомерПП,
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение.Дата КАК ДатаПП,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.БюджетнаяСтатья КАК БюджетнаяСтатья,
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение КАК Платежка,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату,
	|	СУММА(ЕСТЬNULL(ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ВалютнаяСумма, 0)) КАК СуммаСчета,
	|	СУММА(ЕСТЬNULL(ЗаявкаНаРасходованиеСредствОплаты.Оплата.ВалютнаяСумма, 0)) КАК СуммаОплаты,
	|	СУММА(ЕСТЬNULL(ЗаявкаНаРасходованиеСредствОплаты.Оплата.СуммаПлатежа, 0)) КАК СуммаПлатежаРегл,
	|	МАКСИМУМ(абс_СчетНаОплатуОплаты.Оплата) КАК Оплата
	|ПОМЕСТИТЬ ВТ_ДанныеПоОплате
	|{ВЫБРАТЬ
	|	Контрагент.*,
	|	ДоговорКонтрагента.* КАК Договор,
	|	ЗакупочныйЗаказ.* КАК Закупочный,
	|	НомерВхСчета,
	|	СуммаСчета,
	|	ДатаВхСчета,
	|	Валюта.*,
	|	ЦФО.*,
	|	ЦФУ.*,
	|	НомерПП КАК НомерПлатежки,
	|	ДатаПП КАК ДатаПлатежки,
	|	СуммаОплаты КАК СуммаОплаты,
	|	БюджетнаяСтатья.* КАК БюджетнаяСтатья,
	|	Платежка.*,
	|	СчетНаОплату.*,
	|	СуммаПлатежаРегл}
	|ИЗ
	|	Документ.абс_СчетНаОплату.Оплаты КАК абс_СчетНаОплатуОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.Оплаты КАК ЗаявкаНаРасходованиеСредствОплаты
	|		ПО абс_СчетНаОплатуОплаты.ЗРС = ЗаявкаНаРасходованиеСредствОплаты.Ссылка
	|			И абс_СчетНаОплатуОплаты.Контрагент = ЗаявкаНаРасходованиеСредствОплаты.Оплата.Контрагент
	|			И абс_СчетНаОплатуОплаты.Оплата = ЗаявкаНаРасходованиеСредствОплаты.Оплата
	|ГДЕ
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
	|	И абс_СчетНаОплатуОплаты.ПлатежноеПоручение.Статус В(&МассивОплат)
	|{ГДЕ
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.Контрагент.* КАК Контрагент,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЗакупочныйЗаказ.* КАК ЗакупочныйЗаказ,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.НомерВходящегоСчета КАК НомерВходящегоСчета,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЦФО.* КАК ЦФО,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЦФУ.* КАК ЦФУ,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.БюджетнаяСтатья.* КАК БюджетнаяСтатья,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаРасходованиеСредствОплаты.Оплата.Контрагент,
	|	ЗаявкаНаРасходованиеСредствОплаты.Оплата.ДоговорКонтрагента,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЗакупочныйЗаказ,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.НомерВходящегоСчета,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ДатаВходящегоСчета,
	|	ЗаявкаНаРасходованиеСредствОплаты.Оплата.Валюта,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЦФО,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.ЦФУ,
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение.Номер,
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение.Дата,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату.БюджетнаяСтатья,
	|	абс_СчетНаОплатуОплаты.ПлатежноеПоручение,
	|	ЗаявкаНаРасходованиеСредствОплаты.СчетНаОплату
	|{УПОРЯДОЧИТЬ ПО
	|	Контрагент.*,
	|	НомерВхСчета,
	|	ЦФО.*,
	|	ЦФУ.*,
	|	СуммаСчета,
	|	СуммаОплаты,
	|	СуммаПлатежаРегл}
	|{ИТОГИ ПО
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	ЗакупочныйЗаказ.*,
	|	НомерВхСчета}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗЗ_Счета.Контрагент,
	|	ВТ_ЗЗ_Счета.ДоговорКонтрагента,
	|	ВТ_ЗЗ_Счета.ЗакупочныйЗаказ КАК ЗакупочныйЗаказ,
	|	ВТ_ЗЗ_Счета.НомерВходящегоСчета КАК НомерВхСчета,
	|	ВТ_ЗЗ_Счета.ДатаВходящегоСчета КАК ДатаВхСчета,
	|	ВТ_ЗЗ_Счета.ЗакупочныйЗаказ.ЦФО КАК ЦФО,
	|	ВТ_ЗЗ_Счета.ЗакупочныйЗаказ.ЦФУ КАК ЦФУ,
	|	ВТ_Данные.НомерПП,
	|	ВТ_Данные.ДатаПП,
	|	ВТ_ЗЗ_Счета.БюджетнаяСтатья,
	|	ВТ_Данные.Платежка,
	|	ВТ_ЗЗ_Счета.СчетНаОплату,
	|	ВТ_Данные.СуммаСчета КАК СуммаСчета,
	|	ВТ_Данные.СуммаОплаты КАК СуммаОплаты,
	|	ВТ_Данные.СуммаПлатежаРегл КАК СуммаПлатежаРегл,
	|	ВТ_ЗЗ_Счета.Проект,
	|	ВТ_ЗЗ_Счета.ЗакупочныйЗаказ.Дата КАК ДатаЗЗ
	|{ВЫБРАТЬ
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	ЗакупочныйЗаказ.*,
	|	НомерВхСчета,
	|	ДатаВхСчета,
	|	ЦФО.*,
	|	ЦФУ.*,
	|	НомерПП,
	|	ДатаПП,
	|	БюджетнаяСтатья.*,
	|	Платежка.*,
	|	СчетНаОплату.*,
	|	СуммаСчета,
	|	СуммаОплаты,
	|	СуммаПлатежаРегл,
	|	Проект.*}
	|ИЗ
	|	ВТ_ЗЗ_Счета КАК ВТ_ЗЗ_Счета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоОплате КАК ВТ_Данные
	|		ПО ВТ_ЗЗ_Счета.ЗакупочныйЗаказ = ВТ_Данные.ЗакупочныйЗаказ
	|			И ВТ_ЗЗ_Счета.СчетНаОплату = ВТ_Данные.СчетНаОплату
	|{ГДЕ
	|	ВТ_ЗЗ_Счета.Проект.*,
	|	ВТ_ЗЗ_Счета.Контрагент.*,
	|	ВТ_ЗЗ_Счета.ДоговорКонтрагента.*,
	|	ВТ_ЗЗ_Счета.ЗакупочныйЗаказ.*,
	|	ВТ_ЗЗ_Счета.НомерВходящегоСчета,
	|	ВТ_Данные.НомерПП,
	|	ВТ_Данные.СчетНаОплату.*,
	|	ВТ_Данные.БюджетнаяСтатья.*}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗЗ
	|ИТОГИ
	|	СУММА(СуммаСчета),
	|	СУММА(СуммаОплаты),
	|	СУММА(СуммаПлатежаРегл)
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Проект.*,
	|	НомерВхСчета,
	|	ДоговорКонтрагента.*,
	|	Контрагент.*,
	|	ЦФО.*,
	|	ЦФУ.*,
	|	БюджетнаяСтатья.*,
	|	СуммаСчета,
	|	СуммаОплаты,
	|	СуммаПлатежаРегл}";



	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	
	//КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НормаАмортизации", "Норма амортизации");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОставшийсяСрок", "Оставшийся срок");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПервоначальнаяСтоимость", "Первоначальная стоимость");

	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаПоступления", "Дата приобретения");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаВвода", "Дата ввода в эксплуатацию");

	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаНач", "Сумма на начало");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Поступление", "Поступление");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВводВЭксплуатацию", "Ввод в эксплуатацию (Дт счета 01)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПрочееВыбытие", "Прочее выбытие");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПрочееПеремещение", "Прочее перемещение (счета 07, 08)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаКон", "Сумма на конец"); 
	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяНач", "GM");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьПриход", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяПриход", "GM ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьРасход", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяРасход", "GM ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьКон", "REV");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяКон", "GM ");

	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Себестоимость", "Себестоимость");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяПрибыль", "Валовая прибыль");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Эффективность", "Эффективность, %");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Рентабельность", "Рентабельность, %");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	//ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	//УниверсальныйОтчет.ДобавитьПоказатель("Количество", "Ед. хранения", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	//УниверсальныйОтчет.ДобавитьПоказатель("КоличествоБазовыхЕдиниц", "Базовых ед.", Ложь, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	//УниверсальныйОтчет.ДобавитьПоказатель("КоличествоЕдиницОтчетов", "Ед. отчетов", Ложь, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьНач", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные","Начальные данные");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяНач", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные","Начальные данные");
	////УниверсальныйОтчет.ДобавитьПоказатель("Номер", "Номер п/п", Истина, "ЧЦ=15; ЧДЦ=2", "Объект строительства","Объект строительства");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаСчета", "Сумма счета", Истина, "", "","");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаОплаты", "Сумма оплаты", Истина, "", "","");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаПлатежаРегл", "Сумма оплаты (руб.)", Истина, "", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Нач", "Балансовая стоимость", Истина, "", "Данные на начало БУ","Данные на начало БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Нач", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на начало БУ","Данные на начало БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУОСТНач", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на начало БУ","Данные на начало БУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Приход", "Изм. стоимости", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Расход", "Изм. стоимости(списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Приход", "Амортизация", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Расход", "Амортизация (списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период БУ","Данные за период БУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ01Кон", "Балансовая стоимость", Истина, "", "Данные на конец БУ","Данные на конец БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУ02Кон", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на конец БУ","Данные на конец БУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаБУОСТКон", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на конец БУ","Данные на конец БУ");
	//
	//   УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Нач", "Балансовая стоимость", Истина, "", "Данные на начало НУ","Данные на начало НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Нач", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на начало НУ","Данные на начало НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУОСТНач", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на начало НУ","Данные на начало НУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Приход", "Изм. стоимости", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Расход", "Изм. стоимости(списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Приход", "Амортизация", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Расход", "Амортизация (списание)", Истина, "ЧЦ=15; ЧДЦ=2", "Данные за период НУ","Данные за период НУ");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ01Кон", "Балансовая стоимость", Истина, "", "Данные на конец НУ","Данные на конец НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУ02Кон", "Амортизация", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНУОСТКон", "Остаточная стоимость", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	//УниверсальныйОтчет.ДобавитьПоказатель("АмортизационнаяПремия", "Амортизационная премия", Истина, "ДФ=dd.MM.yy", "Данные на конец НУ","Данные на конец НУ");
	//


 
	//УниверсальныйОтчет.ДобавитьПоказатель("ПрочееПеремещение", "Прочее перемещение (счета 07, 08)", Истина, "ЧЦ=15; ЧДЦ=2", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаКон", "Сумма на конец", Истина, "ЧЦ=15; ЧДЦ=2", "","");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьРасход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения","Отрицательные изменения");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяРасход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения","Отрицательные изменения");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьКон", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные","Конечные данные");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяКон", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные","Конечные данные");
		
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалНач", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные (в валюте)","Начальные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалНач", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Начальные данные (в валюте)","Начальные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалПриход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Положительные изменения (в валюте)","Положительные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалПриход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Положительные изменения (в валюте)","Положительные изменения (в валюте)");

	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалРасход", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения (в валюте)","Отрицательные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалРасход", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Отрицательные изменения (в валюте)","Отрицательные изменения (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьВалКон", "REV", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные (в валюте)","Конечные данные (в валюте)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяВалКон", "GM", Истина, "ЧЦ=15; ЧДЦ=2", "Конечные данные (в валюте)","Конечные данные (в валюте)");
		
	
	//УниверсальныйОтчет.ДобавитьПоказатель("Себестоимость", "Себестоимость  (" + ВалютаУпр + ")", Ложь, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяПрибыль", "Валовая прибыль (" + ВалютаУпр + ")", Истина, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("Эффективность", "Эффективность, %", Ложь, "ЧЦ=15; ЧДЦ=2");
	//УниверсальныйОтчет.ДобавитьПоказатель("Рентабельность", "Рентабельность, %", Истина, "ЧЦ=15; ЧДЦ=2");

	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("РМ");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");

	//МассивДанных = Новый массив;
	//МассивДанных.Добавить("PM");
	//МассивДанных.Добавить("Контрагент");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки(МассивДанных);
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьОтбор("Проект");
	//УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	//
	//УниверсальныйОтчет.ДобавитьОтбор("РМ");

	//УниверсальныйОтчет.ДобавитьОтбор("Наименование");
		//УниверсальныйОтчет.ДобавитьОтбор("Покупатель");
	//УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
ВидыСубконто = Новый Массив;
ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
ВидыСубконтоНом  = Новый Массив;
Если ВалютаУпр.Пустая() Тогда
	валютаУпр = Справочники.Валюты.НайтиПоКоду("000");
КонецЕсли;

ОбрКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(УниверсальныйОтчет.ДатаКон = Дата('00010101'),ТекущаяДата(),УниверсальныйОтчет.ДатаКон),Новый Структура("Валюта", ВалютаУпр)).Курс;
Если ЗначениеЗаполнено(ОбрКурс) Тогда
 	Курс = 1/ОбрКурс;
Иначе
	Курс =1;
КонецЕсли;
    МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
    ВидыСубконтоНом.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	//
	МассивОплат = Новый Массив;
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.Отправлено);
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.ГотовКОплате);
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.ПеренесенаВГК);
	массивОплат.Добавить(Перечисления.абсСтатусыПлатежей.Оплачен);
	//
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СЧет90_02",ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНач",Новый Граница(УниверсальныйОтчет.ДатаНач,ВидГраницы.Включая));
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКон",Новый Граница(КонецДня(УниверсальныйОтчет.ДатаКон),ВидГраницы.Включая));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Ввод",Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивОплат",МассивОплат);

	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01",ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет07",ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет0804",ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет02НУ",ПланыСчетов.Налоговый.АмортизацияОС_01);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01НУ",ПланыСчетов.Налоговый.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СчетКВ",ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет01БУ",ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Счет02БУ",ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяДата",'00010101');	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивСчетов",МассивСчетов);
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
 УниверсальныйОтчет.мРежимВводаПериода = 0;

#КонецЕсли
