Перем ИмяРегистраБухгалтерии Экспорт;

#Если Клиент Тогда

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
			
	Макет = ПолучитьМакет("Макет");
	
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоНачДт", СальдоНачДт);
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоНачКт", СальдоНачКт);
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоКонДт", СальдоКонДт);
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоКонКт", СальдоКонКт);
	
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотДт", ОборотДт);
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотКт", ОборотКт);
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотДтКорСчет", ОборотДтКорСчета);
	УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотКтКорСчет", ОборотКтКорСчета);
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок=Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы-1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроИтоги = "";
	Если ПоСубсчетам Или ПоСубсчетамКорСчетов Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субсчетам"
	КонецЕсли;

	ДополнениеКИтогам = СформироватьСтрокуОписанияИтоговПоИзмерениямПостроителя(ПостроительОтчета);
	
	Если НЕ ПустаяСтрока(ДополнениеКИтогам) Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", " + ДополнениеКИтогам;
	КонецЕсли;
	ТекстПроИтоги = Сред(ТекстПроИтоги, 3);

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	Если ПоВалютам Тогда
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";	
	КонецЕсли;
	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция ЗаголовокОтчета() Экспорт
	
	ИмяОтчета = "Обороты счета ";
	
	Возврат ИмяОтчета + ?(ЗначениеЗаполнено(Счет), Счет, "(не выбран счет)");
	
КонецФункции // ЗаголовокОтчета()


//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

//Функция возвращает ограничения для отчета
Функция ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос)
	
	ОграниченияПоПостроителюОтчета = ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
	
	СтрокаОграниченийПоРеквизитам = "";
	ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Возврат СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета;
	
КонецФункции

//Процедура устанавливает ограничения по запросу
Процедура УстановитьПараметрыЗапроса(Запрос, Знач АвтоматическиРассчитатьКонечнуюДатуОтчета = Ложь)
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаНач='00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач+1);
	КонецЕсли;
	
	КонечнаяДатаОтчета = ДатаКон;			
		
	Если АвтоматическиРассчитатьКонечнуюДатуОтчета Тогда
			
		Если НЕ(Не ЗначениеЗаполнено(Период)
			ИЛИ Врег(Период) = "РЕГИСТРАТОР") Тогда
				
			ДатаПоследнегоОборота = ПолучитьДатуПоследнегоОборотаПоОтчету();
			КонечнаяДатаОтчета = ДатаПоследнегоОборота;
				
		КонецЕсли;
				
	КонецЕсли;
	
	Если КонечнаяДатаОтчета <> '00010101000000' Тогда
		КонечнаяДатаОтчета = Новый Граница(КонецДня(КонечнаяДатаОтчета), ВидГраницы.Включая);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДатаКон", КонечнаяДатаОтчета);
	
КонецПроцедуры

//Функция возвращает дату последнего оборота по ограничениям
Функция ПолучитьДатуПоследнегоОборотаПоОтчету()
	
	Запрос = Новый Запрос;
	УстановитьПараметрыЗапроса(Запрос);
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос);
	
	Запрос.Текст = "
	|Выбрать Разрешенные 
	|	Период КАК Период,
	|	КорСчет КАК КорСчет
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, " + Период + ", Счет В ИЕРАРХИИ (&Счет), , " + 
	ОграниченияПоРеквизитам + ") КАК БухОбороты
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КонецГода(ТекущаяДата());
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КонечнаяДатаПериода = ПолучитьДатуОкончанияПериода(Выборка.Период, Период);
	Возврат КонечнаяДатаПериода;
	
КонецФункции

// Формирование текста запроса
//
// Возвращаемое значение:
//   Строка   – текст сформированного запроса
//
Процедура СформироватьТекстЗапросов(МассивРесурсов, ЗапросОбороты, ЗапросОстатки)

	Периодичность = Период;
	
	ТекстСубконто = "";
	ТекстСубконтоИзмерения = "";
	
	// Субконто отчета
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		
		СтрокаТипаИзмерения = ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
				
		ТекстСубконто = ТекстСубконто + "
		|	" + Измерение.ПутьКДанным + " КАК " + Измерение.Имя + ",";
		ТекстСубконто = ТекстСубконто + "
		|	ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление,";
		
		ТекстСубконтоИзмерения = ТекстСубконтоИзмерения + ",
		|	" + Измерение.ПутьКДанным +" "+СтрокаТипаИзмерения + " КАК " + Измерение.Имя;
						
	КонецЦикла;
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(ЗапросОстатки);
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(ЗапросОбороты);
	
	Если ПоСубсчетам Тогда
		
		ТекстСчет = 
		"	Счет КАК Счет, 
		
		|	Счет.Вид КАК ВидСчета, 
		|	Счет.Порядок КАК СчетПорядок, 
		|	Счет.Представление КАК СчетПредставление,";
		
	Иначе
		
		ТекстСчет = "";
		
	КонецЕсли;
		
	ТекстОбороты = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет + ТекстСубконто + "
	|	КорСчет.Ссылка КАК КорСчет, 
	|	КорСчет.Порядок КАК КорСчетПорядок, 
	|	КорСчет.Представление КАК КорСчетПредставление,";
	
	ТекстОстатки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет +  ТекстСубконто + "";
	
	Если ПоВалютам Тогда
		
		ТекстПоВалютам = " Таблица.Валюта КАК Валюта, Таблица.Валюта.Представление КАК ВалютаПредставление  ";
		ТекстОбороты = ТекстОбороты + ТекстПоВалютам + ",";
		ТекстОстатки = ТекстОстатки + ТекстПоВалютам + ",";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ТекстПериод = ?(ВРЕГ(Период)<>"РЕГИСТРАТОР",
					"
					|	Период,",
					"
					|	Регистратор КАК Период,
					|	ПРЕДСТАВЛЕНИЕ(Регистратор) КАК РегистраторПредставление,
					|	Регистратор.Дата КАК РегистраторДата,");
		ТекстОбороты = ТекстОбороты + ТекстПериод;
		ТекстОстатки = ТекстОстатки + ТекстПериод;
					
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		ТекстОбороты = ТекстОбороты + "
		|	" + ИмяРесурса + "ОборотДт КАК " + ИмяРесурса + "ОборотДт,
		|	" + ИмяРесурса + "ОборотКт КАК " + ИмяРесурса + "ОборотКт,
		|	ВЫБОР КОГДА "+ ИмяРесурса +"ОборотДт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть"+ ИмяРесурса +"ОборотДт,
		|	ВЫБОР КОГДА "+ ИмяРесурса +"ОборотКт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть"+ ИмяРесурса +"ОборотКт,";
		
		ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "Развернутый", "");
		ТекстОстатки = ТекстОстатки + "
		|	" + ИмяРесурса + "Начальный" + ТекстРазвернутоеСальдо + "ОстатокДт КАК " + ИмяРесурса + "НачДт,
		|	" + ИмяРесурса + "Начальный" + ТекстРазвернутоеСальдо + "ОстатокКт КАК " + ИмяРесурса + "НачКт,
		|	" + ИмяРесурса + "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокДт КАК " + ИмяРесурса + "КонДт,
		|	" + ИмяРесурса + "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокКт КАК " + ИмяРесурса + "КонКт,
		|	" + ИмяРесурса + "ОборотДт КАК " + ИмяРесурса + "ЕстьОборотДт,
		|	" + ИмяРесурса + "ОборотКт КАК " + ИмяРесурса + "ЕстьОборотКт,";
		
	КонецЦикла;
	
	ТекстОстатки = Лев(ТекстОстатки, СтрДлина(ТекстОстатки) - 1);
	ТекстОбороты = Лев(ТекстОбороты, СтрДлина(ТекстОбороты) - 1);
	
	ТекстОбороты = ТекстОбороты + "
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Обороты(&ДатаНач, &ДатаКон, " + Периодичность + 
	    ", Счет В ИЕРАРХИИ (&Счет), , " + ОграниченияПоРеквизитам + ") КАК Таблица
	| ";
	
	ТекстОстатки = ТекстОстатки + "
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, " + Периодичность + 
	    ", ДвиженияИГраницыПериода, счет В ИЕРАРХИИ (&счет), , " + ОграниченияПоРеквизитам + ") КАК Таблица
	|";
	
	ТекстИтогиОбороты = "";
	ТекстИтогиОстатки = "";
	ТекстПорядок = "";
	
	Если ПоСубсчетам Тогда
		ТекстПорядок = ТекстПорядок + ", СчетПорядок";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		Если ВРег(Период)<>"РЕГИСТРАТОР" Тогда
			ТекстПорядок = ТекстПорядок + ", Период";
		Иначе
			ТекстПорядок = ТекстПорядок + ", РегистраторДата, Регистратор";
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		ТекстПорядок = ТекстПорядок + ", " + Измерение.Имя;
	КонецЦикла;
	
	ТекстОбороты = ТекстОбороты + "
	|УПОРЯДОЧИТЬ ПО "+Сред(ТекстПорядок + ", КорСчетПорядок", 2);
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
			
		ТекстОстатки = ТекстОстатки + "
		|УПОРЯДОЧИТЬ ПО "+Сред(ТекстПорядок, 2);
		
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
	
		ТекстИтогиОбороты = ТекстИтогиОбороты + ",
		|	СУММА(" + ИмяРесурса + "ОборотДт),
		|	СУММА(" + ИмяРесурса + "ОборотКт),
		|	СУММА(Есть" + ИмяРесурса + "ОборотДт),
		|	СУММА(Есть" + ИмяРесурса + "ОборотКт)";
		
		ТекстИтогиОстатки = ТекстИтогиОстатки + ",
		|	СУММА(" + ИмяРесурса + "НачДт),
		|	СУММА(" + ИмяРесурса + "НачКт),
		|	СУММА(" + ИмяРесурса + "КонДт),
		|	СУММА(" + ИмяРесурса + "КонКт),
		|	СУММА(" + ИмяРесурса + "ЕстьОборотДт),
		|	СУММА(" + ИмяРесурса + "ЕстьОборотКт)";

	КонецЦикла; 
		
	ТекстОбороты = ТекстОбороты + "
	|ИТОГИ " + Сред(ТекстИтогиОбороты, 2)+ "
	|	ПО ОБЩИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|ИТОГИ " + Сред(ТекстИтогиОстатки, 2)+ "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		ТекстОбороты = ТекстОбороты +	",
		|	Счет ИЕРАРХИЯ КАК Счет";
		ТекстОстатки = ТекстОстатки +	",
		|	Счет ИЕРАРХИЯ КАК Счет";
	КонецЕсли;
	
	// добавим итоги по субконто
	ТекстОбороты = ТекстОбороты + ТекстСубконтоИзмерения;
	ТекстОстатки = ТекстОстатки + ТекстСубконтоИзмерения;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		Текст = ", Период ";
		Если ВсеПериоды и Врег(Период) <> "РЕГИСТРАТОР" Тогда
			Текст = Текст + " ПЕРИОДАМИ(" + Период + ",,)";
		КонецЕсли;
		Текст = Текст + " КАК Период";
		
		ТекстОбороты = ТекстОбороты + Текст;
		ТекстОстатки = ТекстОстатки + Текст;
		
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + ", КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	Если ПоВалютам Тогда
		ТекстОбороты = ТекстОбороты + ", Валюта КАК Валюта";
		ТекстОстатки = ТекстОстатки + ", Валюта КАК Валюта";
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ЗапросОбороты.Текст = ТекстОбороты;
	ЗапросОстатки.Текст = ТекстОстатки;

КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!", 60);
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;
	
	НаличиеДублей = ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	МассивРесурсов = СформироватьМассивПоказателей();
	
	МассивГруппировок = СформироватьМассивГруппировок();
	
	ЗапросОбороты = Новый Запрос;
	ЗапросОстатки = Новый Запрос;
	
	УстановитьПараметрыЗапроса(ЗапросОбороты);
	УстановитьПараметрыЗапроса(ЗапросОстатки);
	СформироватьТекстЗапросов(МассивРесурсов, ЗапросОбороты, ЗапросОстатки);
	
	ОтборСубконто = Новый Соответствие;
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		Если Элемент.Использование Тогда
			ОтборСубконто.Вставить(Элемент.ПутьКДанным, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Состояние("Выполнение запроса");
	
	Макет = ПолучитьМакет("Макет");

	РезультатОбороты = ЗапросОбороты.Выполнить();
	РезультатОстатки = ЗапросОстатки.Выполнить();
	
	// Вывод заголовка отчета
	СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	ФорматПериода = ПолучитьСтрокуФорматаПериода(Период);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументРезультат",ДокументРезультат);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	
	// Период
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод", Макет.ПолучитьОбласть("Строка|Период"));
	СтруктураПараметров.ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
	
	// Нач сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачДт", Макет.ПолучитьОбласть("Строка|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачКт", Макет.ПолучитьОбласть("Строка|СальдоНачКт"));
	
	// Кон сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонДт", Макет.ПолучитьОбласть("Строка|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонКт", Макет.ПолучитьОбласть("Строка|СальдоКонКт"));
	
	// Оборот 
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДт", Макет.ПолучитьОбласть("Строка|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКт", Макет.ПолучитьОбласть("Строка|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотДтКорСчет"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотКтКорСчет"));
	
	Если ПоВалютам Тогда
		// Валюта
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаПериод", Макет.ПолучитьОбласть("СтрокаВалюта|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКтКорСчет"));
	КонецЕсли;
	
	Если МассивГруппировок.Количество()>0 Тогда
		// Субконто
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоПериод", Макет.ПолучитьОбласть("СтрокаСубконто|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКтКорСчет"));
		
		Если ПоКоличеству Тогда
			// Субконто
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоПериод", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|Период"));
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКтКорСчет"));
			
			
			// Период
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоПериод", Макет.ПолучитьОбласть("СтрокаКоличество|Период"));
			СтруктураПараметров.ОбластьСтрокаКоличествоПериод.Область(1, 2).Формат = ФорматПериода;
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКтКорСчет"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывод отчета
	ОбщийИтогОбороты = РезультатОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ОбщийИтогОстатки = РезультатОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ЕстьИтог = ОбщийИтогОстатки.Следующий();
	ОбщийИтогОбороты.Следующий();
	
	ДокументРезультат.НачатьАвтогруппировкуКолонок();
	
	НачалоЗаголовка = Макет.ПолучитьОбласть("ЗаголовокТаблицы|Период");
	
	Если МассивГруппировок.Количество() > 0 Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Субконто";
	ИначеЕсли ЗначениеЗаполнено(Период) Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Период";
	КонецЕсли;
	
	ДокументРезультат.Вывести(НачалоЗаголовка);
	
	ШиринаТаблицы = НачалоЗаголовка.ШиринаТаблицы;
	
	СписокДт = Неопределено;
	СписокКт = Неопределено;
	Выборка  = Неопределено;
	ВывестиПолныйЗаголовокОтчетаОборотовСчета(Выборка, ШиринаТаблицы, ЭтотОбъект, Макет, ДокументРезультат,
		РезультатОбороты, "ЗаголовокТаблицы", МассивРесурсов, СписокДт, СписокКт, 1);
		
	ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
	
	// Массивы хранят счета, по которым были обороты
	СтруктураПараметров.Вставить("СписокДт", СписокДт);
	СтруктураПараметров.Вставить("СписокКт", СписокКт);
	
	СоответствиеСчетовПредков = ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	
	// вывод данных отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВыводСубконто(РезультатОбороты, РезультатОстатки, 0, СтруктураПараметров, ОтборСубконто, ПоКоличеству);
		
	ИначеЕсли ЗначениеЗаполнено(Период) Тогда
		
		ВывестиПериоды(РезультатОбороты, РезультатОстатки, СтруктураПараметров, ОтборСубконто);
		
	КонецЕсли;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Итог|Период"));
	
	// Вывод заголовков нач.сальдо
	ТекШиринаТаблицы = 0;
	ВывестиПолныйЗаголовокОтчетаОборотовСчета(Выборка, ТекШиринаТаблицы, ЭтотОбъект, Макет, ДокументРезультат,
		РезультатОбороты, "Итог", МассивРесурсов, СписокДт, СписокКт, 0, ОбщийИтогОстатки, ОбщийИтогОбороты);
		                      
	ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, Макет.ПолучитьОбласть("Итог|СальдоКонДт"), ОбщийИтогОстатки);
	ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, Макет.ПолучитьОбласть("Итог|СальдоКонКт"), ОбщийИтогОстатки);
			
	// Обведение таблицы отчета линией, как в области границы
	ОбластьИтогПериод = Макет.ПолучитьОбласть("Итог|Период");
	
	ТолстаяЛиния = ОбластьИтогПериод.Область(1, 2).ГраницаСверху;
	
	ШиринаТаблицы = ШиринаТаблицы + СписокДт.Количество() + СписокКт.Количество();
	
	ДокументРезультат.Область(ВысотаЗаголовка + 2, 2, ДокументРезультат.ВысотаТаблицы, ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
	// Зафиксируем первую колонку
	ДокументРезультат.ФиксацияСлева = 2;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("Период", Период);
		
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции

Процедура ЗаполнитьИПрисоединитьОбласть(Присоединять, ДокументРезультат, Область, Выборка, Уровень = Неопределено)
	
	Если НЕ Присоединять Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка <> Неопределено Тогда
		Область.Параметры.Заполнить(Выборка);
	Иначе
		Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
			Область.Параметры.Установить(Индекс, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	ДокументРезультат.Присоединить(Область, Уровень);
	
КонецПроцедуры

// Вывод субконто определенного номера
Процедура ВыводСубконто(Знач ВыборкаОбороты, Знач ВыборкаОстатки, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки, Знач ВыводКоличества)
	
	Если Инд > СтруктураПараметров.МассивГруппировок.Количество() - 1 Тогда
		
		Если ЗначениеЗаполнено(Период) Тогда
			
			ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;	
		
	Измерение = СтруктураПараметров.МассивГруппировок[Инд];
	
	ОборотИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	ОстатокИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	
	ОстатокПрочитан = Ложь;
	ОборотПрочитан = Ложь;
		
	ВыводКоличества = ПоКоличеству И ОпределитьПоСубконтоИПостроителюВестиКоличественныйУчет(Счет, ПостроительОтчета, Измерение);
		
	Пока Истина Цикл
			
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
			
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
			
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
		   И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			   
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
				
		ИначеЕсли ОборотПрочитан И ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству) Тогда
				
			ОборотИспользован = Истина;
				
		ИначеЕсли ОстатокПрочитан Тогда
			ОстатокИспользован = Истина;
		КонецЕсли;
			
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
			
		Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован,  ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
			
		ТипЗаписи = Выборка.ТипЗаписи();
		
		// счета более верхнего уровня выводить не надо
		Если Измерение = "Счет"
			И ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии
			И СтруктураПараметров.СоответствиеСчетовПредков[Выборка.Счет] <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Уровень = Выборка.Уровень();
			
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ВыводитьКоличествоВТекущейСтроке = Ложь;
		Иначе
			ВыводитьКоличествоВТекущейСтроке = ВыводКоличества;
		КонецЕсли;
			
		Если ВыводитьКоличествоВТекущейСтроке Тогда
			ТекстКоличество = "Количество";
		Иначе
			ТекстКоличество = "";
		КонецЕсли;
		
		ОблНачало          = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "Период"];
		ОблСальдоНачДт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоНачДт"];
		ОблСальдоНачКт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоНачКт"];
		ОблОборотДт        = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотДт"];
		ОблОборотКт        = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотКт"];
		ОблОборотДтКорСчет = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотДтКорСчет"];
		ОблОборотКтКорСчет = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотКтКорСчет"];
		ОблСальдоКонДт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоКонДт"];
		ОблСальдоКонКт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоКонКт"];
			
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;
			
		// Вывод нач сальдо
		ОблНачало.Параметры.СубконтоПредставление = Выборка[Измерение + "Представление"];
			
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, Выборка, СтруктураПараметров);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало);
			
		// В итогах по иерархии шрифт меняется на наклонный
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			
			СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт = 
				Новый Шрифт(СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт,,,,Истина);
			
		КонецЕсли;
				
		// На начало периода дебет
		ЗаполнитьИПрисоединитьОбласть(СальдоНачДт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачДт, ВыборкаОстаткиПараметр, Уровень);
		ЗаполнитьИПрисоединитьОбласть(СальдоНачКт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачКт, ВыборкаОстаткиПараметр, Уровень);
		
		Если ОборотИспользован И (ОборотДтКорСчета ИЛИ ОборотКтКорСчета) Тогда
			ВыборкаПоКорСчетам = ВыборкаОборотыПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет", "Все");
		Иначе
			ВыборкаПоКорСчетам = Неопределено;
		КонецЕсли;
		
		// ОБОРОТЫ
		//оборот Дт
		ЗаполнитьИПрисоединитьОбласть(ОборотДт, СтруктураПараметров.ДокументРезультат, ОблОборотДт, ВыборкаОборотыПараметр, Уровень);
			
		Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма" + ?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), 
				ОблОборотДтКорСчет, ОтборДляРасшифровки, Выборка);
		КонецЕсли;
					
		// Оборот Кт
		ЗаполнитьИПрисоединитьОбласть(ОборотКт, СтруктураПараметров.ДокументРезультат, ОблОборотКт, ВыборкаОборотыПараметр, Уровень);
			
		Если ОборотКтКорСчета Тогда
			Если ОборотИспользован Тогда
				ВыборкаПоКорСчетам.Сбросить();
			КонецЕсли;
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаПоКорСчетам, СтруктураПараметров, "КТ", "Сумма" + ?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), 
				ОблОборотКтКорСчет, ОтборДляРасшифровки, Выборка);
		КонецЕсли;
		
		ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонДт, ВыборкаОстаткиПараметр, Уровень);
		ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонКт, ВыборкаОстаткиПараметр, Уровень);		
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборДляРасшифровки);
		КонецЕсли;
			
		// Вывод вложенных итогов
		Если ТипЗаписи <> ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
			ВыводСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, Инд + 1, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества);
			
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

// Вывод периодов
Процедура ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества = Ложь)
	
	Измерение = "Период";
		
	ОстатокПрочитан = Ложь;
	ОборотПрочитан = Ложь;
		
	Если ВсеПериоды Тогда
		ОборотИспользован  = УправлениеОтчетами.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение, "Все");
		ОстатокИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение, "Все");
	Иначе
		ОборотИспользован  = УправлениеОтчетами.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		ОстатокИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	КонецЕсли;
	
	Если ВыводКоличества Тогда
		ТекстКоличество = "Количество";
	Иначе
		ТекстКоличество = "";
	КонецЕсли;
		
	ОблНачало          = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "Период"];
	ОблСальдоНачДт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоНачДт"];
	ОблСальдоНачКт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоНачКт"];
	ОблОборотДт        = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотДт"];
	ОблОборотКт        = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотКт"];
	ОблОборотДтКорСчет = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотДтКорСчет"];
	ОблОборотКтКорСчет = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотКтКорСчет"];
	ОблСальдоКонДт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоКонДт"];
	ОблСальдоКонКт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоКонКт"];
	
	Пока Истина Цикл
		
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
		
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
		
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
			И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
			
		ИначеЕсли ОборотПрочитан И ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству) Тогда
			
			ОборотИспользован = Истина;
			
		ИначеЕсли ОстатокПрочитан Тогда
			ОстатокИспользован = Истина;
		КонецЕсли;
		
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
		
		Если Не ОборотИспользован И Не ВсеПериоды Тогда
			Продолжить;
		КонецЕсли;
				
		Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
		
		
		ДанныеПериода = ?(Врег(Период)="РЕГИСТРАТОР", Выборка.РегистраторПредставление, Выборка.Период);
		
		Если ДанныеПериода = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Уровень = Выборка.Уровень();
		
		ОблНачало.Параметры.Период = ДанныеПериода;
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, Выборка, СтруктураПараметров);
				
		Попытка
			ОбщиеДопОтборы = ОблНачало.Параметры.Расшифровка[0].Значение["ДополнительныеОтборы"].Скопировать();	
		Исключение
			ОбщиеДопОтборы = Неопределено;
		КонецПопытки;

		ОтборДляРасшифровки.Вставить("Период", Выборка.Период);
		
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;

		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало);
		
		ЗаполнитьИПрисоединитьОбласть(СальдоНачДт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачДт, ВыборкаОстаткиПараметр, Уровень);
		ЗаполнитьИПрисоединитьОбласть(СальдоНачКт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачКт, ВыборкаОстаткиПараметр, Уровень);
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		//ВыборкаОборотыПоКорСчетам = Неопределено;
		
		Если (ОборотДтКорСчета ИЛИ ОборотКтКорСчета) 
		   И ОборотИспользован Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаОборотыПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		Иначе
			ВыборкаОборотыПоКорСчетам = Неопределено;
		КонецЕсли;
		
		// Оборот Дт
		ЗаполнитьИПрисоединитьОбласть(ОборотДт, СтруктураПараметров.ДокументРезультат, ОблОборотДт, ВыборкаОборотыПараметр, Уровень);
		
		Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма"+?(ВыводКоличества, ",Количество", ""), 
				ОблОборотДтКорСчет, ОтборДляРасшифровки, Выборка, ОбщиеДопОтборы);
		КонецЕсли;
		
		// Оборот Кт
		ЗаполнитьИПрисоединитьОбласть(ОборотКт, СтруктураПараметров.ДокументРезультат, ОблОборотКт, ВыборкаОборотыПараметр, Уровень);
		
		Если ОборотКтКорСчета Тогда
			Если ОборотИспользован Тогда
				ВыборкаОборотыПоКорСчетам.Сбросить();
			КонецЕсли;
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма", 
				ОблОборотКтКорСчет, ОтборДляРасшифровки, Выборка, ОбщиеДопОтборы);
		КонецЕсли;
		
		// Вывод конечного сальдо
		ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонДт, ВыборкаОстаткиПараметр, Уровень);
		ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонКт, ВыборкаОстаткиПараметр, Уровень);
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборДляРасшифровки);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Вывод валют
Процедура ВывестиВалюты(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки)
	
	Измерение = "Валюта";
		
	ОстатокПрочитан = Ложь;
	ОборотПрочитан = Ложь;
		
	ОборотИспользован  = УправлениеОтчетами.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	ОстатокИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
	Пока Истина Цикл
		
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
		
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
		
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
			И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
			
		ИначеЕсли ОборотПрочитан И ЭтоНулевойОборот(ВыборкаОбороты, Ложь) Тогда
			
			ОборотИспользован = Истина;
			
		ИначеЕсли ОстатокПрочитан Тогда
			ОстатокИспользован = Истина;
		КонецЕсли;
		
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
				
		Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
		
		Уровень = Выборка.Уровень();
		
		// Расшифровка
		//ЗаполнитьПараметрыРасшифровки(ОблНачало, Выборка, СтруктураПараметров);
		ОтборДляРасшифровки.Вставить("ПоВалюте", Истина);
		ОтборДляРасшифровки.Вставить("Валюта", Выборка.Валюта);
		
		// Вывод начала строки
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаПериод;
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть);
		
		ЗаполнитьИПрисоединитьОбласть(СальдоНачДт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачДт, ВыборкаОстаткиПараметр, Уровень);
		ЗаполнитьИПрисоединитьОбласть(СальдоНачКт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачКт, ВыборкаОстаткиПараметр, Уровень);
		
		Если (ОборотДтКорСчета ИЛИ ОборотКтКорСчета) 
		   И ОборотИспользован Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаОборотыПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		Иначе
			ВыборкаОборотыПоКорСчетам = Неопределено;
		КонецЕсли;
		
		// Оборот Дт
		ЗаполнитьИПрисоединитьОбласть(ОборотДт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаОборотДт, ВыборкаОборотыПараметр, Уровень);
		
		Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма, ВалютнаяСумма", 
				СтруктураПараметров.ОбластьСтрокаВалютаОборотДтКорСчет, ОтборДляРасшифровки, ВыборкаОбороты);
		КонецЕсли;
		
		// Оборот Кт
		ЗаполнитьИПрисоединитьОбласть(ОборотКт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаОборотКт, ВыборкаОборотыПараметр, Уровень);
		
		Если ОборотКтКорСчета Тогда
			Если ОборотИспользован Тогда
				ВыборкаОборотыПоКорСчетам.Сбросить();
			КонецЕсли;
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма, ВалютнаяСумма", 
				СтруктураПараметров.ОбластьСтрокаВалютаОборотКтКорСчет, ОтборДляРасшифровки, ВыборкаОбороты);
		КонецЕсли;
		
		// Вывод конечного сальдо
		ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонДт, ВыборкаОстаткиПараметр, Уровень);
		ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонКт, ВыборкаОстаткиПараметр, Уровень);
		
	КонецЦикла;

КонецПроцедуры

// Вывод кор счетов
Процедура ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, ВидОборота, Ресурсы, ВыводимаяОбласть, 
	ОтборДляРасшифровки = Неопределено, ДанныеГруппировки, ОбщиеДопОтборы = Неопределено)
	
	СтРесурсы = Новый Структура(Ресурсы);
	
	Если ВидОборота = "ДТ" Тогда
		
		ТипПоля = "ОборотДт";
		СписокСчетов = СтруктураПараметров.СписокДт;
		
	ИначеЕсли ВидОборота = "КТ" Тогда
		
		ТипПоля = "ОборотКт";
		СписокСчетов = СтруктураПараметров.СписокКт;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Создадим структуру соотвтетствиия кор счетов структуре ресурство
	Соотв = Новый Соответствие;
	Для каждого Элемент Из СписокСчетов Цикл
		Соотв[Элемент.Значение] = Новый Структура(Ресурсы);
	КонецЦикла;
	
	ВерхнийУровень = 1000;
	
	// Обойдем выборку по счетам, получим все ненулевые значения ресурсов и поставим их в соответсвие счетам
	Пока ВыборкаОборотыПоКорСчетам <> Неопределено И ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		// В выборке присутствуют счета всех уровней, если не нужно выводить субсчета, пропускаем 
		// группировки следующего уровня
		Если НЕ ПоСубсчетамКорСчетов Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		СтЗначенияРесурсов = Новый Структура(Ресурсы);
		Вставлять = Ложь;
		
		Для каждого Элемент Из СтРесурсы Цикл
			
			Если НЕ ПривестиКЧислу(ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля])=0 Тогда
				СтЗначенияРесурсов.Вставить(Элемент.Ключ, ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля]);
				
				Вставлять = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Полученную структуру вставляем в соответствие счетов
		Если Вставлять Тогда
			Соотв.Вставить(ВыборкаОборотыПоКорСчетам.КорСчет, СтЗначенияРесурсов);
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаОборотыПоКорСчетам <> Неопределено Тогда
		ВыборкаОборотыПоКорСчетам.Сбросить();
		ВыборкаОборотыПоКорСчетам.Следующий();
	КонецЕсли;
	
	// Вывод ресурсов
	Для каждого ЭлементСчет Из СписокСчетов Цикл
		
		Для каждого Элемент Из Соотв[ЭлементСчет.Значение] Цикл
			ВыводимаяОбласть.Параметры[Элемент.Ключ+ТипПоля] = Элемент.Значение;
			
			Расшифровка = Новый Соответствие;
			РасшифровкаОтборПоСчетам = Новый Соответствие;
			
			ЗаменитьОбщиеОтборыНаОтборыДтКт(ОтборДляРасшифровки, РасшифровкаОтборПоСчетам, ВидОборота);
			
			Если НЕ ЗначениеЗаполнено(ДанныеГруппировки) Тогда
				Продолжить;
			КонецЕсли;
			КонечнаяСтрока = (ДанныеГруппировки.Группировка() = "");
			
			Если ДанныеГруппировки.Группировка() = "Период" Тогда
				Если ТипЗнч(ОбщиеДопОтборы) = Тип("ТаблицаЗначений") Тогда
					ПромежуточныеДопОтборы = ОбщиеДопОтборы.Скопировать();
				КонецЕсли;
			Иначе
				ПромежуточныеДопОтборы = СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, 
										 ДанныеГруппировки, СтруктураПараметров.МассивГруппировок, КонечнаяСтрока);
			КонецЕсли;
			
			ДополнительныеОтборы = Новый Структура;
			ЗаменитьОбщиеОтборыНаОтборыДтКт(ПромежуточныеДопОтборы, ДополнительныеОтборы, ВидОборота);
				
			Расшифровка.Вставить("ДополнительныеОтборы", ПромежуточныеДопОтборы);
			
			Расшифровка.Вставить("Отбор", РасшифровкаОтборПоСчетам);
			Расшифровка.Вставить("ИмяОбъекта", "ОтчетПоПроводкам" + ИмяРегистраБухгалтерии);
			
			Если ДанныеГруппировки.Группировка() = "Период" Тогда
				Расшифровка.Вставить("ДатаНач", ДатаНач);
				КонечнаяДатаОграничений = ПолучитьДатуОкончанияПериода(ДанныеГруппировки.Период, Период);
				Расшифровка.Вставить("ДатаКон", КонечнаяДатаОграничений);
				Расшифровка.Вставить("ОграничениеПоПериоду", ДанныеГруппировки.Период);
			КонецЕсли;
			
			Если Не ПоСубсчетам Тогда
				СчетДляОграничений = Счет;
			Иначе
				СчетДляОграничений = ДанныеГруппировки.Счет;
			КонецЕсли;
			
			Если ВидОборота = "ДТ" Тогда
				
				Расшифровка.Вставить("СчетДт", СчетДляОграничений);
				Расшифровка.Вставить("СчетКт", ЭлементСчет.Значение);
				ВыводимаяОбласть.Параметры.РасшифровкаДт = Расшифровка;
				
			Иначе
				
				Расшифровка.Вставить("СчетДт", ЭлементСчет.Значение);
				Расшифровка.Вставить("СчетКт", СчетДляОграничений);
				ВыводимаяОбласть.Параметры.РасшифровкаКт = Расшифровка;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, Знач СтруктураПараметров)

	Если Не ПоСубсчетам ИЛИ Выборка.Счет = Null Тогда
		СчетРасшифровки = Счет;
	Иначе
		СчетРасшифровки = Выборка.Счет;
	КонецЕсли;
	
	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", "ОтчетПоПроводкам" + ИмяРегистраБухгалтерии);

	ПараметрыРасшифровки.Вставить("Счет", Счет);

	Если Лев(Выборка.Группировка(), 8) = "Субконто" Тогда

		// надо в структуру доп ограничений поместить все группировки более высокого уровня
		ДополнительныеОтборы = СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, Выборка, СтруктураПараметров.МассивГруппировок);
				
		ПараметрыРасшифровки.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + СчетРасшифровки);
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		ПараметрыРасшифровки.Вставить("ДатаНач", ДатаНач);
		КонечнаяДатаОграничений = ПолучитьДатуОкончанияПериода(Выборка.Период, Период);
		ПараметрыРасшифровки.Вставить("ДатаКон", КонечнаяДатаОграничений);
		
		ПараметрыРасшифровки.Вставить("ОграничениеПоПериоду", Выборка.Период);
		
		ДополнительныеОтборы = СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, Выборка, СтруктураПараметров.МассивГруппировок, Истина);
				
		ПараметрыРасшифровки.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
			
		СписокРасшифровки = Новый СписокЗначений;
			
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + СчетРасшифровки);
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

// Заполнение настроек построителя отчетов
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СальдоНачДт=Истина;
	СальдоНачКт=Истина;
	СальдоКонДт=Истина;
	СальдоКонКт=Истина;

	ОборотДт   =Истина;
	ОборотКт   =Истина;
	ОборотДтКорСчета = Истина;
	ОборотКтКорСчета = Истина;
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
		
	Сч = 0;
	МассивСубконто = Новый Массив;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", Регистр.Субконто" +Сч+" КАК Субконто"+Сч;
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
	КонецЦикла;
	
	ТекстПоля = Сред(ТекстПоля, 2);
	ТекстОтбор = Сред(ТекстОтбор, 2);
	ТекстИтоги = Сред(ТекстИтоги, 2);
	
	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.СуммаОборот КАК СуммаОборот
	|	" +?(НЕ ПустаяСтрока(ТекстПоля), "{ВЫБРАТЬ " +ТекстПоля+ "}", "") + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(,,,Счет В Иерархии (&Счет),," + ?(НЕ ПустаяСтрока(ТекстОтбор), "{"+ТекстОтбор+"}", "") + ") КАК Регистр
	|
	|ИТОГИ СУММА(СуммаОборот) ПО ОБЩИЕ
	|	" +?(НЕ ПустаяСтрока(ТекстИтоги), "{ИТОГИ ПО "+ТекстИтоги+"}", "");
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
					
	СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
	
КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт
	
	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Счет.Количественный;
	
	ЗаполнитьНачальныеНастройки();
	
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = СоздатьПоСтруктуреСоответствие(СтруктураПараметров); 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	Период = Параметры["Период"];
	ВсеПериоды = Параметры["ВсеПериоды"];
	
	СтрокиОтбора = Параметры["Отбор"];
	ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);
		
КонецПроцедуры

// Обработка расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка) Экспорт
	
	ОграничениеПоПериоду = Неопределено;
	Расшифровка.Свойство("ОграничениеПопериоду", ОграничениеПоПериоду);
	
	Если ОграничениеПоПериоду <> Неопределено Тогда
			
		ПериодС = ОграничениеПоПериоду;
		ПериодПо = ПолучитьДатуОкончанияПериода(ПериодС, Период);
									
	Иначе
					
		ПериодС  = ДатаНач;
		ПериодПо = ДатаКон;
					
	КонецЕсли;
				
	Если Врег(Период) = "РЕГИСТРАТОР" Тогда
		
		Если ОграничениеПоПериоду <> NULL
			И ЗначениеЗаполнено(ОграничениеПоПериоду) Тогда
			
			Расшифровка.Вставить("Регистратор", ОграничениеПоПериоду);
			Расшифровка.Вставить("ПоРегистратору", Истина);
		
		КонецЕсли;
					
	Иначе
					
		Если ДатаКон<>'00010101' Тогда
			ПериодПо = Мин(КонецДня(ДатаКон), ПериодПо);
		КонецЕсли;
					
		Расшифровка.Вставить("ДатаНач", ПериодС);
		Расшифровка.Вставить("ДатаКон", ПериодПо);
					
	КонецЕсли;
			
	Отчет = Отчеты[Расшифровка["ИмяОбъекта"]].Создать();
	
	ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
	
	Попытка
		
		ДополнитьДопОтборамиРасшифровкуДанных(Расшифровка);
		
		Отчет.Настроить(Расшифровка);
		
		ФормаОтчета.ПоказыватьЗаголовок = Расшифровка["ПоказыватьЗаголовок"];
		
		ФормаОтчета.ОбновитьОтчет();
		
	Исключение
		
	КонецПопытки;
	
	ФормаОтчета.Открыть();

КонецПроцедуры

//////////////////
// Общий модуль
//////////////////

//Процедура проверяет ведение однофирменности и при необходимости запрещает изменять организацию в ограничениях
Процедура ПроизвестиПроверкуНаВедениеОднофирменности(Организация)
	
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Организация = ОргПоУмолчанию;
	КонецЕсли;
    
КонецПроцедуры

//Процедура рассчитывает конечные данные по начальным данным и оборотам
Процедура РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Знач ТекущийВидСчета, ИтогДт, ИтогКт, Знач НачДт, Знач НачКт,
	Знач ОборотДт, Знач ОборотКт) Экспорт
	
	// расчет итоговой суммы
	Если ТекущийВидСчета = ВидСчета.Активный Тогда 
			
		ИтогДт = НачДт + ОборотДт - ОборотКт;
		ИтогКт = 0;
					
	ИначеЕсли ТекущийВидСчета = ВидСчета.Пассивный Тогда
			
		ИтогДт = 0;
		ИтогКт = НачКт + ОборотКт - ОборотДт;
					
	Иначе
			
		ИтогДт = НачДт + ОборотДт;
		ИтогКт = НачКт + ОборотКт;
			
		Если ИтогДт > ИтогКт Тогда
			
			ИтогДт = ИтогДт - ИтогКт;
			ИтогКт = 0;
			
		Иначе
			
			ИтогКт = ИтогКт - ИтогДт;
			ИтогДт = 0;
			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

// Создание копии структуры или соответствия
//
// Параментры:
//   СоотвИсх - Структура/Соответствие - Исходная структура, с которой будет создаваться копия.
//
// Возвращаемое значение:
//   Структура/Соответствие - Копия исходной структуры. Тип данных повторяет тип исходной структуры.
Функция СоздатьКопиюСоответствияСтруктуры(Знач СоответствиеИсточник) Экспорт
	
	Если СоответствиеИсточник = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КопияСоответствия = Новый (ТипЗнч(СоответствиеИсточник));
		
	Для Каждого ЭлементОтбора Из СоответствиеИсточник Цикл
				
		КопияСоответствия.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
	КонецЦикла;
	
	Возврат КопияСоответствия;
	
КонецФункции

//Функция создает по структуре параметров соответсвие
Функция СоздатьПоСтруктуреСоответствие(Знач СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	ФормаОтчета
//  ПоказыватьЗаголовок - булево. Отображать пометку или нет
Процедура УправлениеПометкамиКнопокЗаголовковКоманднойПанели(ФормаОтчета, Знач ПоказыватьЗаголовок) Экспорт
	
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
    	
КонецПроцедуры

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуОграниченийПоДатамДляФормы(Знач ДатаНач, Знач ДатаКон) Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуВыводаПараметровПоДатам(Знач ДатаНач, Знач ДатаКон) Экспорт

	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда		
		ОписаниеПериода     = "Период: без ограничения.";		
	Иначе		
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда			
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");			
		Иначе
			Если ДатаНач > ДатаКон Тогда
				ОписаниеПериода = "";
			Иначе				
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

//Функция возвращает корректные или нет ограничения по датам для отчета
// в случае если ограничения не корректны - выдается предупреждение
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина) Экспорт
	
	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда 
			Предупреждение("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// процедура заполняет таблицу настроек свойств
Процедура ЗаполнитьТаблицуНастроекСвойств(ЭтотОбъект, Знач ИмяРеквизита, Структура) Экспорт
	
	Источник = Неопределено;
	Если Структура.Свойство(ИмяРеквизита, Источник) <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Приемник = ЭтотОбъект[ИмяРеквизита];
	Исключение
    	Возврат;
	КонецПопытки;
	
	Приемник.Очистить();
		
	// Загрузим совпадающие колонки.
	Для Каждого СтрокаТаблицыИсточника Из Источник Цикл
			
		СтрокаТаблицыПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника); 
			
	КонецЦикла;
		
КонецПроцедуры

// процедура обрабатывает выпод заголовка
Процедура ОбработатьВыводЗаголовка(Форма, ОтчетОбъект, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если Форма.ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ОбластьЗаголовка = СформироватьЗаголовок();
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		Форма.ЭлементыФормы.ДокументРезультат.Вывести(ОбластьЗаголовка);
		
	КонецЕсли;

    Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		Форма.ЭлементыФормы.ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокЗаголовковКоманднойПанели(Форма, ПоказыватьЗаголовок);
	
КонецПроцедуры

//процедура формирует заголовок отчета
Процедура СформироватьИВывестиЗаголовокОтчета(ОтчетОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт
	
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
КонецПроцедуры	

// Редактирование Субконто
Процедура РедактированиеСубконто(Элемент, СписокСубконто)
    	
	Форма = ПолучитьОбщуюФорму("ФормаНастройкаПоСубконто", Элемент);

	// Передача параметров в форму
	Форма.Список = СписокСубконто;
	
	Форма.РежимВыбора = Истина;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры

// обработка редактирования субконто
Процедура ОбработкаРедактированиеСубконто(Элемент, ТекущиеДанныеТаблицыРедактирования) Экспорт
	
	Если ТекущиеДанныеТаблицыРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Счет = ТекущиеДанныеТаблицыРедактирования.Счет;
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;
	
	СписокСубконто = Новый СписокЗначений;
	
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

		СписокСубконто.Добавить("Субконто" + Строка(ВидСубконто.НомерСтроки), Строка(ВидСубконто.ВидСубконто));
		
	КонецЦикла;

	// Данные этой строки должны быть отмечены
	Для Каждого Строка Из ТекущиеДанныеТаблицыРедактирования.РазворотПоСубконто Цикл
		
		ЭлементСписка = СписокСубконто.НайтиПоЗначению(Строка.Имя);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;

	РедактированиеСубконто(Элемент, СписокСубконто);
	
КонецПроцедуры

//процедура очищает данные разворота по субконто текущей строки настроек
Процедура ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(РедактируемаяСтрока)
	
	РедактируемаяСтрока.РазворотПоСубконто.Очистить();
	
	Если РедактируемаяСтрока.РазворотПоСубконто.Колонки.Количество() = 0 Тогда
		
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));

		РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
		РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);
		
	КонецЕсли;

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = "";
	
КонецПроцедуры

//процедура добавляет новое значение субконто в список выбранных
Процедура ДобавитьСубконтоВТаблицуВыбранных(ТаблицаВыбораСубконто, Знач ИмяСубконто, Знач ПредставлениеСубконто)
	
	НоваяСтрокаПоСубконто = ТаблицаВыбораСубконто.РазворотПоСубконто.Добавить();
			
	НоваяСтрокаПоСубконто.Имя = ИмяСубконто;
	НоваяСтрокаПоСубконто.Представление = ПредставлениеСубконто;
			
	ТаблицаВыбораСубконто.ПредставлениеРазворотПоСубконто = ТаблицаВыбораСубконто.ПредставлениеРазворотПоСубконто + ", " 
		+ ПредставлениеСубконто;
	
КонецПроцедуры


// Процедура обрабатывает выбор показателей, группировок или фильтров из отдельного окна.
Процедура ОбработкаВыборРазворотаПоСубконто(ВыбранноеЗначение, ТабличноеПоле, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(ТабличноеПоле.ТекущиеДанные);

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		Если Строка.Пометка Тогда
			
			ДобавитьСубконтоВТаблицуВыбранных(ТабличноеПоле.ТекущиеДанные, Строка.Значение, Строка.Представление);
							
		КонецЕсли;

	КонецЦикла;

	ТабличноеПоле.ТекущиеДанные.ПредставлениеРазворотПоСубконто  = Сред(ТабличноеПоле.ТекущиеДанные.ПредставлениеРазворотПоСубконто, 3);

КонецПроцедуры

// процедура обрабатывает окончание редактирования настроек развернутого сальдо
Процедура ПриОкончанииРедактированияПравилаРазвернутогоСальдо(Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт

	ТабличноеПоле = Элемент;

	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НРег(ТабличноеПоле.ТекущаяКолонка.Имя) = НРег("Субсчета") Тогда

		Если ТабличноеПоле.ТекущиеДанные.Субсчета Тогда
			
			ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(ТабличноеПоле.ТекущиеДанные);
									
		КонецЕсли;
		
	ИначеЕсли НРег(ТабличноеПоле.ТекущаяКолонка.Имя) = НРег("ПредставлениеРазворотПоСубконто") Тогда

		Если ТабличноеПоле.ТекущиеДанные.РазворотПоСубконто.Количество() > 0 Тогда
			
			ТабличноеПоле.ТекущиеДанные.СубСчета = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// процедура - обработчик при изменении счета в таблицах детализации или развернутого сальдо
Процедура ОбработчикПриИзмененииСчета(ТабличноеПоле, Знач ТабПолеРазвернутогоСальдо) Экспорт

	РедактируемаяСтрока = ТабличноеПоле.ТекущиеДанные; 
	
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(РедактируемаяСтрока);
	
	// Признак того, что счет найден способ развернуть счет
	НайденСпособРазворота = Ложь;

	Счет = РедактируемаяСтрока.Счет;
	Если ЗначениеЗаполнено(Счет) Тогда
		
		ВыборкаПоСчету = ПланыСчетов[Счет.Метаданные().Имя].Выбрать(Счет);
		Если ВыборкаПоСчету.Следующий() Тогда
			
			РедактируемаяСтрока.Субсчета = Истина;
            НайденСпособРазворота = Истина;
			
		КонецЕсли;

		// Развернутое сальдо только по субсчетам
		Если ТабПолеРазвернутогоСальдо 
			И НайденСпособРазворота Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если Счет.ВидыСубконто.Количество() > 0 Тогда

			// Развернутое сальдо - отключим субсчета
			Если ТабПолеРазвернутогоСальдо Тогда
				РедактируемаяСтрока.Субсчета = Ложь;
			КонецЕсли;

			Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

				ДобавитьСубконтоВТаблицуВыбранных(РедактируемаяСтрока, "Субконто" + Строка(ВидСубконто.НомерСтроки), Строка(ВидСубконто.ВидСубконто));
				
			КонецЦикла;

			РедактируемаяСтрока.ПредставлениеРазворотПоСубконто  = Сред(РедактируемаяСтрока.ПредставлениеРазворотПоСубконто, 3);

			НайденСпособРазворота = Истина;

		КонецЕсли;

		// Если у счета нет ни субсчетов, ни субконто, не дадим его выбрать.
		Если НЕ НайденСпособРазворота Тогда
			
			Если ТабПолеРазвернутогоСальдо Тогда
				ВидНастройки = "развернутого сальдо ";
			Иначе
				ВидНастройки = "итогов по субсчетам и субконто ";
			КонецЕсли;
			Предупреждение("Счет """ + Счет.Код + """ не имеет ни субсчетов, ни субконто." + Символы.ПС + "Настройка " + ВидНастройки + "не имеет смысла!");
			РедактируемаяСтрока.Счет = Неопределено;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// процедура обработки очистки разворота по субконто
Процедура ОбработкаОчисткиРазворотПоСубконтоТабПоля(ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(ТабличноеПоле.ТекущиеДанные);
	
КонецПроцедуры

// процедура устанавливает связывание данных и визуальных объектов отображения
// настроек Бух отчетов
Процедура УстановитьСвязываниеДанныхФормыНастроек(ПравилаВыводаИтогов, ПравилаРазвернутогоСальдо) Экспорт
	
	// Связывание с данными колонок "Счет": тип определяется типом колонки у таблицы
	Если ПравилаВыводаИтогов <> Неопределено Тогда
		ПравилаВыводаИтогов.Колонки.Счет.Данные = "Счет";
		ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
		ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
		ПравилаВыводаИтогов.Колонки.ПредставлениеРазворотПоСубконто.ЭлементУправления.КнопкаОчистки = Истина;
	КонецЕсли;
	
	Если ПравилаРазвернутогоСальдо <> Неопределено Тогда
		ПравилаРазвернутогоСальдо.Колонки.Счет.Данные = "Счет";
		ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
		ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
		ПравилаРазвернутогоСальдо.Колонки.ПредставлениеРазворотПоСубконто.ЭлементУправления.КнопкаОчистки = Истина;
	КонецЕсли;
		
КонецПроцедуры

// процедура содает колонки у таблиц правила вывода итогов и правила развернутого сальдо
Процедура СоздатьКолонкиУПравилВыводаИтоговИПравилаРазвернутогоСальдо(ПравилаВыводаИтогов, ПравилаРазвернутогоСальдо, 
	Знач ИмяРегистраБухгалтерии) Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));

	МассивБулево        = Новый Массив;
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
    
	МассивТаблицаЗначений        = Новый Массив;
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");

	МассивСчет = Новый Массив;
	МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));
	ОписаниеТиповСчет  = Новый ОписаниеТипов(МассивСчет);

	// Создание структуры реквизитов - таблиц
	Если ПравилаВыводаИтогов <> Неопределено Тогда

		ПравилаВыводаИтогов.Колонки.Очистить();
		ПравилаВыводаИтогов.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
		ПравилаВыводаИтогов.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
		ПравилаВыводаИтогов.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
		ПравилаВыводаИтогов.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);
		
	КонецЕсли;

	Если ПравилаРазвернутогоСальдо <> Неопределено Тогда 
		
		ПравилаРазвернутогоСальдо.Колонки.Очистить();
		ПравилаРазвернутогоСальдо.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);
		
	КонецЕсли;
    	
КонецПроцедуры

//Функция возвращает есть ли для данного счета субсчета или нет
Функция ОпределитьНаличиеСубсчетов(Знач ИмяПланаСчетов, Знач Счет) Экспорт

	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Родители.Ссылка
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов + " КАК Родители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + " КАК Дети
	|		ПО Родители.Ссылка = Дети.Родитель
	|ГДЕ
	|	Родители.Ссылка = &Счет";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Результат = Запрос.Выполнить();
	
	ЕстьСубсчета = Не Результат.Пустой();
	
	Возврат ЕстьСубсчета;

КонецФункции

//функция возвращает соотвествие подчиненных счетов
Функция ВернутьСоответвиеПодчиненныхСчетов(Знач ИмяПланаСчетов = "", Знач Счет, Знач ДобавлятьСамСчетВСоответсвие = Ложь) Экспорт
	
	СоответсвиеСчетов = Новый Соответствие;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ	ПланСчетов." + ИмяПланаСчетов + " КАК ПланСчетовРегистра
		|ГДЕ	ПланСчетовРегистра.Ссылка В Иерархии(&Ссылка)";
		
	Запрос.УстановитьПараметр("Ссылка", Счет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (НЕ ДобавлятьСамСчетВСоответсвие)
			И (Выборка.Ссылка = Счет) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СоответсвиеСчетов.Вставить(Выборка.Ссылка, Выборка.Ссылка);
		
	КонецЦикла;

	Возврат СоответсвиеСчетов;
	
КонецФункции

//Функция возвращает соответствие счетов предков
Функция ВернутьСоответвиеСчетовПредков(Знач ИмяПланаСчетов = "", Знач Счет) Экспорт
	
	ЗапросСчета = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов."+ИмяПланаСчетов+" КАК ПланСчетовРегистра
		|
		|ГДЕ
		|	ПланСчетовРегистра.Ссылка = &Ссылка
		|
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ");
	
	ЗапросСчета.УстановитьПараметр("Ссылка", Счет);
	
	ВыборкаСчета = ЗапросСчета.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СоответсвиеСчетов = Новый Соответствие();
	Пока ВыборкаСчета.Следующий() Цикл
		СоответсвиеСчетов.Вставить(ВыборкаСчета.Ссылка, ВыборкаСчета.Ссылка);
	КонецЦикла;

	Возврат СоответсвиеСчетов;
	
КонецФункции

// Функция проверяет выборку на наличие ненулевых оборотов
Функция ЭтоНулевойОборот(Выборка, ПоКоличеству) Экспорт
		
	СуммаНоль = Выборка.СуммаОборотДт = 0 И Выборка.СуммаОборотКт = 0;
	КоличествоНоль = Не ПоКоличеству ИЛИ Выборка.КоличествоОборотДт = 0 И Выборка.КоличествоОборотКт = 0;
	Возврат СуммаНоль И КоличествоНоль;
	
КонецФункции

//Функция для счета возвращает количество субконто для него
Функция ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Знач Счет, СоответсвиеСчетов) Экспорт
	
	СоответсвиеСчетов = Новый Соответствие;
	
	КоличествоСубконтоСчета = СоответсвиеСчетов[Счет];
	Если КоличествоСубконтоСчета = -1
		ИЛИ КоличествоСубконтоСчета = Неопределено Тогда
		
		КоличествоСубконтоСчета = Счет.ВидыСубконто.Количество();
		СоответсвиеСчетов[Счет] = КоличествоСубконтоСчета;
		
	КонецЕсли;

	Возврат КоличествоСубконтоСчета;
	
КонецФункции

// процедура выводит представления субконто для текущей строки отчета в макет
Процедура ВывестиПредставленияСубконтоТекущейСтрокиВМакет(Знач ПрефиксНаименованияКолонки, Проводки, Знач КоличествоСубконтоСчета, 
	ОбластьМакет, ДокументРезультат, СтруктураРасшифровки) Экспорт
	
	Для Индекс = 0 По КоличествоСубконтоСчета - 1 Цикл

		ОбластьМакет.Параметры.Содержание = ?(НЕ ЗначениеЗаполнено(Проводки[ПрефиксНаименованияКолонки + Строка(Индекс + 1)])
			, "<...>"
			, Проводки[ПрефиксНаименованияКолонки + Строка(Индекс + 1) + "Представление"]);

		ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
		ДокументРезультат.Вывести(ОбластьМакет);

	КонецЦикла;
	
КонецПроцедуры

//Функция определяещая наличие дублирующегося параметра детализации
Функция ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета) Экспорт
	
	СоответствиеТекущихИзмерений = Новый Соответствие;
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		ПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным;
		Если СоответствиеТекущихИзмерений[ПутьКДанным] <> Неопределено Тогда
			
			Предупреждение("Повторяющееся поле детализации """ + ПостроительОтчета.ИзмеренияСтроки[Сч].Представление + """!");
			Возврат Истина;
			
		КонецЕсли;
		СоответствиеТекущихИзмерений.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным, 0);
				
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Процедура формирует первоначальные строки отбора построителя по субконто
Процедура СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Знач Счет) Экспорт
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	
	Сч = 0;
	Для Каждого СтрокаВидаСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч + 1;
		ИмяСубконто = "Субконто" + Сч;
		
		ЭлементОтбора = ПостроительОтчета.Отбор.Найти(ИмяСубконто);
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ИмяСубконто);
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
					
		ТипИзмерения = ПолучитьТипИзмеренияПоУмолчанию(СтрокаВидаСубконто.ВидСубконто.ТипЗначения);
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ИмяСубконто, , ТипИзмерения);

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипИзмеренияПоУмолчанию(ТипЗначения) Экспорт
	
	Для каждого Тип Из ТипЗначения.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если ОбъектМетаданных.Иерархический Тогда
				Возврат ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию();;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	
КонецФункции

Функция ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию()
	
	ТипДетализацииПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
	
	Если ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Иерархия;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
	Иначе
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьТипИзмеренияПоУмолчанию(ТекущиеДанные, ПостроительОтчета) Экспорт
	
	ПутьКДанным = ТекущиеДанные.ПутьКДанным;
	
	Если Найти(ПутьКДанным, "КорСубконто") > 0 Тогда
		Префикс = "КорСубконто";
	ИначеЕсли Найти(ПутьКДанным, "Субконто") > 0 Тогда
		Префикс = "Субконто";
	Иначе
		Возврат;
	КонецЕсли;
	
	ИндексВидСубконто = Число(Сред(ПутьКДанным, СтрДлина(Префикс) + 1, 1)) - 1;
	Путь = СтрЗаменить(ПутьКДанным, ".", ".Поля."); 
	ТипЗначения = Неопределено;
	Выполнить("ТипЗначения = ПостроительОтчета.ДоступныеПоля." + Путь + ".ТипЗначения");
	ТекущиеДанные.ТипИзмерения = ПолучитьТипИзмеренияПоУмолчанию(ТипЗначения);
	
КонецПроцедуры

// процедура устанавливает отбор посторителю отчетов по параметрам
Процедура ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, Знач СтрокиОтбора) Экспорт
	
	Если СтрокиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для Каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла;
			
			Попытка
			
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				КонецЕсли;
				
				Если ТипЗнч(Строка.Значение) = Тип("СписокЗначений")
					ИЛИ ТипЗнч(Строка.Значение) = Тип("Массив") ТОгда
					
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
					ЭлементОтбора.Значение = Строка.Значение;	
					ЭлементОтбора.Использование = Истина;
					
				ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
					
					ЭлементОтбора.ВидСравнения  = Строка.Значение.ВидСравнения;
					ЭлементОтбора.Значение      = Строка.Значение.Значение;
					ЭлементОтбора.Использование = Истина;	
					
				Иначе
					ЭлементОтбора.Установить(Строка.Значение);
					
					Если Метаданные.Справочники.Содержит(Строка.Значение.Метаданные())
					   И ЗначениеЗаполнено(Строка.Значение) Тогда
						ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
					Иначе
						ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
					КонецЕсли;
				   
				КонецЕсли;	
				
			Исключение
				// не смогли ограничение установить
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		// переносим имя отбора из пути к данным
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			СтрокаОтбора.Имя = СтрокаОтбора.ПутьКДанным; 
			
		КонецЦикла;
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

//Функция формирует описание ограничений по измерениям построителя
Функция СформироватьСтрокуОписанияИтоговПоИзмерениямПостроителя(ПостроительОтчета) Экспорт
	
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстПроИтоги = "субконто: ";
		
	СтрокаИзмерений = "";
	Для Каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		СтрокаИзмерений = СтрокаИзмерений + ", " + Измерение.Представление;
		
	КонецЦикла;
	
	ТекстПроИтоги = ТекстПроИтоги + Сред(СтрокаИзмерений, 3);
		
	Возврат ТекстПроИтоги;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
//ОБОРОТЫ СЧЕТА
///////////////////////////////////////////////////////////////////////////////

// процедура обрабатывает выбор для строки отборов
Процедура ОбработатьВыборДляСтрокиОтбораБухОтчетов(СтрокаОтбора, Элемент, СтандартнаяОбработка, ОбъектОтчет) Экспорт
	
	Если СтрокаОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если СтрокаОтбора.ТипЗначения.Типы().Количество() = 1
			И СтрокаОтбора.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Субконто")) Тогда
			
			Если ИмяРегистраБухгалтерии = "Хозрасчетный" 
				ИЛИ ИмяРегистраБухгалтерии = "Налоговый" Тогда
				НайденноеЗначение = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоНаименованию(СтрокаОтбора.Представление, Истина);
			ИначеЕсли ИмяРегистраБухгалтерии = "Международный" Тогда
				НайденноеЗначение = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.НайтиПоНаименованию(СтрокаОтбора.Представление, Истина);
			КонецЕсли;
			
			Если НайденноеЗначение <> Неопределено Тогда
				СтандартнаяОбработка = Ложь;
				ФормаВыбора = Справочники.Субконто.ПолучитьФормуВыбора(,Элемент,);
				ФормаВыбора.ПараметрОтборПоВладельцу = НайденноеЗначение;
				ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
				ФормаВыбора.Открыть();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// Принятая в конфигурации обработка работает только для равенства/неравенства
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Равно
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
		ТипЗначенияПоля = СтрокаОтбора.ТипЗначения;
		НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля);
		
	КонецЕсли;	
	
КонецПроцедуры

// функция приводит значение из выборки к числу
Функция ПривестиКЧислу(Значение) Экспорт
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

//функция удаляет при необходимости область из макета
Функция УдалитьОбластьИзмакетаПриНеобходимости(Макет, Знач ИмяОбласти, Знач НужноУдалятьОбласть) Экспорт
	
	Если НЕ НужноУдалятьОбласть Тогда
		Макет.УдалитьОбласть(Макет.Область(ИмяОбласти), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
КонецФункции

//Функция возвращает строку формата периода
Функция ПолучитьСтрокуФорматаПериода(Знач Период) Экспорт
	
	ФорматПериода = "";
	Если ЗначениеЗаполнено(Период) Тогда
		Если Врег(Период) = "ГОД" Тогда
			ФорматПериода = "ДФ = ""гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "ПОЛУГОДИЕ" Тогда
			ФорматПериода = "ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
			ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
			ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "ДЕКАДА" Тогда
			ФорматПериода = "ДФ = """"""Декада с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
			ФорматПериода = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "ДЕНЬ" Тогда
			ФорматПериода = "ДЛФ = D";
		ИначеЕсли Врег(Период) = "РЕГИСТРАТОР" Тогда
			ФорматПериода = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФорматПериода;
	
КонецФункции

Процедура ВывестиЗаголовкиОборотовОтчетаОборотыСчета(Макет, Знач ИмяОбластиВывода, Знач Выборка, 
	Знач ДокументРезультат, Знач ПоСубсчетам, Знач ВидДвижения, МассивРесурсов, СписокСчетов, Знач ДополнениеКУровнюВывода = 0)
	
	ВерхнийУровень = 1000;
	Обл = Макет.ПолучитьОбласть(ИмяОбластиВывода);
	Пока Выборка.Следующий() Цикл
			
		Если НЕ ПоСубсчетам Тогда
				
			// Выводим только верхний уровень
			Если ВерхнийУровень < Выборка.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = Выборка.Уровень();
			КонецЕсли;
				
		КонецЕсли;
			
		ЕстьОборот = Ложь;
		ОкончанниеПоля = ?(ВидДвижения = ВидДвиженияБухгалтерии.Дебет, "Дт", "Кт");
		Для каждого Ресурс Из МассивРесурсов Цикл
			Если Выборка["Есть" + Ресурс + "Оборот" + ОкончанниеПоля] <> 0 Тогда
				ЕстьОборот = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОборот Тогда
			СписокСчетов.Добавить(Выборка.КорСчет);
							
			Обл.Параметры.Заполнить(Выборка);
			ДокументРезультат.Присоединить(Обл, Выборка.Уровень() + ДополнениеКУровнюВывода);
				
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

//Процедура возвращает суммы на начало периода
Процедура ПолучитьДанныеДляОборотов(ДанныеДляВыбораСумм, ПостфиксИменПолей, 
	Знач ПолучатьКоличество, Знач ПолучатьВалюту, СуммаДт, СуммаКт, КоличествоДт = Неопределено, 
	КоличествоКт = Неопределено, ВалютнаяСуммаДт = Неопределено, ВалютнаяСуммаКт = Неопределено) Экспорт
	


	СуммаДт = ПривестиКЧислу(ДанныеДляВыбораСумм["Сумма" + ПостфиксИменПолей + "Дт"]);
	СуммаКт = ПривестиКЧислу(ДанныеДляВыбораСумм["Сумма" + ПостфиксИменПолей + "Кт"]);
	
	Если ПолучатьКоличество Тогда
		
		КоличествоДт = ПривестиКЧислу(ДанныеДляВыбораСумм["Количество" + ПостфиксИменПолей + "Дт"]);
		КоличествоКт = ПривестиКЧислу(ДанныеДляВыбораСумм["Количество" + ПостфиксИменПолей + "Кт"]);
			
	КонецЕсли;
		
	Если ПолучатьВалюту Тогда
		
		ВалютнаяСуммаДт = ПривестиКЧислу(ДанныеДляВыбораСумм["ВалютнаяСумма" + ПостфиксИменПолей + "Дт"]);
		ВалютнаяСуммаКт = ПривестиКЧислу(ДанныеДляВыбораСумм["ВалютнаяСумма" + ПостфиксИменПолей + "Кт"]);
							
	КонецЕсли;
	
КонецПроцедуры

//Функция определяет по построителю отчета и имени субконто вести про нему количественный учет или нет
Функция ОпределитьПоСубконтоИПостроителюВестиКоличественныйУчет(Счет, ПостроительОтчета, Знач Измерение) Экспорт
	
	Если Врег(Измерение) = "СЧЕТ" Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ИзмерениеПостроителя = ПостроительОтчета.ИзмеренияСтроки.Найти(Измерение);
	Если ИзмерениеПостроителя <> Неопределено Тогда
				
		ИмяПоля = ИзмерениеПостроителя.ПутьКДанным;
				
		поз = Найти(ИмяПоля, ".");
		ИмяПоля = ?(поз=0, ИмяПоля, Лев(ИмяПоля, поз-1));
			
	Иначе
		ИмяПоля = Измерение; 
	КонецЕсли;
	
	Попытка
		
		ИндСубконто = Число(Сред(ИмяПоля, СтрДлина("Субконто") + 1));
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ВыводКоличества = Счет.ВидыСубконто[ИндСубконто - 1].Количественный;
	
	Возврат ВыводКоличества;
	
КонецФункции

// процедура выполняет заполнение отчета обороты счета параметрами
Процедура ЗаполнитьСуммыОборотаСчета(Знач ДокументРезультат, Знач ВыводитьКоличество, Знач Уровень, Знач ОбластьВывода, Знач ИмяПараметраСуммы, Знач ИмяПараметраКоличества,
	Знач Сумма, Знач Количество) Экспорт
	
	ОбластьВывода.Параметры[ИмяПараметраСуммы] = Сумма;
	Если ВыводитьКоличество Тогда
		ОбластьВывода.Параметры[ИмяПараметраКоличества] = Количество;
	КонецЕсли;
				
	ДокументРезультат.Присоединить(ОбластьВывода, Уровень);
	
КонецПроцедуры

// процедура выводит заголовок для отчета обороты счета
Процедура ВывестиПолныйЗаголовокОтчетаОборотовСчета(Выборка = Неопределено, ШиринаТаблицы, ОбъектОтчет, Макет, ДокументРезультат,
	РезультатЗапроса, Знач ИмяСтроки, МассивРесурсов, СписокДт, СписокКт, Знач ДополнениеКУровнюВывода = 0, Знач ВыборкаИтогов = Неопределено, 
	Знач ОбщийИтог = Неопределено) Экспорт
	
	// Вывод заголовков нач.сальдо
	Если СальдоНачДт Тогда
		ОблСальдоНачДт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачДт");
		Если ВыборкаИтогов <> Неопределено Тогда
			ОблСальдоНачДт.Параметры.Заполнить(ВыборкаИтогов);
		КонецЕсли;
		ДокументРезультат.Присоединить(ОблСальдоНачДт, 0);
		ШиринаТаблицы = ШиринаТаблицы + ОблСальдоНачДт.ШиринаТаблицы;
	КонецЕсли;
	
	Если СальдоНачКт Тогда
		ОблСальдоНачКт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачКт");
		Если ВыборкаИтогов <> Неопределено Тогда
			ОблСальдоНачКт.Параметры.Заполнить(ВыборкаИтогов);
		КонецЕсли;
		ДокументРезультат.Присоединить(ОблСальдоНачКт, 0);
		ШиринаТаблицы = ШиринаТаблицы + ОблСальдоНачКт.ШиринаТаблицы;
	КонецЕсли;
	
	// Вывод заголовков оборотов
	Если ОборотДт Тогда
		ОблОборотДт = Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДт");
		Если ОбщийИтог <> Неопределено Тогда
			ОблОборотДт.Параметры.Заполнить(ОбщийИтог);
		КонецЕсли;
		ДокументРезультат.Присоединить(ОблОборотДт, 0);
		ШиринаТаблицы = ШиринаТаблицы + ОблОборотДт.ШиринаТаблицы;
	КонецЕсли;
			
	// Вывод кор счетов с дебетовыми оборотами
	Если Выборка = Неопределено Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет", "Все");
	Иначе
		Выборка.Сбросить();
	КонецЕсли;
	
	// вывод заголовков для корреспондирующих счетов
	СписокДт = Новый СписокЗначений;
	Если ОборотДтКорСчета Тогда
		
		ВывестиЗаголовкиОборотовОтчетаОборотыСчета(Макет, ИмяСтроки+"|ОборотДтКорсчет", Выборка,
			ДокументРезультат, ПоСубсчетамКорСчетов, ВидДвиженияБухгалтерии.Дебет, МассивРесурсов, СписокДт, ДополнениеКУровнюВывода);
						
	КонецЕсли;
	
	// вывод данных по кредитовому обороту
	Если ОборотКт Тогда
		ОблОборотКт = Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКт");
		Если ОбщийИтог <> Неопределено Тогда
			ОблОборотКт.Параметры.Заполнить(ОбщийИтог);
		КонецЕсли;
		ДокументРезультат.Присоединить(ОблОборотКт, 0);
		ШиринаТаблицы = ШиринаТаблицы + ОблОборотКт.ШиринаТаблицы;
	КонецЕсли;
	
	// Вывод кор счетов с кредитовыми оборотами
	СписокКт = Новый СписокЗначений;
	
	Выборка.Сбросить();
	Если ОборотКтКорСчета Тогда
		
		ВывестиЗаголовкиОборотовОтчетаОборотыСчета(Макет, ИмяСтроки+"|ОборотКтКорсчет", Выборка, 
			ДокументРезультат, ПоСубсчетамКорСчетов, ВидДвиженияБухгалтерии.Кредит, МассивРесурсов, СписокКт, ДополнениеКУровнюВывода);
			
	КонецЕсли;
	
	
	Если ДополнениеКУровнюВывода <> 0 Тогда
		
		Если СальдоКонДт Тогда
			ОблСальдоКонДт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонДт");
			ДокументРезультат.Присоединить(ОблСальдоКонДт,0);
			ШиринаТаблицы = ШиринаТаблицы + ОблСальдоКонДт.ШиринаТаблицы;
		КонецЕсли;
		
		Если СальдоКонКт Тогда
			ОблСальдоКонКт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонКт");
			ДокументРезультат.Присоединить(ОблСальдоКонКт,0);
			ШиринаТаблицы = ШиринаТаблицы + ОблСальдоКонКт.ШиринаТаблицы;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// процедурв выводит итоги оборотов за период для отчета обороты счета
Процедура ВывестиОборотыЗаПериод(СчетОграниченийОтчета, Знач ЕстьИтог, ОбщийИтог, Макет, ДокументРезультат,
	Знач СальдоКонДт, Знач СальдоКонКт) Экспорт
	
	СуммаКонКт = 0;
	СуммаКонДт = 0;
	
	Если ЕстьИтог Тогда
		
		СуммаНачКт = 0;
		СуммаНачДт = 0;
		
		СуммаОборотКт = 0;
		СуммаОборотДт = 0;
		
		ПолучитьДанныеДляОборотов(ОбщийИтог, "Нач",
			Ложь, Ложь, СуммаНачДт, СуммаНачКт);
			
		ПолучитьДанныеДляОборотов(ОбщийИтог, "Кон",
			Ложь, Ложь, СуммаКонДт, СуммаКонКт);
			
		ПолучитьДанныеДляОборотов(ОбщийИтог, "Оборот", 
			Ложь, Ложь, СуммаОборотДт, СуммаОборотКт);	
						
	КонецЕсли;
	
	Если СальдоКонДт Тогда
		
		Обл=Макет.ПолучитьОбласть("Итог|СальдоКонДт");
		Обл.Параметры.СуммаКонДт=СуммаКонДт;
		ДокументРезультат.Присоединить(Обл);
		
	КонецЕсли;
	
	Если СальдоКонКт Тогда
		
		Обл=Макет.ПолучитьОбласть("Итог|СальдоКонКт");
		Обл.Параметры.СуммаКонКт=СуммаКонКт;
		ДокументРезультат.Присоединить(Обл);
		
	КонецЕсли;
	
КонецПроцедуры

// процедура поддержка одновирменности для БухОтчетов
Процедура ПоддержкаОднофирменностиДляБухОтчетов(Форма, Организация, УчетПоВсемОрганизациям, Знач ЗаполнятьОрганизацию = Истина) Экспорт
	
	Если ЗаполнятьОрганизацию ИЛИ НЕ УчетПоВсемОрганизациям Тогда
		ПроизвестиПроверкуНаВедениеОднофирменности(Организация);
	КонецЕсли;
			
	Форма.ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
КонецПроцедуры

// процедура поддержка одновирменности для формы настроек БухОтчетов
Процедура ПоддержкаОднофирменностиДляФормыНастроекБухОтчетов(Форма, УчетПоВсемОрганизациям) Экспорт
	
	Форма.ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
КонецПроцедуры

//Функция формирует строку ограничений для запроса по ограничениям построителя отчетов
Функция ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос) Экспорт
	
	ТекстФильтры = "";
	
	Индекс = 0;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Индекс = Индекс + 1;
		Если Не СтрокаОтбора.Использование 
			ИЛИ ПустаяСтрока(СтрокаОтбора.ПутьКДанным) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, СтрокаОтбора, Строка(Индекс));
						
		ТекстСтрокиПоля = "";
		Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии
			И СтрокаОтбора.Значение <> Неопределено Тогда
			
			МетаданныеОграничения = СтрокаОтбора.Значение.Метаданные();	
			
			ТипВыражения = "";
			
			Если Метаданные.Справочники.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Справочник."; 
				
			ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Документ."; 
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "ПланВидовХарактеристик.";	
				
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Перечисление.";	
				
			КонецЕсли;
			
			Если ТипВыражения <> "" Тогда
				
				ТекстСтрокиПоля = "Выразить(" + СтрокаОтбора.ПутьКДанным + " КАК " + ТипВыражения + МетаданныеОграничения.Имя + ")"
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекстСтрокиПоля = "" Тогда
			
			ТекстСтрокиПоля = СтрокаОтбора.ПутьКДанным;
			
		КонецЕсли;
			
		ТекстФильтры = ТекстФильтры + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаОтбора.ВидСравнения, "&Значение" + Индекс, 
			ТекстСтрокиПоля, "&ЗначениеС" + Индекс, "&ЗначениеПо" + Индекс, СтрокаОтбора.Значение, 
			СтрокаОтбора.ЗначениеС, СтрокаОтбора.ЗначениеПо);
				
	КонецЦикла;
	
	Возврат Сред(ТекстФильтры, 3);
	
КонецФункции

//Функция создает структуру дополнительных ограничений для расшифровки отчета
Функция СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ОтчетОбъект, Выборка, МассивГруппировок, 
	Знач ВыводитьВсеГруппировки = Ложь) Экспорт
	
	ДополнительныеОтборы = СоздатьТаблицуДляХраненияОтбора(Истина);
	
	ИмяГруппировки = Выборка.Группировка();
	Если ВыводитьВсеГруппировки Тогда
		НомерГруппировкиВМассиве = МассивГруппировок.Количество() - 1;
	Иначе	
		НомерГруппировкиВМассиве = ОбщегоНазначения.ВернутьИндексВМассиве(МассивГруппировок, ИмяГруппировки);
	КонецЕсли;
	
	Для Сч = 0 По НомерГруппировкиВМассиве Цикл 
		
		ТекущееИмяГруппировки = Врег(МассивГруппировок[Сч]);
		
		Если ТекущееИмяГруппировки = "СЧЕТ"
			ИЛИ ТекущееИмяГруппировки = "ОБЩИЕ" 
			или ТекущееИмяГруппировки = "ОРГАНИЗАЦИЯ" Тогда         
			
			Продолжить;
			
		КонецЕсли;
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(ТекущееИмяГруппировки);
		
		СтрокаОтбора = ДополнительныеОтборы.ДОбавить();
		СтрокаОтбора.Использование = Истина;
		СтрокаОтбора.Имя = Измерение.ПутьКДанным;
		
		Если Измерение.ТипИзмерения = ТипИзмеренияПостроителяОтчета.Элементы Тогда
			ВидСравненияДанных = ВидСравнения.Равно;
		Иначе			
			// надо тип отбора определить и по нему можно сказать вид сравнения
			ВидСравненияДанных = ПолучитьВидОтбораПоТипуЗначения(Выборка[ТекущееИмяГруппировки]);
		КонецЕсли;
		
		СтрокаОтбора.ВидСравнения = ВидСравненияДанных;
		СтрокаОтбора.Значение = Выборка[ТекущееИмяГруппировки];
				
		Если Измерение <> Неопределено Тогда
					
			СтрокаОтбора.Имя = Измерение.ПутьКДанным;
			СтрокаОтбора.ПутьКДанным = Измерение.ПутьКДанным;
			
		Иначе
						
			СтрокаОтбора.Имя = ТекущееИмяГруппировки;
			СтрокаОтбора.ПутьКДанным = ТекущееИмяГруппировки;
			
		КонецЕсли;
	
	КонецЦикла;

	Возврат ДополнительныеОтборы;
	
КонецФункции

//Процедура устанавливает параметры ограничения запросу из строки ограничений построителя отчета
Процедура УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Знач СтрокаОтбора, Знач ПостфиксОграничения) Экспорт
	
	СтрокаПостфикса = Строка(ПостфиксОграничения);
	
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
		
		// ограничение на содержит отрабатывается отдельным образом
		// надо из значения ограничения лишние символы преобразовать и дополнить ограничение символами %%
		
		ИтоговаяСтрокаОграничения = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаОтбора.Значение);
		
		ИтоговаяСтрокаОграничения = "%" + ИтоговаяСтрокаОграничения + "%";
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, ИтоговаяСтрокаОграничения);
		
	Иначе	
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, СтрокаОтбора.Значение);
		Запрос.УстановитьПараметр("ЗначениеС" + СтрокаПостфикса, СтрокаОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("ЗначениеПо" + СтрокаПостфикса, СтрокаОтбора.ЗначениеПо);	
	
	КонецЕсли;
	
КонецПроцедуры

//Процедура заменяет в структуре отборы на отборы ДТ и КТ
Процедура ЗаменитьОбщиеОтборыНаОтборыДтКт(ОтборДляРасшифровки, РасшифровкаОтборПоСчетам, Знач ВидОборота) Экспорт
	
	Если ОтборДляРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОтборДляРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТаблицы Из ОтборДляРасшифровки Цикл
						
			НовоеИмя = ?(ВидОборота = "ДТ", СтрЗаменить(СтрокаТаблицы.Имя, "Субконто", "СубконтоДт"), СтрЗаменить(СтрокаТаблицы.Имя, "Субконто", "СубконтоКт"));
			НовоеПутьКданным = ?(ВидОборота = "ДТ", СтрЗаменить(СтрокаТаблицы.ПутьКданным, "Субконто", "СубконтоДт"), СтрЗаменить(СтрокаТаблицы.ПутьКданным, "Субконто", "СубконтоКт"));
			
			СтрокаТаблицы.Имя = НовоеИмя;
			СтрокаТаблицы.ПутьКданным = НовоеПутьКданным;
												
		КонецЦикла;
		
	Иначе	
	
		Для каждого соот Из ОтборДляРасшифровки Цикл
						
			ИмяКлюча = ?(ВидОборота = "ДТ", СтрЗаменить(соот.Ключ, "Субконто", "СубконтоДт"), СтрЗаменить(соот.Ключ, "Субконто", "СубконтоКт"));
			РасшифровкаОтборПоСчетам.Вставить(ИмяКлюча, соот.Значение);
						
		КонецЦикла;
	
	КонецЕсли;
		
КонецПроцедуры

//Функция возвращает часть запроса для иерархического вывода результатов отчета
Функция ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Знач ТипИзмерения) Экспорт
	
	Если ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия Тогда
		Возврат " ИЕРАРХИЯ";
	ИначеЕсли ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда	
		Возврат " ТОЛЬКО ИЕРАРХИЯ";
	Иначе	
		Возврат "";
	КонецЕсли;
	
КонецФункции

//Функция Определяет вид отбора по типу значения объекта
Функция ПолучитьВидОтбораПоТипуЗначения(ЗначениеОтбора)
	
	ВидСравненияОтчета = ВидСравнения.Равно;
	
	Если (ЗначениеОтбора = NULL)	
		ИЛИ НЕ ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		Возврат ВидСравненияОтчета;
		
	КонецЕсли;
	
	// нужно определить это ссылочный тип или нет
	Попытка
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора))
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора)) Тогда
			Если ЗначениеОтбора.Метаданные().Иерархический Тогда
				ВидСравненияОтчета = ВидСравнения.ВИерархии;
			Иначе
				ВидСравненияОтчета = ВидСравнения.Равно;
			КонецЕсли;
		КонецЕсли; 
		
	Исключение
	КонецПопытки;
			
	Возврат ВидСравненияОтчета;
	
КонецФункции

// Создание структуры таблицы для хранения данных об отборе по субконто каждой корреспонденции
Функция СоздатьТаблицуДляХраненияОтбора(Знач ДобавлятьКолонкуИспользования = Ложь) Экспорт
	
	ТаблицаОтбора = Новый ТаблицаЗначений();
		
	ТаблицаОтбора.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	ТаблицаОтбора.Колонки.Добавить("Значение");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеС");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеПо");
	
	Если ДобавлятьКолонкуИспользования Тогда
		ТаблицаОтбора.Колонки.Добавить("Использование");
	КонецЕсли;
	
	Возврат ТаблицаОтбора;
	
КонецФункции

//Процедура дополнить дополнительными отборами пареметры расшифровки отчета
Процедура ДополнитьДопОтборамиРасшифровкуДанных(ВыбраннаяРасшифровка) Экспорт
	
	Если ТипЗнч(ВыбраннаяРасшифровка) = Тип("Структура") Тогда
			
		ОтборыДанных = Неопределено;
		ВыбраннаяРасшифровка.Свойство("Отбор", ОтборыДанных);
			
		ДопОтборыДанных = Неопределено;
		ВыбраннаяРасшифровка.Свойство("ДополнительныеОтборы", ДопОтборыДанных);
			
	Иначе
			
		ОтборыДанных = ВыбраннаяРасшифровка["Отбор"];
		ДопОтборыДанных = ВыбраннаяРасшифровка["ДополнительныеОтборы"];
				
	КонецЕсли;
		
	// дополнительная расшифровка
	ДополнитьОтборОтчетаДополнительнымиПараметрами(ОтборыДанных, ДопОтборыДанных);	
	
КонецПроцедуры

// процедура дополняет основной отбор для отчета параметрами из дополнительного отбора
Процедура ДополнитьОтборОтчетаДополнительнымиПараметрами(ОсновнойОтбор, ДопРасшифровка)
	
	Если ДопРасшифровка = Неопределено
		ИЛИ ОсновнойОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДопРасшифровка) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Элемент Из ДопРасшифровка Цикл
					
			СтрокаОсновногоОтбора = ОсновнойОтбор.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаОсновногоОтбора, Элемент);
					
		КонецЦикла;

		
	Иначе	
			
		Для Каждого Элемент Из ДопРасшифровка Цикл
					
			СтрокаОсновногоОтбора = ОсновнойОтбор.Добавить(); 
						
			СтрокаОсновногоОтбора.Значение = Элемент.Значение;
			СтрокаОсновногоОтбора.ПутьКДанным = Элемент.Ключ;
			СтрокаОсновногоОтбора.Использование = Истина;
			
			ВидСравненияДанных = ПолучитьВидОтбораПоТипуЗначения(СтрокаОсновногоОтбора.Значение);
			СтрокаОсновногоОтбора.ВидСравнения = ВидСравненияДанных;
			СтрокаОсновногоОтбора.ЗначениеС = Null;
			СтрокаОсновногоОтбора.ЗначениеПО = Null;
					
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

//Функция получает конечную дату по дате и периоду
Функция ПолучитьДатуОкончанияПериода(Знач ДатаОграничений, Знач Период) Экспорт
	
	Если ДатаОграничений = Null
		ИЛИ ДатаОграничений = Неопределено Тогда
		
		Возврат КонецДня(Дата('00010101'));
		
	КонецЕсли;
	
	ПериодПо = ДатаОграничений;
	
	Если Период = "ДЕНЬ" Тогда
		ПериодПо = ДатаОграничений + 24 * 60 * 60 - 1;
	ИначеЕсли Период = "НЕДЕЛЯ" Тогда
		ПериодПо = ДатаОграничений + 7 * 24 * 60 * 60 - 1;
	ИначеЕсли Период = "ДЕКАДА" Тогда
		ПериодПо = ДатаОграничений + 10 * 24 * 60 * 60 - 1;
	ИначеЕсли Период = "МЕСЯЦ" Тогда
		ПериодПо = КонецДня(КонецМесяца(ДатаОграничений));
	ИначеЕсли Период = "КВАРТАЛ" Тогда
		ПериодПо = КонецДня(КонецКвартала(ДатаОграничений));
	ИначеЕсли Период = "ПОЛУГОДИЕ" Тогда
		СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ДатаОграничений), 6));
		Если ДатаОграничений<= СерединаГода Тогда
			ПериодПо = СерединаГода;
		Иначе
			ПериодПо = КонецДня(КонецГода(ДатаОграничений));
		КонецЕсли;
				
	ИначеЕсли Период = "ГОД" Тогда
		ПериодПо = КонецДня(КонецГода(ДатаОграничений));
	КонецЕсли;
	
	Возврат ПериодПо;
	
КонецФункции

//Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии
Процедура ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) и не ТипЗнч(ОграничениеПоРеквизиту) = Тип("СправочникСсылка.СценарииПланирования") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " = &" + ИмяОграниченияПоРеквизиту + " ";
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

//Функция Объединяет ограничения
Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И") Экспорт
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции


//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Хозрасчетный";

Период = "МЕСЯЦ";
#КонецЕсли