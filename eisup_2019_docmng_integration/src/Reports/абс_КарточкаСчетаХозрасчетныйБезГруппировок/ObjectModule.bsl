#Если Клиент Тогда
	
Перем ИмяРегистраБухгалтерии Экспорт;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

// Выводит шапку отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
		
	Макет = ПолучитьМакет("КарточкаСчета");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрФильтры   = "";

	СтрФильтры = Сред(СтрФильтры + ", " + УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор), 3);

	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");

	Если Не ПустаяСтрока(СтрФильтры) Тогда
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрФильтры;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция ЗаголовокОтчета() Экспорт
	Возврат "Карточка счета " + Счет;	
КонецФункции // ЗаголовокОтчета()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Проверка на пустые значения
	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;

	// Выберем в соответствие все подчиненные счета (для определения принадлежности выводимого счета деьбета, кредита):
	ПланСчетовРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов;
	ИмяПланаСчетов = ПланСчетовРегистра.Имя;
	СоответствиеПодчиненныеСчета = ВернутьСоответвиеПодчиненныхСчетов(ИмяПланаСчетов, Счет, Истина);
	
	Для Каждого Элемент Из СоответствиеПодчиненныеСчета Цикл
		
		СоответствиеПодчиненныеСчета[Элемент.Ключ] = -1;
		
	КонецЦикла;
	
	СоответствиеСчетовКэш = Новый Соответствие; 
				
	ДокументРезультат.Очистить();

	// Вывод заголовка отчета
	СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	Макет = ПолучитьМакет("КарточкаСчета");

	ЗапросПоОстаткам = Новый Запрос();
	ЗапросПоОстаткам.УстановитьПараметр("СчетАнализа", Счет);
	ЗапросПоОстаткам.УстановитьПараметр("Период",      ?(Не ЗначениеЗаполнено(ДатаНач), (ДатаНач + 1), НачалоДня(ДатаНач)));
	ЗапросПоОстаткам.УстановитьПараметр("Организация", Организация);

	СтрокаОграниченийПоРеквизитам = "";
	ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	ТекстФильтры = ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросПоОстаткам);
	СтрокаОграниченийПоРеквизитам = ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
	

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Выборка.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	СУММА(Выборка.СуммаОстатокКт) КАК СуммаОстатокКт,
	|	СУММА(Выборка.СуммаОстаток)   КАК СуммаОстаток,
	|	СУММА(Выборка.КоличествоОстатокДт) КАК КоличествоОстатокДт,
	|	СУММА(Выборка.КоличествоОстатокКт) КАК КоличествоОстатокКт
	|ИЗ
	|(ВЫБРАТЬ
	|	Счет,
	|	СуммаОстатокДт,
	|	СуммаОстатокКт,
	|	СуммаОстаток,
	|	КоличествоОстатокДт,
	|	КоличествоОстатокКт
	|ИЗ
	|	РегистрБухгалтерии."+ ИмяРегистраБухгалтерии + ".Остатки(&Период, Счет В ИЕРАРХИИ (&СчетАнализа), ," 
	+ СтрокаОграниченийПоРеквизитам + ") КАК ОсновнойОстатки 	
	|
	|) КАК Выборка";
	
	ЗапросПоОстаткам.Текст = ТекстЗапроса;
	
	//нужно ли делать пвомежуточные итоги по периоду или нет
	НужныПромежуточныеИтогиПоПериоду = (Не ПустаяСтрока(Период)) И (Не ВРег(Период) = "ПЕРИОД");

	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("СчетАнализа", Счет);
	ЗапросПоПроводкам.УстановитьПараметр("НачПериода",  ?(Не ЗначениеЗаполнено(ДатаНач), ДатаНач, НачалоДня(ДатаНач)));
	ЗапросПоПроводкам.УстановитьПараметр("КонПериода",  ?(Не ЗначениеЗаполнено(ДатаКон), ДатаКон, КонецДня(ДатаКон)));
	ЗапросПоПроводкам.УстановитьПараметр("Организация", Организация);
	ЗапросПоПроводкам.УстановитьПараметр("Дебет",       ВидДвиженияБухгалтерии.Дебет);
	ЗапросПоПроводкам.УстановитьПараметр("Кредит",      ВидДвиженияБухгалтерии.Кредит);
	ЗапросПоПроводкам.УстановитьПараметр("ПустойСчет",  ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());

	Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Корреспонденция тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетДт,
		|	СчетКт,
		|	СчетДт.Представление КАК СчетДтПредставление,
		|	СчетКт.Представление КАК СчетКтПредставление,
		|	ВалютаДт,
		|	ВалютаКт,
		|	ПРЕДСТАВЛЕНИЕ(ВалютаДт) КАК ВалютаДтПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ВалютаКт) КАК ВалютаКтПредставление,
		|	КоличествоДт     КАК КоличествоДт,
		|	КоличествоКт     КАК КоличествоКт,
		|	ВалютнаяСуммаДт  КАК ВалютнаяСуммаДт,
		|	ВалютнаяСуммаКт  КАК ВалютнаяСуммаКт,";

		Для Индекс = 1 По ПланСчетовРегистра.МаксКоличествоСубконто Цикл
			
			ТекстЗапроса = ТекстЗапроса + "
			|	СубконтоДт"+ Строка(Индекс) + "," + Символы.ПС + "
			|	ПРЕДСТАВЛЕНИЕ(СубконтоДт"+ Строка(Индекс) + ") КАК СубконтоДт" + Строка(Индекс) + "Представление, 
			|	СубконтоКт"+ Строка(Индекс) + "," + Символы.ПС + " 
			|	ПРЕДСТАВЛЕНИЕ(СубконтоКт"+ Строка(Индекс) + ") КАК СубконтоКт" + Строка(Индекс) + "Представление,";
			
		КонецЦикла;

	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидДвижения,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетКт,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетДтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетКтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаДтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаКтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоКт,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаКт,";

		Для Индекс = 1 По ПланСчетовРегистра.МаксКоличествоСубконто Цикл
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт"+ Строка(Индекс)+",
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт"+ Строка(Индекс); 
			
		КонецЦикла;

	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
		|	Сумма            КАК Сумма,";
		
	Если НужныПромежуточныеИтогиПоПериоду Тогда
			
		ТекстЗапроса = ТекстЗапроса + "
			|	НАЧАЛОПЕРИОДА(Период, " + Период + ") КАК Период,";
			
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|	ПРЕДСТАВЛЕНИЕ(Регистратор)КАК ПредставлениеОперации,
	|	Регистратор      КАК ДокументОперации,
	|	Период           КАК ДатаОперации,
	|	Содержание       КАК Операция,
	|	НомерЖурнала,
	|	НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(Организация) КАК Организация
	|
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ДвиженияССубконто(
	|		&НачПериода,
	|		&КонПериода,
	|";
	
	
	СтрокаОграниченийПоРеквизитам = " (Активность = ИСТИНА) И (Счет В ИЕРАРХИИ (&СчетАнализа))";
	ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	ТекстФильтры = ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросПоПроводкам);
	СтрокаОграниченийПоРеквизитам = ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
		
	
	ТекстЗапроса = ТекстЗапроса + СтрокаОграниченийПоРеквизитам + "
	|	) КАК ОсновнойДвиженияССубконто
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО ДатаОперации, Регистратор ";
	
	Если НужныПромежуточныеИтогиПоПериоду Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ 
			|	СУММА(КоличествоДт), 
			|	СУММА(ВалютнаяСуммаДт), 
			|	СУММА(КоличествоКт), 
			|	СУММА(ВалютнаяСуммаКт), 
			|	СУММА(Сумма) 
			|
			|ПО
			|	Период";
			
	КонецЕсли;
		
	ЗапросПоПроводкам.Текст = ТекстЗапроса;
	Проводки = ЗапросПоПроводкам.Выполнить().Выбрать();

	ОбластьМакет = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ДокументРезультат.Вывести(ОбластьМакет);

	// на начало периода
	Если Счет.Количественный Тогда
		ОбластьМакет = Макет.ПолучитьОбласть("СальдоКоличество");
	Иначе
		ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
	КонецЕсли;

	ТекущееСальдо = 0;
	ТекущееСальдоКолво = 0;
	ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, ОбластьМакет, Счет, Истина, 
		ТекущееСальдо, ТекущееСальдоКолво);
		
	ДокументРезультат.Вывести(ОбластьМакет);

	ОборотДт = 0;
	ОборотКт = 0;
	ИтогоОборотДт   = 0;
	ИтогоОборотКт   = 0;
	ИтогоОборотКолвоДт   = 0;
	ИтогоОборотКолвоКт   = 0;
	ОбластьОборота = Неопределено;

	Пока Проводки.Следующий() Цикл

		Если Проводки.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

			Если ОбластьОборота = Неопределено Тогда

				ОбластьОборота = Макет.ПолучитьОбласть("Обороты");
				ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + ПолучитьПериодДатСтрокой(Период, Проводки.Период);
				
			Иначе
				
				// вывели старые обороты
				ОбластьОборота.Параметры.ОборотДт = ОборотДт;
				ОбластьОборота.Параметры.ОборотКт = ОборотКт;
				ДокументРезультат.Вывести(ОбластьОборота);
				
				ОборотДт = 0;
				ОборотКт = 0;
				ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + ПолучитьПериодДатСтрокой(Период, Проводки.Период);
				ОбластьОборота.Параметры.Заполнить(Проводки);

			КонецЕсли;

		Иначе
			
			// это реальная строкка оборотов
			НачалоСтроки = ДокументРезультат.ВысотаТаблицы + 1;

			// детальные проводки 
			ОбластьМакет = Макет.ПолучитьОбласть("ЗаголовокПроводки");
			ОбластьМакет.Параметры.Заполнить(Проводки);

			Если СоответствиеПодчиненныеСчета[Проводки.СчетДт] <> Неопределено Тогда

				Если ЗначениеПоляСоответствуетОтбору(Проводки, "Дт", ПостроительОтчета) Тогда
					
					ОбластьМакет.Параметры.СуммаДт = Проводки.Сумма;
					ОборотДт      = ОборотДт      + Проводки.Сумма;
					ИтогоОборотДт = ИтогоОборотДт + Проводки.Сумма;
					ТекущееСальдо = ТекущееСальдо + Проводки.Сумма;
					
					ИтогоОборотКолвоДт = ИтогоОборотКолвоДт + ПривестиКЧислу(Проводки.КоличествоДт);
					ТекущееСальдоКолво = ТекущееСальдоКолво + ПривестиКЧислу(Проводки.КоличествоДт);
					
				КонецЕсли;

			КонецЕсли;

			Если СоответствиеПодчиненныеСчета[Проводки.СчетКт] <> Неопределено Тогда

				Если ЗначениеПоляСоответствуетОтбору(Проводки, "Кт", ПостроительОтчета) Тогда
					
					ОбластьМакет.Параметры.СуммаКт = Проводки.Сумма;
					ОборотКт      = ОборотКт      + Проводки.Сумма;
					ИтогоОборотКт = ИтогоОборотКт + Проводки.Сумма;
					ТекущееСальдо = ТекущееСальдо - Проводки.Сумма;
					
					ИтогоОборотКолвоКт = ИтогоОборотКолвоКт + ПривестиКЧислу(Проводки.КоличествоКт);
					ТекущееСальдоКолво = ТекущееСальдоКолво - ПривестиКЧислу(Проводки.КоличествоКт);
					
				КонецЕсли;

			КонецЕсли;

			ОбластьМакет.Параметры.Флаг   = ?(ТекущееСальдо = 0, "", ?(ТекущееСальдо < 0, "К", "Д"));
			ОбластьМакет.Параметры.Сальдо = ?(ТекущееСальдо > 0, ТекущееСальдо, - ТекущееСальдо);
			ДокументРезультат.Вывести(ОбластьМакет);

			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("ДокументОперации", Проводки.ДокументОперации);
			СтруктураРасшифровки.Вставить("НомерСтроки", Проводки.НомерСтроки);

			// Вывод Всех субконто операции
			ОбластьМакет = Макет.ПолучитьОбласть("СтрокаПроводки");

			КоличествоСубконтоСчета = ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Проводки.СчетДт, СоответствиеСчетовКэш);
			ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоДт", Проводки, КоличествоСубконтоСчета, 
				ОбластьМакет, ДокументРезультат, СтруктураРасшифровки);
			
			
			КоличествоСубконтоСчета = ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Проводки.СчетКт, СоответствиеСчетовКэш);
			ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоКт", Проводки, КоличествоСубконтоСчета, 
				ОбластьМакет, ДокументРезультат, СтруктураРасшифровки);

						
			Если (Проводки.КоличествоДт <> NULL ) 
				ИЛИ (Проводки.КоличествоКт <> NULL) Тогда

				ОбластьМакет = Макет.ПолучитьОбласть("КоличествоПроводки");
				ОбластьМакет.Параметры.Заполнить(Проводки);
				ОбластьМакет.Параметры.СальдоКолво = ТекущееСальдоКолво;
				ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
				ДокументРезультат.Вывести(ОбластьМакет);

			КонецЕсли;

			Если (Проводки.ВалютнаяСуммаДт <> NULL )
				ИЛИ (Проводки.ВалютнаяСуммаКт <> NULL) Тогда

				ОбластьМакет = Макет.ПолучитьОбласть("ВалютнаяСуммаПроводки");
				ОбластьМакет.Параметры.Заполнить(Проводки);
				ОбластьМакет.Параметры.ОписательВалюты = "В валюте :";
				ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
				ДокументРезультат.Вывести(ОбластьМакет);

			КонецЕсли;

			КонецСтроки = ДокументРезультат.ВысотаТаблицы;

			Область = ДокументРезультат.Область(НачалоСтроки, 3, КонецСтроки, 3);
			Область.Объединить();
			Область.Текст       = Проводки.ПредставлениеОперации;
			Область.Расшифровка = СтруктураРасшифровки;
			Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Строка;
			Область.РазмещениеТекста         = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

		КонецЕсли;

	КонецЦикла;

	// по периоду
	Если НужныПромежуточныеИтогиПоПериоду
		И Проводки.Количество() > 0 Тогда
		
		ОбластьОборота.Параметры.ОборотДт = ОборотДт;
		ОбластьОборота.Параметры.ОборотКт = ОборотКт;
		ДокументРезультат.Вывести(ОбластьОборота);
       
	КонецЕсли;
	
	Если ИтогоОборотКолвоДт <> 0 
		Или ИтогоОборотКолвоКт <> 0 Тогда
		
		ОбластьМакет = Макет.ПолучитьОбласть("ОборотыКоличество");
		
		ОбластьМакет.Параметры.ОборотКоличествоДт = ИтогоОборотКолвоДт;
		ОбластьМакет.Параметры.ОборотКоличествоКт = ИтогоОборотКолвоКт;
				
	Иначе
		ОбластьМакет = Макет.ПолучитьОбласть("Обороты");
	КонецЕсли;
	
	ОбластьМакет.Параметры.ОписательПериода = "Обороты за период";
	ОбластьМакет.Параметры.ОборотДт = ИтогоОборотДт;
	ОбластьМакет.Параметры.ОборотКт = ИтогоОборотКт;
		
	ДокументРезультат.Вывести(ОбластьМакет);

	// на конец периода
	Если Счет.Количественный Тогда
		ОбластьМакет = Макет.ПолучитьОбласть("СальдоКоличество");
	Иначе
		ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
	КонецЕсли;

	ЗапросПоОстаткам.УстановитьПараметр("Период", ?(Не ЗначениеЗаполнено(ДатаКон), ДатаКон, Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая)));
	ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, ОбластьМакет, Счет, Ложь);
	ДокументРезультат.Вывести(ОбластьМакет);

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка+2,,ВысотаЗаголовка+3,);
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "КарточкаСчета " + ИмяРегистраБухгалтерии;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", Ложь);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
		
		УстановитьЗапросИОтборПостроителяПоСубконтоДляДвижений(Счет, ИмяРегистраБухгалтерии, ПостроительОтчета,
			"Валюта.*");
        				
		УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОтборПоСчету()

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = СоздатьПоСтруктуреСоответствие(СтруктураПараметров); 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	ЗаполнитьНачальныеНастройки();
	
	СтрокиОтбора = Параметры["Отбор"];
	ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);
		
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
//КАРТОЧКА СЧЕТА
///////////////////////////////////////////////////////////////////////////////

// процедура устанавливает отборы посторителя по субконто счета
Процедура УстановитьЗапросИОтборПостроителяПоСубконтоДляДвижений(Знач Счет, Знач ИмяРегистраБухгалтерии, Знач ПостроительОтчета,
	Знач ДополнительныеОтборы = "") Экспорт
	
	Пока ПостроительОтчета.Отбор.Количество() > 0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;
		
	ТекстСубконто = "";
	// Если есть субконто, настроим отбор по субконто
	СтруктураСубконто = Новый Структура;
		
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

		СтруктураСубконто.Вставить("Субконто" + ВидСубконто.НомерСтроки, ВидСубконто.ВидСубконто);
				
		ТекстСубконто = ТекстСубконто + ", Субконто" + ВидСубконто.НомерСтроки+".*";

	КонецЦикла;
	
	Если Не ПустаяСтрока(ДополнительныеОтборы) Тогда
		
		ТекстСубконто = ТекстСубконто + ", " + ДополнительныеОтборы;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСубконто) Тогда
		СтрокаОграниченийДляПостроителя = "{" + Сред(ТекстСубконто, 3) + "}";
	Иначе
		СтрокаОграниченийДляПостроителя = Сред(ТекстСубконто, 3);
    КонецЕсли;
			
	ПостроительОтчета.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 
		|ИЗ РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ДвиженияССубконто(,," + СтрокаОграниченийДляПостроителя + ")";
		
	Для Каждого Элемент Из СтруктураСубконто Цикл
			
		Поле = ПостроительОтчета.ДоступныеПоля.Найти(Элемент.Ключ);
		
		Если Поле <> Неопределено Тогда
		
			Поле.ТипЗначения = Элемент.Значение.ТипЗначения;
			Поле.Представление = Элемент.Значение.Наименование;
				
			Если ПостроительОтчета.Отбор.Найти(Элемент.Ключ) = Неопределено Тогда
				ПостроительОтчета.Отбор.Добавить(Элемент.Ключ);
			КонецЕсли;
		
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает представление периода строкой
//
// Параметры:
//  ДатаПериода - Дата в интревале опредеяемого периода
//
// Возвращаемое значение:
//  Строковое представление интервала
//
Функция ПолучитьПериодДатСтрокой(Знач Период, Знач ДатаПериода) Экспорт

	ПериодСтр = Период;
	Если ПериодСтр = "ДЕНЬ" тогда
		ДатаНачала    = НачалоДня(ДатаПериода);
		ДатаОкончания = КонецДня(ДатаПериода);
	ИначеЕсли ПериодСтр = "НЕДЕЛЯ" тогда
		ДатаНачала    = НачалоНедели(ДатаПериода);
		ДатаОкончания = КонецНедели (ДатаПериода);
	ИначеЕсли ПериодСтр = "МЕСЯЦ" тогда
		ДатаНачала    = НачалоМесяца(ДатаПериода);
		ДатаОкончания = КонецМесяца (ДатаПериода);
	ИначеЕсли ПериодСтр = "КВАРТАЛ" тогда
		ДатаНачала    = НачалоКвартала(ДатаПериода);
		ДатаОкончания = КонецКвартала (ДатаПериода);
	ИначеЕсли ПериодСтр = "ГОД" тогда
		ДатаНачала    = НачалоГода(ДатаПериода);
		ДатаОкончания = КонецГода (ДатаПериода);
	КонецЕсли;

	Возврат ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина")

КонецФункции

//Функция получает конечную дату по дате и периоду
Функция ПолучитьДатуОкончанияПериода(Знач ДатаОграничений, Знач Период) Экспорт
	
	Если ДатаОграничений = Null
		ИЛИ ДатаОграничений = Неопределено Тогда
		
		Возврат КонецДня(Дата('00010101'));
		
	КонецЕсли;
	
	ПериодПо = ДатаОграничений;
	
	Если Период = "ДЕНЬ" Тогда
		ПериодПо = ДатаОграничений + 24 * 60 * 60 - 1;
	ИначеЕсли Период = "НЕДЕЛЯ" Тогда
		ПериодПо = ДатаОграничений + 7 * 24 * 60 * 60 - 1;
	ИначеЕсли Период = "ДЕКАДА" Тогда
		ПериодПо = ДатаОграничений + 10 * 24 * 60 * 60 - 1;
	ИначеЕсли Период = "МЕСЯЦ" Тогда
		ПериодПо = КонецДня(КонецМесяца(ДатаОграничений));
	ИначеЕсли Период = "КВАРТАЛ" Тогда
		ПериодПо = КонецДня(КонецКвартала(ДатаОграничений));
	ИначеЕсли Период = "ПОЛУГОДИЕ" Тогда
		СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ДатаОграничений), 6));
		Если ДатаОграничений<= СерединаГода Тогда
			ПериодПо = СерединаГода;
		Иначе
			ПериодПо = КонецДня(КонецГода(ДатаОграничений));
		КонецЕсли;
				
	ИначеЕсли Период = "ГОД" Тогда
		ПериодПо = КонецДня(КонецГода(ДатаОграничений));
	КонецЕсли;
	
	Возврат ПериодПо;
	
КонецФункции

//Процедура устанавливает параметры ограничения запросу из строки ограничений построителя отчета
Процедура УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Знач СтрокаОтбора, Знач ПостфиксОграничения) Экспорт
	
	СтрокаПостфикса = Строка(ПостфиксОграничения);
	
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
		
		// ограничение на содержит отрабатывается отдельным образом
		// надо из значения ограничения лишние символы преобразовать и дополнить ограничение символами %%
		
		ИтоговаяСтрокаОграничения = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаОтбора.Значение);
		
		ИтоговаяСтрокаОграничения = "%" + ИтоговаяСтрокаОграничения + "%";
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, ИтоговаяСтрокаОграничения);
		
	Иначе	
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, СтрокаОтбора.Значение);
		Запрос.УстановитьПараметр("ЗначениеС" + СтрокаПостфикса, СтрокаОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("ЗначениеПо" + СтрокаПостфикса, СтрокаОтбора.ЗначениеПо);	
	
	КонецЕсли;
	
КонецПроцедуры

//Функция формирует строку ограничений для запроса по ограничениям построителя отчетов
Функция ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос) Экспорт
	
	ТекстФильтры = "";
	
	Индекс = 0;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Индекс = Индекс + 1;
		Если Не СтрокаОтбора.Использование 
			ИЛИ ПустаяСтрока(СтрокаОтбора.ПутьКДанным) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, СтрокаОтбора, Строка(Индекс));
						
		ТекстСтрокиПоля = "";
		Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии
			И СтрокаОтбора.Значение <> Неопределено Тогда
			
			МетаданныеОграничения = СтрокаОтбора.Значение.Метаданные();	
			
			ТипВыражения = "";
			
			Если Метаданные.Справочники.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Справочник."; 
				
			ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Документ."; 
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "ПланВидовХарактеристик.";	
				
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Перечисление.";	
				
			КонецЕсли;
			
			Если ТипВыражения <> "" Тогда
				
				ТекстСтрокиПоля = "Выразить(" + СтрокаОтбора.ПутьКДанным + " КАК " + ТипВыражения + МетаданныеОграничения.Имя + ")"
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекстСтрокиПоля = "" Тогда
			
			ТекстСтрокиПоля = СтрокаОтбора.ПутьКДанным;
			
		КонецЕсли;
			
		ТекстФильтры = ТекстФильтры + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаОтбора.ВидСравнения, "&Значение" + Индекс, 
			ТекстСтрокиПоля, "&ЗначениеС" + Индекс, "&ЗначениеПо" + Индекс, СтрокаОтбора.Значение, 
			СтрокаОтбора.ЗначениеС, СтрокаОтбора.ЗначениеПо);
				
	КонецЦикла;
	
	Возврат Сред(ТекстФильтры, 3);
	
КонецФункции

// процедура выводит данные остатков по оборотам в макет
Процедура ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, Знач ОбластьМакет, Знач Счет, Знач ЗапросНаНачало, 
	ТекущееСальдо = 0, ТекущееСальдоКолво = 0) Экспорт
	
	Остатки = ЗапросПоОстаткам.Выполнить().Выбрать();
	Остатки.Следующий();
	
	Если ЗапросНаНачало Тогда
		
		ОбластьМакет.Параметры.ОписательСальдо = "Сальдо на начало";
		ВыводитьИтогПоКоличеству = Счет.Количественный;
		
	Иначе
		
		ОбластьМакет.Параметры.ОписательСальдо = "Сальдо на конец";
		ВыводитьИтогПоКоличеству = Счет.Количественный;
		
	КонецЕсли;
	
	СуммаОстатокДт = ПривестиКЧислу(Остатки.СуммаОстатокДт);
	СуммаОстатокКт = ПривестиКЧислу(Остатки.СуммаОстатокКт);
	КоличествоОстатокДт = ПривестиКЧислу(Остатки.КоличествоОстатокДт);
	КоличествоОстатокКт = ПривестиКЧислу(Остатки.КоличествоОстатокКт);
	
	ТекущееСальдо = СуммаОстатокДт - СуммаОстатокКт;
	ТекущееСальдоКолво = КоличествоОстатокДт - КоличествоОстатокКт;

	Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
		
		Если СуммаОстатокДт > СуммаОстатокКт Тогда
			ОбластьМакет.Параметры.СуммаСальдоДт   = ТекущееСальдо;
			ОбластьМакет.Параметры.СуммаСальдоКт   = 0;
			
			Если ВыводитьИтогПоКоличеству Тогда
				
				ОбластьМакет.Параметры.КоличествоСальдоДт   = ТекущееСальдоКолво;
				ОбластьМакет.Параметры.КоличествоСальдоКт   = 0;
				
			КонецЕсли;
			
		Иначе
			ОбластьМакет.Параметры.СуммаСальдоКт   = 0;
			ОбластьМакет.Параметры.СуммаСальдоКт   = -ТекущееСальдо;
			
			Если ВыводитьИтогПоКоличеству Тогда
				
				ОбластьМакет.Параметры.КоличествоСальдоДт   = 0;
				ОбластьМакет.Параметры.КоличествоСальдоКт   = -ТекущееСальдоКолво;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОбластьМакет.Параметры.СуммаСальдоДт   = СуммаОстатокДт;
		ОбластьМакет.Параметры.СуммаСальдоКт   = СуммаОстатокКт;
		
		Если ВыводитьИтогПоКоличеству Тогда
			
			ОбластьМакет.Параметры.КоличествоСальдоДт   = КоличествоОстатокДт;
			ОбластьМакет.Параметры.КоличествоСальдоКт   = КоличествоОстатокКт;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка соответствия половины проводки установленным отборам пользователя
//
// Параметры
//  Выборка  – ВыборкаИзРезультатаЗапроса – Выборка из результата запроса
//  Сторона  – Строка                     – Дт/Кт
//
// Возвращаемое значение:
//   Булево   – Соответствует или нет сторона проводки установленным отборам
//
Функция ЗначениеПоляСоответствуетОтбору(Выборка, Знач СторонаПроводки, ПостроительОтчета) Экспорт

	Результат = Истина;
	
	Для Каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
	
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = СтрЗаменить(ЭлементОтбора.ПутьКДанным, "Субконто", "Субконто"+СторонаПроводки);
		Если ВРЕГ(Лев(ЭлементОтбора.ПутьКДанным, 8)) = "СУБКОНТО" Тогда
			ИмяПоля = "Субконто" + СторонаПроводки + Сред(ЭлементОтбора.ПутьКДанным,9);
		КонецЕсли;
		Если ВРЕГ(Лев(ЭлементОтбора.ПутьКДанным, 6)) = "ВАЛЮТА" Тогда
			ИмяПоля = "Валюта" + СторонаПроводки + Сред(ЭлементОтбора.ПутьКДанным,7);
		КонецЕсли;
		
		ИндексТочки = Найти(ИмяПоля, ".");
		Если ИндексТочки <> 0 Тогда
			
			_ВремЗначение = Выборка[Лев(ИмяПоля,ИндексТочки-1)];
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(_ВремЗначение)) Тогда
				
				ЗначениеПоля = _ВремЗначение;	
				
			Иначе
			
				ЗначениеПоля = Неопределено;
				Выполнить("ЗначениеПоля = _ВремЗначение" + Сред(ИмяПоля,ИндексТочки));
				Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
					ЗначениеПоля = СокрЛП(ЗначениеПоля);
				КонецЕсли;

			
			КонецЕсли;
			
		Иначе
			ЗначениеПоля = Выборка[ИмяПоля];
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
		
			Результат = ЗначениеПоля > ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		
			Результат = ЗначениеПоля >= ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
		
			Результат = ВИерархии(ЗначениеПоля, ЭлементОтбора.Значение);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		
			Результат = ЭлементОтбора.Значение.НайтиПоЗначению(ЗначениеПоля) <> Неопределено;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		
			ПромРезультат = Ложь;
			
			Для Каждого Элемент Из ЭлементОтбора.Значение Цикл
				
				Если ВИерархии(ЗначениеПоля, Элемент.Значение) Тогда
					ПромРезультат = Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			Результат = ПромРезультат;
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
		
			Результат = (ЗначениеПоля > ЭлементОтбора.ЗначениеС) и (ЗначениеПоля < ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		
			Результат = (ЗначениеПоля >= ЭлементОтбора.ЗначениеС) и (ЗначениеПоля <= ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		
			Результат = (ЗначениеПоля >= ЭлементОтбора.ЗначениеС) и (ЗначениеПоля < ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
			Результат = (ЗначениеПоля > ЭлементОтбора.ЗначениеС) и (ЗначениеПоля <= ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
		
			Результат = ЗначениеПоля < ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		
			Результат = ЗначениеПоля <= ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		
			Результат = Не ВИерархии(ЗначениеПоля, ЭлементОтбора.Значение);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		
			Результат = ЭлементОтбора.Значение.НайтиПоЗначению(ЗначениеПоля) = Неопределено;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
			ПромРезультат = Ложь;
			
			Для Каждого Элемент Из ЭлементОтбора.Значение Цикл
			
				Если ВИерархии(ЗначениеПоля, Элемент.Значение) Тогда
					ПромРезультат = Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			Результат = Не ПромРезультат;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
			Результат = ЗначениеПоля <> ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
			
			ШаблонСтроки = ЭлементОтбора.Значение;
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "\%", "[|||]");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%", "");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "[|||]", "%");
			Результат = Найти(Строка(ЗначениеПоля), ШаблонСтроки) = 0;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Строка") Тогда
				Результат = (ЗначениеПоля = СокрЛП(ЭлементОтбора.Значение));
			Иначе
				Результат = (ЗначениеПоля = ЭлементОтбора.Значение);
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит Тогда
		
			ШаблонСтроки = ЭлементОтбора.Значение;
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "\%", "[|||]");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%", "");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "[|||]", "%");
			Результат = Найти(Строка(ЗначениеПоля), ШаблонСтроки) <> 0;
		
		КонецЕсли;
		
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // СоответствуетОтбору()

Функция ВИерархии(ЛевоеЗначение, ПравоеЗначение)
	
	Если ТипЗнч(ЛевоеЗначение) <> ТипЗнч(ПравоеЗначение) Тогда
		Возврат Ложь;    	
	ИначеЕсли ЛевоеЗначение = ПравоеЗначение Тогда
		Возврат Истина;
	ИначеЕсли ЛевоеЗначение.Пустая() ИЛИ ПравоеЗначение.Пустая() Тогда
		Возврат Ложь;
	ИначеЕсли ЛевоеЗначение.ПринадлежитЭлементу(ПравоеЗначение) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции


//Процедура проверяет ведение однофирменности и при необходимости запрещает изменять организацию в ограничениях
Процедура ПроизвестиПроверкуНаВедениеОднофирменности(Организация)
	
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Организация = ОргПоУмолчанию;
	КонецЕсли;
    
КонецПроцедуры

//Процедура рассчитывает конечные данные по начальным данным и оборотам
Процедура РассчитатьКонечныеДанныеПоВидуСчетаИНачальнымДанным(Знач ТекущийВидСчета, ИтогДт, ИтогКт, Знач НачДт, Знач НачКт,
	Знач ОборотДт, Знач ОборотКт) Экспорт
	
	// расчет итоговой суммы
	Если ТекущийВидСчета = ВидСчета.Активный Тогда 
			
		ИтогДт = НачДт + ОборотДт - ОборотКт;
		ИтогКт = 0;
					
	ИначеЕсли ТекущийВидСчета = ВидСчета.Пассивный Тогда
			
		ИтогДт = 0;
		ИтогКт = НачКт + ОборотКт - ОборотДт;
					
	Иначе
			
		ИтогДт = НачДт + ОборотДт;
		ИтогКт = НачКт + ОборотКт;
			
		Если ИтогДт > ИтогКт Тогда
			
			ИтогДт = ИтогДт - ИтогКт;
			ИтогКт = 0;
			
		Иначе
			
			ИтогКт = ИтогКт - ИтогДт;
			ИтогДт = 0;
			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

// Создание копии структуры или соответствия
//
// Параментры:
//   СоотвИсх - Структура/Соответствие - Исходная структура, с которой будет создаваться копия.
//
// Возвращаемое значение:
//   Структура/Соответствие - Копия исходной структуры. Тип данных повторяет тип исходной структуры.
Функция СоздатьКопиюСоответствияСтруктуры(Знач СоответствиеИсточник) Экспорт
	
	Если СоответствиеИсточник = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КопияСоответствия = Новый (ТипЗнч(СоответствиеИсточник));
		
	Для Каждого ЭлементОтбора Из СоответствиеИсточник Цикл
				
		КопияСоответствия.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
	КонецЦикла;
	
	Возврат КопияСоответствия;
	
КонецФункции

//Функция создает по структуре параметров соответсвие
Функция СоздатьПоСтруктуреСоответствие(Знач СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	ФормаОтчета
//  ПоказыватьЗаголовок - булево. Отображать пометку или нет
Процедура УправлениеПометкамиКнопокЗаголовковКоманднойПанели(ФормаОтчета, Знач ПоказыватьЗаголовок) Экспорт
	
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
    	
КонецПроцедуры

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуОграниченийПоДатамДляФормы(Знач ДатаНач, Знач ДатаКон) Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуВыводаПараметровПоДатам(Знач ДатаНач, Знач ДатаКон) Экспорт

	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда		
		ОписаниеПериода     = "Период: без ограничения.";		
	Иначе		
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда			
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");			
		Иначе
			Если ДатаНач > ДатаКон Тогда
				ОписаниеПериода = "";
			Иначе				
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

//Функция возвращает корректные или нет ограничения по датам для отчета
// в случае если ограничения не корректны - выдается предупреждение
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина) Экспорт
	
	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда 
			Предупреждение("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// процедура заполняет таблицу настроек свойств
Процедура ЗаполнитьТаблицуНастроекСвойств(ЭтотОбъект, Знач ИмяРеквизита, Структура) Экспорт
	
	Источник = Неопределено;
	Если Структура.Свойство(ИмяРеквизита, Источник) <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Приемник = ЭтотОбъект[ИмяРеквизита];
	Исключение
    	Возврат;
	КонецПопытки;
	
	Приемник.Очистить();
		
	// Загрузим совпадающие колонки.
	Для Каждого СтрокаТаблицыИсточника Из Источник Цикл
			
		СтрокаТаблицыПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника); 
			
	КонецЦикла;
		
КонецПроцедуры

// процедура обрабатывает выпод заголовка
Процедура ОбработатьВыводЗаголовка(Форма, ОтчетОбъект, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если Форма.ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ОбластьЗаголовка = СформироватьЗаголовок();
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		Форма.ЭлементыФормы.ДокументРезультат.Вывести(ОбластьЗаголовка);
		
	КонецЕсли;

    Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		Форма.ЭлементыФормы.ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокЗаголовковКоманднойПанели(Форма, ПоказыватьЗаголовок);
	
КонецПроцедуры

//процедура формирует заголовок отчета
Процедура СформироватьИВывестиЗаголовокОтчета(ОтчетОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт
	
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
КонецПроцедуры	

// Редактирование Субконто
Процедура РедактированиеСубконто(Элемент, СписокСубконто)
    	
	Форма = ПолучитьОбщуюФорму("ФормаНастройкаПоСубконто", Элемент);

	// Передача параметров в форму
	Форма.Список = СписокСубконто;
	
	Форма.РежимВыбора = Истина;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры

// обработка редактирования субконто
Процедура ОбработкаРедактированиеСубконто(Элемент, ТекущиеДанныеТаблицыРедактирования) Экспорт
	
	Если ТекущиеДанныеТаблицыРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Счет = ТекущиеДанныеТаблицыРедактирования.Счет;
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;
	
	СписокСубконто = Новый СписокЗначений;
	
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

		СписокСубконто.Добавить("Субконто" + Строка(ВидСубконто.НомерСтроки), Строка(ВидСубконто.ВидСубконто));
		
	КонецЦикла;

	// Данные этой строки должны быть отмечены
	Для Каждого Строка Из ТекущиеДанныеТаблицыРедактирования.РазворотПоСубконто Цикл
		
		ЭлементСписка = СписокСубконто.НайтиПоЗначению(Строка.Имя);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;

	РедактированиеСубконто(Элемент, СписокСубконто);
	
КонецПроцедуры

//процедура очищает данные разворота по субконто текущей строки настроек
Процедура ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(РедактируемаяСтрока)
	
	РедактируемаяСтрока.РазворотПоСубконто.Очистить();
	
	Если РедактируемаяСтрока.РазворотПоСубконто.Колонки.Количество() = 0 Тогда
		
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));

		РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
		РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);
		
	КонецЕсли;

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = "";
	
КонецПроцедуры

//процедура добавляет новое значение субконто в список выбранных
Процедура ДобавитьСубконтоВТаблицуВыбранных(ТаблицаВыбораСубконто, Знач ИмяСубконто, Знач ПредставлениеСубконто)
	
	НоваяСтрокаПоСубконто = ТаблицаВыбораСубконто.РазворотПоСубконто.Добавить();
			
	НоваяСтрокаПоСубконто.Имя = ИмяСубконто;
	НоваяСтрокаПоСубконто.Представление = ПредставлениеСубконто;
			
	ТаблицаВыбораСубконто.ПредставлениеРазворотПоСубконто = ТаблицаВыбораСубконто.ПредставлениеРазворотПоСубконто + ", " 
		+ ПредставлениеСубконто;
	
КонецПроцедуры


// Процедура обрабатывает выбор показателей, группировок или фильтров из отдельного окна.
Процедура ОбработкаВыборРазворотаПоСубконто(ВыбранноеЗначение, ТабличноеПоле, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(ТабличноеПоле.ТекущиеДанные);

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		Если Строка.Пометка Тогда
			
			ДобавитьСубконтоВТаблицуВыбранных(ТабличноеПоле.ТекущиеДанные, Строка.Значение, Строка.Представление);
							
		КонецЕсли;

	КонецЦикла;

	ТабличноеПоле.ТекущиеДанные.ПредставлениеРазворотПоСубконто  = Сред(ТабличноеПоле.ТекущиеДанные.ПредставлениеРазворотПоСубконто, 3);

КонецПроцедуры

// процедура обрабатывает окончание редактирования настроек развернутого сальдо
Процедура ПриОкончанииРедактированияПравилаРазвернутогоСальдо(Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт

	ТабличноеПоле = Элемент;

	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НРег(ТабличноеПоле.ТекущаяКолонка.Имя) = НРег("Субсчета") Тогда

		Если ТабличноеПоле.ТекущиеДанные.Субсчета Тогда
			
			ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(ТабличноеПоле.ТекущиеДанные);
									
		КонецЕсли;
		
	ИначеЕсли НРег(ТабличноеПоле.ТекущаяКолонка.Имя) = НРег("ПредставлениеРазворотПоСубконто") Тогда

		Если ТабличноеПоле.ТекущиеДанные.РазворотПоСубконто.Количество() > 0 Тогда
			
			ТабличноеПоле.ТекущиеДанные.СубСчета = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// процедура - обработчик при изменении счета в таблицах детализации или развернутого сальдо
Процедура ОбработчикПриИзмененииСчета(ТабличноеПоле, Знач ТабПолеРазвернутогоСальдо) Экспорт

	РедактируемаяСтрока = ТабличноеПоле.ТекущиеДанные; 
	
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(РедактируемаяСтрока);
	
	// Признак того, что счет найден способ развернуть счет
	НайденСпособРазворота = Ложь;

	Счет = РедактируемаяСтрока.Счет;
	Если ЗначениеЗаполнено(Счет) Тогда
		
		ВыборкаПоСчету = ПланыСчетов[Счет.Метаданные().Имя].Выбрать(Счет);
		Если ВыборкаПоСчету.Следующий() Тогда
			
			РедактируемаяСтрока.Субсчета = Истина;
            НайденСпособРазворота = Истина;
			
		КонецЕсли;

		// Развернутое сальдо только по субсчетам
		Если ТабПолеРазвернутогоСальдо 
			И НайденСпособРазворота Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если Счет.ВидыСубконто.Количество() > 0 Тогда

			// Развернутое сальдо - отключим субсчета
			Если ТабПолеРазвернутогоСальдо Тогда
				РедактируемаяСтрока.Субсчета = Ложь;
			КонецЕсли;

			Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

				ДобавитьСубконтоВТаблицуВыбранных(РедактируемаяСтрока, "Субконто" + Строка(ВидСубконто.НомерСтроки), Строка(ВидСубконто.ВидСубконто));
				
			КонецЦикла;

			РедактируемаяСтрока.ПредставлениеРазворотПоСубконто  = Сред(РедактируемаяСтрока.ПредставлениеРазворотПоСубконто, 3);

			НайденСпособРазворота = Истина;

		КонецЕсли;

		// Если у счета нет ни субсчетов, ни субконто, не дадим его выбрать.
		Если НЕ НайденСпособРазворота Тогда
			
			Если ТабПолеРазвернутогоСальдо Тогда
				ВидНастройки = "развернутого сальдо ";
			Иначе
				ВидНастройки = "итогов по субсчетам и субконто ";
			КонецЕсли;
			Предупреждение("Счет """ + Счет.Код + """ не имеет ни субсчетов, ни субконто." + Символы.ПС + "Настройка " + ВидНастройки + "не имеет смысла!");
			РедактируемаяСтрока.Счет = Неопределено;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// процедура обработки очистки разворота по субконто
Процедура ОбработкаОчисткиРазворотПоСубконтоТабПоля(ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчиститьДанныеНастроекПоСубконтоДляТекущейСтрокиНастроек(ТабличноеПоле.ТекущиеДанные);
	
КонецПроцедуры

// процедура устанавливает связывание данных и визуальных объектов отображения
// настроек Бух отчетов
Процедура УстановитьСвязываниеДанныхФормыНастроек(ПравилаВыводаИтогов, ПравилаРазвернутогоСальдо) Экспорт
	
	// Связывание с данными колонок "Счет": тип определяется типом колонки у таблицы
	Если ПравилаВыводаИтогов <> Неопределено Тогда
		ПравилаВыводаИтогов.Колонки.Счет.Данные = "Счет";
		ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
		ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
		ПравилаВыводаИтогов.Колонки.ПредставлениеРазворотПоСубконто.ЭлементУправления.КнопкаОчистки = Истина;
	КонецЕсли;
	
	Если ПравилаРазвернутогоСальдо <> Неопределено Тогда
		ПравилаРазвернутогоСальдо.Колонки.Счет.Данные = "Счет";
		ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
		ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
		ПравилаРазвернутогоСальдо.Колонки.ПредставлениеРазворотПоСубконто.ЭлементУправления.КнопкаОчистки = Истина;
	КонецЕсли;
		
КонецПроцедуры

// процедура содает колонки у таблиц правила вывода итогов и правила развернутого сальдо
Процедура СоздатьКолонкиУПравилВыводаИтоговИПравилаРазвернутогоСальдо(ПравилаВыводаИтогов, ПравилаРазвернутогоСальдо, 
	Знач ИмяРегистраБухгалтерии) Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));

	МассивБулево        = Новый Массив;
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
    
	МассивТаблицаЗначений        = Новый Массив;
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");

	МассивСчет = Новый Массив;
	МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));
	ОписаниеТиповСчет  = Новый ОписаниеТипов(МассивСчет);

	// Создание структуры реквизитов - таблиц
	Если ПравилаВыводаИтогов <> Неопределено Тогда

		ПравилаВыводаИтогов.Колонки.Очистить();
		ПравилаВыводаИтогов.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
		ПравилаВыводаИтогов.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
		ПравилаВыводаИтогов.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
		ПравилаВыводаИтогов.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);
		
	КонецЕсли;

	Если ПравилаРазвернутогоСальдо <> Неопределено Тогда 
		
		ПравилаРазвернутогоСальдо.Колонки.Очистить();
		ПравилаРазвернутогоСальдо.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
		ПравилаРазвернутогоСальдо.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);
		
	КонецЕсли;
    	
КонецПроцедуры

//Функция возвращает есть ли для данного счета субсчета или нет
Функция ОпределитьНаличиеСубсчетов(Знач ИмяПланаСчетов, Знач Счет) Экспорт

	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Родители.Ссылка
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов + " КАК Родители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + " КАК Дети
	|		ПО Родители.Ссылка = Дети.Родитель
	|ГДЕ
	|	Родители.Ссылка = &Счет";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Результат = Запрос.Выполнить();
	
	ЕстьСубсчета = Не Результат.Пустой();
	
	Возврат ЕстьСубсчета;

КонецФункции

//функция возвращает соотвествие подчиненных счетов
Функция ВернутьСоответвиеПодчиненныхСчетов(Знач ИмяПланаСчетов = "", Знач Счет, Знач ДобавлятьСамСчетВСоответсвие = Ложь) Экспорт
	
	СоответсвиеСчетов = Новый Соответствие;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ	ПланСчетов." + ИмяПланаСчетов + " КАК ПланСчетовРегистра
		|ГДЕ	ПланСчетовРегистра.Ссылка В Иерархии(&Ссылка)";
		
	Запрос.УстановитьПараметр("Ссылка", Счет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (НЕ ДобавлятьСамСчетВСоответсвие)
			И (Выборка.Ссылка = Счет) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СоответсвиеСчетов.Вставить(Выборка.Ссылка, Выборка.Ссылка);
		
	КонецЦикла;

	Возврат СоответсвиеСчетов;
	
КонецФункции

//Функция возвращает соответствие счетов предков
Функция ВернутьСоответвиеСчетовПредков(Знач ИмяПланаСчетов = "", Знач Счет) Экспорт
	
	ЗапросСчета = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов."+ИмяПланаСчетов+" КАК ПланСчетовРегистра
		|
		|ГДЕ
		|	ПланСчетовРегистра.Ссылка = &Ссылка
		|
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ");
	
	ЗапросСчета.УстановитьПараметр("Ссылка", Счет);
	
	ВыборкаСчета = ЗапросСчета.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СоответсвиеСчетов = Новый Соответствие();
	Пока ВыборкаСчета.Следующий() Цикл
		СоответсвиеСчетов.Вставить(ВыборкаСчета.Ссылка, ВыборкаСчета.Ссылка);
	КонецЦикла;

	Возврат СоответсвиеСчетов;
	
КонецФункции

// Функция проверяет выборку на наличие ненулевых оборотов
Функция ЭтоНулевойОборот(Выборка, ПоКоличеству) Экспорт
		
	СуммаНоль = Выборка.СуммаОборотДт = 0 И Выборка.СуммаОборотКт = 0;
	КоличествоНоль = Не ПоКоличеству ИЛИ Выборка.КоличествоОборотДт = 0 И Выборка.КоличествоОборотКт = 0;
	Возврат СуммаНоль И КоличествоНоль;
	
КонецФункции

//Функция для счета возвращает количество субконто для него
Функция ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Знач Счет, СоответсвиеСчетов) Экспорт
	
	СоответсвиеСчетов = Новый Соответствие;
	
	КоличествоСубконтоСчета = СоответсвиеСчетов[Счет];
	Если КоличествоСубконтоСчета = -1
		ИЛИ КоличествоСубконтоСчета = Неопределено Тогда
		
		КоличествоСубконтоСчета = Счет.ВидыСубконто.Количество();
		СоответсвиеСчетов[Счет] = КоличествоСубконтоСчета;
		
	КонецЕсли;

	Возврат КоличествоСубконтоСчета;
	
КонецФункции

// процедура выводит представления субконто для текущей строки отчета в макет
Процедура ВывестиПредставленияСубконтоТекущейСтрокиВМакет(Знач ПрефиксНаименованияКолонки, Проводки, Знач КоличествоСубконтоСчета, 
	ОбластьМакет, ДокументРезультат, СтруктураРасшифровки) Экспорт
	
	Для Индекс = 0 По КоличествоСубконтоСчета - 1 Цикл

		ОбластьМакет.Параметры.Содержание = ?(НЕ ЗначениеЗаполнено(Проводки[ПрефиксНаименованияКолонки + Строка(Индекс + 1)])
			, "<...>"
			, Проводки[ПрефиксНаименованияКолонки + Строка(Индекс + 1) + "Представление"]);

		ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
		ДокументРезультат.Вывести(ОбластьМакет);

	КонецЦикла;
	
КонецПроцедуры

//Функция определяещая наличие дублирующегося параметра детализации
Функция ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета) Экспорт
	
	СоответствиеТекущихИзмерений = Новый Соответствие;
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		ПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным;
		Если СоответствиеТекущихИзмерений[ПутьКДанным] <> Неопределено Тогда
			
			Предупреждение("Повторяющееся поле детализации """ + ПостроительОтчета.ИзмеренияСтроки[Сч].Представление + """!");
			Возврат Истина;
			
		КонецЕсли;
		СоответствиеТекущихИзмерений.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным, 0);
				
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Процедура формирует первоначальные строки отбора построителя по субконто
Процедура СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Знач Счет) Экспорт
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	
	Сч = 0;
	Для Каждого СтрокаВидаСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч + 1;
		ИмяСубконто = "Субконто" + Сч;
		
		ЭлементОтбора = ПостроительОтчета.Отбор.Найти(ИмяСубконто);
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ИмяСубконто);
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
					
		ТипИзмерения = ПолучитьТипИзмеренияПоУмолчанию(СтрокаВидаСубконто.ВидСубконто.ТипЗначения);
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ИмяСубконто, , ТипИзмерения);

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипИзмеренияПоУмолчанию(ТипЗначения) Экспорт
	
	Для каждого Тип Из ТипЗначения.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если ОбъектМетаданных.Иерархический Тогда
				Возврат ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию();;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	
КонецФункции

Функция ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию()
	
	ТипДетализацииПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
	
	Если ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Иерархия;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
	Иначе
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьТипИзмеренияПоУмолчанию(ТекущиеДанные, ПостроительОтчета) Экспорт
	
	ПутьКДанным = ТекущиеДанные.ПутьКДанным;
	
	Если Найти(ПутьКДанным, "КорСубконто") > 0 Тогда
		Префикс = "КорСубконто";
	ИначеЕсли Найти(ПутьКДанным, "Субконто") > 0 Тогда
		Префикс = "Субконто";
	Иначе
		Возврат;
	КонецЕсли;
	
	ИндексВидСубконто = Число(Сред(ПутьКДанным, СтрДлина(Префикс) + 1, 1)) - 1;
	Путь = СтрЗаменить(ПутьКДанным, ".", ".Поля."); 
	ТипЗначения = Неопределено;
	Выполнить("ТипЗначения = ПостроительОтчета.ДоступныеПоля." + Путь + ".ТипЗначения");
	ТекущиеДанные.ТипИзмерения = ПолучитьТипИзмеренияПоУмолчанию(ТипЗначения);
	
КонецПроцедуры

// процедура устанавливает отбор посторителю отчетов по параметрам
Процедура ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, Знач СтрокиОтбора) Экспорт
	
	Если СтрокиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для Каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла;
			
			Попытка
			
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				КонецЕсли;
				
				Если ТипЗнч(Строка.Значение) = Тип("СписокЗначений")
					ИЛИ ТипЗнч(Строка.Значение) = Тип("Массив") ТОгда
					
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
					ЭлементОтбора.Значение = Строка.Значение;	
					ЭлементОтбора.Использование = Истина;
					
				ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
					
					ЭлементОтбора.ВидСравнения  = Строка.Значение.ВидСравнения;
					ЭлементОтбора.Значение      = Строка.Значение.Значение;
					ЭлементОтбора.Использование = Истина;	
					
				Иначе
					ЭлементОтбора.Установить(Строка.Значение);
					
					Если Метаданные.Справочники.Содержит(Строка.Значение.Метаданные())
					   И ЗначениеЗаполнено(Строка.Значение) Тогда
						ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
					Иначе
						ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
					КонецЕсли;
				   
				КонецЕсли;	
				
			Исключение
				// не смогли ограничение установить
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		// переносим имя отбора из пути к данным
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			СтрокаОтбора.Имя = СтрокаОтбора.ПутьКДанным; 
			
		КонецЦикла;
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

//Функция формирует описание ограничений по измерениям построителя
Функция СформироватьСтрокуОписанияИтоговПоИзмерениямПостроителя(ПостроительОтчета) Экспорт
	
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстПроИтоги = "субконто: ";
		
	СтрокаИзмерений = "";
	Для Каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		СтрокаИзмерений = СтрокаИзмерений + ", " + Измерение.Представление;
		
	КонецЦикла;
	
	ТекстПроИтоги = ТекстПроИтоги + Сред(СтрокаИзмерений, 3);
		
	Возврат ТекстПроИтоги;
	
КонецФункции

// функция приводит значение из выборки к числу
Функция ПривестиКЧислу(Значение) Экспорт
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

//Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии
Процедура ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) и не ТипЗнч(ОграничениеПоРеквизиту) = Тип("СправочникСсылка.СценарииПланирования") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " = &" + ИмяОграниченияПоРеквизиту + " ";
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

//Функция Объединяет ограничения
Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И") Экспорт
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции



//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Хозрасчетный";

#КонецЕсли