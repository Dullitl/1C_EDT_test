#Если Клиент Тогда

Перем ИмяРегистраБухгалтерии Экспорт;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Оборотно-сальдовая ведомость по счету " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет");	
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субконто: " + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

Функция СформироватьЗапрос(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ПоСубсчетам Тогда
		Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	Иначе
	    Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(&Счет) КАК СчетПредставление";
	КонецЕсли;
	
	Если абс_ВключаяПодчиненныеОрганизации Тогда
		Текст = Текст +  ",
		|	ОстаткиИОбороты.Организация КАК Организация,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Организация) КАК ОрганизацияПредставление";
	КонецЕсли;
	
		
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
		
	КонецЕсли;
	
	Текст = Текст + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Истина, 
		Истина, Истина, РазвернутоеСальдо);
		
    ТекстПоля = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
	
		ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
	
	КонецЦикла;
	
	ОграниченияПоПостроителюОтчета = ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
			
	СтрокаОграниченийПоРеквизитам = "";
	ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Текст = Текст + 
			ТекстПоля + " 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета + ") КАК ОстаткиИОбороты
	|";
	
	ТекстИтогов = ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Ложь,,, РазвернутоеСальдо);
	
	Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2);
				
	Текст = Текст + "
	|	ПО ОБЩИЕ";
	
	Если абс_ВключаяПодчиненныеОрганизации Тогда
		Текст =  Текст + ",
		|	Организация Иерархия как Организация";
	КонецЕсли;
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	
	
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	Валюта ";
		
	КонецЕсли;
	
	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = Текст;
	
	// АБС ВСТАВКА 11170
	Если абс_ВключаяПодчиненныеОрганизации Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &Организация", " В ИЕРАРХИИ (&Организация)");
		
	КонецЕсли;
	// АБС ВСТАВКА 11170 КОНЕЦ	
	
	Возврат Запрос;
	
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;

	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,,Истина);

	СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	НаличиеДублей = ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппировок = СформироватьМассивГруппировок();
    
	МассивПоказателей = СформироватьМассивПоказателей();
		
	// Формат показателей
	СтруктураФорматовПоказателей = СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ИмяРегистраБухгалтерии);
		
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета);

	ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "РазвернутоеСальдо", "");
	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Числа");
	ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Счет");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Счет");
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
	ОбластьСтрокаОрганизация = Макет.ПолучитьОбласть("СтрокаОрганизация|Счет");
	ОбластьСтрокаОрганизацияЧисла = Макет.ПолучитьОбласть("СтрокаОрганизация|Числа");
	ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
	ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");

	СоответствиеСчетовПредков = ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
	
	СтруктураПараметровОграничений = СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, ПоВалютам);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет",ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ШрифтГрупп", ШрифтГрупп);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла);
	СтруктураПараметров.Вставить("ФорматПоказателей", СтруктураФорматовПоказателей);
	СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	СтруктураПараметров.Вставить("СтруктураОграничений", СтруктураПараметровОграничений);
	СтруктураПараметров.Вставить("ОбластьСтрокаОрганизация", ОбластьСтрокаОрганизация);
	СтруктураПараметров.Вставить("ОбластьСтрокаОрганизацияЧисла", ОбластьСтрокаОрганизацияЧисла);
	
	//Формирование запроса
	Запрос = СформироватьЗапрос(СтруктураПараметров);
	РезультатЗапроса = Запрос.Выполнить();

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
							0, СтруктураПараметров);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	ВыводимаяОбласть = ОбластьИтогиСчет;
	ДокументРезультат.Вывести(ВыводимаяОбласть);
	
	ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка, ИмяРегистраБухгалтерии, МассивПоказателей, СтруктураФорматовПоказателей,
		Счет, ОбластьИтогиСтрокаЧисла, ОбластьИтогиЧислаМакет, ОбластьИтогиСтрокаСчет, ДокументРезультат, РазвернутоеСальдо);

	ДокументРезультат.Вывести(ИтогиПодвал);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
    ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры // СформироватьОтчет()

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;
	
	Если абс_ВключаяПодчиненныеОрганизации Тогда
		МассивГруппировок.Добавить("Организация");
	КонецЕсли;
	
	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", Ложь);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивТекущихПоказателей = СформироватьМассивПоказателей();
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Истина, 
		Истина, Истина, РазвернутоеСальдо);

			
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", " + " ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто"+Сч;
		ТекстПоля = ТекстПоля + ", " + " ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Субконто" + Сч + ") КАК Субконто"+Сч+"Представление";
	
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
		ТекстПорядок = ТекстПорядок + ", Субконто"+Сч+".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
		
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	Текст = Текст +" 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО
		|" + Сред(ТекстПорядок, 2) + "}";
		
	КонецЕсли;
	
	СтрокаИтогов = ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Ложь,,, РазвернутоеСальдо);
	
	Текст = Текст + "
	|ИТОГИ " + Сред(СтрокаИтогов, 2); 
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
		
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
		
КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ЗаполнитьНачальныеНастройки();
	
	СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
		
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = СоздатьПоСтруктуреСоответствие(СтруктураПараметров);

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
		ПоСубсчетам  = Параметры["ПоСубсчетам"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);
			
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//Общий модуль
///////////////////////////////////////////////////////////////////////////////

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуВыводаПараметровПоДатам(Знач ДатаНач, Знач ДатаКон) Экспорт

	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда		
		ОписаниеПериода     = "Период: без ограничения.";		
	Иначе		
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда			
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");			
		Иначе
			Если ДатаНач > ДатаКон Тогда
				ОписаниеПериода = "";
			Иначе				
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

//Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии
Процедура ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) и не ТипЗнч(ОграничениеПоРеквизиту) = Тип("СправочникСсылка.СценарииПланирования") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " = &" + ИмяОграниченияПоРеквизиту + " ";
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

//Функция формирует строку ограничений для запроса по ограничениям построителя отчетов
Функция ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос) Экспорт
	
	ТекстФильтры = "";
	
	Индекс = 0;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Индекс = Индекс + 1;
		Если Не СтрокаОтбора.Использование 
			ИЛИ ПустаяСтрока(СтрокаОтбора.ПутьКДанным) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, СтрокаОтбора, Строка(Индекс));
						
		ТекстСтрокиПоля = "";
		Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии
			И СтрокаОтбора.Значение <> Неопределено Тогда
			
			МетаданныеОграничения = СтрокаОтбора.Значение.Метаданные();	
			
			ТипВыражения = "";
			
			Если Метаданные.Справочники.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Справочник."; 
				
			ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Документ."; 
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "ПланВидовХарактеристик.";	
				
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Перечисление.";	
				
			КонецЕсли;
			
			Если ТипВыражения <> "" Тогда
				
				ТекстСтрокиПоля = "Выразить(" + СтрокаОтбора.ПутьКДанным + " КАК " + ТипВыражения + МетаданныеОграничения.Имя + ")"
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекстСтрокиПоля = "" Тогда
			
			ТекстСтрокиПоля = СтрокаОтбора.ПутьКДанным;
			
		КонецЕсли;
			
		ТекстФильтры = ТекстФильтры + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаОтбора.ВидСравнения, "&Значение" + Индекс, 
			ТекстСтрокиПоля, "&ЗначениеС" + Индекс, "&ЗначениеПо" + Индекс, СтрокаОтбора.Значение, 
			СтрокаОтбора.ЗначениеС, СтрокаОтбора.ЗначениеПо);
				
	КонецЦикла;
	
	Возврат Сред(ТекстФильтры, 3);
	
КонецФункции

//Функция возвращает часть запроса для иерархического вывода результатов отчета
Функция ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Знач ТипИзмерения) Экспорт
	
	Если ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия Тогда
		Возврат " ИЕРАРХИЯ";
	ИначеЕсли ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда	
		Возврат " ТОЛЬКО ИЕРАРХИЯ";
	Иначе	
		Возврат "";
	КонецЕсли;
	
КонецФункции

//Функция возвращает корректные или нет ограничения по датам для отчета
// в случае если ограничения не корректны - выдается предупреждение
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина) Экспорт
	
	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда 
			Предупреждение("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//Функция возвращает соответствие счетов предков
Функция ВернутьСоответвиеСчетовПредков(Знач ИмяПланаСчетов = "", Знач Счет) Экспорт
	
	ЗапросСчета = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов."+ИмяПланаСчетов+" КАК ПланСчетовРегистра
		|
		|ГДЕ
		|	ПланСчетовРегистра.Ссылка = &Ссылка
		|
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ");
	
	ЗапросСчета.УстановитьПараметр("Ссылка", Счет);
	
	ВыборкаСчета = ЗапросСчета.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СоответсвиеСчетов = Новый Соответствие();
	Пока ВыборкаСчета.Следующий() Цикл
		СоответсвиеСчетов.Вставить(ВыборкаСчета.Ссылка, ВыборкаСчета.Ссылка);
	КонецЦикла;

	Возврат СоответсвиеСчетов;
	
КонецФункции

//процедура формирует заголовок отчета
Процедура СформироватьИВывестиЗаголовокОтчета(ОтчетОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт
	
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
КонецПроцедуры	

//Функция дополняет текст часть сформированного запроса по определенным полям
Функция ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивПоказателей, Знач ПоляДляВыборки = Истина, 
		Знач ИспользоватьАлиасыПолей = Ложь, Знач ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя = Ложь, ПолучатьРазвернутыйОстаток = Ложь) Экспорт
		
	СтрокаЗапроса = "";	
	РазвернутыйОстаток = ?(ПолучатьРазвернутыйОстаток, "Развернутый", "");
			
	Если ПоляДляВыборки Тогда
		
		Если ИспользоватьАлиасыПолей Тогда
			// выборка с алиасами
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				
				СтрокаПрефикса = ?(ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя, ИмяПоказателя, ""); 
							
				СтрокаЗапроса =  СтрокаЗапроса + ",
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокДт КАК " + СтрокаПрефикса + "НачальныйОстатокДт,
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокКт КАК " + СтрокаПрефикса + "НачальныйОстатокКт,
				|	" + ИмяПоказателя + "ОборотДт КАК "                                     + СтрокаПрефикса + "ОборотДт,
				|	" + ИмяПоказателя + "ОборотКт КАК "                                     + СтрокаПрефикса + "ОборотКт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокДт КАК "  + СтрокаПрефикса + "КонечныйОстатокДт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокКт КАК "  + СтрокаПрефикса + "КонечныйОстатокКт";
					
			КонецЦикла;
			
		Иначе	
			// выборка без алиасов
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				
				СтрокаЗапроса =  СтрокаЗапроса + ",
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
				|	" + ИмяПоказателя + "ОборотДт,
				|	" + ИмяПоказателя + "ОборотКт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокКт";
								
			КонецЦикла;
            	

		КонецЕсли;	
		
	Иначе
		// выборка для суммирования
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
						
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	СУММА(" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокДт),
			|	СУММА(" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокКт),
			|	СУММА(" + ИмяПоказателя + "ОборотДт),
			|	СУММА(" + ИмяПоказателя + "ОборотКт),
			|	СУММА(" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокДт),
			|	СУММА(" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокКт)";

					
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаЗапроса;
	
КонецФункции

//Функция определяещая наличие дублирующегося параметра детализации
Функция ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета) Экспорт
	
	СоответствиеТекущихИзмерений = Новый Соответствие;
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		ПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным;
		Если СоответствиеТекущихИзмерений[ПутьКДанным] <> Неопределено Тогда
			
			Предупреждение("Повторяющееся поле детализации """ + ПостроительОтчета.ИзмеренияСтроки[Сч].Представление + """!");
			Возврат Истина;
			
		КонецЕсли;
		СоответствиеТекущихИзмерений.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным, 0);
				
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//функция возвращает структуру форматов показателей по массиву показателей
Функция СформироватьСтруктуруФорматовПоказателей(Знач МассивПоказателей, Знач ИмяРегистраБухгалтерии) Экспорт
	
	ФорматПоказателей = Новый Структура();
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		
		Ресурс = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы.Найти(ИмяПоказателя);
		Если Ресурс <> Неопределено Тогда
			
			ФорматПоказателей.Вставить(ИмяПоказателя,"ЧЦ = " + Ресурс.Тип.КвалификаторыЧисла.Разрядность
			+ " ; ЧДЦ = " + Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			
		Иначе // по умолчанию - сумма
			ФорматПоказателей.Вставить(ИмяПоказателя ,"ЧЦ = 15 ; ЧДЦ = 2");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФорматПоказателей;
	
КонецФункции

//Функция формирует структуру параметров ограничений для оборотно-сальдовой ведомости
Функция СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ОбъектОтчета,
		Знач ПоВалютам, Знач ВидУчета = Неопределено, Знач Валюта = Неопределено, Знач ОтражениеВНУ = Неопределено,
		Знач Сценарий = Неопределено, Знач ВВалютеСценария = Неопределено) Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ДатаНач", ДатаНач);
	Структура.Вставить("ДатаКон", ДатаКон);
	Попытка
		Структура.Вставить("Организация", Организация);
	Исключение
		Структура.Вставить("Организация", Неопределено);
	КонецПопытки;
	
	Структура.Вставить("ПоВалютам", ПоВалютам);
	
	Структура.Вставить("ВидУчета", ВидУчета);	
	
	Структура.Вставить("Валюта",  Валюта);
	Структура.Вставить("ОтражениеВНУ",  ОтражениеВНУ);
	
	Структура.Вставить("Сценарий",  Сценарий);
	
	Структура.Вставить("ВВалютеСценария",  ВВалютеСценария);
	
	Структура.Вставить("ИмяРегистраБухгалтерии", ИмяРегистраБухгалтерии);
	
	Возврат Структура; 
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//ОБОРОТЫ ПО СЧЕТУ
///////////////////////////////////////////////////////////////////////////////

// процедура выводит итоги отчета оборотно сальдовая ведомость по счету
Процедура ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Знач Выборка, Знач ИмяРегистраБухгалтерии, Знач МассивПоказателей, Знач ФорматПоказателей,
	Знач Счет, Знач ОбластьИтогиСтрокаЧисла, Знач ОбластьИтогиЧислаМакет, Знач ОбластьИтогиСтрокаСчет, Знач ДокументРезультат, ВыводитьРазвернутоеСальдо = Ложь) Экспорт
	
	ЭтоПерваяСтрока = Ложь;

	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл

		Если НЕ Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы[ИмяПоказателя].Балансовый Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоПерваяСтрока = Истина Тогда
			Область = ОбластьИтогиСтрокаЧисла;
		Иначе
			Область = ОбластьИтогиЧислаМакет;
		КонецЕсли;

		ФорматПоказателя = "";
		ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
		НачальныйОстатокКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
		ОборотДт           = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт           = Выборка[ИмяПоказателя + "ОборотКт"];
		КонечныйОстатокДт  = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
		КонечныйОстатокКт  = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
		
		Если Счет.Вид = ВидСчета.Активный Тогда 
			
			Если НачальныйОстатокДт = 0 Тогда
				НачальныйОстатокДт = -НачальныйОстатокКт;
				НачальныйОстатокКт = 0;
			КонецЕсли;
			
			Если КонечныйОстатокДт = 0 Тогда
				КонечныйОстатокДт = -КонечныйОстатокКт;
				КонечныйОстатокКт = 0;
			КонецЕсли;
			
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			
			Если НачальныйОстатокКт = 0 Тогда
				НачальныйОстатокКт = -НачальныйОстатокДт;
				НачальныйОстатокДт = 0;
			КонецЕсли;
			
			Если КонечныйОстатокКт = 0 Тогда
				КонечныйОстатокКт = -КонечныйОстатокДт;
				КонечныйОстатокДт = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыводитьРазвернутоеСальдо И НачальныйОстатокДт <> Неопределено Тогда
			
			НачальныйОстаток = НачальныйОстатокДт - НачальныйОстатокКт;
			Если НачальныйОстаток > 0 Тогда
				НачальныйСвернутыйОстатокДт = НачальныйОстаток;
				НачальныйСвернутыйОстатокКт = 0;
			Иначе
				НачальныйСвернутыйОстатокДт = 0;
				НачальныйСвернутыйОстатокКт = - НачальныйОстаток;
			КонецЕсли;
			
			КонечныйОстаток = КонечныйОстатокДт - КонечныйОстатокКт;
			Если КонечныйОстаток > 0 Тогда
				КонечныйСвернутыйОстатокДт = КонечныйОстаток;
				КонечныйСвернутыйОстатокКт = 0;
			Иначе
				КонечныйСвернутыйОстатокДт = 0;
				КонечныйСвернутыйОстатокКт = - КонечныйОстаток;
			КонецЕсли;
			
			Область.Параметры.НачальныйРазвернутыйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйРазвернутыйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокДт = Формат(НачальныйСвернутыйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокКт = Формат(НачальныйСвернутыйОстатокКт, ФорматПоказателя);
			Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
			Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйСвернутыйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйСвернутыйОстатокКт, ФорматПоказателя);
			
		Иначе
			
			Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
			Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
			Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);
			
		КонецЕсли;

		Если ЭтоПерваяСтрока = Истина Тогда
			ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;
	
КонецПроцедуры

// процедура выводит текущие показатели оборотно сальдовой ведомости по счету
Процедура ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, Знач Счет, 
	Знач СтруктураЗамещающихДанных = Неопределено) Экспорт

	ВыведеноПоказателей = 0; // количество выведенных показателей
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл

		// Сумму в валюте выводим только по группировке Валюта
		Если ИмяПоказателя = "ВалютнаяСумма" Тогда
			Если Выборка.Группировка() <> "Валюта" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ВыведеноПоказателей > 0 Тогда
			Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		Иначе
			Область = СтруктураПараметров.ОбластьСтрокаЧисла;
		КонецЕсли;
		
		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
		
		Если СтруктураЗамещающихДанных = Неопределено Тогда
			
			СальдоНачДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
			СальдоНачКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
			СальдоКонДт = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
			СальдоКонКт = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
			ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
			ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];
			
		Иначе
			
			СальдоНачДт = СтруктураЗамещающихДанных[ИмяПоказателя + "НачальныйОстатокДт"];
			СальдоНачКт = СтруктураЗамещающихДанных[ИмяПоказателя + "НачальныйОстатокКт"];
			СальдоКонДт = СтруктураЗамещающихДанных[ИмяПоказателя + "КонечныйОстатокДт"];
			СальдоКонКт = СтруктураЗамещающихДанных[ИмяПоказателя + "КонечныйОстатокКт"];
			ОборотДт = СтруктураЗамещающихДанных[ИмяПоказателя + "ОборотДт"];
			ОборотКт = СтруктураЗамещающихДанных[ИмяПоказателя + "ОборотКт"];			
			
	    КонецЕсли;
		
		// Сальдо по счетам нужно привести к традиционному виду, в зависимости от вида выбранного счета:
		// если группировки Счет еще не было, сальдо в выборке рассчитаны как для активно-пассивного счета.
		Если Счет.Вид = ВидСчета.Активный Тогда
			
			СальдоНачДт = СальдоНачДт - СальдоНачКт;
			СальдоНачКт = 0;
			
			СальдоКонДт = СальдоКонДт - СальдоКонКт;
			СальдоКонКт = 0;
			
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			
			СальдоНачКт = СальдоНачКт - СальдоНачДт;
			СальдоНачДт = 0;
			
			СальдоКонКт = СальдоКонКт - СальдоКонДт;
			СальдоКонДт = 0;
			
		КонецЕсли;
		
		Область.Параметры.НачальныйОстатокДт = Формат(СальдоНачДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(СальдоНачКт, ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт,    ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт,    ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(СальдоКонДт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(СальдоКонКт, ФорматПоказателя);

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;

		Если ВыведеноПоказателей > 0 Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валютная сумма";
			Иначе
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "";
			КонецЕсли;

			ВыведеннаяОбласть = ДокументРезультат.Вывести(ВыводимаяОбласть);

			ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии;
						
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ВыведеноПоказателей = ВыведеноПоказателей+1;
				
	КонецЦикла;

КонецПроцедуры

//процедура выводит вложенную группировку оборотно сальдовой ведомости оп счету
Процедура ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, Знач ИндексТекущейГруппировки, 
	СтруктураПараметров)
	
	Если ИндексТекущейГруппировки + 1 >= СтруктураПараметров.МассивГруппировок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировок[ИндексТекущейГруппировки + 1]), 
		ИндексТекущейГруппировки + 1, СтруктураПараметров);
		
КонецПроцедуры

// Выводит группировку при развороте счета по субсчетам и/или субконто для оборотно сальдовой ведомости по счету
Процедура ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, Знач ИндексТекущейГруппировки, СтруктураПараметров) Экспорт

	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки = Выборка.Группировка();
		
		Если ИмяГруппировки = "Счет" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
		ИначеЕсли ИмяГруппировки = "Организация" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаОрганизация;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
		ИначеЕсли Лев(ИмяГруппировки, 8) = "Субконто" Тогда
			
			Если Выборка[ИмяГруппировки] = Null Тогда
				Продолжить;
			КонецЕсли;
									
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки + "Представление"];
			
			ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров)
			
		Иначе
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки];
			
		КонецЕсли;
		
		// При выводе субсчетов не делаем отступы
		Отступ = ОбщегоНазначения.ВернутьИндексВМассиве(СтруктураПараметров.МассивГруппировок, ИмяГруппировки);
						
		// Не выводим счета более высокого уровня
		Если ИмяГруппировки = "Счет" 
			И СтруктураПараметров.СоответствиеСчетовПредков[Выборка.Счет] <> Неопределено Тогда
				
			ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, ИндексТекущейГруппировки, СтруктураПараметров);
			Продолжить;
			
		КонецЕсли;
		
		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		
		ВыводимаяОбласть.Область("R1C2").Отступ = Отступ;
		
		ДокументРезультат.Вывести(ВыводимаяОбласть);
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии 
		   И ИмяГруппировки <> "Счет" Тогда
			
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			
		КонецЕсли;
		
		ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, Счет);
		
		// Если по валютам,
		Если СтруктураПараметров.СтруктураОграничений.ПоВалютам Тогда
			
			ВыборкаПоВалютам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			Пока ВыборкаПоВалютам.Следующий() Цикл
				
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
				
				ВыводимаяОбласть.Параметры.Заполнить(Выборка);
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валюта " + ВыборкаПоВалютам.ВалютаПредставление;
				
				ВыводимаяОбласть.Область("R1C2").Отступ = Отступ + 1;
				
				// Заполнение параметров расшифровки
				ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров);
				
				ДокументРезультат.Вывести(ВыводимаяОбласть);
				
				ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(ВыборкаПоВалютам, СтруктураПараметров, Счет);
				
			КонецЦикла;
			
		КонецЕсли;

        // Если есть следующая группировка, то выбираем ее
		ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, ИндексТекущейГруппировки, СтруктураПараметров);
			
	КонецЦикла;

КонецПроцедуры

//Функция Определяет вид отбора по типу значения объекта
Функция ПолучитьВидОтбораПоТипуЗначения(ЗначениеОтбора)
	
	ВидСравненияОтчета = ВидСравнения.Равно;
	
	Если (ЗначениеОтбора = NULL)	
		ИЛИ НЕ ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		Возврат ВидСравненияОтчета;
		
	КонецЕсли;
	
	// нужно определить это ссылочный тип или нет
	Попытка
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора))
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора)) Тогда
			Если ЗначениеОтбора.Метаданные().Иерархический Тогда
				ВидСравненияОтчета = ВидСравнения.ВИерархии;
			Иначе
				ВидСравненияОтчета = ВидСравнения.Равно;
			КонецЕсли;
		КонецЕсли; 
		
	Исключение
	КонецПопытки;
			
	Возврат ВидСравненияОтчета;
	
КонецФункции

//Функция создает структуру дополнительных ограничений для расшифровки отчета
Функция СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ОтчетОбъект, Выборка, МассивГруппировок, 
	Знач ВыводитьВсеГруппировки = Ложь) Экспорт
	
	ДополнительныеОтборы = СоздатьТаблицуДляХраненияОтбора(Истина);
	
	ИмяГруппировки = Выборка.Группировка();
	Если ВыводитьВсеГруппировки Тогда
		НомерГруппировкиВМассиве = МассивГруппировок.Количество() - 1;
	Иначе	
		НомерГруппировкиВМассиве = ОбщегоНазначения.ВернутьИндексВМассиве(МассивГруппировок, ИмяГруппировки);
	КонецЕсли;
	
	Для Сч = 0 По НомерГруппировкиВМассиве Цикл 
		
		ТекущееИмяГруппировки = Врег(МассивГруппировок[Сч]);
		
		Если ТекущееИмяГруппировки = "СЧЕТ"
			ИЛИ ТекущееИмяГруппировки = "ОБЩИЕ" 
			или ТекущееИмяГруппировки = "ОРГАНИЗАЦИЯ" Тогда         
			
			Продолжить;
			
		КонецЕсли;
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(ТекущееИмяГруппировки);
		
		СтрокаОтбора = ДополнительныеОтборы.ДОбавить();
		СтрокаОтбора.Использование = Истина;
		СтрокаОтбора.Имя = Измерение.ПутьКДанным;
		
		Если Измерение.ТипИзмерения = ТипИзмеренияПостроителяОтчета.Элементы Тогда
			ВидСравненияДанных = ВидСравнения.Равно;
		Иначе			
			// надо тип отбора определить и по нему можно сказать вид сравнения
			ВидСравненияДанных = ПолучитьВидОтбораПоТипуЗначения(Выборка[ТекущееИмяГруппировки]);
		КонецЕсли;
		
		СтрокаОтбора.ВидСравнения = ВидСравненияДанных;
		СтрокаОтбора.Значение = Выборка[ТекущееИмяГруппировки];
				
		Если Измерение <> Неопределено Тогда
					
			СтрокаОтбора.Имя = Измерение.ПутьКДанным;
			СтрокаОтбора.ПутьКДанным = Измерение.ПутьКДанным;
			
		Иначе
						
			СтрокаОтбора.Имя = ТекущееИмяГруппировки;
			СтрокаОтбора.ПутьКДанным = ТекущееИмяГруппировки;
			
		КонецЕсли;
	
	КонецЦикла;

	Возврат ДополнительныеОтборы;
	
КонецФункции

// процедура заполняет параметры расшифровки для счета по отчету оборотно сальдовая ведомость по счету
Процедура ЗаполнитьРасшифровкуДляСчета(ОтчетОбъект, Область, Выборка, СтруктураПараметров, Знач ИмяРегистраБухгалтерии,
	Знач РасшифровываемыйСчет, Знач РасшифровываемыйСчетПредставление) Экспорт
		
	ПараметрыКарточкиСчета = Новый Соответствие;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета" + ИмяРегистраБухгалтерии);

	//АБС ВСТАВКА 34336 25.11.13 Вихорев 
	Если  ИмяРегистраБухгалтерии = "абс_МеждународныйОСРЖД" тогда 
		ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "абс_КарточкаСчетаМеждународныйОСРЖД");
	КонецЕсли;
	//АБС ВСТАВКА КОНЕЦ	
	ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);

	ИмяГруппировки = Выборка.Группировка();
	
	Если Лев(ИмяГруппировки, 8) = "Субконто" Тогда

		// надо в структуру доп ограничений поместить все группировки более высокого уровня
		ДополнительныеОтборы = СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ОтчетОбъект, Выборка, СтруктураПараметров.МассивГруппировок);
				
		ПараметрыКарточкиСчета.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
		
		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
		
	ИначеЕсли ИмяГруппировки = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
        СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;	
	
КонецПроцедуры

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОтчетОбъект, Область, Выборка, СтруктураПараметров) Экспорт

	// Если итоги по счету не анализируются, берем общий
	Если Выборка.Счет = NULL Тогда
		
		РасшифровываемыйСчет = Счет;
		РасшифровываемыйСчетПредставление = Строка(Счет);
		
	Иначе
		
		РасшифровываемыйСчет = Выборка.Счет;
		РасшифровываемыйСчетПредставление = Выборка.СчетПредставление;
		
	КонецЕсли;
	
	ЗаполнитьРасшифровкуДляСчета(ОтчетОбъект, Область, Выборка, СтруктураПараметров, ИмяРегистраБухгалтерии,
		РасшифровываемыйСчет, РасшифровываемыйСчетПредставление);
    
КонецПроцедуры

//Процедура формирует первоначальные строки отбора построителя по субконто
Процедура СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Знач Счет) Экспорт
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	
	Сч = 0;
	Для Каждого СтрокаВидаСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч + 1;
		ИмяСубконто = "Субконто" + Сч;
		
		ЭлементОтбора = ПостроительОтчета.Отбор.Найти(ИмяСубконто);
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ИмяСубконто);
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
					
		ТипИзмерения = ПолучитьТипИзмеренияПоУмолчанию(СтрокаВидаСубконто.ВидСубконто.ТипЗначения);
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ИмяСубконто, , ТипИзмерения);

	КонецЦикла;
	
КонецПроцедуры

//Функция создает по структуре параметров соответсвие
Функция СоздатьПоСтруктуреСоответствие(Знач СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

// процедура устанавливает отбор посторителю отчетов по параметрам
Процедура ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, Знач СтрокиОтбора) Экспорт
	
	Если СтрокиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для Каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла;
			
			Попытка
			
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				КонецЕсли;
				
				Если ТипЗнч(Строка.Значение) = Тип("СписокЗначений")
					ИЛИ ТипЗнч(Строка.Значение) = Тип("Массив") ТОгда
					
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
					ЭлементОтбора.Значение = Строка.Значение;	
					ЭлементОтбора.Использование = Истина;
					
				ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
					
					ЭлементОтбора.ВидСравнения  = Строка.Значение.ВидСравнения;
					ЭлементОтбора.Значение      = Строка.Значение.Значение;
					ЭлементОтбора.Использование = Истина;	
					
				Иначе
					ЭлементОтбора.Установить(Строка.Значение);
					
					Если Метаданные.Справочники.Содержит(Строка.Значение.Метаданные())
					   И ЗначениеЗаполнено(Строка.Значение) Тогда
						ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
					Иначе
						ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
					КонецЕсли;
				   
				КонецЕсли;	
				
			Исключение
				// не смогли ограничение установить
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		// переносим имя отбора из пути к данным
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			СтрокаОтбора.Имя = СтрокаОтбора.ПутьКДанным; 
			
		КонецЦикла;
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

//Функция Объединяет ограничения
Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И") Экспорт
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции

//Процедура устанавливает параметры ограничения запросу из строки ограничений построителя отчета
Процедура УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Знач СтрокаОтбора, Знач ПостфиксОграничения) Экспорт
	
	СтрокаПостфикса = Строка(ПостфиксОграничения);
	
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
		
		// ограничение на содержит отрабатывается отдельным образом
		// надо из значения ограничения лишние символы преобразовать и дополнить ограничение символами %%
		
		ИтоговаяСтрокаОграничения = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаОтбора.Значение);
		
		ИтоговаяСтрокаОграничения = "%" + ИтоговаяСтрокаОграничения + "%";
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, ИтоговаяСтрокаОграничения);
		
	Иначе	
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, СтрокаОтбора.Значение);
		Запрос.УстановитьПараметр("ЗначениеС" + СтрокаПостфикса, СтрокаОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("ЗначениеПо" + СтрокаПостфикса, СтрокаОтбора.ЗначениеПо);	
	
	КонецЕсли;
	
КонецПроцедуры

// Создание структуры таблицы для хранения данных об отборе по субконто каждой корреспонденции
Функция СоздатьТаблицуДляХраненияОтбора(Знач ДобавлятьКолонкуИспользования = Ложь) Экспорт
	
	ТаблицаОтбора = Новый ТаблицаЗначений();
		
	ТаблицаОтбора.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	ТаблицаОтбора.Колонки.Добавить("Значение");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеС");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеПо");
	
	Если ДобавлятьКолонкуИспользования Тогда
		ТаблицаОтбора.Колонки.Добавить("Использование");
	КонецЕсли;
	
	Возврат ТаблицаОтбора;
	
КонецФункции

Функция ПолучитьТипИзмеренияПоУмолчанию(ТипЗначения) Экспорт
	
	Для каждого Тип Из ТипЗначения.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если ОбъектМетаданных.Иерархический Тогда
				Возврат ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию();;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	
КонецФункции

Функция ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию()
	
	ТипДетализацииПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
	
	Если ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Иерархия;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
	Иначе
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
КонецФункции



//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Хозрасчетный";

#КонецЕсли