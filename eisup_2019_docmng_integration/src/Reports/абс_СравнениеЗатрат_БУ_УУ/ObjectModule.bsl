#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	
	УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Ложь;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Регистратор),
	|	Данные.СчетДт,
	|	ПРЕДСТАВЛЕНИЕ(Данные.СчетДт),
	|	Данные.СтатьяЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(Данные.СтатьяЗатрат),
	|	Данные.Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Подразделение),
	|	Данные.ВидДеятельности,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ВидДеятельности),
	|	Данные.Сумма КАК Сумма,
	|	Данные.ЦФУ,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ЦФУ),
	|	Данные.ЦФО,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ЦФО),
	|	Данные.Организация,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Организация),
	|	Данные.СтатьяОборотов,
	|	ПРЕДСТАВЛЕНИЕ(Данные.СтатьяОборотов),
	|	Данные.ТипКонтрагента,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ТипКонтрагента),
	|	Данные.ТипСети,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ТипСети),
	|	Данные.ТипРасхода,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ТипРасхода),
	|	Данные.КВ,
	|	ПРЕДСТАВЛЕНИЕ(Данные.КВ),
	|	Данные.ТЭО,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ТЭО),
	|	Данные.СуммаСценарияОборот КАК СуммаСценарияОборот,
	|	ЕСТЬNULL(Данные.Сумма, 0) - ЕСТЬNULL(Данные.СуммаСценарияОборот, 0) КАК Разница_БУ_УУ
	|{ВЫБРАТЬ
	|	Регистратор.*,
	|	СчетДт.*,
	|	СтатьяЗатрат.*,
	|	Подразделение.*,
	|	ВидДеятельности.*,
	|	Сумма,
	|	ЦФУ.*,
	|	ЦФО.*,
	|	Организация.*,
	|	СтатьяОборотов.*,
	|	ТипКонтрагента.*,
	|	ТипСети.*,
	|	ТипРасхода.*,
	|	КВ.*,
	|	ТЭО.*,
	|	СуммаСценарияОборот,
	|	Разница_БУ_УУ}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗатратыБУ.Регистратор КАК Регистратор,
	|		ЗатратыБУ.СчетДт КАК СчетДт,
	|		ЗатратыБУ.СтатьяЗатрат КАК СтатьяЗатрат,
	|		ЗатратыБУ.Подразделение КАК Подразделение,
	|		ЗатратыБУ.ВидДеятельности КАК ВидДеятельности,
	|		ЗатратыБУ.Сумма КАК Сумма,
	|		NULL КАК ЦФУ,
	|		NULL КАК ЦФО,
	|		NULL КАК Организация,
	|		NULL КАК СтатьяОборотов,
	|		NULL КАК ТипКонтрагента,
	|		NULL КАК ТипСети,
	|		NULL КАК ТипРасхода,
	|		NULL КАК КВ,
	|		NULL КАК ТЭО,
	|		NULL КАК СуммаСценарияОборот
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|			ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|			КОНЕЦ КАК СтатьяЗатрат,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|			КОНЕЦ КАК Подразделение,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.абс_ВидыДеятельностиКТТК
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.абс_ВидыДеятельностиКТТК
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.абс_ВидыДеятельностиКТТК
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|			КОНЕЦ КАК ВидДеятельности,
	|			СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, СчетДт В ИЕРАРХИИ (&МассивСчетовЗатрат), , ) КАК ХозрасчетныйДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХозрасчетныйДвиженияССубконто.Регистратор,
	|			ХозрасчетныйДвиженияССубконто.СчетДт,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.абс_ВидыДеятельностиКТТК
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.абс_ВидыДеятельностиКТТК
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|				КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.абс_ВидыДеятельностиКТТК
	|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|			КОНЕЦ) КАК ЗатратыБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапросУУ.Регистратор,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗапросУУ.ЦФУ,
	|		ЗапросУУ.ЦФО,
	|		ЗапросУУ.Организация,
	|		ЗапросУУ.СтатьяОборотов,
	|		ЗапросУУ.ТипКонтрагента,
	|		ЗапросУУ.ТипСети,
	|		ЗапросУУ.ТипРасхода,
	|		ЗапросУУ.КВ,
	|		ЗапросУУ.ТЭО,
	|		ЗапросУУ.СуммаСценарияОборот
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОборотыБюджетовОбороты.Регистратор КАК Регистратор,
	|			ОборотыБюджетовОбороты.абс_ЦФУ КАК ЦФУ,
	|			ОборотыБюджетовОбороты.ЦФО КАК ЦФО,
	|			ОборотыБюджетовОбороты.Организация КАК Организация,
	|			ОборотыБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|			ОборотыБюджетовОбороты.абс_ТипКонтрагента КАК ТипКонтрагента,
	|			ОборотыБюджетовОбороты.абс_ТипСети КАК ТипСети,
	|			ОборотыБюджетовОбороты.абс_ТипРасхода КАК ТипРасхода,
	|			ОборотыБюджетовОбороты.абс_КВ КАК КВ,
	|			ОборотыБюджетовОбороты.абс_ТЭО КАК ТЭО,
	|			ОборотыБюджетовОбороты.СуммаСценарияОборот КАК СуммаСценарияОборот
	|		ИЗ
	|			РегистрНакопления.ОборотыБюджетов.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					Регистратор,
	|					СтатьяОборотов.абс_ДоходнаяСтатья = ЛОЖЬ
	|						И Сценарий = &СценарийФакт) КАК ОборотыБюджетовОбороты) КАК ЗапросУУ) КАК Данные
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(Данные.Сумма, 0) = 0
	|				И ЕСТЬNULL(Данные.СуммаСценарияОборот, 0) = 0
	|				И ЕСТЬNULL(Данные.Сумма, 0) - ЕСТЬNULL(Данные.СуммаСценарияОборот, 0) = 0))
	|{ГДЕ
	|	Данные.Регистратор.*,
	|	Данные.Сумма,
	|	Данные.СуммаСценарияОборот,
	|	(ЕСТЬNULL(Данные.Сумма, 0) - ЕСТЬNULL(Данные.СуммаСценарияОборот, 0)) КАК Разница_БУ_УУ}
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаСценарияОборот),
	|	СУММА(Разница_БУ_УУ)
	|ПО
	|	Регистратор
	|{ИТОГИ ПО
	|	Регистратор.*}";
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Регистратор"		, "Документ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СчетДт"			, "Счет затрат (БУ)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатьяЗатрат"		, "СтатьяЗатрат (БУ)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Подразделение"	, "Подразделение (БУ)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидДеятельности"	, "Вид деятельности (БУ)");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦФУ"				, "ЦФУ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦФО"				, "ЦФО");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Организация"		, "Организация");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатьяОборотов"	, "Бюджетная статья");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипКонтрагента"	, "Тип контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипСети"			, "Тип сети");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТЭО"				, "ТЭО");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КВ"				, "КВ");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Сумма"				, "Сумма (БУ)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаСценарияОборот"	, "Сумма (УУ)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Разница_БУ_УУ"		, "Разница (БУ - УУ)");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	
	УниверсальныйОтчет.ДобавитьПоказатель("Сумма"				, "Сумма (БУ)"			, Истина	, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаСценарияОборот"	, "Сумма (УУ)"			, Истина	, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("Разница_БУ_УУ"		, "Разница (БУ - УУ)"	, Истина	, "ЧЦ=15; ЧДЦ=2");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	
	
	/// Отбор!!!!
	
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор"		, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("СчетДт"			, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("СтатьяЗатрат"	, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Подразделение"	, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВидДеятельности"	, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
		
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ЦФУ"				, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ЦФО"				, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Организация"		, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("СтатьяОборотов"	, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТипКонтрагента"	, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТипСети"			, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТЭО"				, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("КВ"				, ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);	
		
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Регистратор"		, "Документ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СчетДт"			, "Счет затрат (БУ)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатьяЗатрат"		, "СтатьяЗатрат (БУ)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Подразделение"	, "Подразделение (БУ)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидДеятельности"	, "Вид деятельности (БУ)");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦФУ"				, "ЦФУ");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦФО"				, "ЦФО");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Организация"		, "Организация");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатьяОборотов"	, "Бюджетная статья");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипКонтрагента"	, "Тип контрагента");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипСети"			, "Тип сети");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТЭО"				, "ТЭО");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КВ"				, "КВ");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Сумма"				, "Сумма (БУ)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаСценарияОборот"	, "Сумма (УУ)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Разница_БУ_УУ"		, "Разница (БУ - УУ)");

	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	УчетнаяПолитика = ttk_ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(НЕ ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон), ТекущаяДата(), УниверсальныйОтчет.ДатаКон), Ложь);
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("НеВключатьНДСВСтоимостьПартий", ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий));
	
	
	МассивСчетовЗатрат = Новый Массив();
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);	
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивСчетовЗатрат", МассивСчетовЗатрат);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СценарийФакт", Константы.абс_СценарийДляФакта.Получить());
	
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли