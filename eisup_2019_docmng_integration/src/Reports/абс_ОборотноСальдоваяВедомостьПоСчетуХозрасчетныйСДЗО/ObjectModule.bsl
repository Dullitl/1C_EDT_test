#Если Клиент Тогда

Перем ИмяРегистраБухгалтерии Экспорт;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Оборотно-сальдовая ведомость по счету " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет")+" (с детализацией по ДЗО)";	
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субконто: " + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по ДЗО, " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

////////////АБС ВСТАВКА//////////////////////////////////////////////////////////////////////////////////////////////////////////////
Функция абс_СформироватьЗапрос(СтруктураПараметров) Экспорт
	
	//---
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ДатаНачОтчета", ДатаНач);
	Запрос.УстановитьПараметр("СчетВид",Счет.Вид);
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКонОтчета", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКонОтчета", ДатаКон);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	ДатыПереноса = абс_ПолучитьДатыПереноса();
	Запрос.УстановитьПараметр("ДатаКонецДЗО", Мин(ДатыПереноса.ДатаКон,КонецДня(ДатаКон)));
	Запрос.УстановитьПараметр("ДатаНачалоДЗО", ДатыПереноса.ДатаНач);
	Запрос.УстановитьПараметр("ДЗО", абс_ДЗО);

	ОграниченияПоПостроителюОтчета = БухгалтерскиеОтчеты.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
			
	СтрокаОграниченийПоРеквизитам = "";
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
    //\\---
	
	ТекстУсловиеСоединения = "";
	ТекстВТОстаткиОборотыДЗО = "";
	
	Если ПоСубсчетам Тогда
		
		ТекстУсловиеСоединения = "И ОстаткиОбороты.Счет = ВТОстаткиОборотыДЗО.Счет 
		|";

		ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ",
		|	ОстаткиОбороты.Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиОбороты.Счет) КАК СчетПредставление";
				
	Иначе
	    ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ",
		|	&Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(&Счет) КАК СчетПредставление";
				
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ",
		|	ОстаткиОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиОбороты.Валюта) КАК ВалютаПредставление";
				
		ТекстУсловиеСоединения = ТекстУсловиеСоединения + "И ОстаткиОбороты.Валюта = ВТОстаткиОборотыДЗО.Валюта
		|";

	КонецЕсли;

    ТекстПоля = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	ТекстПоляГруппировки = "";	
	
	Для Каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		ТекстПоляГруппировки = ТекстПоляГруппировки + ", 
			|	ОстаткиОбороты." + Измерение.ПутьКДанным;
			
		ТекстПоля = ТекстПоля + ", 
			|	ОстаткиОбороты." + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстПоля = ТекстПоля + ", 
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиОбороты." + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + БухгалтерскиеОтчеты.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
		
		ТекстУсловиеСоединения = ТекстУсловиеСоединения + "И ОстаткиОбороты."+Измерение.ПутьКДанным+" = ВТОстаткиОборотыДЗО."+ Измерение.ПутьКДанным + "
		|";
		
	КонецЦикла;

	Если ТекстУсловиеСоединения = "" Тогда
		ТекстУсловиеСоединения = ", Истина";
	КонецЕсли;
	
	ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + ТекстПоля;
	ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОборотыДЗО;
	ТекстВыборка           = ТекстВТОстаткиОборотыДЗО;
	ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты1;
    ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2;
	
	ТекстВТОстаткиОборотыДЗО = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник КАК ДЗО" + ТекстВТОстаткиОборотыДЗО;
	ТекстВТОстаткиОбороты1 = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	&Организация КАК ДЗО" + ТекстВТОстаткиОбороты1;
	ТекстВыборка = "
		|ВЫБРАТЬ
		|	ОстаткиОбороты.ДЗО КАК ДЗО " +ТекстВыборка;
	ТекстВТОстаткиОбороты2 = "
		|ВЫБРАТЬ
	    |	ОстаткиОбороты.ДЗО КАК ДЗО" + ТекстВТОстаткиОбороты2;
		
	ТекстВТОстаткиОбороты2БезДЗО = "
		|ВЫБРАТЬ
		|	" + Сред(ТекстВТОстаткиОбороты2БезДЗО,2);
		
	УсловиеВыборки = "";
	ТекстИтогов = "";
	
	Для Каждого Показатель Из СтруктураПараметров.МассивПоказателей Цикл
		
		ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО +",
	        |	СУММА(ВЫБОР
	        |			КОГДА ОстаткиОбороты.Период < &ДатаНачОтчета
	        |				ТОГДА ОстаткиОбороты."+Показатель+"Оборот
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК "+Показатель+"НачальныйОстаток,
	        |	Сумма(ОстаткиОбороты."+Показатель+"Оборот) КАК "+Показатель+"КонечныйОстаток,
	        |	Сумма(ВЫБОР
	        |		КОГДА ОстаткиОбороты.Период >= &ДатаНачОтчета
	        |			ТОГДА ОстаткиОбороты."+Показатель+"ОборотДт
	        |		ИНАЧЕ 0
	        |	КОНЕЦ) КАК "+Показатель+"ОборотДт,
	        |	Сумма(ВЫБОР
	        |		КОГДА ОстаткиОбороты.Период >= &ДатаНачОтчета
	        |			ТОГДА ОстаткиОбороты."+Показатель+"ОборотКт
	        |		ИНАЧЕ 0
	        |	КОНЕЦ) КАК "+Показатель+"ОборотКт";
			
			ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОбороты1 + ",
			|	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"НачальныйОстаток, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"НачальныйОстаток, 0) КАК "+Показатель+"НачальныйОстаток,
	        |	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"КонечныйОстаток, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"КонечныйОстаток, 0) КАК "+Показатель+"КонечныйОстаток,
	        |	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"ОборотДт, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"ОборотДт, 0) КАК "+Показатель+"ОборотДт,
	        |	ЕСТЬNULL(ОстаткиОбороты."+Показатель+"ОборотКт, 0) - ЕСТЬNULL(ВТОстаткиОборотыДЗО."+Показатель+"ОборотКт, 0) КАК "+Показатель+"ОборотКт";	
			
			ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты2 + ",
			|	ОстаткиОбороты."+Показатель+"НачальныйОстаток,
	        |	ОстаткиОбороты."+Показатель+"КонечныйОстаток,
	        |	ОстаткиОбороты."+Показатель+"ОборотДт,
	        |	ОстаткиОбороты."+Показатель+"ОборотКт";
			
			ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2БезДЗО + ",
			|	СУММА(ОстаткиОбороты."+Показатель+"НачальныйОстаток) КАК "+Показатель+"НачальныйОстаток,
	        |	СУММА(ОстаткиОбороты."+Показатель+"КонечныйОстаток) КАК "+Показатель+"КонечныйОстаток,
	        |	СУММА(ОстаткиОбороты."+Показатель+"ОборотДт) КАК "+Показатель+"ОборотДт,
	        |	СУММА(ОстаткиОбороты."+Показатель+"ОборотКт) КАК "+Показатель+"ОборотКт";

			
			ТекстВыборка = ТекстВыборка + 
							?(РазвернутоеСальдо,",
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"НачальныйОстаток >= 0
				|			ТОГДА ОстаткиОбороты."+Показатель+"НачальныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"НачальныйОстатокДт,
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"НачальныйОстаток < 0
				|			ТОГДА -ОстаткиОбороты."+Показатель+"НачальныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"НачальныйОстатокКт,
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"КонечныйОстаток >= 0
				|			ТОГДА ОстаткиОбороты."+Показатель+"КонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"КонечныйОстатокДт,
				|	ВЫБОР
				|		КОГДА &СчетВид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				|				ИЛИ &СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|					И ОстаткиОбороты."+Показатель+"КонечныйОстаток < 0
				|			ТОГДА -ОстаткиОбороты."+Показатель+"КонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК "+Показатель+"КонечныйОстатокКт","")+",
			|	ОстаткиОбороты."+Показатель+"НачальныйОстаток,
			|	ОстаткиОбороты."+Показатель+"КонечныйОстаток,
			|	ОстаткиОбороты."+Показатель+"ОборотДт,
			|	ОстаткиОбороты."+Показатель+"ОборотКт";

			УсловиеВыборки = УсловиеВыборки + "
			|	"+?(УсловиеВыборки = "","","ИЛИ")+" ОстаткиОбороты."+Показатель+"НачальныйОстаток <> 0 
			|	ИЛИ ОстаткиОбороты."+Показатель+"ОборотДт <> 0 
			|	ИЛИ ОстаткиОбороты."+Показатель+"ОборотКт <> 0";
			
			ТекстИтогов = Текститогов  
				+?(РазвернутоеСальдо,",
				|	СУММА(" + Показатель + "Начальный" + "ОстатокДт),
				|	СУММА(" + Показатель + "Начальный" + "ОстатокКт),
				|	СУММА(" + Показатель + "Конечный" + "ОстатокДт),
				|	СУММА(" + Показатель + "Конечный" + "ОстатокКт)","")+",
			|	СУММА(" + Показатель + "Начальный" + "Остаток),
			|	СУММА(" + Показатель + "Конечный" + "Остаток),
            |	СУММА(" + Показатель + "ОборотДт),
			|	СУММА(" + Показатель + "ОборотКт)";

		КонецЦикла;
		
	        ТекстВТОстаткиОборотыДЗО = ТекстВТОстаткиОборотыДЗО + "
	        |ПОМЕСТИТЬ ВТОстаткиОборотыДЗО
	        |ИЗ
	        |	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНачалоДЗО, &ДатаКонецДЗО, Регистратор, Счет В ИЕРАРХИИ (&Счет), , " 
				+СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета +", , ) КАК ОстаткиОбороты
	        |ГДЕ
	        |	ОстаткиОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров "+ ?(абс_ДЗО.Пустая(),"","И ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник = &ДЗО")+" И ОстаткиОбороты.Регистратор.абс_ОрганизацияПриемник = &Организация
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОстаткиОбороты.Регистратор.абс_ОрганизацияИсточник"+?(ПоСубсчетам,", ОстаткиОбороты.Счет","") + ?(ПоВалютам,",ОстаткиОбороты.Валюта","")+"
	        |	" + ТекстПоляГруппировки +"
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////";
			
			ТекстВТОстаткиОбороты2 = ТекстВТОстаткиОбороты2 + "
			|ИЗ
	        |	ВТОстаткиОборотыДЗО КАК ОстаткиОбороты
			|;";

			ТекстВТОстаткиОбороты2БезДЗО = ТекстВТОстаткиОбороты2БезДЗО + "
			|ИЗ
	        |	ВТОстаткиОборотыДЗО КАК ОстаткиОбороты
			|СГРУППИРОВАТЬ ПО ОстаткиОбороты.Счет"+ТекстПоляГруппировки;
			
			ТекстВТОстаткиОбороты1 = ТекстВТОстаткиОбороты1 + "
			|ПОМЕСТИТЬ ВТОстаткиОбороты
	        |ИЗ
	        |	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНачОтчета, &ДатаКонОтчета, , , Счет В ИЕРАРХИИ (&Счет), ," + СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета + ") КАК ОстаткиОбороты
	        |		ПОЛНОЕ СОЕДИНЕНИЕ ("+ТекстВТОстаткиОбороты2БезДЗО+") КАК ВТОстаткиОборотыДЗО
	        |		ПО "+Сред(ТекстУсловиеСоединения,2)+"
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |";
			
			ТекстВыборка =  ТекстВыборка + "
			|ИЗ
			|	"+?(абс_ДЗО.Пустая(),"ВТОстаткиОбороты","ВТОстаткиОборотыДЗО")+" КАК ОстаткиОбороты
			|ГДЕ
			|	" + УсловиеВыборки;
					
	Текст = ТекстВТОстаткиОборотыДЗО + ?(абс_ДЗО.Пустая(),ТекстВТОстаткиОбороты1 + ТекстВТОстаткиОбороты2,"") + ТекстВыборка;
	
	Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2);
				
	Текст = Текст + "
	|	ПО ОБЩИЕ, ОстаткиОбороты.ДЗО КАК ДЗО";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	Валюта ";
		
	КонецЕсли;
	
	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = Текст;
	
	// АБС ВСТАВКА 11170
	Если абс_ВключаяПодчиненныеОрганизации Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &Организация", " В ИЕРАРХИИ (&Организация)");
		
	КонецЕсли;
	// АБС ВСТАВКА 11170 КОНЕЦ	
	
	Возврат Запрос;
	
КонецФункции

Функция абс_ПолучитьДатыПереноса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкаЗаписейРегистров.Ссылка
	               |ПОМЕСТИТЬ ВТСписокДок
	               |ИЗ
	               |	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
	               |ГДЕ
	               |	
	               |	КорректировкаЗаписейРегистров.абс_ОрганизацияПриемник = &Организация "
				   +?(абс_ДЗО.Пустая(),"","	И КорректировкаЗаписейРегистров.абс_ОрганизацияИсточник = &ДЗО") + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.Период), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)) КАК ДатаКон,
				   |	ЕСТЬNULL(МИНИМУМ(Хозрасчетный.Период), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНач
	               |ИЗ
	               |	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+" КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Регистратор В
	               |			(ВЫБРАТЬ
	               |				ВТСписокДок.Ссылка
	               |			ИЗ
	               |				ВТСписокДок КАК ВТСписокДок)
	               |	И (Хозрасчетный.СчетДт В ИЕРАРХИИ (&Счет)
	               |			ИЛИ Хозрасчетный.СчетКт В ИЕРАРХИИ (&Счет))";
	
	Запрос.Параметры.Вставить("Счет",Счет);
	Запрос.Параметры.Вставить("Организация",Организация);
	Запрос.Параметры.Вставить("ДЗО",абс_ДЗО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("ДатаНач",Выборка.ДатаНач);
	Структура.Вставить("ДатаКон",Выборка.ДатаКон);

	Возврат Структура;
	
Конецфункции

// процедура выводит текущие показатели оборотно сальдовой ведомости по счету
Процедура абс_ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров)

	ВыведеноПоказателей = 0; // количество выведенных показателей
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл

		// Сумму в валюте выводим только по группировке Валюта
		Если ИмяПоказателя = "ВалютнаяСумма" Тогда
			Если Выборка.Группировка() <> "Валюта" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ВыведеноПоказателей > 0 Тогда
			Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		Иначе
			Область = СтруктураПараметров.ОбластьСтрокаЧисла;
		КонецЕсли;
		
		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
		
		ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];	
		
		Если Выборка.Счет = NULL Тогда
			СчетВид = Счет.Вид;
		Иначе
			СчетВид = Выборка.Счет.Вид;
		КонецЕсли;
		
		Если РазвернутоеСальдо Тогда
			СальдоНачДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
			СальдоНачКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
			СальдоКонДт = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
			СальдоКонКт = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];	
		ИначеЕсли СчетВид = ВидСчета.Активный Тогда
			СальдоНачДт = Выборка[ИмяПоказателя + "НачальныйОстаток"];
			СальдоНачКт = 0;
			
			СальдоКонДт = Выборка[ИмяПоказателя + "КонечныйОстаток"];
			СальдоКонКт = 0;
		ИначеЕсли СчетВид = ВидСчета.Пассивный Тогда
			СальдоНачКт = -Выборка[ИмяПоказателя + "НачальныйОстаток"];
			СальдоНачДт = 0;
			
			СальдоКонКт = -Выборка[ИмяПоказателя + "КонечныйОстаток"];
			СальдоКонДт = 0;
		Иначе
			СальдоНачДт = ?(Выборка[ИмяПоказателя + "НачальныйОстаток"]>=0,Выборка[ИмяПоказателя + "НачальныйОстаток"],0);
			СальдоНачКт = ?(Выборка[ИмяПоказателя + "НачальныйОстаток"]< 0,-Выборка[ИмяПоказателя + "НачальныйОстаток"],0);
			
			СальдоКонДт = ?(Выборка[ИмяПоказателя + "КонечныйОстаток"]>=0,Выборка[ИмяПоказателя + "КонечныйОстаток"],0);
			СальдоКонКт = ?(Выборка[ИмяПоказателя + "КонечныйОстаток"]< 0,-Выборка[ИмяПоказателя + "КонечныйОстаток"],0);
		КонецЕсли;
		
		Область.Параметры.НачальныйОстатокДт = Формат(СальдоНачДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(СальдоНачКт, ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт,    ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт,    ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(СальдоКонДт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(СальдоКонКт, ФорматПоказателя);

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;

		Если ВыведеноПоказателей > 0 Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валютная сумма";
			Иначе
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "";
			КонецЕсли;

			ВыведеннаяОбласть = ДокументРезультат.Вывести(ВыводимаяОбласть);

			ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии;
						
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ВыведеноПоказателей = ВыведеноПоказателей+1;
				
	КонецЦикла;

КонецПроцедуры

//процедура выводит вложенную группировку оборотно сальдовой ведомости оп счету
Процедура абс_ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, Знач ИндексТекущейГруппировки, 
	СтруктураПараметров)
	
	Если ИндексТекущейГруппировки + 1 >= СтруктураПараметров.МассивГруппировок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	абс_ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировок[ИндексТекущейГруппировки + 1]), 
		ИндексТекущейГруппировки + 1, СтруктураПараметров);
		
КонецПроцедуры

// Выводит группировку при развороте счета по субсчетам и/или субконто для оборотно сальдовой ведомости по счету
Процедура абс_ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, Знач ИндексТекущейГруппировки, СтруктураПараметров) Экспорт

	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки = Выборка.Группировка();
		
		Если ИмяГруппировки = "Счет" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			абс_ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
		ИначеЕсли Лев(ИмяГруппировки, 8) = "Субконто" Тогда
			
			Если Выборка[ИмяГруппировки] = Null Тогда
				Продолжить;
			КонецЕсли;
									
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки + "Представление"];
			
			абс_ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров)
			
		ИначеЕсли ИмяГруппировки = "ДЗО" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаДЗО;	
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
		Иначе
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки];
			
		КонецЕсли;
		
		// При выводе субсчетов не делаем отступы
		Отступ = ОбщегоНазначения.ВернутьИндексВМассиве(СтруктураПараметров.МассивГруппировок, ИмяГруппировки);
						
		// Не выводим счета более высокого уровня
		Если ИмяГруппировки = "Счет" 
			И СтруктураПараметров.СоответствиеСчетовПредков[Выборка.Счет] <> Неопределено Тогда
				
			абс_ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, ИндексТекущейГруппировки, СтруктураПараметров);
			Продолжить;
			
		КонецЕсли;
		
		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		
		ВыводимаяОбласть.Область("R1C2").Отступ = Отступ;
		
		ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень() );
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии 
		   И ИмяГруппировки <> "Счет" Тогда
			
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			
		КонецЕсли;
		
		абс_ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров);
		
		// Если по валютам,
		Если СтруктураПараметров.СтруктураОграничений.ПоВалютам Тогда
			
			ВыборкаПоВалютам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			Пока ВыборкаПоВалютам.Следующий() Цикл
				
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
				
				ВыводимаяОбласть.Параметры.Заполнить(Выборка);
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валюта " + ВыборкаПоВалютам.ВалютаПредставление;
				
				ВыводимаяОбласть.Область("R1C2").Отступ = Отступ + 1;
				
				// Заполнение параметров расшифровки
				абс_ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров);
				
				ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());
				
				абс_ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(ВыборкаПоВалютам, СтруктураПараметров);
				
			КонецЦикла;
			
		КонецЕсли;

        // Если есть следующая группировка, то выбираем ее
		абс_ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, ИндексТекущейГруппировки, СтруктураПараметров);
			
	КонецЦикла;

КонецПроцедуры

// процедура выводит итоги отчета оборотно сальдовая ведомость по счету
Процедура абс_ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Знач Выборка, Знач ИмяРегистраБухгалтерии, Знач МассивПоказателей, Знач ФорматПоказателей,
	Знач Счет, Знач ОбластьИтогиСтрокаЧисла, Знач ОбластьИтогиЧислаМакет, Знач ОбластьИтогиСтрокаСчет, Знач ДокументРезультат, ВыводитьРазвернутоеСальдо = Ложь) Экспорт
	
	ЭтоПерваяСтрока = Ложь;

	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл

		Если НЕ Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы[ИмяПоказателя].Балансовый Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоПерваяСтрока = Истина Тогда
			Область = ОбластьИтогиСтрокаЧисла;
		Иначе
			Область = ОбластьИтогиЧислаМакет;
		КонецЕсли;

		ФорматПоказателя = "";
		ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		ОборотДт           = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт           = Выборка[ИмяПоказателя + "ОборотКт"];
		
		Если Счет.Вид = ВидСчета.Активный Тогда 
			НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстаток"];
			НачальныйОстатокКт = 0;
			
			КонечныйОстатокДт = Выборка[ИмяПоказателя + "КонечныйОстаток"];
			КонечныйОстатокКт = 0;						
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			НачальныйОстатокКт = -Выборка[ИмяПоказателя + "НачальныйОстаток"];
			НачальныйОстатокДт = 0;
			
			КонечныйОстатокКт = -Выборка[ИмяПоказателя + "КонечныйОстаток"];
			КонечныйОстатокДт = 0;
		Иначе
			НачальныйОстатокДт = ?(Выборка[ИмяПоказателя + "НачальныйОстаток"]>=0,Выборка[ИмяПоказателя + "НачальныйОстаток"],0);
			НачальныйОстатокКт = ?(Выборка[ИмяПоказателя + "НачальныйОстаток"]< 0,-Выборка[ИмяПоказателя + "НачальныйОстаток"],0);
			
			КонечныйОстатокДт = ?(Выборка[ИмяПоказателя + "КонечныйОстаток"]>=0,Выборка[ИмяПоказателя + "КонечныйОстаток"],0);
			КонечныйОстатокКт = ?(Выборка[ИмяПоказателя + "КонечныйОстаток"]< 0,-Выборка[ИмяПоказателя + "КонечныйОстаток"],0);
		КонецЕсли;
		
		Если ВыводитьРазвернутоеСальдо Тогда
			
			Область.Параметры.НачальныйРазвернутыйОстатокДт = Формат(Выборка[ИмяПоказателя + "НачальныйОстатокДт"], ФорматПоказателя);
			Область.Параметры.НачальныйРазвернутыйОстатокКт = Формат(Выборка[ИмяПоказателя + "НачальныйОстатокКт"], ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокДт  = Формат(Выборка[ИмяПоказателя + "КонечныйОстатокДт"], ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокКт  = Формат(Выборка[ИмяПоказателя + "КонечныйОстатокКт"], ФорматПоказателя);
			
		КонецЕсли;
			
		Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);
			
		Если ЭтоПерваяСтрока = Истина Тогда
			ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 1);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;
	
КонецПроцедуры

//Функция создает структуру дополнительных ограничений для расшифровки отчета
Функция абс_СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ОтчетОбъект, Выборка, МассивГруппировок, 
	Знач ВыводитьВсеГруппировки = Ложь) Экспорт
	
	ДополнительныеОтборы = БухгалтерскиеОтчеты.СоздатьТаблицуДляХраненияОтбора(Истина);
	
	ИмяГруппировки = Выборка.Группировка();
	Если ВыводитьВсеГруппировки Тогда
		НомерГруппировкиВМассиве = МассивГруппировок.Количество() - 1;
	Иначе	
		НомерГруппировкиВМассиве = ОбщегоНазначения.ВернутьИндексВМассиве(МассивГруппировок, ИмяГруппировки);
	КонецЕсли;
	
	Для Сч = 0 По НомерГруппировкиВМассиве Цикл 
		
		ТекущееИмяГруппировки = Врег(МассивГруппировок[Сч]);
		
		Если ТекущееИмяГруппировки = "СЧЕТ"
			ИЛИ ТекущееИмяГруппировки = "ОБЩИЕ" ИЛИ ТекущееИмяГруппировки = "ДЗО" Тогда         
			
			Продолжить;
			
		КонецЕсли;
		
		Измерение = ОтчетОбъект.ПостроительОтчета.ИзмеренияСтроки.Найти(ТекущееИмяГруппировки);
		
		СтрокаОтбора = ДополнительныеОтборы.ДОбавить();
		СтрокаОтбора.Использование = Истина;
		СтрокаОтбора.Имя = Измерение.ПутьКДанным;
		
		Если Измерение.ТипИзмерения = ТипИзмеренияПостроителяОтчета.Элементы Тогда
			ВидСравненияДанных = ВидСравнения.Равно;
		Иначе			
			// надо тип отбора определить и по нему можно сказать вид сравнения
			ВидСравненияДанных = БухгалтерскиеОтчеты.ПолучитьВидОтбораПоТипуЗначения(Выборка[ТекущееИмяГруппировки]);
		КонецЕсли;
		
		СтрокаОтбора.ВидСравнения = ВидСравненияДанных;
		СтрокаОтбора.Значение = Выборка[ТекущееИмяГруппировки];
				
		Если Измерение <> Неопределено Тогда
					
			СтрокаОтбора.Имя = Измерение.ПутьКДанным;
			СтрокаОтбора.ПутьКДанным = Измерение.ПутьКДанным;
			
		Иначе
						
			СтрокаОтбора.Имя = ТекущееИмяГруппировки;
			СтрокаОтбора.ПутьКДанным = ТекущееИмяГруппировки;
			
		КонецЕсли;
	
	КонецЦикла;

	Возврат ДополнительныеОтборы;
	
КонецФункции

// процедура заполняет параметры расшифровки для счета по отчету оборотно сальдовая ведомость по счету
Процедура абс_ЗаполнитьРасшифровкуДляСчета(ОтчетОбъект, Область, Выборка, СтруктураПараметров, Знач ИмяРегистраБухгалтерии,
	Знач РасшифровываемыйСчет, Знач РасшифровываемыйСчетПредставление) Экспорт
		
	ПараметрыКарточкиСчета = Новый Соответствие;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета" + ИмяРегистраБухгалтерии);

	ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);

	ИмяГруппировки = Выборка.Группировка();
	
	Если Лев(ИмяГруппировки, 8) = "Субконто" Тогда

		// надо в структуру доп ограничений поместить все группировки более высокого уровня
		ДополнительныеОтборы = абс_СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ОтчетОбъект, Выборка, СтруктураПараметров.МассивГруппировок);
				
		ПараметрыКарточкиСчета.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
		
		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
		
	ИначеЕсли ИмяГруппировки = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
        СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;	
	
КонецПроцедуры

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура абс_ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОтчетОбъект, Область, Выборка, СтруктураПараметров) Экспорт

	// Если итоги по счету не анализируются, берем общий
	Если Выборка.Счет = NULL Тогда
		
		РасшифровываемыйСчет = ОтчетОбъект.Счет;
		РасшифровываемыйСчетПредставление = Строка(ОтчетОбъект.Счет);
		
	Иначе
		
		РасшифровываемыйСчет = Выборка.Счет;
		РасшифровываемыйСчетПредставление = Выборка.СчетПредставление;
		
	КонецЕсли;
	
	абс_ЗаполнитьРасшифровкуДляСчета(ОтчетОбъект, Область, Выборка, СтруктураПараметров, ОтчетОбъект.ИмяРегистраБухгалтерии,
		РасшифровываемыйСчет, РасшифровываемыйСчетПредставление);
    
КонецПроцедуры

//\\\\\\\\КОНЕЦ АБС\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;

	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,,Истина);

	БухгалтерскиеОтчеты.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	НаличиеДублей = БухгалтерскиеОтчеты.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппировок = СформироватьМассивГруппировок();
    
	МассивПоказателей = СформироватьМассивПоказателей();
		
	// Формат показателей
	СтруктураФорматовПоказателей = БухгалтерскиеОтчеты.СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ИмяРегистраБухгалтерии);
		
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "РазвернутоеСальдо", "");
	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Числа");
	ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Счет");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Счет");
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
	ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
	ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");

	СоответствиеСчетовПредков = БухгалтерскиеОтчеты.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
	
	СтруктураПараметровОграничений = БухгалтерскиеОтчеты.СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, ПоВалютам);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет",ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ШрифтГрупп", ШрифтГрупп);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла);
	СтруктураПараметров.Вставить("ФорматПоказателей", СтруктураФорматовПоказателей);
	СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	СтруктураПараметров.Вставить("СтруктураОграничений", СтруктураПараметровОграничений);
	//Абс Вставка
	СтруктураПараметров.Вставить("ОбластьСтрокаДЗО",Макет.ПолучитьОбласть("СтрокаДЗО|Счет")) ;
	
	//Формирование запроса
	Запрос = абс_СформироватьЗапрос(СтруктураПараметров);
	РезультатЗапроса = Запрос.Выполнить();

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировок.Количество() > 0 Тогда
		
		абс_ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
							0, СтруктураПараметров);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если Выборка.Следующий() Тогда
		ВыводимаяОбласть = ОбластьИтогиСчет;
		ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
	
		абс_ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка, ИмяРегистраБухгалтерии, МассивПоказателей, СтруктураФорматовПоказателей,
			Счет, ОбластьИтогиСтрокаЧисла, ОбластьИтогиЧислаМакет, ОбластьИтогиСтрокаСчет, ДокументРезультат, РазвернутоеСальдо);
	КонецЕсли;
		
	ДокументРезультат.Вывести(ИтогиПодвал, 1);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
    ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры // СформироватьОтчет()

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	//Абс вставка
	МассивГруппировок.Добавить("ДЗО");
	//\\
	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", Ложь);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивТекущихПоказателей = СформироватьМассивПоказателей();
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Истина, 
		Истина, Истина, РазвернутоеСальдо);

			
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", " + " ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто"+Сч;
		ТекстПоля = ТекстПоля + ", " + " ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Субконто" + Сч + ") КАК Субконто"+Сч+"Представление";
	
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
		ТекстПорядок = ТекстПорядок + ", Субконто"+Сч+".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
		
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	Текст = Текст +" 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО
		|" + Сред(ТекстПорядок, 2) + "}";
		
	КонецЕсли;
	
	СтрокаИтогов = БухгалтерскиеОтчеты.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Ложь,,, РазвернутоеСальдо);
	
	Текст = Текст + "
	|ИТОГИ " + Сред(СтрокаИтогов, 2); 
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
		
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
		
КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ЗаполнитьНачальныеНастройки();
	
	БухгалтерскиеОтчеты.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
		
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = БухгалтерскиеОтчеты.СоздатьПоСтруктуреСоответствие(СтруктураПараметров);

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
		ПоСубсчетам  = Параметры["ПоСубсчетам"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);
			
КонецПроцедуры


//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

ИмяРегистраБухгалтерии = "Хозрасчетный";

#КонецЕсли