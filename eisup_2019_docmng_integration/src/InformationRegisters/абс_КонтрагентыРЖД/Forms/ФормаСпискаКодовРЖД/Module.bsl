
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОтборКодРЖДПриИзменении(Элемент)
	
	УстановитьЭлементОтбора(Список.Отбор, "КодРЖД", ОтборКодРЖД, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборКодРЖД));

КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентЕИСУППриИзменении(Элемент)
	
	УстановитьЭлементОтбора(Список.Отбор, "КонтрагентЕИСУП", ОтборКонтрагентЕИСУП, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборКонтрагентЕИСУП));


КонецПроцедуры

&НаКлиенте
Процедура ОтборИннПриИзменении(Элемент)
	
	УстановитьЭлементОтбора(Список.Отбор, "ИНН", ОтборИнн, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборИнн));

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьКопированием(Команда)
	
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыделенныеСтроки[0].КонтрагентЕИСУП) Тогда
		Сообщить("Копировать можно только синхронизированные строки.");	
		Возврат;
	КонецЕсли;
	
	ПолучитьМенеджерЗаписиПолучитьПоКлючу(ВыделенныеСтроки[0]);
	
	СтруктураЗаполнения = Новый Структура("Период, КодРЖД, НаименованиеРЖД, КодРодителяРЖД, КодСтраны, КодРегионаРоссии, Город, 
										| Адрес, Индекс, ИНН, КПП, Телефон");
										
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, РедактируемаяЗапись);
	СтруктураЗаполнения.Период = ТекущаяДата();
	
	ОткрытьФорму("РегистрСведений.абс_КонтрагентыРЖД.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения, ПроверкаЗаполненияКонтрагента", СтруктураЗаполнения, Истина));

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПривязкуКонтрагента(Команда)
	
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыделенныеСтроки[0].КонтрагентЕИСУП) Тогда 
		Сообщить("Для данной строки не установлен контрагент ЕИСУП");
		Возврат;
	КонецЕсли;
	
	Если  Вопрос("Удалить привязку контрагента к коду РЖД ?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьПривязкуКонтрагентаНаСервере(ВыделенныеСтроки[0]);	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработкуПоЗаполнениюРеквизитовРЖД(Команда)
	
	ФормаОбработки = ПолучитьФорму("Обработка.абс_МэппингКонтрагентовРЖД.Форма.Форма");
	ФормаОбработки.ОткрытьПринудительно = Истина;
	ФормаОбработки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКонтрагентаЕИСУП(Команда)
	
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМенеджерЗаписиПолучитьПоКлючу(ВыделенныеСтроки[0]);
		
	ФормаВыбораКонтрагента = Справочники.Контрагенты.ПолучитьФорму("ФормаВыбора");
	ФормаВыбораКонтрагента.СправочникСписок.Отбор.ИНН.Установить(РедактируемаяЗапись.ИНН);
	ФормаВыбораКонтрагента.СправочникСписок.Отбор.абс_СтатусКонтрагента.Установить(Перечисления.абсСтатусыКонтрагентов.Активный);

	//Если ТекущаяСтрока.НайденоНесколько Тогда 
	//	ФормаВыбораКонтрагента.СправочникСписок.Отбор.КПП.Установить(ТекущаяСтрока.КПП);
	//КонецЕсли;
	
	ФормаВыбораКонтрагента.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	ФормаВыбораКонтрагента.РежимВыбора = Истина;
	
	ПодобранныйКонтрагент = ФормаВыбораКонтрагента.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПодобранныйКонтрагент) Тогда 
		РедактируемаяЗапись.КонтрагентЕИСУП = ПодобранныйКонтрагент;
		ЗаписатьМенеджерЗаписиНаСервере();
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ


&НаКлиенте
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для н = 0 По Список.ВыделенныеСтроки.Количество()-1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[н]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[н]);
		КонецЕсли;
	КонецЦикла;
		
	Возврат МассивСсылок;
	
КонецФункции 

&НаСервере
ПРоцедура ПолучитьМенеджерЗаписиПолучитьПоКлючу(КлючЗаписи)
	
	ЗначениеВРеквизитФормы(РегистрыСведений.абс_КонтрагентыРЖД.МенеджерЗаписиПолучитьПоКлючу(КлючЗаписи), "РедактируемаяЗапись");
	
КонецПроцедуры

&НаСервере
ПРоцедура ЗаписатьМенеджерЗаписиНаСервере()
	
	МенеджерЗаписи = РеквизитФормыВЗначение("РедактируемаяЗапись");
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПривязкуКонтрагентаНаСервере(КлючЗаписи) 
	
	РегистрыСведений.абс_КонтрагентыРЖД.УдалитьПривязкуКонтрагента(КлючЗаписи.КодРЖД, КлючЗаписи.Период, КлючЗаписи.КонтрагентЕИСУП);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УСТАНОВКИ ОТБОРОВ В ДИНАМИЧЕСКОМ СПИСКЕ


// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда)
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
&НаКлиенте
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Представление = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Изменение элементов отбора
// Параметры
//  ИмяПоля - строка - имя поля компоновки
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - строка - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
&НаКлиенте
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								знач ИмяПоля = Неопределено,
								знач Представление = Неопределено,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Добавление элемента компоновки в контейнер элементов компоновки
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
&НаКлиенте
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									знач ИмяПоля,
									знач ВидСравнения,
									знач ПравоеЗначение = Неопределено,
									знач Представление  = Неопределено,
									знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

&НаКлиенте
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры





