//Расшифрвока поле СтатусВводаБюджета.Статус
//0 - не загружалось из TPI
//1 - загружено
//2 - загружено, но не актуалньо
//3 - не загружено, данных нет в TPI
//4 - в процессе загрузки возникли ошибки


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодГод = Число(Формат(ТекущаяДата(), "ДФ=yyyy"));
	ЗаполнитьСтатусВводаБюджета();
	Элементы.ГруппаОповещенияОбОпасности.Видимость = НЕ ПодключениеУстановлено;
	ЗаполнитьСписокОРганизаций();
	СоздатьЭлементыФормы();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫЫ

&НаКлиенте
Процедура ДекорацияЛогНажатие(Элемент)
		
	ЗначениеОтбора = Новый Структура("Организация", ПолучитьОрганизациюПоЭлементу(Элемент));
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("РегистрСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета.Форма.ФормаСписка", ПараметрыВыбора);
	
	//ОткрытьФорму("РегистрСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузитьНажатие(Элемент)
	
	Организация = ПолучитьОрганизациюПоЭлементу(Элемент);
	
	абс_ПроцедурыОбменаСервер.ИнтеграцияCognos_ЗагрузитьВводаБюджета(Организация, ПериодГод);
	ЗаполнитьСтатусВводаБюджета();
	СоздатьВводБюджета(Организация);
	ОбновитьФормуПоСтатусам();
	СоздатьДекорацииВводБюджета(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьВводБюджетаНажатие(Элемент)
	
	Организация = ПолучитьОрганизациюПоЭлементу(Элемент);
	
	СоздатьВводБюджета(Организация);
	СоздатьДекорацииВводБюджета(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьВводБюджетаНАЧНажатие(Элемент)
	
	Организация = ПолучитьОрганизациюПоЭлементу(Элемент);
	
	строкиОрганизации = СтатусВводаБюджета.НайтиСтроки(Новый Структура("Организация, ПериодГод", Организация, ПериодГод));
	Если строкиОрганизации.Количество() > 0 Тогда 
		Если ЗначениеЗаполнено(строкиОрганизации[0].ВводБюджетаНАЧ) Тогда 
			ОткрытьЗначение(строкиОрганизации[0].ВводБюджетаНАЧ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьВводБюджетаЗАКНажатие(Элемент)
	
	Организация = ПолучитьОрганизациюПоЭлементу(Элемент);
	
	строкиОрганизации = СтатусВводаБюджета.НайтиСтроки(Новый Структура("Организация, ПериодГод", Организация, ПериодГод));
	Если строкиОрганизации.Количество() > 0 Тогда 
		Если ЗначениеЗаполнено(строкиОрганизации[0].ВводБюджетаЗАК) Тогда 
			ОткрытьЗначение(строкиОрганизации[0].ВводБюджетаЗАК);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокОрганизацийПриИзменении(Элемент)

	УдалитьСозданныеЭлементыФормы();
	СоздатьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодГодПриИзменении(Элемент)

	УдалитьСозданныеЭлементыФормы();
	СоздатьЭлементыФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	Если ПодключениеУстановлено Тогда 
		УдалитьСозданныеЭлементыФормы();
		СоздатьЭлементыФормы();
	Иначе
		ЗаполнитьСтатусВводаБюджета();
		Элементы.ГруппаОповещенияОбОпасности.Видимость = НЕ ПодключениеУстановлено;
		ЗаполнитьСписокОРганизаций();
		СоздатьЭлементыФормы();
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭЛЕМЕНТАМИ ФОРМЫ

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	й = 0;
		
	Для Каждого ЭлементОрганизации из СписокОрганизаций Цикл 
		
		й = й + 1;
		Организация = ЭлементОрганизации.Значение;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПериодГод) Тогда 
			ПериодГод = Число(Формат(ТекущаяДата(), "ДФ=yyyy"));
		КонецЕсли;
		
		строкиЛога = СтатусВводаБюджета.НайтиСтроки(Новый Структура("Организация, ПериодГод", 
														Организация, 
														ПериодГод));
		КодСтатуса = ?(строкиЛога.Количество() = 0, 3, строкиЛога[0].Статус);
		ВводБюджетаНАЧ = ?(строкиЛога.Количество() = 0, Неопределено, строкиЛога[0].ВводБюджетаНАЧ); 
		ВводБюджетаЗАК = ?(строкиЛога.Количество() = 0, Неопределено, строкиЛога[0].ВводБюджетаЗАК); 
		строкаСоответствич = СоответсвиеОрганизацииЭлементов.Добавить();
		
		//////// отрисовка формы
 		ГруппаОрганизация = СоздатьГруппу("ГруппаОрганизация" + й, 		Элементы.ГруппаОрганизации, Организация.Наименование, "Горизонтальная", "Линия");
		ГруппаОрганизация.ШрифтЗаголовка = Новый Шрифт(ГруппаОрганизация.ШрифтЗаголовка,,,Истина);
		
		ДекорацияСтатус = СоздатьДекорацию("ДекорацияСтатус" + й, ГруппаОрганизация, ПолучитьСтатусСтрокой(КодСтатуса));
		Если КодСтатуса = 1 Тогда 
			ДекорацияСтатус.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
		Иначе
			ДекорацияСтатус.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;

		ГруппаПраваяКолонка = СоздатьГруппу("ГруппаПраваяКолонка" + й, 	ГруппаОрганизация,   , "Вертикальная", 		"Нет");
 		ГруппаДействия 		= СоздатьГруппу("ГруппаДействия" + й, 	   	ГруппаПраваяКолонка, , "Горизонтальная", 	"Нет");
		
		ДекорацияЛог = СоздатьДекорацию("ДекорацияЛог" + й, ГруппаДействия, "Просмотр лога", 18, "ДекорацияЛогНажатие");		
		ДекорацияЗагрузить = СоздатьДекорацию("ДекорацияЗагрузить" + й, ГруппаДействия, "Загрузить", 18, "ДекорацияЗагрузитьНажатие");
		
		Если НЕ (ЗначениеЗаполнено(ВводБюджетаНАЧ) ИЛИ ЗначениеЗаполнено(ВводБюджетаЗАК)) Тогда 
			ДекорацияСоздатьВводПлана = СоздатьДекорацию("ДекорацияСоздатьВводПлана" + й, ГруппаДействия, "Создать документы", 25, "ДекорацияСоздатьВводБюджетаНажатие");
			строкаСоответствич.ДекорацияСоздатьВводПлана = ДекорацияСоздатьВводПлана.Имя;
		Иначе
			ДекорацияСоздатьВводПлана = СоздатьДекорацию("ДекорацияСоздатьВводПлана" + й, ГруппаДействия, "Перезаполнить документы", 25, "ДекорацияСоздатьВводБюджетаНажатие");
			строкаСоответствич.ДекорацияСоздатьВводПлана = ДекорацияСоздатьВводПлана.Имя;			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВводБюджетаНАЧ) Тогда 
			ДекорацияВводБюджетаНАЧ = СоздатьДекорацию("ДекорацияВводБюджетаНАЧ" + й, ГруппаПраваяКолонка, Строка(ВводБюджетаНАЧ) + " (Начисление)", 50, "ДекорацияОткрытьВводБюджетаНАЧНажатие");
			строкаСоответствич.ДекорацияВводБюджетаНАЧ 	= ДекорацияВводБюджетаНАЧ.Имя;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВводБюджетаЗАК) Тогда 
			ДекорацияВводБюджетаЗАК = СоздатьДекорацию("ДекорацияВводБюджетаЗАК" + й, ГруппаПраваяКолонка, Строка(ВводБюджетаЗАК) + " (Закупки)", 50, "ДекорацияОткрытьВводБюджетаЗАКНажатие");
			строкаСоответствич.ДекорацияВводБюджетаЗАК 	= ДекорацияВводБюджетаЗАК.Имя;
		КонецЕсли;
		/////////
		
		строкаСоответствич.Организация 			= Организация;
		строкаСоответствич.ГруппаОрганизация 	= ГруппаОрганизация.Имя;
		строкаСоответствич.ГруппаПраваяКолонка 	= ГруппаПраваяКолонка.Имя;
		строкаСоответствич.ГруппаДействия 		= ГруппаДействия.Имя;

		строкаСоответствич.ДекорацияСтатус 		= ДекорацияСтатус.Имя;		
		строкаСоответствич.ДекорацияЛог 		= ДекорацияЛог.Имя;
		строкаСоответствич.ДекорацияЗагрузить 	= ДекорацияЗагрузить.Имя;
			
	КонецЦикла;
	
	Если СписокОрганизаций.Количество() = 0 Тогда 
		ЭтаФорма.Высота = 2;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСозданныеЭлементыФормы()
	
	МассивКолонок = Новый Массив; 
	
	Для Каждого Колонка из ПолучитьРеквизиты("СоответсвиеОрганизацииЭлементов") Цикл 	
		Если Колонка.Имя = "Организация" Тогда 
			Продолжить;
		КонецЕсли;	
		МассивКолонок.Добавить(Колонка.Имя);	
	КонецЦикла;
	
	Для Каждого строка из СоответсвиеОрганизацииЭлементов Цикл 
		Для Каждого ИмяКолонки из МассивКолонок Цикл
			Если Элементы.Найти(строка[ИмяКолонки]) <> Неопределено Тогда  
				Элементы.Удалить(Элементы[строка[ИмяКолонки]]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СоответсвиеОрганизацииЭлементов.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДекорацииВводБюджета(Организация)
	
	МассивСтрок = СоответсвиеОрганизацииЭлементов.НайтиСтроки(Новый Структура("Организация", Организация));
	Если МассивСтрок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	строка = МассивСтрок[0];
	
	Если Элементы.Найти(строка.ДекорацияВводБюджетаНАЧ) <> Неопределено Тогда 
		Элементы.Удалить(Элементы[строка.ДекорацияВводБюджетаНАЧ]);
	КонецЕсли;
	
	Если Элементы.Найти(строка.ДекорацияВводБюджетаЗАК) <> Неопределено Тогда 
		Элементы.Удалить(Элементы[строка.ДекорацияВводБюджетаЗАК]);
	КонецЕсли;
	
	строкаСтатуса = ПолучитьСтрокуСтатуса(Организация, ПериодГод);
	Если СтрокаСтатуса = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	й = СписокОрганизаций.ВыгрузитьЗначения().Найти(Организация) + 1;
	Если (Элементы.Найти("ДекорацияВводБюджетаНАЧ" + й) <> Неопределено) 
		ИЛИ (Элементы.Найти("ДекорацияВводБюджетаНАЧ" + й) <> Неопределено) Тогда
		Генеретаор = Новый ГенераторСлучайныхЧисел;
		й = Генеретаор.СлучайноеЧисло(СписокОрганизаций.Количество(), 10000);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаСтатуса.ВводБюджетаНАЧ) Тогда 
		ДекорацияВводБюджетаНАЧ = СоздатьДекорацию("ДекорацияВводБюджетаНАЧ" + й, Элементы[строка.ГруппаПраваяКолонка], Строка(СтрокаСтатуса.ВводБюджетаНАЧ) + " (Начисление)", 50, "ДекорацияОткрытьВводБюджетаНАЧНажатие");
		строка.ДекорацияВводБюджетаНАЧ 	= ДекорацияВводБюджетаНАЧ.Имя;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСтатуса.ВводБюджетаЗАК) Тогда 
		ДекорацияВводБюджетаЗАК = СоздатьДекорацию("ДекорацияВводБюджетаЗАК" + й, Элементы[строка.ГруппаПраваяКолонка], Строка(СтрокаСтатуса.ВводБюджетаЗАК) + " (Закупки)", 50, "ДекорацияОткрытьВводБюджетаЗАКНажатие");
		строка.ДекорацияВводБюджетаЗАК 	= ДекорацияВводБюджетаЗАК.Имя;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПоСтатусам()
	
	Для Каждого строка из СоответсвиеОрганизацииЭлементов Цикл 
		
		Организация = строка.Организация;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПериодГод) Тогда 
			ПериодГод = Число(Формат(ТекущаяДата(), "ДФ=yyyy"));
		КонецЕсли;
		
		строкиЛога = СтатусВводаБюджета.НайтиСтроки(Новый Структура("Организация, ПериодГод", 
														Организация, 
														ПериодГод));
		КодСтатуса = ?(строкиЛога.Количество() = 0, 3, строкиЛога[0].Статус);
		
		ДекорацияСтатус = Элементы.Найти(строка.ДекорацияСтатус);
		Если ДекорацияСтатус = Неопределено Тогда 
			Продолжить;
		КонецЕсли;               
		
		ДекорацияСтатус.Заголовок =  ПолучитьСтатусСтрокой(КодСтатуса);
		Если КодСтатуса = 1 Тогда 
			ДекорацияСтатус.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
		Иначе
			ДекорацияСтатус.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДекорацию(НаименованиеДекорации, РодительДекорации, ЗаголовокДекорации, ШиринаДекорации = 25, ДействиеДекорации = Неопределено)
	
	НоваяДекорация = Элементы.Добавить(НаименованиеДекорации, Тип("ДекорацияФормы"), РодительДекорации);	
	НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
	НоваяДекорация.Заголовок = ЗаголовокДекорации;
	НоваяДекорация.Ширина = ШиринаДекорации;
	НоваяДекорация.РастягиватьПоГоризонтали = Ложь;
	Если ЗначениеЗаполнено(ДействиеДекорации) Тогда
		НоваяДекорация.Гиперссылка = Истина;
		НоваяДекорация.УстановитьДействие("Нажатие", ДействиеДекорации);
	Иначе
		НоваяДекорация.Гиперссылка = Ложь;	
	КонецЕсли;
	
	Возврат НоваяДекорация;
	
КонецФункции

&НаСервере
Функция СоздатьГруппу(НаименованиеГруппы, РодительГруппы, ЗаголовокГруппы, ГруппировкаГруппы = "Горизонтальная", ОтображениеГруппы = "Нет")
	
	НоваяГруппа = Элементы.Добавить(НаименованиеГруппы, Тип("ГруппаФормы"), РодительГруппы);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;	
	НоваяГруппа.Заголовок = ЗаголовокГруппы;
	Если ЗначениеЗаполнено(ЗаголовокГруппы) Тогда 
		НоваяГруппа.ОтображатьЗаголовок = Истина;	
	Иначе
		НоваяГруппа.ОтображатьЗаголовок = Ложь;	
	КонецЕсли;	
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РазрешитьИзменениеСостава = Истина;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы[ОтображениеГруппы];
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы[ГруппировкаГруппы];
	
	Возврат НоваяГруппа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИ

&НаСервере
Процедура ЗаполнитьСтатусВводаБюджета()
	
	СтатусВводаБюджета.Очистить();
	МассивСтатусов_TPI 			  = Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияCognos_ПолучитьСтатусВводаБюджета(ПодключениеУстановлено);
	ТаблицаСтатусов_Лог 		  = РегистрыСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета.ПолучитьСтатусВводаБюджета();
	ТаблицаДокументов_ВводБюджета = РегистрыСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета.ПолучитьДокументыВводаБюджета();
	
	Сценарий_НАЧ 			  	  = Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияCognos_ПолучитьСценарий("ТО_НАЧ");
 	Сценарий_ЗАК 			  	  = Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияCognos_ПолучитьСценарий("ТО_ЗАК");
	
	Для Каждого элемент из МассивСтатусов_TPI Цикл 
		
		строкаОрганизаци = СтатусВводаБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(строкаОрганизаци, элемент);
		
		строкиЛога = ТаблицаСтатусов_Лог.НайтиСтроки(Новый Структура("Организация, ПериодГод", 
														строкаОрганизаци.Организация, 
														строкаОрганизаци.ПериодГод));
		
		Если строкиЛога.Количество() > 0 Тогда 
			Если строкиЛога[0].NUM_LOAD = строкаОрганизаци.NUM_LOAD Тогда 
				строкаОрганизаци.Статус = 1;
			Иначе
				строкаОрганизаци.Статус = 2;
			КонецЕсли;
		Иначе
			строкаОрганизаци.Статус = 0;	
		КонецЕсли; 
		
		строкиДокументов = ТаблицаДокументов_ВводБюджета.НайтиСтроки(Новый Структура("Организация, ПериодГод", 
														строкаОрганизаци.Организация, 
														строкаОрганизаци.ПериодГод));
														
		Если строкиДокументов.Количество() > 0 Тогда 
			Для Каждого строкаДокумент из строкиДокументов Цикл 
				Если строкаДокумент.Сценарий = Сценарий_НАЧ Тогда 
					строкаОрганизаци.ВводБюджетаНАЧ = строкаДокумент.Документ; 	
				ИначеЕсли строкаДокумент.Сценарий = Сценарий_ЗАК Тогда 
					строкаОрганизаци.ВводБюджетаЗАК = строкаДокумент.Документ; 						
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусСтрокой(Статус)
	
	Если Статус = 0 Тогда 
		Возврат "Не загружено";
	ИначеЕсли Статус = 1 Тогда 
		Возврат "Загружено"
	ИначеЕсли Статус = 2 Тогда 
		Возврат "Загружено. Не актуально";
	ИначеЕсли Статус = 3 Тогда 
		Возврат "Отсутствуют данные в TPI";
	ИначеЕсли Статус = 4 Тогда 
		Возврат "Ошибки при загрузке";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура СоздатьВводБюджета(Организация)
	
	Если НЕ ЗагрузкаБезОшибок(Организация) Тогда 
		Сообщить("В загруженных данных обнаружены ошибки(см. лог загрузки). Документы ""Ввод плана бюджета"" не созданы"); 
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВводБюджета.Ссылка КАК Документ,
	                      |	ВводБюджета.Сценарий,
	                      |	ВводБюджета.Статус,
	                      |	ВводБюджета.Год КАК ПериодГод,
	                      |	ВводБюджета.Организация
	                      |ИЗ
	                      |	Документ.абс_ВводБюджета КАК ВводБюджета
	                      |ГДЕ
	                      |	ВводБюджета.Организация = &Организация
	                      |	И ВводБюджета.Год = &ПериодГод
	                      |	И ВводБюджета.Групповой
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.Организация,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.ПериодГод,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.ТипКонтрагента КАК ТипКонтрагента,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.ЦФО КАК ЦФО,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.ЦФУ КАК ЦФУ,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.Проект КАК Проект,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.БюджетнаяСтатья КАК БюджетнаяСтатья,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.Валюта,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.Сценарий КАК Сценарий,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.ПериодБюджета,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.СтавкаНДС,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.Сумма
	                      |ИЗ
	                      |	РегистрСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета.СрезПоследних(
	                      |			,
	                      |			Организация = &Организация
	                      |				И ПериодГод = &ПериодГод
	                      |				И Период В
	                      |					(ВЫБРАТЬ
	                      |						МАКСИМУМ(Т.Период) КАК ПЕРИОД
	                      |					ИЗ
	                      |						РегистрСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета КАК Т
	                      |					ГДЕ
	                      |						Т.Организация = &Организация
	                      |						И Т.ПериодГод = &ПериодГод)) КАК абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЦФУ,
	                      |	ЦФО,
	                      |	Проект,
	                      |	ТипКонтрагента,
	                      |	БюджетнаяСтатья
	                      |ИТОГИ ПО
	                      |	Сценарий");
						  
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ПериодГод", 		ПериодГод);	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаДокументов = МассивРезультатов[0].Выгрузить();
	ВыборкаПоСценариям = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Сценарий_НАЧ 			  	  = Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияCognos_ПолучитьСценарий("ТО_НАЧ");
 	Сценарий_ЗАК 			  	  = Справочники.абс_НастройкиОбменаСSQL.ИнтеграцияCognos_ПолучитьСценарий("ТО_ЗАК");
	
	Пока ВыборкаПоСценариям.Следующий() Цикл 
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСценариям.Сценарий) Тогда 
			Сообщить("Не заполнен сценарий планирования (см. лог загрузки). Документ ""Ввод плана бюджета"" не создан"); 
			Продолжить;
		КонецЕсли;
		
		строкиДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Организация, ПериодГод, Сценарий", 
															Организация, ПериодГод, ВыборкаПоСценариям.Сценарий));		
		Если строкиДокументов.Количество() > 0 Тогда 
			ДокументОбъект = строкиДокументов[0].Документ.ПолучитьОбъект();
			Если (ЗначениеЗаполнено(ДокументОбъект.Статус)) И (ДокументОбъект.Статус <> Перечисления.абс_СтатусыБюджетов.Подготовка) Тогда 
				Сообщить("Необходимо перевести документ " + Строка(ДокументОбъект.Ссылка) + "в статус ""Подготовка"""); 
				Возврат;	
			КонецЕсли;
		Иначе
			ДокументОбъект = Документы.абс_ВводБюджета.СоздатьДокумент();
		КонецЕсли;
		
		Комментарий =  "Загрузка документа из TPI";
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.Групповой = Истина;
		ДокументОбъект.Год = ПериодГод;
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Статус = Перечисления.абс_СтатусыБюджетов.Подготовка;
		ДокументОбъект.ПричинаИзмененияСтатуса = Комментарий;
		ДокументОбъект.Сценарий = ВыборкаПоСценариям.Сценарий; 
		Если ЗначениеЗаполнено(ВыборкаПоСценариям.Сценарий) Тогда
			ДокументОбъект.абс_Бюджет = ВыборкаПоСценариям.Сценарий.абс_Бюджет;
		Иначе
			ДокументОбъект.абс_Бюджет = Перечисления.абс_Бюджет.абс_ОРЕХ;
		КонецЕсли;
		
		ДокументОбъект.Бюджет.Очистить();
		
		Выборка = ВыборкаПоСценариям.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаБюджета = ДокументОбъект.Бюджет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаБюджета, Выборка);
			СтрокаБюджета.Период = Выборка.ПериодБюджета;
			СтрокаБюджета.СуммаРуб = Выборка.Сумма;
			СтрокаБюджета.СуммаВал = Выборка.Сумма;
		КонецЦикла;
		
		ДокументОбъект.УстановитьНовыйНомер();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		ДокументОбъект.ЗаписатьНовыйСтатус(ДокументОбъект.Статус, Комментарий);  
		
		строкаСтатуса = ПолучитьСтрокуСтатуса(Организация, ПериодГод);
		Если СтрокаСтатуса <> Неопределено Тогда 
			Если ДокументОбъект.Сценарий = Сценарий_НАЧ Тогда 
				строкаСтатуса.ВводБюджетаНАЧ = ДокументОбъект.Ссылка;
			ИначеЕсли ДокументОбъект.Сценарий = Сценарий_ЗАК Тогда  
				строкаСтатуса.ВводБюджетаЗАК = ДокументОбъект.Ссылка;				
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузкаБезОшибок(Организация)
	
	Если ПараметрыСеанса.абс_НастройкиСистемы.ИнтеграцияCognos_ИгнорироватьОшибки Тогда 
		Возврат Истина;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.Организация,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.ПериодГод,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.СтрокаОшибки,
	                      |	абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних.Период
	                      |ИЗ
	                      |	РегистрСведений.абс_ИнтеграцияCognos_ЛогЗагрузкиБюджета.СрезПоследних(
	                      |			,
	                      |			Организация = &Организация
	                      |				И ПериодГод = &ПериодГод
	                      |				И СтрокаОшибки <> """") КАК абс_ИнтеграцияCognos_ЛогЗагрузкиБюджетаСрезПоследних");
						  
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ПериодГод", 		ПериодГод);	
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокОРганизаций()
	
	СписокОрганизаций.Очистить();
	
	Для Каждого строка из СтатусВводаБюджета Цикл 
		Если НЕ ЗначениеЗаполнено(строка.Организация) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СписокОрганизаций.НайтиПоЗначению(строка.Организация) = Неопределено Тогда 
			СписокОрганизаций.Добавить(строка.Организация);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуСтатуса(Организация, тмпПериодГод)
	
	строкиЛога = СтатусВводаБюджета.НайтиСтроки(Новый Структура("Организация, ПериодГод", 
														Организация, 
														тмпПериодГод));
														
	Если строкиЛога.Количество() > 0 Тогда 
		Возврат строкиЛога[0];
	КонецЕсли;
														
 	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ КЛИЕНТСКИЕ ПРОЦЕДУРЫ И ФУНКЦИ

&НаКлиенте
Функция ПолучитьОрганизациюПоЭлементу(Элемент)
	
	ИмяКолонки = "";
    Для а = 1 По СтрДлина(Элемент.Имя) Цикл
        КодСимвола = КодСимвола(Сред(Элемент.Имя, а, 1));
        Цифра = Сред(Элемент.Имя, а, 1);
        Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
            ИмяКолонки = ИмяКолонки + Цифра;
        КонецЕсли; 
    КонецЦикла; 

	строки = СоответсвиеОрганизацииЭлементов.НайтиСтроки(Новый Структура(ИмяКолонки, Элемент.Имя));
	Если строки.Количество() > 0 Тогда 
		Возврат строки[0].Организация;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


