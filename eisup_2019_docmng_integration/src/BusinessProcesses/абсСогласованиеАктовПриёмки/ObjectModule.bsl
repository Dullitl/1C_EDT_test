                                   
Перем ФормаАкта Экспорт;

/////////////////////////////////////////////////
// Процедуры обработки ИнтерактивнойАктивации

Процедура ПодготовкаАктаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.абсСогласованиеАктовПриёмки.ТочкиМаршрута.ДействиеПодготовкаАПВР Тогда
		Если АктПриёмкиВыполненныхРабот.Пустая() Тогда
			
			АктОбъект = Документы.Абс_АктПриёмкиВыполненныхРабот.СоздатьДокумент();
			ФормаАкта = АктОбъект.ПолучитьФорму("ФормаЭлемента");
			ФормаАкта.Открыть();
			
		Иначе		
			ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеСогласованиеРукДепОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача);
	
КонецПроцедуры

Процедура ДействиеОбработкаБухгалтеромОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача);

КонецПроцедуры


Процедура ДействиеСогласованиеПВПОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача);

КонецПроцедуры

Процедура ДействиеОтказОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача);

КонецПроцедуры

Процедура ДействиеСогласованОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача);

КонецПроцедуры

Процедура ДействиеРасчётБухгалтеромОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача);

КонецПроцедуры

Процедура ОткрытьФормуАкта(АктПриёмкиВыполненныхРабот,Задача) Экспорт
	
	Если НЕ АктПриёмкиВыполненныхРабот.Пустая() Тогда
		
		ФормаАкта = АктПриёмкиВыполненныхРабот.ПолучитьФорму("ФормаДокумента");
		
		Если ФормаАкта.Открыта() Тогда
			ФормаАкта.Активизировать();
		Иначе
			ФормаАкта.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////
//Обработчики ПриСозданииЗадач

Процедура СформироватьЗадачуИнициатору(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	ФормируемыеЗадачи.Очистить();	
	
	абс_БизнесПроцессы.СформироватьЗадачуСогласованиеАктаПриёмки(ЭтотОбъект.Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИнициаторБП, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры

Процедура ПодготовкаАктаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьЗадачуИнициатору(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
КонецПроцедуры

Процедура ДействиеОтказПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьЗадачуИнициатору(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);

КонецПроцедуры

Процедура ДействиеСогласованиеРукДепПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры

Процедура ДействиеОбработкаБухгалтеромПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры


Процедура ДействиеСогласованиеПВППриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры

Процедура ДействиеРасчётБухгалтеромПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры

Процедура ДействиеСогласованПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)

	СформироватьЗадачуИнициатору(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры

Процедура СформироватьГрупповуюЗадачу(ТочкаМаршрута, ФормируемыеЗадачи, Отказ = Ложь)
	
	ФормируемыеЗадачи.Очистить();
	
	абс_БизнесПроцессы.СформироватьЗадачуИсполнителямАктыПриёмки(ЭтотОбъект.Ссылка, ТочкаМаршрута, ФормируемыеЗадачи);
	
	Если ФормируемыеЗадачи.Количество() = 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании задач. На найдено ответственных.", Отказ);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

/////////////////////////////////////////////////
//Обработчики проверки вариантов и условий

Процедура УсловиеОтправитьНаСогласованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = НЕ АктПриёмкиВыполненныхРабот.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Отмена;
	
КонецПроцедуры

Процедура УсловиеСогласованИлиОтказПроверкаУсловия(ТочкаВыбораВарианта, Результат)
	
	Результат = НЕ АктПриёмкиВыполненныхРабот.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Отказ;
	
КонецПроцедуры

Процедура ВыборВариантаПослеСогласованияБухгалтериейОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	ТекСтатусДоговора = АктПриёмкиВыполненныхРабот.абс_СтатусАкта; 
	
	Если ТекСтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.СогласованиеОтделомКадров Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеОтделомКадров;
	ИначеЕсли ТекСтатусДоговора = Перечисления.абсСтатусыДоговоровПодряда.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	КонецЕсли;	
	
КонецПроцедуры   

Процедура ЗавершениеОКПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ОбъектДП = АктПриёмкиВыполненныхРабот.ПолучитьОбъект();
	ОбъектДП.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Завершён;
	Попытка
		ОбъектДП.Записать();
	Исключение
		Сообщить("Не удалось завершить обработку акта приёмки выполненных работ №"+ОбъектДП.Номер);
	КонецПопытки;
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры

Процедура ОтменаПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ОбъектДП = АктПриёмкиВыполненныхРабот.ПолучитьОбъект();
	ОбъектДП.абс_СтатусАкта = Перечисления.абсСтатусыАктовПриёмки.Отмена;
	//ОбъектДП.ПометкаУдаления = Истина;
	Попытка
		ОбъектДП.Записать();
	Исключение
		Сообщить("Не удалось записать акт приёмки выполненных работ №"+ОбъектДП.Номер);
	КонецПопытки;
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, АктПриёмкиВыполненныхРабот.абс_СтатусАкта);
	
КонецПроцедуры

/////////////////////////////////////////////////
//Обработчики событий

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		
		Организация = АктПриёмкиВыполненныхРабот.Организация;
		ПользовательИнициаторБП = АктПриёмкиВыполненныхРабот.Ответственный;
		
	КонецЕсли;	
	
КонецПроцедуры
