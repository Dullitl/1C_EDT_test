
// АБС 20101206 Изменена карта БП
// Удален блок проверки ПД, с проверки ДФМ БП проходит на согласование ДЭБ
// ВыборВариантаКонтрагентСогласованПД
// 1 - ВариантПроверкаДФМ
// 2 - ВариантОтказ
// 3 - ВариантСогласованиеДЭБ
// ДействиеСогласованиеПД

// Обработчики создания задач, в основном в них устанавливается исполнитель для конкретной задачи

// Обработка ПередСозданием ЗаполнениеКонтрагента
Процедура ЗаполнениеКонтрагентаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();

	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
	//
	НоваяЗадача.Наименование = СокрЛП(Контрагент.Наименование) + " "  
		+ ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= Контрагент;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, Контрагент, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура ДействиеОтказПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();

	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
	//
	НоваяЗадача.Наименование = СокрЛП(Контрагент.Наименование) + " "  
		+ ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= Контрагент;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);

	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, Контрагент, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	

	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

// Обработка ПередСозданием РаботаСКонтрагентом
Процедура ДействиеРаботаСКонтрагентомПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.абсНовыйКонтрагент.ТочкиМаршрута.ДействиеРаботаСКонтрагентом Тогда
		Для Каждого Задача Из ФормируемыеЗадачи Цикл
			Задача.Исполнитель = Задача.БизнесПроцесс.ПользовательИнициаторБП;
		КонецЦикла;		
	КонецЕсли;

КонецПроцедуры

// Процедуры формирования групповых задач
Процедура ПроверкаСотрудникомДФМПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура ПроверкаСотрудникомПДПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
КонецПроцедуры

Процедура ДействиеСогласованиеКонтрагентаСотрудникомДЭБПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура СформироватьГрупповуюЗадачу(ТочкаМаршрута, ФормируемыеЗадачи, Отказ)
	
	ФормируемыеЗадачи.Очистить();
	
	// АБС ИЗМЕНЕНО Согласование ДЭБ ДЗО 20120318
	// Если в контрагенте заполнена организация инициатор контрагента, 
	// то разрешим ДЭБ организации согласовать контрагента
	// иначе согласование только ДЭБ КТТК
	ОрганизацииСогласования = Новый Массив;
	ОрганизацииСогласования.Добавить(Справочники.Организации.НайтиПоНаименованию("КТТК"));
	
	Если ЗначениеЗаполнено(Контрагент.абс_ОрганизацияИнициаторКонтрагента) И ТочкаМаршрута = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ Тогда
		ОрганизацииСогласования.Добавить(Контрагент.абс_ОрганизацияИнициаторКонтрагента);
	КонецЕсли;
	
	ЗапросИсполнителей = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиИИсполнители.Исполнитель
	|ИЗ
	|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	|ГДЕ
	|	РолиИИсполнители.Роль = &РольИсполнителей
	|	И РолиИИсполнители.Организация В(&СпОрганизаций)");
									  
	ЗапросИсполнителей.УстановитьПараметр("СпОрганизаций", ОрганизацииСогласования);
	
	// АБС ИЗМЕНЕНО Согласование ДЭБ ДЗО КОНЕЦ
									  
	РольИсполнителей = Неопределено;									  
	Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ПроверкаКонтрагентаДФМ;
// +++ввв 30.09.2016 г.
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеНалоговыйКонтроль Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.НалоговыйКонтроль;
// ---ввв 30.09.2016 г.
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДЭБ;
	КонецЕсли;
	
	Если РольИсполнителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
	
	ВыборкаИсполнителей = ЗапросИсполнителей.Выполнить().Выбрать();
	
	//абс Изменение Урал 28.01.2014 Формирование одной задачи
	Если ВыборкаИсполнителей.Количество() Тогда
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		
		НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
// +++ввв 30.09.2016 г.
		Если ТипЗнч(ТочкаМаршрута)=Тип("ТочкаМаршрутаБизнесПроцессаСсылка.абсСогласованиеКонтрагентов") Тогда
			Если РольИсполнителей=Справочники.РолиИсполнителей.НалоговыйКонтроль Тогда
				НоваяЗадача.Организация=ОрганизацииСогласования[0];
			КонецЕсли;
		КонецЕсли;
// ---ввв 30.09.2016 г.
		НоваяЗадача.Дата 				= ТекущаяДата();
	
		//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
		//
		НоваяЗадача.Наименование = СокрЛП(Контрагент.Наименование) + " "  
			+ ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		НоваяЗадача.Роль = РольИсполнителей;
		
		НоваяЗадача.ОбъектЗадачи 		= Контрагент;
		
		НоваяЗадача.Записать();
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
		
	КонецЕсли;
	//\\Абс Урал
	
	Если ФормируемыеЗадачи.Количество() = 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найдено ответственных.", Отказ);
	КонецЕсли;
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, Контрагент, ТочкаМаршрута, ФормируемыеЗадачи);
	
КонецПроцедуры

// Процедуры Проверки условий и вариантов маршрута
Процедура УсловиеПроверкаДФМПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ;	
КонецПроцедуры

Процедура УсловиеАрихвПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Архив;
КонецПроцедуры

Процедура ВыборВариантаКонтрагентСогласованПДОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	ТекСтатусКонтрагента = Контрагент.абс_СтатусКонтрагента; 
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПроверкаДФМ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеДЭБ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборВариантаКонтрагентСогласованДЭБОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	ТекСтатусКонтрагента = Контрагент.абс_СтатусКонтрагента; 
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПроверкаДФМ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеДЭБ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнениеКонтрагентаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если не заполнен контрагент, то он еще не создан в справочнике
	//  создадим его и дадим пользователю дозаполнить
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Статус = Перечисления.абсСтатусыКонтрагентов.Подготовка;
		НовыйКонтрагент.Записать();
		
		Контрагент = НовыйКонтрагент.Ссылка;
		Записать();
	КонецЕсли;
	
	ОткрытьКонтрагента();
	
КонецПроцедуры

Процедура ОткрытьКонтрагента()
	
	ФормаНовогоКонтрагента = Контрагент.ПолучитьФорму("ФормаЭлемента");
	
	Если ФормаНовогоКонтрагента.Открыта() Тогда
		ФормаНовогоКонтрагента.Активизировать();
	Иначе
		ФормаНовогоКонтрагента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеПроверкаДФМОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ОткрытьКонтрагента();

КонецПроцедуры

Процедура ДействиеСогласованиеДЭБОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ОткрытьКонтрагента();

КонецПроцедуры

Процедура ДействиеОтказОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ОткрытьКонтрагента();

КонецПроцедуры

Процедура ДействиеСогласованиеПДПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса)
	// Выполним остальные задачи на данной точке 
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ");
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", Ссылка);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	Пока ВыборкаЗадач.Следующий() Цикл
		ЗадачаОбъект = ВыборкаЗадач.Ссылка.ПолучитьОбъект();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЦикла;
КонецПроцедуры

Процедура ВыборВариантаПроверкаДФМОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	ТекСтатус = Контрагент.абс_СтатусКонтрагента;
	
	Если ТекСтатус = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантКонтрагентИзБиллинга;
	ИначеЕсли ТекСтатус = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПроверкаДФМ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеУспешноПроверенСогласованПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Закроем задачи проверки контрагента по договорам
	//***** АБС Вставка Гетц. 28.01.14. Оптимизация запроса
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//					  |	МАКСИМУМ(абсЗадачаДоговора.Ссылка) КАК Ссылка,
	//					  |	абсЗадачаДоговора.ОбъектЗадачи КАК ДоговорКонтрагента
	//					  |ИЗ
	//					  |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	//					  |ГДЕ
	//					  |	абсЗадачаДоговора.ОбъектЗадачи ССЫЛКА Справочник.ДоговорыКонтрагентов
	//					  |	И абсЗадачаДоговора.ОбъектЗадачи.Владелец = &Контрагент
	//					  |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	//					  |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	//					  |	И абсЗадачаДоговора.ОбъектЗадачи.абс_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.ПроверкаКонтрагента)
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	абсЗадачаДоговора.ОбъектЗадачи");
						  
     Запрос = Новый Запрос("ВЫБРАТЬ
                           |	МАКСИМУМ(абсЗадачаДоговора.Ссылка) КАК Ссылка,
                           |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
                           |ИЗ
                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
                           |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
                           |		ПО абсЗадачаДоговора.ОбъектЗадачи = ДоговорыКонтрагентов.Ссылка
                           |ГДЕ
                           |	абсЗадачаДоговора.ОбъектЗадачи ССЫЛКА Справочник.ДоговорыКонтрагентов
                           |	И ДоговорыКонтрагентов.Владелец = &Контрагент
                           |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
                           |	И ДоговорыКонтрагентов.абс_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.ПроверкаКонтрагента)
                           |
                           |СГРУППИРОВАТЬ ПО
                           |	абсЗадачаДоговора.ОбъектЗадачи,
                           |	ДоговорыКонтрагентов.Ссылка");
	//***** АБС Вставка Гетц. 28.01.14. Оптимизация запроса \\					  
						  
	Запрос.УстановитьПараметр("Контрагент"		, Контрагент);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Сначала изменим статус в карточке договора
		// потом в регистре
		// потом выполним задачу
		ДоговорОбъект = Выборка.ДоговорКонтрагента.ПолучитьОбъект();
		
		НовыйСтатусДоговора = Неопределено;
		
		Если ДоговорОбъект.абс_ТипДоговора = Перечисления.абсТипыДоговоров.СоглашениеОКонфиденциальности Тогда
			
			Если ДоговорОбъект.абс_ТипСоглашенияОКонфиденциальности = Перечисления.абс_ТипыСоглашенийОКонфиденциальности.Типовое ИЛИ 
				 НЕ ЗначениеЗаполнено(ДоговорОбъект.абс_ТипСоглашенияОКонфиденциальности) Тогда
				 
					// 20110411 Типовые соглашения о конфиденциальности переходят из статуса "Подготовка" в статус "Подписание и регистрация"
					//НовыйСтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеПД;
					НовыйСтатусДоговора = Перечисления.абсСтатусыДоговоров.Регистрация;
				 
			Иначе
				
				НовыйСтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеДИБ;
				
			КонецЕсли;
			 
		Иначе
			
			НовыйСтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ;
			
		КонецЕсли;
		
		ДоговорОбъект.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ;
		
		ДоговорОбъект.абс_ПричинаИзмененияСтатуса = "Контрагент перешел в статус Активный";
		
		ДоговорОбъект.Записать();
		
	КонецЦикла;
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
	
КонецПроцедуры

Процедура ЗавершениеАрхивПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура УсловиеНеРезидентПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Истина; //Контрагент.НеЯвляетсяРезидентом;
КонецПроцедуры

Процедура ВыборВариантаДляНеРезидентаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	ТекСтатусКонтрагента = Контрагент.абс_СтатусКонтрагента; 
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеПД Тогда //Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантНалоговыйКонтроль;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеДЭБ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;		
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда //Григорьев (Для физ. лиц)
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПроверкаДФМ;
	КонецЕсли;

КонецПроцедуры

Процедура ДействиеНалоговыйКонтрольОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ОткрытьКонтрагента();

КонецПроцедуры

Процедура ДействиеНалоговыйКонтрольПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура ВыборВариантаНалоговыйКонтрольОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	ТекСтатусКонтрагента = Контрагент.абс_СтатусКонтрагента; 
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПроверкаДФМ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеПД Тогда //ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.НалоговыйКонтроль Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантНалоговыйКонтроль;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	КонецЕсли;

КонецПроцедуры

Процедура ЗавершениеОтказПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура УсловиеПодготовкаНеРезидентПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Истина; //Контрагент.НеЯвляетсяРезидентом;
КонецПроцедуры

Процедура ВыборВариантаПроверкиОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	йСтатусОтвета=Неопределено;	
	йСтрОшибки=""; //ОбщегоНазначенияСервер.ПроверкаКонтрагентаПоИННиКППнаИФНС(Контрагент.ИНН,Контрагент.КПП,йСтатусОтвета);
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	мРолиПользователя 	 = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя(мТекущийПользователь);
	Если ЗначениеЗаполнено(йСтрОшибки) Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУспешнаяПроверка; //ТочкаВыбораВарианта.Варианты.ВариантОшибкиСвязи;
	ИначеЕсли йСтатусОтвета = Перечисления.ttk_СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС ИЛИ
			 йСтатусОтвета = Перечисления.ttk_СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУспешнаяПроверка;
	ИначеЕсли мРолиПользователя.Найти(Справочники.РолиИсполнителей.СуперПользователь)<>Неопределено Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСуперПользователь;
	Иначе
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	КонецЕсли;
КонецПроцедуры

Процедура УсловиеИсполнительСогласуетПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = (Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ);
КонецПроцедуры