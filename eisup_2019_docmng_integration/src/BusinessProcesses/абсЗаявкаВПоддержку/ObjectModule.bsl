
Процедура ПриЗаписи(Отказ)
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатус(НовыйСтатус, Комментарий = Неопределено) Экспорт
	
КонецПроцедуры

// Процедуры - обработчики проверки условий.
Процедура УсловиеСогласованоДирМФСПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Согласовано;
	
КонецПроцедуры

Процедура УсловиеИсполнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение;
	
КонецПроцедуры

Процедура УсловиеСменаОтветственногоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение;
	
КонецПроцедуры

Процедура УсловиеОшибкаДирМФСПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования;
	
КонецПроцедуры

Процедура УсловиеОшибкаИнициаторПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования;
	
КонецПроцедуры

Процедура УсловиеВыполненаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;
	
КонецПроцедуры

Процедура УсловиеТестированиеИнициаторомПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеДирМФС;
	
КонецПроцедуры

// Процедуры - обработчики интерактивного открытия заявки.
Процедура ОткрытьЗаявку()
	
	ФормаЗаявки = ЗадачаВПоддержку.ПолучитьФорму("ФормаДокумента");
	
	Если ФормаЗаявки.Открыта() Тогда
		ФормаЗаявки.Активизировать();
	Иначе
		ФормаЗаявки.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеУточнениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеАнализДирМФСОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеСогласованоОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеИсполнениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеПроблемаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеТестированиеДирМФСОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеТестированиеИнициаторомОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеКонтрольАрхитектурыОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка) //АБС ВСТАВКА 57369  28.05.2015 16:47:23  Коломиец
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

// Процедуры - обработчики события ПриСозданииЗадач
Процедура ДействиеЗаявкаВПоддержкуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);
	//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ДействиеУточнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);			
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ДействиеСогласованоПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);						
	//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ДействиеИсполнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);			
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ДействиеТестированиеДирМФСПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);						
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ДействиеТестированиеИнициаторомПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);		
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ДействиеПроблемаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);					
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ДействиеДействиеКонтрольАрхитектурыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт //АБС ВСТАВКА 57369  28.05.2015 16:47:23  Коломиец
	
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);			
	
КонецПроцедуры
// Процедура проверяет созданные задачи по исполнителям и возвращает массив 
//  исполнителей по которым не созданы задачи.
Функция ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсполнителиЗадачи.Исполнитель КАК Исполнитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		Исполнители.Исполнитель КАК Исполнитель,
	|		ЕСТЬNULL(ЗадачиИсполнителей.Задача, ЗНАЧЕНИЕ(Задача.абсЗадачаДоговора.Пустаяссылка)) КАК Задача
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Пользователи.Ссылка КАК Исполнитель
	|		ИЗ
	|			Справочник.Пользователи КАК Пользователи
	|		ГДЕ
	|			Пользователи.Ссылка В(&Исполнители)) КАК Исполнители
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				абсЗадачаДоговора.Ссылка КАК Задача,
	|				абсЗадачаДоговора.Исполнитель КАК Исполнитель
	|			ИЗ
	|				Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	|			ГДЕ
	|				абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	|				И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	|				И абсЗадачаДоговора.Выполнена = ЛОЖЬ) КАК ЗадачиИсполнителей
	|			ПО Исполнители.Исполнитель = ЗадачиИсполнителей.Исполнитель) КАК ИсполнителиЗадачи
	|ГДЕ
	|	ИсполнителиЗадачи.Задача = ЗНАЧЕНИЕ(Задача.абсЗадачаДоговора.ПустаяСсылка)");
						  
	Запрос.УстановитьПараметр("БизнесПроцесс"	, БП);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, ТочкаМаршрута);
	Запрос.УстановитьПараметр("Исполнители"		, Исполнители);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

Процедура СформироватьЗадачуИсполнителямЗаявки(БП, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители, Отказ) Экспорт
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	МассивИсполнителей = Новый Массив();
	
	Если НЕ ТипЗнч(Исполнители) = Тип("Массив") или ТипЗнч(Исполнители) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		МассивИсполнителей.Добавить(Исполнители);
	Иначе	
		МассивИсполнителей = Исполнители;
	КонецЕсли;		
	
	Если МассивИсполнителей.Количество() = 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найдено ответственных для формирования задач.", Отказ);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Исполнители) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		МассивИсполнителей = ПроверитьИсполнителейПоСозданнымЗадачам(БП, ТочкаМаршрута, Исполнители);
	КонецЕсли;
	
	ФормируемыеЗадачи.Очистить();	
	
	Для Каждого ТекИсполнитель Из МассивИсполнителей Цикл
		
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();

		НоваяЗадача.БизнесПроцесс 		= БП.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекущаяДата();
		НоваяЗадача.Наименование 		= Строка(БП.ЗадачаВПоддержку) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		Если ТипЗнч(Исполнители) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
			НоваяЗадача.Исполнитель			= ТекИсполнитель;
        Иначе
			НоваяЗадача.Роль			    = ТекИсполнитель;
		КонецЕсли;	
			
		НоваяЗадача.ОбъектЗадачи 		= БП.ЗадачаВПоддержку;

		НоваяЗадача.Записать();

		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	КонецЦикла;
	
	// Добавим задачи для суперпользователей
	//абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователяПоддержка(БП.Ссылка, БП.ЗадачаВПоддержку, ТочкаМаршрута, ФормируемыеЗадачи);
	
	// Добавим задачи для суперпользователей
	//абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователяПоддержка(БП.Ссылка, БП.ЗадачаВПоддержку, ТочкаМаршрута, ФормируемыеЗадачи);
//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов

КонецПроцедуры

Процедура УсловиеУточнениеИсполнителемПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Уточнение;
	
КонецПроцедуры

Процедура УсловиеУточненоИсполнителюПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.УточнениеИсполнителем ИЛИ ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение;
	
КонецПроцедуры

Процедура ВыборВариантаСогласованоДирМФСОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Согласовано Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованоДирМФС;
		
	ИначеЕсли ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантВыполнено;
		
	ИначеЕсли ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантЗакрыта;
		
	ИначеЕсли ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.Исполнение;	
		
	ИначеЕсли ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеИнициатором Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ТестированиеИнициатором;	
		
	ИначеЕсли ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Уточнение Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.Уточнение;		
		
	ИначеЕсли ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ДополнительноеСогласование;	 
		
	ИначеЕсли ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.СогласованиеЧТЗ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.СогласованиеЧТЗ;
		
	Иначе                                       
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УсловиеОтправитьИсполнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Исполнение;
	
КонецПроцедуры

Процедура ЗакрытаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта;
	
КонецПроцедуры

Процедура ЗакрытьИзУточненияПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта;
	
КонецПроцедуры

Процедура ЗакрытьИзИсполненияПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта;
	
КонецПроцедуры

Процедура ЗакрытьИзПроблемыПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта;
	
КонецПроцедуры

Процедура ЗакрытьИнициаторомПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта;
	
КонецПроцедуры

Процедура ЗакрытьИзДирМФСПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Закрыта;
	
КонецПроцедуры

Процедура ТребуетсяОбновлениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОбновлениеРабочегоПриложения;
	
КонецПроцедуры

Процедура ОбновлениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ОбновлениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);
	
КонецПроцедуры

Процедура ПроблемаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ОшибкаТестирования;
	
КонецПроцедуры

Процедура НеТребуетсяТестированиеДирМФСПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ТестированиеИнициатором;
	
КонецПроцедуры

Процедура ТребуетсяДополнительноеСогласованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.ДополнительноеСогласование;
	
КонецПроцедуры

Процедура ДействиеДополнительноеСогласованиеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  	
	ОткрытьЗаявку();	
	
КонецПроцедуры

Процедура ДействиеДополнительноеСогласованиеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
		МассивПользователей.Добавить(ЗадачаВПоддержку.СотрудникДополнительногоСогласования);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);	
	
КонецПроцедуры

Процедура УсловиеВыполненоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;
	
КонецПроцедуры

Процедура УсловиеВыполнено1ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;
	
КонецПроцедуры

Процедура УсловиеВыполнено2ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;
	
КонецПроцедуры

Процедура УсловиеВыполнено3ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;
	
КонецПроцедуры

Процедура УсловиеВыполнено4ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;	
	
КонецПроцедуры

Процедура УсловиеВыполнено6ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	 Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;
	 
КонецПроцедуры

Процедура УсловиеВыполнена7ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Выполнена;
	
КонецПроцедуры

Процедура ДействиеСогласованиеЧТЗОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  	
	ОткрытьЗаявку();
	
КонецПроцедуры

Процедура ДействиеСогласованиеЧТЗПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	ФормируемыеЗадачи.Очистить();
	Если ЗадачаВПоддержку.Задача = Справочники.абс_ЗадачиДляЗаявокВПоддержку.ПустаяСсылка() тогда
		МассивПользователей = Справочники.РолиИсполнителей.ДирМФС;
	Иначе	
		МассивПользователей = ЗадачаВПоддержку.Задача.Исполнители.ВыгрузитьКолонку("Исполнитель");
		МассивПользователей.Добавить(ЗадачаВПоддержку.Инициатор);
	КонецЕсли;	  		
	СформироватьЗадачуИсполнителямЗаявки(Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивПользователей, Отказ); 			
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗадачаВПоддержку.Статус);
	
КонецПроцедуры

Процедура УсловиеСогласованиеЧТЗПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.СогласованиеЧТЗ;
	
КонецПроцедуры
	
Процедура УсловиеПройденКонтрольПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат) //АБС ВСТАВКА 57369  28.05.2015 16:47:23  Коломиец
	
	Результат = ЗадачаВПоддержку.Статус = Перечисления.абс_СтатусыЗаявокВПоддержку.Согласовано;
	
КонецПроцедуры



