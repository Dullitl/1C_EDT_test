
// Функции для определения ответственных лиц
Функция ПолучитьРуководителяПодразделения(Подразделение, ТекущаяДата = Неопределено)
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДата();
	КонецЕсли;
	
	СтруктураОтбораОтветственного = Новый Структура();
	СтруктураОтбораОтветственного.Вставить("СтруктурнаяЕдиница"	, Подразделение);
	СтруктураОтбораОтветственного.Вставить("ОтветственноеЛицо"	, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	СтруктураОтветственного = РегистрыСведений.ОтветственныеЛицаОрганизаций.ПолучитьПоследнее(ТекущаяДата, СтруктураОтбораОтветственного);
	
	ФизЛицоРуководителя = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураОтветственного) Тогда
		ФизЛицоРуководителя = СтруктураОтветственного.ФизЛицо;
	КонецЕсли;
	
	Возврат ФизЛицоРуководителя;
КонецФункции

Процедура СформироватьЭлектронноеСообщениеИнициатору()
	

КонецПроцедуры

Процедура СформироватьЗадачуПользователю(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Исполнитель)
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();
	НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ЗакупочныйЗаказ) + " " + ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= Исполнитель;
	
	НоваяЗадача.ОбъектЗадачи 		= ЗакупочныйЗаказ;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ ПриСозданииЗадач

Процедура ДействиеСогласованиеДиректоромДирекцииПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	//СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяДиректораДирекции(
	//	глЗначениеПеременной("глТекущийПользователь"));
	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	//	абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(
	//		абс_БизнесПроцессы.ПолучитьПодразделениеДирекции(
	//			глЗначениеПеременной("глТекущийПользователь").абс_Сотрудник.ПодразделениеОрганизации)));
	
	// АБС ИЗМЕНЕНО 20111205 Согласование по организации
	ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(
			абс_БизнесПроцессы.ПолучитьПодразделениеДирекции(
				ПользовательИнициаторБП.абс_Сотрудник.ПодразделениеОрганизации),, ЗакупочныйЗаказ.Организация));
	
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь директор дирекции.", Отказ);
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеСогласованиеРуководителемДепартаментаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	//СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяРуководителяДепартамента(
	//	глЗначениеПеременной("глТекущийПользователь"));
	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	//	абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(
	//		абс_БизнесПроцессы.ПолучитьПодразделениеДепартамента(
	//			глЗначениеПеременной("глТекущийПользователь").абс_Сотрудник.ПодразделениеОрганизации)));	
	
	// АБС ИЗМЕНЕНО 20111205 Согласование по организации
	ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(
			абс_БизнесПроцессы.ПолучитьПодразделениеДепартамента(
				ПользовательИнициаторБП.абс_Сотрудник.ПодразделениеОрганизации),, ЗакупочныйЗаказ.Организация));		
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь руководитель департамента.", Отказ);
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);	

	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеСогласованиеОФКПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	//СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	
	
	ПодразделениеОФК = Константы.абс_ПодразделениеОФК.Получить();
	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяРуководителяПодразделения(
	//	глЗначениеПеременной("глТекущийПользователь"), 
	//	ПодразделениеОФК);
	
	// АБС ВСТАВКА 20120108 АБС-Ф
	// Теперь согласование ЗЗ полностью на стороне ДЗО
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	//	абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК));
	ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,ЗакупочныйЗаказ.Организация));	
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь руководитель ОФК: " + ПодразделениеОФК + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);

	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеСогласованиеРуководителемЦФОПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	//СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	//МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	//	ЗакупочныйЗаказ.ЦФО.абс_Ответственные.ВыгрузитьКолонку("ОтветственныйСотрудник"));
	
	МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЗакупочныйЗаказ.ЦФО,, ЗакупочныйЗаказ.Организация));
	
	Если МассивИсполнителей.Количество() = 0 Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найдено ответственных для ЦФО: " + ЗакупочныйЗаказ.ЦФО + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивИсполнителей);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеСогласованиеРуководителемЦФУПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	// СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	//МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	//	ЗакупочныйЗаказ.ЦФУ.Ответственные.ВыгрузитьКолонку("ОтветственныйСотрудник"));
	
	МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ЗакупочныйЗаказ.ЦФУ,, ЗакупочныйЗаказ.Организация));	
	
	Если МассивИсполнителей.Количество() = 0 Тогда		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найдено ответственных для ЦФУ: " + ЗакупочныйЗаказ.ЦФУ + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивИсполнителей);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеСогласованиеПервымВицеПрезидентомПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ, ЗакупочныйЗаказ.Организация);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеСогласованиеПрезидентомПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ, ЗакупочныйЗаказ.Организация);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеУточнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();
	НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ЗакупочныйЗаказ) + " " + ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= ЗакупочныйЗаказ;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессыПривелегированный.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ЗакупочныйЗаказ, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеУтверждениеРуководителемДФМПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	//СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	ПодразделениеДФМ = Константы.абс_ПодразделениеДФМ.Получить();
	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяРуководителяПодразделения(
	//	глЗначениеПеременной("глТекущийПользователь"), 
	//	ПодразделениеДФМ);
	
	// АБС ВСТАВКА 20120108 АБС-Ф
	// Теперь согласование ЗЗ полностью на стороне ДЗО
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	//	абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДФМ));
	ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДФМ,,ЗакупочныйЗаказ.Организация));	
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь руководитель ДФМ: " + ПодразделениеДФМ + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);	
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеОжидаетДоговорПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();
	НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ЗакупочныйЗаказ) + " " + ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= ЗакупочныйЗаказ;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ЗакупочныйЗаказ, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеОтказПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();
	НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ЗакупочныйЗаказ) + " " + ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= ЗакупочныйЗаказ;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессыПривелегированный.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ЗакупочныйЗаказ, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеСогласованиеУточненияОФКПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
		
	//СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	
	
	ПодразделениеОФК = Константы.абс_ПодразделениеОФК.Получить();
	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяРуководителяПодразделения(
	//	глЗначениеПеременной("глТекущийПользователь"), 
	//	ПодразделениеОФК);
	
	// АБС ВСТАВКА 20120108 АБС-Ф
	// Теперь согласование ЗЗ полностью на стороне ДЗО	
	//ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
	//	абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК));
	ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,ЗакупочныйЗаказ.Организация));	
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь руководитель ОФК: " + ПодразделениеОФК + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);

	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеОбработкаДирККРПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ПодразделениеДирККР = Константы.абс_ПодразделениеДирККР.Получить();
	
	МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДирККР,,ЗакупочныйЗаказ.Организация)); // АБС 19636 - с отбором по организации
	
	Если МассивИсполнителей.Количество() = 0 Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найдено ответственных для дирекции Дир ККР: " + ПодразделениеДирККР + ", организация "+ ЗакупочныйЗаказ.Организация + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивИсполнителей);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

// АБС 19636
Процедура ДействиеСогласованиеДТРвКТТКПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ, Справочники.Организации.НайтиПоНаименованию("КТТК", Истина)); //АБС+ Тупиков 000021365
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеОбработкаДирККРвКТТКПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	ПодразделениеДирККР = Константы.абс_ПодразделениеДирККР.Получить();
	
	МассивИсполнителей = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеДирККР,,Справочники.Организации.НайтиПоНаименованию("КТТК",Истина))); // с отбором по организации
	
	Если МассивИсполнителей.Количество() = 0 Тогда
		
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найдено ответственных для дирекции Дир ККР: " + ПодразделениеДирККР + ", организация "+ ЗакупочныйЗаказ.Организация.ГоловнаяОрганизация + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, МассивИсполнителей);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры
// АБС 19636 КОНЕЦ

Процедура ДействиеЗакупочныйЗаказСогласованПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	абс_БизнесПроцессы.СформироватьЗадачуИсполнителямЗЗ(Ссылка, ТочкаМаршрутаБизнесПроцесса, 
		ФормируемыеЗадачи, ПользовательИнициаторБП);
		
		
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ДействиеИзменениеСпецификацииПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	//АБС ИЗМЕНЕНИЕ 39594  06.03.2014 12:09:09  Шамов
	//абс_БизнесПроцессы.СформироватьЗадачуИсполнителямЗЗ(Ссылка, ТочкаМаршрутаБизнесПроцесса, 
	//	ФормируемыеЗадачи, ПользовательИнициаторБП);	
	мИсполнители = Новый Массив;
	мИсполнители.Добавить(ПользовательИнициаторБП);
	мИсполнители.Добавить(ЗакупочныйЗаказ.Ответственный);
	абс_БизнесПроцессы.СформироватьЗадачуИсполнителямЗЗ(Ссылка, ТочкаМаршрутаБизнесПроцесса, 
		ФормируемыеЗадачи, мИсполнители);	
	//АБС ИЗМЕНЕНИЕ 39594 КОНЕЦ
		
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());			
		
КонецПроцедуры

Процедура ДействиеОбработкаСотрудникомДирККРПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)	Экспорт
	
	ФормируемыеЗадачи.Очистить();	
	
	абс_БизнесПроцессыПривелегированный.СформироватьЗадачуИсполнителямЗЗ(Ссылка, ТочкаМаршрутаБизнесПроцесса, 	
		ФормируемыеЗадачи, абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(ЗакупочныйЗаказ.ОтветственныйСотрудникДирККР));
	
	// Добавим задачи для суперпользователей
	//абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(Ссылка, ЗакупочныйЗаказ, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);		
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура СформироватьЗадачуИсполнителям(ТочкаМаршрута, ФормируемыеЗадачи, Исполнители)
	
	ФормируемыеЗадачи.Очистить();
	
	абс_БизнесПроцессыПривелегированный.СформироватьЗадачуИсполнителямЗЗ(Ссылка, ТочкаМаршрута, ФормируемыеЗадачи, Исполнители);
	
КонецПроцедуры

// Универсальная процедура формирования групповых задач
//  определяет роль по точке маршрута, 
//  получает ответственных по точке маршрута
Процедура СформироватьГрупповуюЗадачу(ТочкаМаршрута, ФормируемыеЗадачи, Отказ, Организация = Неопределено)
	
	ФормируемыеЗадачи.Очистить();
	
	ЗапросИсполнителей = Новый Запрос("ВЫБРАТЬ
	                                  |	РолиИИсполнители.Исполнитель
	                                  |ИЗ
	                                  |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                                  |ГДЕ
	                                  |	РолиИИсполнители.Роль = &РольИсполнителей
	                                  |	И ВЫБОР
	                                  |			КОГДА &ОтборПоОрганизации
	                                  |				ТОГДА РолиИИсполнители.Организация = &Организация
	                                  |			ИНАЧЕ ИСТИНА
	                                  |		КОНЕЦ");
									  
	ЗапросИсполнителей.УстановитьПараметр("ОтборПоОрганизации", НЕ Организация = Неопределено);
	ЗапросИсполнителей.УстановитьПараметр("Организация", Организация);
									  
	РольИсполнителей = Неопределено;									  
	Если ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДиректоромДирекции Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.ДиректорДирекции;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемДепартамента Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительДепартамента;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеОФК Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительОФК;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФО Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительЦФО;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеУтверждениеРуководителемДФМ Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительДФМ;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеРуководителемЦФУ Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.РуководительЦФУ;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПервымВицеПрезидентом Тогда

		РольИсполнителей = Справочники.РолиИсполнителей.ПервыйВицеПрезидент;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеПрезидентом Тогда
		
		РольИсполнителей = Справочники.РолиИсполнителей.Президент;
		
	// АБС 19636	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсСогласованиеЗакупочногоЗаказа.ТочкиМаршрута.ДействиеСогласованиеДТРвКТТК Тогда
		
		//АБС ВСТАВКА 000021365
		ЗапросИсполнителей.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоНаименованию("КТТК",Истина));
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДТРвКТТК;
		
	// АБС 19636 КОНЕЦ	
	КонецЕсли;
	
	Если РольИсполнителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
	
	ВыборкаИсполнителей = ЗапросИсполнителей.Выполнить().Выбрать();
	
	//АБС Изменение 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	Если ВыборкаИсполнителей.Количество() > 0 Тогда
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		
		НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекущаяДата();
		НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ЗакупочныйЗаказ) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		//НоваяЗадача.Исполнитель			= ВыборкаИсполнителей.Исполнитель;
		
		НоваяЗадача.Роль = РольИсполнителей;
		
		НоваяЗадача.ОбъектЗадачи 		= ЗакупочныйЗаказ;
		
		НоваяЗадача.Записать();
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача.Ссылка);
		
	Иначе
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании задач по точке " + ТочкаМаршрута + ". " + Символы.ПС 
			+ "Не найдено ответственных с ролью " + РольИсполнителей + ".", Отказ);
	КонецЕсли;
	//АБС Изменение 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	
// Добавим задачи для суперпользователей
	абс_БизнесПроцессыПривелегированный.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ЗакупочныйЗаказ, ТочкаМаршрута, ФормируемыеЗадачи);
		
КонецПроцедуры


// Процедура "довыполняет" групповые задачи по точке БП.
Процедура ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса)
	// Выполним остальные задачи на данной точке 
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ");
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", Ссылка);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	Пока ВыборкаЗадач.Следующий() Цикл
		ЗадачаОбъект = ВыборкаЗадач.Ссылка.ПолучитьОбъект();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕРРАКТИВНОЙ АКТИВИЗАЦИИ ЗАДАЧ, ОТКРЫВАЮТ ФОРМУ ЗАКУПОЧНОГО ЗАКАЗА

Процедура ДействиеСогласованиеДиректоромДирекцииОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеСогласованиеРуководителемДепартаментаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();

КонецПроцедуры

Процедура ДействиеСогласованиеОФКОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеСогласованиеРуководителемЦФООбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеУтверждениеРуководителемДФМОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();

КонецПроцедуры

Процедура ДействиеСогласованиеРуководителемЦФУОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеСогласованиеПервымВицеПрезидентомОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеСогласованиеПрезидентомОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеУточнениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеОтказОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеОжидаетДоговорОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
		
КонецПроцедуры

Процедура ДействиеСогласованиеУточненияОФКОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();

КонецПроцедуры

Процедура ДействиеОбработкаДирККРОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
		
КонецПроцедуры

// АБС 19636
Процедура ДействиеСогласованиеДТРвКТТКОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
		
КонецПроцедуры

Процедура ДействиеОбработкаДирККРвКТТКОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
		
КонецПроцедуры
// АБС 19636 КОНЕЦ

Процедура ДействиеЗакупочныйЗаказСогласованОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеИзменениеСпецификацииОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ДействиеОбработкаСотрудникомДирККРОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();
	
КонецПроцедуры

Процедура ОткрытьЗакупочныйЗаказ()
	
	ФормаЗЗ = ЗакупочныйЗаказ.ПолучитьФорму("ФормаДокумента");
	
	Если ФормаЗЗ.Открыта() Тогда
		ФормаЗЗ.Активизировать();
	Иначе
		ФормаЗЗ.Открыть();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ ВЫБОРА ВАРИАНТОВ И УСЛОВИЙ

Процедура ВыборВариантаСогласованДиректоромДирекцииОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеРуководителемДепартамента;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеРуководителемЦФО;
	//Проектный учет	
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока Тогда
	//Проектный учет	
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеОФК;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнение;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыборВариантаСогласованРуководителемДепартаментаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеРуководителемЦФО;
		
	//Проектный учет
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока Тогда
   	//Проектный учет
	
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеОФК;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнение;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыборВариантаСогласованЦФООбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	//Проектный учет
	Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока Тогда
    //Проектный учет
	
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеОФК;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнение;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборВариантаУтвержденОФКОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	//АБС ВСТАВКА №47738 НАЧАЛО «1 октября 2014 г.», Пополитов
 	//Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
	Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК Тогда
				
	//\\АБС ВСТАВКА №47738 КОНЕЦ	
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеРуководителемДФМ;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение 
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнение;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборВариантаСогласованДФМОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеРуководителемЦФУ;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнениеУИнициатора;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнениеОФК;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнениеУИнициатора;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован 
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеДТРвКТТК Тогда
		  
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласован;
		  
	КонецЕсли;
	  
		
КонецПроцедуры

Процедура ВыборВариантаУтвержденЦФУОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если    ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован 
		ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам
		ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом 
		ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласован;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение 
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнениеУДФМ;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнениеУИнициатора;	
		
	КонецЕсли;
			
КонецПроцедуры

Процедура УсловиеНеобходимоУтверждениеВицеПрезидентомПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.ИтогСуммаСНДС > абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов,
		Справочники.РолиИсполнителей.ПервыйВицеПрезидент);
		
КонецПроцедуры

Процедура УсловиеСогласованПервымВицеПрезидентомПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
    Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом
		    ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован
			ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор;
			
КонецПроцедуры

Процедура УсловиеНеобходимоСогласованиеПрезидентомПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.ИтогСуммаСНДС > абс_БизнесПроцессы.ПолучитьПределСуммыУтвержденияПоРоли(
		Перечисления.абсВидыБизнесПроцессовТТК.СогласованиеЗакупочныхЗаказов,
		Справочники.РолиИсполнителей.Президент);	
		
КонецПроцедуры

Процедура УсловиеСогласованПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = 	ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован 
				ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор;
КонецПроцедуры

Процедура УсловиеИсполнениеДоговоровПроверкаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
		
	Результат = Истина;
	
	Для Каждого СтрокаДоговора Из ЗакупочныйЗаказ.Договоры Цикл
		
		Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
			Продолжить;
		КонецЕсли;
		
		//родин лимиты по договорам
		Результат = Результат И (
		СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ
		СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ
		СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
		СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
		//родин лимиты по договорам

	КонецЦикла;
	
	Если ЗакупочныйЗаказ.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство
			и ЗакупочныйЗаказ.Договоры.Количество() = 0 Тогда
		Результат = Ложь;
	КонецЕсли;

	Если ЗакупочныйЗаказ.ОборудованиеЧерезОЗК Тогда
		Результат = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УсловиеИсполнениеДоговораПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Истина;
	
	Для Каждого СтрокаДоговора Из ЗакупочныйЗаказ.Договоры Цикл
		
		Если НЕ СтрокаДоговора.ТипДоговора = Перечисления.абс_ТипыДоговоров.Договор Тогда
			Продолжить;
		КонецЕсли;
		
		//родин лимиты по договорам
		Результат = Результат И (СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Исполнение ИЛИ
		СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.Корректировка ИЛИ
		СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.СогласованиеОФКПослеКоррректировки ИЛИ
		СтрокаДоговора.ДоговорКонтрагента.абс_СтатусДоговора = Перечисления.абсСтатусыДоговоров.ОтказПослеКорректировки);
		//родин лимиты по договорам

	КонецЦикла;
	
КонецПроцедуры

Процедура ВыборВариантаСтатусОжиданияДоговораОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если СтатусОжиданияДоговора = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеЦФУ;
	ИначеЕсли СтатусОжиданияДоговора = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПВПрдПоЭкономикеИФинансам Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеПВП;
	ИначеЕсли СтатусОжиданияДоговора = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеПрезидентом Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеПрезидентом;
	КонецЕсли;
	
КонецПроцедуры

Процедура УсловиеУточнениеИнициаторомПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	// Если инициатор запрашивает изменения
	
	Результат = ЗакупочныйЗаказ.Ответственный = глЗначениеПеременной("глТекущийПользователь") 
			  И ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК;
	
КонецПроцедуры

Процедура УсловиеРазрешеноУточнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение;
	
КонецПроцедуры

Процедура ВыборВариантаСтатусУточнеияОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеДиректоромДирекции;
		
	ИначеЕсли СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеРуководителемДепатамента;
		
	ИначеЕсли СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеРуководителемЦФО;
		
	ИначеЕсли СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеОФК;
		
	ИначеЕсли СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеРуководителемДФМ;
		
	ИначеЕсли СтатусУточненияЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФУ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеРуководителемЦФУ;
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура УсловиеНоменклатураСогласованаНСИПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	НоменклатураСогласована = Истина;
	
	Для Каждого СтрокаТовары Из ЗакупочныйЗаказ.Товары Цикл
		//Если СтрокаТовары.Номенкла
	КонецЦикла;
	
	Результат = НоменклатураСогласована;
	
КонецПроцедуры

Процедура УсловиеУточненДляОФКПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УточненоДляОФК;
	
	//Результат =		(ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УточненОФК
	//		 	 ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК) И ЗапросУточненияСОФК;	
	
КонецПроцедуры

Процедура УсловиеУточненоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ;
	
КонецПроцедуры

Процедура УсловиеОборудованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (ЗакупочныйЗаказ.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование ИЛИ ЗакупочныйЗаказ.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство) И НЕ ЗакупочныйЗаказ.УбыткиПрошлыхЛет;
	
КонецПроцедуры

Процедура УсловиеИзменениеСпецификацииСогласованПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации;
	
КонецПроцедуры

Процедура УсловиеИзменениеСпецификацииОжидаетДоговорПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации;
	
КонецПроцедуры

Процедура ВыборВариантаИзменениеСпецификацииОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	СтатусЗЗ = ЗакупочныйЗаказ.Статус;
	
	Если СтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.ОжидаетДоговор Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОжиданиеДоговора;
		
	ИначеЕсли СтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Согласован Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласован;
		
	ИначеЕсли СтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантИсполнение;
		
	ИначеЕсли СтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПодготовка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УсловиеПроверкаОборудованиеИсполнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.Оборудование;
	
КонецПроцедуры

Процедура УсловиеИзменениеСпецификацииИсполнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
		
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ИзменениеСпецификации;
	
КонецПроцедуры

Процедура УсловиеСменаОтветственногоДирККРПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАВЕРШЕНИЯ БИЗНЕС-ПРОЦЕССА

Процедура ЗавершениеСогласованПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ЗавершитьБП(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
	
КонецПроцедуры

Процедура ЗавершениеОтказПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)

	// Обработка точки завершения Отказ
	
КонецПроцедуры

Процедура ЗавершитьБП(СтатусЗавершения)
	//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
	абс_БизнесПроцессыПривелегированный.ЗавершитьБПСогласованияЗЗ(ЗакупочныйЗаказ, СтатусЗавершения);
	//АБС ВСТАВКА 36495  20.02.2014 11:20:34  Родин  Оптимизация бизнес-процессов
КонецПроцедуры

Процедура ОбработкаЗавершитьСогласованиеЗЗОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	//АБС ВСТАВКА №40807 НАЧАЛО «29 апреля 2014 г.», Пополитов  	
	//ЗавершитьБП(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
	ЗавершитьБП(Перечисления.абсСтатусЗакупочногоЗаказа.Отказ);
	//\\АБС ВСТАВКА №40807 КОНЕЦ
	
КонецПроцедуры
         
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		
		Организация = ЗакупочныйЗаказ.Организация;
		
	КонецЕсли;
	
КонецПроцедуры
            
Процедура УсловиеЗавершенПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Завершен;
	
КонецПроцедуры

Процедура УсловиеСтартИзЗавершенПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение;
	
КонецПроцедуры

// АБС 19636
Процедура УсловиеЧерезОЗКПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.ОборудованиеЧерезОЗК или ЗакупочныйЗаказ.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство;
	
КонецПроцедуры
// АБС 19636 КОНЕЦ


Процедура ДействиеПодтверждениеСпецификацииОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗакупочныйЗаказ();

КонецПроцедуры

Процедура ДействиеПодтверждениеСпецификацииПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	абс_БизнесПроцессы.СформироватьЗадачуИсполнителямЗЗ(Ссылка, ТочкаМаршрутаБизнесПроцесса, 
	ФормируемыеЗадачи, ПользовательИнициаторБП);	
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());			
	
КонецПроцедуры

Процедура ВыборВариантаПодтверждениеСпецификацииОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	СтатусЗЗ = ЗакупочныйЗаказ.Статус;
		
	Если СтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.ОбработкаДирККРвКТТК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОбработкаДирККРвКТТК;
		
	ИначеЕсли СтатусЗЗ = Перечисления.абсСтатусЗакупочногоЗаказа.Подготовка Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПодготовка;
		
	КонецЕсли;

КонецПроцедуры

Процедура УсловиеПодтверждениеСпецификацииПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ПодтверждениеСпецификации;
	
КонецПроцедуры

Функция ПроверитьЗакупочныйЗаказЧерезОЗК()
	
	Возврат ЗакупочныйЗаказ.ОборудованиеЧерезОЗК ИЛИ ЗакупочныйЗаказ.ТипЗакупочногоЗаказа = Перечисления.абсТипЗакупочногоЗаказа.ИнвестиционноеСтроительство;
	
КонецФункции

Процедура ВыборВариантаСтатусСтартаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)   //АБС Коломиец 19797
	
	Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Исполнение Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСтартИзЗавершен;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеДиректоромДирекции Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеДиректоромДирекции;
				
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДепартамента Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеРуководителемДепартамента;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемЦФО Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеРуководителемЦФО;
		
	//Вставка 261213 Проектный учет Родин
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРП Тогда
		Результат = ТочкаВыбораВарианта.Варианты.СогласованиеРП;
	//Вставка 261213 Проектный учет Родин	
		
		//ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК Тогда
	//	
	//	Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеОФК;
	//	
	//ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение
	//	  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
	//	
	//	Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнение;
	//	
	//ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
	//	
	//	Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;

КонецПроцедуры

//Вставка 261213 Проектный учет Родин
Процедура СогласованоРППроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Если  ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ  Тогда
		Результат = Ложь;	
	Иначе
		Результат = Истина;	
	КонецЕсли;	
КонецПроцедуры

Процедура СогласованиеРППриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	ПользовательИсполнитель = Новый Массив;
	Для каждого Стр Из ЗакупочныйЗаказ.РаспределениеПоПроектам Цикл
		Если ЗначениеЗаполнено(Стр.Проект.абс_РуководительПроекта) Тогда
			ПользовательРуководитель = Справочники.Пользователи.НайтиПоРеквизиту("абс_Сотрудник",Стр.Проект.абс_РуководительПроекта);

			Если ПользовательРуководитель <> Справочники.Пользователи.ПустаяСсылка() и ПользовательИсполнитель.Найти(ПользовательРуководитель) = Неопределено Тогда
				ПользовательИсполнитель.Добавить(ПользовательРуководитель);	
			КонецЕсли;
						
		КонецЕсли;
	КонецЦикла;
	
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь руководитель проекта.", Отказ);
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);	

	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	
КонецПроцедуры
//Вставка 261213 Проектный учет Родин

//АБС ВСТАВКА 42941  20.05.2014 18:07:31  Шамов
Процедура ОбработкаЗавершитьСогласованиеЗЗОбработкаСогласован(ТочкаМаршрутаБизнесПроцесса)
	ЗавершитьБП(Перечисления.абсСтатусЗакупочногоЗаказа.Согласован);
КонецПроцедуры
//АБС ВСТАВКА 42941 КОНЕЦ 

//АБС ВСТАВКА №47738 НАЧАЛО «1 октября 2014 г.», Пополитов
Процедура ДействиеСогласованиеЦОФКОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;   	
	ОткрытьЗакупочныйЗаказ(); 	

КонецПроцедуры
  
Процедура ДействиеСогласованиеЦОФКПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	ПодразделениеОФК = глЗначениеПеременной("абс_ПодразделениеОФК");
	ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,,ПараметрыСеанса.абс_НастройкиСистемы.ОрганизацияКТТК));	
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь руководитель ОФК: " + ПодразделениеОФК + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус, ПроверитьЗакупочныйЗаказЧерезОЗК());	

КонецПроцедуры

Процедура ВыборВариантаУтвержденЦОФКОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеРуководителемДФМ Тогда
	
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУтверждениеРуководителемДФМ;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Уточнение 
		  ИЛИ ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.ЗапросУточненияУОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнение;
		
	ИначеЕсли ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнениеЦОФКПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеЦОФК; 
	
КонецПроцедуры
//\\АБС ВСТАВКА №47738 КОНЕЦ

//Проектный учет
Процедура НеобходимоСогласованиеРуководителемБлокаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.СогласованиеРуководителемБлока;    	
КонецПроцедуры

Процедура СогласованиеРуководителемБлокаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	абс_БизнесПроцессы.СформироватьЗадачиДляРуководителейБлока(Ссылка,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи,ЗакупочныйЗаказ.ЦФО,Отказ);	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗакупочныйЗаказ.Статус);
КонецПроцедуры

Процедура СогласованиоРуководителемБлокаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ЗакупочныйЗаказ.Статус = Перечисления.абсСтатусЗакупочногоЗаказа.УтверждениеОФК;    	
КонецПроцедуры
//Проектный учет

