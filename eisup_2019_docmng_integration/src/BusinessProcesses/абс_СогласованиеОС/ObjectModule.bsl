Процедура СформироватьЗадачуНаСогласование(Роль,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи)
	
	ФормируемыеЗадачи.Очистить();
	
	Если ТочкаМаршрутаБизнесПроцесса    = БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ПодготовкаОС Тогда
		НоваяЗадача 					= Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
		НоваяЗадача.Дата 				= ТекущаяДата();
		НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ОсновноеСредство) + " " + ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
		НоваяЗадача.Исполнитель 		= ПользовательИнициаторБП;
		НоваяЗадача.Роль 			    = Роль;
		НоваяЗадача.Организация 		= абс_БизнесПроцессыУведомления.ПолучитьОрганизациюСотрудника(ПользовательИнициаторБП);
		НоваяЗадача.ОбъектЗадачи 		= ОсновноеСредство;
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	ИначеЕсли 	ТочкаМаршрутаБизнесПроцесса  = БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.ДействиеПриОтказе Тогда
		НоваяЗадача 					= Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
		НоваяЗадача.Дата 				= ТекущаяДата();
		НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ОсновноеСредство) + " " + ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
		НоваяЗадача.Исполнитель 		= ПользовательИнициаторБП;
		НоваяЗадача.Роль 			    = Роль;
		НоваяЗадача.Организация 		= абс_БизнесПроцессыУведомления.ПолучитьОрганизациюСотрудника(ПользовательИнициаторБП);
		НоваяЗадача.ОбъектЗадачи 		= ОсновноеСредство;
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИИсполнители.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
		|ГДЕ
		|	РолиИИсполнители.Роль = &Роль
		|	И РолиИИсполнители.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Роль", Роль);
		//АБС+ Тупиков 21365
		Если ТочкаМаршрутаБизнесПроцесса  = БизнесПроцессы.абс_СогласованиеОС.ТочкиМаршрута.СогласованиеОСКТТК Тогда 
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПонаименованию("КТТК", Истина));
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РолиИИсполнители.Организация = &Организация", "");
		КонецЕсли;
		//АБС-
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
			НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
			НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
			НоваяЗадача.Дата 				= ТекущаяДата();
			НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.Ссылка.ОсновноеСредство) + " " + ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
			НоваяЗадача.Роль 			    = Роль;
			//	НоваяЗадача.Организация 		= ЗаявкаНаДобавлениеПрав.Организация;
			НоваяЗадача.ОбъектЗадачи 		= ОсновноеСредство.Ссылка;
			
			//НоваяЗадача.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
			ФормируемыеЗадачи.Добавить(НоваяЗадача);
		КонецЕсли;
	КонецЕсли;
	
	// Добавим задачи для суперпользователей
	//абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ЗаявкаНаДобавлениеПрав.Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	//абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаДобавлениеПрав.Статус);	
 КонецПроцедуры
 
 Процедура Условие4ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	 Если ОсновноеСредство.абс_СтатусОС <> Перечисления.абс_СтатусыОС.Отмена  Тогда
		 Результат	= Истина;
	 Иначе
		 Результат	= Ложь;
	 КонецЕсли;	
 КонецПроцедуры

 Процедура Условие2ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	 Результат = абс_БизнесПроцессыУведомления.ПолучитьСтатусОрганизацииСотрудника(ОсновноеСредство);
 КонецПроцедуры
 
Процедура Условие1ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	ПрочиеОС = Ложь;
	МассивГруппОСНеПрочие =  Новый Массив;
	МассивГруппОСНеПрочие.Добавить(Перечисления.ГруппыОС.ТранспортныеСредства);
	МассивГруппОСНеПрочие.Добавить(Перечисления.ГруппыОС.Здания);
	МассивГруппОСНеПрочие.Добавить(Перечисления.ГруппыОС.ЗемельныеУчастки);
	
	Если МассивГруппОСНеПрочие.Найти(ОсновноеСредство.ГруппаОС) = Неопределено Тогда
		ПрочиеОС = Истина;
	КонецЕсли;

	Результат = ПрочиеОС;
	
КонецПроцедуры

Процедура Условие3ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	 Если ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Отказ  Тогда
		 Результат	= Ложь;
	 Иначе
		 Результат	= Истина;
	 КонецЕсли;	
КонецПроцедуры

Процедура Условие5ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	 Если ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Отмена  Тогда
		 Результат	= Ложь;
	 Иначе
		 Результат	= Истина;
	 КонецЕсли;	
КонецПроцедуры

Процедура Условие7ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура Условие6ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	 Если ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Отказ  Тогда
		 Результат	= Ложь;
	 Иначе
		 Результат	= Истина;
	 КонецЕсли;	
КонецПроцедуры

Процедура ВыборВарианта1ОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Отказ Тогда
		Результат	  = ТочкаВыбораВарианта.Варианты.Отказ;
	ИначеЕсли ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Корректировка Тогда
		Результат	  = ТочкаВыбораВарианта.Варианты.Корректировка;
	ИначеЕсли ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Закрыт Тогда	
		Результат     = ТочкаВыбораВарианта.Варианты.Закрыт;
	КонецЕсли;
	
КонецПроцедуры

Процедура Условие8ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПодготовкаЗаявкиПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 СформироватьЗадачуНаСогласование(Справочники.РолиИсполнителей.ИнициаторОС,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи);
КонецПроцедуры

Процедура СогласованиеНаУровнеДЗОПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 СформироватьЗадачуНаСогласование(Справочники.РолиИсполнителей.ОтветственныйОСДЗО,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи);
КонецПроцедуры

Процедура Действие1ПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 СформироватьЗадачуНаСогласование(Справочники.РолиИсполнителей.ОтветственныйОСКТТК,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи);
КонецПроцедуры

Процедура ДействиеПриОтказеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 СформироватьЗадачуНаСогласование(Справочники.РолиИсполнителей.ИнициаторОС,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи);
КонецПроцедуры

Процедура ПолготовкаПрошлаУспешноПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	 Если ОсновноеСредство.абс_СтатусОС = Перечисления.абс_СтатусыОС.Отказ  Тогда
		 Результат	= Ложь;
	 Иначе
		 Результат	= Истина;
	 КонецЕсли;	
КонецПроцедуры

Процедура ДействияПослеСогласованияПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 СформироватьЗадачуНаСогласование(Справочники.РолиИсполнителей.Бухгалтерия,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи);
КонецПроцедуры

Процедура КорректировкаОСПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 СформироватьЗадачуНаСогласование(Справочники.РолиИсполнителей.ИнициаторОС,ТочкаМаршрутаБизнесПроцесса,ФормируемыеЗадачи);
КонецПроцедуры



