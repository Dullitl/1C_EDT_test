
Процедура ЗавершениеОтказПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура УсловиеТребуетсяТЭОПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (ЗначениеЗаполнено(ЗаявкаНаПроект.ТЭО) И ЗаявкаНаПроект.ТЭО.Статус <> Перечисления.абс_СтатусСогласованияТЭО.Согласован);
	
КонецПроцедуры

Процедура УсловиеСогласованияДТРПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = НЕ (ЗаявкаНаПроект.СтатусПроекта = Перечисления.абс_СтатусыПроектов.Отказ);
	
КонецПроцедуры

Процедура УсловияСогласованияДТИПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = НЕ (ЗаявкаНаПроект.СтатусПроекта = Перечисления.абс_СтатусыПроектов.Отказ);

КонецПроцедуры

Процедура УсловиеСогласованияИКПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура СогласованиеДТРОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявкуНаПроект();

КонецПроцедуры

Процедура СогласованиеДТРПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);
	
КонецПроцедуры

Процедура СогласованиеДЭИОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявкуНаПроект();

КонецПроцедуры

Процедура СогласованиеДЭИПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);

КонецПроцедуры

Процедура РазработкаТЭООбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявкуНаПроект();

КонецПроцедуры

Процедура РазработкаТЭОПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);

КонецПроцедуры

Процедура ОткрытьЗаявкуНаПроект()
	
	ФормаЗЗ = ЗаявкаНаПроект.ПолучитьФорму("ФормаДокументаУправляемая");
	
	Если ФормаЗЗ.Открыта() Тогда
		ФормаЗЗ.Активизировать();
	Иначе
		ФормаЗЗ.Открыть();
	КонецЕсли;
	
КонецПроцедуры	

Процедура СформироватьГрупповуюЗадачу(ТочкаМаршрута, ФормируемыеЗадачи, Отказ = Ложь)
	
	ФормируемыеЗадачи.Очистить();
	
	абс_БизнесПроцессы.СформироватьЗадачуИсполнителямЗаявкиНаПроект(ЭтотОбъект.Ссылка, ТочкаМаршрута, ФормируемыеЗадачи);
	
	Если ФормируемыеЗадачи.Количество() = 0 Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании задач. На найдено ответственных.", Отказ);
		Возврат;
	КонецЕсли;
		
	// Добавим задачи для суперпользователей
	//абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ЗаявкаНаПроект, ТочкаМаршрута, ФормируемыеЗадачи);
	
КонецПроцедуры

Процедура ПодготовкаДокументаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявкуНаПроект();
	
КонецПроцедуры

Процедура ПодготовкаДокументаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);
	
КонецПроцедуры

Процедура ОтказСогласованияОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявкуНаПроект();
	

КонецПроцедуры

Процедура ОтказСогласованияПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);
	

КонецПроцедуры

Процедура ТЭОСогласованПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (ЗначениеЗаполнено(ЗаявкаНаПроект.ТЭО) И ЗаявкаНаПроект.ТЭО.Статус = Перечисления.абс_СтатусСогласованияТЭО.Согласован);
	
КонецПроцедуры

Процедура СогласованиеТЭООбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗаявкуНаПроект();
	
КонецПроцедуры

Процедура СогласованиеТЭОПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);
	
КонецПроцедуры


//Вставка Родин проектный учет
Процедура ТехническоеCогласованиеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);
КонецПроцедуры

Процедура ТехническиСогласованоПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Если ЗаявкаНаПроект.СтатусПроекта = Перечисления.абс_СтатусСогласованияТЭО.Отказ Тогда
		Результат = Ложь;
	Иначе 	
		Результат = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ВнеПроектнойДеятельностиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Если Ссылка.ЗаявкаНаПроект.ВидПроекта =Справочники.абс_ВидыПроектов.ВнеПроектов Тогда
		Результат = Истина
	Иначе	
		Результат = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура РазработанИИТРПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Если ЗаявкаНаПроект.СтатусПроекта = Перечисления.абс_СтатусСогласованияТЭО.Отказ Тогда
		Результат = Ложь;
	Иначе 	
		Результат = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура РазработкаИИТРТЭОПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, ЗаявкаНаПроект.СтатусПроекта);
КонецПроцедуры

Процедура ДляВнепроектнойОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	ТекСтатус = ЗаявкаНаПроект.СтатусПроекта;
	
	Если ТекСтатус = Перечисления.абс_СтатусыПроектов.РазработкаИИТРТЭО Тогда
		Результат = ТочкаВыбораВарианта.Варианты.РазработкаИИТР;
	ИначеЕсли  ТекСтатус = Перечисления.абс_СтатусыПроектов.Согласован Тогда	
		Результат = ТочкаВыбораВарианта.Варианты.Согласован;
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.Отказ  Тогда	
		Результат = ТочкаВыбораВарианта.Варианты.Отказ;
	КонецЕсли;
КонецПроцедуры

Процедура ВыборВариантаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	ТекСтатус = ЗаявкаНаПроект.СтатусПроекта;
	
	Если ТекСтатус = Перечисления.абс_СтатусыПроектов.СогласованиеДЭИ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ТехническиСогласовано;
	ИначеЕсли  ТекСтатус = Перечисления.абс_СтатусыПроектов.Согласован Тогда	
		Результат = ТочкаВыбораВарианта.Варианты.Согласован;
	ИначеЕсли ТекСтатус = Перечисления.абс_СтатусыПроектов.Отказ  Тогда	
		Результат = ТочкаВыбораВарианта.Варианты.Отказ;
	КонецЕсли;
КонецПроцедуры
//Вставка Родин проектный учет
