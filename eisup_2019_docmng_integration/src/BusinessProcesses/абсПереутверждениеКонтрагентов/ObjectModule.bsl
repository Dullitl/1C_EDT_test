
// Процедуры создания групповых задач
Процедура ПереутверждениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.Переутверждение Тогда
		Для Каждого Задача Из ФормируемыеЗадачи Цикл
			Задача.Исполнитель = Задача.БизнесПроцесс.ПользовательИнициаторБП;
			
			Задача.ОбъектЗадачи = Контрагент;
			Если ЗначениеЗаполнено(Задача.БизнесПроцесс.Контрагент) Тогда
				//Задача.Наименование = Строка(Задача.БизнесПроцесс.Контрагент) + ". " + Задача.Наименование;
				
				Задача.Наименование = СокрЛП(Контрагент.Наименование) + " "  
					+ Задача.Наименование + ".";
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
//	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
КонецПроцедуры

Процедура ПроверкаСотрудникомДФМПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура ПроверкаСотрудникомПДПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
КонецПроцедуры

Процедура ДействиеСогласованиеКонтрагентаСотрудникомДЭБПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	СформироватьГрупповуюЗадачу(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура СформироватьГрупповуюЗадачу(ТочкаМаршрута, ФормируемыеЗадачи)
	ФормируемыеЗадачи.Очистить();
	
	ЗапросИсполнителей = Новый Запрос("ВЫБРАТЬ
	                                  |	РолиИИсполнители.Исполнитель
	                                  |ИЗ
	                                  |	РегистрСведений.РолиИИсполнители КАК РолиИИсполнители
	                                  |ГДЕ
	                                  |	РолиИИсполнители.Роль = &РольИсполнителей");
									  
	РольИсполнителей = Неопределено;									  
	Если ТочкаМаршрута = БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.Переутверждение Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.Переутверждение;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеПроверкаДФМ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.ПроверкаДФМ;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.ДействиеСогласованиеДЭБ Тогда
		РольИсполнителей = Справочники.РолиИсполнителей.СогласованиеДЭБ;
	КонецЕсли;
	
	Если РольИсполнителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросИсполнителей.УстановитьПараметр("РольИсполнителей", РольИсполнителей);
	
	ВыборкаИсполнителей = ЗапросИсполнителей.Выполнить().Выбрать();
	
	//абс изменение Урал 28.01.2014: Формирование одной задачи
	Если ВыборкаИсполнителей.Количество() Тогда
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
		
		НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекущаяДата();
		//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
		
		НоваяЗадача.Наименование = СокрЛП(Контрагент.Наименование) + " "  
			+ ТочкаМаршрута.НаименованиеЗадачи + ".";
		
		
		НоваяЗадача.Роль			    = РольИсполнителей;
		
		НоваяЗадача.ОбъектЗадачи		= Контрагент;
		
		НоваяЗадача.Записать();
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
		
	КонецЕсли;
	//\\абс Урал
	
КонецПроцедуры

// Процедуры проверки условий и вариантов выполнения БП
Процедура УсловиеСогласованиеПДПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Контрагент.абс_СтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ;
КонецПроцедуры

Процедура ВыборВариантаСогласованиеПДОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	ТекСтатусКонтрагента = Контрагент.абс_СтатусКонтрагента; 
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПроверкаДФМ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеДЭБ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	КонецЕсли;

КонецПроцедуры

Процедура ВыборВариантаСогласованиеДЭБОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
		
	ТекСтатусКонтрагента = Контрагент.абс_СтатусКонтрагента; 
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.ПроверкаДФМ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПроверкаДФМ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантАктивный;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	КонецЕсли;

КонецПроцедуры

// Процедуры обработчики интеррактивной активизации
Процедура ПереутверждениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	ФормаКонтрагента = Контрагент.ПолучитьФорму("ФормаЭлемента",, Контрагент);
	//ФормаКонтрагента.КлючУникальности = Задача;
	
	Если ФормаКонтрагента.Открыта() Тогда
		ФормаКонтрагента.Активизировать();
	Иначе
		ФормаКонтрагента.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ДействиеСогласованиеДЭБОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	ФормаКонтрагента = Контрагент.ПолучитьФорму("ФормаЭлемента",,Контрагент);
	//ФормаКонтрагента.КлючУникальности = Задача;
	
	Если ФормаКонтрагента.Открыта() Тогда
		ФормаКонтрагента.Активизировать();
	Иначе
		ФормаКонтрагента.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ДействиеСогласованиеПДОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	ФормаКонтрагента = Контрагент.ПолучитьФорму("ФормаЭлемента",,Контрагент);
	//ФормаКонтрагента.КлючУникальности = Задача;
	
	Если ФормаКонтрагента.Открыта() Тогда
		ФормаКонтрагента.Активизировать();
	Иначе
		ФормаКонтрагента.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ДействиеПроверкаДФМОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	ФормаКонтрагента = Контрагент.ПолучитьФорму("ФормаЭлемента",,Контрагент);
	//ФормаКонтрагента.КлючУникальности = Задача;
	
	Если ФормаКонтрагента.Открыта() Тогда
		ФормаКонтрагента.Активизировать();
	Иначе
		ФормаКонтрагента.Открыть();
	КонецЕсли;

КонецПроцедуры

// Процедуры обработчики ПриВыполненииЗадач
Процедура ПереутверждениеПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура ДействиеПроверкаДФМПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура ДействиеСогласованиеПДПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура ДействиеСогласованиеДЭБПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура ВыполнитьЗадачиПоТочкеБП(ТочкаМаршрутаБизнесПроцесса)
	// Выполним остальные задачи на данной точке 
	ЗапросЗадач = Новый Запрос("ВЫБРАТЬ
	                           |	абсЗадачаДоговора.Ссылка
	                           |ИЗ
	                           |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                           |ГДЕ
	                           |	абсЗадачаДоговора.БизнесПроцесс = &БизнесПроцесс
	                           |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                           |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ");
	ЗапросЗадач.УстановитьПараметр("БизнесПроцесс", Ссылка);
	ЗапросЗадач.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	
	ВыборкаЗадач = ЗапросЗадач.Выполнить().Выбрать();
	
	Пока ВыборкаЗадач.Следующий() Цикл
		ЗадачаОбъект = ВыборкаЗадач.Ссылка.ПолучитьОбъект();
		
		ЗадачаОбъект.Выполнить();
	КонецЦикла;
КонецПроцедуры

// Процедуры обработчики ПередСтартом
Процедура СтартСменаРеквизитовПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ТочкаСтарта = ТочкаМаршрутаБизнесПроцесса;
	
КонецПроцедуры

Процедура СтартПереутверждениеПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ТочкаСтарта = ТочкаМаршрутаБизнесПроцесса;

КонецПроцедуры

// Процедуры обработчики ПриЗавершении
Процедура ЗавершениеОтказПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ЗавершитьБП(Контрагент.абс_СтатусКонтрагента);
	
	абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);
	
КонецПроцедуры

Процедура ЗавершениеУтвержденПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ЗавершитьБП(Контрагент.абс_СтатусКонтрагента);
	
абс_БизнесПроцессыУведомления.ЗарегестрироватьУведомление(Ссылка, ТочкаМаршрутаБизнесПроцесса, Контрагент.абс_СтатусКонтрагента);	
	
КонецПроцедуры


Процедура ЗавершитьБП(СтатусЗавершения)
	
	// Закроем задачи проверки контрагента по договорам
	СтатусДоговора = Неопределено;
	
	Если СтатусЗавершения = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
		СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ;
	ИначеЕсли ТочкаСтарта = БизнесПроцессы.абсПереутверждениеКонтрагентов.ТочкиМаршрута.СтартСменаРеквизитов Тогда
		СтатусДоговора = Перечисления.абсСтатусыДоговоров.ПроверкаДФМ;
	Иначе
		СтатусДоговора = Перечисления.абсСтатусыДоговоров.Отказ;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	абсЗадачаДоговора.Ссылка,
	                      |	абсЗадачаДоговора.ОбъектЗадачи КАК ДоговорКонтрагента
	                      |ИЗ
	                      |	Задача.абсЗадачаДоговора КАК абсЗадачаДоговора
	                      |ГДЕ
	                      |	абсЗадачаДоговора.ОбъектЗадачи ССЫЛКА Справочник.ДоговорыКонтрагентов
	                      |	И абсЗадачаДоговора.ОбъектЗадачи.Владелец = &Контрагент
	                      |	И абсЗадачаДоговора.ТочкаМаршрута = &ТочкаМаршрута
	                      |	И абсЗадачаДоговора.Выполнена = ЛОЖЬ
	                      |	И абсЗадачаДоговора.ОбъектЗадачи.абс_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.абсСтатусыДоговоров.ПроверкаКонтрагента)");
						  
						  
	Запрос.УстановитьПараметр("Контрагент"		, Контрагент);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	, БизнесПроцессы.абсСогласованиеДоговоров.ТочкиМаршрута.ДействиеПроверкаКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Сначала изменим статус в карточке договора
		// потом в регистре
		// потом выполним задачу
		ДоговорОбъект = Выборка.ДоговорКонтрагента.ПолучитьОбъект();
		
		ДоговорОбъект.абс_СтатусДоговора = СтатусДоговора;
		
		ДоговорОбъект.абс_ПричинаИзмененияСтатуса = "Контрагент перешел в статус " + СокрЛП(Контрагент.абс_СтатусКонтрагента);
		
		ДоговорОбъект.Записать();
		
		//ДоговорОбъект.ЗаписатьНовыйСтатус(ДоговорОбъект.абс_СтатусДоговора, "Контрагент перешел в статус " + СокрЛП(ДоговорОбъект.абс_СтатусДоговора));
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗадачаОбъект.ВыполнитьЗадачу();	
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыборВариантаПроверкаДФМОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	ТекСтатусКонтрагента = Контрагент.абс_СтатусКонтрагента; 
	
	Если ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.СогласованиеДЭБ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеДЭБ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Отказ Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
	ИначеЕсли ТекСтатусКонтрагента = Перечисления.абсСтатусыКонтрагентов.Активный Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ВариантКонтрагентИзБиллинга;
	КонецЕсли;	
		
КонецПроцедуры






