
// Процедуры-обработки выбора вариантов

Процедура ВыборВариантаСогласованОФКОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	СтатусПервичногоДокумента = ПервичныйДокумент.абс_Статус; 
	
	Если СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнениеОФК;
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОбработкаБухгалтером;
		
	Иначе
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыборВариантаОбработканоСкладомОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	СтатусПервичногоДокумента = ПервичныйДокумент.абс_Статус; 
	
	Если СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Уточнение Тогда
			
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнение;	
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.ОбработкаБухгалтером Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОбработаноСкладом;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборВариантаОбработаноБухгалтериейОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	СтатусПервичногоДокумента = ПервичныйДокумент.абс_Статус; 
	
	Если СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Отказ Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОтказ;
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.УточнениеБухгалтерией Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантУточнениеБухгалтером;
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеОФК;
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Завершен Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОбработан;

	КонецЕсли;

КонецПроцедуры

Процедура ВыборВариантаУточнениеОФКОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
			
	СтатусПервичногоДокумента = ПервичныйДокумент.абс_Статус; 
	
	Если СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантСогласованиеОФК;
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПодготовка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборВариантаУточнениеБухгалтеромОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	СтатусПервичногоДокумента = ПервичныйДокумент.абс_Статус; 
	
	Если СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.Подготовка Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантПодготовка;
		
	ИначеЕсли СтатусПервичногоДокумента = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером Тогда
		
		Результат = ТочкаВыбораВарианта.Варианты.ВариантОбработкаБухгалтерией;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УсловиеСогласованиеОФКПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПервичныйДокумент.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.СогласованиеОФК;
	
КонецПроцедуры

Процедура УсловиеОбработкаПринятыхДокументовПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПервичныйДокумент.абс_Статус = Перечисления.абс_СтатусыПервичныхДокументов.ДокументыПринятыБухгалтером;
	
КонецПроцедуры

// Процедуры-обработки создания групповых задач

Процедура ДействиеУточнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();

	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
	//
	НоваяЗадача.Наименование = СокрЛП(ПервичныйДокумент) + " "  
		+ ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= ПервичныйДокумент;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);	
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ПервичныйДокумент, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	

КонецПроцедуры

Процедура ДействиеОтказПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();

	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
	//
	НоваяЗадача.Наименование = СокрЛП(ПервичныйДокумент) + " "  
		+ ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= ПервичныйДокумент;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);	
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ПервичныйДокумент, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	

КонецПроцедуры

Процедура ДействиеСогласованиеОФКПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ПодразделениеОФК = Константы.абс_ПодразделениеОФК.Получить();
	
	ПользовательИсполнитель = абс_БизнесПроцессы.ПолучитьПользователяПоСотруднику(
		абс_БизнесПроцессы.ПолучитьОтветственныхПодразделения(ПодразделениеОФК,, ПервичныйДокумент.Организация));
		
	Если НЕ ЗначениеЗаполнено(ПользовательИсполнитель) Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Не найден пользователь руководитель ОФК: " + ПодразделениеОФК + ".", Отказ);
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, ПользовательИсполнитель);

КонецПроцедуры

Процедура ДействиеОбработкаСкладомПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи,
		абс_БизнесПроцессы.ПолучитьСотрудниковРоли(Справочники.РолиИсполнителей.СотрудникСклада));
	
КонецПроцедуры

Процедура ДействиеОбработкаБухгалтериейПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	// АБС ВСТАВКА 3123
	// Если биллинговая реализация, то отправляем ее на одного пользователя.
	Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		ЭтоБиллинг = ПервичныйДокумент.абс_СчетНаОплатуПокупателю.Биллинг;
		
		Если ЭтоБиллинг Тогда
			СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи,
				абс_БизнесПроцессы.ПолучитьПользователейРоли(Справочники.РолиИсполнителей.БУ_Биллнг, ПервичныйДокумент.Организация), ЭтоБиллинг);
				
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА 3123
	
	// АБС ИЗМЕНЕНО Фролов 20120409
	// Не формируем групповые задачи, формируем ролевую задачу на бухгалтерию
	//СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи,
	//	абс_БизнесПроцессы.ПолучитьПользователейРоли(Справочники.РолиИсполнителей.СогласованиеБухгалтером, ПервичныйДокумент.Организация));
		
	СформироватьЗадачуБухгалтеру(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)	
	// АБС ИЗМЕНЕНО Фролов 20120409 КОНЕЦ
		
		
КонецПроцедуры

Процедура ДействиеОприходованоПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
		
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();

	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
	//
	НоваяЗадача.Наименование = СокрЛП(ПервичныйДокумент) + " "  
		+ ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= ПервичныйДокумент;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);	
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ПервичныйДокумент, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	

КонецПроцедуры

Процедура ДействиеУточнениеОФКПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
		
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	НоваяЗадача.Дата 				= ТекущаяДата();

	//НоваяЗадача.Наименование 		= ТочкаМаршрута.НаименованиеЗадачи + ", " + Строка(ЭтотОбъект.Ссылка.Контрагент);
	//
	НоваяЗадача.Наименование = СокрЛП(ПервичныйДокумент) + " "  
		+ ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи + ".";
	
	НоваяЗадача.Исполнитель			= ПользовательИнициаторБП;
	
	НоваяЗадача.ОбъектЗадачи 		= ПервичныйДокумент;
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);	
	
	// Добавим задачи для суперпользователей
	абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ПервичныйДокумент, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи);	

КонецПроцедуры

Процедура ДействиеОбработкаПринятыхДокументовПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	// АБС ВСТАВКА 3123
	// Если биллинговая реализация, то отправляем ее на одного пользователя.
	Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ЭтоБиллинг = ПервичныйДокумент.абс_СчетНаОплатуПокупателю.Биллинг;
		
		Если ЭтоБиллинг Тогда
			СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи,
				абс_БизнесПроцессы.ПолучитьПользователейРоли(Справочники.РолиИсполнителей.БУ_Биллнг, ПервичныйДокумент.Организация), ЭтоБиллинг);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА 3123
		
	// АБС ИЗМЕНЕНО Фролов 20120409
	// Не формируем групповые задачи, формируем ролевую задачу на бухгалтерию
	//СформироватьЗадачуИсполнителям(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи,
	//	абс_БизнесПроцессы.ПолучитьПользователейРоли(Справочники.РолиИсполнителей.СогласованиеБухгалтером, ПервичныйДокумент.Организация));
		
	СформироватьЗадачуБухгалтеру(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)	
	// АБС ИЗМЕНЕНО Фролов 20120409 КОНЕЦ	
		
КонецПроцедуры

Процедура ДействиеУточнениеОФКОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();
	
КонецПроцедуры

Процедура СформироватьЗадачуБухгалтеру(ТочкаМаршрута, ФормируемыеЗадачи, Отказ) Экспорт
	
	ФормируемыеЗадачи.Очистить();
	
	НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
	НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
	НоваяЗадача.Дата 				= ТекущаяДата();
	НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.ПервичныйДокумент) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";

	НоваяЗадача.Исполнитель			= Справочники.Пользователи.НайтиПоКоду("Согласование бухгалтером");
	НоваяЗадача.Роль				= Справочники.РолиИсполнителей.СогласованиеБухгалтером;

	НоваяЗадача.ОбъектЗадачи 		= ПервичныйДокумент;

	НоваяЗадача.Записать();

	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

Процедура СформироватьЗадачуИсполнителям(ТочкаМаршрута, ФормируемыеЗадачи, Исполнители, Биллинг = Ложь) Экспорт
	
	МассивИсполнителей = Новый Массив();
	
	Если ТипЗнч(Исполнители) = Тип("СписокЗначений") Тогда
		Для Каждого ЗначениеСписка Из Исполнители Цикл
			МассивИсполнителей.Добавить(ЗначениеСписка.Значение);
		КонецЦикла;
	ИначеЕсли НЕ ТипЗнч(Исполнители) = Тип("Массив") Тогда
		МассивИсполнителей.Добавить(Исполнители);
	Иначе
		МассивИсполнителей = Исполнители;
	КонецЕсли;		
	
	ФормируемыеЗадачи.Очистить();
	
	
	Для Каждого ТекИсполнитель Из МассивИсполнителей Цикл
		
		НоваяЗадача = Задачи.абсЗадачаДоговора.СоздатьЗадачу();

		НоваяЗадача.БизнесПроцесс 		= ЭтотОбъект.Ссылка;
		НоваяЗадача.ТочкаМаршрута 		= ТочкаМаршрута;
		НоваяЗадача.Дата 				= ТекущаяДата();
		НоваяЗадача.Наименование 		= Строка(ЭтотОбъект.ПервичныйДокумент) + " " + ТочкаМаршрута.НаименованиеЗадачи + ".";

		НоваяЗадача.Исполнитель			= ТекИсполнитель;

		НоваяЗадача.ОбъектЗадачи 		= ПервичныйДокумент;

		НоваяЗадача.Записать();

		ФормируемыеЗадачи.Добавить(НоваяЗадача);
		
	КонецЦикла;
	
	// Добавим задачи для суперпользователей
	Если НЕ Биллинг Тогда
		абс_БизнесПроцессы.ДобавитьЗадачиСуперПользователя(ЭтотОбъект.Ссылка, ПервичныйДокумент, ТочкаМаршрута, ФормируемыеЗадачи);
	КонецЕсли;
	
КонецПроцедуры


// Процедуры-обработчики открытия первичных документов

Процедура ДействиеСогласованиеОФКОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();
	
КонецПроцедуры

Процедура ДействиеУточнениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();

КонецПроцедуры

Процедура ДействиеОбработкаСкладомОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();

КонецПроцедуры

Процедура ДействиеОтказОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();

КонецПроцедуры

Процедура ДействиеОбработкаБухгалтериейОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();

КонецПроцедуры

Процедура ДействиеОприходованоОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();

КонецПроцедуры

Процедура ДействиеОбработкаПринятыхДокументовОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
				
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПервичныйДокумент();

КонецПроцедуры

Процедура ОткрытьПервичныйДокумент()
	
	ФормаДокумента = ПервичныйДокумент.ПолучитьФорму("ФормаДокумента");
	
	Если ФормаДокумента.Открыта() Тогда
		ФормаДокумента.Активизировать();
	Иначе
		ФормаДокумента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		
		Организация = ПервичныйДокумент.Организация;
		
	КонецЕсли;
	
КонецПроцедуры
