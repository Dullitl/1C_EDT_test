//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ
// 

// Обработчик события "ПередЗаписью".
// Проверяет возможность изменения записей регистра.
// Проверяет заполнение корреспонденции.
// Замещает пустные значения субконто составного типа значением Неопределено.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если Количество()>0 Тогда
	    Заголовок = СокрЛП(ЭтотОбъект.Отбор.Регистратор.Значение);
		ПеремДокумент = ЭтотОбъект.Отбор.Регистратор.Значение;
	Иначе
		Возврат;
	КонецЕсли; 
	
	//АБС ВСТАВКА 18677,38006 НАЧАЛО
	НужнаяГруппаНеНДС = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
	НужнаяГруппаНДС   = абс_СерверныеФункции.абс_ВыбиратьПериодОтраженияДляНДС();
	//\\АБС ВСТАВКА 18677,38006 КОНЕЦ	
	
	
	//Филиализация
	Если ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьМеханизмФизиализации 
			и ложь
		Тогда
		
		ас_Регистратор = ЭтотОбъект.Отбор.Регистратор.Значение;
		НеПроверятьНаЗакрытыеСчета = Ложь;
		ПроверкаНаДатуРеорганизацииНеТребуется = Ложь;

		Если ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ОперацияБух") ИЛИ ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	абс_ПереносДанных.Ссылка
			|ИЗ
			|	Документ.абс_ПереносДанных КАК абс_ПереносДанных
			|ГДЕ
			|	(абс_ПереносДанных.ДокументДвижений = &ДокументДвижений
			|			ИЛИ абс_ПереносДанных.ДокументДвиженийОпераияБух = &ДокументДвижений)";
			
			Запрос.УстановитьПараметр("ДокументДвижений",ас_Регистратор);
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				НеПроверятьНаЗакрытыеСчета = Истина;
				ПроверкаНаДатуРеорганизацииНеТребуется = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НеПроверятьНаЗакрытыеСчета Тогда
			
			ДатаРеорганизации = Неопределено;
			Если ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") 
				ИЛИ ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") 
				ИЛИ ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
				ИЛИ ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
				ИЛИ ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") 
				ИЛИ ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")  Тогда
				
				ПроверкаНаДатуРеорганизацииНеТребуется = Истина;
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НАЧАЛОПЕРИОДА(абс_ДатаРеорганизацииДЗО.ДатаРеорганизации, ДЕНЬ) КАК ДатаРеорганизации
			|ИЗ
			|	РегистрСведений.абс_ДатаРеорганизацииДЗО КАК абс_ДатаРеорганизацииДЗО
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(абс_ДатаРеорганизацииДЗО.ДатаРеорганизации, ДЕНЬ)";
			
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ДатаРеорганизации = ВыборкаДетальныеЗаписи.ДатаРеорганизации;	
			КонецЕсли;	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетУчета,
			|	абс_ЗакрытыеСчетаУчетаСрезПоследних.Организация
			|ИЗ
			|	РегистрСведений.абс_ЗакрытыеСчетаУчета.СрезПоследних(, организация=&организация) КАК абс_ЗакрытыеСчетаУчетаСрезПоследних
			|ГДЕ
			|	абс_ЗакрытыеСчетаУчетаСрезПоследних.ДатаЗакрытия < &ТекущаяДата
			|	И абс_ЗакрытыеСчетаУчетаСрезПоследних.СчетЗакрыт";
			
			Запрос.УстановитьПараметр("ТекущаяДата", абс_СерверныеФункции.ПолучитьДатуСервера());
			Запрос.УстановитьПараметр("организация", ЭтотОбъект[0].организация);
			ТзЗакрытыеСчета = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	//Филиализация
	
	БухгалтерскийУчет.СвернутьНаборЗаписейРегистраБухгалтерии(ЭтотОбъект);
	Для Каждого Проводка Из ЭтотОбъект Цикл
		
		//АБС ВСТАВКА 36724  19.12.2013 14:19:30  Шамов
		//проверка корректного заполнения измерений и реквизитов
		//валютного и количественного учета
		Если НЕ Проводка.СчетДт.Валютный И НЕ (Проводка.ВалютаДт = Неопределено) Тогда
			Проводка.ВалютаДт = Неопределено;
		КонецЕсли;
		Если НЕ Проводка.СчетКт.Валютный И НЕ (Проводка.ВалютаКт = Неопределено) Тогда
			Проводка.ВалютаКт = Неопределено;
		КонецЕсли;
		
		Если НЕ Проводка.СчетДт.Количественный И НЕ (Проводка.КоличествоДт = Неопределено) Тогда
			Проводка.КоличествоДт = Неопределено;
		КонецЕсли;
		Если НЕ Проводка.СчетКт.Количественный И НЕ (Проводка.КоличествоКт = Неопределено) Тогда
			Проводка.КоличествоКт = Неопределено;
		КонецЕсли;
		
		Если НЕ Проводка.СчетДт.Валютный И НЕ (Проводка.ВалютнаяСуммаДт = Неопределено) Тогда
			Проводка.ВалютнаяСуммаДт = Неопределено;
		КонецЕсли;
		Если НЕ Проводка.СчетКт.Валютный И НЕ (Проводка.ВалютнаяСуммаКт = Неопределено) Тогда
			Проводка.ВалютнаяСуммаКт = Неопределено;
		КонецЕсли;
		//АБС ВСТАВКА 36724 КОНЕЦ
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) И НЕ Проводка.СчетКт.Забалансовый Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет дебета.",Отказ,Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетКт) И НЕ Проводка.СчетДт.Забалансовый Тогда
			ttk_ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет кредита.",Отказ,Заголовок);
		КонецЕсли;
		
		//абс н
		// {{KM WARE Агапов Н.А. Заявка №34608 29.10.2015 начало
		//РезПроверки=ПроверитьЗаполнениеАналитики(Проводка.СчетДт,Проводка.СчетКт,Проводка.СубконтоДт,Проводка.СубконтоКт, Проводка.Период);		
		//Если РезПроверки Тогда
		//	Отказ=Истина;
		//	Возврат;
		//КонецЕсли;
		//абс к
        // }}KM WARE Агапов Н.А. Заявка №34608 29.10.2015 окончание
		
		//Филиализация
		Если ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьМеханизмФизиализации 
			и ложь
			Тогда
			
			Если Не НеПроверятьНаЗакрытыеСчета Тогда
				СчетДляПроверкиДт = Неопределено;	
				СчетДляПроверкиКт = Неопределено;	
				НеобходимаПроверка = Истина;
				
				Для каждого Стр Из ТзЗакрытыеСчета Цикл
					
					Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
						Если (Проводка.СчетДт.ПринадлежитЭлементу(Стр.СчетУчета) ИЛИ Проводка.СчетДт = Стр.СчетУчета) И (Стр.Организация = Проводка.Организация)  Тогда
							СчетДляПроверкиДт =	Стр.СчетУчета;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
						Если (Проводка.СчетКт.ПринадлежитЭлементу(Стр.СчетУчета) ИЛИ Проводка.СчетКт = Стр.СчетУчета) И (Стр.Организация = Проводка.Организация) Тогда
							СчетДляПроверкиКт =	Стр.СчетУчета;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;	                                          
						
				Если ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") ИЛИ ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
					Если НЕ (СчетДляПроверкиДт <> Неопределено И СчетДляПроверкиКт <> Неопределено) Тогда
						НеобходимаПроверка = Не ас_Регистратор.абс_НеПроверятьНаЗакрытыеСчета;	
						
						Если ПараметрыСеанса.абс_НастройкиСистемы.ВсегдаПроверятьНаЗакрытыеСчета Тогда
							НеобходимаПроверка = Истина;
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;
				
				Если ДатаРеорганизации <> Неопределено Тогда
					Если ДатаРеорганизации = НачалоДня(ас_Регистратор.Дата) Тогда
						НеобходимаПроверка = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если СчетДляПроверкиДт <> Неопределено И НеобходимаПроверка Тогда
					ТекстСообщения = "Счет " + СокрЛП(СчетДляПроверкиДт.Код) + " закрыт. Запрещается проведение, отмена проведения и установка пометки на удаление!";
					ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
					Отказ = Истина;
				КонецЕсли;
				
				Если СчетДляПроверкиКт <> Неопределено И НеобходимаПроверка  Тогда
					ТекстСообщения = "Счет " + СокрЛП(СчетДляПроверкиКт.Код) + " закрыт. Запрещается проведение, отмена проведения и установка пометки на удаление!";
					ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			

		КонецЕсли;
		//Филиализация
		
		// Приведение пустых значений субконто составного типа.
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			Если Субконто.Ключ.ТипЗначения.Типы().Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если Субконто.Ключ.ТипЗначения.Типы().Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		           		
		Если Проводка.Период = '00010101' Тогда
			Проводка.Период = ПеремДокумент.Дата;
			Проводка.Организация = ПеремДокумент.Организация;
		КонецЕсли;
		
		// АБС Коломиец начало
		Если Проводка.Период >= '20120101000000' Тогда
			
			ас_Регистратор = ЭтотОбъект.Отбор.Регистратор.Значение; 
						
			//АБС ВСТАВКА №44479 НАЧАЛО «3 июня 2014 г.», Пополитов
			ЗаполнятьПроверятьПериодыОтражения(Проводка, ас_Регистратор, НужнаяГруппаНеНДС, НужнаяГруппаНДС, "Дт");
			ЗаполнятьПроверятьПериодыОтражения(Проводка, ас_Регистратор, НужнаяГруппаНеНДС, НужнаяГруппаНДС, "Кт");
			//\\АБС ВСТАВКА №44479 КОНЕЦ  			
			
		КонецЕсли;
		// АБС Коломиец окончание
		
		//АБС ВСТАВКА №000029622,29620 НАЧАЛО «17 декабря 2014 г.», Пополитов
		ОбщегоНазначения.абс_ПроверитьТипСубконто(Проводка, Отказ);	
		//\\АБС ВСТАВКА №000029622,29620 КОНЕЦ	
		
	КонецЦикла;
	
	//Филиализация
	Если ПараметрыСеанса.абс_НастройкиСистемы.ИспользоватьМеханизмФизиализации 
			и ложь
		Тогда
		Если ДатаРеорганизации <> Неопределено Тогда
			МассивДоступныхРолей = абс_БизнесПроцессы.ПолучитьСписокДоступныхРолейПользователя();
			Если (ДатаРеорганизации = НачалоДня(ас_Регистратор.Дата)) И (Не ПроверкаНаДатуРеорганизацииНеТребуется)
				И (МассивДоступныхРолей.Найти(Справочники.РолиИсполнителей.ПроведениеОперацийДатойРеорганизации) = Неопределено)
				И (НЕ абс_Филиализация.ЭтоОперацияВГР(ас_Регистратор)) Тогда
				ТекстСообщения = "Бухгалтерский учет : В день реорганизации запрещается проведение, отмена проведения и установка пометки на удаление!";
				ttk_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Филиализация
	
	//АБС ВСТАВКА   03.06.2014  Навценя
	ПроверитьКонтролируемыеДоговора(Отказ);
	//АБС ВСТАВКА  КОНЕЦ	
	
	//АБС ВСТАВКА 46201  29.09.2014 15:27:28  Шамов
	Проверить_00010_63(Отказ);
	//АБС ВСТАВКА 46201 КОНЕЦ
	
КонецПроцедуры // ПередЗаписью()

//АБС ВСТАВКА №44479,37834 НАЧАЛО «3 июня 2014 г.», Пополитов
Процедура ЗаполнятьПроверятьПериодыОтражения(Проводка, ас_Регистратор, НужнаяГруппаНеНДС, НужнаяГруппаНДС, ВидДтКт)
	//Бобылев А.А. 27.06.2018
	Если ТипЗнч(ас_Регистратор.ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ас_Регистратор.Организация = Справочники.Организации.НайтиПоКоду("000000001") Тогда
		Если ЗначениеЗаполнено(ас_Регистратор.ЛогЗагрузкиИзАСР) И ЗначениеЗаполнено(ас_Регистратор.абс_ДатаПолученияСчета) Тогда
			Если Год(ас_Регистратор.Дата) <> Год(ас_Регистратор.абс_ДатаПолученияСчета) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ас_Регистратор.ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") И ас_Регистратор.Организация = Справочники.Организации.НайтиПоКоду("000000001") Тогда
		Если ЗначениеЗаполнено(ас_Регистратор.ЛогЗагрузкиИзАСР) И ЗначениеЗаполнено(ас_Регистратор.ДатаЗагрузкиИзАСР) Тогда //И Источник.ЛогЗагрузкиИзАСР.МестонахождениеБиллинга.АгрегированнаяЗагрузка
			Если Год(ас_Регистратор.Дата)<> Год(ас_Регистратор.ДатаЗагрузкиИзАСР) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Бобылев А.А.
	
	ПВХ_ПериодыОтражения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения;
	ЗначениеСчета = Проводка["Счет"+ВидДтКт];
	
	Если ЗначениеСчета.ВидыСубконто.Найти(ПВХ_ПериодыОтражения) = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//АБС ВСТАВКА 000027436  31.10.2014 13:40:54  Манжела
	Если ТипЗнч(ас_Регистратор) = Тип("ДокументСсылка.ОперацияБух") И ас_Регистратор.абс_РучноеРедактированиеПо6802 Тогда
		Возврат;
	КонецЕсли;
	//АБС ВСТАВКА 000027436 КОНЕЦ

	
	Субконты = Проводка["Субконто"+ВидДтКт];        
	ЗначениеПроводкиПериодыОтражения = Субконты[ПВХ_ПериодыОтражения]; 
	СубконтоИсключение = абс_СубконтоНДС_Исключение(ЗначениеСчета,Субконты[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет]);
	ЭтоНеСчетНДС = ЭтоНеСчетНДС(ЗначениеСчета);
	ЗаполнятьПроверятьПериодыОтражения = не (не ЭтоНеСчетНДС и СубконтоИсключение);  			
		
	Если не ЗаполнятьПроверятьПериодыОтражения
		или (ЗначениеЗаполнено(ЗначениеПроводкиПериодыОтражения) 
			и ЭлементВНужнойПапке(ЗначениеСчета,ЗначениеПроводкиПериодыОтражения,НужнаяГруппаНеНДС,НужнаяГруппаНДС)) Тогда
		Возврат;
	КонецЕсли;	
	
	НовоеЗначениеПериодОтражения = Неопределено;
	
	Если ас_Регистратор.Метаданные().Реквизиты.Найти("абс_ПериодОтражения91") <> Неопределено 
		И ЗначениеЗаполнено(ас_Регистратор.абс_ПериодОтражения91) И ЭтоНеСчетНДС
		И ЭлементВНужнойПапке(ЗначениеСчета,ас_Регистратор.абс_ПериодОтражения91,НужнаяГруппаНеНДС,НужнаяГруппаНДС, Истина) Тогда
		
		НовоеЗначениеПериодОтражения = ас_Регистратор.абс_ПериодОтражения91;
		
	ИначеЕсли ас_Регистратор.Метаданные().Реквизиты.Найти("абс_ПериодОтражения") <> Неопределено 
		И ЗначениеЗаполнено(ас_Регистратор.абс_ПериодОтражения)
		И ЭлементВНужнойПапке(ЗначениеСчета,ас_Регистратор.абс_ПериодОтражения,НужнаяГруппаНеНДС,НужнаяГруппаНДС, Истина) Тогда
		
		Если ЭтоНеСчетНДС Тогда
			НовоеЗначениеПериодОтражения = абс_СерверныеФункции.КорректныйПериодОтраженияНеДляНДС(ас_Регистратор.абс_ПериодОтражения,
																									ЗначениеПроводкиПериодыОтражения,
																									Проводка.Период);
		Иначе
			НовоеЗначениеПериодОтражения = абс_СерверныеФункции.КорректныйПериодОтраженияДляНДС(ас_Регистратор.абс_ПериодОтражения,
																									Неопределено,
																									Неопределено);
		КонецЕсли;  
		
	ИначеЕсли ас_Регистратор.Метаданные().Реквизиты.Найти("КорректируемыйПериод") <> Неопределено И ЗначениеЗаполнено(ас_Регистратор.КорректируемыйПериод) Тогда
		
		НовоеЗначениеПериодОтражения = ?(ЭтоНеСчетНДС, ПолучитьПериодНДСПоДате(ас_Регистратор.КорректируемыйПериод,НужнаяГруппаНеНДС), 
														ПолучитьПериодНДСПоДатеКвартал(ас_Регистратор.КорректируемыйПериод,НужнаяГруппаНДС));
		
	Иначе
		
		// определим период по дате документа
		Если ЗначениеЗаполнено(ас_Регистратор) Тогда 
			НовоеЗначениеПериодОтражения = ?(ЭтоНеСчетНДС, ПолучитьПериодНДСПоДате(ас_Регистратор.Дата,НужнаяГруппаНеНДС), 
															ПолучитьПериодНДСПоДатеКвартал(ас_Регистратор.Дата,НужнаяГруппаНДС));
		Иначе
			НовоеЗначениеПериодОтражения = ?(ЭтоНеСчетНДС, ПолучитьПериодНДСПоДате(Проводка.Период,НужнаяГруппаНеНДС), 
															ПолучитьПериодНДСПоДатеКвартал(Проводка.Период,НужнаяГруппаНДС));
		КонецЕсли;
		
	КонецЕсли;
	
	Если не НовоеЗначениеПериодОтражения = Неопределено Тогда
		БухгалтерскийУчет.УстановитьСубконто(ЗначениеСчета, Проводка["Субконто"+ВидДтКт], "ас_ПериодыОтражения", НовоеЗначениеПериодОтражения);
	КонецЕсли;	
	
КонецПроцедуры	

Функция абс_СубконтоНДС_Исключение(Знач Счет_68_02, Знач Субконто)
	
	Если не Счет_68_02 = ПланыСчетов.Хозрасчетный.НДС Тогда
		Возврат ложь;
	КонецЕсли;	
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	СписокЗначений.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
	СписокЗначений.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	
	Возврат не СписокЗначений.НайтиПоЗначению(Субконто) = Неопределено;
	
КонецФункции

Функция ЭтоНеСчетНДС(Счет)
	
	Возврат не Счет = ПланыСчетов.Хозрасчетный.НДС;
	
КонецФункции
//\\АБС ВСТАВКА №44479,37834 КОНЕЦ

Функция ПроверитьЗаполнениеАналитики(СчетДт, СчетКт, СубконтоДт, СубконтоКт, Период)
	//1) По Дт и Кт 79
	//2) По Дт 20, 25, 26, 44, 91.02
	//3) По Кт 90.01.1
	
	РезОтказа=Ложь;	
	Если ЗначениеЗаполнено(СчетДт) Тогда
		Если СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты) 
			или СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_)
			или СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) 
			или СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) 
			или СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу)
			или СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеРасходы) 
			Тогда
			
			Для Каждого Субконто из СубконтоДт Цикл
				
				Если НЕ ЗначениеЗаполнено(Субконто.Значение) и Субконто.Ключ <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено субконто" + " (" + Субконто.Ключ + ") счета "+Строка(СчетДт));
					РезОтказа=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетКт) Тогда
		Если СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты) 
			или СчетКт=ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД
			или СчетКт=ПланыСчетов.Хозрасчетный.ПрочиеДоходы
			Тогда

			Для Каждого Субконто из СубконтоКт Цикл
				Если НЕ ЗначениеЗаполнено(Субконто.Значение) и Субконто.Ключ <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ас_ПериодыОтражения Тогда
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено субконто" + " (" + Субконто.Ключ + ") счета "+Строка(СчетКт));
					РезОтказа=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	//АБС Коломиец+
	Если ЗначениеЗаполнено(СчетДт) Тогда
		Если СчетДт = ПланыСчетов.Хозрасчетный.РасчетныеСчета 
			или СчетДт = ПланыСчетов.Хозрасчетный.ВалютныеСчета
			или СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета)  
			Тогда
			
			Для Каждого Субконто из СубконтоДт Цикл
				
				Если Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств Тогда
					Если Не ЗначениеЗаполнено(Субконто.Значение)  Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено субконто" + " (" + Субконто.Ключ + ") счета "+Строка(СчетДт));
						РезОтказа=Истина;
						Прервать;
					КонецЕсли;
					Если Субконто.Значение.абс_НеИспользовать  Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Субконто" + " (" + Субконто.Ключ + ") счета "+Строка(СчетДт) + ": статья движения денежных средств не используется");
						РезОтказа=Истина;
						Прервать;
					КонецЕсли;					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетКт) Тогда
		Если СчетКт = ПланыСчетов.Хозрасчетный.РасчетныеСчета 
			или СчетКт = ПланыСчетов.Хозрасчетный.ВалютныеСчета
			или СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета)  
			Тогда
			
			Для Каждого Субконто из СубконтоКт Цикл
				
				Если Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств Тогда
					Если Не ЗначениеЗаполнено(Субконто.Значение)  Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено субконто" + " (" + Субконто.Ключ + ") счета "+Строка(СчетКт));
						РезОтказа=Истина;
						Прервать;
					КонецЕсли;
					Если Субконто.Значение.абс_НеИспользовать  Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Субконто" + " (" + Субконто.Ключ + ") счета "+Строка(СчетКт) + ": статья движения денежных средств не используется");
						РезОтказа=Истина;
						Прервать;
					КонецЕсли;					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;		
	//АБС-
	
	//Бобылев А.А. 19.02.18 77244218 
	//// АБС ВСТАВКА АБС-Ф 3685
	//Если ЗначениеЗаполнено(СчетДт) Тогда
	//	Если СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) Тогда
	//		
	//		НГ = СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы];
	//		
	//		Если ЗначениеЗаполнено(НГ) Тогда
	//			Если ЗначениеЗаполнено(НГ.абс_ДатаЗакрытия) И КонецДня(НГ.абс_ДатаЗакрытия) < Период Тогда      
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Номенклатурная группа " + НГ + " (" + СокрЛП(НГ.Код) + ") закрыта " + НГ.абс_ДатаЗакрытия + ".");
	//				РезОтказа=Истина;
	//            КонецЕсли;
	//		КонецЕсли;	
	//	КонецЕсли;
	//		
	//	Если СчетДт = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков ИЛИ 
	//		 СчетДт = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования ИЛИ 
	//		 СчетДт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Тогда
	//		 
	//		Объект = СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства];
	//		
	//		Если ЗначениеЗаполнено(Объект) Тогда
	//			Если ЗначениеЗаполнено(Объект.абс_ДатаЗакрытия) И КонецДня(Объект.абс_ДатаЗакрытия) < Период Тогда      
	//				ttk_ОбщегоНазначения.СообщитьОбОшибке("Объект строительства " + Объект + " (" + СокрЛП(Объект.Код) + ") закрыт " + Объект.абс_ДатаЗакрытия + ".");
	//				РезОтказа=Истина;
	//            КонецЕсли;
	//		КонецЕсли; 
	//	КонецЕсли;
	//КонецЕсли;	
	//// АБС ВСТАВКА АБС-Ф 3685 КОНЕЦ
	
	//Бобылев А.А. 19.02.18 77244218 ------------------------
	
	//АБС ВСТАВКА №000019653 НАЧАЛО
	//АБС ИЗМЕНЕНИЕ 54760  24.12.2014 10:28:14  Попов
	//Если Константы.абс_ЗаполнятьСпособСтроительстваНаСчет_08_03.Получить() Тогда
	   Если глЗначениеПеременной("абс_ЗаполнятьСпособСтроительстваНаСчет_08_03") Тогда

		//АБС ИЗМЕНЕНИЕ 54760 КОНЕЦ
		Если ЗначениеЗаполнено(СчетДт) 
			и СчетДт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств
			и не ЗначениеЗаполнено(СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства]) Тогда
        	ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено проведение, если не указана третья аналитика на сч. 08.03, «способ строительства»",РезОтказа);
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетКт) 
			и СчетКт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств
			и не ЗначениеЗаполнено(СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства]) Тогда
        	ttk_ОбщегоНазначения.СообщитьОбОшибке("Запрещено проведение, если не указана третья аналитика на сч. 08.03, «способ строительства»",РезОтказа);
		КонецЕсли;		
	КонецЕсли;	
	//\\АБС ВСТАВКА №000019653 КОНЕЦ
	
	// АБС ВСТАВКА Фролов 20120720
	Если ЗначениеЗаполнено(СчетДт) Тогда //АБС Коломиец 20120731
		Если СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
			Если ЗначениеЗаполнено(СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы]) Тогда	
				Если НЕ СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы].абс_Статус = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Статья прочих доходов и расходов " + СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы] + " не используется.", РезОтказа);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетКт) Тогда //АБС Коломиец 20120731
		Если СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
			Если ЗначениеЗаполнено(СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы]) Тогда	
				Если НЕ СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы].абс_Статус = Перечисления.абс_СтатусыНоменклатуры.Использование Тогда
					
					ttk_ОбщегоНазначения.СообщитьОбОшибке("Статья прочих доходов и расходов " + СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы] + " не используется.", РезОтказа);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	// АБС ВСТАВКА Фролов 20120720 КОНЕЦ
	
	//АБС_Родин
	//АБС ИЗМЕНЕНИЕ   23.12.2014 17:37:40  Попов
	//Если Константы.абс_ИспользуетсяМеханизмСогласованияОС.Получить() Тогда
	  Если глЗначениеПеременной("абс_ИспользуетсяМеханизмСогласованияОС") Тогда
		//АБС ИЗМЕНЕНИЕ  КОНЕЦ
		Если ЗначениеЗаполнено(СчетДт) Тогда
			Если СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] <> Неопределено Тогда
				Если ЗначениеЗаполнено(СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства].абс_СтатусОС) Тогда
					Если СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства].абс_СтатусОС <> Перечисления.абс_СтатусыОС.Согласовано Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] + " должно находиться в статусе согласовано!");
						РезОтказа=Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетКт) Тогда
			Если СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] <> Неопределено Тогда
				Если ЗначениеЗаполнено(СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства].абс_СтатусОС) Тогда
					Если СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства].абс_СтатусОС <> Перечисления.абс_СтатусыОС.Согласовано  Тогда
						ttk_ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] + " должно находиться в статусе согласовано!");
						РезОтказа=Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//АБС_Родин
		
	Возврат РезОтказа;
	
КонецФункции

// АБС Коломиец начало
Функция ПолучитьПериодНДСПоДатеМесяц(ДатаПериода)
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	НомерМесяца = Месяц(ДатаПериода);
	НомерМесяца = ?(НомерМесяца<10, "0" + СокрЛП(НомерМесяца), СокрЛП(НомерМесяца));
	КодПоиска = СокрЛП(НомерГода) + СокрЛП(НомерМесяца);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоКоду(КодПоиска);
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьПериодНДСПоДатеКвартал(ДатаПериода,НужнаяГруппа = Неопределено)
	
	//АБС ВСТАВКА 18677 НАЧАЛО
	Если НужнаяГруппа = Неопределено Тогда
		НужнаяГруппа = абс_СерверныеФункции.абс_ВыбиратьПериодОтраженияДляНДС();
	КонецЕсли;
	//\\АБС ВСТАВКА 18677 КОНЕЦ	
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	Квартал = НачалоКвартала(ДатаПериода);
    НомерМесяца = Месяц(Квартал);

	Если НомерМесяца = 1 Тогда
		НомерКвартала = 1;
	ИначеЕсли НомерМесяца = 4 Тогда
		НомерКвартала = 2;
	ИначеЕсли НомерМесяца = 7 Тогда
		НомерКвартала = 3;
	ИначеЕсли НомерМесяца = 10 Тогда
		НомерКвартала = 4;
	КонецЕсли;
	
	КодПоиска = СокрЛП(НомерГода) + СокрЛП(НомерКвартала);
// {{KM WARE Семенов И.С. Заявка №  15.07.2015 начало
// ускорение
	Элемент=kwr_ОбщиеСерверКлиентПовтИсп.НайтиВСправочнике_ас_ПериодыОтражения(КодПоиска,НужнаяГруппа);
// }}KM WARE Семенов И.С. Заявка №  15.07.2015 окончание
	
	Возврат Элемент;
	
КонецФункции

Функция ПолучитьПериодНДСПоДате(ДатаПериода,НужнаяГруппа = Неопределено)
	
	//АБС ВСТАВКА 18677 НАЧАЛО
	Если НужнаяГруппа = Неопределено Тогда
		НужнаяГруппа = глЗначениеПеременной("абс_КонтрольПоГруппеПериодаОтраженияВСчетах");
	КонецЕсли;
	//\\АБС ВСТАВКА 18677 КОНЕЦ
	
	НомерГода = СтрЗаменить(СтрЗаменить(СокрЛП(Год(ДатаПериода)), " ",""), Символы.НПП, "");
	КодПоиска = СокрЛП(НомерГода);
	Элемент = Справочники.ас_ПериодыОтражения.НайтиПоНаименованию(КодПоиска,,НужнаяГруппа);  		
	Возврат Элемент; 		
		   	
КонецФункции
// АБС Коломиец окончание 

Функция ЭлементВНужнойПапке(СчетПроводки,ЭлементПериодыОтражения,НужнаяГруппаНеНДС,НужнаяГруппаНДС, ДопКонтроль = Ложь)
	
	Если ЭтоНеСчетНДС(СчетПроводки) Тогда
		Возврат ЭлементПериодыОтражения.ПринадлежитЭлементу(НужнаяГруппаНеНДС);// или ?(ДопКонтроль,ЭлементПериодыОтражения.ПринадлежитЭлементу(НужнаяГруппаНДС),Ложь);	
	Иначе
		Возврат ЭлементПериодыОтражения.ПринадлежитЭлементу(НужнаяГруппаНДС);
	КонецЕсли;	
	
КонецФункции


//АБС ВСТАВКА   03.06.2014  Навценя

Процедура ПроверитьКонтролируемыеДоговора(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЭтотОбъект[0].Организация) Тогда 
		Если НЕ ЭтотОбъект[0].Организация.абс_КонтрольОборотовПоДоговорам Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Регистратор =  Отбор.Найти("Регистратор");
	Если Регистратор = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Регистратор = Регистратор.Значение;
	Если НЕ ЗначениеЗаполнено(Регистратор) Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоПлатеж = ((ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")) ИЛИ (ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"))); 
	МассивДоговоров = Новый Массив;
	Период = Неопределено;
	
	Для Каждого строка из ЭтотОбъект Цикл
		Если НЕ строка.Организация.абс_КонтрольОборотовПоДоговорам Тогда
			Продолжить;
		КонецЕсли;
		Период = строка.Период; 
		Договор = строка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры];
		Если ЗначениеЗаполнено(Договор) Тогда 
			МассивДоговоров.Добавить(Договор);
		КонецЕсли;
		Договор = строка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры];
		Если ЗначениеЗаполнено(Договор) Тогда 
			МассивДоговоров.Добавить(Договор);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДоговоров.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	т.Договор,
	                      |	т.Период,
	                      |	т.Договор.Организация КАК Организация
	                      |ИЗ
	                      |	РегистрСведений.абс_КонтролируемыеДоговора.СрезПоследних(
	                      |			&Период,
	                      |			Договор В (&МассивДоговоров)
	                      |				И ВЫБОР
	                      |					КОГДА &ЭтоПлатеж
	                      |						ТОГДА НЕ РазрешитьПлатежи
	                      |					ИНАЧЕ ИСТИНА
	                      |				КОНЕЦ) КАК т
	                      |ГДЕ
	                      |	т.Договор В(&МассивДоговоров)");
							
	Запрос.УстановитьПараметр("Период", 			Период);
	Запрос.УстановитьПараметр("МассивДоговоров", 	МассивДоговоров);
	Запрос.УстановитьПараметр("ЭтоПлатеж", 			ЭтоПлатеж);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Выборка = Результат.Выбрать();
	
	ШаблонОшибки = "С %1 запрещено отражение операций по организации %2 по договору %3.";
	Пока Выборка.Следующий() Цикл 
		ttk_ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, 
									Формат(Выборка.Период, "ДФ=dd.MM.yyyy"), Выборка.Организация, Выборка.Договор));
	КонецЦикла;
			
КонецПроцедуры

//АБС ВСТАВКА  КОНЕЦ

//АБС ВСТАВКА 46201  29.09.2014 15:27:28  Шамов
// При формировании проводок по 000.10 счету в ДЗО необходимо на системном уровне 
// добавить проверку отсутствия на 63 счете остатков по контрагентам, указанным в 
// регистре сведений «Контрагенты ВГР» 
// то есть - запретить проводки Дт 000.10 Кт 63 по ДЗО по контрагентам, соответствующим
// этому ДЗО как источнику
Процедура Проверить_00010_63(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли; 
	
	Регистратор =  Отбор.Найти("Регистратор");
	Если Регистратор = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Регистратор = Регистратор.Значение;
	Если НЕ ЗначениеЗаполнено(Регистратор) Тогда 
		Возврат;
	КонецЕсли;
	
	тзОрганизацияКонтрагент = Новый ТаблицаЗначений;
	тзОрганизацияКонтрагент.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	тзОрганизацияКонтрагент.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

	ВидСубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	
	мСчета_00010 = Новый Массив;
	мСчета_00010.Добавить(ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваПринимаемые);
	мСчета_00010.Добавить(ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваВРублях);
	мСчета_00010.Добавить(ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваВУЕ);
	мСчета_00010.Добавить(ПланыСчетов.Хозрасчетный.абс_ИмуществоИОбязательстваВВалюте);
	
	мСчета63 = Новый Массив;
	мСчета63.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	мСчета63.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("63.01"));
	мСчета63.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("63.02"));
	мСчета63.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("63.02"));	
	
	Для Каждого Строка из ЭтотОбъект Цикл
		Если Строка.Организация.абс_СтатусОрганизации <> Перечисления.абс_СтатусОрганизации.ДЗО Тогда
			Продолжить;
		КонецЕсли;
		Если мСчета_00010.Найти(Строка.СчетДт) = Неопределено
			ИЛИ мСчета63.Найти(Строка.СчетКт) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТЗ = тзОрганизацияКонтрагент.Добавить();
		СтрокаТЗ.Организация = Строка.Организация;
		СтрокаТЗ.Контрагент = Строка.СубконтоКт[ВидСубконтоКонтрагенты];
		
	КонецЦикла;
	
	Если тзОрганизацияКонтрагент.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тзОрганизацияКонтрагент.Свернуть("Организация, Контрагент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Организация,
	               |	ТЗ.Контрагент
	               |ПОМЕСТИТЬ ВТ_ТЗ
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтрагентыВГР.ОрганизацияИсточник,
	               |	КонтрагентыВГР.ОрганизацияПриемник,
	               |	КонтрагентыВГР.КонтрагентИсточника,
	               |	КонтрагентыВГР.КонтрагентПриемника
	               |ИЗ
	               |	РегистрСведений.абс_КонтрагентыВГР КАК КонтрагентыВГР
	               |ГДЕ
	               |	(КонтрагентыВГР.ОрганизацияИсточник, КонтрагентыВГР.КонтрагентИсточника) В
	               |			(ВЫБРАТЬ
	               |				А.Организация,
	               |				А.Контрагент
	               |			ИЗ
	               |				ВТ_ТЗ КАК А)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТЗ";
				   
	Запрос.УстановитьПараметр("ТЗ", тзОрганизацияКонтрагент);
	
	Результаты = Запрос.ВыполнитьПакет();
	Если НЕ Результаты[1].Пустой() Тогда
		ttk_ОбщегоНазначения.СообщитьОбОшибке("Контрагент по 63 счету присутствует в списке контрагентов ВГР по ДЗО!");	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
//АБС ВСТАВКА 46201 КОНЕЦ
